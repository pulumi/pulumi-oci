// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Managed Instance Group Available Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists available software sources for a specified managed instance group. Filter the list against a variety of
// criteria including but not limited to its name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetManagedInstanceGroupAvailableSoftwareSources(ctx, &osmanagementhub.GetManagedInstanceGroupAvailableSoftwareSourcesArgs{
//				ManagedInstanceGroupId: oci_os_management_hub_managed_instance_group.Test_managed_instance_group.Id,
//				CompartmentId:          pulumi.StringRef(_var.Compartment_id),
//				DisplayNames:           _var.Managed_instance_group_available_software_source_display_name,
//				DisplayNameContains:    pulumi.StringRef(_var.Managed_instance_group_available_software_source_display_name_contains),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedInstanceGroupAvailableSoftwareSources(ctx *pulumi.Context, args *GetManagedInstanceGroupAvailableSoftwareSourcesArgs, opts ...pulumi.InvokeOption) (*GetManagedInstanceGroupAvailableSoftwareSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedInstanceGroupAvailableSoftwareSourcesResult
	err := ctx.Invoke("oci:OsManagementHub/getManagedInstanceGroupAvailableSoftwareSources:getManagedInstanceGroupAvailableSoftwareSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedInstanceGroupAvailableSoftwareSources.
type GetManagedInstanceGroupAvailableSoftwareSourcesArgs struct {
	// The OCID of the compartment that contains the resources to list.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames []string                                                `pulumi:"displayNames"`
	Filters      []GetManagedInstanceGroupAvailableSoftwareSourcesFilter `pulumi:"filters"`
	// The managed instance group OCID.
	ManagedInstanceGroupId string `pulumi:"managedInstanceGroupId"`
}

// A collection of values returned by getManagedInstanceGroupAvailableSoftwareSources.
type GetManagedInstanceGroupAvailableSoftwareSourcesResult struct {
	// The list of available_software_source_collection.
	AvailableSoftwareSourceCollections []GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollection `pulumi:"availableSoftwareSourceCollections"`
	// The OCID for the compartment.
	CompartmentId       *string `pulumi:"compartmentId"`
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// User friendly name for the software source.
	DisplayNames []string                                                `pulumi:"displayNames"`
	Filters      []GetManagedInstanceGroupAvailableSoftwareSourcesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                     string `pulumi:"id"`
	ManagedInstanceGroupId string `pulumi:"managedInstanceGroupId"`
}

func GetManagedInstanceGroupAvailableSoftwareSourcesOutput(ctx *pulumi.Context, args GetManagedInstanceGroupAvailableSoftwareSourcesOutputArgs, opts ...pulumi.InvokeOption) GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetManagedInstanceGroupAvailableSoftwareSourcesResult, error) {
			args := v.(GetManagedInstanceGroupAvailableSoftwareSourcesArgs)
			r, err := GetManagedInstanceGroupAvailableSoftwareSources(ctx, &args, opts...)
			var s GetManagedInstanceGroupAvailableSoftwareSourcesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput)
}

// A collection of arguments for invoking getManagedInstanceGroupAvailableSoftwareSources.
type GetManagedInstanceGroupAvailableSoftwareSourcesOutputArgs struct {
	// The OCID of the compartment that contains the resources to list.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames pulumi.StringArrayInput                                         `pulumi:"displayNames"`
	Filters      GetManagedInstanceGroupAvailableSoftwareSourcesFilterArrayInput `pulumi:"filters"`
	// The managed instance group OCID.
	ManagedInstanceGroupId pulumi.StringInput `pulumi:"managedInstanceGroupId"`
}

func (GetManagedInstanceGroupAvailableSoftwareSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceGroupAvailableSoftwareSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getManagedInstanceGroupAvailableSoftwareSources.
type GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput struct{ *pulumi.OutputState }

func (GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceGroupAvailableSoftwareSourcesResult)(nil)).Elem()
}

func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) ToGetManagedInstanceGroupAvailableSoftwareSourcesResultOutput() GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput {
	return o
}

func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) ToGetManagedInstanceGroupAvailableSoftwareSourcesResultOutputWithContext(ctx context.Context) GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput {
	return o
}

// The list of available_software_source_collection.
func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) AvailableSoftwareSourceCollections() GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupAvailableSoftwareSourcesResult) []GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollection {
		return v.AvailableSoftwareSourceCollections
	}).(GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionArrayOutput)
}

// The OCID for the compartment.
func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupAvailableSoftwareSourcesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupAvailableSoftwareSourcesResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

// User friendly name for the software source.
func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) DisplayNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupAvailableSoftwareSourcesResult) []string { return v.DisplayNames }).(pulumi.StringArrayOutput)
}

func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) Filters() GetManagedInstanceGroupAvailableSoftwareSourcesFilterArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupAvailableSoftwareSourcesResult) []GetManagedInstanceGroupAvailableSoftwareSourcesFilter {
		return v.Filters
	}).(GetManagedInstanceGroupAvailableSoftwareSourcesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupAvailableSoftwareSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput) ManagedInstanceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupAvailableSoftwareSourcesResult) string { return v.ManagedInstanceGroupId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedInstanceGroupAvailableSoftwareSourcesResultOutput{})
}
