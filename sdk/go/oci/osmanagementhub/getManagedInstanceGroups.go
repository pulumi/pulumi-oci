// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Managed Instance Groups in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists managed instance groups that match the specified compartment or managed instance group OCID. Filter the
// list against a variety of criteria including but not limited to its name, status, architecture, and OS family.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetManagedInstanceGroups(ctx, &osmanagementhub.GetManagedInstanceGroupsArgs{
//				ArchType:               pulumi.StringRef(managedInstanceGroupArchType),
//				CompartmentId:          pulumi.StringRef(compartmentId),
//				DisplayNames:           managedInstanceGroupDisplayName,
//				DisplayNameContains:    pulumi.StringRef(managedInstanceGroupDisplayNameContains),
//				ManagedInstanceGroupId: pulumi.StringRef(testManagedInstanceGroup.Id),
//				OsFamily:               pulumi.StringRef(managedInstanceGroupOsFamily),
//				SoftwareSourceId:       pulumi.StringRef(testSoftwareSource.Id),
//				State:                  pulumi.StringRef(managedInstanceGroupState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetManagedInstanceGroups(ctx *pulumi.Context, args *GetManagedInstanceGroupsArgs, opts ...pulumi.InvokeOption) (*GetManagedInstanceGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedInstanceGroupsResult
	err := ctx.Invoke("oci:OsManagementHub/getManagedInstanceGroups:getManagedInstanceGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedInstanceGroups.
type GetManagedInstanceGroupsArgs struct {
	// A filter to return only profiles that match the given archType.
	ArchType *string `pulumi:"archType"`
	// The OCID of the compartment that contains the resources to list.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames []string                         `pulumi:"displayNames"`
	Filters      []GetManagedInstanceGroupsFilter `pulumi:"filters"`
	// The OCID of the managed instance group for which to list resources.
	ManagedInstanceGroupId *string `pulumi:"managedInstanceGroupId"`
	// A filter to return only profiles that match the given osFamily.
	OsFamily *string `pulumi:"osFamily"`
	// The OCID for the software source.
	SoftwareSourceId *string `pulumi:"softwareSourceId"`
	// A filter to return only resources their lifecycle state matches the given lifecycle state.
	State *string `pulumi:"state"`
}

// A collection of values returned by getManagedInstanceGroups.
type GetManagedInstanceGroupsResult struct {
	// The CPU architecture of the instances in the managed instance group.
	ArchType *string `pulumi:"archType"`
	// The OCID of the tenancy containing the managed instance group.
	CompartmentId       *string `pulumi:"compartmentId"`
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// Software source name.
	DisplayNames []string                         `pulumi:"displayNames"`
	Filters      []GetManagedInstanceGroupsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of managed_instance_group_collection.
	ManagedInstanceGroupCollections []GetManagedInstanceGroupsManagedInstanceGroupCollection `pulumi:"managedInstanceGroupCollections"`
	ManagedInstanceGroupId          *string                                                  `pulumi:"managedInstanceGroupId"`
	// The operating system type of the instances in the managed instance group.
	OsFamily         *string `pulumi:"osFamily"`
	SoftwareSourceId *string `pulumi:"softwareSourceId"`
	// The current state of the managed instance group.
	State *string `pulumi:"state"`
}

func GetManagedInstanceGroupsOutput(ctx *pulumi.Context, args GetManagedInstanceGroupsOutputArgs, opts ...pulumi.InvokeOption) GetManagedInstanceGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetManagedInstanceGroupsResult, error) {
			args := v.(GetManagedInstanceGroupsArgs)
			r, err := GetManagedInstanceGroups(ctx, &args, opts...)
			var s GetManagedInstanceGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetManagedInstanceGroupsResultOutput)
}

// A collection of arguments for invoking getManagedInstanceGroups.
type GetManagedInstanceGroupsOutputArgs struct {
	// A filter to return only profiles that match the given archType.
	ArchType pulumi.StringPtrInput `pulumi:"archType"`
	// The OCID of the compartment that contains the resources to list.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames pulumi.StringArrayInput                  `pulumi:"displayNames"`
	Filters      GetManagedInstanceGroupsFilterArrayInput `pulumi:"filters"`
	// The OCID of the managed instance group for which to list resources.
	ManagedInstanceGroupId pulumi.StringPtrInput `pulumi:"managedInstanceGroupId"`
	// A filter to return only profiles that match the given osFamily.
	OsFamily pulumi.StringPtrInput `pulumi:"osFamily"`
	// The OCID for the software source.
	SoftwareSourceId pulumi.StringPtrInput `pulumi:"softwareSourceId"`
	// A filter to return only resources their lifecycle state matches the given lifecycle state.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetManagedInstanceGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getManagedInstanceGroups.
type GetManagedInstanceGroupsResultOutput struct{ *pulumi.OutputState }

func (GetManagedInstanceGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceGroupsResult)(nil)).Elem()
}

func (o GetManagedInstanceGroupsResultOutput) ToGetManagedInstanceGroupsResultOutput() GetManagedInstanceGroupsResultOutput {
	return o
}

func (o GetManagedInstanceGroupsResultOutput) ToGetManagedInstanceGroupsResultOutputWithContext(ctx context.Context) GetManagedInstanceGroupsResultOutput {
	return o
}

// The CPU architecture of the instances in the managed instance group.
func (o GetManagedInstanceGroupsResultOutput) ArchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) *string { return v.ArchType }).(pulumi.StringPtrOutput)
}

// The OCID of the tenancy containing the managed instance group.
func (o GetManagedInstanceGroupsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetManagedInstanceGroupsResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

// Software source name.
func (o GetManagedInstanceGroupsResultOutput) DisplayNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) []string { return v.DisplayNames }).(pulumi.StringArrayOutput)
}

func (o GetManagedInstanceGroupsResultOutput) Filters() GetManagedInstanceGroupsFilterArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) []GetManagedInstanceGroupsFilter { return v.Filters }).(GetManagedInstanceGroupsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedInstanceGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of managed_instance_group_collection.
func (o GetManagedInstanceGroupsResultOutput) ManagedInstanceGroupCollections() GetManagedInstanceGroupsManagedInstanceGroupCollectionArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) []GetManagedInstanceGroupsManagedInstanceGroupCollection {
		return v.ManagedInstanceGroupCollections
	}).(GetManagedInstanceGroupsManagedInstanceGroupCollectionArrayOutput)
}

func (o GetManagedInstanceGroupsResultOutput) ManagedInstanceGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) *string { return v.ManagedInstanceGroupId }).(pulumi.StringPtrOutput)
}

// The operating system type of the instances in the managed instance group.
func (o GetManagedInstanceGroupsResultOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) *string { return v.OsFamily }).(pulumi.StringPtrOutput)
}

func (o GetManagedInstanceGroupsResultOutput) SoftwareSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) *string { return v.SoftwareSourceId }).(pulumi.StringPtrOutput)
}

// The current state of the managed instance group.
func (o GetManagedInstanceGroupsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceGroupsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedInstanceGroupsResultOutput{})
}
