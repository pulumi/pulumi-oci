// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Profile Available Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists available software sources for a specified profile. Filter the list against a variety of criteria including but not limited to the software source name. The results list only software sources that have not already been added to the profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.GetProfileAvailableSoftwareSources(ctx, &osmanagementhub.GetProfileAvailableSoftwareSourcesArgs{
//				ProfileId:           testProfile.Id,
//				CompartmentId:       pulumi.StringRef(compartmentId),
//				DisplayNames:        profileAvailableSoftwareSourceDisplayName,
//				DisplayNameContains: pulumi.StringRef(profileAvailableSoftwareSourceDisplayNameContains),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProfileAvailableSoftwareSources(ctx *pulumi.Context, args *GetProfileAvailableSoftwareSourcesArgs, opts ...pulumi.InvokeOption) (*GetProfileAvailableSoftwareSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProfileAvailableSoftwareSourcesResult
	err := ctx.Invoke("oci:OsManagementHub/getProfileAvailableSoftwareSources:getProfileAvailableSoftwareSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProfileAvailableSoftwareSources.
type GetProfileAvailableSoftwareSourcesArgs struct {
	// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames []string                                   `pulumi:"displayNames"`
	Filters      []GetProfileAvailableSoftwareSourcesFilter `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
	ProfileId string `pulumi:"profileId"`
}

// A collection of values returned by getProfileAvailableSoftwareSources.
type GetProfileAvailableSoftwareSourcesResult struct {
	// The list of available_software_source_collection.
	AvailableSoftwareSourceCollections []GetProfileAvailableSoftwareSourcesAvailableSoftwareSourceCollection `pulumi:"availableSoftwareSourceCollections"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId       *string `pulumi:"compartmentId"`
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// User-friendly name for the software source.
	DisplayNames []string                                   `pulumi:"displayNames"`
	Filters      []GetProfileAvailableSoftwareSourcesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProfileId string `pulumi:"profileId"`
}

func GetProfileAvailableSoftwareSourcesOutput(ctx *pulumi.Context, args GetProfileAvailableSoftwareSourcesOutputArgs, opts ...pulumi.InvokeOption) GetProfileAvailableSoftwareSourcesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProfileAvailableSoftwareSourcesResultOutput, error) {
			args := v.(GetProfileAvailableSoftwareSourcesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OsManagementHub/getProfileAvailableSoftwareSources:getProfileAvailableSoftwareSources", args, GetProfileAvailableSoftwareSourcesResultOutput{}, options).(GetProfileAvailableSoftwareSourcesResultOutput), nil
		}).(GetProfileAvailableSoftwareSourcesResultOutput)
}

// A collection of arguments for invoking getProfileAvailableSoftwareSources.
type GetProfileAvailableSoftwareSourcesOutputArgs struct {
	// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames pulumi.StringArrayInput                            `pulumi:"displayNames"`
	Filters      GetProfileAvailableSoftwareSourcesFilterArrayInput `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
	ProfileId pulumi.StringInput `pulumi:"profileId"`
}

func (GetProfileAvailableSoftwareSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileAvailableSoftwareSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getProfileAvailableSoftwareSources.
type GetProfileAvailableSoftwareSourcesResultOutput struct{ *pulumi.OutputState }

func (GetProfileAvailableSoftwareSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileAvailableSoftwareSourcesResult)(nil)).Elem()
}

func (o GetProfileAvailableSoftwareSourcesResultOutput) ToGetProfileAvailableSoftwareSourcesResultOutput() GetProfileAvailableSoftwareSourcesResultOutput {
	return o
}

func (o GetProfileAvailableSoftwareSourcesResultOutput) ToGetProfileAvailableSoftwareSourcesResultOutputWithContext(ctx context.Context) GetProfileAvailableSoftwareSourcesResultOutput {
	return o
}

// The list of available_software_source_collection.
func (o GetProfileAvailableSoftwareSourcesResultOutput) AvailableSoftwareSourceCollections() GetProfileAvailableSoftwareSourcesAvailableSoftwareSourceCollectionArrayOutput {
	return o.ApplyT(func(v GetProfileAvailableSoftwareSourcesResult) []GetProfileAvailableSoftwareSourcesAvailableSoftwareSourceCollection {
		return v.AvailableSoftwareSourceCollections
	}).(GetProfileAvailableSoftwareSourcesAvailableSoftwareSourceCollectionArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
func (o GetProfileAvailableSoftwareSourcesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfileAvailableSoftwareSourcesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetProfileAvailableSoftwareSourcesResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfileAvailableSoftwareSourcesResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

// User-friendly name for the software source.
func (o GetProfileAvailableSoftwareSourcesResultOutput) DisplayNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProfileAvailableSoftwareSourcesResult) []string { return v.DisplayNames }).(pulumi.StringArrayOutput)
}

func (o GetProfileAvailableSoftwareSourcesResultOutput) Filters() GetProfileAvailableSoftwareSourcesFilterArrayOutput {
	return o.ApplyT(func(v GetProfileAvailableSoftwareSourcesResult) []GetProfileAvailableSoftwareSourcesFilter {
		return v.Filters
	}).(GetProfileAvailableSoftwareSourcesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProfileAvailableSoftwareSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfileAvailableSoftwareSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProfileAvailableSoftwareSourcesResultOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfileAvailableSoftwareSourcesResult) string { return v.ProfileId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProfileAvailableSoftwareSourcesResultOutput{})
}
