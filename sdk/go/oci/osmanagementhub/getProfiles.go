// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Profiles in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a
// variety of criteria including but not limited to its name, status, vendor name, and architecture type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetProfiles(ctx, &osmanagementhub.GetProfilesArgs{
//				ArchType:            pulumi.StringRef(_var.Profile_arch_type),
//				CompartmentId:       pulumi.StringRef(_var.Compartment_id),
//				DisplayNames:        _var.Profile_display_name,
//				DisplayNameContains: pulumi.StringRef(_var.Profile_display_name_contains),
//				OsFamily:            pulumi.StringRef(_var.Profile_os_family),
//				ProfileId:           pulumi.StringRef(oci_os_management_hub_profile.Test_profile.Id),
//				ProfileTypes:        _var.Profile_profile_type,
//				State:               pulumi.StringRef(_var.Profile_state),
//				VendorName:          pulumi.StringRef(_var.Profile_vendor_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProfiles(ctx *pulumi.Context, args *GetProfilesArgs, opts ...pulumi.InvokeOption) (*GetProfilesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProfilesResult
	err := ctx.Invoke("oci:OsManagementHub/getProfiles:getProfiles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProfiles.
type GetProfilesArgs struct {
	// A filter to return only profiles that match the given archType.
	ArchType *string `pulumi:"archType"`
	// The OCID of the compartment that contains the resources to list.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames []string            `pulumi:"displayNames"`
	Filters      []GetProfilesFilter `pulumi:"filters"`
	// A filter to return only profiles that match the given osFamily.
	OsFamily *string `pulumi:"osFamily"`
	// The OCID of the registration profile.
	ProfileId *string `pulumi:"profileId"`
	// A filter to return registration profiles that match the given profileType.
	ProfileTypes []string `pulumi:"profileTypes"`
	// A filter to return only registration profile whose lifecycleState matches the given lifecycleState.
	State *string `pulumi:"state"`
	// A filter to return only profiles that match the given vendorName.
	VendorName *string `pulumi:"vendorName"`
}

// A collection of values returned by getProfiles.
type GetProfilesResult struct {
	// The architecture type.
	ArchType *string `pulumi:"archType"`
	// The OCID of the tenancy containing the registration profile.
	CompartmentId       *string `pulumi:"compartmentId"`
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// Software source name.
	DisplayNames []string            `pulumi:"displayNames"`
	Filters      []GetProfilesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id *string `pulumi:"id"`
	// The operating system family.
	OsFamily *string `pulumi:"osFamily"`
	// The list of profile_collection.
	ProfileCollections []GetProfilesProfileCollection `pulumi:"profileCollections"`
	ProfileId          *string                        `pulumi:"profileId"`
	// The type of Profile. One of SOFTWARESOURCE, GROUP or LIFECYCLE.
	ProfileTypes []string `pulumi:"profileTypes"`
	// The current state of the registration profile.
	State *string `pulumi:"state"`
	// The software source vendor name.
	VendorName *string `pulumi:"vendorName"`
}

func GetProfilesOutput(ctx *pulumi.Context, args GetProfilesOutputArgs, opts ...pulumi.InvokeOption) GetProfilesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProfilesResult, error) {
			args := v.(GetProfilesArgs)
			r, err := GetProfiles(ctx, &args, opts...)
			var s GetProfilesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetProfilesResultOutput)
}

// A collection of arguments for invoking getProfiles.
type GetProfilesOutputArgs struct {
	// A filter to return only profiles that match the given archType.
	ArchType pulumi.StringPtrInput `pulumi:"archType"`
	// The OCID of the compartment that contains the resources to list.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput `pulumi:"displayNameContains"`
	// A filter to return resources that match the given display names.
	DisplayNames pulumi.StringArrayInput     `pulumi:"displayNames"`
	Filters      GetProfilesFilterArrayInput `pulumi:"filters"`
	// A filter to return only profiles that match the given osFamily.
	OsFamily pulumi.StringPtrInput `pulumi:"osFamily"`
	// The OCID of the registration profile.
	ProfileId pulumi.StringPtrInput `pulumi:"profileId"`
	// A filter to return registration profiles that match the given profileType.
	ProfileTypes pulumi.StringArrayInput `pulumi:"profileTypes"`
	// A filter to return only registration profile whose lifecycleState matches the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A filter to return only profiles that match the given vendorName.
	VendorName pulumi.StringPtrInput `pulumi:"vendorName"`
}

func (GetProfilesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfilesArgs)(nil)).Elem()
}

// A collection of values returned by getProfiles.
type GetProfilesResultOutput struct{ *pulumi.OutputState }

func (GetProfilesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfilesResult)(nil)).Elem()
}

func (o GetProfilesResultOutput) ToGetProfilesResultOutput() GetProfilesResultOutput {
	return o
}

func (o GetProfilesResultOutput) ToGetProfilesResultOutputWithContext(ctx context.Context) GetProfilesResultOutput {
	return o
}

// The architecture type.
func (o GetProfilesResultOutput) ArchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.ArchType }).(pulumi.StringPtrOutput)
}

// The OCID of the tenancy containing the registration profile.
func (o GetProfilesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetProfilesResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

// Software source name.
func (o GetProfilesResultOutput) DisplayNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProfilesResult) []string { return v.DisplayNames }).(pulumi.StringArrayOutput)
}

func (o GetProfilesResultOutput) Filters() GetProfilesFilterArrayOutput {
	return o.ApplyT(func(v GetProfilesResult) []GetProfilesFilter { return v.Filters }).(GetProfilesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProfilesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The operating system family.
func (o GetProfilesResultOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.OsFamily }).(pulumi.StringPtrOutput)
}

// The list of profile_collection.
func (o GetProfilesResultOutput) ProfileCollections() GetProfilesProfileCollectionArrayOutput {
	return o.ApplyT(func(v GetProfilesResult) []GetProfilesProfileCollection { return v.ProfileCollections }).(GetProfilesProfileCollectionArrayOutput)
}

func (o GetProfilesResultOutput) ProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.ProfileId }).(pulumi.StringPtrOutput)
}

// The type of Profile. One of SOFTWARESOURCE, GROUP or LIFECYCLE.
func (o GetProfilesResultOutput) ProfileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProfilesResult) []string { return v.ProfileTypes }).(pulumi.StringArrayOutput)
}

// The current state of the registration profile.
func (o GetProfilesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The software source vendor name.
func (o GetProfilesResultOutput) VendorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfilesResult) *string { return v.VendorName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProfilesResultOutput{})
}
