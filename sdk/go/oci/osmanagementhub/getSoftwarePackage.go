// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Package resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Returns information about the specified software package based on its fully qualified name (NVRA or NEVRA).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.GetSoftwarePackage(ctx, &osmanagementhub.GetSoftwarePackageArgs{
//				SoftwarePackageName: testSoftwarePackageOciOsManagementHubSoftwarePackage.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSoftwarePackage(ctx *pulumi.Context, args *GetSoftwarePackageArgs, opts ...pulumi.InvokeOption) (*GetSoftwarePackageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwarePackageResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwarePackage:getSoftwarePackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwarePackage.
type GetSoftwarePackageArgs struct {
	// The name of the software package.
	SoftwarePackageName string `pulumi:"softwarePackageName"`
}

// A collection of values returned by getSoftwarePackage.
type GetSoftwarePackageResult struct {
	// The architecture for which this software was built
	Architecture string `pulumi:"architecture"`
	// Checksum of the file.
	Checksum string `pulumi:"checksum"`
	// Type of the checksum.
	ChecksumType string `pulumi:"checksumType"`
	// List of dependencies for the software package.
	Dependencies []GetSoftwarePackageDependency `pulumi:"dependencies"`
	// Software source description.
	Description string `pulumi:"description"`
	// Software source name.
	DisplayName string `pulumi:"displayName"`
	// List of files for the software package.
	Files []GetSoftwarePackageFile `pulumi:"files"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether this package is the latest version.
	IsLatest bool `pulumi:"isLatest"`
	// The date and time the package was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	LastModifiedDate string `pulumi:"lastModifiedDate"`
	// Unique identifier for the package. Note that this is not an OCID.
	Name string `pulumi:"name"`
	// The OS families the package belongs to.
	OsFamilies []string `pulumi:"osFamilies"`
	// Size of the package in bytes.
	SizeInBytes         string `pulumi:"sizeInBytes"`
	SoftwarePackageName string `pulumi:"softwarePackageName"`
	// List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
	SoftwareSources []GetSoftwarePackageSoftwareSource `pulumi:"softwareSources"`
	// Type of the package.
	Type string `pulumi:"type"`
	// Version of the package.
	Version string `pulumi:"version"`
}

func GetSoftwarePackageOutput(ctx *pulumi.Context, args GetSoftwarePackageOutputArgs, opts ...pulumi.InvokeOption) GetSoftwarePackageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSoftwarePackageResultOutput, error) {
			args := v.(GetSoftwarePackageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OsManagementHub/getSoftwarePackage:getSoftwarePackage", args, GetSoftwarePackageResultOutput{}, options).(GetSoftwarePackageResultOutput), nil
		}).(GetSoftwarePackageResultOutput)
}

// A collection of arguments for invoking getSoftwarePackage.
type GetSoftwarePackageOutputArgs struct {
	// The name of the software package.
	SoftwarePackageName pulumi.StringInput `pulumi:"softwarePackageName"`
}

func (GetSoftwarePackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwarePackageArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwarePackage.
type GetSoftwarePackageResultOutput struct{ *pulumi.OutputState }

func (GetSoftwarePackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwarePackageResult)(nil)).Elem()
}

func (o GetSoftwarePackageResultOutput) ToGetSoftwarePackageResultOutput() GetSoftwarePackageResultOutput {
	return o
}

func (o GetSoftwarePackageResultOutput) ToGetSoftwarePackageResultOutputWithContext(ctx context.Context) GetSoftwarePackageResultOutput {
	return o
}

// The architecture for which this software was built
func (o GetSoftwarePackageResultOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.Architecture }).(pulumi.StringOutput)
}

// Checksum of the file.
func (o GetSoftwarePackageResultOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.Checksum }).(pulumi.StringOutput)
}

// Type of the checksum.
func (o GetSoftwarePackageResultOutput) ChecksumType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.ChecksumType }).(pulumi.StringOutput)
}

// List of dependencies for the software package.
func (o GetSoftwarePackageResultOutput) Dependencies() GetSoftwarePackageDependencyArrayOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) []GetSoftwarePackageDependency { return v.Dependencies }).(GetSoftwarePackageDependencyArrayOutput)
}

// Software source description.
func (o GetSoftwarePackageResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.Description }).(pulumi.StringOutput)
}

// Software source name.
func (o GetSoftwarePackageResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// List of files for the software package.
func (o GetSoftwarePackageResultOutput) Files() GetSoftwarePackageFileArrayOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) []GetSoftwarePackageFile { return v.Files }).(GetSoftwarePackageFileArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwarePackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether this package is the latest version.
func (o GetSoftwarePackageResultOutput) IsLatest() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) bool { return v.IsLatest }).(pulumi.BoolOutput)
}

// The date and time the package was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
func (o GetSoftwarePackageResultOutput) LastModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.LastModifiedDate }).(pulumi.StringOutput)
}

// Unique identifier for the package. Note that this is not an OCID.
func (o GetSoftwarePackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.Name }).(pulumi.StringOutput)
}

// The OS families the package belongs to.
func (o GetSoftwarePackageResultOutput) OsFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) []string { return v.OsFamilies }).(pulumi.StringArrayOutput)
}

// Size of the package in bytes.
func (o GetSoftwarePackageResultOutput) SizeInBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.SizeInBytes }).(pulumi.StringOutput)
}

func (o GetSoftwarePackageResultOutput) SoftwarePackageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.SoftwarePackageName }).(pulumi.StringOutput)
}

// List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
func (o GetSoftwarePackageResultOutput) SoftwareSources() GetSoftwarePackageSoftwareSourceArrayOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) []GetSoftwarePackageSoftwareSource { return v.SoftwareSources }).(GetSoftwarePackageSoftwareSourceArrayOutput)
}

// Type of the package.
func (o GetSoftwarePackageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the package.
func (o GetSoftwarePackageResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackageResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwarePackageResultOutput{})
}
