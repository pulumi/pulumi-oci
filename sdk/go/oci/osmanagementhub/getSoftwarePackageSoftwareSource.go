// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Software Package Software Source in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists the software sources in the tenancy that contain the software package. Filter the list against a
// variety of criteria including but not limited to its name, type, architecture, and OS family.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.GetSoftwarePackageSoftwareSource(ctx, &osmanagementhub.GetSoftwarePackageSoftwareSourceArgs{
//				CompartmentId:         compartmentId,
//				SoftwarePackageName:   testSoftwarePackage.Name,
//				ArchTypes:             softwarePackageSoftwareSourceArchType,
//				Availabilities:        softwarePackageSoftwareSourceAvailability,
//				AvailabilityAnywheres: softwarePackageSoftwareSourceAvailabilityAnywhere,
//				AvailabilityAtOcis:    softwarePackageSoftwareSourceAvailabilityAtOci,
//				DisplayName:           pulumi.StringRef(softwarePackageSoftwareSourceDisplayName),
//				DisplayNameContains:   pulumi.StringRef(softwarePackageSoftwareSourceDisplayNameContains),
//				OsFamilies:            softwarePackageSoftwareSourceOsFamily,
//				SoftwareSourceTypes:   softwarePackageSoftwareSourceSoftwareSourceType,
//				States:                softwarePackageSoftwareSourceState,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSoftwarePackageSoftwareSource(ctx *pulumi.Context, args *LookupSoftwarePackageSoftwareSourceArgs, opts ...pulumi.InvokeOption) (*LookupSoftwarePackageSoftwareSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSoftwarePackageSoftwareSourceResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwarePackageSoftwareSource:getSoftwarePackageSoftwareSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwarePackageSoftwareSource.
type LookupSoftwarePackageSoftwareSourceArgs struct {
	// A filter to return only instances whose architecture type matches the given architecture.
	ArchTypes []string `pulumi:"archTypes"`
	// The availabilities of the software source in a non-OCI environment for a tenancy.
	Availabilities []string `pulumi:"availabilities"`
	// The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
	AvailabilityAnywheres []string `pulumi:"availabilityAnywheres"`
	// The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
	AvailabilityAtOcis []string `pulumi:"availabilityAtOcis"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// A filter to return resources that match the given user-friendly name.
	DisplayName *string `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string                                  `pulumi:"displayNameContains"`
	Filters             []GetSoftwarePackageSoftwareSourceFilter `pulumi:"filters"`
	// A filter to return only resources that match the given operating system family.
	OsFamilies []string `pulumi:"osFamilies"`
	// The name of the software package.
	SoftwarePackageName string `pulumi:"softwarePackageName"`
	// The type of the software source.
	SoftwareSourceTypes []string `pulumi:"softwareSourceTypes"`
	// A filter to return only software sources whose state matches the given state.
	States []string `pulumi:"states"`
}

// A collection of values returned by getSoftwarePackageSoftwareSource.
type LookupSoftwarePackageSoftwareSourceResult struct {
	// The architecture type supported by the software source.
	ArchTypes []string `pulumi:"archTypes"`
	// Availability of the software source (for non-OCI environments).
	Availabilities        []string `pulumi:"availabilities"`
	AvailabilityAnywheres []string `pulumi:"availabilityAnywheres"`
	// Availability of the software source (for Oracle Cloud Infrastructure environments).
	AvailabilityAtOcis []string `pulumi:"availabilityAtOcis"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId string `pulumi:"compartmentId"`
	// User-friendly name.
	DisplayName         *string                                  `pulumi:"displayName"`
	DisplayNameContains *string                                  `pulumi:"displayNameContains"`
	Filters             []GetSoftwarePackageSoftwareSourceFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The OS family the software source belongs to.
	OsFamilies          []string `pulumi:"osFamilies"`
	SoftwarePackageName string   `pulumi:"softwarePackageName"`
	// The list of software_source_collection.
	SoftwareSourceCollections []GetSoftwarePackageSoftwareSourceSoftwareSourceCollection `pulumi:"softwareSourceCollections"`
	// Type of software source.
	SoftwareSourceTypes []string `pulumi:"softwareSourceTypes"`
	// The current state of the software source.
	States []string `pulumi:"states"`
}

func LookupSoftwarePackageSoftwareSourceOutput(ctx *pulumi.Context, args LookupSoftwarePackageSoftwareSourceOutputArgs, opts ...pulumi.InvokeOption) LookupSoftwarePackageSoftwareSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSoftwarePackageSoftwareSourceResultOutput, error) {
			args := v.(LookupSoftwarePackageSoftwareSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OsManagementHub/getSoftwarePackageSoftwareSource:getSoftwarePackageSoftwareSource", args, LookupSoftwarePackageSoftwareSourceResultOutput{}, options).(LookupSoftwarePackageSoftwareSourceResultOutput), nil
		}).(LookupSoftwarePackageSoftwareSourceResultOutput)
}

// A collection of arguments for invoking getSoftwarePackageSoftwareSource.
type LookupSoftwarePackageSoftwareSourceOutputArgs struct {
	// A filter to return only instances whose architecture type matches the given architecture.
	ArchTypes pulumi.StringArrayInput `pulumi:"archTypes"`
	// The availabilities of the software source in a non-OCI environment for a tenancy.
	Availabilities pulumi.StringArrayInput `pulumi:"availabilities"`
	// The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
	AvailabilityAnywheres pulumi.StringArrayInput `pulumi:"availabilityAnywheres"`
	// The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
	AvailabilityAtOcis pulumi.StringArrayInput `pulumi:"availabilityAtOcis"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A filter to return resources that match the given user-friendly name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput                            `pulumi:"displayNameContains"`
	Filters             GetSoftwarePackageSoftwareSourceFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given operating system family.
	OsFamilies pulumi.StringArrayInput `pulumi:"osFamilies"`
	// The name of the software package.
	SoftwarePackageName pulumi.StringInput `pulumi:"softwarePackageName"`
	// The type of the software source.
	SoftwareSourceTypes pulumi.StringArrayInput `pulumi:"softwareSourceTypes"`
	// A filter to return only software sources whose state matches the given state.
	States pulumi.StringArrayInput `pulumi:"states"`
}

func (LookupSoftwarePackageSoftwareSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwarePackageSoftwareSourceArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwarePackageSoftwareSource.
type LookupSoftwarePackageSoftwareSourceResultOutput struct{ *pulumi.OutputState }

func (LookupSoftwarePackageSoftwareSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwarePackageSoftwareSourceResult)(nil)).Elem()
}

func (o LookupSoftwarePackageSoftwareSourceResultOutput) ToLookupSoftwarePackageSoftwareSourceResultOutput() LookupSoftwarePackageSoftwareSourceResultOutput {
	return o
}

func (o LookupSoftwarePackageSoftwareSourceResultOutput) ToLookupSoftwarePackageSoftwareSourceResultOutputWithContext(ctx context.Context) LookupSoftwarePackageSoftwareSourceResultOutput {
	return o
}

// The architecture type supported by the software source.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) ArchTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []string { return v.ArchTypes }).(pulumi.StringArrayOutput)
}

// Availability of the software source (for non-OCI environments).
func (o LookupSoftwarePackageSoftwareSourceResultOutput) Availabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []string { return v.Availabilities }).(pulumi.StringArrayOutput)
}

func (o LookupSoftwarePackageSoftwareSourceResultOutput) AvailabilityAnywheres() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []string { return v.AvailabilityAnywheres }).(pulumi.StringArrayOutput)
}

// Availability of the software source (for Oracle Cloud Infrastructure environments).
func (o LookupSoftwarePackageSoftwareSourceResultOutput) AvailabilityAtOcis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []string { return v.AvailabilityAtOcis }).(pulumi.StringArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// User-friendly name.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o LookupSoftwarePackageSoftwareSourceResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

func (o LookupSoftwarePackageSoftwareSourceResultOutput) Filters() GetSoftwarePackageSoftwareSourceFilterArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []GetSoftwarePackageSoftwareSourceFilter {
		return v.Filters
	}).(GetSoftwarePackageSoftwareSourceFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The OS family the software source belongs to.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) OsFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []string { return v.OsFamilies }).(pulumi.StringArrayOutput)
}

func (o LookupSoftwarePackageSoftwareSourceResultOutput) SoftwarePackageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) string { return v.SoftwarePackageName }).(pulumi.StringOutput)
}

// The list of software_source_collection.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) SoftwareSourceCollections() GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []GetSoftwarePackageSoftwareSourceSoftwareSourceCollection {
		return v.SoftwareSourceCollections
	}).(GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionArrayOutput)
}

// Type of software source.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) SoftwareSourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []string { return v.SoftwareSourceTypes }).(pulumi.StringArrayOutput)
}

// The current state of the software source.
func (o LookupSoftwarePackageSoftwareSourceResultOutput) States() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageSoftwareSourceResult) []string { return v.States }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSoftwarePackageSoftwareSourceResultOutput{})
}
