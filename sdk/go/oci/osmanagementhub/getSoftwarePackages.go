// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists software packages available through the OS Management Hub service.  Filter the list against a variety of criteria
// including but not limited to its name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetSoftwarePackages(ctx, &osmanagementhub.GetSoftwarePackagesArgs{
//				Architecture:        pulumi.StringRef(softwarePackageArchitecture),
//				DisplayName:         pulumi.StringRef(softwarePackageDisplayName),
//				DisplayNameContains: pulumi.StringRef(softwarePackageDisplayNameContains),
//				IsLatest:            pulumi.BoolRef(softwarePackageIsLatest),
//				OsFamily:            pulumi.StringRef(softwarePackageOsFamily),
//				Version:             pulumi.StringRef(softwarePackageVersion),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSoftwarePackages(ctx *pulumi.Context, args *GetSoftwarePackagesArgs, opts ...pulumi.InvokeOption) (*GetSoftwarePackagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwarePackagesResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwarePackages:getSoftwarePackages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwarePackages.
type GetSoftwarePackagesArgs struct {
	// A filter to return software packages that match the given architecture.
	Architecture *string `pulumi:"architecture"`
	// A filter to return resources that match the given user-friendly name.
	DisplayName *string `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string                     `pulumi:"displayNameContains"`
	Filters             []GetSoftwarePackagesFilter `pulumi:"filters"`
	// Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
	IsLatest *bool `pulumi:"isLatest"`
	// A filter to return only resources that match the given operating system family.
	OsFamily *string `pulumi:"osFamily"`
	// A filter to return software packages that match the given version.
	Version *string `pulumi:"version"`
}

// A collection of values returned by getSoftwarePackages.
type GetSoftwarePackagesResult struct {
	// The architecture for which this software was built
	Architecture *string `pulumi:"architecture"`
	// Software source name.
	DisplayName         *string                     `pulumi:"displayName"`
	DisplayNameContains *string                     `pulumi:"displayNameContains"`
	Filters             []GetSoftwarePackagesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether this package is the latest version.
	IsLatest *bool   `pulumi:"isLatest"`
	OsFamily *string `pulumi:"osFamily"`
	// The list of software_package_collection.
	SoftwarePackageCollections []GetSoftwarePackagesSoftwarePackageCollection `pulumi:"softwarePackageCollections"`
	// Version of the package.
	Version *string `pulumi:"version"`
}

func GetSoftwarePackagesOutput(ctx *pulumi.Context, args GetSoftwarePackagesOutputArgs, opts ...pulumi.InvokeOption) GetSoftwarePackagesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwarePackagesResult, error) {
			args := v.(GetSoftwarePackagesArgs)
			r, err := GetSoftwarePackages(ctx, &args, opts...)
			var s GetSoftwarePackagesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwarePackagesResultOutput)
}

// A collection of arguments for invoking getSoftwarePackages.
type GetSoftwarePackagesOutputArgs struct {
	// A filter to return software packages that match the given architecture.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// A filter to return resources that match the given user-friendly name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput               `pulumi:"displayNameContains"`
	Filters             GetSoftwarePackagesFilterArrayInput `pulumi:"filters"`
	// Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// A filter to return only resources that match the given operating system family.
	OsFamily pulumi.StringPtrInput `pulumi:"osFamily"`
	// A filter to return software packages that match the given version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GetSoftwarePackagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwarePackagesArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwarePackages.
type GetSoftwarePackagesResultOutput struct{ *pulumi.OutputState }

func (GetSoftwarePackagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwarePackagesResult)(nil)).Elem()
}

func (o GetSoftwarePackagesResultOutput) ToGetSoftwarePackagesResultOutput() GetSoftwarePackagesResultOutput {
	return o
}

func (o GetSoftwarePackagesResultOutput) ToGetSoftwarePackagesResultOutputWithContext(ctx context.Context) GetSoftwarePackagesResultOutput {
	return o
}

// The architecture for which this software was built
func (o GetSoftwarePackagesResultOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// Software source name.
func (o GetSoftwarePackagesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetSoftwarePackagesResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

func (o GetSoftwarePackagesResultOutput) Filters() GetSoftwarePackagesFilterArrayOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) []GetSoftwarePackagesFilter { return v.Filters }).(GetSoftwarePackagesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwarePackagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether this package is the latest version.
func (o GetSoftwarePackagesResultOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

func (o GetSoftwarePackagesResultOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) *string { return v.OsFamily }).(pulumi.StringPtrOutput)
}

// The list of software_package_collection.
func (o GetSoftwarePackagesResultOutput) SoftwarePackageCollections() GetSoftwarePackagesSoftwarePackageCollectionArrayOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) []GetSoftwarePackagesSoftwarePackageCollection {
		return v.SoftwarePackageCollections
	}).(GetSoftwarePackagesSoftwarePackageCollectionArrayOutput)
}

// Version of the package.
func (o GetSoftwarePackagesResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwarePackagesResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwarePackagesResultOutput{})
}
