// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Gets information about the specified software source.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetSoftwareSource(ctx, &osmanagementhub.GetSoftwareSourceArgs{
//				SoftwareSourceId: testSoftwareSourceOciOsManagementHubSoftwareSource.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupSoftwareSource(ctx *pulumi.Context, args *LookupSoftwareSourceArgs, opts ...pulumi.InvokeOption) (*LookupSoftwareSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSoftwareSourceResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSource.
type LookupSoftwareSourceArgs struct {
	// The software source OCID.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSource.
type LookupSoftwareSourceResult struct {
	// The architecture type supported by the software source.
	ArchType string `pulumi:"archType"`
	// Possible availabilities of a software source.
	Availability string `pulumi:"availability"`
	// The yum repository checksum type used by this software source.
	ChecksumType string `pulumi:"checksumType"`
	// The OCID of the tenancy containing the software source.
	CompartmentId string `pulumi:"compartmentId"`
	// Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
	CustomSoftwareSourceFilters []GetSoftwareSourceCustomSoftwareSourceFilter `pulumi:"customSoftwareSourceFilters"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Information specified by the user about the software source.
	Description string `pulumi:"description"`
	// User friendly name.
	DisplayName string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source.
	GpgKeyId string `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source.
	GpgKeyUrl string `pulumi:"gpgKeyUrl"`
	// The OCID of the resource that is immutable on creation.
	Id string `pulumi:"id"`
	// Indicates whether service should automatically update the custom software source for the user.
	IsAutomaticallyUpdated bool `pulumi:"isAutomaticallyUpdated"`
	// The OS family the software source belongs to.
	OsFamily string `pulumi:"osFamily"`
	// Number of packages.
	PackageCount string `pulumi:"packageCount"`
	// The Repo ID for the software source.
	RepoId           string `pulumi:"repoId"`
	SoftwareSourceId string `pulumi:"softwareSourceId"`
	// Type of the software source.
	SoftwareSourceType string `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion string `pulumi:"softwareSourceVersion"`
	// The current state of the software source.
	State string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated string `pulumi:"timeCreated"`
	// URL for the repository.
	Url string `pulumi:"url"`
	// Name of the vendor providing the software source.
	VendorName string `pulumi:"vendorName"`
	// List of vendor software sources.
	VendorSoftwareSources []GetSoftwareSourceVendorSoftwareSource `pulumi:"vendorSoftwareSources"`
}

func LookupSoftwareSourceOutput(ctx *pulumi.Context, args LookupSoftwareSourceOutputArgs, opts ...pulumi.InvokeOption) LookupSoftwareSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSoftwareSourceResult, error) {
			args := v.(LookupSoftwareSourceArgs)
			r, err := LookupSoftwareSource(ctx, &args, opts...)
			var s LookupSoftwareSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSoftwareSourceResultOutput)
}

// A collection of arguments for invoking getSoftwareSource.
type LookupSoftwareSourceOutputArgs struct {
	// The software source OCID.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (LookupSoftwareSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareSourceArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSource.
type LookupSoftwareSourceResultOutput struct{ *pulumi.OutputState }

func (LookupSoftwareSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareSourceResult)(nil)).Elem()
}

func (o LookupSoftwareSourceResultOutput) ToLookupSoftwareSourceResultOutput() LookupSoftwareSourceResultOutput {
	return o
}

func (o LookupSoftwareSourceResultOutput) ToLookupSoftwareSourceResultOutputWithContext(ctx context.Context) LookupSoftwareSourceResultOutput {
	return o
}

// The architecture type supported by the software source.
func (o LookupSoftwareSourceResultOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ArchType }).(pulumi.StringOutput)
}

// Possible availabilities of a software source.
func (o LookupSoftwareSourceResultOutput) Availability() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Availability }).(pulumi.StringOutput)
}

// The yum repository checksum type used by this software source.
func (o LookupSoftwareSourceResultOutput) ChecksumType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ChecksumType }).(pulumi.StringOutput)
}

// The OCID of the tenancy containing the software source.
func (o LookupSoftwareSourceResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
func (o LookupSoftwareSourceResultOutput) CustomSoftwareSourceFilters() GetSoftwareSourceCustomSoftwareSourceFilterArrayOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) []GetSoftwareSourceCustomSoftwareSourceFilter {
		return v.CustomSoftwareSourceFilters
	}).(GetSoftwareSourceCustomSoftwareSourceFilterArrayOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o LookupSoftwareSourceResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Information specified by the user about the software source.
func (o LookupSoftwareSourceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Description }).(pulumi.StringOutput)
}

// User friendly name.
func (o LookupSoftwareSourceResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o LookupSoftwareSourceResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Fingerprint of the GPG key for this software source.
func (o LookupSoftwareSourceResultOutput) GpgKeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyFingerprint }).(pulumi.StringOutput)
}

// ID of the GPG key for this software source.
func (o LookupSoftwareSourceResultOutput) GpgKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyId }).(pulumi.StringOutput)
}

// URL of the GPG key for this software source.
func (o LookupSoftwareSourceResultOutput) GpgKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyUrl }).(pulumi.StringOutput)
}

// The OCID of the resource that is immutable on creation.
func (o LookupSoftwareSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether service should automatically update the custom software source for the user.
func (o LookupSoftwareSourceResultOutput) IsAutomaticallyUpdated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) bool { return v.IsAutomaticallyUpdated }).(pulumi.BoolOutput)
}

// The OS family the software source belongs to.
func (o LookupSoftwareSourceResultOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.OsFamily }).(pulumi.StringOutput)
}

// Number of packages.
func (o LookupSoftwareSourceResultOutput) PackageCount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.PackageCount }).(pulumi.StringOutput)
}

// The Repo ID for the software source.
func (o LookupSoftwareSourceResultOutput) RepoId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.RepoId }).(pulumi.StringOutput)
}

func (o LookupSoftwareSourceResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

// Type of the software source.
func (o LookupSoftwareSourceResultOutput) SoftwareSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.SoftwareSourceType }).(pulumi.StringOutput)
}

// The version to assign to this custom software source.
func (o LookupSoftwareSourceResultOutput) SoftwareSourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.SoftwareSourceVersion }).(pulumi.StringOutput)
}

// The current state of the software source.
func (o LookupSoftwareSourceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.State }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupSoftwareSourceResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
func (o LookupSoftwareSourceResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// URL for the repository.
func (o LookupSoftwareSourceResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Url }).(pulumi.StringOutput)
}

// Name of the vendor providing the software source.
func (o LookupSoftwareSourceResultOutput) VendorName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.VendorName }).(pulumi.StringOutput)
}

// List of vendor software sources.
func (o LookupSoftwareSourceResultOutput) VendorSoftwareSources() GetSoftwareSourceVendorSoftwareSourceArrayOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) []GetSoftwareSourceVendorSoftwareSource {
		return v.VendorSoftwareSources
	}).(GetSoftwareSourceVendorSoftwareSourceArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSoftwareSourceResultOutput{})
}
