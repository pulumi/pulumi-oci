// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Returns information about the specified software source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.GetSoftwareSource(ctx, &osmanagementhub.GetSoftwareSourceArgs{
//				SoftwareSourceId: testSoftwareSourceOciOsManagementHubSoftwareSource.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSoftwareSource(ctx *pulumi.Context, args *LookupSoftwareSourceArgs, opts ...pulumi.InvokeOption) (*LookupSoftwareSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSoftwareSourceResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSource.
type LookupSoftwareSourceArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSource.
type LookupSoftwareSourceResult struct {
	// The architecture type supported by the software source.
	ArchType string `pulumi:"archType"`
	// Availability of the software source (for non-OCI environments).
	Availability string `pulumi:"availability"`
	// Availability of the software source (for Oracle Cloud Infrastructure environments).
	AvailabilityAtOci string `pulumi:"availabilityAtOci"`
	// The yum repository checksum type used by this software source.
	ChecksumType string `pulumi:"checksumType"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId string `pulumi:"compartmentId"`
	// Provides the information used to apply filters to a vendor software source to create or update a custom software source.
	CustomSoftwareSourceFilters []GetSoftwareSourceCustomSoftwareSourceFilter `pulumi:"customSoftwareSourceFilters"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// User-specified description for the software source.
	Description string `pulumi:"description"`
	// User-friendly name.
	DisplayName string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source.
	GpgKeyId string `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source.
	GpgKeyUrl string `pulumi:"gpgKeyUrl"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
	Id string `pulumi:"id"`
	// Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
	IsAutoResolveDependencies bool `pulumi:"isAutoResolveDependencies"`
	// Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
	IsAutomaticallyUpdated bool `pulumi:"isAutomaticallyUpdated"`
	// Indicates whether the service should create the software source from a list of packages provided by the user.
	IsCreatedFromPackageList bool `pulumi:"isCreatedFromPackageList"`
	// Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
	// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
	// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
	// * For a package filter that does not specify a version, this will include only the latest available version of the package.
	// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
	// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
	IsLatestContentOnly bool `pulumi:"isLatestContentOnly"`
	// Indicates whether the software source is required for the Autonomous Linux service.
	IsMandatoryForAutonomousLinux bool `pulumi:"isMandatoryForAutonomousLinux"`
	// This property applies only to replicated vendor software sources. This is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment.
	OriginSoftwareSourceId string `pulumi:"originSoftwareSourceId"`
	// The OS family the software source belongs to.
	OsFamily string `pulumi:"osFamily"`
	// Number of packages the software source contains.
	PackageCount string `pulumi:"packageCount"`
	// The packages in the software source.
	Packages []string `pulumi:"packages"`
	// The repository ID for the software source.
	RepoId string `pulumi:"repoId"`
	// The size of the software source in gigabytes (GB).
	Size             float64 `pulumi:"size"`
	SoftwareSourceId string  `pulumi:"softwareSourceId"`
	// Type of software source.
	SoftwareSourceType string `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion string `pulumi:"softwareSourceVersion"`
	// The current state of the software source.
	State string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	TimeCreated string `pulumi:"timeCreated"`
	// URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
	Url string `pulumi:"url"`
	// Name of the vendor providing the software source.
	VendorName string `pulumi:"vendorName"`
	// List of vendor software sources that are used for the basis of the versioned custom software source.
	VendorSoftwareSources []GetSoftwareSourceVendorSoftwareSource `pulumi:"vendorSoftwareSources"`
}

func LookupSoftwareSourceOutput(ctx *pulumi.Context, args LookupSoftwareSourceOutputArgs, opts ...pulumi.InvokeOption) LookupSoftwareSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSoftwareSourceResultOutput, error) {
			args := v.(LookupSoftwareSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", args, LookupSoftwareSourceResultOutput{}, options).(LookupSoftwareSourceResultOutput), nil
		}).(LookupSoftwareSourceResultOutput)
}

// A collection of arguments for invoking getSoftwareSource.
type LookupSoftwareSourceOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (LookupSoftwareSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareSourceArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSource.
type LookupSoftwareSourceResultOutput struct{ *pulumi.OutputState }

func (LookupSoftwareSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareSourceResult)(nil)).Elem()
}

func (o LookupSoftwareSourceResultOutput) ToLookupSoftwareSourceResultOutput() LookupSoftwareSourceResultOutput {
	return o
}

func (o LookupSoftwareSourceResultOutput) ToLookupSoftwareSourceResultOutputWithContext(ctx context.Context) LookupSoftwareSourceResultOutput {
	return o
}

// The architecture type supported by the software source.
func (o LookupSoftwareSourceResultOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ArchType }).(pulumi.StringOutput)
}

// Availability of the software source (for non-OCI environments).
func (o LookupSoftwareSourceResultOutput) Availability() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Availability }).(pulumi.StringOutput)
}

// Availability of the software source (for Oracle Cloud Infrastructure environments).
func (o LookupSoftwareSourceResultOutput) AvailabilityAtOci() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.AvailabilityAtOci }).(pulumi.StringOutput)
}

// The yum repository checksum type used by this software source.
func (o LookupSoftwareSourceResultOutput) ChecksumType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ChecksumType }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
func (o LookupSoftwareSourceResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Provides the information used to apply filters to a vendor software source to create or update a custom software source.
func (o LookupSoftwareSourceResultOutput) CustomSoftwareSourceFilters() GetSoftwareSourceCustomSoftwareSourceFilterArrayOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) []GetSoftwareSourceCustomSoftwareSourceFilter {
		return v.CustomSoftwareSourceFilters
	}).(GetSoftwareSourceCustomSoftwareSourceFilterArrayOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o LookupSoftwareSourceResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// User-specified description for the software source.
func (o LookupSoftwareSourceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Description }).(pulumi.StringOutput)
}

// User-friendly name.
func (o LookupSoftwareSourceResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o LookupSoftwareSourceResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// Fingerprint of the GPG key for this software source.
func (o LookupSoftwareSourceResultOutput) GpgKeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyFingerprint }).(pulumi.StringOutput)
}

// ID of the GPG key for this software source.
func (o LookupSoftwareSourceResultOutput) GpgKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyId }).(pulumi.StringOutput)
}

// URL of the GPG key for this software source.
func (o LookupSoftwareSourceResultOutput) GpgKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyUrl }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
func (o LookupSoftwareSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
func (o LookupSoftwareSourceResultOutput) IsAutoResolveDependencies() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) bool { return v.IsAutoResolveDependencies }).(pulumi.BoolOutput)
}

// Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
func (o LookupSoftwareSourceResultOutput) IsAutomaticallyUpdated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) bool { return v.IsAutomaticallyUpdated }).(pulumi.BoolOutput)
}

// Indicates whether the service should create the software source from a list of packages provided by the user.
func (o LookupSoftwareSourceResultOutput) IsCreatedFromPackageList() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) bool { return v.IsCreatedFromPackageList }).(pulumi.BoolOutput)
}

// Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
// * For a package filter that does not specify a version, this will include only the latest available version of the package.
// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
func (o LookupSoftwareSourceResultOutput) IsLatestContentOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) bool { return v.IsLatestContentOnly }).(pulumi.BoolOutput)
}

// Indicates whether the software source is required for the Autonomous Linux service.
func (o LookupSoftwareSourceResultOutput) IsMandatoryForAutonomousLinux() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) bool { return v.IsMandatoryForAutonomousLinux }).(pulumi.BoolOutput)
}

// This property applies only to replicated vendor software sources. This is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment.
func (o LookupSoftwareSourceResultOutput) OriginSoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.OriginSoftwareSourceId }).(pulumi.StringOutput)
}

// The OS family the software source belongs to.
func (o LookupSoftwareSourceResultOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.OsFamily }).(pulumi.StringOutput)
}

// Number of packages the software source contains.
func (o LookupSoftwareSourceResultOutput) PackageCount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.PackageCount }).(pulumi.StringOutput)
}

// The packages in the software source.
func (o LookupSoftwareSourceResultOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) []string { return v.Packages }).(pulumi.StringArrayOutput)
}

// The repository ID for the software source.
func (o LookupSoftwareSourceResultOutput) RepoId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.RepoId }).(pulumi.StringOutput)
}

// The size of the software source in gigabytes (GB).
func (o LookupSoftwareSourceResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v LookupSoftwareSourceResult) float64 { return v.Size }).(pulumi.Float64Output)
}

func (o LookupSoftwareSourceResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

// Type of software source.
func (o LookupSoftwareSourceResultOutput) SoftwareSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.SoftwareSourceType }).(pulumi.StringOutput)
}

// The version to assign to this custom software source.
func (o LookupSoftwareSourceResultOutput) SoftwareSourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.SoftwareSourceVersion }).(pulumi.StringOutput)
}

// The current state of the software source.
func (o LookupSoftwareSourceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.State }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupSoftwareSourceResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
func (o LookupSoftwareSourceResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
func (o LookupSoftwareSourceResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Url }).(pulumi.StringOutput)
}

// Name of the vendor providing the software source.
func (o LookupSoftwareSourceResultOutput) VendorName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.VendorName }).(pulumi.StringOutput)
}

// List of vendor software sources that are used for the basis of the versioned custom software source.
func (o LookupSoftwareSourceResultOutput) VendorSoftwareSources() GetSoftwareSourceVendorSoftwareSourceArrayOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) []GetSoftwareSourceVendorSoftwareSource {
		return v.VendorSoftwareSources
	}).(GetSoftwareSourceVendorSoftwareSourceArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSoftwareSourceResultOutput{})
}
