// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Software Source Module Streams in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists module streams from the specified software source OCID. Filter the list against a variety of
// criteria including but not limited to its module name and (stream) name.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetSoftwareSourceModuleStreams(ctx, &osmanagementhub.GetSoftwareSourceModuleStreamsArgs{
//				SoftwareSourceId:   oci_os_management_hub_software_source.Test_software_source.Id,
//				IsLatest:           pulumi.BoolRef(_var.Software_source_module_stream_is_latest),
//				ModuleName:         pulumi.StringRef(_var.Software_source_module_stream_module_name),
//				ModuleNameContains: pulumi.StringRef(_var.Software_source_module_stream_module_name_contains),
//				Name:               pulumi.StringRef(_var.Software_source_module_stream_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetSoftwareSourceModuleStreams(ctx *pulumi.Context, args *GetSoftwareSourceModuleStreamsArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourceModuleStreamsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourceModuleStreamsResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSourceModuleStreams:getSoftwareSourceModuleStreams", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSourceModuleStreams.
type GetSoftwareSourceModuleStreamsArgs struct {
	Filters []GetSoftwareSourceModuleStreamsFilter `pulumi:"filters"`
	// A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
	IsLatest *bool `pulumi:"isLatest"`
	// The name of a module. This parameter is required if a streamName is specified.
	ModuleName *string `pulumi:"moduleName"`
	// A filter to return resources that may partially match the module name given.
	ModuleNameContains *string `pulumi:"moduleNameContains"`
	// The name of the entity to be queried.
	Name *string `pulumi:"name"`
	// The software source OCID.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSourceModuleStreams.
type GetSoftwareSourceModuleStreamsResult struct {
	Filters []GetSoftwareSourceModuleStreamsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether this module stream is the latest.
	IsLatest *bool `pulumi:"isLatest"`
	// The name of the module that contains the stream.
	ModuleName         *string `pulumi:"moduleName"`
	ModuleNameContains *string `pulumi:"moduleNameContains"`
	// The list of module_stream_collection.
	ModuleStreamCollections []GetSoftwareSourceModuleStreamsModuleStreamCollection `pulumi:"moduleStreamCollections"`
	// The name of the stream.
	Name *string `pulumi:"name"`
	// The OCID of the software source that provides this module stream.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

func GetSoftwareSourceModuleStreamsOutput(ctx *pulumi.Context, args GetSoftwareSourceModuleStreamsOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourceModuleStreamsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourceModuleStreamsResult, error) {
			args := v.(GetSoftwareSourceModuleStreamsArgs)
			r, err := GetSoftwareSourceModuleStreams(ctx, &args, opts...)
			var s GetSoftwareSourceModuleStreamsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwareSourceModuleStreamsResultOutput)
}

// A collection of arguments for invoking getSoftwareSourceModuleStreams.
type GetSoftwareSourceModuleStreamsOutputArgs struct {
	Filters GetSoftwareSourceModuleStreamsFilterArrayInput `pulumi:"filters"`
	// A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// The name of a module. This parameter is required if a streamName is specified.
	ModuleName pulumi.StringPtrInput `pulumi:"moduleName"`
	// A filter to return resources that may partially match the module name given.
	ModuleNameContains pulumi.StringPtrInput `pulumi:"moduleNameContains"`
	// The name of the entity to be queried.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The software source OCID.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (GetSoftwareSourceModuleStreamsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceModuleStreamsArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSourceModuleStreams.
type GetSoftwareSourceModuleStreamsResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourceModuleStreamsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceModuleStreamsResult)(nil)).Elem()
}

func (o GetSoftwareSourceModuleStreamsResultOutput) ToGetSoftwareSourceModuleStreamsResultOutput() GetSoftwareSourceModuleStreamsResultOutput {
	return o
}

func (o GetSoftwareSourceModuleStreamsResultOutput) ToGetSoftwareSourceModuleStreamsResultOutputWithContext(ctx context.Context) GetSoftwareSourceModuleStreamsResultOutput {
	return o
}

func (o GetSoftwareSourceModuleStreamsResultOutput) Filters() GetSoftwareSourceModuleStreamsFilterArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) []GetSoftwareSourceModuleStreamsFilter { return v.Filters }).(GetSoftwareSourceModuleStreamsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourceModuleStreamsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether this module stream is the latest.
func (o GetSoftwareSourceModuleStreamsResultOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

// The name of the module that contains the stream.
func (o GetSoftwareSourceModuleStreamsResultOutput) ModuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) *string { return v.ModuleName }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourceModuleStreamsResultOutput) ModuleNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) *string { return v.ModuleNameContains }).(pulumi.StringPtrOutput)
}

// The list of module_stream_collection.
func (o GetSoftwareSourceModuleStreamsResultOutput) ModuleStreamCollections() GetSoftwareSourceModuleStreamsModuleStreamCollectionArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) []GetSoftwareSourceModuleStreamsModuleStreamCollection {
		return v.ModuleStreamCollections
	}).(GetSoftwareSourceModuleStreamsModuleStreamCollectionArrayOutput)
}

// The name of the stream.
func (o GetSoftwareSourceModuleStreamsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The OCID of the software source that provides this module stream.
func (o GetSoftwareSourceModuleStreamsResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamsResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourceModuleStreamsResultOutput{})
}
