// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Source Package Group resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Returns information about the specified package group from a software source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.GetSoftwareSourcePackageGroup(ctx, &osmanagementhub.GetSoftwareSourcePackageGroupArgs{
//				PackageGroupId:   testGroup.Id,
//				SoftwareSourceId: testSoftwareSource.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSoftwareSourcePackageGroup(ctx *pulumi.Context, args *GetSoftwareSourcePackageGroupArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourcePackageGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourcePackageGroupResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSourcePackageGroup:getSoftwareSourcePackageGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSourcePackageGroup.
type GetSoftwareSourcePackageGroupArgs struct {
	// The unique package group identifier.
	PackageGroupId string `pulumi:"packageGroupId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSourcePackageGroup.
type GetSoftwareSourcePackageGroupResult struct {
	// Description of the package group.
	Description string `pulumi:"description"`
	// Indicates the order to display category or environment.
	DisplayOrder int `pulumi:"displayOrder"`
	// Indicates if this is a group, category, or environment.
	GroupType string `pulumi:"groupType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates if this package group is the default.
	IsDefault bool `pulumi:"isDefault"`
	// Indicates if this package group is visible to users.
	IsUserVisible bool `pulumi:"isUserVisible"`
	// Package group name.
	Name           string `pulumi:"name"`
	PackageGroupId string `pulumi:"packageGroupId"`
	// The list of packages in the package group.
	Packages []string `pulumi:"packages"`
	// The repository IDs of the package group's repositories.
	Repositories     []string `pulumi:"repositories"`
	SoftwareSourceId string   `pulumi:"softwareSourceId"`
}

func GetSoftwareSourcePackageGroupOutput(ctx *pulumi.Context, args GetSoftwareSourcePackageGroupOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourcePackageGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourcePackageGroupResultOutput, error) {
			args := v.(GetSoftwareSourcePackageGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OsManagementHub/getSoftwareSourcePackageGroup:getSoftwareSourcePackageGroup", args, GetSoftwareSourcePackageGroupResultOutput{}, options).(GetSoftwareSourcePackageGroupResultOutput), nil
		}).(GetSoftwareSourcePackageGroupResultOutput)
}

// A collection of arguments for invoking getSoftwareSourcePackageGroup.
type GetSoftwareSourcePackageGroupOutputArgs struct {
	// The unique package group identifier.
	PackageGroupId pulumi.StringInput `pulumi:"packageGroupId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (GetSoftwareSourcePackageGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcePackageGroupArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSourcePackageGroup.
type GetSoftwareSourcePackageGroupResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourcePackageGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcePackageGroupResult)(nil)).Elem()
}

func (o GetSoftwareSourcePackageGroupResultOutput) ToGetSoftwareSourcePackageGroupResultOutput() GetSoftwareSourcePackageGroupResultOutput {
	return o
}

func (o GetSoftwareSourcePackageGroupResultOutput) ToGetSoftwareSourcePackageGroupResultOutputWithContext(ctx context.Context) GetSoftwareSourcePackageGroupResultOutput {
	return o
}

// Description of the package group.
func (o GetSoftwareSourcePackageGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates the order to display category or environment.
func (o GetSoftwareSourcePackageGroupResultOutput) DisplayOrder() pulumi.IntOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) int { return v.DisplayOrder }).(pulumi.IntOutput)
}

// Indicates if this is a group, category, or environment.
func (o GetSoftwareSourcePackageGroupResultOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) string { return v.GroupType }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourcePackageGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates if this package group is the default.
func (o GetSoftwareSourcePackageGroupResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// Indicates if this package group is visible to users.
func (o GetSoftwareSourcePackageGroupResultOutput) IsUserVisible() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) bool { return v.IsUserVisible }).(pulumi.BoolOutput)
}

// Package group name.
func (o GetSoftwareSourcePackageGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSoftwareSourcePackageGroupResultOutput) PackageGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) string { return v.PackageGroupId }).(pulumi.StringOutput)
}

// The list of packages in the package group.
func (o GetSoftwareSourcePackageGroupResultOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) []string { return v.Packages }).(pulumi.StringArrayOutput)
}

// The repository IDs of the package group's repositories.
func (o GetSoftwareSourcePackageGroupResultOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

func (o GetSoftwareSourcePackageGroupResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourcePackageGroupResultOutput{})
}
