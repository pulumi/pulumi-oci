// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Software Source Package Groups in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists package groups that are associated with the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a
// variety of criteria including but not limited to its name, and package group type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.GetSoftwareSourcePackageGroups(ctx, &osmanagementhub.GetSoftwareSourcePackageGroupsArgs{
//				SoftwareSourceId: testSoftwareSource.Id,
//				CompartmentId:    pulumi.StringRef(compartmentId),
//				GroupTypes:       softwareSourcePackageGroupGroupType,
//				Name:             pulumi.StringRef(softwareSourcePackageGroupName),
//				NameContains:     pulumi.StringRef(softwareSourcePackageGroupNameContains),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSoftwareSourcePackageGroups(ctx *pulumi.Context, args *GetSoftwareSourcePackageGroupsArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourcePackageGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourcePackageGroupsResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSourcePackageGroups:getSoftwareSourcePackageGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSourcePackageGroups.
type GetSoftwareSourcePackageGroupsArgs struct {
	// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
	CompartmentId *string                                `pulumi:"compartmentId"`
	Filters       []GetSoftwareSourcePackageGroupsFilter `pulumi:"filters"`
	// A filter to return only package groups of the specified type.
	GroupTypes []string `pulumi:"groupTypes"`
	// The name of the entity to be queried.
	Name *string `pulumi:"name"`
	// A filter to return resources that may partially match the name given.
	NameContains *string `pulumi:"nameContains"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSourcePackageGroups.
type GetSoftwareSourcePackageGroupsResult struct {
	CompartmentId *string                                `pulumi:"compartmentId"`
	Filters       []GetSoftwareSourcePackageGroupsFilter `pulumi:"filters"`
	// Indicates if this is a group, category, or environment.
	GroupTypes []string `pulumi:"groupTypes"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Package group name.
	Name         *string `pulumi:"name"`
	NameContains *string `pulumi:"nameContains"`
	// The list of package_group_collection.
	PackageGroupCollections []GetSoftwareSourcePackageGroupsPackageGroupCollection `pulumi:"packageGroupCollections"`
	SoftwareSourceId        string                                                 `pulumi:"softwareSourceId"`
}

func GetSoftwareSourcePackageGroupsOutput(ctx *pulumi.Context, args GetSoftwareSourcePackageGroupsOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourcePackageGroupsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourcePackageGroupsResultOutput, error) {
			args := v.(GetSoftwareSourcePackageGroupsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OsManagementHub/getSoftwareSourcePackageGroups:getSoftwareSourcePackageGroups", args, GetSoftwareSourcePackageGroupsResultOutput{}, options).(GetSoftwareSourcePackageGroupsResultOutput), nil
		}).(GetSoftwareSourcePackageGroupsResultOutput)
}

// A collection of arguments for invoking getSoftwareSourcePackageGroups.
type GetSoftwareSourcePackageGroupsOutputArgs struct {
	// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
	CompartmentId pulumi.StringPtrInput                          `pulumi:"compartmentId"`
	Filters       GetSoftwareSourcePackageGroupsFilterArrayInput `pulumi:"filters"`
	// A filter to return only package groups of the specified type.
	GroupTypes pulumi.StringArrayInput `pulumi:"groupTypes"`
	// The name of the entity to be queried.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to return resources that may partially match the name given.
	NameContains pulumi.StringPtrInput `pulumi:"nameContains"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (GetSoftwareSourcePackageGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcePackageGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSourcePackageGroups.
type GetSoftwareSourcePackageGroupsResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourcePackageGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcePackageGroupsResult)(nil)).Elem()
}

func (o GetSoftwareSourcePackageGroupsResultOutput) ToGetSoftwareSourcePackageGroupsResultOutput() GetSoftwareSourcePackageGroupsResultOutput {
	return o
}

func (o GetSoftwareSourcePackageGroupsResultOutput) ToGetSoftwareSourcePackageGroupsResultOutputWithContext(ctx context.Context) GetSoftwareSourcePackageGroupsResultOutput {
	return o
}

func (o GetSoftwareSourcePackageGroupsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourcePackageGroupsResultOutput) Filters() GetSoftwareSourcePackageGroupsFilterArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) []GetSoftwareSourcePackageGroupsFilter { return v.Filters }).(GetSoftwareSourcePackageGroupsFilterArrayOutput)
}

// Indicates if this is a group, category, or environment.
func (o GetSoftwareSourcePackageGroupsResultOutput) GroupTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) []string { return v.GroupTypes }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourcePackageGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Package group name.
func (o GetSoftwareSourcePackageGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourcePackageGroupsResultOutput) NameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) *string { return v.NameContains }).(pulumi.StringPtrOutput)
}

// The list of package_group_collection.
func (o GetSoftwareSourcePackageGroupsResultOutput) PackageGroupCollections() GetSoftwareSourcePackageGroupsPackageGroupCollectionArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) []GetSoftwareSourcePackageGroupsPackageGroupCollection {
		return v.PackageGroupCollections
	}).(GetSoftwareSourcePackageGroupsPackageGroupCollectionArrayOutput)
}

func (o GetSoftwareSourcePackageGroupsResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcePackageGroupsResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourcePackageGroupsResultOutput{})
}
