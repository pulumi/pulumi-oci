// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Source Software Package resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Gets information about the specified software package.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetSoftwareSourceSoftwarePackage(ctx, &osmanagementhub.GetSoftwareSourceSoftwarePackageArgs{
//				SoftwarePackageName: softwareSourceSoftwarePackageSoftwarePackageName,
//				SoftwareSourceId:    testSoftwareSource.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetSoftwareSourceSoftwarePackage(ctx *pulumi.Context, args *GetSoftwareSourceSoftwarePackageArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourceSoftwarePackageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourceSoftwarePackageResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSourceSoftwarePackage:getSoftwareSourceSoftwarePackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSourceSoftwarePackage.
type GetSoftwareSourceSoftwarePackageArgs struct {
	// The name of the software package.
	SoftwarePackageName string `pulumi:"softwarePackageName"`
	// The software source OCID.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSourceSoftwarePackage.
type GetSoftwareSourceSoftwarePackageResult struct {
	// The architecture for which this software was built
	Architecture string `pulumi:"architecture"`
	// Checksum of the file.
	Checksum string `pulumi:"checksum"`
	// Type of the checksum.
	ChecksumType string `pulumi:"checksumType"`
	// List of dependencies for the software package.
	Dependencies []GetSoftwareSourceSoftwarePackageDependency `pulumi:"dependencies"`
	// Software source description.
	Description string `pulumi:"description"`
	// Software source name.
	DisplayName string `pulumi:"displayName"`
	// List of files for the software package.
	Files []GetSoftwareSourceSoftwarePackageFile `pulumi:"files"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether this package is the latest version.
	IsLatest bool `pulumi:"isLatest"`
	// Date of the last update to the package.
	LastModifiedDate string `pulumi:"lastModifiedDate"`
	// Unique identifier for the package. NOTE - This is not an OCID.
	Name string `pulumi:"name"`
	// Size of the package in bytes.
	SizeInBytes         string `pulumi:"sizeInBytes"`
	SoftwarePackageName string `pulumi:"softwarePackageName"`
	SoftwareSourceId    string `pulumi:"softwareSourceId"`
	// List of software sources that provide the software package.
	SoftwareSources []GetSoftwareSourceSoftwarePackageSoftwareSource `pulumi:"softwareSources"`
	// Type of the package.
	Type string `pulumi:"type"`
	// Version of the package.
	Version string `pulumi:"version"`
}

func GetSoftwareSourceSoftwarePackageOutput(ctx *pulumi.Context, args GetSoftwareSourceSoftwarePackageOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourceSoftwarePackageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourceSoftwarePackageResult, error) {
			args := v.(GetSoftwareSourceSoftwarePackageArgs)
			r, err := GetSoftwareSourceSoftwarePackage(ctx, &args, opts...)
			var s GetSoftwareSourceSoftwarePackageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwareSourceSoftwarePackageResultOutput)
}

// A collection of arguments for invoking getSoftwareSourceSoftwarePackage.
type GetSoftwareSourceSoftwarePackageOutputArgs struct {
	// The name of the software package.
	SoftwarePackageName pulumi.StringInput `pulumi:"softwarePackageName"`
	// The software source OCID.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (GetSoftwareSourceSoftwarePackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceSoftwarePackageArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSourceSoftwarePackage.
type GetSoftwareSourceSoftwarePackageResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourceSoftwarePackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceSoftwarePackageResult)(nil)).Elem()
}

func (o GetSoftwareSourceSoftwarePackageResultOutput) ToGetSoftwareSourceSoftwarePackageResultOutput() GetSoftwareSourceSoftwarePackageResultOutput {
	return o
}

func (o GetSoftwareSourceSoftwarePackageResultOutput) ToGetSoftwareSourceSoftwarePackageResultOutputWithContext(ctx context.Context) GetSoftwareSourceSoftwarePackageResultOutput {
	return o
}

// The architecture for which this software was built
func (o GetSoftwareSourceSoftwarePackageResultOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.Architecture }).(pulumi.StringOutput)
}

// Checksum of the file.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.Checksum }).(pulumi.StringOutput)
}

// Type of the checksum.
func (o GetSoftwareSourceSoftwarePackageResultOutput) ChecksumType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.ChecksumType }).(pulumi.StringOutput)
}

// List of dependencies for the software package.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Dependencies() GetSoftwareSourceSoftwarePackageDependencyArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) []GetSoftwareSourceSoftwarePackageDependency {
		return v.Dependencies
	}).(GetSoftwareSourceSoftwarePackageDependencyArrayOutput)
}

// Software source description.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.Description }).(pulumi.StringOutput)
}

// Software source name.
func (o GetSoftwareSourceSoftwarePackageResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// List of files for the software package.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Files() GetSoftwareSourceSoftwarePackageFileArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) []GetSoftwareSourceSoftwarePackageFile { return v.Files }).(GetSoftwareSourceSoftwarePackageFileArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether this package is the latest version.
func (o GetSoftwareSourceSoftwarePackageResultOutput) IsLatest() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) bool { return v.IsLatest }).(pulumi.BoolOutput)
}

// Date of the last update to the package.
func (o GetSoftwareSourceSoftwarePackageResultOutput) LastModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.LastModifiedDate }).(pulumi.StringOutput)
}

// Unique identifier for the package. NOTE - This is not an OCID.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.Name }).(pulumi.StringOutput)
}

// Size of the package in bytes.
func (o GetSoftwareSourceSoftwarePackageResultOutput) SizeInBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.SizeInBytes }).(pulumi.StringOutput)
}

func (o GetSoftwareSourceSoftwarePackageResultOutput) SoftwarePackageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.SoftwarePackageName }).(pulumi.StringOutput)
}

func (o GetSoftwareSourceSoftwarePackageResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

// List of software sources that provide the software package.
func (o GetSoftwareSourceSoftwarePackageResultOutput) SoftwareSources() GetSoftwareSourceSoftwarePackageSoftwareSourceArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) []GetSoftwareSourceSoftwarePackageSoftwareSource {
		return v.SoftwareSources
	}).(GetSoftwareSourceSoftwarePackageSoftwareSourceArrayOutput)
}

// Type of the package.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the package.
func (o GetSoftwareSourceSoftwarePackageResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackageResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourceSoftwarePackageResultOutput{})
}
