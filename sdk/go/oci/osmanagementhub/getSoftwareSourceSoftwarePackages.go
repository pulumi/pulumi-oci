// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Software Source Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists software packages in the specified software source.  Filter the list against a variety of criteria
// including but not limited to its name.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetSoftwareSourceSoftwarePackages(ctx, &osmanagementhub.GetSoftwareSourceSoftwarePackagesArgs{
//				SoftwareSourceId:    testSoftwareSource.Id,
//				DisplayName:         pulumi.StringRef(softwareSourceSoftwarePackageDisplayName),
//				DisplayNameContains: pulumi.StringRef(softwareSourceSoftwarePackageDisplayNameContains),
//				IsLatest:            pulumi.BoolRef(softwareSourceSoftwarePackageIsLatest),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetSoftwareSourceSoftwarePackages(ctx *pulumi.Context, args *GetSoftwareSourceSoftwarePackagesArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourceSoftwarePackagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourceSoftwarePackagesResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSourceSoftwarePackages:getSoftwareSourceSoftwarePackages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSourceSoftwarePackages.
type GetSoftwareSourceSoftwarePackagesArgs struct {
	// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
	DisplayName *string `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string                                   `pulumi:"displayNameContains"`
	Filters             []GetSoftwareSourceSoftwarePackagesFilter `pulumi:"filters"`
	// A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
	IsLatest *bool `pulumi:"isLatest"`
	// The software source OCID.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSourceSoftwarePackages.
type GetSoftwareSourceSoftwarePackagesResult struct {
	// Software source name.
	DisplayName         *string                                   `pulumi:"displayName"`
	DisplayNameContains *string                                   `pulumi:"displayNameContains"`
	Filters             []GetSoftwareSourceSoftwarePackagesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether this package is the latest version.
	IsLatest *bool `pulumi:"isLatest"`
	// The list of software_package_collection.
	SoftwarePackageCollections []GetSoftwareSourceSoftwarePackagesSoftwarePackageCollection `pulumi:"softwarePackageCollections"`
	SoftwareSourceId           string                                                       `pulumi:"softwareSourceId"`
}

func GetSoftwareSourceSoftwarePackagesOutput(ctx *pulumi.Context, args GetSoftwareSourceSoftwarePackagesOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourceSoftwarePackagesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourceSoftwarePackagesResult, error) {
			args := v.(GetSoftwareSourceSoftwarePackagesArgs)
			r, err := GetSoftwareSourceSoftwarePackages(ctx, &args, opts...)
			var s GetSoftwareSourceSoftwarePackagesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwareSourceSoftwarePackagesResultOutput)
}

// A collection of arguments for invoking getSoftwareSourceSoftwarePackages.
type GetSoftwareSourceSoftwarePackagesOutputArgs struct {
	// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput                             `pulumi:"displayNameContains"`
	Filters             GetSoftwareSourceSoftwarePackagesFilterArrayInput `pulumi:"filters"`
	// A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// The software source OCID.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (GetSoftwareSourceSoftwarePackagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceSoftwarePackagesArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSourceSoftwarePackages.
type GetSoftwareSourceSoftwarePackagesResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourceSoftwarePackagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceSoftwarePackagesResult)(nil)).Elem()
}

func (o GetSoftwareSourceSoftwarePackagesResultOutput) ToGetSoftwareSourceSoftwarePackagesResultOutput() GetSoftwareSourceSoftwarePackagesResultOutput {
	return o
}

func (o GetSoftwareSourceSoftwarePackagesResultOutput) ToGetSoftwareSourceSoftwarePackagesResultOutputWithContext(ctx context.Context) GetSoftwareSourceSoftwarePackagesResultOutput {
	return o
}

// Software source name.
func (o GetSoftwareSourceSoftwarePackagesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackagesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourceSoftwarePackagesResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackagesResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourceSoftwarePackagesResultOutput) Filters() GetSoftwareSourceSoftwarePackagesFilterArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackagesResult) []GetSoftwareSourceSoftwarePackagesFilter {
		return v.Filters
	}).(GetSoftwareSourceSoftwarePackagesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourceSoftwarePackagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackagesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether this package is the latest version.
func (o GetSoftwareSourceSoftwarePackagesResultOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackagesResult) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

// The list of software_package_collection.
func (o GetSoftwareSourceSoftwarePackagesResultOutput) SoftwarePackageCollections() GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackagesResult) []GetSoftwareSourceSoftwarePackagesSoftwarePackageCollection {
		return v.SoftwarePackageCollections
	}).(GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionArrayOutput)
}

func (o GetSoftwareSourceSoftwarePackagesResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceSoftwarePackagesResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourceSoftwarePackagesResultOutput{})
}
