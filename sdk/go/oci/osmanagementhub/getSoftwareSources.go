// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
//
// Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
// variety of criteria including but not limited to its name, status, architecture, and OS family.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.GetSoftwareSources(ctx, &osmanagementhub.GetSoftwareSourcesArgs{
//				ArchTypes:              _var.Software_source_arch_type,
//				Availabilities:         _var.Software_source_availability,
//				CompartmentId:          pulumi.StringRef(_var.Compartment_id),
//				DisplayName:            pulumi.StringRef(_var.Software_source_display_name),
//				DisplayNameContains:    pulumi.StringRef(_var.Software_source_display_name_contains),
//				DisplayNameNotEqualTos: _var.Software_source_display_name_not_equal_to,
//				OsFamilies:             _var.Software_source_os_family,
//				SoftwareSourceId:       pulumi.StringRef(oci_os_management_hub_software_source.Test_software_source.Id),
//				SoftwareSourceTypes:    _var.Software_source_software_source_type,
//				States:                 _var.Software_source_state,
//				VendorName:             pulumi.StringRef(_var.Software_source_vendor_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSoftwareSources(ctx *pulumi.Context, args *GetSoftwareSourcesArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourcesResult
	err := ctx.Invoke("oci:OsManagementHub/getSoftwareSources:getSoftwareSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSources.
type GetSoftwareSourcesArgs struct {
	// A filter to return only instances whose architecture type matches the given architecture.
	ArchTypes []string `pulumi:"archTypes"`
	// The availabilities of the software source for a tenant.
	Availabilities []string `pulumi:"availabilities"`
	// The OCID of the compartment that contains the resources to list.
	CompartmentId *string `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
	DisplayName *string `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// A multi filter to return resources that do not contains the given display names.
	DisplayNameNotEqualTos []string                   `pulumi:"displayNameNotEqualTos"`
	Filters                []GetSoftwareSourcesFilter `pulumi:"filters"`
	// A filter to return only instances whose OS family type matches the given OS family.
	OsFamilies []string `pulumi:"osFamilies"`
	// The OCID for the software source.
	SoftwareSourceId *string `pulumi:"softwareSourceId"`
	// The type of the software source.
	SoftwareSourceTypes []string `pulumi:"softwareSourceTypes"`
	// A filter to return only resources whose lifecycleState matches the given lifecycleStates.
	States []string `pulumi:"states"`
	// A filter to return only profiles that match the given vendorName.
	VendorName *string `pulumi:"vendorName"`
}

// A collection of values returned by getSoftwareSources.
type GetSoftwareSourcesResult struct {
	// The architecture type supported by the software source.
	ArchTypes []string `pulumi:"archTypes"`
	// Possible availabilities of a software source.
	Availabilities []string `pulumi:"availabilities"`
	// The OCID of the tenancy containing the software source.
	CompartmentId *string `pulumi:"compartmentId"`
	// User friendly name.
	DisplayName            *string                    `pulumi:"displayName"`
	DisplayNameContains    *string                    `pulumi:"displayNameContains"`
	DisplayNameNotEqualTos []string                   `pulumi:"displayNameNotEqualTos"`
	Filters                []GetSoftwareSourcesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The OS family the software source belongs to.
	OsFamilies []string `pulumi:"osFamilies"`
	// The list of software_source_collection.
	SoftwareSourceCollections []GetSoftwareSourcesSoftwareSourceCollection `pulumi:"softwareSourceCollections"`
	SoftwareSourceId          *string                                      `pulumi:"softwareSourceId"`
	// Type of the software source.
	SoftwareSourceTypes []string `pulumi:"softwareSourceTypes"`
	// The current state of the software source.
	States []string `pulumi:"states"`
	// Name of the vendor providing the software source.
	VendorName *string `pulumi:"vendorName"`
}

func GetSoftwareSourcesOutput(ctx *pulumi.Context, args GetSoftwareSourcesOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourcesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourcesResult, error) {
			args := v.(GetSoftwareSourcesArgs)
			r, err := GetSoftwareSources(ctx, &args, opts...)
			var s GetSoftwareSourcesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwareSourcesResultOutput)
}

// A collection of arguments for invoking getSoftwareSources.
type GetSoftwareSourcesOutputArgs struct {
	// A filter to return only instances whose architecture type matches the given architecture.
	ArchTypes pulumi.StringArrayInput `pulumi:"archTypes"`
	// The availabilities of the software source for a tenant.
	Availabilities pulumi.StringArrayInput `pulumi:"availabilities"`
	// The OCID of the compartment that contains the resources to list.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// A filter to return resources that may partially match the given display name.
	DisplayNameContains pulumi.StringPtrInput `pulumi:"displayNameContains"`
	// A multi filter to return resources that do not contains the given display names.
	DisplayNameNotEqualTos pulumi.StringArrayInput            `pulumi:"displayNameNotEqualTos"`
	Filters                GetSoftwareSourcesFilterArrayInput `pulumi:"filters"`
	// A filter to return only instances whose OS family type matches the given OS family.
	OsFamilies pulumi.StringArrayInput `pulumi:"osFamilies"`
	// The OCID for the software source.
	SoftwareSourceId pulumi.StringPtrInput `pulumi:"softwareSourceId"`
	// The type of the software source.
	SoftwareSourceTypes pulumi.StringArrayInput `pulumi:"softwareSourceTypes"`
	// A filter to return only resources whose lifecycleState matches the given lifecycleStates.
	States pulumi.StringArrayInput `pulumi:"states"`
	// A filter to return only profiles that match the given vendorName.
	VendorName pulumi.StringPtrInput `pulumi:"vendorName"`
}

func (GetSoftwareSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSources.
type GetSoftwareSourcesResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcesResult)(nil)).Elem()
}

func (o GetSoftwareSourcesResultOutput) ToGetSoftwareSourcesResultOutput() GetSoftwareSourcesResultOutput {
	return o
}

func (o GetSoftwareSourcesResultOutput) ToGetSoftwareSourcesResultOutputWithContext(ctx context.Context) GetSoftwareSourcesResultOutput {
	return o
}

func (o GetSoftwareSourcesResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetSoftwareSourcesResult] {
	return pulumix.Output[GetSoftwareSourcesResult]{
		OutputState: o.OutputState,
	}
}

// The architecture type supported by the software source.
func (o GetSoftwareSourcesResultOutput) ArchTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []string { return v.ArchTypes }).(pulumi.StringArrayOutput)
}

// Possible availabilities of a software source.
func (o GetSoftwareSourcesResultOutput) Availabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []string { return v.Availabilities }).(pulumi.StringArrayOutput)
}

// The OCID of the tenancy containing the software source.
func (o GetSoftwareSourcesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o GetSoftwareSourcesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourcesResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourcesResultOutput) DisplayNameNotEqualTos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []string { return v.DisplayNameNotEqualTos }).(pulumi.StringArrayOutput)
}

func (o GetSoftwareSourcesResultOutput) Filters() GetSoftwareSourcesFilterArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []GetSoftwareSourcesFilter { return v.Filters }).(GetSoftwareSourcesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The OS family the software source belongs to.
func (o GetSoftwareSourcesResultOutput) OsFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []string { return v.OsFamilies }).(pulumi.StringArrayOutput)
}

// The list of software_source_collection.
func (o GetSoftwareSourcesResultOutput) SoftwareSourceCollections() GetSoftwareSourcesSoftwareSourceCollectionArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []GetSoftwareSourcesSoftwareSourceCollection {
		return v.SoftwareSourceCollections
	}).(GetSoftwareSourcesSoftwareSourceCollectionArrayOutput)
}

func (o GetSoftwareSourcesResultOutput) SoftwareSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) *string { return v.SoftwareSourceId }).(pulumi.StringPtrOutput)
}

// Type of the software source.
func (o GetSoftwareSourcesResultOutput) SoftwareSourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []string { return v.SoftwareSourceTypes }).(pulumi.StringArrayOutput)
}

// The current state of the software source.
func (o GetSoftwareSourcesResultOutput) States() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []string { return v.States }).(pulumi.StringArrayOutput)
}

// Name of the vendor providing the software source.
func (o GetSoftwareSourcesResultOutput) VendorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) *string { return v.VendorName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourcesResultOutput{})
}
