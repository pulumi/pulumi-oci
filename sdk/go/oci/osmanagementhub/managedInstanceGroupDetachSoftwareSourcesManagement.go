// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Managed Instance Group Detach Software Sources Management resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Detaches the specified software sources from a managed instance group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.NewManagedInstanceGroupDetachSoftwareSourcesManagement(ctx, "test_managed_instance_group_detach_software_sources_management", &OsManagementHub.ManagedInstanceGroupDetachSoftwareSourcesManagementArgs{
//				ManagedInstanceGroupId: pulumi.Any(testManagedInstanceGroup.Id),
//				SoftwareSources:        pulumi.Any(managedInstanceGroupDetachSoftwareSourcesManagementSoftwareSources),
//				WorkRequestDetails: &osmanagementhub.ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsArgs{
//					Description: pulumi.Any(managedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsDescription),
//					DisplayName: pulumi.Any(managedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsDisplayName),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ManagedInstanceGroupDetachSoftwareSourcesManagement can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:OsManagementHub/managedInstanceGroupDetachSoftwareSourcesManagement:ManagedInstanceGroupDetachSoftwareSourcesManagement test_managed_instance_group_detach_software_sources_management "id"
// ```
type ManagedInstanceGroupDetachSoftwareSourcesManagement struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId pulumi.StringOutput `pulumi:"managedInstanceGroupId"`
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the group.
	SoftwareSources pulumi.StringArrayOutput `pulumi:"softwareSources"`
	// Provides the name and description of the job.
	WorkRequestDetails ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsOutput `pulumi:"workRequestDetails"`
}

// NewManagedInstanceGroupDetachSoftwareSourcesManagement registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceGroupDetachSoftwareSourcesManagement(ctx *pulumi.Context,
	name string, args *ManagedInstanceGroupDetachSoftwareSourcesManagementArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceGroupDetachSoftwareSourcesManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedInstanceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceGroupId'")
	}
	if args.SoftwareSources == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareSources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInstanceGroupDetachSoftwareSourcesManagement
	err := ctx.RegisterResource("oci:OsManagementHub/managedInstanceGroupDetachSoftwareSourcesManagement:ManagedInstanceGroupDetachSoftwareSourcesManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceGroupDetachSoftwareSourcesManagement gets an existing ManagedInstanceGroupDetachSoftwareSourcesManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceGroupDetachSoftwareSourcesManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceGroupDetachSoftwareSourcesManagementState, opts ...pulumi.ResourceOption) (*ManagedInstanceGroupDetachSoftwareSourcesManagement, error) {
	var resource ManagedInstanceGroupDetachSoftwareSourcesManagement
	err := ctx.ReadResource("oci:OsManagementHub/managedInstanceGroupDetachSoftwareSourcesManagement:ManagedInstanceGroupDetachSoftwareSourcesManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceGroupDetachSoftwareSourcesManagement resources.
type managedInstanceGroupDetachSoftwareSourcesManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId *string `pulumi:"managedInstanceGroupId"`
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the group.
	SoftwareSources []string `pulumi:"softwareSources"`
	// Provides the name and description of the job.
	WorkRequestDetails *ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails `pulumi:"workRequestDetails"`
}

type ManagedInstanceGroupDetachSoftwareSourcesManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId pulumi.StringPtrInput
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the group.
	SoftwareSources pulumi.StringArrayInput
	// Provides the name and description of the job.
	WorkRequestDetails ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsPtrInput
}

func (ManagedInstanceGroupDetachSoftwareSourcesManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceGroupDetachSoftwareSourcesManagementState)(nil)).Elem()
}

type managedInstanceGroupDetachSoftwareSourcesManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId string `pulumi:"managedInstanceGroupId"`
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the group.
	SoftwareSources []string `pulumi:"softwareSources"`
	// Provides the name and description of the job.
	WorkRequestDetails *ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails `pulumi:"workRequestDetails"`
}

// The set of arguments for constructing a ManagedInstanceGroupDetachSoftwareSourcesManagement resource.
type ManagedInstanceGroupDetachSoftwareSourcesManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId pulumi.StringInput
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the group.
	SoftwareSources pulumi.StringArrayInput
	// Provides the name and description of the job.
	WorkRequestDetails ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsPtrInput
}

func (ManagedInstanceGroupDetachSoftwareSourcesManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceGroupDetachSoftwareSourcesManagementArgs)(nil)).Elem()
}

type ManagedInstanceGroupDetachSoftwareSourcesManagementInput interface {
	pulumi.Input

	ToManagedInstanceGroupDetachSoftwareSourcesManagementOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementOutput
	ToManagedInstanceGroupDetachSoftwareSourcesManagementOutputWithContext(ctx context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementOutput
}

func (*ManagedInstanceGroupDetachSoftwareSourcesManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceGroupDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (i *ManagedInstanceGroupDetachSoftwareSourcesManagement) ToManagedInstanceGroupDetachSoftwareSourcesManagementOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementOutput {
	return i.ToManagedInstanceGroupDetachSoftwareSourcesManagementOutputWithContext(context.Background())
}

func (i *ManagedInstanceGroupDetachSoftwareSourcesManagement) ToManagedInstanceGroupDetachSoftwareSourcesManagementOutputWithContext(ctx context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupDetachSoftwareSourcesManagementOutput)
}

// ManagedInstanceGroupDetachSoftwareSourcesManagementArrayInput is an input type that accepts ManagedInstanceGroupDetachSoftwareSourcesManagementArray and ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceGroupDetachSoftwareSourcesManagementArrayInput` via:
//
//	ManagedInstanceGroupDetachSoftwareSourcesManagementArray{ ManagedInstanceGroupDetachSoftwareSourcesManagementArgs{...} }
type ManagedInstanceGroupDetachSoftwareSourcesManagementArrayInput interface {
	pulumi.Input

	ToManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput
	ToManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutputWithContext(context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput
}

type ManagedInstanceGroupDetachSoftwareSourcesManagementArray []ManagedInstanceGroupDetachSoftwareSourcesManagementInput

func (ManagedInstanceGroupDetachSoftwareSourcesManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceGroupDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (i ManagedInstanceGroupDetachSoftwareSourcesManagementArray) ToManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput {
	return i.ToManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceGroupDetachSoftwareSourcesManagementArray) ToManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutputWithContext(ctx context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput)
}

// ManagedInstanceGroupDetachSoftwareSourcesManagementMapInput is an input type that accepts ManagedInstanceGroupDetachSoftwareSourcesManagementMap and ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput values.
// You can construct a concrete instance of `ManagedInstanceGroupDetachSoftwareSourcesManagementMapInput` via:
//
//	ManagedInstanceGroupDetachSoftwareSourcesManagementMap{ "key": ManagedInstanceGroupDetachSoftwareSourcesManagementArgs{...} }
type ManagedInstanceGroupDetachSoftwareSourcesManagementMapInput interface {
	pulumi.Input

	ToManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput
	ToManagedInstanceGroupDetachSoftwareSourcesManagementMapOutputWithContext(context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput
}

type ManagedInstanceGroupDetachSoftwareSourcesManagementMap map[string]ManagedInstanceGroupDetachSoftwareSourcesManagementInput

func (ManagedInstanceGroupDetachSoftwareSourcesManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceGroupDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (i ManagedInstanceGroupDetachSoftwareSourcesManagementMap) ToManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput {
	return i.ToManagedInstanceGroupDetachSoftwareSourcesManagementMapOutputWithContext(context.Background())
}

func (i ManagedInstanceGroupDetachSoftwareSourcesManagementMap) ToManagedInstanceGroupDetachSoftwareSourcesManagementMapOutputWithContext(ctx context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput)
}

type ManagedInstanceGroupDetachSoftwareSourcesManagementOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupDetachSoftwareSourcesManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceGroupDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementOutput) ToManagedInstanceGroupDetachSoftwareSourcesManagementOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementOutput {
	return o
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementOutput) ToManagedInstanceGroupDetachSoftwareSourcesManagementOutputWithContext(ctx context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
func (o ManagedInstanceGroupDetachSoftwareSourcesManagementOutput) ManagedInstanceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceGroupDetachSoftwareSourcesManagement) pulumi.StringOutput {
		return v.ManagedInstanceGroupId
	}).(pulumi.StringOutput)
}

// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the group.
func (o ManagedInstanceGroupDetachSoftwareSourcesManagementOutput) SoftwareSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedInstanceGroupDetachSoftwareSourcesManagement) pulumi.StringArrayOutput {
		return v.SoftwareSources
	}).(pulumi.StringArrayOutput)
}

// Provides the name and description of the job.
func (o ManagedInstanceGroupDetachSoftwareSourcesManagementOutput) WorkRequestDetails() ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsOutput {
	return o.ApplyT(func(v *ManagedInstanceGroupDetachSoftwareSourcesManagement) ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsOutput {
		return v.WorkRequestDetails
	}).(ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetailsOutput)
}

type ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceGroupDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput) ToManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput {
	return o
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput) ToManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutputWithContext(ctx context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput {
	return o
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput) Index(i pulumi.IntInput) ManagedInstanceGroupDetachSoftwareSourcesManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceGroupDetachSoftwareSourcesManagement {
		return vs[0].([]*ManagedInstanceGroupDetachSoftwareSourcesManagement)[vs[1].(int)]
	}).(ManagedInstanceGroupDetachSoftwareSourcesManagementOutput)
}

type ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceGroupDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput) ToManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput() ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput {
	return o
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput) ToManagedInstanceGroupDetachSoftwareSourcesManagementMapOutputWithContext(ctx context.Context) ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput {
	return o
}

func (o ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceGroupDetachSoftwareSourcesManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceGroupDetachSoftwareSourcesManagement {
		return vs[0].(map[string]*ManagedInstanceGroupDetachSoftwareSourcesManagement)[vs[1].(string)]
	}).(ManagedInstanceGroupDetachSoftwareSourcesManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupDetachSoftwareSourcesManagementInput)(nil)).Elem(), &ManagedInstanceGroupDetachSoftwareSourcesManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupDetachSoftwareSourcesManagementArrayInput)(nil)).Elem(), ManagedInstanceGroupDetachSoftwareSourcesManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupDetachSoftwareSourcesManagementMapInput)(nil)).Elem(), ManagedInstanceGroupDetachSoftwareSourcesManagementMap{})
	pulumi.RegisterOutputType(ManagedInstanceGroupDetachSoftwareSourcesManagementOutput{})
	pulumi.RegisterOutputType(ManagedInstanceGroupDetachSoftwareSourcesManagementArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceGroupDetachSoftwareSourcesManagementMapOutput{})
}
