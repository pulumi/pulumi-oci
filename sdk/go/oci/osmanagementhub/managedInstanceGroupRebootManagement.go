// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Managed Instance Group Reboot Management resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Reboots all managed instances in the specified group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.NewManagedInstanceGroupRebootManagement(ctx, "test_managed_instance_group_reboot_management", &osmanagementhub.ManagedInstanceGroupRebootManagementArgs{
//				ManagedInstanceGroupId: pulumi.Any(testManagedInstanceGroup.Id),
//				RebootTimeoutInMins:    pulumi.Any(managedInstanceGroupRebootManagementRebootTimeoutInMins),
//				WorkRequestDetails: &osmanagementhub.ManagedInstanceGroupRebootManagementWorkRequestDetailsArgs{
//					Description: pulumi.Any(managedInstanceGroupRebootManagementWorkRequestDetailsDescription),
//					DisplayName: pulumi.Any(managedInstanceGroupRebootManagementWorkRequestDetailsDisplayName),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ManagedInstanceGroupRebootManagement can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:OsManagementHub/managedInstanceGroupRebootManagement:ManagedInstanceGroupRebootManagement test_managed_instance_group_reboot_management "id"
// ```
type ManagedInstanceGroupRebootManagement struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId pulumi.StringOutput `pulumi:"managedInstanceGroupId"`
	// The number of minutes the service waits for the reboot to complete. If the instances in the group don't reboot  within this time, the reboot job status is set to failed.
	RebootTimeoutInMins pulumi.IntOutput `pulumi:"rebootTimeoutInMins"`
	// Provides the name and description of the job.
	WorkRequestDetails ManagedInstanceGroupRebootManagementWorkRequestDetailsOutput `pulumi:"workRequestDetails"`
}

// NewManagedInstanceGroupRebootManagement registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceGroupRebootManagement(ctx *pulumi.Context,
	name string, args *ManagedInstanceGroupRebootManagementArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceGroupRebootManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedInstanceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInstanceGroupRebootManagement
	err := ctx.RegisterResource("oci:OsManagementHub/managedInstanceGroupRebootManagement:ManagedInstanceGroupRebootManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceGroupRebootManagement gets an existing ManagedInstanceGroupRebootManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceGroupRebootManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceGroupRebootManagementState, opts ...pulumi.ResourceOption) (*ManagedInstanceGroupRebootManagement, error) {
	var resource ManagedInstanceGroupRebootManagement
	err := ctx.ReadResource("oci:OsManagementHub/managedInstanceGroupRebootManagement:ManagedInstanceGroupRebootManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceGroupRebootManagement resources.
type managedInstanceGroupRebootManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId *string `pulumi:"managedInstanceGroupId"`
	// The number of minutes the service waits for the reboot to complete. If the instances in the group don't reboot  within this time, the reboot job status is set to failed.
	RebootTimeoutInMins *int `pulumi:"rebootTimeoutInMins"`
	// Provides the name and description of the job.
	WorkRequestDetails *ManagedInstanceGroupRebootManagementWorkRequestDetails `pulumi:"workRequestDetails"`
}

type ManagedInstanceGroupRebootManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId pulumi.StringPtrInput
	// The number of minutes the service waits for the reboot to complete. If the instances in the group don't reboot  within this time, the reboot job status is set to failed.
	RebootTimeoutInMins pulumi.IntPtrInput
	// Provides the name and description of the job.
	WorkRequestDetails ManagedInstanceGroupRebootManagementWorkRequestDetailsPtrInput
}

func (ManagedInstanceGroupRebootManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceGroupRebootManagementState)(nil)).Elem()
}

type managedInstanceGroupRebootManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId string `pulumi:"managedInstanceGroupId"`
	// The number of minutes the service waits for the reboot to complete. If the instances in the group don't reboot  within this time, the reboot job status is set to failed.
	RebootTimeoutInMins *int `pulumi:"rebootTimeoutInMins"`
	// Provides the name and description of the job.
	WorkRequestDetails *ManagedInstanceGroupRebootManagementWorkRequestDetails `pulumi:"workRequestDetails"`
}

// The set of arguments for constructing a ManagedInstanceGroupRebootManagement resource.
type ManagedInstanceGroupRebootManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
	ManagedInstanceGroupId pulumi.StringInput
	// The number of minutes the service waits for the reboot to complete. If the instances in the group don't reboot  within this time, the reboot job status is set to failed.
	RebootTimeoutInMins pulumi.IntPtrInput
	// Provides the name and description of the job.
	WorkRequestDetails ManagedInstanceGroupRebootManagementWorkRequestDetailsPtrInput
}

func (ManagedInstanceGroupRebootManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceGroupRebootManagementArgs)(nil)).Elem()
}

type ManagedInstanceGroupRebootManagementInput interface {
	pulumi.Input

	ToManagedInstanceGroupRebootManagementOutput() ManagedInstanceGroupRebootManagementOutput
	ToManagedInstanceGroupRebootManagementOutputWithContext(ctx context.Context) ManagedInstanceGroupRebootManagementOutput
}

func (*ManagedInstanceGroupRebootManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceGroupRebootManagement)(nil)).Elem()
}

func (i *ManagedInstanceGroupRebootManagement) ToManagedInstanceGroupRebootManagementOutput() ManagedInstanceGroupRebootManagementOutput {
	return i.ToManagedInstanceGroupRebootManagementOutputWithContext(context.Background())
}

func (i *ManagedInstanceGroupRebootManagement) ToManagedInstanceGroupRebootManagementOutputWithContext(ctx context.Context) ManagedInstanceGroupRebootManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupRebootManagementOutput)
}

// ManagedInstanceGroupRebootManagementArrayInput is an input type that accepts ManagedInstanceGroupRebootManagementArray and ManagedInstanceGroupRebootManagementArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceGroupRebootManagementArrayInput` via:
//
//	ManagedInstanceGroupRebootManagementArray{ ManagedInstanceGroupRebootManagementArgs{...} }
type ManagedInstanceGroupRebootManagementArrayInput interface {
	pulumi.Input

	ToManagedInstanceGroupRebootManagementArrayOutput() ManagedInstanceGroupRebootManagementArrayOutput
	ToManagedInstanceGroupRebootManagementArrayOutputWithContext(context.Context) ManagedInstanceGroupRebootManagementArrayOutput
}

type ManagedInstanceGroupRebootManagementArray []ManagedInstanceGroupRebootManagementInput

func (ManagedInstanceGroupRebootManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceGroupRebootManagement)(nil)).Elem()
}

func (i ManagedInstanceGroupRebootManagementArray) ToManagedInstanceGroupRebootManagementArrayOutput() ManagedInstanceGroupRebootManagementArrayOutput {
	return i.ToManagedInstanceGroupRebootManagementArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceGroupRebootManagementArray) ToManagedInstanceGroupRebootManagementArrayOutputWithContext(ctx context.Context) ManagedInstanceGroupRebootManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupRebootManagementArrayOutput)
}

// ManagedInstanceGroupRebootManagementMapInput is an input type that accepts ManagedInstanceGroupRebootManagementMap and ManagedInstanceGroupRebootManagementMapOutput values.
// You can construct a concrete instance of `ManagedInstanceGroupRebootManagementMapInput` via:
//
//	ManagedInstanceGroupRebootManagementMap{ "key": ManagedInstanceGroupRebootManagementArgs{...} }
type ManagedInstanceGroupRebootManagementMapInput interface {
	pulumi.Input

	ToManagedInstanceGroupRebootManagementMapOutput() ManagedInstanceGroupRebootManagementMapOutput
	ToManagedInstanceGroupRebootManagementMapOutputWithContext(context.Context) ManagedInstanceGroupRebootManagementMapOutput
}

type ManagedInstanceGroupRebootManagementMap map[string]ManagedInstanceGroupRebootManagementInput

func (ManagedInstanceGroupRebootManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceGroupRebootManagement)(nil)).Elem()
}

func (i ManagedInstanceGroupRebootManagementMap) ToManagedInstanceGroupRebootManagementMapOutput() ManagedInstanceGroupRebootManagementMapOutput {
	return i.ToManagedInstanceGroupRebootManagementMapOutputWithContext(context.Background())
}

func (i ManagedInstanceGroupRebootManagementMap) ToManagedInstanceGroupRebootManagementMapOutputWithContext(ctx context.Context) ManagedInstanceGroupRebootManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupRebootManagementMapOutput)
}

type ManagedInstanceGroupRebootManagementOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupRebootManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceGroupRebootManagement)(nil)).Elem()
}

func (o ManagedInstanceGroupRebootManagementOutput) ToManagedInstanceGroupRebootManagementOutput() ManagedInstanceGroupRebootManagementOutput {
	return o
}

func (o ManagedInstanceGroupRebootManagementOutput) ToManagedInstanceGroupRebootManagementOutputWithContext(ctx context.Context) ManagedInstanceGroupRebootManagementOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance group.
func (o ManagedInstanceGroupRebootManagementOutput) ManagedInstanceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceGroupRebootManagement) pulumi.StringOutput { return v.ManagedInstanceGroupId }).(pulumi.StringOutput)
}

// The number of minutes the service waits for the reboot to complete. If the instances in the group don't reboot  within this time, the reboot job status is set to failed.
func (o ManagedInstanceGroupRebootManagementOutput) RebootTimeoutInMins() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedInstanceGroupRebootManagement) pulumi.IntOutput { return v.RebootTimeoutInMins }).(pulumi.IntOutput)
}

// Provides the name and description of the job.
func (o ManagedInstanceGroupRebootManagementOutput) WorkRequestDetails() ManagedInstanceGroupRebootManagementWorkRequestDetailsOutput {
	return o.ApplyT(func(v *ManagedInstanceGroupRebootManagement) ManagedInstanceGroupRebootManagementWorkRequestDetailsOutput {
		return v.WorkRequestDetails
	}).(ManagedInstanceGroupRebootManagementWorkRequestDetailsOutput)
}

type ManagedInstanceGroupRebootManagementArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupRebootManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceGroupRebootManagement)(nil)).Elem()
}

func (o ManagedInstanceGroupRebootManagementArrayOutput) ToManagedInstanceGroupRebootManagementArrayOutput() ManagedInstanceGroupRebootManagementArrayOutput {
	return o
}

func (o ManagedInstanceGroupRebootManagementArrayOutput) ToManagedInstanceGroupRebootManagementArrayOutputWithContext(ctx context.Context) ManagedInstanceGroupRebootManagementArrayOutput {
	return o
}

func (o ManagedInstanceGroupRebootManagementArrayOutput) Index(i pulumi.IntInput) ManagedInstanceGroupRebootManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceGroupRebootManagement {
		return vs[0].([]*ManagedInstanceGroupRebootManagement)[vs[1].(int)]
	}).(ManagedInstanceGroupRebootManagementOutput)
}

type ManagedInstanceGroupRebootManagementMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupRebootManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceGroupRebootManagement)(nil)).Elem()
}

func (o ManagedInstanceGroupRebootManagementMapOutput) ToManagedInstanceGroupRebootManagementMapOutput() ManagedInstanceGroupRebootManagementMapOutput {
	return o
}

func (o ManagedInstanceGroupRebootManagementMapOutput) ToManagedInstanceGroupRebootManagementMapOutputWithContext(ctx context.Context) ManagedInstanceGroupRebootManagementMapOutput {
	return o
}

func (o ManagedInstanceGroupRebootManagementMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceGroupRebootManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceGroupRebootManagement {
		return vs[0].(map[string]*ManagedInstanceGroupRebootManagement)[vs[1].(string)]
	}).(ManagedInstanceGroupRebootManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupRebootManagementInput)(nil)).Elem(), &ManagedInstanceGroupRebootManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupRebootManagementArrayInput)(nil)).Elem(), ManagedInstanceGroupRebootManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupRebootManagementMapInput)(nil)).Elem(), ManagedInstanceGroupRebootManagementMap{})
	pulumi.RegisterOutputType(ManagedInstanceGroupRebootManagementOutput{})
	pulumi.RegisterOutputType(ManagedInstanceGroupRebootManagementArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceGroupRebootManagementMapOutput{})
}
