// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Profile Detach Software Sources Management resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Detaches the specified software sources from a profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.NewProfileDetachSoftwareSourcesManagement(ctx, "test_profile_detach_software_sources_management", &osmanagementhub.ProfileDetachSoftwareSourcesManagementArgs{
//				ProfileId:       pulumi.Any(testProfile.Id),
//				SoftwareSources: pulumi.Any(profileDetachSoftwareSourcesManagementSoftwareSources),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProfileDetachSoftwareSourcesManagement can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:OsManagementHub/profileDetachSoftwareSourcesManagement:ProfileDetachSoftwareSourcesManagement test_profile_detach_software_sources_management "id"
// ```
type ProfileDetachSoftwareSourcesManagement struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
	ProfileId pulumi.StringOutput `pulumi:"profileId"`
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the profile.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSources pulumi.StringArrayOutput `pulumi:"softwareSources"`
}

// NewProfileDetachSoftwareSourcesManagement registers a new resource with the given unique name, arguments, and options.
func NewProfileDetachSoftwareSourcesManagement(ctx *pulumi.Context,
	name string, args *ProfileDetachSoftwareSourcesManagementArgs, opts ...pulumi.ResourceOption) (*ProfileDetachSoftwareSourcesManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	if args.SoftwareSources == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareSources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProfileDetachSoftwareSourcesManagement
	err := ctx.RegisterResource("oci:OsManagementHub/profileDetachSoftwareSourcesManagement:ProfileDetachSoftwareSourcesManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileDetachSoftwareSourcesManagement gets an existing ProfileDetachSoftwareSourcesManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileDetachSoftwareSourcesManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileDetachSoftwareSourcesManagementState, opts ...pulumi.ResourceOption) (*ProfileDetachSoftwareSourcesManagement, error) {
	var resource ProfileDetachSoftwareSourcesManagement
	err := ctx.ReadResource("oci:OsManagementHub/profileDetachSoftwareSourcesManagement:ProfileDetachSoftwareSourcesManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileDetachSoftwareSourcesManagement resources.
type profileDetachSoftwareSourcesManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
	ProfileId *string `pulumi:"profileId"`
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the profile.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSources []string `pulumi:"softwareSources"`
}

type ProfileDetachSoftwareSourcesManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
	ProfileId pulumi.StringPtrInput
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the profile.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSources pulumi.StringArrayInput
}

func (ProfileDetachSoftwareSourcesManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileDetachSoftwareSourcesManagementState)(nil)).Elem()
}

type profileDetachSoftwareSourcesManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
	ProfileId string `pulumi:"profileId"`
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the profile.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSources []string `pulumi:"softwareSources"`
}

// The set of arguments for constructing a ProfileDetachSoftwareSourcesManagement resource.
type ProfileDetachSoftwareSourcesManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
	ProfileId pulumi.StringInput
	// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the profile.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSources pulumi.StringArrayInput
}

func (ProfileDetachSoftwareSourcesManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileDetachSoftwareSourcesManagementArgs)(nil)).Elem()
}

type ProfileDetachSoftwareSourcesManagementInput interface {
	pulumi.Input

	ToProfileDetachSoftwareSourcesManagementOutput() ProfileDetachSoftwareSourcesManagementOutput
	ToProfileDetachSoftwareSourcesManagementOutputWithContext(ctx context.Context) ProfileDetachSoftwareSourcesManagementOutput
}

func (*ProfileDetachSoftwareSourcesManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (i *ProfileDetachSoftwareSourcesManagement) ToProfileDetachSoftwareSourcesManagementOutput() ProfileDetachSoftwareSourcesManagementOutput {
	return i.ToProfileDetachSoftwareSourcesManagementOutputWithContext(context.Background())
}

func (i *ProfileDetachSoftwareSourcesManagement) ToProfileDetachSoftwareSourcesManagementOutputWithContext(ctx context.Context) ProfileDetachSoftwareSourcesManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileDetachSoftwareSourcesManagementOutput)
}

// ProfileDetachSoftwareSourcesManagementArrayInput is an input type that accepts ProfileDetachSoftwareSourcesManagementArray and ProfileDetachSoftwareSourcesManagementArrayOutput values.
// You can construct a concrete instance of `ProfileDetachSoftwareSourcesManagementArrayInput` via:
//
//	ProfileDetachSoftwareSourcesManagementArray{ ProfileDetachSoftwareSourcesManagementArgs{...} }
type ProfileDetachSoftwareSourcesManagementArrayInput interface {
	pulumi.Input

	ToProfileDetachSoftwareSourcesManagementArrayOutput() ProfileDetachSoftwareSourcesManagementArrayOutput
	ToProfileDetachSoftwareSourcesManagementArrayOutputWithContext(context.Context) ProfileDetachSoftwareSourcesManagementArrayOutput
}

type ProfileDetachSoftwareSourcesManagementArray []ProfileDetachSoftwareSourcesManagementInput

func (ProfileDetachSoftwareSourcesManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (i ProfileDetachSoftwareSourcesManagementArray) ToProfileDetachSoftwareSourcesManagementArrayOutput() ProfileDetachSoftwareSourcesManagementArrayOutput {
	return i.ToProfileDetachSoftwareSourcesManagementArrayOutputWithContext(context.Background())
}

func (i ProfileDetachSoftwareSourcesManagementArray) ToProfileDetachSoftwareSourcesManagementArrayOutputWithContext(ctx context.Context) ProfileDetachSoftwareSourcesManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileDetachSoftwareSourcesManagementArrayOutput)
}

// ProfileDetachSoftwareSourcesManagementMapInput is an input type that accepts ProfileDetachSoftwareSourcesManagementMap and ProfileDetachSoftwareSourcesManagementMapOutput values.
// You can construct a concrete instance of `ProfileDetachSoftwareSourcesManagementMapInput` via:
//
//	ProfileDetachSoftwareSourcesManagementMap{ "key": ProfileDetachSoftwareSourcesManagementArgs{...} }
type ProfileDetachSoftwareSourcesManagementMapInput interface {
	pulumi.Input

	ToProfileDetachSoftwareSourcesManagementMapOutput() ProfileDetachSoftwareSourcesManagementMapOutput
	ToProfileDetachSoftwareSourcesManagementMapOutputWithContext(context.Context) ProfileDetachSoftwareSourcesManagementMapOutput
}

type ProfileDetachSoftwareSourcesManagementMap map[string]ProfileDetachSoftwareSourcesManagementInput

func (ProfileDetachSoftwareSourcesManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (i ProfileDetachSoftwareSourcesManagementMap) ToProfileDetachSoftwareSourcesManagementMapOutput() ProfileDetachSoftwareSourcesManagementMapOutput {
	return i.ToProfileDetachSoftwareSourcesManagementMapOutputWithContext(context.Background())
}

func (i ProfileDetachSoftwareSourcesManagementMap) ToProfileDetachSoftwareSourcesManagementMapOutputWithContext(ctx context.Context) ProfileDetachSoftwareSourcesManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileDetachSoftwareSourcesManagementMapOutput)
}

type ProfileDetachSoftwareSourcesManagementOutput struct{ *pulumi.OutputState }

func (ProfileDetachSoftwareSourcesManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (o ProfileDetachSoftwareSourcesManagementOutput) ToProfileDetachSoftwareSourcesManagementOutput() ProfileDetachSoftwareSourcesManagementOutput {
	return o
}

func (o ProfileDetachSoftwareSourcesManagementOutput) ToProfileDetachSoftwareSourcesManagementOutputWithContext(ctx context.Context) ProfileDetachSoftwareSourcesManagementOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
func (o ProfileDetachSoftwareSourcesManagementOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileDetachSoftwareSourcesManagement) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

// List of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to detach from the profile.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ProfileDetachSoftwareSourcesManagementOutput) SoftwareSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileDetachSoftwareSourcesManagement) pulumi.StringArrayOutput { return v.SoftwareSources }).(pulumi.StringArrayOutput)
}

type ProfileDetachSoftwareSourcesManagementArrayOutput struct{ *pulumi.OutputState }

func (ProfileDetachSoftwareSourcesManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (o ProfileDetachSoftwareSourcesManagementArrayOutput) ToProfileDetachSoftwareSourcesManagementArrayOutput() ProfileDetachSoftwareSourcesManagementArrayOutput {
	return o
}

func (o ProfileDetachSoftwareSourcesManagementArrayOutput) ToProfileDetachSoftwareSourcesManagementArrayOutputWithContext(ctx context.Context) ProfileDetachSoftwareSourcesManagementArrayOutput {
	return o
}

func (o ProfileDetachSoftwareSourcesManagementArrayOutput) Index(i pulumi.IntInput) ProfileDetachSoftwareSourcesManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProfileDetachSoftwareSourcesManagement {
		return vs[0].([]*ProfileDetachSoftwareSourcesManagement)[vs[1].(int)]
	}).(ProfileDetachSoftwareSourcesManagementOutput)
}

type ProfileDetachSoftwareSourcesManagementMapOutput struct{ *pulumi.OutputState }

func (ProfileDetachSoftwareSourcesManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileDetachSoftwareSourcesManagement)(nil)).Elem()
}

func (o ProfileDetachSoftwareSourcesManagementMapOutput) ToProfileDetachSoftwareSourcesManagementMapOutput() ProfileDetachSoftwareSourcesManagementMapOutput {
	return o
}

func (o ProfileDetachSoftwareSourcesManagementMapOutput) ToProfileDetachSoftwareSourcesManagementMapOutputWithContext(ctx context.Context) ProfileDetachSoftwareSourcesManagementMapOutput {
	return o
}

func (o ProfileDetachSoftwareSourcesManagementMapOutput) MapIndex(k pulumi.StringInput) ProfileDetachSoftwareSourcesManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProfileDetachSoftwareSourcesManagement {
		return vs[0].(map[string]*ProfileDetachSoftwareSourcesManagement)[vs[1].(string)]
	}).(ProfileDetachSoftwareSourcesManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileDetachSoftwareSourcesManagementInput)(nil)).Elem(), &ProfileDetachSoftwareSourcesManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileDetachSoftwareSourcesManagementArrayInput)(nil)).Elem(), ProfileDetachSoftwareSourcesManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileDetachSoftwareSourcesManagementMapInput)(nil)).Elem(), ProfileDetachSoftwareSourcesManagementMap{})
	pulumi.RegisterOutputType(ProfileDetachSoftwareSourcesManagementOutput{})
	pulumi.RegisterOutputType(ProfileDetachSoftwareSourcesManagementArrayOutput{})
	pulumi.RegisterOutputType(ProfileDetachSoftwareSourcesManagementMapOutput{})
}
