// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Creates a new software source.
//
// ## Import
//
// SoftwareSources can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:OsManagementHub/softwareSource:SoftwareSource test_software_source "id"
// ```
type SoftwareSource struct {
	pulumi.CustomResourceState

	// (Updatable) Advanced repository options for the software source
	AdvancedRepoOptions pulumi.StringOutput `pulumi:"advancedRepoOptions"`
	// The architecture type supported by the third-party software source.
	ArchType pulumi.StringOutput `pulumi:"archType"`
	// Availability of the software source (for non-OCI environments).
	Availability pulumi.StringOutput `pulumi:"availability"`
	// Availability of the software source (for Oracle Cloud Infrastructure environments).
	AvailabilityAtOci pulumi.StringOutput `pulumi:"availabilityAtOci"`
	// The yum repository checksum type used by this software source.
	ChecksumType pulumi.StringOutput `pulumi:"checksumType"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
	CustomSoftwareSourceFilter SoftwareSourceCustomSoftwareSourceFilterOutput `pulumi:"customSoftwareSourceFilter"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) User-specified description for the software source. Avoid entering confidential information.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint pulumi.StringOutput `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source.
	GpgKeyId pulumi.StringOutput `pulumi:"gpgKeyId"`
	// (Updatable) URI of the GPG key for this software source.
	GpgKeyUrl pulumi.StringOutput `pulumi:"gpgKeyUrl"`
	// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
	IsAutoResolveDependencies pulumi.BoolOutput `pulumi:"isAutoResolveDependencies"`
	// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
	IsAutomaticallyUpdated pulumi.BoolOutput `pulumi:"isAutomaticallyUpdated"`
	// Indicates whether the service should create the software source from a list of packages provided by the user.
	IsCreatedFromPackageList pulumi.BoolOutput `pulumi:"isCreatedFromPackageList"`
	// (Updatable) Whether signature verification should be done for the software source.
	IsGpgCheckEnabled pulumi.BoolOutput `pulumi:"isGpgCheckEnabled"`
	// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
	// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
	// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
	// * For a package filter that does not specify a version, this will include only the latest available version of the package.
	// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
	// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
	IsLatestContentOnly pulumi.BoolOutput `pulumi:"isLatestContentOnly"`
	// Indicates whether the software source is required for the Autonomous Linux service.
	IsMandatoryForAutonomousLinux pulumi.BoolOutput `pulumi:"isMandatoryForAutonomousLinux"`
	// (Updatable) Whether this software source can be synced to a management station
	IsMirrorSyncAllowed pulumi.BoolOutput `pulumi:"isMirrorSyncAllowed"`
	// (Updatable) Whether SSL validation needs to be turned on
	IsSslVerifyEnabled pulumi.BoolOutput `pulumi:"isSslVerifyEnabled"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
	OriginSoftwareSourceId pulumi.StringOutput `pulumi:"originSoftwareSourceId"`
	// The OS family for the third-party software source.
	OsFamily pulumi.StringOutput `pulumi:"osFamily"`
	// Number of packages the software source contains.
	PackageCount pulumi.StringOutput `pulumi:"packageCount"`
	// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
	Packages pulumi.StringArrayOutput `pulumi:"packages"`
	// The repository ID for the software source.
	RepoId pulumi.StringOutput `pulumi:"repoId"`
	// The size of the software source in bytes (B).
	Size pulumi.Float64Output `pulumi:"size"`
	// The creation type of a software source.
	SoftwareSourceSubType pulumi.StringOutput `pulumi:"softwareSourceSubType"`
	// (Updatable) Type of software source.
	SoftwareSourceType pulumi.StringOutput `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion pulumi.StringOutput `pulumi:"softwareSourceVersion"`
	// The current state of the software source.
	State pulumi.StringOutput `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	TimeMetadataUpdated pulumi.StringOutput `pulumi:"timeMetadataUpdated"`
	// (Updatable) URL for the third-party software source.
	Url pulumi.StringOutput `pulumi:"url"`
	// Name of the vendor providing the software source.
	VendorName pulumi.StringOutput `pulumi:"vendorName"`
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources SoftwareSourceVendorSoftwareSourceArrayOutput `pulumi:"vendorSoftwareSources"`
}

// NewSoftwareSource registers a new resource with the given unique name, arguments, and options.
func NewSoftwareSource(ctx *pulumi.Context,
	name string, args *SoftwareSourceArgs, opts ...pulumi.ResourceOption) (*SoftwareSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.SoftwareSourceType == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareSourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SoftwareSource
	err := ctx.RegisterResource("oci:OsManagementHub/softwareSource:SoftwareSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareSource gets an existing SoftwareSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareSourceState, opts ...pulumi.ResourceOption) (*SoftwareSource, error) {
	var resource SoftwareSource
	err := ctx.ReadResource("oci:OsManagementHub/softwareSource:SoftwareSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareSource resources.
type softwareSourceState struct {
	// (Updatable) Advanced repository options for the software source
	AdvancedRepoOptions *string `pulumi:"advancedRepoOptions"`
	// The architecture type supported by the third-party software source.
	ArchType *string `pulumi:"archType"`
	// Availability of the software source (for non-OCI environments).
	Availability *string `pulumi:"availability"`
	// Availability of the software source (for Oracle Cloud Infrastructure environments).
	AvailabilityAtOci *string `pulumi:"availabilityAtOci"`
	// The yum repository checksum type used by this software source.
	ChecksumType *string `pulumi:"checksumType"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
	CustomSoftwareSourceFilter *SoftwareSourceCustomSoftwareSourceFilter `pulumi:"customSoftwareSourceFilter"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) User-specified description for the software source. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint *string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source.
	GpgKeyId *string `pulumi:"gpgKeyId"`
	// (Updatable) URI of the GPG key for this software source.
	GpgKeyUrl *string `pulumi:"gpgKeyUrl"`
	// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
	IsAutoResolveDependencies *bool `pulumi:"isAutoResolveDependencies"`
	// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
	IsAutomaticallyUpdated *bool `pulumi:"isAutomaticallyUpdated"`
	// Indicates whether the service should create the software source from a list of packages provided by the user.
	IsCreatedFromPackageList *bool `pulumi:"isCreatedFromPackageList"`
	// (Updatable) Whether signature verification should be done for the software source.
	IsGpgCheckEnabled *bool `pulumi:"isGpgCheckEnabled"`
	// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
	// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
	// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
	// * For a package filter that does not specify a version, this will include only the latest available version of the package.
	// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
	// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
	IsLatestContentOnly *bool `pulumi:"isLatestContentOnly"`
	// Indicates whether the software source is required for the Autonomous Linux service.
	IsMandatoryForAutonomousLinux *bool `pulumi:"isMandatoryForAutonomousLinux"`
	// (Updatable) Whether this software source can be synced to a management station
	IsMirrorSyncAllowed *bool `pulumi:"isMirrorSyncAllowed"`
	// (Updatable) Whether SSL validation needs to be turned on
	IsSslVerifyEnabled *bool `pulumi:"isSslVerifyEnabled"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
	OriginSoftwareSourceId *string `pulumi:"originSoftwareSourceId"`
	// The OS family for the third-party software source.
	OsFamily *string `pulumi:"osFamily"`
	// Number of packages the software source contains.
	PackageCount *string `pulumi:"packageCount"`
	// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
	Packages []string `pulumi:"packages"`
	// The repository ID for the software source.
	RepoId *string `pulumi:"repoId"`
	// The size of the software source in bytes (B).
	Size *float64 `pulumi:"size"`
	// The creation type of a software source.
	SoftwareSourceSubType *string `pulumi:"softwareSourceSubType"`
	// (Updatable) Type of software source.
	SoftwareSourceType *string `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion *string `pulumi:"softwareSourceVersion"`
	// The current state of the software source.
	State *string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	TimeMetadataUpdated *string `pulumi:"timeMetadataUpdated"`
	// (Updatable) URL for the third-party software source.
	Url *string `pulumi:"url"`
	// Name of the vendor providing the software source.
	VendorName *string `pulumi:"vendorName"`
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources []SoftwareSourceVendorSoftwareSource `pulumi:"vendorSoftwareSources"`
}

type SoftwareSourceState struct {
	// (Updatable) Advanced repository options for the software source
	AdvancedRepoOptions pulumi.StringPtrInput
	// The architecture type supported by the third-party software source.
	ArchType pulumi.StringPtrInput
	// Availability of the software source (for non-OCI environments).
	Availability pulumi.StringPtrInput
	// Availability of the software source (for Oracle Cloud Infrastructure environments).
	AvailabilityAtOci pulumi.StringPtrInput
	// The yum repository checksum type used by this software source.
	ChecksumType pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
	CustomSoftwareSourceFilter SoftwareSourceCustomSoftwareSourceFilterPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) User-specified description for the software source. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint pulumi.StringPtrInput
	// ID of the GPG key for this software source.
	GpgKeyId pulumi.StringPtrInput
	// (Updatable) URI of the GPG key for this software source.
	GpgKeyUrl pulumi.StringPtrInput
	// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
	IsAutoResolveDependencies pulumi.BoolPtrInput
	// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
	IsAutomaticallyUpdated pulumi.BoolPtrInput
	// Indicates whether the service should create the software source from a list of packages provided by the user.
	IsCreatedFromPackageList pulumi.BoolPtrInput
	// (Updatable) Whether signature verification should be done for the software source.
	IsGpgCheckEnabled pulumi.BoolPtrInput
	// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
	// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
	// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
	// * For a package filter that does not specify a version, this will include only the latest available version of the package.
	// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
	// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
	IsLatestContentOnly pulumi.BoolPtrInput
	// Indicates whether the software source is required for the Autonomous Linux service.
	IsMandatoryForAutonomousLinux pulumi.BoolPtrInput
	// (Updatable) Whether this software source can be synced to a management station
	IsMirrorSyncAllowed pulumi.BoolPtrInput
	// (Updatable) Whether SSL validation needs to be turned on
	IsSslVerifyEnabled pulumi.BoolPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
	OriginSoftwareSourceId pulumi.StringPtrInput
	// The OS family for the third-party software source.
	OsFamily pulumi.StringPtrInput
	// Number of packages the software source contains.
	PackageCount pulumi.StringPtrInput
	// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
	Packages pulumi.StringArrayInput
	// The repository ID for the software source.
	RepoId pulumi.StringPtrInput
	// The size of the software source in bytes (B).
	Size pulumi.Float64PtrInput
	// The creation type of a software source.
	SoftwareSourceSubType pulumi.StringPtrInput
	// (Updatable) Type of software source.
	SoftwareSourceType pulumi.StringPtrInput
	// The version to assign to this custom software source.
	SoftwareSourceVersion pulumi.StringPtrInput
	// The current state of the software source.
	State pulumi.StringPtrInput
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	TimeCreated pulumi.StringPtrInput
	// The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
	TimeMetadataUpdated pulumi.StringPtrInput
	// (Updatable) URL for the third-party software source.
	Url pulumi.StringPtrInput
	// Name of the vendor providing the software source.
	VendorName pulumi.StringPtrInput
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources SoftwareSourceVendorSoftwareSourceArrayInput
}

func (SoftwareSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceState)(nil)).Elem()
}

type softwareSourceArgs struct {
	// (Updatable) Advanced repository options for the software source
	AdvancedRepoOptions *string `pulumi:"advancedRepoOptions"`
	// The architecture type supported by the third-party software source.
	ArchType *string `pulumi:"archType"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
	CustomSoftwareSourceFilter *SoftwareSourceCustomSoftwareSourceFilter `pulumi:"customSoftwareSourceFilter"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) User-specified description for the software source. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) URI of the GPG key for this software source.
	GpgKeyUrl *string `pulumi:"gpgKeyUrl"`
	// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
	IsAutoResolveDependencies *bool `pulumi:"isAutoResolveDependencies"`
	// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
	IsAutomaticallyUpdated *bool `pulumi:"isAutomaticallyUpdated"`
	// Indicates whether the service should create the software source from a list of packages provided by the user.
	IsCreatedFromPackageList *bool `pulumi:"isCreatedFromPackageList"`
	// (Updatable) Whether signature verification should be done for the software source.
	IsGpgCheckEnabled *bool `pulumi:"isGpgCheckEnabled"`
	// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
	// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
	// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
	// * For a package filter that does not specify a version, this will include only the latest available version of the package.
	// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
	// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
	IsLatestContentOnly *bool `pulumi:"isLatestContentOnly"`
	// (Updatable) Whether this software source can be synced to a management station
	IsMirrorSyncAllowed *bool `pulumi:"isMirrorSyncAllowed"`
	// (Updatable) Whether SSL validation needs to be turned on
	IsSslVerifyEnabled *bool `pulumi:"isSslVerifyEnabled"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
	OriginSoftwareSourceId *string `pulumi:"originSoftwareSourceId"`
	// The OS family for the third-party software source.
	OsFamily *string `pulumi:"osFamily"`
	// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
	Packages []string `pulumi:"packages"`
	// The creation type of a software source.
	SoftwareSourceSubType *string `pulumi:"softwareSourceSubType"`
	// (Updatable) Type of software source.
	SoftwareSourceType string `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion *string `pulumi:"softwareSourceVersion"`
	// (Updatable) URL for the third-party software source.
	Url *string `pulumi:"url"`
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources []SoftwareSourceVendorSoftwareSource `pulumi:"vendorSoftwareSources"`
}

// The set of arguments for constructing a SoftwareSource resource.
type SoftwareSourceArgs struct {
	// (Updatable) Advanced repository options for the software source
	AdvancedRepoOptions pulumi.StringPtrInput
	// The architecture type supported by the third-party software source.
	ArchType pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
	CompartmentId pulumi.StringInput
	// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
	CustomSoftwareSourceFilter SoftwareSourceCustomSoftwareSourceFilterPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) User-specified description for the software source. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) URI of the GPG key for this software source.
	GpgKeyUrl pulumi.StringPtrInput
	// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
	IsAutoResolveDependencies pulumi.BoolPtrInput
	// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
	IsAutomaticallyUpdated pulumi.BoolPtrInput
	// Indicates whether the service should create the software source from a list of packages provided by the user.
	IsCreatedFromPackageList pulumi.BoolPtrInput
	// (Updatable) Whether signature verification should be done for the software source.
	IsGpgCheckEnabled pulumi.BoolPtrInput
	// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
	// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
	// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
	// * For a package filter that does not specify a version, this will include only the latest available version of the package.
	// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
	// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
	IsLatestContentOnly pulumi.BoolPtrInput
	// (Updatable) Whether this software source can be synced to a management station
	IsMirrorSyncAllowed pulumi.BoolPtrInput
	// (Updatable) Whether SSL validation needs to be turned on
	IsSslVerifyEnabled pulumi.BoolPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
	OriginSoftwareSourceId pulumi.StringPtrInput
	// The OS family for the third-party software source.
	OsFamily pulumi.StringPtrInput
	// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
	Packages pulumi.StringArrayInput
	// The creation type of a software source.
	SoftwareSourceSubType pulumi.StringPtrInput
	// (Updatable) Type of software source.
	SoftwareSourceType pulumi.StringInput
	// The version to assign to this custom software source.
	SoftwareSourceVersion pulumi.StringPtrInput
	// (Updatable) URL for the third-party software source.
	Url pulumi.StringPtrInput
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources SoftwareSourceVendorSoftwareSourceArrayInput
}

func (SoftwareSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceArgs)(nil)).Elem()
}

type SoftwareSourceInput interface {
	pulumi.Input

	ToSoftwareSourceOutput() SoftwareSourceOutput
	ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput
}

func (*SoftwareSource) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSource)(nil)).Elem()
}

func (i *SoftwareSource) ToSoftwareSourceOutput() SoftwareSourceOutput {
	return i.ToSoftwareSourceOutputWithContext(context.Background())
}

func (i *SoftwareSource) ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceOutput)
}

// SoftwareSourceArrayInput is an input type that accepts SoftwareSourceArray and SoftwareSourceArrayOutput values.
// You can construct a concrete instance of `SoftwareSourceArrayInput` via:
//
//	SoftwareSourceArray{ SoftwareSourceArgs{...} }
type SoftwareSourceArrayInput interface {
	pulumi.Input

	ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput
	ToSoftwareSourceArrayOutputWithContext(context.Context) SoftwareSourceArrayOutput
}

type SoftwareSourceArray []SoftwareSourceInput

func (SoftwareSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSource)(nil)).Elem()
}

func (i SoftwareSourceArray) ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput {
	return i.ToSoftwareSourceArrayOutputWithContext(context.Background())
}

func (i SoftwareSourceArray) ToSoftwareSourceArrayOutputWithContext(ctx context.Context) SoftwareSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceArrayOutput)
}

// SoftwareSourceMapInput is an input type that accepts SoftwareSourceMap and SoftwareSourceMapOutput values.
// You can construct a concrete instance of `SoftwareSourceMapInput` via:
//
//	SoftwareSourceMap{ "key": SoftwareSourceArgs{...} }
type SoftwareSourceMapInput interface {
	pulumi.Input

	ToSoftwareSourceMapOutput() SoftwareSourceMapOutput
	ToSoftwareSourceMapOutputWithContext(context.Context) SoftwareSourceMapOutput
}

type SoftwareSourceMap map[string]SoftwareSourceInput

func (SoftwareSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSource)(nil)).Elem()
}

func (i SoftwareSourceMap) ToSoftwareSourceMapOutput() SoftwareSourceMapOutput {
	return i.ToSoftwareSourceMapOutputWithContext(context.Background())
}

func (i SoftwareSourceMap) ToSoftwareSourceMapOutputWithContext(ctx context.Context) SoftwareSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceMapOutput)
}

type SoftwareSourceOutput struct{ *pulumi.OutputState }

func (SoftwareSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceOutput) ToSoftwareSourceOutput() SoftwareSourceOutput {
	return o
}

func (o SoftwareSourceOutput) ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput {
	return o
}

// (Updatable) Advanced repository options for the software source
func (o SoftwareSourceOutput) AdvancedRepoOptions() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.AdvancedRepoOptions }).(pulumi.StringOutput)
}

// The architecture type supported by the third-party software source.
func (o SoftwareSourceOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.ArchType }).(pulumi.StringOutput)
}

// Availability of the software source (for non-OCI environments).
func (o SoftwareSourceOutput) Availability() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.Availability }).(pulumi.StringOutput)
}

// Availability of the software source (for Oracle Cloud Infrastructure environments).
func (o SoftwareSourceOutput) AvailabilityAtOci() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.AvailabilityAtOci }).(pulumi.StringOutput)
}

// The yum repository checksum type used by this software source.
func (o SoftwareSourceOutput) ChecksumType() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.ChecksumType }).(pulumi.StringOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
func (o SoftwareSourceOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
func (o SoftwareSourceOutput) CustomSoftwareSourceFilter() SoftwareSourceCustomSoftwareSourceFilterOutput {
	return o.ApplyT(func(v *SoftwareSource) SoftwareSourceCustomSoftwareSourceFilterOutput {
		return v.CustomSoftwareSourceFilter
	}).(SoftwareSourceCustomSoftwareSourceFilterOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o SoftwareSourceOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) User-specified description for the software source. Avoid entering confidential information.
func (o SoftwareSourceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
func (o SoftwareSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o SoftwareSourceOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// Fingerprint of the GPG key for this software source.
func (o SoftwareSourceOutput) GpgKeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.GpgKeyFingerprint }).(pulumi.StringOutput)
}

// ID of the GPG key for this software source.
func (o SoftwareSourceOutput) GpgKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.GpgKeyId }).(pulumi.StringOutput)
}

// (Updatable) URI of the GPG key for this software source.
func (o SoftwareSourceOutput) GpgKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.GpgKeyUrl }).(pulumi.StringOutput)
}

// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
func (o SoftwareSourceOutput) IsAutoResolveDependencies() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsAutoResolveDependencies }).(pulumi.BoolOutput)
}

// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
func (o SoftwareSourceOutput) IsAutomaticallyUpdated() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsAutomaticallyUpdated }).(pulumi.BoolOutput)
}

// Indicates whether the service should create the software source from a list of packages provided by the user.
func (o SoftwareSourceOutput) IsCreatedFromPackageList() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsCreatedFromPackageList }).(pulumi.BoolOutput)
}

// (Updatable) Whether signature verification should be done for the software source.
func (o SoftwareSourceOutput) IsGpgCheckEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsGpgCheckEnabled }).(pulumi.BoolOutput)
}

// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
// * For a package filter that does not specify a version, this will include only the latest available version of the package.
// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
func (o SoftwareSourceOutput) IsLatestContentOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsLatestContentOnly }).(pulumi.BoolOutput)
}

// Indicates whether the software source is required for the Autonomous Linux service.
func (o SoftwareSourceOutput) IsMandatoryForAutonomousLinux() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsMandatoryForAutonomousLinux }).(pulumi.BoolOutput)
}

// (Updatable) Whether this software source can be synced to a management station
func (o SoftwareSourceOutput) IsMirrorSyncAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsMirrorSyncAllowed }).(pulumi.BoolOutput)
}

// (Updatable) Whether SSL validation needs to be turned on
func (o SoftwareSourceOutput) IsSslVerifyEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolOutput { return v.IsSslVerifyEnabled }).(pulumi.BoolOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
func (o SoftwareSourceOutput) OriginSoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.OriginSoftwareSourceId }).(pulumi.StringOutput)
}

// The OS family for the third-party software source.
func (o SoftwareSourceOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.OsFamily }).(pulumi.StringOutput)
}

// Number of packages the software source contains.
func (o SoftwareSourceOutput) PackageCount() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.PackageCount }).(pulumi.StringOutput)
}

// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
func (o SoftwareSourceOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringArrayOutput { return v.Packages }).(pulumi.StringArrayOutput)
}

// The repository ID for the software source.
func (o SoftwareSourceOutput) RepoId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.RepoId }).(pulumi.StringOutput)
}

// The size of the software source in bytes (B).
func (o SoftwareSourceOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *SoftwareSource) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

// The creation type of a software source.
func (o SoftwareSourceOutput) SoftwareSourceSubType() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.SoftwareSourceSubType }).(pulumi.StringOutput)
}

// (Updatable) Type of software source.
func (o SoftwareSourceOutput) SoftwareSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.SoftwareSourceType }).(pulumi.StringOutput)
}

// The version to assign to this custom software source.
func (o SoftwareSourceOutput) SoftwareSourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.SoftwareSourceVersion }).(pulumi.StringOutput)
}

// The current state of the software source.
func (o SoftwareSourceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o SoftwareSourceOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
func (o SoftwareSourceOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
func (o SoftwareSourceOutput) TimeMetadataUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.TimeMetadataUpdated }).(pulumi.StringOutput)
}

// (Updatable) URL for the third-party software source.
func (o SoftwareSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Name of the vendor providing the software source.
func (o SoftwareSourceOutput) VendorName() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.VendorName }).(pulumi.StringOutput)
}

// (Updatable) List of vendor software sources.
func (o SoftwareSourceOutput) VendorSoftwareSources() SoftwareSourceVendorSoftwareSourceArrayOutput {
	return o.ApplyT(func(v *SoftwareSource) SoftwareSourceVendorSoftwareSourceArrayOutput { return v.VendorSoftwareSources }).(SoftwareSourceVendorSoftwareSourceArrayOutput)
}

type SoftwareSourceArrayOutput struct{ *pulumi.OutputState }

func (SoftwareSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceArrayOutput) ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput {
	return o
}

func (o SoftwareSourceArrayOutput) ToSoftwareSourceArrayOutputWithContext(ctx context.Context) SoftwareSourceArrayOutput {
	return o
}

func (o SoftwareSourceArrayOutput) Index(i pulumi.IntInput) SoftwareSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareSource {
		return vs[0].([]*SoftwareSource)[vs[1].(int)]
	}).(SoftwareSourceOutput)
}

type SoftwareSourceMapOutput struct{ *pulumi.OutputState }

func (SoftwareSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceMapOutput) ToSoftwareSourceMapOutput() SoftwareSourceMapOutput {
	return o
}

func (o SoftwareSourceMapOutput) ToSoftwareSourceMapOutputWithContext(ctx context.Context) SoftwareSourceMapOutput {
	return o
}

func (o SoftwareSourceMapOutput) MapIndex(k pulumi.StringInput) SoftwareSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareSource {
		return vs[0].(map[string]*SoftwareSource)[vs[1].(string)]
	}).(SoftwareSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceInput)(nil)).Elem(), &SoftwareSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceArrayInput)(nil)).Elem(), SoftwareSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceMapInput)(nil)).Elem(), SoftwareSourceMap{})
	pulumi.RegisterOutputType(SoftwareSourceOutput{})
	pulumi.RegisterOutputType(SoftwareSourceArrayOutput{})
	pulumi.RegisterOutputType(SoftwareSourceMapOutput{})
}
