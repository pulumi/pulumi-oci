// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Creates a new versioned or custom software source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagementHub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagementHub.NewSoftwareSource(ctx, "testSoftwareSource", &OsManagementHub.SoftwareSourceArgs{
//				CompartmentId:      pulumi.Any(_var.Compartment_id),
//				DisplayName:        pulumi.Any(_var.Software_source_display_name),
//				SoftwareSourceType: pulumi.Any(_var.Software_source_software_source_type),
//				VendorSoftwareSources: osmanagementhub.SoftwareSourceVendorSoftwareSourceArray{
//					&osmanagementhub.SoftwareSourceVendorSoftwareSourceArgs{
//						DisplayName: pulumi.Any(_var.Software_source_vendor_software_sources_display_name),
//						Id:          pulumi.Any(_var.Software_source_vendor_software_sources_id),
//					},
//				},
//				CustomSoftwareSourceFilter: &osmanagementhub.SoftwareSourceCustomSoftwareSourceFilterArgs{
//					ModuleStreamProfileFilters: osmanagementhub.SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterArray{
//						&osmanagementhub.SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterArgs{
//							FilterType:  pulumi.Any(_var.Software_source_custom_software_source_filter_module_stream_profile_filters_filter_type),
//							ModuleName:  pulumi.Any(_var.Software_source_custom_software_source_filter_module_stream_profile_filters_module_name),
//							ProfileName: pulumi.Any(oci_os_management_hub_profile.Test_profile.Name),
//							StreamName:  pulumi.Any(oci_streaming_stream.Test_stream.Name),
//						},
//					},
//					PackageFilters: osmanagementhub.SoftwareSourceCustomSoftwareSourceFilterPackageFilterArray{
//						&osmanagementhub.SoftwareSourceCustomSoftwareSourceFilterPackageFilterArgs{
//							FilterType:         pulumi.Any(_var.Software_source_custom_software_source_filter_package_filters_filter_type),
//							PackageName:        pulumi.Any(_var.Software_source_custom_software_source_filter_package_filters_package_name),
//							PackageNamePattern: pulumi.Any(_var.Software_source_custom_software_source_filter_package_filters_package_name_pattern),
//							PackageVersion:     pulumi.Any(_var.Software_source_custom_software_source_filter_package_filters_package_version),
//						},
//					},
//					PackageGroupFilters: osmanagementhub.SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterArray{
//						&osmanagementhub.SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterArgs{
//							FilterType:    pulumi.Any(_var.Software_source_custom_software_source_filter_package_group_filters_filter_type),
//							PackageGroups: pulumi.Any(_var.Software_source_custom_software_source_filter_package_group_filters_package_groups),
//						},
//					},
//				},
//				DefinedTags: pulumi.Map{
//					"Operations.CostCenter": pulumi.Any("42"),
//				},
//				Description: pulumi.Any(_var.Software_source_description),
//				FreeformTags: pulumi.Map{
//					"Department": pulumi.Any("Finance"),
//				},
//				IsAutomaticallyUpdated: pulumi.Any(_var.Software_source_is_automatically_updated),
//				SoftwareSourceVersion:  pulumi.Any(_var.Software_source_software_source_version),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SoftwareSources can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:OsManagementHub/softwareSource:SoftwareSource test_software_source "id"
//
// ```
type SoftwareSource struct {
	pulumi.CustomResourceState

	// The architecture type supported by the software source.
	ArchType pulumi.StringPtrOutput `pulumi:"archType"`
	// Possible availabilities of a software source.
	Availability pulumi.StringPtrOutput `pulumi:"availability"`
	// The yum repository checksum type used by this software source.
	ChecksumType pulumi.StringPtrOutput `pulumi:"checksumType"`
	// (Updatable) The OCID of the tenancy containing the software source.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
	CustomSoftwareSourceFilter SoftwareSourceCustomSoftwareSourceFilterPtrOutput `pulumi:"customSoftwareSourceFilter"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Updatable) User friendly name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint pulumi.StringPtrOutput `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source.
	GpgKeyId pulumi.StringPtrOutput `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source.
	GpgKeyUrl pulumi.StringPtrOutput `pulumi:"gpgKeyUrl"`
	// (Updatable) Indicates whether service should automatically update the custom software source for the user.
	IsAutomaticallyUpdated pulumi.BoolPtrOutput `pulumi:"isAutomaticallyUpdated"`
	// The OS family the software source belongs to.
	OsFamily pulumi.StringPtrOutput `pulumi:"osFamily"`
	// Number of packages.
	PackageCount pulumi.StringPtrOutput `pulumi:"packageCount"`
	// The Repo ID for the software source.
	RepoId pulumi.StringPtrOutput `pulumi:"repoId"`
	// (Updatable) Type of the software source.
	SoftwareSourceType pulumi.StringOutput `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion pulumi.StringPtrOutput `pulumi:"softwareSourceVersion"`
	// The current state of the software source.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringPtrOutput `pulumi:"timeCreated"`
	// URL for the repository.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// Name of the vendor providing the software source.
	VendorName pulumi.StringPtrOutput `pulumi:"vendorName"`
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources SoftwareSourceVendorSoftwareSourceArrayOutput `pulumi:"vendorSoftwareSources"`
}

// NewSoftwareSource registers a new resource with the given unique name, arguments, and options.
func NewSoftwareSource(ctx *pulumi.Context,
	name string, args *SoftwareSourceArgs, opts ...pulumi.ResourceOption) (*SoftwareSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.SoftwareSourceType == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareSourceType'")
	}
	if args.VendorSoftwareSources == nil {
		return nil, errors.New("invalid value for required argument 'VendorSoftwareSources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SoftwareSource
	err := ctx.RegisterResource("oci:OsManagementHub/softwareSource:SoftwareSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareSource gets an existing SoftwareSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareSourceState, opts ...pulumi.ResourceOption) (*SoftwareSource, error) {
	var resource SoftwareSource
	err := ctx.ReadResource("oci:OsManagementHub/softwareSource:SoftwareSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareSource resources.
type softwareSourceState struct {
	// The architecture type supported by the software source.
	ArchType *string `pulumi:"archType"`
	// Possible availabilities of a software source.
	Availability *string `pulumi:"availability"`
	// The yum repository checksum type used by this software source.
	ChecksumType *string `pulumi:"checksumType"`
	// (Updatable) The OCID of the tenancy containing the software source.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
	CustomSoftwareSourceFilter *SoftwareSourceCustomSoftwareSourceFilter `pulumi:"customSoftwareSourceFilter"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source.
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint *string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source.
	GpgKeyId *string `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source.
	GpgKeyUrl *string `pulumi:"gpgKeyUrl"`
	// (Updatable) Indicates whether service should automatically update the custom software source for the user.
	IsAutomaticallyUpdated *bool `pulumi:"isAutomaticallyUpdated"`
	// The OS family the software source belongs to.
	OsFamily *string `pulumi:"osFamily"`
	// Number of packages.
	PackageCount *string `pulumi:"packageCount"`
	// The Repo ID for the software source.
	RepoId *string `pulumi:"repoId"`
	// (Updatable) Type of the software source.
	SoftwareSourceType *string `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion *string `pulumi:"softwareSourceVersion"`
	// The current state of the software source.
	State *string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated *string `pulumi:"timeCreated"`
	// URL for the repository.
	Url *string `pulumi:"url"`
	// Name of the vendor providing the software source.
	VendorName *string `pulumi:"vendorName"`
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources []SoftwareSourceVendorSoftwareSource `pulumi:"vendorSoftwareSources"`
}

type SoftwareSourceState struct {
	// The architecture type supported by the software source.
	ArchType pulumi.StringPtrInput
	// Possible availabilities of a software source.
	Availability pulumi.StringPtrInput
	// The yum repository checksum type used by this software source.
	ChecksumType pulumi.StringPtrInput
	// (Updatable) The OCID of the tenancy containing the software source.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
	CustomSoftwareSourceFilter SoftwareSourceCustomSoftwareSourceFilterPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the software source.
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Fingerprint of the GPG key for this software source.
	GpgKeyFingerprint pulumi.StringPtrInput
	// ID of the GPG key for this software source.
	GpgKeyId pulumi.StringPtrInput
	// URL of the GPG key for this software source.
	GpgKeyUrl pulumi.StringPtrInput
	// (Updatable) Indicates whether service should automatically update the custom software source for the user.
	IsAutomaticallyUpdated pulumi.BoolPtrInput
	// The OS family the software source belongs to.
	OsFamily pulumi.StringPtrInput
	// Number of packages.
	PackageCount pulumi.StringPtrInput
	// The Repo ID for the software source.
	RepoId pulumi.StringPtrInput
	// (Updatable) Type of the software source.
	SoftwareSourceType pulumi.StringPtrInput
	// The version to assign to this custom software source.
	SoftwareSourceVersion pulumi.StringPtrInput
	// The current state of the software source.
	State pulumi.StringPtrInput
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringPtrInput
	// URL for the repository.
	Url pulumi.StringPtrInput
	// Name of the vendor providing the software source.
	VendorName pulumi.StringPtrInput
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources SoftwareSourceVendorSoftwareSourceArrayInput
}

func (SoftwareSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceState)(nil)).Elem()
}

type softwareSourceArgs struct {
	// (Updatable) The OCID of the tenancy containing the software source.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
	CustomSoftwareSourceFilter *SoftwareSourceCustomSoftwareSourceFilter `pulumi:"customSoftwareSourceFilter"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source.
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Indicates whether service should automatically update the custom software source for the user.
	IsAutomaticallyUpdated *bool `pulumi:"isAutomaticallyUpdated"`
	// (Updatable) Type of the software source.
	SoftwareSourceType string `pulumi:"softwareSourceType"`
	// The version to assign to this custom software source.
	SoftwareSourceVersion *string `pulumi:"softwareSourceVersion"`
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources []SoftwareSourceVendorSoftwareSource `pulumi:"vendorSoftwareSources"`
}

// The set of arguments for constructing a SoftwareSource resource.
type SoftwareSourceArgs struct {
	// (Updatable) The OCID of the tenancy containing the software source.
	CompartmentId pulumi.StringInput
	// (Updatable) Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
	CustomSoftwareSourceFilter SoftwareSourceCustomSoftwareSourceFilterPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the software source.
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Indicates whether service should automatically update the custom software source for the user.
	IsAutomaticallyUpdated pulumi.BoolPtrInput
	// (Updatable) Type of the software source.
	SoftwareSourceType pulumi.StringInput
	// The version to assign to this custom software source.
	SoftwareSourceVersion pulumi.StringPtrInput
	// (Updatable) List of vendor software sources.
	VendorSoftwareSources SoftwareSourceVendorSoftwareSourceArrayInput
}

func (SoftwareSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceArgs)(nil)).Elem()
}

type SoftwareSourceInput interface {
	pulumi.Input

	ToSoftwareSourceOutput() SoftwareSourceOutput
	ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput
}

func (*SoftwareSource) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSource)(nil)).Elem()
}

func (i *SoftwareSource) ToSoftwareSourceOutput() SoftwareSourceOutput {
	return i.ToSoftwareSourceOutputWithContext(context.Background())
}

func (i *SoftwareSource) ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceOutput)
}

// SoftwareSourceArrayInput is an input type that accepts SoftwareSourceArray and SoftwareSourceArrayOutput values.
// You can construct a concrete instance of `SoftwareSourceArrayInput` via:
//
//	SoftwareSourceArray{ SoftwareSourceArgs{...} }
type SoftwareSourceArrayInput interface {
	pulumi.Input

	ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput
	ToSoftwareSourceArrayOutputWithContext(context.Context) SoftwareSourceArrayOutput
}

type SoftwareSourceArray []SoftwareSourceInput

func (SoftwareSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSource)(nil)).Elem()
}

func (i SoftwareSourceArray) ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput {
	return i.ToSoftwareSourceArrayOutputWithContext(context.Background())
}

func (i SoftwareSourceArray) ToSoftwareSourceArrayOutputWithContext(ctx context.Context) SoftwareSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceArrayOutput)
}

// SoftwareSourceMapInput is an input type that accepts SoftwareSourceMap and SoftwareSourceMapOutput values.
// You can construct a concrete instance of `SoftwareSourceMapInput` via:
//
//	SoftwareSourceMap{ "key": SoftwareSourceArgs{...} }
type SoftwareSourceMapInput interface {
	pulumi.Input

	ToSoftwareSourceMapOutput() SoftwareSourceMapOutput
	ToSoftwareSourceMapOutputWithContext(context.Context) SoftwareSourceMapOutput
}

type SoftwareSourceMap map[string]SoftwareSourceInput

func (SoftwareSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSource)(nil)).Elem()
}

func (i SoftwareSourceMap) ToSoftwareSourceMapOutput() SoftwareSourceMapOutput {
	return i.ToSoftwareSourceMapOutputWithContext(context.Background())
}

func (i SoftwareSourceMap) ToSoftwareSourceMapOutputWithContext(ctx context.Context) SoftwareSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceMapOutput)
}

type SoftwareSourceOutput struct{ *pulumi.OutputState }

func (SoftwareSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceOutput) ToSoftwareSourceOutput() SoftwareSourceOutput {
	return o
}

func (o SoftwareSourceOutput) ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput {
	return o
}

// The architecture type supported by the software source.
func (o SoftwareSourceOutput) ArchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.ArchType }).(pulumi.StringPtrOutput)
}

// Possible availabilities of a software source.
func (o SoftwareSourceOutput) Availability() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.Availability }).(pulumi.StringPtrOutput)
}

// The yum repository checksum type used by this software source.
func (o SoftwareSourceOutput) ChecksumType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.ChecksumType }).(pulumi.StringPtrOutput)
}

// (Updatable) The OCID of the tenancy containing the software source.
func (o SoftwareSourceOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
func (o SoftwareSourceOutput) CustomSoftwareSourceFilter() SoftwareSourceCustomSoftwareSourceFilterPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) SoftwareSourceCustomSoftwareSourceFilterPtrOutput {
		return v.CustomSoftwareSourceFilter
	}).(SoftwareSourceCustomSoftwareSourceFilterPtrOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o SoftwareSourceOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Information specified by the user about the software source.
func (o SoftwareSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Updatable) User friendly name.
func (o SoftwareSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o SoftwareSourceOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// Fingerprint of the GPG key for this software source.
func (o SoftwareSourceOutput) GpgKeyFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.GpgKeyFingerprint }).(pulumi.StringPtrOutput)
}

// ID of the GPG key for this software source.
func (o SoftwareSourceOutput) GpgKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.GpgKeyId }).(pulumi.StringPtrOutput)
}

// URL of the GPG key for this software source.
func (o SoftwareSourceOutput) GpgKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.GpgKeyUrl }).(pulumi.StringPtrOutput)
}

// (Updatable) Indicates whether service should automatically update the custom software source for the user.
func (o SoftwareSourceOutput) IsAutomaticallyUpdated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.BoolPtrOutput { return v.IsAutomaticallyUpdated }).(pulumi.BoolPtrOutput)
}

// The OS family the software source belongs to.
func (o SoftwareSourceOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.OsFamily }).(pulumi.StringPtrOutput)
}

// Number of packages.
func (o SoftwareSourceOutput) PackageCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.PackageCount }).(pulumi.StringPtrOutput)
}

// The Repo ID for the software source.
func (o SoftwareSourceOutput) RepoId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.RepoId }).(pulumi.StringPtrOutput)
}

// (Updatable) Type of the software source.
func (o SoftwareSourceOutput) SoftwareSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.SoftwareSourceType }).(pulumi.StringOutput)
}

// The version to assign to this custom software source.
func (o SoftwareSourceOutput) SoftwareSourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.SoftwareSourceVersion }).(pulumi.StringPtrOutput)
}

// The current state of the software source.
func (o SoftwareSourceOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o SoftwareSourceOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
func (o SoftwareSourceOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// URL for the repository.
func (o SoftwareSourceOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// Name of the vendor providing the software source.
func (o SoftwareSourceOutput) VendorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.VendorName }).(pulumi.StringPtrOutput)
}

// (Updatable) List of vendor software sources.
func (o SoftwareSourceOutput) VendorSoftwareSources() SoftwareSourceVendorSoftwareSourceArrayOutput {
	return o.ApplyT(func(v *SoftwareSource) SoftwareSourceVendorSoftwareSourceArrayOutput { return v.VendorSoftwareSources }).(SoftwareSourceVendorSoftwareSourceArrayOutput)
}

type SoftwareSourceArrayOutput struct{ *pulumi.OutputState }

func (SoftwareSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceArrayOutput) ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput {
	return o
}

func (o SoftwareSourceArrayOutput) ToSoftwareSourceArrayOutputWithContext(ctx context.Context) SoftwareSourceArrayOutput {
	return o
}

func (o SoftwareSourceArrayOutput) Index(i pulumi.IntInput) SoftwareSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareSource {
		return vs[0].([]*SoftwareSource)[vs[1].(int)]
	}).(SoftwareSourceOutput)
}

type SoftwareSourceMapOutput struct{ *pulumi.OutputState }

func (SoftwareSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceMapOutput) ToSoftwareSourceMapOutput() SoftwareSourceMapOutput {
	return o
}

func (o SoftwareSourceMapOutput) ToSoftwareSourceMapOutputWithContext(ctx context.Context) SoftwareSourceMapOutput {
	return o
}

func (o SoftwareSourceMapOutput) MapIndex(k pulumi.StringInput) SoftwareSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareSource {
		return vs[0].(map[string]*SoftwareSource)[vs[1].(string)]
	}).(SoftwareSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceInput)(nil)).Elem(), &SoftwareSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceArrayInput)(nil)).Elem(), SoftwareSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceMapInput)(nil)).Elem(), SoftwareSourceMap{})
	pulumi.RegisterOutputType(SoftwareSourceOutput{})
	pulumi.RegisterOutputType(SoftwareSourceArrayOutput{})
	pulumi.RegisterOutputType(SoftwareSourceMapOutput{})
}
