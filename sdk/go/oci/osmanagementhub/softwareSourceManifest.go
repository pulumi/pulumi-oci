// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Software Source Manifest resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Updates the package list document for the software source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.NewSoftwareSourceManifest(ctx, "test_software_source_manifest", &osmanagementhub.SoftwareSourceManifestArgs{
//				SoftwareSourceId: pulumi.Any(testSoftwareSource.Id),
//				Content:          pulumi.Any(content),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SoftwareSourceManifests can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest test_software_source_manifest "id"
// ```
type SoftwareSourceManifest struct {
	pulumi.CustomResourceState

	// (Updatable) Provides the manifest content used to update the package list of the software source.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringOutput `pulumi:"softwareSourceId"`
}

// NewSoftwareSourceManifest registers a new resource with the given unique name, arguments, and options.
func NewSoftwareSourceManifest(ctx *pulumi.Context,
	name string, args *SoftwareSourceManifestArgs, opts ...pulumi.ResourceOption) (*SoftwareSourceManifest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SoftwareSourceId == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareSourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SoftwareSourceManifest
	err := ctx.RegisterResource("oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareSourceManifest gets an existing SoftwareSourceManifest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareSourceManifest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareSourceManifestState, opts ...pulumi.ResourceOption) (*SoftwareSourceManifest, error) {
	var resource SoftwareSourceManifest
	err := ctx.ReadResource("oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareSourceManifest resources.
type softwareSourceManifestState struct {
	// (Updatable) Provides the manifest content used to update the package list of the software source.
	Content *string `pulumi:"content"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId *string `pulumi:"softwareSourceId"`
}

type SoftwareSourceManifestState struct {
	// (Updatable) Provides the manifest content used to update the package list of the software source.
	Content pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringPtrInput
}

func (SoftwareSourceManifestState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceManifestState)(nil)).Elem()
}

type softwareSourceManifestArgs struct {
	// (Updatable) Provides the manifest content used to update the package list of the software source.
	Content *string `pulumi:"content"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// The set of arguments for constructing a SoftwareSourceManifest resource.
type SoftwareSourceManifestArgs struct {
	// (Updatable) Provides the manifest content used to update the package list of the software source.
	Content pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringInput
}

func (SoftwareSourceManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceManifestArgs)(nil)).Elem()
}

type SoftwareSourceManifestInput interface {
	pulumi.Input

	ToSoftwareSourceManifestOutput() SoftwareSourceManifestOutput
	ToSoftwareSourceManifestOutputWithContext(ctx context.Context) SoftwareSourceManifestOutput
}

func (*SoftwareSourceManifest) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSourceManifest)(nil)).Elem()
}

func (i *SoftwareSourceManifest) ToSoftwareSourceManifestOutput() SoftwareSourceManifestOutput {
	return i.ToSoftwareSourceManifestOutputWithContext(context.Background())
}

func (i *SoftwareSourceManifest) ToSoftwareSourceManifestOutputWithContext(ctx context.Context) SoftwareSourceManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceManifestOutput)
}

// SoftwareSourceManifestArrayInput is an input type that accepts SoftwareSourceManifestArray and SoftwareSourceManifestArrayOutput values.
// You can construct a concrete instance of `SoftwareSourceManifestArrayInput` via:
//
//	SoftwareSourceManifestArray{ SoftwareSourceManifestArgs{...} }
type SoftwareSourceManifestArrayInput interface {
	pulumi.Input

	ToSoftwareSourceManifestArrayOutput() SoftwareSourceManifestArrayOutput
	ToSoftwareSourceManifestArrayOutputWithContext(context.Context) SoftwareSourceManifestArrayOutput
}

type SoftwareSourceManifestArray []SoftwareSourceManifestInput

func (SoftwareSourceManifestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSourceManifest)(nil)).Elem()
}

func (i SoftwareSourceManifestArray) ToSoftwareSourceManifestArrayOutput() SoftwareSourceManifestArrayOutput {
	return i.ToSoftwareSourceManifestArrayOutputWithContext(context.Background())
}

func (i SoftwareSourceManifestArray) ToSoftwareSourceManifestArrayOutputWithContext(ctx context.Context) SoftwareSourceManifestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceManifestArrayOutput)
}

// SoftwareSourceManifestMapInput is an input type that accepts SoftwareSourceManifestMap and SoftwareSourceManifestMapOutput values.
// You can construct a concrete instance of `SoftwareSourceManifestMapInput` via:
//
//	SoftwareSourceManifestMap{ "key": SoftwareSourceManifestArgs{...} }
type SoftwareSourceManifestMapInput interface {
	pulumi.Input

	ToSoftwareSourceManifestMapOutput() SoftwareSourceManifestMapOutput
	ToSoftwareSourceManifestMapOutputWithContext(context.Context) SoftwareSourceManifestMapOutput
}

type SoftwareSourceManifestMap map[string]SoftwareSourceManifestInput

func (SoftwareSourceManifestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSourceManifest)(nil)).Elem()
}

func (i SoftwareSourceManifestMap) ToSoftwareSourceManifestMapOutput() SoftwareSourceManifestMapOutput {
	return i.ToSoftwareSourceManifestMapOutputWithContext(context.Background())
}

func (i SoftwareSourceManifestMap) ToSoftwareSourceManifestMapOutputWithContext(ctx context.Context) SoftwareSourceManifestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceManifestMapOutput)
}

type SoftwareSourceManifestOutput struct{ *pulumi.OutputState }

func (SoftwareSourceManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSourceManifest)(nil)).Elem()
}

func (o SoftwareSourceManifestOutput) ToSoftwareSourceManifestOutput() SoftwareSourceManifestOutput {
	return o
}

func (o SoftwareSourceManifestOutput) ToSoftwareSourceManifestOutputWithContext(ctx context.Context) SoftwareSourceManifestOutput {
	return o
}

// (Updatable) Provides the manifest content used to update the package list of the software source.
func (o SoftwareSourceManifestOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSourceManifest) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SoftwareSourceManifestOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSourceManifest) pulumi.StringOutput { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

type SoftwareSourceManifestArrayOutput struct{ *pulumi.OutputState }

func (SoftwareSourceManifestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSourceManifest)(nil)).Elem()
}

func (o SoftwareSourceManifestArrayOutput) ToSoftwareSourceManifestArrayOutput() SoftwareSourceManifestArrayOutput {
	return o
}

func (o SoftwareSourceManifestArrayOutput) ToSoftwareSourceManifestArrayOutputWithContext(ctx context.Context) SoftwareSourceManifestArrayOutput {
	return o
}

func (o SoftwareSourceManifestArrayOutput) Index(i pulumi.IntInput) SoftwareSourceManifestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareSourceManifest {
		return vs[0].([]*SoftwareSourceManifest)[vs[1].(int)]
	}).(SoftwareSourceManifestOutput)
}

type SoftwareSourceManifestMapOutput struct{ *pulumi.OutputState }

func (SoftwareSourceManifestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSourceManifest)(nil)).Elem()
}

func (o SoftwareSourceManifestMapOutput) ToSoftwareSourceManifestMapOutput() SoftwareSourceManifestMapOutput {
	return o
}

func (o SoftwareSourceManifestMapOutput) ToSoftwareSourceManifestMapOutputWithContext(ctx context.Context) SoftwareSourceManifestMapOutput {
	return o
}

func (o SoftwareSourceManifestMapOutput) MapIndex(k pulumi.StringInput) SoftwareSourceManifestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareSourceManifest {
		return vs[0].(map[string]*SoftwareSourceManifest)[vs[1].(string)]
	}).(SoftwareSourceManifestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceManifestInput)(nil)).Elem(), &SoftwareSourceManifest{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceManifestArrayInput)(nil)).Elem(), SoftwareSourceManifestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceManifestMapInput)(nil)).Elem(), SoftwareSourceManifestMap{})
	pulumi.RegisterOutputType(SoftwareSourceManifestOutput{})
	pulumi.RegisterOutputType(SoftwareSourceManifestArrayOutput{})
	pulumi.RegisterOutputType(SoftwareSourceManifestMapOutput{})
}
