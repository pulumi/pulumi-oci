// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Software Source Remove Packages Management resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Removes packages from a software source. This operation can only be done for custom software sources that are not created using filters.
// Packages can be of the format:
//   - name (for example: git). This removes all versions of the package.
//   - name-version-release.architecture (for example: git-2.43.5-1.el8_10.x86_64)
//   - name-epoch:version-release.architecture (for example: git-0:2.43.5-1.el8_10.x86_64)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.NewSoftwareSourceRemovePackagesManagement(ctx, "test_software_source_remove_packages_management", &osmanagementhub.SoftwareSourceRemovePackagesManagementArgs{
//				Packages:         pulumi.Any(softwareSourceRemovePackagesManagementPackages),
//				SoftwareSourceId: pulumi.Any(testSoftwareSource.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SoftwareSourceRemovePackagesManagement can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:OsManagementHub/softwareSourceRemovePackagesManagement:SoftwareSourceRemovePackagesManagement test_software_source_remove_packages_management "id"
// ```
type SoftwareSourceRemovePackagesManagement struct {
	pulumi.CustomResourceState

	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages pulumi.StringArrayOutput `pulumi:"packages"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringOutput `pulumi:"softwareSourceId"`
}

// NewSoftwareSourceRemovePackagesManagement registers a new resource with the given unique name, arguments, and options.
func NewSoftwareSourceRemovePackagesManagement(ctx *pulumi.Context,
	name string, args *SoftwareSourceRemovePackagesManagementArgs, opts ...pulumi.ResourceOption) (*SoftwareSourceRemovePackagesManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Packages == nil {
		return nil, errors.New("invalid value for required argument 'Packages'")
	}
	if args.SoftwareSourceId == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareSourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SoftwareSourceRemovePackagesManagement
	err := ctx.RegisterResource("oci:OsManagementHub/softwareSourceRemovePackagesManagement:SoftwareSourceRemovePackagesManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareSourceRemovePackagesManagement gets an existing SoftwareSourceRemovePackagesManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareSourceRemovePackagesManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareSourceRemovePackagesManagementState, opts ...pulumi.ResourceOption) (*SoftwareSourceRemovePackagesManagement, error) {
	var resource SoftwareSourceRemovePackagesManagement
	err := ctx.ReadResource("oci:OsManagementHub/softwareSourceRemovePackagesManagement:SoftwareSourceRemovePackagesManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareSourceRemovePackagesManagement resources.
type softwareSourceRemovePackagesManagementState struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages []string `pulumi:"packages"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId *string `pulumi:"softwareSourceId"`
}

type SoftwareSourceRemovePackagesManagementState struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringPtrInput
}

func (SoftwareSourceRemovePackagesManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceRemovePackagesManagementState)(nil)).Elem()
}

type softwareSourceRemovePackagesManagementArgs struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages []string `pulumi:"packages"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// The set of arguments for constructing a SoftwareSourceRemovePackagesManagement resource.
type SoftwareSourceRemovePackagesManagementArgs struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringInput
}

func (SoftwareSourceRemovePackagesManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceRemovePackagesManagementArgs)(nil)).Elem()
}

type SoftwareSourceRemovePackagesManagementInput interface {
	pulumi.Input

	ToSoftwareSourceRemovePackagesManagementOutput() SoftwareSourceRemovePackagesManagementOutput
	ToSoftwareSourceRemovePackagesManagementOutputWithContext(ctx context.Context) SoftwareSourceRemovePackagesManagementOutput
}

func (*SoftwareSourceRemovePackagesManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSourceRemovePackagesManagement)(nil)).Elem()
}

func (i *SoftwareSourceRemovePackagesManagement) ToSoftwareSourceRemovePackagesManagementOutput() SoftwareSourceRemovePackagesManagementOutput {
	return i.ToSoftwareSourceRemovePackagesManagementOutputWithContext(context.Background())
}

func (i *SoftwareSourceRemovePackagesManagement) ToSoftwareSourceRemovePackagesManagementOutputWithContext(ctx context.Context) SoftwareSourceRemovePackagesManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceRemovePackagesManagementOutput)
}

// SoftwareSourceRemovePackagesManagementArrayInput is an input type that accepts SoftwareSourceRemovePackagesManagementArray and SoftwareSourceRemovePackagesManagementArrayOutput values.
// You can construct a concrete instance of `SoftwareSourceRemovePackagesManagementArrayInput` via:
//
//	SoftwareSourceRemovePackagesManagementArray{ SoftwareSourceRemovePackagesManagementArgs{...} }
type SoftwareSourceRemovePackagesManagementArrayInput interface {
	pulumi.Input

	ToSoftwareSourceRemovePackagesManagementArrayOutput() SoftwareSourceRemovePackagesManagementArrayOutput
	ToSoftwareSourceRemovePackagesManagementArrayOutputWithContext(context.Context) SoftwareSourceRemovePackagesManagementArrayOutput
}

type SoftwareSourceRemovePackagesManagementArray []SoftwareSourceRemovePackagesManagementInput

func (SoftwareSourceRemovePackagesManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSourceRemovePackagesManagement)(nil)).Elem()
}

func (i SoftwareSourceRemovePackagesManagementArray) ToSoftwareSourceRemovePackagesManagementArrayOutput() SoftwareSourceRemovePackagesManagementArrayOutput {
	return i.ToSoftwareSourceRemovePackagesManagementArrayOutputWithContext(context.Background())
}

func (i SoftwareSourceRemovePackagesManagementArray) ToSoftwareSourceRemovePackagesManagementArrayOutputWithContext(ctx context.Context) SoftwareSourceRemovePackagesManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceRemovePackagesManagementArrayOutput)
}

// SoftwareSourceRemovePackagesManagementMapInput is an input type that accepts SoftwareSourceRemovePackagesManagementMap and SoftwareSourceRemovePackagesManagementMapOutput values.
// You can construct a concrete instance of `SoftwareSourceRemovePackagesManagementMapInput` via:
//
//	SoftwareSourceRemovePackagesManagementMap{ "key": SoftwareSourceRemovePackagesManagementArgs{...} }
type SoftwareSourceRemovePackagesManagementMapInput interface {
	pulumi.Input

	ToSoftwareSourceRemovePackagesManagementMapOutput() SoftwareSourceRemovePackagesManagementMapOutput
	ToSoftwareSourceRemovePackagesManagementMapOutputWithContext(context.Context) SoftwareSourceRemovePackagesManagementMapOutput
}

type SoftwareSourceRemovePackagesManagementMap map[string]SoftwareSourceRemovePackagesManagementInput

func (SoftwareSourceRemovePackagesManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSourceRemovePackagesManagement)(nil)).Elem()
}

func (i SoftwareSourceRemovePackagesManagementMap) ToSoftwareSourceRemovePackagesManagementMapOutput() SoftwareSourceRemovePackagesManagementMapOutput {
	return i.ToSoftwareSourceRemovePackagesManagementMapOutputWithContext(context.Background())
}

func (i SoftwareSourceRemovePackagesManagementMap) ToSoftwareSourceRemovePackagesManagementMapOutputWithContext(ctx context.Context) SoftwareSourceRemovePackagesManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceRemovePackagesManagementMapOutput)
}

type SoftwareSourceRemovePackagesManagementOutput struct{ *pulumi.OutputState }

func (SoftwareSourceRemovePackagesManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSourceRemovePackagesManagement)(nil)).Elem()
}

func (o SoftwareSourceRemovePackagesManagementOutput) ToSoftwareSourceRemovePackagesManagementOutput() SoftwareSourceRemovePackagesManagementOutput {
	return o
}

func (o SoftwareSourceRemovePackagesManagementOutput) ToSoftwareSourceRemovePackagesManagementOutputWithContext(ctx context.Context) SoftwareSourceRemovePackagesManagementOutput {
	return o
}

// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
func (o SoftwareSourceRemovePackagesManagementOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SoftwareSourceRemovePackagesManagement) pulumi.StringArrayOutput { return v.Packages }).(pulumi.StringArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SoftwareSourceRemovePackagesManagementOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSourceRemovePackagesManagement) pulumi.StringOutput { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

type SoftwareSourceRemovePackagesManagementArrayOutput struct{ *pulumi.OutputState }

func (SoftwareSourceRemovePackagesManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSourceRemovePackagesManagement)(nil)).Elem()
}

func (o SoftwareSourceRemovePackagesManagementArrayOutput) ToSoftwareSourceRemovePackagesManagementArrayOutput() SoftwareSourceRemovePackagesManagementArrayOutput {
	return o
}

func (o SoftwareSourceRemovePackagesManagementArrayOutput) ToSoftwareSourceRemovePackagesManagementArrayOutputWithContext(ctx context.Context) SoftwareSourceRemovePackagesManagementArrayOutput {
	return o
}

func (o SoftwareSourceRemovePackagesManagementArrayOutput) Index(i pulumi.IntInput) SoftwareSourceRemovePackagesManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareSourceRemovePackagesManagement {
		return vs[0].([]*SoftwareSourceRemovePackagesManagement)[vs[1].(int)]
	}).(SoftwareSourceRemovePackagesManagementOutput)
}

type SoftwareSourceRemovePackagesManagementMapOutput struct{ *pulumi.OutputState }

func (SoftwareSourceRemovePackagesManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSourceRemovePackagesManagement)(nil)).Elem()
}

func (o SoftwareSourceRemovePackagesManagementMapOutput) ToSoftwareSourceRemovePackagesManagementMapOutput() SoftwareSourceRemovePackagesManagementMapOutput {
	return o
}

func (o SoftwareSourceRemovePackagesManagementMapOutput) ToSoftwareSourceRemovePackagesManagementMapOutputWithContext(ctx context.Context) SoftwareSourceRemovePackagesManagementMapOutput {
	return o
}

func (o SoftwareSourceRemovePackagesManagementMapOutput) MapIndex(k pulumi.StringInput) SoftwareSourceRemovePackagesManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareSourceRemovePackagesManagement {
		return vs[0].(map[string]*SoftwareSourceRemovePackagesManagement)[vs[1].(string)]
	}).(SoftwareSourceRemovePackagesManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceRemovePackagesManagementInput)(nil)).Elem(), &SoftwareSourceRemovePackagesManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceRemovePackagesManagementArrayInput)(nil)).Elem(), SoftwareSourceRemovePackagesManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceRemovePackagesManagementMapInput)(nil)).Elem(), SoftwareSourceRemovePackagesManagementMap{})
	pulumi.RegisterOutputType(SoftwareSourceRemovePackagesManagementOutput{})
	pulumi.RegisterOutputType(SoftwareSourceRemovePackagesManagementArrayOutput{})
	pulumi.RegisterOutputType(SoftwareSourceRemovePackagesManagementMapOutput{})
}
