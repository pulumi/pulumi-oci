// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagementhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Software Source Replace Packages Management resource in Oracle Cloud Infrastructure Os Management Hub service.
//
// Replaces packages in a software source with the provided list of packages. This operation can only be done for custom software sources that are not created using filters.
// Packages can be of the format:
//   - name (for example: git). If isLatestContentOnly is true, only the latest version of the package will be added, otherwise all versions of the package will be added.
//   - name-version-release.architecture (for example: git-2.43.5-1.el8_10.x86_64)
//   - name-epoch:version-release.architecture (for example: git-0:2.43.5-1.el8_10.x86_64)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/osmanagementhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := osmanagementhub.NewSoftwareSourceReplacePackagesManagement(ctx, "test_software_source_replace_packages_management", &osmanagementhub.SoftwareSourceReplacePackagesManagementArgs{
//				Packages:         pulumi.Any(softwareSourceReplacePackagesManagementPackages),
//				SoftwareSourceId: pulumi.Any(testSoftwareSource.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SoftwareSourceReplacePackagesManagement can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:OsManagementHub/softwareSourceReplacePackagesManagement:SoftwareSourceReplacePackagesManagement test_software_source_replace_packages_management "id"
// ```
type SoftwareSourceReplacePackagesManagement struct {
	pulumi.CustomResourceState

	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages pulumi.StringArrayOutput `pulumi:"packages"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringOutput `pulumi:"softwareSourceId"`
}

// NewSoftwareSourceReplacePackagesManagement registers a new resource with the given unique name, arguments, and options.
func NewSoftwareSourceReplacePackagesManagement(ctx *pulumi.Context,
	name string, args *SoftwareSourceReplacePackagesManagementArgs, opts ...pulumi.ResourceOption) (*SoftwareSourceReplacePackagesManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Packages == nil {
		return nil, errors.New("invalid value for required argument 'Packages'")
	}
	if args.SoftwareSourceId == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareSourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SoftwareSourceReplacePackagesManagement
	err := ctx.RegisterResource("oci:OsManagementHub/softwareSourceReplacePackagesManagement:SoftwareSourceReplacePackagesManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareSourceReplacePackagesManagement gets an existing SoftwareSourceReplacePackagesManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareSourceReplacePackagesManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareSourceReplacePackagesManagementState, opts ...pulumi.ResourceOption) (*SoftwareSourceReplacePackagesManagement, error) {
	var resource SoftwareSourceReplacePackagesManagement
	err := ctx.ReadResource("oci:OsManagementHub/softwareSourceReplacePackagesManagement:SoftwareSourceReplacePackagesManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareSourceReplacePackagesManagement resources.
type softwareSourceReplacePackagesManagementState struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages []string `pulumi:"packages"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId *string `pulumi:"softwareSourceId"`
}

type SoftwareSourceReplacePackagesManagementState struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringPtrInput
}

func (SoftwareSourceReplacePackagesManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceReplacePackagesManagementState)(nil)).Elem()
}

type softwareSourceReplacePackagesManagementArgs struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages []string `pulumi:"packages"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// The set of arguments for constructing a SoftwareSourceReplacePackagesManagement resource.
type SoftwareSourceReplacePackagesManagementArgs struct {
	// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
	Packages pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SoftwareSourceId pulumi.StringInput
}

func (SoftwareSourceReplacePackagesManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceReplacePackagesManagementArgs)(nil)).Elem()
}

type SoftwareSourceReplacePackagesManagementInput interface {
	pulumi.Input

	ToSoftwareSourceReplacePackagesManagementOutput() SoftwareSourceReplacePackagesManagementOutput
	ToSoftwareSourceReplacePackagesManagementOutputWithContext(ctx context.Context) SoftwareSourceReplacePackagesManagementOutput
}

func (*SoftwareSourceReplacePackagesManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSourceReplacePackagesManagement)(nil)).Elem()
}

func (i *SoftwareSourceReplacePackagesManagement) ToSoftwareSourceReplacePackagesManagementOutput() SoftwareSourceReplacePackagesManagementOutput {
	return i.ToSoftwareSourceReplacePackagesManagementOutputWithContext(context.Background())
}

func (i *SoftwareSourceReplacePackagesManagement) ToSoftwareSourceReplacePackagesManagementOutputWithContext(ctx context.Context) SoftwareSourceReplacePackagesManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceReplacePackagesManagementOutput)
}

// SoftwareSourceReplacePackagesManagementArrayInput is an input type that accepts SoftwareSourceReplacePackagesManagementArray and SoftwareSourceReplacePackagesManagementArrayOutput values.
// You can construct a concrete instance of `SoftwareSourceReplacePackagesManagementArrayInput` via:
//
//	SoftwareSourceReplacePackagesManagementArray{ SoftwareSourceReplacePackagesManagementArgs{...} }
type SoftwareSourceReplacePackagesManagementArrayInput interface {
	pulumi.Input

	ToSoftwareSourceReplacePackagesManagementArrayOutput() SoftwareSourceReplacePackagesManagementArrayOutput
	ToSoftwareSourceReplacePackagesManagementArrayOutputWithContext(context.Context) SoftwareSourceReplacePackagesManagementArrayOutput
}

type SoftwareSourceReplacePackagesManagementArray []SoftwareSourceReplacePackagesManagementInput

func (SoftwareSourceReplacePackagesManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSourceReplacePackagesManagement)(nil)).Elem()
}

func (i SoftwareSourceReplacePackagesManagementArray) ToSoftwareSourceReplacePackagesManagementArrayOutput() SoftwareSourceReplacePackagesManagementArrayOutput {
	return i.ToSoftwareSourceReplacePackagesManagementArrayOutputWithContext(context.Background())
}

func (i SoftwareSourceReplacePackagesManagementArray) ToSoftwareSourceReplacePackagesManagementArrayOutputWithContext(ctx context.Context) SoftwareSourceReplacePackagesManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceReplacePackagesManagementArrayOutput)
}

// SoftwareSourceReplacePackagesManagementMapInput is an input type that accepts SoftwareSourceReplacePackagesManagementMap and SoftwareSourceReplacePackagesManagementMapOutput values.
// You can construct a concrete instance of `SoftwareSourceReplacePackagesManagementMapInput` via:
//
//	SoftwareSourceReplacePackagesManagementMap{ "key": SoftwareSourceReplacePackagesManagementArgs{...} }
type SoftwareSourceReplacePackagesManagementMapInput interface {
	pulumi.Input

	ToSoftwareSourceReplacePackagesManagementMapOutput() SoftwareSourceReplacePackagesManagementMapOutput
	ToSoftwareSourceReplacePackagesManagementMapOutputWithContext(context.Context) SoftwareSourceReplacePackagesManagementMapOutput
}

type SoftwareSourceReplacePackagesManagementMap map[string]SoftwareSourceReplacePackagesManagementInput

func (SoftwareSourceReplacePackagesManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSourceReplacePackagesManagement)(nil)).Elem()
}

func (i SoftwareSourceReplacePackagesManagementMap) ToSoftwareSourceReplacePackagesManagementMapOutput() SoftwareSourceReplacePackagesManagementMapOutput {
	return i.ToSoftwareSourceReplacePackagesManagementMapOutputWithContext(context.Background())
}

func (i SoftwareSourceReplacePackagesManagementMap) ToSoftwareSourceReplacePackagesManagementMapOutputWithContext(ctx context.Context) SoftwareSourceReplacePackagesManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceReplacePackagesManagementMapOutput)
}

type SoftwareSourceReplacePackagesManagementOutput struct{ *pulumi.OutputState }

func (SoftwareSourceReplacePackagesManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSourceReplacePackagesManagement)(nil)).Elem()
}

func (o SoftwareSourceReplacePackagesManagementOutput) ToSoftwareSourceReplacePackagesManagementOutput() SoftwareSourceReplacePackagesManagementOutput {
	return o
}

func (o SoftwareSourceReplacePackagesManagementOutput) ToSoftwareSourceReplacePackagesManagementOutputWithContext(ctx context.Context) SoftwareSourceReplacePackagesManagementOutput {
	return o
}

// List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
func (o SoftwareSourceReplacePackagesManagementOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SoftwareSourceReplacePackagesManagement) pulumi.StringArrayOutput { return v.Packages }).(pulumi.StringArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SoftwareSourceReplacePackagesManagementOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSourceReplacePackagesManagement) pulumi.StringOutput { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

type SoftwareSourceReplacePackagesManagementArrayOutput struct{ *pulumi.OutputState }

func (SoftwareSourceReplacePackagesManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSourceReplacePackagesManagement)(nil)).Elem()
}

func (o SoftwareSourceReplacePackagesManagementArrayOutput) ToSoftwareSourceReplacePackagesManagementArrayOutput() SoftwareSourceReplacePackagesManagementArrayOutput {
	return o
}

func (o SoftwareSourceReplacePackagesManagementArrayOutput) ToSoftwareSourceReplacePackagesManagementArrayOutputWithContext(ctx context.Context) SoftwareSourceReplacePackagesManagementArrayOutput {
	return o
}

func (o SoftwareSourceReplacePackagesManagementArrayOutput) Index(i pulumi.IntInput) SoftwareSourceReplacePackagesManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareSourceReplacePackagesManagement {
		return vs[0].([]*SoftwareSourceReplacePackagesManagement)[vs[1].(int)]
	}).(SoftwareSourceReplacePackagesManagementOutput)
}

type SoftwareSourceReplacePackagesManagementMapOutput struct{ *pulumi.OutputState }

func (SoftwareSourceReplacePackagesManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSourceReplacePackagesManagement)(nil)).Elem()
}

func (o SoftwareSourceReplacePackagesManagementMapOutput) ToSoftwareSourceReplacePackagesManagementMapOutput() SoftwareSourceReplacePackagesManagementMapOutput {
	return o
}

func (o SoftwareSourceReplacePackagesManagementMapOutput) ToSoftwareSourceReplacePackagesManagementMapOutputWithContext(ctx context.Context) SoftwareSourceReplacePackagesManagementMapOutput {
	return o
}

func (o SoftwareSourceReplacePackagesManagementMapOutput) MapIndex(k pulumi.StringInput) SoftwareSourceReplacePackagesManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareSourceReplacePackagesManagement {
		return vs[0].(map[string]*SoftwareSourceReplacePackagesManagement)[vs[1].(string)]
	}).(SoftwareSourceReplacePackagesManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceReplacePackagesManagementInput)(nil)).Elem(), &SoftwareSourceReplacePackagesManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceReplacePackagesManagementArrayInput)(nil)).Elem(), SoftwareSourceReplacePackagesManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceReplacePackagesManagementMapInput)(nil)).Elem(), SoftwareSourceReplacePackagesManagementMap{})
	pulumi.RegisterOutputType(SoftwareSourceReplacePackagesManagementOutput{})
	pulumi.RegisterOutputType(SoftwareSourceReplacePackagesManagementArrayOutput{})
	pulumi.RegisterOutputType(SoftwareSourceReplacePackagesManagementMapOutput{})
}
