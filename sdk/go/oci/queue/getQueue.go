// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package queue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Queue resource in Oracle Cloud Infrastructure Queue service.
//
// Gets a queue by identifier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/queue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := queue.GetQueue(ctx, &queue.GetQueueArgs{
//				QueueId: testQueueOciQueueQueue.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupQueue(ctx *pulumi.Context, args *LookupQueueArgs, opts ...pulumi.InvokeOption) (*LookupQueueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQueueResult
	err := ctx.Invoke("oci:Queue/getQueue:getQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQueue.
type LookupQueueArgs struct {
	// The unique queue identifier.
	QueueId string `pulumi:"queueId"`
}

// A collection of values returned by getQueue.
type LookupQueueResult struct {
	// The percentage of allocated queue resources that can be consumed by a single channel. For example, if a queue has a storage limit of 2Gb, and a single channel consumption limit is 0.1 (10%), that means data size of a single channel  can't exceed 200Mb. Consumption limit of 100% (default) means that a single channel can consume up-to all allocated queue's resources.
	ChannelConsumptionLimit int `pulumi:"channelConsumptionLimit"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the queue.
	CompartmentId string `pulumi:"compartmentId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom encryption key to be used to encrypt messages content.
	CustomEncryptionKeyId string `pulumi:"customEncryptionKeyId"`
	// The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
	DeadLetterQueueDeliveryCount int `pulumi:"deadLetterQueueDeliveryCount"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A user-friendly name for the queue. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// A unique identifier for the queue that is immutable on creation.
	Id string `pulumi:"id"`
	// Any additional details about the current state of the queue.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The endpoint to use to consume or publish messages in the queue.
	MessagesEndpoint string `pulumi:"messagesEndpoint"`
	PurgeTrigger     int    `pulumi:"purgeTrigger"`
	PurgeType        string `pulumi:"purgeType"`
	QueueId          string `pulumi:"queueId"`
	// The retention period of the messages in the queue, in seconds.
	RetentionInSeconds int `pulumi:"retentionInSeconds"`
	// The current state of the queue.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time that the queue was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated string `pulumi:"timeCreated"`
	// The time that the queue was updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeUpdated string `pulumi:"timeUpdated"`
	// The default polling timeout of the messages in the queue, in seconds.
	TimeoutInSeconds int `pulumi:"timeoutInSeconds"`
	// The default visibility timeout of the messages consumed from the queue, in seconds.
	VisibilityInSeconds int `pulumi:"visibilityInSeconds"`
}

func LookupQueueOutput(ctx *pulumi.Context, args LookupQueueOutputArgs, opts ...pulumi.InvokeOption) LookupQueueResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupQueueResultOutput, error) {
			args := v.(LookupQueueArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Queue/getQueue:getQueue", args, LookupQueueResultOutput{}, options).(LookupQueueResultOutput), nil
		}).(LookupQueueResultOutput)
}

// A collection of arguments for invoking getQueue.
type LookupQueueOutputArgs struct {
	// The unique queue identifier.
	QueueId pulumi.StringInput `pulumi:"queueId"`
}

func (LookupQueueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueArgs)(nil)).Elem()
}

// A collection of values returned by getQueue.
type LookupQueueResultOutput struct{ *pulumi.OutputState }

func (LookupQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueResult)(nil)).Elem()
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutput() LookupQueueResultOutput {
	return o
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutputWithContext(ctx context.Context) LookupQueueResultOutput {
	return o
}

// The percentage of allocated queue resources that can be consumed by a single channel. For example, if a queue has a storage limit of 2Gb, and a single channel consumption limit is 0.1 (10%), that means data size of a single channel  can't exceed 200Mb. Consumption limit of 100% (default) means that a single channel can consume up-to all allocated queue's resources.
func (o LookupQueueResultOutput) ChannelConsumptionLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.ChannelConsumptionLimit }).(pulumi.IntOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the queue.
func (o LookupQueueResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom encryption key to be used to encrypt messages content.
func (o LookupQueueResultOutput) CustomEncryptionKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.CustomEncryptionKeyId }).(pulumi.StringOutput)
}

// The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
func (o LookupQueueResultOutput) DeadLetterQueueDeliveryCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.DeadLetterQueueDeliveryCount }).(pulumi.IntOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupQueueResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupQueueResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// A user-friendly name for the queue. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o LookupQueueResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupQueueResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupQueueResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// A unique identifier for the queue that is immutable on creation.
func (o LookupQueueResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Id }).(pulumi.StringOutput)
}

// Any additional details about the current state of the queue.
func (o LookupQueueResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The endpoint to use to consume or publish messages in the queue.
func (o LookupQueueResultOutput) MessagesEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.MessagesEndpoint }).(pulumi.StringOutput)
}

func (o LookupQueueResultOutput) PurgeTrigger() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.PurgeTrigger }).(pulumi.IntOutput)
}

func (o LookupQueueResultOutput) PurgeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.PurgeType }).(pulumi.StringOutput)
}

func (o LookupQueueResultOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.QueueId }).(pulumi.StringOutput)
}

// The retention period of the messages in the queue, in seconds.
func (o LookupQueueResultOutput) RetentionInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.RetentionInSeconds }).(pulumi.IntOutput)
}

// The current state of the queue.
func (o LookupQueueResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupQueueResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupQueueResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time that the queue was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
func (o LookupQueueResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time that the queue was updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
func (o LookupQueueResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The default polling timeout of the messages in the queue, in seconds.
func (o LookupQueueResultOutput) TimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.TimeoutInSeconds }).(pulumi.IntOutput)
}

// The default visibility timeout of the messages consumed from the queue, in seconds.
func (o LookupQueueResultOutput) VisibilityInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.VisibilityInSeconds }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQueueResultOutput{})
}
