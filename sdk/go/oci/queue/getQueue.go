// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package queue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides details about a specific Queue resource in Oracle Cloud Infrastructure Queue service.
//
// # Gets a Queue by identifier
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Queue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Queue.GetQueue(ctx, &queue.GetQueueArgs{
//				QueueId: oci_queue_queue.Test_queue.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupQueue(ctx *pulumi.Context, args *LookupQueueArgs, opts ...pulumi.InvokeOption) (*LookupQueueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQueueResult
	err := ctx.Invoke("oci:Queue/getQueue:getQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQueue.
type LookupQueueArgs struct {
	// unique Queue identifier
	QueueId string `pulumi:"queueId"`
}

// A collection of values returned by getQueue.
type LookupQueueResult struct {
	// Compartment Identifier
	CompartmentId string `pulumi:"compartmentId"`
	// Id of the custom master encryption key which will be used to encrypt messages content
	CustomEncryptionKeyId string `pulumi:"customEncryptionKeyId"`
	// The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
	DeadLetterQueueDeliveryCount int `pulumi:"deadLetterQueueDeliveryCount"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Queue Identifier, can be renamed
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Unique identifier that is immutable on creation
	Id string `pulumi:"id"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The endpoint to use to consume or publish messages in the queue.
	MessagesEndpoint string `pulumi:"messagesEndpoint"`
	PurgeQueue       bool   `pulumi:"purgeQueue"`
	PurgeType        string `pulumi:"purgeType"`
	QueueId          string `pulumi:"queueId"`
	// The retention period of the messages in the queue, in seconds.
	RetentionInSeconds int `pulumi:"retentionInSeconds"`
	// The current state of the Queue.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the the Queue was created. An RFC3339 formatted datetime string
	TimeCreated string `pulumi:"timeCreated"`
	// The time the Queue was updated. An RFC3339 formatted datetime string
	TimeUpdated string `pulumi:"timeUpdated"`
	// The default polling timeout of the messages in the queue, in seconds.
	TimeoutInSeconds int `pulumi:"timeoutInSeconds"`
	// The default visibility of the messages consumed from the queue.
	VisibilityInSeconds int `pulumi:"visibilityInSeconds"`
}

func LookupQueueOutput(ctx *pulumi.Context, args LookupQueueOutputArgs, opts ...pulumi.InvokeOption) LookupQueueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQueueResult, error) {
			args := v.(LookupQueueArgs)
			r, err := LookupQueue(ctx, &args, opts...)
			var s LookupQueueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQueueResultOutput)
}

// A collection of arguments for invoking getQueue.
type LookupQueueOutputArgs struct {
	// unique Queue identifier
	QueueId pulumi.StringInput `pulumi:"queueId"`
}

func (LookupQueueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueArgs)(nil)).Elem()
}

// A collection of values returned by getQueue.
type LookupQueueResultOutput struct{ *pulumi.OutputState }

func (LookupQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueResult)(nil)).Elem()
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutput() LookupQueueResultOutput {
	return o
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutputWithContext(ctx context.Context) LookupQueueResultOutput {
	return o
}

func (o LookupQueueResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupQueueResult] {
	return pulumix.Output[LookupQueueResult]{
		OutputState: o.OutputState,
	}
}

// Compartment Identifier
func (o LookupQueueResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Id of the custom master encryption key which will be used to encrypt messages content
func (o LookupQueueResultOutput) CustomEncryptionKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.CustomEncryptionKeyId }).(pulumi.StringOutput)
}

// The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
func (o LookupQueueResultOutput) DeadLetterQueueDeliveryCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.DeadLetterQueueDeliveryCount }).(pulumi.IntOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupQueueResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupQueueResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Queue Identifier, can be renamed
func (o LookupQueueResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupQueueResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupQueueResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Unique identifier that is immutable on creation
func (o LookupQueueResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Id }).(pulumi.StringOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o LookupQueueResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The endpoint to use to consume or publish messages in the queue.
func (o LookupQueueResultOutput) MessagesEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.MessagesEndpoint }).(pulumi.StringOutput)
}

func (o LookupQueueResultOutput) PurgeQueue() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupQueueResult) bool { return v.PurgeQueue }).(pulumi.BoolOutput)
}

func (o LookupQueueResultOutput) PurgeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.PurgeType }).(pulumi.StringOutput)
}

func (o LookupQueueResultOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.QueueId }).(pulumi.StringOutput)
}

// The retention period of the messages in the queue, in seconds.
func (o LookupQueueResultOutput) RetentionInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.RetentionInSeconds }).(pulumi.IntOutput)
}

// The current state of the Queue.
func (o LookupQueueResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupQueueResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupQueueResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the the Queue was created. An RFC3339 formatted datetime string
func (o LookupQueueResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the Queue was updated. An RFC3339 formatted datetime string
func (o LookupQueueResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The default polling timeout of the messages in the queue, in seconds.
func (o LookupQueueResultOutput) TimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.TimeoutInSeconds }).(pulumi.IntOutput)
}

// The default visibility of the messages consumed from the queue.
func (o LookupQueueResultOutput) VisibilityInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQueueResult) int { return v.VisibilityInSeconds }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQueueResultOutput{})
}
