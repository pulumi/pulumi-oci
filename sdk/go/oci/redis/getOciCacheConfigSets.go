// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Oci Cache Config Sets in Oracle Cloud Infrastructure Redis service.
//
// Lists the Oracle Cloud Infrastructure Cache Config Sets in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.GetOciCacheConfigSets(ctx, &redis.GetOciCacheConfigSetsArgs{
//				CompartmentId:   pulumi.StringRef(compartmentId),
//				DisplayName:     pulumi.StringRef(ociCacheConfigSetDisplayName),
//				Id:              pulumi.StringRef(ociCacheConfigSetId),
//				SoftwareVersion: pulumi.StringRef(ociCacheConfigSetSoftwareVersion),
//				State:           pulumi.StringRef(ociCacheConfigSetState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetOciCacheConfigSets(ctx *pulumi.Context, args *GetOciCacheConfigSetsArgs, opts ...pulumi.InvokeOption) (*GetOciCacheConfigSetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOciCacheConfigSetsResult
	err := ctx.Invoke("oci:Redis/getOciCacheConfigSets:getOciCacheConfigSets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOciCacheConfigSets.
type GetOciCacheConfigSetsArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                       `pulumi:"displayName"`
	Filters     []GetOciCacheConfigSetsFilter `pulumi:"filters"`
	// Unique Oracle Cloud Infrastructure Cache Config Set identifier.
	Id *string `pulumi:"id"`
	// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose lifecycle state matches with the given lifecycle state.
	State *string `pulumi:"state"`
}

// A collection of values returned by getOciCacheConfigSets.
type GetOciCacheConfigSetsResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the Oracle Cloud Infrastructure Cache Config Set.
	CompartmentId *string `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                       `pulumi:"displayName"`
	Filters     []GetOciCacheConfigSetsFilter `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Oracle Cloud Infrastructure Cache Config Set.
	Id *string `pulumi:"id"`
	// The list of oci_cache_config_set_collection.
	OciCacheConfigSetCollections []GetOciCacheConfigSetsOciCacheConfigSetCollection `pulumi:"ociCacheConfigSetCollections"`
	// The Oracle Cloud Infrastructure Cache engine version that the cluster is running.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// The current state of the Oracle Cloud Infrastructure Cache Config Set.
	State *string `pulumi:"state"`
}

func GetOciCacheConfigSetsOutput(ctx *pulumi.Context, args GetOciCacheConfigSetsOutputArgs, opts ...pulumi.InvokeOption) GetOciCacheConfigSetsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetOciCacheConfigSetsResultOutput, error) {
			args := v.(GetOciCacheConfigSetsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Redis/getOciCacheConfigSets:getOciCacheConfigSets", args, GetOciCacheConfigSetsResultOutput{}, options).(GetOciCacheConfigSetsResultOutput), nil
		}).(GetOciCacheConfigSetsResultOutput)
}

// A collection of arguments for invoking getOciCacheConfigSets.
type GetOciCacheConfigSetsOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput                 `pulumi:"displayName"`
	Filters     GetOciCacheConfigSetsFilterArrayInput `pulumi:"filters"`
	// Unique Oracle Cloud Infrastructure Cache Config Set identifier.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
	SoftwareVersion pulumi.StringPtrInput `pulumi:"softwareVersion"`
	// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose lifecycle state matches with the given lifecycle state.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetOciCacheConfigSetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOciCacheConfigSetsArgs)(nil)).Elem()
}

// A collection of values returned by getOciCacheConfigSets.
type GetOciCacheConfigSetsResultOutput struct{ *pulumi.OutputState }

func (GetOciCacheConfigSetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOciCacheConfigSetsResult)(nil)).Elem()
}

func (o GetOciCacheConfigSetsResultOutput) ToGetOciCacheConfigSetsResultOutput() GetOciCacheConfigSetsResultOutput {
	return o
}

func (o GetOciCacheConfigSetsResultOutput) ToGetOciCacheConfigSetsResultOutputWithContext(ctx context.Context) GetOciCacheConfigSetsResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the Oracle Cloud Infrastructure Cache Config Set.
func (o GetOciCacheConfigSetsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheConfigSetsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o GetOciCacheConfigSetsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheConfigSetsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetOciCacheConfigSetsResultOutput) Filters() GetOciCacheConfigSetsFilterArrayOutput {
	return o.ApplyT(func(v GetOciCacheConfigSetsResult) []GetOciCacheConfigSetsFilter { return v.Filters }).(GetOciCacheConfigSetsFilterArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Oracle Cloud Infrastructure Cache Config Set.
func (o GetOciCacheConfigSetsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheConfigSetsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of oci_cache_config_set_collection.
func (o GetOciCacheConfigSetsResultOutput) OciCacheConfigSetCollections() GetOciCacheConfigSetsOciCacheConfigSetCollectionArrayOutput {
	return o.ApplyT(func(v GetOciCacheConfigSetsResult) []GetOciCacheConfigSetsOciCacheConfigSetCollection {
		return v.OciCacheConfigSetCollections
	}).(GetOciCacheConfigSetsOciCacheConfigSetCollectionArrayOutput)
}

// The Oracle Cloud Infrastructure Cache engine version that the cluster is running.
func (o GetOciCacheConfigSetsResultOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheConfigSetsResult) *string { return v.SoftwareVersion }).(pulumi.StringPtrOutput)
}

// The current state of the Oracle Cloud Infrastructure Cache Config Set.
func (o GetOciCacheConfigSetsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheConfigSetsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetOciCacheConfigSetsResultOutput{})
}
