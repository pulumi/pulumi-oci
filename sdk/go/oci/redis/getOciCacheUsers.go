// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Oci Cache Users in Oracle Cloud Infrastructure Redis service.
//
// Lists the Oracle Cloud Infrastructure Cache users based on the supplied parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.GetOciCacheUsers(ctx, &redis.GetOciCacheUsersArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				Name:          pulumi.StringRef(ociCacheUserName),
//				State:         pulumi.StringRef(ociCacheUserState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetOciCacheUsers(ctx *pulumi.Context, args *GetOciCacheUsersArgs, opts ...pulumi.InvokeOption) (*GetOciCacheUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOciCacheUsersResult
	err := ctx.Invoke("oci:Redis/getOciCacheUsers:getOciCacheUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOciCacheUsers.
type GetOciCacheUsersArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string                  `pulumi:"compartmentId"`
	Filters       []GetOciCacheUsersFilter `pulumi:"filters"`
	// A filter to return the resources that match with the given Oracle Cloud Infrastructure cache user name.
	Name *string `pulumi:"name"`
	// A filter to return the resources, whose lifecycleState matches with the given lifecycleState.
	State *string `pulumi:"state"`
}

// A collection of values returned by getOciCacheUsers.
type GetOciCacheUsersResult struct {
	// Oracle Cloud Infrastructure Cache user compartment ID.
	CompartmentId *string                  `pulumi:"compartmentId"`
	Filters       []GetOciCacheUsersFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Oracle Cloud Infrastructure Cache user name.
	Name *string `pulumi:"name"`
	// The list of oci_cache_user_collection.
	OciCacheUserCollections []GetOciCacheUsersOciCacheUserCollection `pulumi:"ociCacheUserCollections"`
	// Oracle Cloud Infrastructure Cache user lifecycle state.
	State *string `pulumi:"state"`
}

func GetOciCacheUsersOutput(ctx *pulumi.Context, args GetOciCacheUsersOutputArgs, opts ...pulumi.InvokeOption) GetOciCacheUsersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetOciCacheUsersResultOutput, error) {
			args := v.(GetOciCacheUsersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Redis/getOciCacheUsers:getOciCacheUsers", args, GetOciCacheUsersResultOutput{}, options).(GetOciCacheUsersResultOutput), nil
		}).(GetOciCacheUsersResultOutput)
}

// A collection of arguments for invoking getOciCacheUsers.
type GetOciCacheUsersOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput            `pulumi:"compartmentId"`
	Filters       GetOciCacheUsersFilterArrayInput `pulumi:"filters"`
	// A filter to return the resources that match with the given Oracle Cloud Infrastructure cache user name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to return the resources, whose lifecycleState matches with the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetOciCacheUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOciCacheUsersArgs)(nil)).Elem()
}

// A collection of values returned by getOciCacheUsers.
type GetOciCacheUsersResultOutput struct{ *pulumi.OutputState }

func (GetOciCacheUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOciCacheUsersResult)(nil)).Elem()
}

func (o GetOciCacheUsersResultOutput) ToGetOciCacheUsersResultOutput() GetOciCacheUsersResultOutput {
	return o
}

func (o GetOciCacheUsersResultOutput) ToGetOciCacheUsersResultOutputWithContext(ctx context.Context) GetOciCacheUsersResultOutput {
	return o
}

// Oracle Cloud Infrastructure Cache user compartment ID.
func (o GetOciCacheUsersResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheUsersResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetOciCacheUsersResultOutput) Filters() GetOciCacheUsersFilterArrayOutput {
	return o.ApplyT(func(v GetOciCacheUsersResult) []GetOciCacheUsersFilter { return v.Filters }).(GetOciCacheUsersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetOciCacheUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOciCacheUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Oracle Cloud Infrastructure Cache user name.
func (o GetOciCacheUsersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheUsersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of oci_cache_user_collection.
func (o GetOciCacheUsersResultOutput) OciCacheUserCollections() GetOciCacheUsersOciCacheUserCollectionArrayOutput {
	return o.ApplyT(func(v GetOciCacheUsersResult) []GetOciCacheUsersOciCacheUserCollection {
		return v.OciCacheUserCollections
	}).(GetOciCacheUsersOciCacheUserCollectionArrayOutput)
}

// Oracle Cloud Infrastructure Cache user lifecycle state.
func (o GetOciCacheUsersResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOciCacheUsersResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetOciCacheUsersResultOutput{})
}
