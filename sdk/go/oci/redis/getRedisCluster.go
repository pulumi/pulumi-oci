// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Redis Cluster resource in Oracle Cloud Infrastructure Redis service.
//
// Retrieves the specified Redis cluster. A Redis cluster is a memory-based storage solution. For more information, see [OCI Caching Service with Redis](https://docs.cloud.oracle.com/iaas/Content/redis/home.htm).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Redis.GetRedisCluster(ctx, &redis.GetRedisClusterArgs{
//				RedisClusterId: oci_redis_redis_cluster.Test_redis_cluster.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupRedisCluster(ctx *pulumi.Context, args *LookupRedisClusterArgs, opts ...pulumi.InvokeOption) (*LookupRedisClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRedisClusterResult
	err := ctx.Invoke("oci:Redis/getRedisCluster:getRedisCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRedisCluster.
type LookupRedisClusterArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster.
	RedisClusterId string `pulumi:"redisClusterId"`
}

// A collection of values returned by getRedisCluster.
type LookupRedisClusterResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the Redis cluster.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A user-friendly name of a Redis cluster node.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster.
	Id string `pulumi:"id"`
	// A message describing the current state in more detail. For example, the message might provide actionable information for a resource in `FAILED` state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The collection of Redis cluster nodes.
	NodeCollections []GetRedisClusterNodeCollection `pulumi:"nodeCollections"`
	// The number of nodes in the Redis cluster.
	NodeCount int `pulumi:"nodeCount"`
	// The amount of memory allocated to the Redis cluster's nodes, in gigabytes.
	NodeMemoryInGbs float64 `pulumi:"nodeMemoryInGbs"`
	// OCIDs of the NSGs to control access in the customer network
	NsgIds []string `pulumi:"nsgIds"`
	// The private IP address of the API endpoint for the Redis cluster's primary node.
	PrimaryEndpointIpAddress string `pulumi:"primaryEndpointIpAddress"`
	// The fully qualified domain name (FQDN) of the API endpoint for the Redis cluster's primary node.
	PrimaryFqdn    string `pulumi:"primaryFqdn"`
	RedisClusterId string `pulumi:"redisClusterId"`
	// The private IP address of the API endpoint for the Redis cluster's replica nodes.
	ReplicasEndpointIpAddress string `pulumi:"replicasEndpointIpAddress"`
	// The fully qualified domain name (FQDN) of the API endpoint for the Redis cluster's replica nodes.
	ReplicasFqdn string `pulumi:"replicasFqdn"`
	// The Redis version that the cluster is running.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// The current state of the Redis cluster.
	State string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster's subnet.
	SubnetId string `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The date and time the Redis cluster was created. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the Redis cluster was updated. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupRedisClusterOutput(ctx *pulumi.Context, args LookupRedisClusterOutputArgs, opts ...pulumi.InvokeOption) LookupRedisClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRedisClusterResult, error) {
			args := v.(LookupRedisClusterArgs)
			r, err := LookupRedisCluster(ctx, &args, opts...)
			var s LookupRedisClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRedisClusterResultOutput)
}

// A collection of arguments for invoking getRedisCluster.
type LookupRedisClusterOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster.
	RedisClusterId pulumi.StringInput `pulumi:"redisClusterId"`
}

func (LookupRedisClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisClusterArgs)(nil)).Elem()
}

// A collection of values returned by getRedisCluster.
type LookupRedisClusterResultOutput struct{ *pulumi.OutputState }

func (LookupRedisClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisClusterResult)(nil)).Elem()
}

func (o LookupRedisClusterResultOutput) ToLookupRedisClusterResultOutput() LookupRedisClusterResultOutput {
	return o
}

func (o LookupRedisClusterResultOutput) ToLookupRedisClusterResultOutputWithContext(ctx context.Context) LookupRedisClusterResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the Redis cluster.
func (o LookupRedisClusterResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupRedisClusterResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A user-friendly name of a Redis cluster node.
func (o LookupRedisClusterResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupRedisClusterResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster.
func (o LookupRedisClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// A message describing the current state in more detail. For example, the message might provide actionable information for a resource in `FAILED` state.
func (o LookupRedisClusterResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The collection of Redis cluster nodes.
func (o LookupRedisClusterResultOutput) NodeCollections() GetRedisClusterNodeCollectionArrayOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) []GetRedisClusterNodeCollection { return v.NodeCollections }).(GetRedisClusterNodeCollectionArrayOutput)
}

// The number of nodes in the Redis cluster.
func (o LookupRedisClusterResultOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) int { return v.NodeCount }).(pulumi.IntOutput)
}

// The amount of memory allocated to the Redis cluster's nodes, in gigabytes.
func (o LookupRedisClusterResultOutput) NodeMemoryInGbs() pulumi.Float64Output {
	return o.ApplyT(func(v LookupRedisClusterResult) float64 { return v.NodeMemoryInGbs }).(pulumi.Float64Output)
}

// OCIDs of the NSGs to control access in the customer network
func (o LookupRedisClusterResultOutput) NsgIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) []string { return v.NsgIds }).(pulumi.StringArrayOutput)
}

// The private IP address of the API endpoint for the Redis cluster's primary node.
func (o LookupRedisClusterResultOutput) PrimaryEndpointIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.PrimaryEndpointIpAddress }).(pulumi.StringOutput)
}

// The fully qualified domain name (FQDN) of the API endpoint for the Redis cluster's primary node.
func (o LookupRedisClusterResultOutput) PrimaryFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.PrimaryFqdn }).(pulumi.StringOutput)
}

func (o LookupRedisClusterResultOutput) RedisClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.RedisClusterId }).(pulumi.StringOutput)
}

// The private IP address of the API endpoint for the Redis cluster's replica nodes.
func (o LookupRedisClusterResultOutput) ReplicasEndpointIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.ReplicasEndpointIpAddress }).(pulumi.StringOutput)
}

// The fully qualified domain name (FQDN) of the API endpoint for the Redis cluster's replica nodes.
func (o LookupRedisClusterResultOutput) ReplicasFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.ReplicasFqdn }).(pulumi.StringOutput)
}

// The Redis version that the cluster is running.
func (o LookupRedisClusterResultOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// The current state of the Redis cluster.
func (o LookupRedisClusterResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.State }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster's subnet.
func (o LookupRedisClusterResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupRedisClusterResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The date and time the Redis cluster was created. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
func (o LookupRedisClusterResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the Redis cluster was updated. An [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) formatted datetime string.
func (o LookupRedisClusterResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisClusterResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRedisClusterResultOutput{})
}
