// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Oci Cache User Get Redis Cluster resource in Oracle Cloud Infrastructure Redis service.
//
// Gets a list of associated redis cluster for an Oracle Cloud Infrastructure cache user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.NewOciCacheUserGetRedisCluster(ctx, "test_oci_cache_user_get_redis_cluster", &redis.OciCacheUserGetRedisClusterArgs{
//				OciCacheUserId: pulumi.Any(testOciCacheUser.Id),
//				CompartmentId:  pulumi.Any(compartmentId),
//				DisplayName:    pulumi.Any(ociCacheUserGetRedisClusterDisplayName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type OciCacheUserGetRedisCluster struct {
	pulumi.CustomResourceState

	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName      pulumi.StringOutput                                   `pulumi:"displayName"`
	OciCacheClusters OciCacheUserGetRedisClusterOciCacheClusterArrayOutput `pulumi:"ociCacheClusters"`
	// A filter to return only resources, that match with the given Oracle Cloud Infrastructure cache user ID (OCID).
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OciCacheUserId pulumi.StringOutput `pulumi:"ociCacheUserId"`
}

// NewOciCacheUserGetRedisCluster registers a new resource with the given unique name, arguments, and options.
func NewOciCacheUserGetRedisCluster(ctx *pulumi.Context,
	name string, args *OciCacheUserGetRedisClusterArgs, opts ...pulumi.ResourceOption) (*OciCacheUserGetRedisCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OciCacheUserId == nil {
		return nil, errors.New("invalid value for required argument 'OciCacheUserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OciCacheUserGetRedisCluster
	err := ctx.RegisterResource("oci:Redis/ociCacheUserGetRedisCluster:OciCacheUserGetRedisCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOciCacheUserGetRedisCluster gets an existing OciCacheUserGetRedisCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOciCacheUserGetRedisCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OciCacheUserGetRedisClusterState, opts ...pulumi.ResourceOption) (*OciCacheUserGetRedisCluster, error) {
	var resource OciCacheUserGetRedisCluster
	err := ctx.ReadResource("oci:Redis/ociCacheUserGetRedisCluster:OciCacheUserGetRedisCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OciCacheUserGetRedisCluster resources.
type ociCacheUserGetRedisClusterState struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName      *string                                      `pulumi:"displayName"`
	OciCacheClusters []OciCacheUserGetRedisClusterOciCacheCluster `pulumi:"ociCacheClusters"`
	// A filter to return only resources, that match with the given Oracle Cloud Infrastructure cache user ID (OCID).
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OciCacheUserId *string `pulumi:"ociCacheUserId"`
}

type OciCacheUserGetRedisClusterState struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput
	// A filter to return only resources that match the entire display name given.
	DisplayName      pulumi.StringPtrInput
	OciCacheClusters OciCacheUserGetRedisClusterOciCacheClusterArrayInput
	// A filter to return only resources, that match with the given Oracle Cloud Infrastructure cache user ID (OCID).
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OciCacheUserId pulumi.StringPtrInput
}

func (OciCacheUserGetRedisClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ociCacheUserGetRedisClusterState)(nil)).Elem()
}

type ociCacheUserGetRedisClusterArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string `pulumi:"displayName"`
	// A filter to return only resources, that match with the given Oracle Cloud Infrastructure cache user ID (OCID).
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OciCacheUserId string `pulumi:"ociCacheUserId"`
}

// The set of arguments for constructing a OciCacheUserGetRedisCluster resource.
type OciCacheUserGetRedisClusterArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput
	// A filter to return only resources, that match with the given Oracle Cloud Infrastructure cache user ID (OCID).
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OciCacheUserId pulumi.StringInput
}

func (OciCacheUserGetRedisClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ociCacheUserGetRedisClusterArgs)(nil)).Elem()
}

type OciCacheUserGetRedisClusterInput interface {
	pulumi.Input

	ToOciCacheUserGetRedisClusterOutput() OciCacheUserGetRedisClusterOutput
	ToOciCacheUserGetRedisClusterOutputWithContext(ctx context.Context) OciCacheUserGetRedisClusterOutput
}

func (*OciCacheUserGetRedisCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**OciCacheUserGetRedisCluster)(nil)).Elem()
}

func (i *OciCacheUserGetRedisCluster) ToOciCacheUserGetRedisClusterOutput() OciCacheUserGetRedisClusterOutput {
	return i.ToOciCacheUserGetRedisClusterOutputWithContext(context.Background())
}

func (i *OciCacheUserGetRedisCluster) ToOciCacheUserGetRedisClusterOutputWithContext(ctx context.Context) OciCacheUserGetRedisClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciCacheUserGetRedisClusterOutput)
}

// OciCacheUserGetRedisClusterArrayInput is an input type that accepts OciCacheUserGetRedisClusterArray and OciCacheUserGetRedisClusterArrayOutput values.
// You can construct a concrete instance of `OciCacheUserGetRedisClusterArrayInput` via:
//
//	OciCacheUserGetRedisClusterArray{ OciCacheUserGetRedisClusterArgs{...} }
type OciCacheUserGetRedisClusterArrayInput interface {
	pulumi.Input

	ToOciCacheUserGetRedisClusterArrayOutput() OciCacheUserGetRedisClusterArrayOutput
	ToOciCacheUserGetRedisClusterArrayOutputWithContext(context.Context) OciCacheUserGetRedisClusterArrayOutput
}

type OciCacheUserGetRedisClusterArray []OciCacheUserGetRedisClusterInput

func (OciCacheUserGetRedisClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciCacheUserGetRedisCluster)(nil)).Elem()
}

func (i OciCacheUserGetRedisClusterArray) ToOciCacheUserGetRedisClusterArrayOutput() OciCacheUserGetRedisClusterArrayOutput {
	return i.ToOciCacheUserGetRedisClusterArrayOutputWithContext(context.Background())
}

func (i OciCacheUserGetRedisClusterArray) ToOciCacheUserGetRedisClusterArrayOutputWithContext(ctx context.Context) OciCacheUserGetRedisClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciCacheUserGetRedisClusterArrayOutput)
}

// OciCacheUserGetRedisClusterMapInput is an input type that accepts OciCacheUserGetRedisClusterMap and OciCacheUserGetRedisClusterMapOutput values.
// You can construct a concrete instance of `OciCacheUserGetRedisClusterMapInput` via:
//
//	OciCacheUserGetRedisClusterMap{ "key": OciCacheUserGetRedisClusterArgs{...} }
type OciCacheUserGetRedisClusterMapInput interface {
	pulumi.Input

	ToOciCacheUserGetRedisClusterMapOutput() OciCacheUserGetRedisClusterMapOutput
	ToOciCacheUserGetRedisClusterMapOutputWithContext(context.Context) OciCacheUserGetRedisClusterMapOutput
}

type OciCacheUserGetRedisClusterMap map[string]OciCacheUserGetRedisClusterInput

func (OciCacheUserGetRedisClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciCacheUserGetRedisCluster)(nil)).Elem()
}

func (i OciCacheUserGetRedisClusterMap) ToOciCacheUserGetRedisClusterMapOutput() OciCacheUserGetRedisClusterMapOutput {
	return i.ToOciCacheUserGetRedisClusterMapOutputWithContext(context.Background())
}

func (i OciCacheUserGetRedisClusterMap) ToOciCacheUserGetRedisClusterMapOutputWithContext(ctx context.Context) OciCacheUserGetRedisClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciCacheUserGetRedisClusterMapOutput)
}

type OciCacheUserGetRedisClusterOutput struct{ *pulumi.OutputState }

func (OciCacheUserGetRedisClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OciCacheUserGetRedisCluster)(nil)).Elem()
}

func (o OciCacheUserGetRedisClusterOutput) ToOciCacheUserGetRedisClusterOutput() OciCacheUserGetRedisClusterOutput {
	return o
}

func (o OciCacheUserGetRedisClusterOutput) ToOciCacheUserGetRedisClusterOutputWithContext(ctx context.Context) OciCacheUserGetRedisClusterOutput {
	return o
}

// The ID of the compartment in which to list resources.
func (o OciCacheUserGetRedisClusterOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OciCacheUserGetRedisCluster) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// A filter to return only resources that match the entire display name given.
func (o OciCacheUserGetRedisClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OciCacheUserGetRedisCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o OciCacheUserGetRedisClusterOutput) OciCacheClusters() OciCacheUserGetRedisClusterOciCacheClusterArrayOutput {
	return o.ApplyT(func(v *OciCacheUserGetRedisCluster) OciCacheUserGetRedisClusterOciCacheClusterArrayOutput {
		return v.OciCacheClusters
	}).(OciCacheUserGetRedisClusterOciCacheClusterArrayOutput)
}

// A filter to return only resources, that match with the given Oracle Cloud Infrastructure cache user ID (OCID).
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o OciCacheUserGetRedisClusterOutput) OciCacheUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *OciCacheUserGetRedisCluster) pulumi.StringOutput { return v.OciCacheUserId }).(pulumi.StringOutput)
}

type OciCacheUserGetRedisClusterArrayOutput struct{ *pulumi.OutputState }

func (OciCacheUserGetRedisClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciCacheUserGetRedisCluster)(nil)).Elem()
}

func (o OciCacheUserGetRedisClusterArrayOutput) ToOciCacheUserGetRedisClusterArrayOutput() OciCacheUserGetRedisClusterArrayOutput {
	return o
}

func (o OciCacheUserGetRedisClusterArrayOutput) ToOciCacheUserGetRedisClusterArrayOutputWithContext(ctx context.Context) OciCacheUserGetRedisClusterArrayOutput {
	return o
}

func (o OciCacheUserGetRedisClusterArrayOutput) Index(i pulumi.IntInput) OciCacheUserGetRedisClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OciCacheUserGetRedisCluster {
		return vs[0].([]*OciCacheUserGetRedisCluster)[vs[1].(int)]
	}).(OciCacheUserGetRedisClusterOutput)
}

type OciCacheUserGetRedisClusterMapOutput struct{ *pulumi.OutputState }

func (OciCacheUserGetRedisClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciCacheUserGetRedisCluster)(nil)).Elem()
}

func (o OciCacheUserGetRedisClusterMapOutput) ToOciCacheUserGetRedisClusterMapOutput() OciCacheUserGetRedisClusterMapOutput {
	return o
}

func (o OciCacheUserGetRedisClusterMapOutput) ToOciCacheUserGetRedisClusterMapOutputWithContext(ctx context.Context) OciCacheUserGetRedisClusterMapOutput {
	return o
}

func (o OciCacheUserGetRedisClusterMapOutput) MapIndex(k pulumi.StringInput) OciCacheUserGetRedisClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OciCacheUserGetRedisCluster {
		return vs[0].(map[string]*OciCacheUserGetRedisCluster)[vs[1].(string)]
	}).(OciCacheUserGetRedisClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OciCacheUserGetRedisClusterInput)(nil)).Elem(), &OciCacheUserGetRedisCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciCacheUserGetRedisClusterArrayInput)(nil)).Elem(), OciCacheUserGetRedisClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciCacheUserGetRedisClusterMapInput)(nil)).Elem(), OciCacheUserGetRedisClusterMap{})
	pulumi.RegisterOutputType(OciCacheUserGetRedisClusterOutput{})
	pulumi.RegisterOutputType(OciCacheUserGetRedisClusterArrayOutput{})
	pulumi.RegisterOutputType(OciCacheUserGetRedisClusterMapOutput{})
}
