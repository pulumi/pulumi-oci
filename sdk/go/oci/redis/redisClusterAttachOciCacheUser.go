// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Redis Cluster Attach Oci Cache User resource in Oracle Cloud Infrastructure Redis service.
//
// Attach existing Oracle Cloud Infrastructure cache users to a redis cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.NewRedisClusterAttachOciCacheUser(ctx, "test_redis_cluster_attach_oci_cache_user", &redis.RedisClusterAttachOciCacheUserArgs{
//				OciCacheUsers:  pulumi.Any(redisClusterAttachOciCacheUserOciCacheUsers),
//				RedisClusterId: pulumi.Any(testRedisCluster.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type RedisClusterAttachOciCacheUser struct {
	pulumi.CustomResourceState

	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers pulumi.StringArrayOutput `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringOutput `pulumi:"redisClusterId"`
}

// NewRedisClusterAttachOciCacheUser registers a new resource with the given unique name, arguments, and options.
func NewRedisClusterAttachOciCacheUser(ctx *pulumi.Context,
	name string, args *RedisClusterAttachOciCacheUserArgs, opts ...pulumi.ResourceOption) (*RedisClusterAttachOciCacheUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OciCacheUsers == nil {
		return nil, errors.New("invalid value for required argument 'OciCacheUsers'")
	}
	if args.RedisClusterId == nil {
		return nil, errors.New("invalid value for required argument 'RedisClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedisClusterAttachOciCacheUser
	err := ctx.RegisterResource("oci:Redis/redisClusterAttachOciCacheUser:RedisClusterAttachOciCacheUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisClusterAttachOciCacheUser gets an existing RedisClusterAttachOciCacheUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisClusterAttachOciCacheUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisClusterAttachOciCacheUserState, opts ...pulumi.ResourceOption) (*RedisClusterAttachOciCacheUser, error) {
	var resource RedisClusterAttachOciCacheUser
	err := ctx.ReadResource("oci:Redis/redisClusterAttachOciCacheUser:RedisClusterAttachOciCacheUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisClusterAttachOciCacheUser resources.
type redisClusterAttachOciCacheUserState struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers []string `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId *string `pulumi:"redisClusterId"`
}

type RedisClusterAttachOciCacheUserState struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringPtrInput
}

func (RedisClusterAttachOciCacheUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterAttachOciCacheUserState)(nil)).Elem()
}

type redisClusterAttachOciCacheUserArgs struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers []string `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId string `pulumi:"redisClusterId"`
}

// The set of arguments for constructing a RedisClusterAttachOciCacheUser resource.
type RedisClusterAttachOciCacheUserArgs struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringInput
}

func (RedisClusterAttachOciCacheUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterAttachOciCacheUserArgs)(nil)).Elem()
}

type RedisClusterAttachOciCacheUserInput interface {
	pulumi.Input

	ToRedisClusterAttachOciCacheUserOutput() RedisClusterAttachOciCacheUserOutput
	ToRedisClusterAttachOciCacheUserOutputWithContext(ctx context.Context) RedisClusterAttachOciCacheUserOutput
}

func (*RedisClusterAttachOciCacheUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterAttachOciCacheUser)(nil)).Elem()
}

func (i *RedisClusterAttachOciCacheUser) ToRedisClusterAttachOciCacheUserOutput() RedisClusterAttachOciCacheUserOutput {
	return i.ToRedisClusterAttachOciCacheUserOutputWithContext(context.Background())
}

func (i *RedisClusterAttachOciCacheUser) ToRedisClusterAttachOciCacheUserOutputWithContext(ctx context.Context) RedisClusterAttachOciCacheUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterAttachOciCacheUserOutput)
}

// RedisClusterAttachOciCacheUserArrayInput is an input type that accepts RedisClusterAttachOciCacheUserArray and RedisClusterAttachOciCacheUserArrayOutput values.
// You can construct a concrete instance of `RedisClusterAttachOciCacheUserArrayInput` via:
//
//	RedisClusterAttachOciCacheUserArray{ RedisClusterAttachOciCacheUserArgs{...} }
type RedisClusterAttachOciCacheUserArrayInput interface {
	pulumi.Input

	ToRedisClusterAttachOciCacheUserArrayOutput() RedisClusterAttachOciCacheUserArrayOutput
	ToRedisClusterAttachOciCacheUserArrayOutputWithContext(context.Context) RedisClusterAttachOciCacheUserArrayOutput
}

type RedisClusterAttachOciCacheUserArray []RedisClusterAttachOciCacheUserInput

func (RedisClusterAttachOciCacheUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisClusterAttachOciCacheUser)(nil)).Elem()
}

func (i RedisClusterAttachOciCacheUserArray) ToRedisClusterAttachOciCacheUserArrayOutput() RedisClusterAttachOciCacheUserArrayOutput {
	return i.ToRedisClusterAttachOciCacheUserArrayOutputWithContext(context.Background())
}

func (i RedisClusterAttachOciCacheUserArray) ToRedisClusterAttachOciCacheUserArrayOutputWithContext(ctx context.Context) RedisClusterAttachOciCacheUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterAttachOciCacheUserArrayOutput)
}

// RedisClusterAttachOciCacheUserMapInput is an input type that accepts RedisClusterAttachOciCacheUserMap and RedisClusterAttachOciCacheUserMapOutput values.
// You can construct a concrete instance of `RedisClusterAttachOciCacheUserMapInput` via:
//
//	RedisClusterAttachOciCacheUserMap{ "key": RedisClusterAttachOciCacheUserArgs{...} }
type RedisClusterAttachOciCacheUserMapInput interface {
	pulumi.Input

	ToRedisClusterAttachOciCacheUserMapOutput() RedisClusterAttachOciCacheUserMapOutput
	ToRedisClusterAttachOciCacheUserMapOutputWithContext(context.Context) RedisClusterAttachOciCacheUserMapOutput
}

type RedisClusterAttachOciCacheUserMap map[string]RedisClusterAttachOciCacheUserInput

func (RedisClusterAttachOciCacheUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisClusterAttachOciCacheUser)(nil)).Elem()
}

func (i RedisClusterAttachOciCacheUserMap) ToRedisClusterAttachOciCacheUserMapOutput() RedisClusterAttachOciCacheUserMapOutput {
	return i.ToRedisClusterAttachOciCacheUserMapOutputWithContext(context.Background())
}

func (i RedisClusterAttachOciCacheUserMap) ToRedisClusterAttachOciCacheUserMapOutputWithContext(ctx context.Context) RedisClusterAttachOciCacheUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterAttachOciCacheUserMapOutput)
}

type RedisClusterAttachOciCacheUserOutput struct{ *pulumi.OutputState }

func (RedisClusterAttachOciCacheUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterAttachOciCacheUser)(nil)).Elem()
}

func (o RedisClusterAttachOciCacheUserOutput) ToRedisClusterAttachOciCacheUserOutput() RedisClusterAttachOciCacheUserOutput {
	return o
}

func (o RedisClusterAttachOciCacheUserOutput) ToRedisClusterAttachOciCacheUserOutputWithContext(ctx context.Context) RedisClusterAttachOciCacheUserOutput {
	return o
}

// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
func (o RedisClusterAttachOciCacheUserOutput) OciCacheUsers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisClusterAttachOciCacheUser) pulumi.StringArrayOutput { return v.OciCacheUsers }).(pulumi.StringArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RedisClusterAttachOciCacheUserOutput) RedisClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterAttachOciCacheUser) pulumi.StringOutput { return v.RedisClusterId }).(pulumi.StringOutput)
}

type RedisClusterAttachOciCacheUserArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterAttachOciCacheUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisClusterAttachOciCacheUser)(nil)).Elem()
}

func (o RedisClusterAttachOciCacheUserArrayOutput) ToRedisClusterAttachOciCacheUserArrayOutput() RedisClusterAttachOciCacheUserArrayOutput {
	return o
}

func (o RedisClusterAttachOciCacheUserArrayOutput) ToRedisClusterAttachOciCacheUserArrayOutputWithContext(ctx context.Context) RedisClusterAttachOciCacheUserArrayOutput {
	return o
}

func (o RedisClusterAttachOciCacheUserArrayOutput) Index(i pulumi.IntInput) RedisClusterAttachOciCacheUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedisClusterAttachOciCacheUser {
		return vs[0].([]*RedisClusterAttachOciCacheUser)[vs[1].(int)]
	}).(RedisClusterAttachOciCacheUserOutput)
}

type RedisClusterAttachOciCacheUserMapOutput struct{ *pulumi.OutputState }

func (RedisClusterAttachOciCacheUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisClusterAttachOciCacheUser)(nil)).Elem()
}

func (o RedisClusterAttachOciCacheUserMapOutput) ToRedisClusterAttachOciCacheUserMapOutput() RedisClusterAttachOciCacheUserMapOutput {
	return o
}

func (o RedisClusterAttachOciCacheUserMapOutput) ToRedisClusterAttachOciCacheUserMapOutputWithContext(ctx context.Context) RedisClusterAttachOciCacheUserMapOutput {
	return o
}

func (o RedisClusterAttachOciCacheUserMapOutput) MapIndex(k pulumi.StringInput) RedisClusterAttachOciCacheUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedisClusterAttachOciCacheUser {
		return vs[0].(map[string]*RedisClusterAttachOciCacheUser)[vs[1].(string)]
	}).(RedisClusterAttachOciCacheUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterAttachOciCacheUserInput)(nil)).Elem(), &RedisClusterAttachOciCacheUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterAttachOciCacheUserArrayInput)(nil)).Elem(), RedisClusterAttachOciCacheUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterAttachOciCacheUserMapInput)(nil)).Elem(), RedisClusterAttachOciCacheUserMap{})
	pulumi.RegisterOutputType(RedisClusterAttachOciCacheUserOutput{})
	pulumi.RegisterOutputType(RedisClusterAttachOciCacheUserArrayOutput{})
	pulumi.RegisterOutputType(RedisClusterAttachOciCacheUserMapOutput{})
}
