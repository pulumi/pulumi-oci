// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Redis Cluster Detach Oci Cache User resource in Oracle Cloud Infrastructure Redis service.
//
// Detach existing Oracle Cloud Infrastructure cache users to a redis cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.NewRedisClusterDetachOciCacheUser(ctx, "test_redis_cluster_detach_oci_cache_user", &redis.RedisClusterDetachOciCacheUserArgs{
//				OciCacheUsers:  pulumi.Any(redisClusterDetachOciCacheUserOciCacheUsers),
//				RedisClusterId: pulumi.Any(testRedisCluster.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type RedisClusterDetachOciCacheUser struct {
	pulumi.CustomResourceState

	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers pulumi.StringArrayOutput `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringOutput `pulumi:"redisClusterId"`
}

// NewRedisClusterDetachOciCacheUser registers a new resource with the given unique name, arguments, and options.
func NewRedisClusterDetachOciCacheUser(ctx *pulumi.Context,
	name string, args *RedisClusterDetachOciCacheUserArgs, opts ...pulumi.ResourceOption) (*RedisClusterDetachOciCacheUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OciCacheUsers == nil {
		return nil, errors.New("invalid value for required argument 'OciCacheUsers'")
	}
	if args.RedisClusterId == nil {
		return nil, errors.New("invalid value for required argument 'RedisClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedisClusterDetachOciCacheUser
	err := ctx.RegisterResource("oci:Redis/redisClusterDetachOciCacheUser:RedisClusterDetachOciCacheUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisClusterDetachOciCacheUser gets an existing RedisClusterDetachOciCacheUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisClusterDetachOciCacheUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisClusterDetachOciCacheUserState, opts ...pulumi.ResourceOption) (*RedisClusterDetachOciCacheUser, error) {
	var resource RedisClusterDetachOciCacheUser
	err := ctx.ReadResource("oci:Redis/redisClusterDetachOciCacheUser:RedisClusterDetachOciCacheUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisClusterDetachOciCacheUser resources.
type redisClusterDetachOciCacheUserState struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers []string `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId *string `pulumi:"redisClusterId"`
}

type RedisClusterDetachOciCacheUserState struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringPtrInput
}

func (RedisClusterDetachOciCacheUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterDetachOciCacheUserState)(nil)).Elem()
}

type redisClusterDetachOciCacheUserArgs struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers []string `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId string `pulumi:"redisClusterId"`
}

// The set of arguments for constructing a RedisClusterDetachOciCacheUser resource.
type RedisClusterDetachOciCacheUserArgs struct {
	// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
	OciCacheUsers pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringInput
}

func (RedisClusterDetachOciCacheUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterDetachOciCacheUserArgs)(nil)).Elem()
}

type RedisClusterDetachOciCacheUserInput interface {
	pulumi.Input

	ToRedisClusterDetachOciCacheUserOutput() RedisClusterDetachOciCacheUserOutput
	ToRedisClusterDetachOciCacheUserOutputWithContext(ctx context.Context) RedisClusterDetachOciCacheUserOutput
}

func (*RedisClusterDetachOciCacheUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterDetachOciCacheUser)(nil)).Elem()
}

func (i *RedisClusterDetachOciCacheUser) ToRedisClusterDetachOciCacheUserOutput() RedisClusterDetachOciCacheUserOutput {
	return i.ToRedisClusterDetachOciCacheUserOutputWithContext(context.Background())
}

func (i *RedisClusterDetachOciCacheUser) ToRedisClusterDetachOciCacheUserOutputWithContext(ctx context.Context) RedisClusterDetachOciCacheUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterDetachOciCacheUserOutput)
}

// RedisClusterDetachOciCacheUserArrayInput is an input type that accepts RedisClusterDetachOciCacheUserArray and RedisClusterDetachOciCacheUserArrayOutput values.
// You can construct a concrete instance of `RedisClusterDetachOciCacheUserArrayInput` via:
//
//	RedisClusterDetachOciCacheUserArray{ RedisClusterDetachOciCacheUserArgs{...} }
type RedisClusterDetachOciCacheUserArrayInput interface {
	pulumi.Input

	ToRedisClusterDetachOciCacheUserArrayOutput() RedisClusterDetachOciCacheUserArrayOutput
	ToRedisClusterDetachOciCacheUserArrayOutputWithContext(context.Context) RedisClusterDetachOciCacheUserArrayOutput
}

type RedisClusterDetachOciCacheUserArray []RedisClusterDetachOciCacheUserInput

func (RedisClusterDetachOciCacheUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisClusterDetachOciCacheUser)(nil)).Elem()
}

func (i RedisClusterDetachOciCacheUserArray) ToRedisClusterDetachOciCacheUserArrayOutput() RedisClusterDetachOciCacheUserArrayOutput {
	return i.ToRedisClusterDetachOciCacheUserArrayOutputWithContext(context.Background())
}

func (i RedisClusterDetachOciCacheUserArray) ToRedisClusterDetachOciCacheUserArrayOutputWithContext(ctx context.Context) RedisClusterDetachOciCacheUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterDetachOciCacheUserArrayOutput)
}

// RedisClusterDetachOciCacheUserMapInput is an input type that accepts RedisClusterDetachOciCacheUserMap and RedisClusterDetachOciCacheUserMapOutput values.
// You can construct a concrete instance of `RedisClusterDetachOciCacheUserMapInput` via:
//
//	RedisClusterDetachOciCacheUserMap{ "key": RedisClusterDetachOciCacheUserArgs{...} }
type RedisClusterDetachOciCacheUserMapInput interface {
	pulumi.Input

	ToRedisClusterDetachOciCacheUserMapOutput() RedisClusterDetachOciCacheUserMapOutput
	ToRedisClusterDetachOciCacheUserMapOutputWithContext(context.Context) RedisClusterDetachOciCacheUserMapOutput
}

type RedisClusterDetachOciCacheUserMap map[string]RedisClusterDetachOciCacheUserInput

func (RedisClusterDetachOciCacheUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisClusterDetachOciCacheUser)(nil)).Elem()
}

func (i RedisClusterDetachOciCacheUserMap) ToRedisClusterDetachOciCacheUserMapOutput() RedisClusterDetachOciCacheUserMapOutput {
	return i.ToRedisClusterDetachOciCacheUserMapOutputWithContext(context.Background())
}

func (i RedisClusterDetachOciCacheUserMap) ToRedisClusterDetachOciCacheUserMapOutputWithContext(ctx context.Context) RedisClusterDetachOciCacheUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterDetachOciCacheUserMapOutput)
}

type RedisClusterDetachOciCacheUserOutput struct{ *pulumi.OutputState }

func (RedisClusterDetachOciCacheUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterDetachOciCacheUser)(nil)).Elem()
}

func (o RedisClusterDetachOciCacheUserOutput) ToRedisClusterDetachOciCacheUserOutput() RedisClusterDetachOciCacheUserOutput {
	return o
}

func (o RedisClusterDetachOciCacheUserOutput) ToRedisClusterDetachOciCacheUserOutputWithContext(ctx context.Context) RedisClusterDetachOciCacheUserOutput {
	return o
}

// List of Oracle Cloud Infrastructure cache user unique IDs (OCIDs).
func (o RedisClusterDetachOciCacheUserOutput) OciCacheUsers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisClusterDetachOciCacheUser) pulumi.StringArrayOutput { return v.OciCacheUsers }).(pulumi.StringArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RedisClusterDetachOciCacheUserOutput) RedisClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterDetachOciCacheUser) pulumi.StringOutput { return v.RedisClusterId }).(pulumi.StringOutput)
}

type RedisClusterDetachOciCacheUserArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterDetachOciCacheUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisClusterDetachOciCacheUser)(nil)).Elem()
}

func (o RedisClusterDetachOciCacheUserArrayOutput) ToRedisClusterDetachOciCacheUserArrayOutput() RedisClusterDetachOciCacheUserArrayOutput {
	return o
}

func (o RedisClusterDetachOciCacheUserArrayOutput) ToRedisClusterDetachOciCacheUserArrayOutputWithContext(ctx context.Context) RedisClusterDetachOciCacheUserArrayOutput {
	return o
}

func (o RedisClusterDetachOciCacheUserArrayOutput) Index(i pulumi.IntInput) RedisClusterDetachOciCacheUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedisClusterDetachOciCacheUser {
		return vs[0].([]*RedisClusterDetachOciCacheUser)[vs[1].(int)]
	}).(RedisClusterDetachOciCacheUserOutput)
}

type RedisClusterDetachOciCacheUserMapOutput struct{ *pulumi.OutputState }

func (RedisClusterDetachOciCacheUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisClusterDetachOciCacheUser)(nil)).Elem()
}

func (o RedisClusterDetachOciCacheUserMapOutput) ToRedisClusterDetachOciCacheUserMapOutput() RedisClusterDetachOciCacheUserMapOutput {
	return o
}

func (o RedisClusterDetachOciCacheUserMapOutput) ToRedisClusterDetachOciCacheUserMapOutputWithContext(ctx context.Context) RedisClusterDetachOciCacheUserMapOutput {
	return o
}

func (o RedisClusterDetachOciCacheUserMapOutput) MapIndex(k pulumi.StringInput) RedisClusterDetachOciCacheUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedisClusterDetachOciCacheUser {
		return vs[0].(map[string]*RedisClusterDetachOciCacheUser)[vs[1].(string)]
	}).(RedisClusterDetachOciCacheUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterDetachOciCacheUserInput)(nil)).Elem(), &RedisClusterDetachOciCacheUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterDetachOciCacheUserArrayInput)(nil)).Elem(), RedisClusterDetachOciCacheUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterDetachOciCacheUserMapInput)(nil)).Elem(), RedisClusterDetachOciCacheUserMap{})
	pulumi.RegisterOutputType(RedisClusterDetachOciCacheUserOutput{})
	pulumi.RegisterOutputType(RedisClusterDetachOciCacheUserArrayOutput{})
	pulumi.RegisterOutputType(RedisClusterDetachOciCacheUserMapOutput{})
}
