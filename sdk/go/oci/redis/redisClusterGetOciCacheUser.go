// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Redis Cluster Get Oci Cache User resource in Oracle Cloud Infrastructure Redis service.
//
// Gets a list of associated Oracle Cloud Infrastructure cache users for a redis cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.NewRedisClusterGetOciCacheUser(ctx, "test_redis_cluster_get_oci_cache_user", &redis.RedisClusterGetOciCacheUserArgs{
//				RedisClusterId: pulumi.Any(testRedisCluster.Id),
//				CompartmentId:  pulumi.Any(compartmentId),
//				DisplayName:    pulumi.Any(redisClusterGetOciCacheUserDisplayName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type RedisClusterGetOciCacheUser struct {
	pulumi.CustomResourceState

	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName   pulumi.StringOutput                                `pulumi:"displayName"`
	OciCacheUsers RedisClusterGetOciCacheUserOciCacheUserArrayOutput `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringOutput `pulumi:"redisClusterId"`
}

// NewRedisClusterGetOciCacheUser registers a new resource with the given unique name, arguments, and options.
func NewRedisClusterGetOciCacheUser(ctx *pulumi.Context,
	name string, args *RedisClusterGetOciCacheUserArgs, opts ...pulumi.ResourceOption) (*RedisClusterGetOciCacheUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RedisClusterId == nil {
		return nil, errors.New("invalid value for required argument 'RedisClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedisClusterGetOciCacheUser
	err := ctx.RegisterResource("oci:Redis/redisClusterGetOciCacheUser:RedisClusterGetOciCacheUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisClusterGetOciCacheUser gets an existing RedisClusterGetOciCacheUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisClusterGetOciCacheUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisClusterGetOciCacheUserState, opts ...pulumi.ResourceOption) (*RedisClusterGetOciCacheUser, error) {
	var resource RedisClusterGetOciCacheUser
	err := ctx.ReadResource("oci:Redis/redisClusterGetOciCacheUser:RedisClusterGetOciCacheUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisClusterGetOciCacheUser resources.
type redisClusterGetOciCacheUserState struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName   *string                                   `pulumi:"displayName"`
	OciCacheUsers []RedisClusterGetOciCacheUserOciCacheUser `pulumi:"ociCacheUsers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId *string `pulumi:"redisClusterId"`
}

type RedisClusterGetOciCacheUserState struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput
	// A filter to return only resources that match the entire display name given.
	DisplayName   pulumi.StringPtrInput
	OciCacheUsers RedisClusterGetOciCacheUserOciCacheUserArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringPtrInput
}

func (RedisClusterGetOciCacheUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterGetOciCacheUserState)(nil)).Elem()
}

type redisClusterGetOciCacheUserArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string `pulumi:"displayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId string `pulumi:"redisClusterId"`
}

// The set of arguments for constructing a RedisClusterGetOciCacheUser resource.
type RedisClusterGetOciCacheUserArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RedisClusterId pulumi.StringInput
}

func (RedisClusterGetOciCacheUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterGetOciCacheUserArgs)(nil)).Elem()
}

type RedisClusterGetOciCacheUserInput interface {
	pulumi.Input

	ToRedisClusterGetOciCacheUserOutput() RedisClusterGetOciCacheUserOutput
	ToRedisClusterGetOciCacheUserOutputWithContext(ctx context.Context) RedisClusterGetOciCacheUserOutput
}

func (*RedisClusterGetOciCacheUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterGetOciCacheUser)(nil)).Elem()
}

func (i *RedisClusterGetOciCacheUser) ToRedisClusterGetOciCacheUserOutput() RedisClusterGetOciCacheUserOutput {
	return i.ToRedisClusterGetOciCacheUserOutputWithContext(context.Background())
}

func (i *RedisClusterGetOciCacheUser) ToRedisClusterGetOciCacheUserOutputWithContext(ctx context.Context) RedisClusterGetOciCacheUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterGetOciCacheUserOutput)
}

// RedisClusterGetOciCacheUserArrayInput is an input type that accepts RedisClusterGetOciCacheUserArray and RedisClusterGetOciCacheUserArrayOutput values.
// You can construct a concrete instance of `RedisClusterGetOciCacheUserArrayInput` via:
//
//	RedisClusterGetOciCacheUserArray{ RedisClusterGetOciCacheUserArgs{...} }
type RedisClusterGetOciCacheUserArrayInput interface {
	pulumi.Input

	ToRedisClusterGetOciCacheUserArrayOutput() RedisClusterGetOciCacheUserArrayOutput
	ToRedisClusterGetOciCacheUserArrayOutputWithContext(context.Context) RedisClusterGetOciCacheUserArrayOutput
}

type RedisClusterGetOciCacheUserArray []RedisClusterGetOciCacheUserInput

func (RedisClusterGetOciCacheUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisClusterGetOciCacheUser)(nil)).Elem()
}

func (i RedisClusterGetOciCacheUserArray) ToRedisClusterGetOciCacheUserArrayOutput() RedisClusterGetOciCacheUserArrayOutput {
	return i.ToRedisClusterGetOciCacheUserArrayOutputWithContext(context.Background())
}

func (i RedisClusterGetOciCacheUserArray) ToRedisClusterGetOciCacheUserArrayOutputWithContext(ctx context.Context) RedisClusterGetOciCacheUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterGetOciCacheUserArrayOutput)
}

// RedisClusterGetOciCacheUserMapInput is an input type that accepts RedisClusterGetOciCacheUserMap and RedisClusterGetOciCacheUserMapOutput values.
// You can construct a concrete instance of `RedisClusterGetOciCacheUserMapInput` via:
//
//	RedisClusterGetOciCacheUserMap{ "key": RedisClusterGetOciCacheUserArgs{...} }
type RedisClusterGetOciCacheUserMapInput interface {
	pulumi.Input

	ToRedisClusterGetOciCacheUserMapOutput() RedisClusterGetOciCacheUserMapOutput
	ToRedisClusterGetOciCacheUserMapOutputWithContext(context.Context) RedisClusterGetOciCacheUserMapOutput
}

type RedisClusterGetOciCacheUserMap map[string]RedisClusterGetOciCacheUserInput

func (RedisClusterGetOciCacheUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisClusterGetOciCacheUser)(nil)).Elem()
}

func (i RedisClusterGetOciCacheUserMap) ToRedisClusterGetOciCacheUserMapOutput() RedisClusterGetOciCacheUserMapOutput {
	return i.ToRedisClusterGetOciCacheUserMapOutputWithContext(context.Background())
}

func (i RedisClusterGetOciCacheUserMap) ToRedisClusterGetOciCacheUserMapOutputWithContext(ctx context.Context) RedisClusterGetOciCacheUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterGetOciCacheUserMapOutput)
}

type RedisClusterGetOciCacheUserOutput struct{ *pulumi.OutputState }

func (RedisClusterGetOciCacheUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisClusterGetOciCacheUser)(nil)).Elem()
}

func (o RedisClusterGetOciCacheUserOutput) ToRedisClusterGetOciCacheUserOutput() RedisClusterGetOciCacheUserOutput {
	return o
}

func (o RedisClusterGetOciCacheUserOutput) ToRedisClusterGetOciCacheUserOutputWithContext(ctx context.Context) RedisClusterGetOciCacheUserOutput {
	return o
}

// The ID of the compartment in which to list resources.
func (o RedisClusterGetOciCacheUserOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterGetOciCacheUser) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// A filter to return only resources that match the entire display name given.
func (o RedisClusterGetOciCacheUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterGetOciCacheUser) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o RedisClusterGetOciCacheUserOutput) OciCacheUsers() RedisClusterGetOciCacheUserOciCacheUserArrayOutput {
	return o.ApplyT(func(v *RedisClusterGetOciCacheUser) RedisClusterGetOciCacheUserOciCacheUserArrayOutput {
		return v.OciCacheUsers
	}).(RedisClusterGetOciCacheUserOciCacheUserArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RedisClusterGetOciCacheUserOutput) RedisClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisClusterGetOciCacheUser) pulumi.StringOutput { return v.RedisClusterId }).(pulumi.StringOutput)
}

type RedisClusterGetOciCacheUserArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterGetOciCacheUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisClusterGetOciCacheUser)(nil)).Elem()
}

func (o RedisClusterGetOciCacheUserArrayOutput) ToRedisClusterGetOciCacheUserArrayOutput() RedisClusterGetOciCacheUserArrayOutput {
	return o
}

func (o RedisClusterGetOciCacheUserArrayOutput) ToRedisClusterGetOciCacheUserArrayOutputWithContext(ctx context.Context) RedisClusterGetOciCacheUserArrayOutput {
	return o
}

func (o RedisClusterGetOciCacheUserArrayOutput) Index(i pulumi.IntInput) RedisClusterGetOciCacheUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedisClusterGetOciCacheUser {
		return vs[0].([]*RedisClusterGetOciCacheUser)[vs[1].(int)]
	}).(RedisClusterGetOciCacheUserOutput)
}

type RedisClusterGetOciCacheUserMapOutput struct{ *pulumi.OutputState }

func (RedisClusterGetOciCacheUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisClusterGetOciCacheUser)(nil)).Elem()
}

func (o RedisClusterGetOciCacheUserMapOutput) ToRedisClusterGetOciCacheUserMapOutput() RedisClusterGetOciCacheUserMapOutput {
	return o
}

func (o RedisClusterGetOciCacheUserMapOutput) ToRedisClusterGetOciCacheUserMapOutputWithContext(ctx context.Context) RedisClusterGetOciCacheUserMapOutput {
	return o
}

func (o RedisClusterGetOciCacheUserMapOutput) MapIndex(k pulumi.StringInput) RedisClusterGetOciCacheUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedisClusterGetOciCacheUser {
		return vs[0].(map[string]*RedisClusterGetOciCacheUser)[vs[1].(string)]
	}).(RedisClusterGetOciCacheUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterGetOciCacheUserInput)(nil)).Elem(), &RedisClusterGetOciCacheUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterGetOciCacheUserArrayInput)(nil)).Elem(), RedisClusterGetOciCacheUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterGetOciCacheUserMapInput)(nil)).Elem(), RedisClusterGetOciCacheUserMap{})
	pulumi.RegisterOutputType(RedisClusterGetOciCacheUserOutput{})
	pulumi.RegisterOutputType(RedisClusterGetOciCacheUserArrayOutput{})
	pulumi.RegisterOutputType(RedisClusterGetOciCacheUserMapOutput{})
}
