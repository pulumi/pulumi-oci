// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Connector Plugins in Oracle Cloud Infrastructure Service Connector Hub service.
//
// Lists connector plugins according to the specified filter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/sch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sch.GetConnectorPlugins(ctx, &sch.GetConnectorPluginsArgs{
//				DisplayName: pulumi.StringRef(connectorPluginDisplayName),
//				Name:        pulumi.StringRef(connectorPluginName),
//				State:       pulumi.StringRef(connectorPluginState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetConnectorPlugins(ctx *pulumi.Context, args *GetConnectorPluginsArgs, opts ...pulumi.InvokeOption) (*GetConnectorPluginsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetConnectorPluginsResult
	err := ctx.Invoke("oci:Sch/getConnectorPlugins:getConnectorPlugins", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectorPlugins.
type GetConnectorPluginsArgs struct {
	// A filter to return only resources that match the given display name exactly.  Example: `exampleServiceConnector`
	DisplayName *string                     `pulumi:"displayName"`
	Filters     []GetConnectorPluginsFilter `pulumi:"filters"`
	// A filter to return only resources that match the given connector plugin name ignoring case.  Example: `QueueSource`
	Name *string `pulumi:"name"`
	// A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
	State *string `pulumi:"state"`
}

// A collection of values returned by getConnectorPlugins.
type GetConnectorPluginsResult struct {
	// The list of connector_plugin_collection.
	ConnectorPluginCollections []GetConnectorPluginsConnectorPluginCollection `pulumi:"connectorPluginCollections"`
	// A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.
	DisplayName *string                     `pulumi:"displayName"`
	Filters     []GetConnectorPluginsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The service to be called by the connector plugin. Example: `QueueSource`
	Name *string `pulumi:"name"`
	// The current state of the service connector.
	State *string `pulumi:"state"`
}

func GetConnectorPluginsOutput(ctx *pulumi.Context, args GetConnectorPluginsOutputArgs, opts ...pulumi.InvokeOption) GetConnectorPluginsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetConnectorPluginsResultOutput, error) {
			args := v.(GetConnectorPluginsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Sch/getConnectorPlugins:getConnectorPlugins", args, GetConnectorPluginsResultOutput{}, options).(GetConnectorPluginsResultOutput), nil
		}).(GetConnectorPluginsResultOutput)
}

// A collection of arguments for invoking getConnectorPlugins.
type GetConnectorPluginsOutputArgs struct {
	// A filter to return only resources that match the given display name exactly.  Example: `exampleServiceConnector`
	DisplayName pulumi.StringPtrInput               `pulumi:"displayName"`
	Filters     GetConnectorPluginsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given connector plugin name ignoring case.  Example: `QueueSource`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to return only resources that match the given lifecycle state.  Example: `ACTIVE`
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetConnectorPluginsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectorPluginsArgs)(nil)).Elem()
}

// A collection of values returned by getConnectorPlugins.
type GetConnectorPluginsResultOutput struct{ *pulumi.OutputState }

func (GetConnectorPluginsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectorPluginsResult)(nil)).Elem()
}

func (o GetConnectorPluginsResultOutput) ToGetConnectorPluginsResultOutput() GetConnectorPluginsResultOutput {
	return o
}

func (o GetConnectorPluginsResultOutput) ToGetConnectorPluginsResultOutputWithContext(ctx context.Context) GetConnectorPluginsResultOutput {
	return o
}

// The list of connector_plugin_collection.
func (o GetConnectorPluginsResultOutput) ConnectorPluginCollections() GetConnectorPluginsConnectorPluginCollectionArrayOutput {
	return o.ApplyT(func(v GetConnectorPluginsResult) []GetConnectorPluginsConnectorPluginCollection {
		return v.ConnectorPluginCollections
	}).(GetConnectorPluginsConnectorPluginCollectionArrayOutput)
}

// A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information.
func (o GetConnectorPluginsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectorPluginsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetConnectorPluginsResultOutput) Filters() GetConnectorPluginsFilterArrayOutput {
	return o.ApplyT(func(v GetConnectorPluginsResult) []GetConnectorPluginsFilter { return v.Filters }).(GetConnectorPluginsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetConnectorPluginsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectorPluginsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The service to be called by the connector plugin. Example: `QueueSource`
func (o GetConnectorPluginsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectorPluginsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The current state of the service connector.
func (o GetConnectorPluginsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectorPluginsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetConnectorPluginsResultOutput{})
}
