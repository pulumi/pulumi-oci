// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityattribute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Security Attribute Namespaces in Oracle Cloud Infrastructure Security Attribute service.
//
// Lists the security attribute namespaces in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/securityattribute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := securityattribute.GetSecurityAttributeNamespaces(ctx, &securityattribute.GetSecurityAttributeNamespacesArgs{
//				CompartmentId:          pulumi.StringRef(compartmentId),
//				CompartmentIdInSubtree: pulumi.BoolRef(securityAttributeNamespaceCompartmentIdInSubtree),
//				Name:                   pulumi.StringRef(securityAttributeNamespaceName),
//				State:                  pulumi.StringRef(securityAttributeNamespaceState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSecurityAttributeNamespaces(ctx *pulumi.Context, args *GetSecurityAttributeNamespacesArgs, opts ...pulumi.InvokeOption) (*GetSecurityAttributeNamespacesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityAttributeNamespacesResult
	err := ctx.Invoke("oci:SecurityAttribute/getSecurityAttributeNamespaces:getSecurityAttributeNamespaces", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityAttributeNamespaces.
type GetSecurityAttributeNamespacesArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// An optional boolean parameter indicating whether to retrieve all security attribute namespaces in subcompartments. If this parameter is not specified, only the namespaces defined in the specified compartment are retrieved.
	CompartmentIdInSubtree *bool                                  `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSecurityAttributeNamespacesFilter `pulumi:"filters"`
	// A filter to return only resources that match the entire display name given.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getSecurityAttributeNamespaces.
type GetSecurityAttributeNamespacesResult struct {
	// The OCID of the compartment that contains the security attribute namespace.
	CompartmentId          *string                                `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                                  `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSecurityAttributeNamespacesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the security attribute namespace. It must be unique across all security attribute namespaces in the tenancy and cannot be changed.
	Name *string `pulumi:"name"`
	// The list of security_attribute_namespaces.
	SecurityAttributeNamespaces []GetSecurityAttributeNamespacesSecurityAttributeNamespace `pulumi:"securityAttributeNamespaces"`
	// The security attribute namespace's current state. After creating a security attribute namespace, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute namespace, make sure its `lifecycleState` is INACTIVE.
	State *string `pulumi:"state"`
}

func GetSecurityAttributeNamespacesOutput(ctx *pulumi.Context, args GetSecurityAttributeNamespacesOutputArgs, opts ...pulumi.InvokeOption) GetSecurityAttributeNamespacesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSecurityAttributeNamespacesResultOutput, error) {
			args := v.(GetSecurityAttributeNamespacesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:SecurityAttribute/getSecurityAttributeNamespaces:getSecurityAttributeNamespaces", args, GetSecurityAttributeNamespacesResultOutput{}, options).(GetSecurityAttributeNamespacesResultOutput), nil
		}).(GetSecurityAttributeNamespacesResultOutput)
}

// A collection of arguments for invoking getSecurityAttributeNamespaces.
type GetSecurityAttributeNamespacesOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// An optional boolean parameter indicating whether to retrieve all security attribute namespaces in subcompartments. If this parameter is not specified, only the namespaces defined in the specified compartment are retrieved.
	CompartmentIdInSubtree pulumi.BoolPtrInput                            `pulumi:"compartmentIdInSubtree"`
	Filters                GetSecurityAttributeNamespacesFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the entire display name given.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetSecurityAttributeNamespacesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAttributeNamespacesArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityAttributeNamespaces.
type GetSecurityAttributeNamespacesResultOutput struct{ *pulumi.OutputState }

func (GetSecurityAttributeNamespacesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAttributeNamespacesResult)(nil)).Elem()
}

func (o GetSecurityAttributeNamespacesResultOutput) ToGetSecurityAttributeNamespacesResultOutput() GetSecurityAttributeNamespacesResultOutput {
	return o
}

func (o GetSecurityAttributeNamespacesResultOutput) ToGetSecurityAttributeNamespacesResultOutputWithContext(ctx context.Context) GetSecurityAttributeNamespacesResultOutput {
	return o
}

// The OCID of the compartment that contains the security attribute namespace.
func (o GetSecurityAttributeNamespacesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAttributeNamespacesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetSecurityAttributeNamespacesResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityAttributeNamespacesResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetSecurityAttributeNamespacesResultOutput) Filters() GetSecurityAttributeNamespacesFilterArrayOutput {
	return o.ApplyT(func(v GetSecurityAttributeNamespacesResult) []GetSecurityAttributeNamespacesFilter { return v.Filters }).(GetSecurityAttributeNamespacesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecurityAttributeNamespacesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityAttributeNamespacesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the security attribute namespace. It must be unique across all security attribute namespaces in the tenancy and cannot be changed.
func (o GetSecurityAttributeNamespacesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAttributeNamespacesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of security_attribute_namespaces.
func (o GetSecurityAttributeNamespacesResultOutput) SecurityAttributeNamespaces() GetSecurityAttributeNamespacesSecurityAttributeNamespaceArrayOutput {
	return o.ApplyT(func(v GetSecurityAttributeNamespacesResult) []GetSecurityAttributeNamespacesSecurityAttributeNamespace {
		return v.SecurityAttributeNamespaces
	}).(GetSecurityAttributeNamespacesSecurityAttributeNamespaceArrayOutput)
}

// The security attribute namespace's current state. After creating a security attribute namespace, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute namespace, make sure its `lifecycleState` is INACTIVE.
func (o GetSecurityAttributeNamespacesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAttributeNamespacesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecurityAttributeNamespacesResultOutput{})
}
