// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityattribute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Security Attributes in Oracle Cloud Infrastructure Security Attribute service.
//
// Lists the security attributes in the specified namespace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/SecurityAttribute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := SecurityAttribute.GetSecurityAttributes(ctx, &securityattribute.GetSecurityAttributesArgs{
//				SecurityAttributeNamespaceId: testSecurityAttributeNamespace.Id,
//				State:                        pulumi.StringRef(securityAttributeState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSecurityAttributes(ctx *pulumi.Context, args *GetSecurityAttributesArgs, opts ...pulumi.InvokeOption) (*GetSecurityAttributesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityAttributesResult
	err := ctx.Invoke("oci:SecurityAttribute/getSecurityAttributes:getSecurityAttributes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityAttributes.
type GetSecurityAttributesArgs struct {
	Filters []GetSecurityAttributesFilter `pulumi:"filters"`
	// The OCID of the security attribute namespace.
	SecurityAttributeNamespaceId string `pulumi:"securityAttributeNamespaceId"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getSecurityAttributes.
type GetSecurityAttributesResult struct {
	Filters []GetSecurityAttributesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The OCID of the security attribute namespace that contains the security attribute definition.
	SecurityAttributeNamespaceId string `pulumi:"securityAttributeNamespaceId"`
	// The list of security_attributes.
	SecurityAttributes []GetSecurityAttributesSecurityAttribute `pulumi:"securityAttributes"`
	// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
	State *string `pulumi:"state"`
}

func GetSecurityAttributesOutput(ctx *pulumi.Context, args GetSecurityAttributesOutputArgs, opts ...pulumi.InvokeOption) GetSecurityAttributesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSecurityAttributesResultOutput, error) {
			args := v.(GetSecurityAttributesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetSecurityAttributesResult
			secret, err := ctx.InvokePackageRaw("oci:SecurityAttribute/getSecurityAttributes:getSecurityAttributes", args, &rv, "", opts...)
			if err != nil {
				return GetSecurityAttributesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetSecurityAttributesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetSecurityAttributesResultOutput), nil
			}
			return output, nil
		}).(GetSecurityAttributesResultOutput)
}

// A collection of arguments for invoking getSecurityAttributes.
type GetSecurityAttributesOutputArgs struct {
	Filters GetSecurityAttributesFilterArrayInput `pulumi:"filters"`
	// The OCID of the security attribute namespace.
	SecurityAttributeNamespaceId pulumi.StringInput `pulumi:"securityAttributeNamespaceId"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetSecurityAttributesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAttributesArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityAttributes.
type GetSecurityAttributesResultOutput struct{ *pulumi.OutputState }

func (GetSecurityAttributesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAttributesResult)(nil)).Elem()
}

func (o GetSecurityAttributesResultOutput) ToGetSecurityAttributesResultOutput() GetSecurityAttributesResultOutput {
	return o
}

func (o GetSecurityAttributesResultOutput) ToGetSecurityAttributesResultOutputWithContext(ctx context.Context) GetSecurityAttributesResultOutput {
	return o
}

func (o GetSecurityAttributesResultOutput) Filters() GetSecurityAttributesFilterArrayOutput {
	return o.ApplyT(func(v GetSecurityAttributesResult) []GetSecurityAttributesFilter { return v.Filters }).(GetSecurityAttributesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecurityAttributesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityAttributesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The OCID of the security attribute namespace that contains the security attribute definition.
func (o GetSecurityAttributesResultOutput) SecurityAttributeNamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityAttributesResult) string { return v.SecurityAttributeNamespaceId }).(pulumi.StringOutput)
}

// The list of security_attributes.
func (o GetSecurityAttributesResultOutput) SecurityAttributes() GetSecurityAttributesSecurityAttributeArrayOutput {
	return o.ApplyT(func(v GetSecurityAttributesResult) []GetSecurityAttributesSecurityAttribute {
		return v.SecurityAttributes
	}).(GetSecurityAttributesSecurityAttributeArrayOutput)
}

// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
func (o GetSecurityAttributesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAttributesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecurityAttributesResultOutput{})
}
