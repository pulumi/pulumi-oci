// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityattribute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Security Attribute resource in Oracle Cloud Infrastructure Security Attribute service.
//
// Creates a new security attribute in the specified security attribute namespace.
//
// The security attribute requires either the OCID or the name of the security attribute namespace that will contain this
// security attribute.
//
// You must specify a *name* for the attribute, which must be unique across all attributes in the security attribute namespace
// and cannot be changed. The only valid characters for security attribute names are:Â 0-9, A-Z, a-z, -, _ characters.
// Names are case insensitive. That means, for example, "mySecurityAttribute" and "mysecurityattribute" are not allowed in the same namespace.
// If you specify a name that's already in use in the security attribute namespace, a 409 error is returned.
//
// The security attribute must have a *description*. It does not have to be unique, and you can change it with
// [UpdateSecurityAttribute](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/Tag/UpdateSecurityAttribute).
//
// When a validator is specified, The security attribute must have a value type. Security attribute can use either a static value or a list of possible values. Static values are entered by a user when applying the security attribute to a resource. Lists are created by the user and the user must apply a value from the list. Lists are validated.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/SecurityAttribute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := SecurityAttribute.NewSecurityAttribute(ctx, "test_security_attribute", &SecurityAttribute.SecurityAttributeArgs{
//				Description:                  pulumi.Any(securityAttributeDescription),
//				Name:                         pulumi.Any(securityAttributeName),
//				SecurityAttributeNamespaceId: pulumi.Any(testSecurityAttributeNamespace.Id),
//				Validator: &securityattribute.SecurityAttributeValidatorArgs{
//					ValidatorType: pulumi.Any(securityAttributeValidatorValidatorType),
//					Values:        pulumi.Any(securityAttributeValidatorValues),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SecurityAttributes can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:SecurityAttribute/securityAttribute:SecurityAttribute test_security_attribute "securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}"
// ```
type SecurityAttribute struct {
	pulumi.CustomResourceState

	// The OCID of the compartment that contains the security attribute definition.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The description you assign to the security attribute during creation.
	Description pulumi.StringOutput `pulumi:"description"`
	// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
	IsRetired pulumi.BoolOutput `pulumi:"isRetired"`
	// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The OCID of the security attribute namespace.
	SecurityAttributeNamespaceId pulumi.StringOutput `pulumi:"securityAttributeNamespaceId"`
	// The name of the security attribute namespace that contains the security attribute.
	SecurityAttributeNamespaceName pulumi.StringOutput `pulumi:"securityAttributeNamespaceName"`
	// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The data type of the security attribute.
	Type pulumi.StringOutput `pulumi:"type"`
	// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
	//
	// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
	//
	// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
	Validator SecurityAttributeValidatorPtrOutput `pulumi:"validator"`
}

// NewSecurityAttribute registers a new resource with the given unique name, arguments, and options.
func NewSecurityAttribute(ctx *pulumi.Context,
	name string, args *SecurityAttributeArgs, opts ...pulumi.ResourceOption) (*SecurityAttribute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.SecurityAttributeNamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityAttributeNamespaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityAttribute
	err := ctx.RegisterResource("oci:SecurityAttribute/securityAttribute:SecurityAttribute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityAttribute gets an existing SecurityAttribute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityAttribute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityAttributeState, opts ...pulumi.ResourceOption) (*SecurityAttribute, error) {
	var resource SecurityAttribute
	err := ctx.ReadResource("oci:SecurityAttribute/securityAttribute:SecurityAttribute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityAttribute resources.
type securityAttributeState struct {
	// The OCID of the compartment that contains the security attribute definition.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The description you assign to the security attribute during creation.
	Description *string `pulumi:"description"`
	// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
	IsRetired *bool `pulumi:"isRetired"`
	// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
	Name *string `pulumi:"name"`
	// The OCID of the security attribute namespace.
	SecurityAttributeNamespaceId *string `pulumi:"securityAttributeNamespaceId"`
	// The name of the security attribute namespace that contains the security attribute.
	SecurityAttributeNamespaceName *string `pulumi:"securityAttributeNamespaceName"`
	// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
	State *string `pulumi:"state"`
	// Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The data type of the security attribute.
	Type *string `pulumi:"type"`
	// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
	//
	// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
	//
	// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
	Validator *SecurityAttributeValidator `pulumi:"validator"`
}

type SecurityAttributeState struct {
	// The OCID of the compartment that contains the security attribute definition.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The description you assign to the security attribute during creation.
	Description pulumi.StringPtrInput
	// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
	IsRetired pulumi.BoolPtrInput
	// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
	Name pulumi.StringPtrInput
	// The OCID of the security attribute namespace.
	SecurityAttributeNamespaceId pulumi.StringPtrInput
	// The name of the security attribute namespace that contains the security attribute.
	SecurityAttributeNamespaceName pulumi.StringPtrInput
	// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
	State pulumi.StringPtrInput
	// Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The data type of the security attribute.
	Type pulumi.StringPtrInput
	// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
	//
	// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
	//
	// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
	Validator SecurityAttributeValidatorPtrInput
}

func (SecurityAttributeState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityAttributeState)(nil)).Elem()
}

type securityAttributeArgs struct {
	// (Updatable) The description you assign to the security attribute during creation.
	Description string `pulumi:"description"`
	// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
	IsRetired *bool `pulumi:"isRetired"`
	// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
	Name *string `pulumi:"name"`
	// The OCID of the security attribute namespace.
	SecurityAttributeNamespaceId string `pulumi:"securityAttributeNamespaceId"`
	// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
	//
	// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
	//
	// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
	Validator *SecurityAttributeValidator `pulumi:"validator"`
}

// The set of arguments for constructing a SecurityAttribute resource.
type SecurityAttributeArgs struct {
	// (Updatable) The description you assign to the security attribute during creation.
	Description pulumi.StringInput
	// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
	IsRetired pulumi.BoolPtrInput
	// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
	Name pulumi.StringPtrInput
	// The OCID of the security attribute namespace.
	SecurityAttributeNamespaceId pulumi.StringInput
	// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
	//
	// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
	//
	// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
	Validator SecurityAttributeValidatorPtrInput
}

func (SecurityAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityAttributeArgs)(nil)).Elem()
}

type SecurityAttributeInput interface {
	pulumi.Input

	ToSecurityAttributeOutput() SecurityAttributeOutput
	ToSecurityAttributeOutputWithContext(ctx context.Context) SecurityAttributeOutput
}

func (*SecurityAttribute) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityAttribute)(nil)).Elem()
}

func (i *SecurityAttribute) ToSecurityAttributeOutput() SecurityAttributeOutput {
	return i.ToSecurityAttributeOutputWithContext(context.Background())
}

func (i *SecurityAttribute) ToSecurityAttributeOutputWithContext(ctx context.Context) SecurityAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityAttributeOutput)
}

// SecurityAttributeArrayInput is an input type that accepts SecurityAttributeArray and SecurityAttributeArrayOutput values.
// You can construct a concrete instance of `SecurityAttributeArrayInput` via:
//
//	SecurityAttributeArray{ SecurityAttributeArgs{...} }
type SecurityAttributeArrayInput interface {
	pulumi.Input

	ToSecurityAttributeArrayOutput() SecurityAttributeArrayOutput
	ToSecurityAttributeArrayOutputWithContext(context.Context) SecurityAttributeArrayOutput
}

type SecurityAttributeArray []SecurityAttributeInput

func (SecurityAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityAttribute)(nil)).Elem()
}

func (i SecurityAttributeArray) ToSecurityAttributeArrayOutput() SecurityAttributeArrayOutput {
	return i.ToSecurityAttributeArrayOutputWithContext(context.Background())
}

func (i SecurityAttributeArray) ToSecurityAttributeArrayOutputWithContext(ctx context.Context) SecurityAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityAttributeArrayOutput)
}

// SecurityAttributeMapInput is an input type that accepts SecurityAttributeMap and SecurityAttributeMapOutput values.
// You can construct a concrete instance of `SecurityAttributeMapInput` via:
//
//	SecurityAttributeMap{ "key": SecurityAttributeArgs{...} }
type SecurityAttributeMapInput interface {
	pulumi.Input

	ToSecurityAttributeMapOutput() SecurityAttributeMapOutput
	ToSecurityAttributeMapOutputWithContext(context.Context) SecurityAttributeMapOutput
}

type SecurityAttributeMap map[string]SecurityAttributeInput

func (SecurityAttributeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityAttribute)(nil)).Elem()
}

func (i SecurityAttributeMap) ToSecurityAttributeMapOutput() SecurityAttributeMapOutput {
	return i.ToSecurityAttributeMapOutputWithContext(context.Background())
}

func (i SecurityAttributeMap) ToSecurityAttributeMapOutputWithContext(ctx context.Context) SecurityAttributeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityAttributeMapOutput)
}

type SecurityAttributeOutput struct{ *pulumi.OutputState }

func (SecurityAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityAttribute)(nil)).Elem()
}

func (o SecurityAttributeOutput) ToSecurityAttributeOutput() SecurityAttributeOutput {
	return o
}

func (o SecurityAttributeOutput) ToSecurityAttributeOutputWithContext(ctx context.Context) SecurityAttributeOutput {
	return o
}

// The OCID of the compartment that contains the security attribute definition.
func (o SecurityAttributeOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The description you assign to the security attribute during creation.
func (o SecurityAttributeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
func (o SecurityAttributeOutput) IsRetired() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.BoolOutput { return v.IsRetired }).(pulumi.BoolOutput)
}

// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
func (o SecurityAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The OCID of the security attribute namespace.
func (o SecurityAttributeOutput) SecurityAttributeNamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.SecurityAttributeNamespaceId }).(pulumi.StringOutput)
}

// The name of the security attribute namespace that contains the security attribute.
func (o SecurityAttributeOutput) SecurityAttributeNamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.SecurityAttributeNamespaceName }).(pulumi.StringOutput)
}

// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
func (o SecurityAttributeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o SecurityAttributeOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The data type of the security attribute.
func (o SecurityAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityAttribute) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
//
// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
//
// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
func (o SecurityAttributeOutput) Validator() SecurityAttributeValidatorPtrOutput {
	return o.ApplyT(func(v *SecurityAttribute) SecurityAttributeValidatorPtrOutput { return v.Validator }).(SecurityAttributeValidatorPtrOutput)
}

type SecurityAttributeArrayOutput struct{ *pulumi.OutputState }

func (SecurityAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityAttribute)(nil)).Elem()
}

func (o SecurityAttributeArrayOutput) ToSecurityAttributeArrayOutput() SecurityAttributeArrayOutput {
	return o
}

func (o SecurityAttributeArrayOutput) ToSecurityAttributeArrayOutputWithContext(ctx context.Context) SecurityAttributeArrayOutput {
	return o
}

func (o SecurityAttributeArrayOutput) Index(i pulumi.IntInput) SecurityAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityAttribute {
		return vs[0].([]*SecurityAttribute)[vs[1].(int)]
	}).(SecurityAttributeOutput)
}

type SecurityAttributeMapOutput struct{ *pulumi.OutputState }

func (SecurityAttributeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityAttribute)(nil)).Elem()
}

func (o SecurityAttributeMapOutput) ToSecurityAttributeMapOutput() SecurityAttributeMapOutput {
	return o
}

func (o SecurityAttributeMapOutput) ToSecurityAttributeMapOutputWithContext(ctx context.Context) SecurityAttributeMapOutput {
	return o
}

func (o SecurityAttributeMapOutput) MapIndex(k pulumi.StringInput) SecurityAttributeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityAttribute {
		return vs[0].(map[string]*SecurityAttribute)[vs[1].(string)]
	}).(SecurityAttributeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityAttributeInput)(nil)).Elem(), &SecurityAttribute{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityAttributeArrayInput)(nil)).Elem(), SecurityAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityAttributeMapInput)(nil)).Elem(), SecurityAttributeMap{})
	pulumi.RegisterOutputType(SecurityAttributeOutput{})
	pulumi.RegisterOutputType(SecurityAttributeArrayOutput{})
	pulumi.RegisterOutputType(SecurityAttributeMapOutput{})
}
