// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Service Catalog resource in Oracle Cloud Infrastructure Service Catalog service.
//
// Creates a brand new service catalog in a given compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/ServiceCatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ServiceCatalog.NewCatalog(ctx, "test_service_catalog", &ServiceCatalog.CatalogArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				DisplayName:   pulumi.Any(serviceCatalogDisplayName),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ServiceCatalogs can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:ServiceCatalog/catalog:Catalog test_service_catalog "id"
// ```
type Catalog struct {
	pulumi.CustomResourceState

	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) The display name of the service catalog.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// The lifecycle state of the service catalog.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewCatalog registers a new resource with the given unique name, arguments, and options.
func NewCatalog(ctx *pulumi.Context,
	name string, args *CatalogArgs, opts ...pulumi.ResourceOption) (*Catalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Catalog
	err := ctx.RegisterResource("oci:ServiceCatalog/catalog:Catalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalog gets an existing Catalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogState, opts ...pulumi.ResourceOption) (*Catalog, error) {
	var resource Catalog
	err := ctx.ReadResource("oci:ServiceCatalog/catalog:Catalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Catalog resources.
type catalogState struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The display name of the service catalog.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The lifecycle state of the service catalog.
	State *string `pulumi:"state"`
	// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type CatalogState struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The display name of the service catalog.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	FreeformTags pulumi.StringMapInput
	// The lifecycle state of the service catalog.
	State pulumi.StringPtrInput
	// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
	TimeUpdated pulumi.StringPtrInput
}

func (CatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogState)(nil)).Elem()
}

type catalogArgs struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The display name of the service catalog.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	FreeformTags map[string]string `pulumi:"freeformTags"`
}

// The set of arguments for constructing a Catalog resource.
type CatalogArgs struct {
	// (Updatable) The unique identifier for the compartment where the service catalog will be created.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The display name of the service catalog.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	FreeformTags pulumi.StringMapInput
}

func (CatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogArgs)(nil)).Elem()
}

type CatalogInput interface {
	pulumi.Input

	ToCatalogOutput() CatalogOutput
	ToCatalogOutputWithContext(ctx context.Context) CatalogOutput
}

func (*Catalog) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (i *Catalog) ToCatalogOutput() CatalogOutput {
	return i.ToCatalogOutputWithContext(context.Background())
}

func (i *Catalog) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOutput)
}

// CatalogArrayInput is an input type that accepts CatalogArray and CatalogArrayOutput values.
// You can construct a concrete instance of `CatalogArrayInput` via:
//
//	CatalogArray{ CatalogArgs{...} }
type CatalogArrayInput interface {
	pulumi.Input

	ToCatalogArrayOutput() CatalogArrayOutput
	ToCatalogArrayOutputWithContext(context.Context) CatalogArrayOutput
}

type CatalogArray []CatalogInput

func (CatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Catalog)(nil)).Elem()
}

func (i CatalogArray) ToCatalogArrayOutput() CatalogArrayOutput {
	return i.ToCatalogArrayOutputWithContext(context.Background())
}

func (i CatalogArray) ToCatalogArrayOutputWithContext(ctx context.Context) CatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogArrayOutput)
}

// CatalogMapInput is an input type that accepts CatalogMap and CatalogMapOutput values.
// You can construct a concrete instance of `CatalogMapInput` via:
//
//	CatalogMap{ "key": CatalogArgs{...} }
type CatalogMapInput interface {
	pulumi.Input

	ToCatalogMapOutput() CatalogMapOutput
	ToCatalogMapOutputWithContext(context.Context) CatalogMapOutput
}

type CatalogMap map[string]CatalogInput

func (CatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Catalog)(nil)).Elem()
}

func (i CatalogMap) ToCatalogMapOutput() CatalogMapOutput {
	return i.ToCatalogMapOutputWithContext(context.Background())
}

func (i CatalogMap) ToCatalogMapOutputWithContext(ctx context.Context) CatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogMapOutput)
}

type CatalogOutput struct{ *pulumi.OutputState }

func (CatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Catalog)(nil)).Elem()
}

func (o CatalogOutput) ToCatalogOutput() CatalogOutput {
	return o
}

func (o CatalogOutput) ToCatalogOutputWithContext(ctx context.Context) CatalogOutput {
	return o
}

// (Updatable) The unique identifier for the compartment where the service catalog will be created.
func (o CatalogOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o CatalogOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) The display name of the service catalog.
func (o CatalogOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o CatalogOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The lifecycle state of the service catalog.
func (o CatalogOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
func (o CatalogOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
func (o CatalogOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Catalog) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type CatalogArrayOutput struct{ *pulumi.OutputState }

func (CatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Catalog)(nil)).Elem()
}

func (o CatalogArrayOutput) ToCatalogArrayOutput() CatalogArrayOutput {
	return o
}

func (o CatalogArrayOutput) ToCatalogArrayOutputWithContext(ctx context.Context) CatalogArrayOutput {
	return o
}

func (o CatalogArrayOutput) Index(i pulumi.IntInput) CatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Catalog {
		return vs[0].([]*Catalog)[vs[1].(int)]
	}).(CatalogOutput)
}

type CatalogMapOutput struct{ *pulumi.OutputState }

func (CatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Catalog)(nil)).Elem()
}

func (o CatalogMapOutput) ToCatalogMapOutput() CatalogMapOutput {
	return o
}

func (o CatalogMapOutput) ToCatalogMapOutputWithContext(ctx context.Context) CatalogMapOutput {
	return o
}

func (o CatalogMapOutput) MapIndex(k pulumi.StringInput) CatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Catalog {
		return vs[0].(map[string]*Catalog)[vs[1].(string)]
	}).(CatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogInput)(nil)).Elem(), &Catalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogArrayInput)(nil)).Elem(), CatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogMapInput)(nil)).Elem(), CatalogMap{})
	pulumi.RegisterOutputType(CatalogOutput{})
	pulumi.RegisterOutputType(CatalogArrayOutput{})
	pulumi.RegisterOutputType(CatalogMapOutput{})
}
