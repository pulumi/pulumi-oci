// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Service Catalog Association resource in Oracle Cloud Infrastructure Service Catalog service.
//
// Creates an association between service catalog and a resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/ServiceCatalog"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ServiceCatalog.NewCatalogAssociation(ctx, "testServiceCatalogAssociation", &ServiceCatalog.CatalogAssociationArgs{
// 			EntityId:         pulumi.Any(oci_service_catalog_entity.Test_entity.Id),
// 			ServiceCatalogId: pulumi.Any(oci_service_catalog_service_catalog.Test_service_catalog.Id),
// 			EntityType:       pulumi.Any(_var.Service_catalog_association_entity_type),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ServiceCatalogAssociations can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:ServiceCatalog/catalogAssociation:CatalogAssociation test_service_catalog_association "id"
// ```
type CatalogAssociation struct {
	pulumi.CustomResourceState

	// Identifier of the entity being associated with service catalog.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// The type of the entity that is associated with the service catalog.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// Identifier of the service catalog.
	ServiceCatalogId pulumi.StringOutput `pulumi:"serviceCatalogId"`
	// Timestamp of when the resource was associated with service catalog.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewCatalogAssociation registers a new resource with the given unique name, arguments, and options.
func NewCatalogAssociation(ctx *pulumi.Context,
	name string, args *CatalogAssociationArgs, opts ...pulumi.ResourceOption) (*CatalogAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityId == nil {
		return nil, errors.New("invalid value for required argument 'EntityId'")
	}
	if args.ServiceCatalogId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceCatalogId'")
	}
	var resource CatalogAssociation
	err := ctx.RegisterResource("oci:ServiceCatalog/catalogAssociation:CatalogAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogAssociation gets an existing CatalogAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogAssociationState, opts ...pulumi.ResourceOption) (*CatalogAssociation, error) {
	var resource CatalogAssociation
	err := ctx.ReadResource("oci:ServiceCatalog/catalogAssociation:CatalogAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogAssociation resources.
type catalogAssociationState struct {
	// Identifier of the entity being associated with service catalog.
	EntityId *string `pulumi:"entityId"`
	// The type of the entity that is associated with the service catalog.
	EntityType *string `pulumi:"entityType"`
	// Identifier of the service catalog.
	ServiceCatalogId *string `pulumi:"serviceCatalogId"`
	// Timestamp of when the resource was associated with service catalog.
	TimeCreated *string `pulumi:"timeCreated"`
}

type CatalogAssociationState struct {
	// Identifier of the entity being associated with service catalog.
	EntityId pulumi.StringPtrInput
	// The type of the entity that is associated with the service catalog.
	EntityType pulumi.StringPtrInput
	// Identifier of the service catalog.
	ServiceCatalogId pulumi.StringPtrInput
	// Timestamp of when the resource was associated with service catalog.
	TimeCreated pulumi.StringPtrInput
}

func (CatalogAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogAssociationState)(nil)).Elem()
}

type catalogAssociationArgs struct {
	// Identifier of the entity being associated with service catalog.
	EntityId string `pulumi:"entityId"`
	// The type of the entity that is associated with the service catalog.
	EntityType *string `pulumi:"entityType"`
	// Identifier of the service catalog.
	ServiceCatalogId string `pulumi:"serviceCatalogId"`
}

// The set of arguments for constructing a CatalogAssociation resource.
type CatalogAssociationArgs struct {
	// Identifier of the entity being associated with service catalog.
	EntityId pulumi.StringInput
	// The type of the entity that is associated with the service catalog.
	EntityType pulumi.StringPtrInput
	// Identifier of the service catalog.
	ServiceCatalogId pulumi.StringInput
}

func (CatalogAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogAssociationArgs)(nil)).Elem()
}

type CatalogAssociationInput interface {
	pulumi.Input

	ToCatalogAssociationOutput() CatalogAssociationOutput
	ToCatalogAssociationOutputWithContext(ctx context.Context) CatalogAssociationOutput
}

func (*CatalogAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogAssociation)(nil)).Elem()
}

func (i *CatalogAssociation) ToCatalogAssociationOutput() CatalogAssociationOutput {
	return i.ToCatalogAssociationOutputWithContext(context.Background())
}

func (i *CatalogAssociation) ToCatalogAssociationOutputWithContext(ctx context.Context) CatalogAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogAssociationOutput)
}

// CatalogAssociationArrayInput is an input type that accepts CatalogAssociationArray and CatalogAssociationArrayOutput values.
// You can construct a concrete instance of `CatalogAssociationArrayInput` via:
//
//          CatalogAssociationArray{ CatalogAssociationArgs{...} }
type CatalogAssociationArrayInput interface {
	pulumi.Input

	ToCatalogAssociationArrayOutput() CatalogAssociationArrayOutput
	ToCatalogAssociationArrayOutputWithContext(context.Context) CatalogAssociationArrayOutput
}

type CatalogAssociationArray []CatalogAssociationInput

func (CatalogAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogAssociation)(nil)).Elem()
}

func (i CatalogAssociationArray) ToCatalogAssociationArrayOutput() CatalogAssociationArrayOutput {
	return i.ToCatalogAssociationArrayOutputWithContext(context.Background())
}

func (i CatalogAssociationArray) ToCatalogAssociationArrayOutputWithContext(ctx context.Context) CatalogAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogAssociationArrayOutput)
}

// CatalogAssociationMapInput is an input type that accepts CatalogAssociationMap and CatalogAssociationMapOutput values.
// You can construct a concrete instance of `CatalogAssociationMapInput` via:
//
//          CatalogAssociationMap{ "key": CatalogAssociationArgs{...} }
type CatalogAssociationMapInput interface {
	pulumi.Input

	ToCatalogAssociationMapOutput() CatalogAssociationMapOutput
	ToCatalogAssociationMapOutputWithContext(context.Context) CatalogAssociationMapOutput
}

type CatalogAssociationMap map[string]CatalogAssociationInput

func (CatalogAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogAssociation)(nil)).Elem()
}

func (i CatalogAssociationMap) ToCatalogAssociationMapOutput() CatalogAssociationMapOutput {
	return i.ToCatalogAssociationMapOutputWithContext(context.Background())
}

func (i CatalogAssociationMap) ToCatalogAssociationMapOutputWithContext(ctx context.Context) CatalogAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogAssociationMapOutput)
}

type CatalogAssociationOutput struct{ *pulumi.OutputState }

func (CatalogAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogAssociation)(nil)).Elem()
}

func (o CatalogAssociationOutput) ToCatalogAssociationOutput() CatalogAssociationOutput {
	return o
}

func (o CatalogAssociationOutput) ToCatalogAssociationOutputWithContext(ctx context.Context) CatalogAssociationOutput {
	return o
}

type CatalogAssociationArrayOutput struct{ *pulumi.OutputState }

func (CatalogAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogAssociation)(nil)).Elem()
}

func (o CatalogAssociationArrayOutput) ToCatalogAssociationArrayOutput() CatalogAssociationArrayOutput {
	return o
}

func (o CatalogAssociationArrayOutput) ToCatalogAssociationArrayOutputWithContext(ctx context.Context) CatalogAssociationArrayOutput {
	return o
}

func (o CatalogAssociationArrayOutput) Index(i pulumi.IntInput) CatalogAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogAssociation {
		return vs[0].([]*CatalogAssociation)[vs[1].(int)]
	}).(CatalogAssociationOutput)
}

type CatalogAssociationMapOutput struct{ *pulumi.OutputState }

func (CatalogAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogAssociation)(nil)).Elem()
}

func (o CatalogAssociationMapOutput) ToCatalogAssociationMapOutput() CatalogAssociationMapOutput {
	return o
}

func (o CatalogAssociationMapOutput) ToCatalogAssociationMapOutputWithContext(ctx context.Context) CatalogAssociationMapOutput {
	return o
}

func (o CatalogAssociationMapOutput) MapIndex(k pulumi.StringInput) CatalogAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogAssociation {
		return vs[0].(map[string]*CatalogAssociation)[vs[1].(string)]
	}).(CatalogAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogAssociationInput)(nil)).Elem(), &CatalogAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogAssociationArrayInput)(nil)).Elem(), CatalogAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogAssociationMapInput)(nil)).Elem(), CatalogAssociationMap{})
	pulumi.RegisterOutputType(CatalogAssociationOutput{})
	pulumi.RegisterOutputType(CatalogAssociationArrayOutput{})
	pulumi.RegisterOutputType(CatalogAssociationMapOutput{})
}
