// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the list of Service Catalogs in Oracle Cloud Infrastructure Service Catalog service.
//
// Lists all the service catalogs in the given compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/ServiceCatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ServiceCatalog.GetServiceCatalogs(ctx, &servicecatalog.GetServiceCatalogsArgs{
//				CompartmentId:    _var.Compartment_id,
//				DisplayName:      pulumi.StringRef(_var.Service_catalog_display_name),
//				ServiceCatalogId: pulumi.StringRef(oci_service_catalog_service_catalog.Test_service_catalog.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetServiceCatalogs(ctx *pulumi.Context, args *GetServiceCatalogsArgs, opts ...pulumi.InvokeOption) (*GetServiceCatalogsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServiceCatalogsResult
	err := ctx.Invoke("oci:ServiceCatalog/getServiceCatalogs:getServiceCatalogs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceCatalogs.
type GetServiceCatalogsArgs struct {
	// The unique identifier for the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Exact match name filter.
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetServiceCatalogsFilter `pulumi:"filters"`
	// The unique identifier for the service catalog.
	ServiceCatalogId *string `pulumi:"serviceCatalogId"`
}

// A collection of values returned by getServiceCatalogs.
type GetServiceCatalogsResult struct {
	// The Compartment id where the service catalog exists
	CompartmentId string `pulumi:"compartmentId"`
	// The name of the service catalog.
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetServiceCatalogsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of service_catalog_collection.
	ServiceCatalogCollections []GetServiceCatalogsServiceCatalogCollection `pulumi:"serviceCatalogCollections"`
	ServiceCatalogId          *string                                      `pulumi:"serviceCatalogId"`
}

func GetServiceCatalogsOutput(ctx *pulumi.Context, args GetServiceCatalogsOutputArgs, opts ...pulumi.InvokeOption) GetServiceCatalogsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetServiceCatalogsResult, error) {
			args := v.(GetServiceCatalogsArgs)
			r, err := GetServiceCatalogs(ctx, &args, opts...)
			var s GetServiceCatalogsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetServiceCatalogsResultOutput)
}

// A collection of arguments for invoking getServiceCatalogs.
type GetServiceCatalogsOutputArgs struct {
	// The unique identifier for the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Exact match name filter.
	DisplayName pulumi.StringPtrInput              `pulumi:"displayName"`
	Filters     GetServiceCatalogsFilterArrayInput `pulumi:"filters"`
	// The unique identifier for the service catalog.
	ServiceCatalogId pulumi.StringPtrInput `pulumi:"serviceCatalogId"`
}

func (GetServiceCatalogsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceCatalogsArgs)(nil)).Elem()
}

// A collection of values returned by getServiceCatalogs.
type GetServiceCatalogsResultOutput struct{ *pulumi.OutputState }

func (GetServiceCatalogsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceCatalogsResult)(nil)).Elem()
}

func (o GetServiceCatalogsResultOutput) ToGetServiceCatalogsResultOutput() GetServiceCatalogsResultOutput {
	return o
}

func (o GetServiceCatalogsResultOutput) ToGetServiceCatalogsResultOutputWithContext(ctx context.Context) GetServiceCatalogsResultOutput {
	return o
}

func (o GetServiceCatalogsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceCatalogsResult] {
	return pulumix.Output[GetServiceCatalogsResult]{
		OutputState: o.OutputState,
	}
}

// The Compartment id where the service catalog exists
func (o GetServiceCatalogsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceCatalogsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The name of the service catalog.
func (o GetServiceCatalogsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceCatalogsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetServiceCatalogsResultOutput) Filters() GetServiceCatalogsFilterArrayOutput {
	return o.ApplyT(func(v GetServiceCatalogsResult) []GetServiceCatalogsFilter { return v.Filters }).(GetServiceCatalogsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServiceCatalogsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceCatalogsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of service_catalog_collection.
func (o GetServiceCatalogsResultOutput) ServiceCatalogCollections() GetServiceCatalogsServiceCatalogCollectionArrayOutput {
	return o.ApplyT(func(v GetServiceCatalogsResult) []GetServiceCatalogsServiceCatalogCollection {
		return v.ServiceCatalogCollections
	}).(GetServiceCatalogsServiceCatalogCollectionArrayOutput)
}

func (o GetServiceCatalogsResultOutput) ServiceCatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServiceCatalogsResult) *string { return v.ServiceCatalogId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServiceCatalogsResultOutput{})
}
