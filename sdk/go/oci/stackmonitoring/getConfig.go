// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackmonitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Config resource in Oracle Cloud Infrastructure Stack Monitoring service.
//
// Gets the details of a configuration.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/StackMonitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := StackMonitoring.GetConfig(ctx, &stackmonitoring.GetConfigArgs{
//				ConfigId: testConfigOciStackMonitoringConfig.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupConfig(ctx *pulumi.Context, args *LookupConfigArgs, opts ...pulumi.InvokeOption) (*LookupConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConfigResult
	err := ctx.Invoke("oci:StackMonitoring/getConfig:getConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConfig.
type LookupConfigArgs struct {
	// Unique Config identifier.
	ConfigId string `pulumi:"configId"`
}

// A collection of values returned by getConfig.
type LookupConfigResult struct {
	// The OCID of the compartment containing the configuration.
	CompartmentId string `pulumi:"compartmentId"`
	ConfigId      string `pulumi:"configId"`
	// The type of configuration.
	ConfigType string `pulumi:"configType"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The Unique Oracle ID (OCID) that is immutable on creation.
	Id string `pulumi:"id"`
	// True if automatic promotion or enterprise extensibility is enabled, false if it is not enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// License edition.
	License string `pulumi:"license"`
	// The type of resource to configure for automatic promotion.
	ResourceType string `pulumi:"resourceType"`
	// The current state of the configuration.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the configuration was created. An RFC3339 formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the Config was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupConfigOutput(ctx *pulumi.Context, args LookupConfigOutputArgs, opts ...pulumi.InvokeOption) LookupConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConfigResult, error) {
			args := v.(LookupConfigArgs)
			r, err := LookupConfig(ctx, &args, opts...)
			var s LookupConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConfigResultOutput)
}

// A collection of arguments for invoking getConfig.
type LookupConfigOutputArgs struct {
	// Unique Config identifier.
	ConfigId pulumi.StringInput `pulumi:"configId"`
}

func (LookupConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigArgs)(nil)).Elem()
}

// A collection of values returned by getConfig.
type LookupConfigResultOutput struct{ *pulumi.OutputState }

func (LookupConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigResult)(nil)).Elem()
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutput() LookupConfigResultOutput {
	return o
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutputWithContext(ctx context.Context) LookupConfigResultOutput {
	return o
}

// The OCID of the compartment containing the configuration.
func (o LookupConfigResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o LookupConfigResultOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.ConfigId }).(pulumi.StringOutput)
}

// The type of configuration.
func (o LookupConfigResultOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.ConfigType }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupConfigResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupConfigResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o LookupConfigResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupConfigResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupConfigResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The Unique Oracle ID (OCID) that is immutable on creation.
func (o LookupConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// True if automatic promotion or enterprise extensibility is enabled, false if it is not enabled.
func (o LookupConfigResultOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConfigResult) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// License edition.
func (o LookupConfigResultOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.License }).(pulumi.StringOutput)
}

// The type of resource to configure for automatic promotion.
func (o LookupConfigResultOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.ResourceType }).(pulumi.StringOutput)
}

// The current state of the configuration.
func (o LookupConfigResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupConfigResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupConfigResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the configuration was created. An RFC3339 formatted datetime string.
func (o LookupConfigResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the Config was updated.
func (o LookupConfigResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConfigResultOutput{})
}
