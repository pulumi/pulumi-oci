// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackmonitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Monitoring Templates in Oracle Cloud Infrastructure Stack Monitoring service.
//
// Returns a list of Monitoring Templates.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/stackmonitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stackmonitoring.GetMonitoringTemplates(ctx, &stackmonitoring.GetMonitoringTemplatesArgs{
//				CompartmentId:        pulumi.StringRef(compartmentId),
//				DisplayName:          pulumi.StringRef(monitoringTemplateDisplayName),
//				MetricNames:          testMetric.Name,
//				MonitoringTemplateId: pulumi.StringRef(testMonitoringTemplate.Id),
//				Namespaces:           monitoringTemplateNamespace,
//				ResourceTypes:        monitoringTemplateResourceTypes,
//				State:                pulumi.StringRef(monitoringTemplateState),
//				Status:               pulumi.StringRef(monitoringTemplateStatus),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMonitoringTemplates(ctx *pulumi.Context, args *GetMonitoringTemplatesArgs, opts ...pulumi.InvokeOption) (*GetMonitoringTemplatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMonitoringTemplatesResult
	err := ctx.Invoke("oci:StackMonitoring/getMonitoringTemplates:getMonitoringTemplates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitoringTemplates.
type GetMonitoringTemplatesArgs struct {
	// The ID of the compartment in which data is listed.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return monitoring template based on name.
	DisplayName *string                        `pulumi:"displayName"`
	Filters     []GetMonitoringTemplatesFilter `pulumi:"filters"`
	// metricName filter.
	MetricNames []string `pulumi:"metricNames"`
	// A filter to return monitoring template based on input monitoringTemplateId
	MonitoringTemplateId *string `pulumi:"monitoringTemplateId"`
	// namespace filter.
	Namespaces []string `pulumi:"namespaces"`
	// Multiple resource types filter.
	ResourceTypes []string `pulumi:"resourceTypes"`
	// A filter to return monitoring template based on Lifecycle State
	State *string `pulumi:"state"`
	// A filter to return monitoring template based on input status
	Status *string `pulumi:"status"`
}

// A collection of values returned by getMonitoringTemplates.
type GetMonitoringTemplatesResult struct {
	// The OCID of the compartment containing the monitoringTemplate.
	CompartmentId *string `pulumi:"compartmentId"`
	// A user-friendly name for the monitoring template. It should be unique, and it's mutable in nature. Avoid entering confidential information.
	DisplayName *string                        `pulumi:"displayName"`
	Filters     []GetMonitoringTemplatesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id          string   `pulumi:"id"`
	MetricNames []string `pulumi:"metricNames"`
	// The list of monitoring_template_collection.
	MonitoringTemplateCollections []GetMonitoringTemplatesMonitoringTemplateCollection `pulumi:"monitoringTemplateCollections"`
	MonitoringTemplateId          *string                                              `pulumi:"monitoringTemplateId"`
	Namespaces                    []string                                             `pulumi:"namespaces"`
	ResourceTypes                 []string                                             `pulumi:"resourceTypes"`
	// The current lifecycle state of the monitoring template.
	State *string `pulumi:"state"`
	// The current status of the monitoring template i.e. whether it is Applied or NotApplied.
	Status *string `pulumi:"status"`
}

func GetMonitoringTemplatesOutput(ctx *pulumi.Context, args GetMonitoringTemplatesOutputArgs, opts ...pulumi.InvokeOption) GetMonitoringTemplatesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetMonitoringTemplatesResultOutput, error) {
			args := v.(GetMonitoringTemplatesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:StackMonitoring/getMonitoringTemplates:getMonitoringTemplates", args, GetMonitoringTemplatesResultOutput{}, options).(GetMonitoringTemplatesResultOutput), nil
		}).(GetMonitoringTemplatesResultOutput)
}

// A collection of arguments for invoking getMonitoringTemplates.
type GetMonitoringTemplatesOutputArgs struct {
	// The ID of the compartment in which data is listed.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return monitoring template based on name.
	DisplayName pulumi.StringPtrInput                  `pulumi:"displayName"`
	Filters     GetMonitoringTemplatesFilterArrayInput `pulumi:"filters"`
	// metricName filter.
	MetricNames pulumi.StringArrayInput `pulumi:"metricNames"`
	// A filter to return monitoring template based on input monitoringTemplateId
	MonitoringTemplateId pulumi.StringPtrInput `pulumi:"monitoringTemplateId"`
	// namespace filter.
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// Multiple resource types filter.
	ResourceTypes pulumi.StringArrayInput `pulumi:"resourceTypes"`
	// A filter to return monitoring template based on Lifecycle State
	State pulumi.StringPtrInput `pulumi:"state"`
	// A filter to return monitoring template based on input status
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetMonitoringTemplatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitoringTemplatesArgs)(nil)).Elem()
}

// A collection of values returned by getMonitoringTemplates.
type GetMonitoringTemplatesResultOutput struct{ *pulumi.OutputState }

func (GetMonitoringTemplatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitoringTemplatesResult)(nil)).Elem()
}

func (o GetMonitoringTemplatesResultOutput) ToGetMonitoringTemplatesResultOutput() GetMonitoringTemplatesResultOutput {
	return o
}

func (o GetMonitoringTemplatesResultOutput) ToGetMonitoringTemplatesResultOutputWithContext(ctx context.Context) GetMonitoringTemplatesResultOutput {
	return o
}

// The OCID of the compartment containing the monitoringTemplate.
func (o GetMonitoringTemplatesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// A user-friendly name for the monitoring template. It should be unique, and it's mutable in nature. Avoid entering confidential information.
func (o GetMonitoringTemplatesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetMonitoringTemplatesResultOutput) Filters() GetMonitoringTemplatesFilterArrayOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) []GetMonitoringTemplatesFilter { return v.Filters }).(GetMonitoringTemplatesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMonitoringTemplatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMonitoringTemplatesResultOutput) MetricNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) []string { return v.MetricNames }).(pulumi.StringArrayOutput)
}

// The list of monitoring_template_collection.
func (o GetMonitoringTemplatesResultOutput) MonitoringTemplateCollections() GetMonitoringTemplatesMonitoringTemplateCollectionArrayOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) []GetMonitoringTemplatesMonitoringTemplateCollection {
		return v.MonitoringTemplateCollections
	}).(GetMonitoringTemplatesMonitoringTemplateCollectionArrayOutput)
}

func (o GetMonitoringTemplatesResultOutput) MonitoringTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) *string { return v.MonitoringTemplateId }).(pulumi.StringPtrOutput)
}

func (o GetMonitoringTemplatesResultOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

func (o GetMonitoringTemplatesResultOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

// The current lifecycle state of the monitoring template.
func (o GetMonitoringTemplatesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The current status of the monitoring template i.e. whether it is Applied or NotApplied.
func (o GetMonitoringTemplatesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitoringTemplatesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMonitoringTemplatesResultOutput{})
}
