// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackmonitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Metric Extensions Test Management resource in Oracle Cloud Infrastructure Stack Monitoring service.
//
// # Performs test of Metric Extension on a specific resource Id
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/StackMonitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := StackMonitoring.NewMetricExtensionsTestManagement(ctx, "testMetricExtensionsTestManagement", &StackMonitoring.MetricExtensionsTestManagementArgs{
//				MetricExtensionId: pulumi.Any(oci_stack_monitoring_metric_extension.Test_metric_extension.Id),
//				ResourceIds:       pulumi.Any(_var.Metric_extensions_test_management_resource_ids),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type MetricExtensionsTestManagement struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
	MetricExtensionId pulumi.StringOutput `pulumi:"metricExtensionId"`
	// List of Resource IDs [OCID]. Currently, supports only one resource id per request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceIds pulumi.StringOutput `pulumi:"resourceIds"`
	// Test Run Id
	TestRunId pulumi.StringPtrOutput `pulumi:"testRunId"`
	// Test Run Metric Suffix
	TestRunMetricSuffix pulumi.StringPtrOutput `pulumi:"testRunMetricSuffix"`
	// Test Run Namespace name
	TestRunNamespaceName pulumi.StringPtrOutput `pulumi:"testRunNamespaceName"`
	// Test Run Resource Group name
	TestRunResourceGroupName pulumi.StringPtrOutput `pulumi:"testRunResourceGroupName"`
}

// NewMetricExtensionsTestManagement registers a new resource with the given unique name, arguments, and options.
func NewMetricExtensionsTestManagement(ctx *pulumi.Context,
	name string, args *MetricExtensionsTestManagementArgs, opts ...pulumi.ResourceOption) (*MetricExtensionsTestManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricExtensionId == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtensionId'")
	}
	if args.ResourceIds == nil {
		return nil, errors.New("invalid value for required argument 'ResourceIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricExtensionsTestManagement
	err := ctx.RegisterResource("oci:StackMonitoring/metricExtensionsTestManagement:MetricExtensionsTestManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricExtensionsTestManagement gets an existing MetricExtensionsTestManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricExtensionsTestManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricExtensionsTestManagementState, opts ...pulumi.ResourceOption) (*MetricExtensionsTestManagement, error) {
	var resource MetricExtensionsTestManagement
	err := ctx.ReadResource("oci:StackMonitoring/metricExtensionsTestManagement:MetricExtensionsTestManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricExtensionsTestManagement resources.
type metricExtensionsTestManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
	MetricExtensionId *string `pulumi:"metricExtensionId"`
	// List of Resource IDs [OCID]. Currently, supports only one resource id per request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceIds *string `pulumi:"resourceIds"`
	// Test Run Id
	TestRunId *string `pulumi:"testRunId"`
	// Test Run Metric Suffix
	TestRunMetricSuffix *string `pulumi:"testRunMetricSuffix"`
	// Test Run Namespace name
	TestRunNamespaceName *string `pulumi:"testRunNamespaceName"`
	// Test Run Resource Group name
	TestRunResourceGroupName *string `pulumi:"testRunResourceGroupName"`
}

type MetricExtensionsTestManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
	MetricExtensionId pulumi.StringPtrInput
	// List of Resource IDs [OCID]. Currently, supports only one resource id per request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceIds pulumi.StringPtrInput
	// Test Run Id
	TestRunId pulumi.StringPtrInput
	// Test Run Metric Suffix
	TestRunMetricSuffix pulumi.StringPtrInput
	// Test Run Namespace name
	TestRunNamespaceName pulumi.StringPtrInput
	// Test Run Resource Group name
	TestRunResourceGroupName pulumi.StringPtrInput
}

func (MetricExtensionsTestManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricExtensionsTestManagementState)(nil)).Elem()
}

type metricExtensionsTestManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
	MetricExtensionId string `pulumi:"metricExtensionId"`
	// List of Resource IDs [OCID]. Currently, supports only one resource id per request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceIds string `pulumi:"resourceIds"`
}

// The set of arguments for constructing a MetricExtensionsTestManagement resource.
type MetricExtensionsTestManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
	MetricExtensionId pulumi.StringInput
	// List of Resource IDs [OCID]. Currently, supports only one resource id per request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceIds pulumi.StringInput
}

func (MetricExtensionsTestManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricExtensionsTestManagementArgs)(nil)).Elem()
}

type MetricExtensionsTestManagementInput interface {
	pulumi.Input

	ToMetricExtensionsTestManagementOutput() MetricExtensionsTestManagementOutput
	ToMetricExtensionsTestManagementOutputWithContext(ctx context.Context) MetricExtensionsTestManagementOutput
}

func (*MetricExtensionsTestManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricExtensionsTestManagement)(nil)).Elem()
}

func (i *MetricExtensionsTestManagement) ToMetricExtensionsTestManagementOutput() MetricExtensionsTestManagementOutput {
	return i.ToMetricExtensionsTestManagementOutputWithContext(context.Background())
}

func (i *MetricExtensionsTestManagement) ToMetricExtensionsTestManagementOutputWithContext(ctx context.Context) MetricExtensionsTestManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExtensionsTestManagementOutput)
}

// MetricExtensionsTestManagementArrayInput is an input type that accepts MetricExtensionsTestManagementArray and MetricExtensionsTestManagementArrayOutput values.
// You can construct a concrete instance of `MetricExtensionsTestManagementArrayInput` via:
//
//	MetricExtensionsTestManagementArray{ MetricExtensionsTestManagementArgs{...} }
type MetricExtensionsTestManagementArrayInput interface {
	pulumi.Input

	ToMetricExtensionsTestManagementArrayOutput() MetricExtensionsTestManagementArrayOutput
	ToMetricExtensionsTestManagementArrayOutputWithContext(context.Context) MetricExtensionsTestManagementArrayOutput
}

type MetricExtensionsTestManagementArray []MetricExtensionsTestManagementInput

func (MetricExtensionsTestManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricExtensionsTestManagement)(nil)).Elem()
}

func (i MetricExtensionsTestManagementArray) ToMetricExtensionsTestManagementArrayOutput() MetricExtensionsTestManagementArrayOutput {
	return i.ToMetricExtensionsTestManagementArrayOutputWithContext(context.Background())
}

func (i MetricExtensionsTestManagementArray) ToMetricExtensionsTestManagementArrayOutputWithContext(ctx context.Context) MetricExtensionsTestManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExtensionsTestManagementArrayOutput)
}

// MetricExtensionsTestManagementMapInput is an input type that accepts MetricExtensionsTestManagementMap and MetricExtensionsTestManagementMapOutput values.
// You can construct a concrete instance of `MetricExtensionsTestManagementMapInput` via:
//
//	MetricExtensionsTestManagementMap{ "key": MetricExtensionsTestManagementArgs{...} }
type MetricExtensionsTestManagementMapInput interface {
	pulumi.Input

	ToMetricExtensionsTestManagementMapOutput() MetricExtensionsTestManagementMapOutput
	ToMetricExtensionsTestManagementMapOutputWithContext(context.Context) MetricExtensionsTestManagementMapOutput
}

type MetricExtensionsTestManagementMap map[string]MetricExtensionsTestManagementInput

func (MetricExtensionsTestManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricExtensionsTestManagement)(nil)).Elem()
}

func (i MetricExtensionsTestManagementMap) ToMetricExtensionsTestManagementMapOutput() MetricExtensionsTestManagementMapOutput {
	return i.ToMetricExtensionsTestManagementMapOutputWithContext(context.Background())
}

func (i MetricExtensionsTestManagementMap) ToMetricExtensionsTestManagementMapOutputWithContext(ctx context.Context) MetricExtensionsTestManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExtensionsTestManagementMapOutput)
}

type MetricExtensionsTestManagementOutput struct{ *pulumi.OutputState }

func (MetricExtensionsTestManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricExtensionsTestManagement)(nil)).Elem()
}

func (o MetricExtensionsTestManagementOutput) ToMetricExtensionsTestManagementOutput() MetricExtensionsTestManagementOutput {
	return o
}

func (o MetricExtensionsTestManagementOutput) ToMetricExtensionsTestManagementOutputWithContext(ctx context.Context) MetricExtensionsTestManagementOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
func (o MetricExtensionsTestManagementOutput) MetricExtensionId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExtensionsTestManagement) pulumi.StringOutput { return v.MetricExtensionId }).(pulumi.StringOutput)
}

// List of Resource IDs [OCID]. Currently, supports only one resource id per request.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o MetricExtensionsTestManagementOutput) ResourceIds() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExtensionsTestManagement) pulumi.StringOutput { return v.ResourceIds }).(pulumi.StringOutput)
}

// Test Run Id
func (o MetricExtensionsTestManagementOutput) TestRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricExtensionsTestManagement) pulumi.StringPtrOutput { return v.TestRunId }).(pulumi.StringPtrOutput)
}

// Test Run Metric Suffix
func (o MetricExtensionsTestManagementOutput) TestRunMetricSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricExtensionsTestManagement) pulumi.StringPtrOutput { return v.TestRunMetricSuffix }).(pulumi.StringPtrOutput)
}

// Test Run Namespace name
func (o MetricExtensionsTestManagementOutput) TestRunNamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricExtensionsTestManagement) pulumi.StringPtrOutput { return v.TestRunNamespaceName }).(pulumi.StringPtrOutput)
}

// Test Run Resource Group name
func (o MetricExtensionsTestManagementOutput) TestRunResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricExtensionsTestManagement) pulumi.StringPtrOutput { return v.TestRunResourceGroupName }).(pulumi.StringPtrOutput)
}

type MetricExtensionsTestManagementArrayOutput struct{ *pulumi.OutputState }

func (MetricExtensionsTestManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricExtensionsTestManagement)(nil)).Elem()
}

func (o MetricExtensionsTestManagementArrayOutput) ToMetricExtensionsTestManagementArrayOutput() MetricExtensionsTestManagementArrayOutput {
	return o
}

func (o MetricExtensionsTestManagementArrayOutput) ToMetricExtensionsTestManagementArrayOutputWithContext(ctx context.Context) MetricExtensionsTestManagementArrayOutput {
	return o
}

func (o MetricExtensionsTestManagementArrayOutput) Index(i pulumi.IntInput) MetricExtensionsTestManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricExtensionsTestManagement {
		return vs[0].([]*MetricExtensionsTestManagement)[vs[1].(int)]
	}).(MetricExtensionsTestManagementOutput)
}

type MetricExtensionsTestManagementMapOutput struct{ *pulumi.OutputState }

func (MetricExtensionsTestManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricExtensionsTestManagement)(nil)).Elem()
}

func (o MetricExtensionsTestManagementMapOutput) ToMetricExtensionsTestManagementMapOutput() MetricExtensionsTestManagementMapOutput {
	return o
}

func (o MetricExtensionsTestManagementMapOutput) ToMetricExtensionsTestManagementMapOutputWithContext(ctx context.Context) MetricExtensionsTestManagementMapOutput {
	return o
}

func (o MetricExtensionsTestManagementMapOutput) MapIndex(k pulumi.StringInput) MetricExtensionsTestManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricExtensionsTestManagement {
		return vs[0].(map[string]*MetricExtensionsTestManagement)[vs[1].(string)]
	}).(MetricExtensionsTestManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExtensionsTestManagementInput)(nil)).Elem(), &MetricExtensionsTestManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExtensionsTestManagementArrayInput)(nil)).Elem(), MetricExtensionsTestManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExtensionsTestManagementMapInput)(nil)).Elem(), MetricExtensionsTestManagementMap{})
	pulumi.RegisterOutputType(MetricExtensionsTestManagementOutput{})
	pulumi.RegisterOutputType(MetricExtensionsTestManagementArrayOutput{})
	pulumi.RegisterOutputType(MetricExtensionsTestManagementMapOutput{})
}
