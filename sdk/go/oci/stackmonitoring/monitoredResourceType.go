// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackmonitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Monitored Resource Type resource in Oracle Cloud Infrastructure Stack Monitoring service.
//
// Creates a new monitored resource type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/StackMonitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := StackMonitoring.NewMonitoredResourceType(ctx, "testMonitoredResourceType", &StackMonitoring.MonitoredResourceTypeArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Monitored_resource_type_description),
//				DisplayName: pulumi.Any(_var.Monitored_resource_type_display_name),
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//				Metadata: &stackmonitoring.MonitoredResourceTypeMetadataArgs{
//					Format:             pulumi.Any(_var.Monitored_resource_type_metadata_format),
//					AgentProperties:    pulumi.Any(_var.Monitored_resource_type_metadata_agent_properties),
//					RequiredProperties: pulumi.Any(_var.Monitored_resource_type_metadata_required_properties),
//					UniquePropertySets: stackmonitoring.MonitoredResourceTypeMetadataUniquePropertySetArray{
//						&stackmonitoring.MonitoredResourceTypeMetadataUniquePropertySetArgs{
//							Properties: pulumi.Any(_var.Monitored_resource_type_metadata_unique_property_sets_properties),
//						},
//					},
//					ValidPropertiesForCreates: pulumi.Any(_var.Monitored_resource_type_metadata_valid_properties_for_create),
//					ValidPropertiesForUpdates: pulumi.Any(_var.Monitored_resource_type_metadata_valid_properties_for_update),
//					ValidPropertyValues:       pulumi.Any(_var.Monitored_resource_type_metadata_valid_property_values),
//				},
//				MetricNamespace:  pulumi.Any(_var.Monitored_resource_type_metric_namespace),
//				ResourceCategory: pulumi.Any(_var.Monitored_resource_type_resource_category),
//				SourceType:       pulumi.Any(_var.Monitored_resource_type_source_type),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MonitoredResourceTypes can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:StackMonitoring/monitoredResourceType:MonitoredResourceType test_monitored_resource_type "id"
// ```
type MonitoredResourceType struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy containing the resource type.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Updatable) Monitored resource type display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) The metadata details for resource type.
	Metadata MonitoredResourceTypeMetadataOutput `pulumi:"metadata"`
	// (Updatable) Metric namespace for resource type.
	MetricNamespace pulumi.StringOutput `pulumi:"metricNamespace"`
	// A unique monitored resource type name. The name must be unique across tenancy.  Name can not be changed.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Updatable) Resource Category to indicate the kind of resource type.
	ResourceCategory pulumi.StringOutput `pulumi:"resourceCategory"`
	// (Updatable) Source type to indicate if the resource is stack monitoring discovered, Oracle Cloud Infrastructure native resource, etc.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// Lifecycle state of the monitored resource type.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The date and time when the monitored resource type was created, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time when the monitored resource was updated, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMonitoredResourceType registers a new resource with the given unique name, arguments, and options.
func NewMonitoredResourceType(ctx *pulumi.Context,
	name string, args *MonitoredResourceTypeArgs, opts ...pulumi.ResourceOption) (*MonitoredResourceType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredResourceType
	err := ctx.RegisterResource("oci:StackMonitoring/monitoredResourceType:MonitoredResourceType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredResourceType gets an existing MonitoredResourceType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredResourceType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredResourceTypeState, opts ...pulumi.ResourceOption) (*MonitoredResourceType, error) {
	var resource MonitoredResourceType
	err := ctx.ReadResource("oci:StackMonitoring/monitoredResourceType:MonitoredResourceType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredResourceType resources.
type monitoredResourceTypeState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy containing the resource type.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A friendly description.
	Description *string `pulumi:"description"`
	// (Updatable) Monitored resource type display name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The metadata details for resource type.
	Metadata *MonitoredResourceTypeMetadata `pulumi:"metadata"`
	// (Updatable) Metric namespace for resource type.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// A unique monitored resource type name. The name must be unique across tenancy.  Name can not be changed.
	Name *string `pulumi:"name"`
	// (Updatable) Resource Category to indicate the kind of resource type.
	ResourceCategory *string `pulumi:"resourceCategory"`
	// (Updatable) Source type to indicate if the resource is stack monitoring discovered, Oracle Cloud Infrastructure native resource, etc.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SourceType *string `pulumi:"sourceType"`
	// Lifecycle state of the monitored resource type.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The date and time when the monitored resource type was created, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time when the monitored resource was updated, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MonitoredResourceTypeState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy containing the resource type.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A friendly description.
	Description pulumi.StringPtrInput
	// (Updatable) Monitored resource type display name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The metadata details for resource type.
	Metadata MonitoredResourceTypeMetadataPtrInput
	// (Updatable) Metric namespace for resource type.
	MetricNamespace pulumi.StringPtrInput
	// A unique monitored resource type name. The name must be unique across tenancy.  Name can not be changed.
	Name pulumi.StringPtrInput
	// (Updatable) Resource Category to indicate the kind of resource type.
	ResourceCategory pulumi.StringPtrInput
	// (Updatable) Source type to indicate if the resource is stack monitoring discovered, Oracle Cloud Infrastructure native resource, etc.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SourceType pulumi.StringPtrInput
	// Lifecycle state of the monitored resource type.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The date and time when the monitored resource type was created, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeCreated pulumi.StringPtrInput
	// The date and time when the monitored resource was updated, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeUpdated pulumi.StringPtrInput
}

func (MonitoredResourceTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredResourceTypeState)(nil)).Elem()
}

type monitoredResourceTypeArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy containing the resource type.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A friendly description.
	Description *string `pulumi:"description"`
	// (Updatable) Monitored resource type display name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The metadata details for resource type.
	Metadata *MonitoredResourceTypeMetadata `pulumi:"metadata"`
	// (Updatable) Metric namespace for resource type.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// A unique monitored resource type name. The name must be unique across tenancy.  Name can not be changed.
	Name *string `pulumi:"name"`
	// (Updatable) Resource Category to indicate the kind of resource type.
	ResourceCategory *string `pulumi:"resourceCategory"`
	// (Updatable) Source type to indicate if the resource is stack monitoring discovered, Oracle Cloud Infrastructure native resource, etc.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SourceType *string `pulumi:"sourceType"`
}

// The set of arguments for constructing a MonitoredResourceType resource.
type MonitoredResourceTypeArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy containing the resource type.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A friendly description.
	Description pulumi.StringPtrInput
	// (Updatable) Monitored resource type display name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The metadata details for resource type.
	Metadata MonitoredResourceTypeMetadataPtrInput
	// (Updatable) Metric namespace for resource type.
	MetricNamespace pulumi.StringPtrInput
	// A unique monitored resource type name. The name must be unique across tenancy.  Name can not be changed.
	Name pulumi.StringPtrInput
	// (Updatable) Resource Category to indicate the kind of resource type.
	ResourceCategory pulumi.StringPtrInput
	// (Updatable) Source type to indicate if the resource is stack monitoring discovered, Oracle Cloud Infrastructure native resource, etc.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SourceType pulumi.StringPtrInput
}

func (MonitoredResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredResourceTypeArgs)(nil)).Elem()
}

type MonitoredResourceTypeInput interface {
	pulumi.Input

	ToMonitoredResourceTypeOutput() MonitoredResourceTypeOutput
	ToMonitoredResourceTypeOutputWithContext(ctx context.Context) MonitoredResourceTypeOutput
}

func (*MonitoredResourceType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredResourceType)(nil)).Elem()
}

func (i *MonitoredResourceType) ToMonitoredResourceTypeOutput() MonitoredResourceTypeOutput {
	return i.ToMonitoredResourceTypeOutputWithContext(context.Background())
}

func (i *MonitoredResourceType) ToMonitoredResourceTypeOutputWithContext(ctx context.Context) MonitoredResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredResourceTypeOutput)
}

// MonitoredResourceTypeArrayInput is an input type that accepts MonitoredResourceTypeArray and MonitoredResourceTypeArrayOutput values.
// You can construct a concrete instance of `MonitoredResourceTypeArrayInput` via:
//
//	MonitoredResourceTypeArray{ MonitoredResourceTypeArgs{...} }
type MonitoredResourceTypeArrayInput interface {
	pulumi.Input

	ToMonitoredResourceTypeArrayOutput() MonitoredResourceTypeArrayOutput
	ToMonitoredResourceTypeArrayOutputWithContext(context.Context) MonitoredResourceTypeArrayOutput
}

type MonitoredResourceTypeArray []MonitoredResourceTypeInput

func (MonitoredResourceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredResourceType)(nil)).Elem()
}

func (i MonitoredResourceTypeArray) ToMonitoredResourceTypeArrayOutput() MonitoredResourceTypeArrayOutput {
	return i.ToMonitoredResourceTypeArrayOutputWithContext(context.Background())
}

func (i MonitoredResourceTypeArray) ToMonitoredResourceTypeArrayOutputWithContext(ctx context.Context) MonitoredResourceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredResourceTypeArrayOutput)
}

// MonitoredResourceTypeMapInput is an input type that accepts MonitoredResourceTypeMap and MonitoredResourceTypeMapOutput values.
// You can construct a concrete instance of `MonitoredResourceTypeMapInput` via:
//
//	MonitoredResourceTypeMap{ "key": MonitoredResourceTypeArgs{...} }
type MonitoredResourceTypeMapInput interface {
	pulumi.Input

	ToMonitoredResourceTypeMapOutput() MonitoredResourceTypeMapOutput
	ToMonitoredResourceTypeMapOutputWithContext(context.Context) MonitoredResourceTypeMapOutput
}

type MonitoredResourceTypeMap map[string]MonitoredResourceTypeInput

func (MonitoredResourceTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredResourceType)(nil)).Elem()
}

func (i MonitoredResourceTypeMap) ToMonitoredResourceTypeMapOutput() MonitoredResourceTypeMapOutput {
	return i.ToMonitoredResourceTypeMapOutputWithContext(context.Background())
}

func (i MonitoredResourceTypeMap) ToMonitoredResourceTypeMapOutputWithContext(ctx context.Context) MonitoredResourceTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredResourceTypeMapOutput)
}

type MonitoredResourceTypeOutput struct{ *pulumi.OutputState }

func (MonitoredResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredResourceType)(nil)).Elem()
}

func (o MonitoredResourceTypeOutput) ToMonitoredResourceTypeOutput() MonitoredResourceTypeOutput {
	return o
}

func (o MonitoredResourceTypeOutput) ToMonitoredResourceTypeOutputWithContext(ctx context.Context) MonitoredResourceTypeOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy containing the resource type.
func (o MonitoredResourceTypeOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MonitoredResourceTypeOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) A friendly description.
func (o MonitoredResourceTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Updatable) Monitored resource type display name.
func (o MonitoredResourceTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MonitoredResourceTypeOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// (Updatable) The metadata details for resource type.
func (o MonitoredResourceTypeOutput) Metadata() MonitoredResourceTypeMetadataOutput {
	return o.ApplyT(func(v *MonitoredResourceType) MonitoredResourceTypeMetadataOutput { return v.Metadata }).(MonitoredResourceTypeMetadataOutput)
}

// (Updatable) Metric namespace for resource type.
func (o MonitoredResourceTypeOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.MetricNamespace }).(pulumi.StringOutput)
}

// A unique monitored resource type name. The name must be unique across tenancy.  Name can not be changed.
func (o MonitoredResourceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Updatable) Resource Category to indicate the kind of resource type.
func (o MonitoredResourceTypeOutput) ResourceCategory() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.ResourceCategory }).(pulumi.StringOutput)
}

// (Updatable) Source type to indicate if the resource is stack monitoring discovered, Oracle Cloud Infrastructure native resource, etc.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o MonitoredResourceTypeOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// Lifecycle state of the monitored resource type.
func (o MonitoredResourceTypeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o MonitoredResourceTypeOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// The date and time when the monitored resource type was created, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
func (o MonitoredResourceTypeOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time when the monitored resource was updated, expressed in  [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
func (o MonitoredResourceTypeOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredResourceType) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type MonitoredResourceTypeArrayOutput struct{ *pulumi.OutputState }

func (MonitoredResourceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredResourceType)(nil)).Elem()
}

func (o MonitoredResourceTypeArrayOutput) ToMonitoredResourceTypeArrayOutput() MonitoredResourceTypeArrayOutput {
	return o
}

func (o MonitoredResourceTypeArrayOutput) ToMonitoredResourceTypeArrayOutputWithContext(ctx context.Context) MonitoredResourceTypeArrayOutput {
	return o
}

func (o MonitoredResourceTypeArrayOutput) Index(i pulumi.IntInput) MonitoredResourceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredResourceType {
		return vs[0].([]*MonitoredResourceType)[vs[1].(int)]
	}).(MonitoredResourceTypeOutput)
}

type MonitoredResourceTypeMapOutput struct{ *pulumi.OutputState }

func (MonitoredResourceTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredResourceType)(nil)).Elem()
}

func (o MonitoredResourceTypeMapOutput) ToMonitoredResourceTypeMapOutput() MonitoredResourceTypeMapOutput {
	return o
}

func (o MonitoredResourceTypeMapOutput) ToMonitoredResourceTypeMapOutputWithContext(ctx context.Context) MonitoredResourceTypeMapOutput {
	return o
}

func (o MonitoredResourceTypeMapOutput) MapIndex(k pulumi.StringInput) MonitoredResourceTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredResourceType {
		return vs[0].(map[string]*MonitoredResourceType)[vs[1].(string)]
	}).(MonitoredResourceTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredResourceTypeInput)(nil)).Elem(), &MonitoredResourceType{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredResourceTypeArrayInput)(nil)).Elem(), MonitoredResourceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredResourceTypeMapInput)(nil)).Elem(), MonitoredResourceTypeMap{})
	pulumi.RegisterOutputType(MonitoredResourceTypeOutput{})
	pulumi.RegisterOutputType(MonitoredResourceTypeArrayOutput{})
	pulumi.RegisterOutputType(MonitoredResourceTypeMapOutput{})
}
