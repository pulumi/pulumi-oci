// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackmonitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Monitoring Template Alarm Condition resource in Oracle Cloud Infrastructure Stack Monitoring service.
//
// Create a new alarm condition in same monitoringTemplate compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/stackmonitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stackmonitoring.NewMonitoringTemplateAlarmCondition(ctx, "test_monitoring_template_alarm_condition", &stackmonitoring.MonitoringTemplateAlarmConditionArgs{
//				ConditionType: pulumi.Any(monitoringTemplateAlarmConditionConditionType),
//				Conditions: stackmonitoring.MonitoringTemplateAlarmConditionConditionArray{
//					&stackmonitoring.MonitoringTemplateAlarmConditionConditionArgs{
//						Query:            pulumi.Any(monitoringTemplateAlarmConditionConditionsQuery),
//						Severity:         pulumi.Any(monitoringTemplateAlarmConditionConditionsSeverity),
//						Body:             pulumi.Any(monitoringTemplateAlarmConditionConditionsBody),
//						ShouldAppendNote: pulumi.Any(monitoringTemplateAlarmConditionConditionsShouldAppendNote),
//						ShouldAppendUrl:  pulumi.Any(monitoringTemplateAlarmConditionConditionsShouldAppendUrl),
//						TriggerDelay:     pulumi.Any(monitoringTemplateAlarmConditionConditionsTriggerDelay),
//					},
//				},
//				MetricName:           pulumi.Any(testMetric.Name),
//				MonitoringTemplateId: pulumi.Any(testMonitoringTemplate.Id),
//				Namespace:            pulumi.Any(monitoringTemplateAlarmConditionNamespace),
//				ResourceType:         pulumi.Any(monitoringTemplateAlarmConditionResourceType),
//				CompositeType:        pulumi.Any(monitoringTemplateAlarmConditionCompositeType),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MonitoringTemplateAlarmConditions can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:StackMonitoring/monitoringTemplateAlarmCondition:MonitoringTemplateAlarmCondition test_monitoring_template_alarm_condition "monitoringTemplates/{monitoringTemplateId}/alarmConditions/{alarmConditionId}"
// ```
type MonitoringTemplateAlarmCondition struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the composite resource type like EBS/PEOPLE_SOFT.
	CompositeType pulumi.StringOutput `pulumi:"compositeType"`
	// (Updatable) Type of defined monitoring template.
	ConditionType pulumi.StringOutput `pulumi:"conditionType"`
	// (Updatable) Monitoring template conditions.
	Conditions MonitoringTemplateAlarmConditionConditionArrayOutput `pulumi:"conditions"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// (Updatable) The metric name.
	MetricName pulumi.StringOutput `pulumi:"metricName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
	MonitoringTemplateId pulumi.StringOutput `pulumi:"monitoringTemplateId"`
	// (Updatable) The stack monitoring service or application emitting the metric that is evaluated by the alarm.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// (Updatable) The resource group OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The current lifecycle state of the monitoring template
	State pulumi.StringOutput `pulumi:"state"`
	// The current status of the monitoring template i.e. whether it is Published or Unpublished
	Status pulumi.StringOutput `pulumi:"status"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The date and time the alarm condition was created. Format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the alarm condition was updated. Format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMonitoringTemplateAlarmCondition registers a new resource with the given unique name, arguments, and options.
func NewMonitoringTemplateAlarmCondition(ctx *pulumi.Context,
	name string, args *MonitoringTemplateAlarmConditionArgs, opts ...pulumi.ResourceOption) (*MonitoringTemplateAlarmCondition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConditionType == nil {
		return nil, errors.New("invalid value for required argument 'ConditionType'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.MonitoringTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringTemplateId'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoringTemplateAlarmCondition
	err := ctx.RegisterResource("oci:StackMonitoring/monitoringTemplateAlarmCondition:MonitoringTemplateAlarmCondition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringTemplateAlarmCondition gets an existing MonitoringTemplateAlarmCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringTemplateAlarmCondition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringTemplateAlarmConditionState, opts ...pulumi.ResourceOption) (*MonitoringTemplateAlarmCondition, error) {
	var resource MonitoringTemplateAlarmCondition
	err := ctx.ReadResource("oci:StackMonitoring/monitoringTemplateAlarmCondition:MonitoringTemplateAlarmCondition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringTemplateAlarmCondition resources.
type monitoringTemplateAlarmConditionState struct {
	// (Updatable) The OCID of the composite resource type like EBS/PEOPLE_SOFT.
	CompositeType *string `pulumi:"compositeType"`
	// (Updatable) Type of defined monitoring template.
	ConditionType *string `pulumi:"conditionType"`
	// (Updatable) Monitoring template conditions.
	Conditions []MonitoringTemplateAlarmConditionCondition `pulumi:"conditions"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) The metric name.
	MetricName *string `pulumi:"metricName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
	MonitoringTemplateId *string `pulumi:"monitoringTemplateId"`
	// (Updatable) The stack monitoring service or application emitting the metric that is evaluated by the alarm.
	Namespace *string `pulumi:"namespace"`
	// (Updatable) The resource group OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceType *string `pulumi:"resourceType"`
	// The current lifecycle state of the monitoring template
	State *string `pulumi:"state"`
	// The current status of the monitoring template i.e. whether it is Published or Unpublished
	Status *string `pulumi:"status"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time the alarm condition was created. Format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the alarm condition was updated. Format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MonitoringTemplateAlarmConditionState struct {
	// (Updatable) The OCID of the composite resource type like EBS/PEOPLE_SOFT.
	CompositeType pulumi.StringPtrInput
	// (Updatable) Type of defined monitoring template.
	ConditionType pulumi.StringPtrInput
	// (Updatable) Monitoring template conditions.
	Conditions MonitoringTemplateAlarmConditionConditionArrayInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) The metric name.
	MetricName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
	MonitoringTemplateId pulumi.StringPtrInput
	// (Updatable) The stack monitoring service or application emitting the metric that is evaluated by the alarm.
	Namespace pulumi.StringPtrInput
	// (Updatable) The resource group OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceType pulumi.StringPtrInput
	// The current lifecycle state of the monitoring template
	State pulumi.StringPtrInput
	// The current status of the monitoring template i.e. whether it is Published or Unpublished
	Status pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// The date and time the alarm condition was created. Format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the alarm condition was updated. Format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (MonitoringTemplateAlarmConditionState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringTemplateAlarmConditionState)(nil)).Elem()
}

type monitoringTemplateAlarmConditionArgs struct {
	// (Updatable) The OCID of the composite resource type like EBS/PEOPLE_SOFT.
	CompositeType *string `pulumi:"compositeType"`
	// (Updatable) Type of defined monitoring template.
	ConditionType string `pulumi:"conditionType"`
	// (Updatable) Monitoring template conditions.
	Conditions []MonitoringTemplateAlarmConditionCondition `pulumi:"conditions"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) The metric name.
	MetricName string `pulumi:"metricName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
	MonitoringTemplateId string `pulumi:"monitoringTemplateId"`
	// (Updatable) The stack monitoring service or application emitting the metric that is evaluated by the alarm.
	Namespace string `pulumi:"namespace"`
	// (Updatable) The resource group OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a MonitoringTemplateAlarmCondition resource.
type MonitoringTemplateAlarmConditionArgs struct {
	// (Updatable) The OCID of the composite resource type like EBS/PEOPLE_SOFT.
	CompositeType pulumi.StringPtrInput
	// (Updatable) Type of defined monitoring template.
	ConditionType pulumi.StringInput
	// (Updatable) Monitoring template conditions.
	Conditions MonitoringTemplateAlarmConditionConditionArrayInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) The metric name.
	MetricName pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
	MonitoringTemplateId pulumi.StringInput
	// (Updatable) The stack monitoring service or application emitting the metric that is evaluated by the alarm.
	Namespace pulumi.StringInput
	// (Updatable) The resource group OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceType pulumi.StringInput
}

func (MonitoringTemplateAlarmConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringTemplateAlarmConditionArgs)(nil)).Elem()
}

type MonitoringTemplateAlarmConditionInput interface {
	pulumi.Input

	ToMonitoringTemplateAlarmConditionOutput() MonitoringTemplateAlarmConditionOutput
	ToMonitoringTemplateAlarmConditionOutputWithContext(ctx context.Context) MonitoringTemplateAlarmConditionOutput
}

func (*MonitoringTemplateAlarmCondition) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTemplateAlarmCondition)(nil)).Elem()
}

func (i *MonitoringTemplateAlarmCondition) ToMonitoringTemplateAlarmConditionOutput() MonitoringTemplateAlarmConditionOutput {
	return i.ToMonitoringTemplateAlarmConditionOutputWithContext(context.Background())
}

func (i *MonitoringTemplateAlarmCondition) ToMonitoringTemplateAlarmConditionOutputWithContext(ctx context.Context) MonitoringTemplateAlarmConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTemplateAlarmConditionOutput)
}

// MonitoringTemplateAlarmConditionArrayInput is an input type that accepts MonitoringTemplateAlarmConditionArray and MonitoringTemplateAlarmConditionArrayOutput values.
// You can construct a concrete instance of `MonitoringTemplateAlarmConditionArrayInput` via:
//
//	MonitoringTemplateAlarmConditionArray{ MonitoringTemplateAlarmConditionArgs{...} }
type MonitoringTemplateAlarmConditionArrayInput interface {
	pulumi.Input

	ToMonitoringTemplateAlarmConditionArrayOutput() MonitoringTemplateAlarmConditionArrayOutput
	ToMonitoringTemplateAlarmConditionArrayOutputWithContext(context.Context) MonitoringTemplateAlarmConditionArrayOutput
}

type MonitoringTemplateAlarmConditionArray []MonitoringTemplateAlarmConditionInput

func (MonitoringTemplateAlarmConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoringTemplateAlarmCondition)(nil)).Elem()
}

func (i MonitoringTemplateAlarmConditionArray) ToMonitoringTemplateAlarmConditionArrayOutput() MonitoringTemplateAlarmConditionArrayOutput {
	return i.ToMonitoringTemplateAlarmConditionArrayOutputWithContext(context.Background())
}

func (i MonitoringTemplateAlarmConditionArray) ToMonitoringTemplateAlarmConditionArrayOutputWithContext(ctx context.Context) MonitoringTemplateAlarmConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTemplateAlarmConditionArrayOutput)
}

// MonitoringTemplateAlarmConditionMapInput is an input type that accepts MonitoringTemplateAlarmConditionMap and MonitoringTemplateAlarmConditionMapOutput values.
// You can construct a concrete instance of `MonitoringTemplateAlarmConditionMapInput` via:
//
//	MonitoringTemplateAlarmConditionMap{ "key": MonitoringTemplateAlarmConditionArgs{...} }
type MonitoringTemplateAlarmConditionMapInput interface {
	pulumi.Input

	ToMonitoringTemplateAlarmConditionMapOutput() MonitoringTemplateAlarmConditionMapOutput
	ToMonitoringTemplateAlarmConditionMapOutputWithContext(context.Context) MonitoringTemplateAlarmConditionMapOutput
}

type MonitoringTemplateAlarmConditionMap map[string]MonitoringTemplateAlarmConditionInput

func (MonitoringTemplateAlarmConditionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoringTemplateAlarmCondition)(nil)).Elem()
}

func (i MonitoringTemplateAlarmConditionMap) ToMonitoringTemplateAlarmConditionMapOutput() MonitoringTemplateAlarmConditionMapOutput {
	return i.ToMonitoringTemplateAlarmConditionMapOutputWithContext(context.Background())
}

func (i MonitoringTemplateAlarmConditionMap) ToMonitoringTemplateAlarmConditionMapOutputWithContext(ctx context.Context) MonitoringTemplateAlarmConditionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTemplateAlarmConditionMapOutput)
}

type MonitoringTemplateAlarmConditionOutput struct{ *pulumi.OutputState }

func (MonitoringTemplateAlarmConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTemplateAlarmCondition)(nil)).Elem()
}

func (o MonitoringTemplateAlarmConditionOutput) ToMonitoringTemplateAlarmConditionOutput() MonitoringTemplateAlarmConditionOutput {
	return o
}

func (o MonitoringTemplateAlarmConditionOutput) ToMonitoringTemplateAlarmConditionOutputWithContext(ctx context.Context) MonitoringTemplateAlarmConditionOutput {
	return o
}

// (Updatable) The OCID of the composite resource type like EBS/PEOPLE_SOFT.
func (o MonitoringTemplateAlarmConditionOutput) CompositeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.CompositeType }).(pulumi.StringOutput)
}

// (Updatable) Type of defined monitoring template.
func (o MonitoringTemplateAlarmConditionOutput) ConditionType() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.ConditionType }).(pulumi.StringOutput)
}

// (Updatable) Monitoring template conditions.
func (o MonitoringTemplateAlarmConditionOutput) Conditions() MonitoringTemplateAlarmConditionConditionArrayOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) MonitoringTemplateAlarmConditionConditionArrayOutput {
		return v.Conditions
	}).(MonitoringTemplateAlarmConditionConditionArrayOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MonitoringTemplateAlarmConditionOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MonitoringTemplateAlarmConditionOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// (Updatable) The metric name.
func (o MonitoringTemplateAlarmConditionOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
func (o MonitoringTemplateAlarmConditionOutput) MonitoringTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.MonitoringTemplateId }).(pulumi.StringOutput)
}

// (Updatable) The stack monitoring service or application emitting the metric that is evaluated by the alarm.
func (o MonitoringTemplateAlarmConditionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// (Updatable) The resource group OCID.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o MonitoringTemplateAlarmConditionOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The current lifecycle state of the monitoring template
func (o MonitoringTemplateAlarmConditionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The current status of the monitoring template i.e. whether it is Published or Unpublished
func (o MonitoringTemplateAlarmConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o MonitoringTemplateAlarmConditionOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time the alarm condition was created. Format defined by RFC3339.
func (o MonitoringTemplateAlarmConditionOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the alarm condition was updated. Format defined by RFC3339.
func (o MonitoringTemplateAlarmConditionOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringTemplateAlarmCondition) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type MonitoringTemplateAlarmConditionArrayOutput struct{ *pulumi.OutputState }

func (MonitoringTemplateAlarmConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoringTemplateAlarmCondition)(nil)).Elem()
}

func (o MonitoringTemplateAlarmConditionArrayOutput) ToMonitoringTemplateAlarmConditionArrayOutput() MonitoringTemplateAlarmConditionArrayOutput {
	return o
}

func (o MonitoringTemplateAlarmConditionArrayOutput) ToMonitoringTemplateAlarmConditionArrayOutputWithContext(ctx context.Context) MonitoringTemplateAlarmConditionArrayOutput {
	return o
}

func (o MonitoringTemplateAlarmConditionArrayOutput) Index(i pulumi.IntInput) MonitoringTemplateAlarmConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoringTemplateAlarmCondition {
		return vs[0].([]*MonitoringTemplateAlarmCondition)[vs[1].(int)]
	}).(MonitoringTemplateAlarmConditionOutput)
}

type MonitoringTemplateAlarmConditionMapOutput struct{ *pulumi.OutputState }

func (MonitoringTemplateAlarmConditionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoringTemplateAlarmCondition)(nil)).Elem()
}

func (o MonitoringTemplateAlarmConditionMapOutput) ToMonitoringTemplateAlarmConditionMapOutput() MonitoringTemplateAlarmConditionMapOutput {
	return o
}

func (o MonitoringTemplateAlarmConditionMapOutput) ToMonitoringTemplateAlarmConditionMapOutputWithContext(ctx context.Context) MonitoringTemplateAlarmConditionMapOutput {
	return o
}

func (o MonitoringTemplateAlarmConditionMapOutput) MapIndex(k pulumi.StringInput) MonitoringTemplateAlarmConditionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoringTemplateAlarmCondition {
		return vs[0].(map[string]*MonitoringTemplateAlarmCondition)[vs[1].(string)]
	}).(MonitoringTemplateAlarmConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringTemplateAlarmConditionInput)(nil)).Elem(), &MonitoringTemplateAlarmCondition{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringTemplateAlarmConditionArrayInput)(nil)).Elem(), MonitoringTemplateAlarmConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringTemplateAlarmConditionMapInput)(nil)).Elem(), MonitoringTemplateAlarmConditionMap{})
	pulumi.RegisterOutputType(MonitoringTemplateAlarmConditionOutput{})
	pulumi.RegisterOutputType(MonitoringTemplateAlarmConditionArrayOutput{})
	pulumi.RegisterOutputType(MonitoringTemplateAlarmConditionMapOutput{})
}
