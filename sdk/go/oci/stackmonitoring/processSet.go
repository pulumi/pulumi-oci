// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackmonitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Process Set resource in Oracle Cloud Infrastructure Stack Monitoring service.
//
// API to create Process Set.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/StackMonitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := StackMonitoring.NewProcessSet(ctx, "test_process_set", &StackMonitoring.ProcessSetArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				DisplayName:   pulumi.Any(processSetDisplayName),
//				Specification: &stackmonitoring.ProcessSetSpecificationArgs{
//					Items: stackmonitoring.ProcessSetSpecificationItemArray{
//						&stackmonitoring.ProcessSetSpecificationItemArgs{
//							Label:                   pulumi.Any(processSetSpecificationItemsLabel),
//							ProcessCommand:          pulumi.Any(processSetSpecificationItemsProcessCommand),
//							ProcessLineRegexPattern: pulumi.Any(processSetSpecificationItemsProcessLineRegexPattern),
//							ProcessUser:             pulumi.Any(processSetSpecificationItemsProcessUser),
//						},
//					},
//				},
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ProcessSets can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:StackMonitoring/processSet:ProcessSet test_process_set "id"
// ```
type ProcessSet struct {
	pulumi.CustomResourceState

	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Name of the Process Set.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The current revision of the Process Set.
	Revision pulumi.StringOutput `pulumi:"revision"`
	// (Updatable) Collection of regular expression specifications used to identify the processes to be monitored.
	Specification ProcessSetSpecificationOutput `pulumi:"specification"`
	// The current state of the Resource.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the process set was created. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the process set was last updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewProcessSet registers a new resource with the given unique name, arguments, and options.
func NewProcessSet(ctx *pulumi.Context,
	name string, args *ProcessSetArgs, opts ...pulumi.ResourceOption) (*ProcessSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Specification == nil {
		return nil, errors.New("invalid value for required argument 'Specification'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcessSet
	err := ctx.RegisterResource("oci:StackMonitoring/processSet:ProcessSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcessSet gets an existing ProcessSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcessSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcessSetState, opts ...pulumi.ResourceOption) (*ProcessSet, error) {
	var resource ProcessSet
	err := ctx.ReadResource("oci:StackMonitoring/processSet:ProcessSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcessSet resources.
type processSetState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Name of the Process Set.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The current revision of the Process Set.
	Revision *string `pulumi:"revision"`
	// (Updatable) Collection of regular expression specifications used to identify the processes to be monitored.
	Specification *ProcessSetSpecification `pulumi:"specification"`
	// The current state of the Resource.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the process set was created. An RFC3339 formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the process set was last updated. An RFC3339 formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ProcessSetState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Name of the Process Set.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The current revision of the Process Set.
	Revision pulumi.StringPtrInput
	// (Updatable) Collection of regular expression specifications used to identify the processes to be monitored.
	Specification ProcessSetSpecificationPtrInput
	// The current state of the Resource.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The time the process set was created. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// The time the process set was last updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (ProcessSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*processSetState)(nil)).Elem()
}

type processSetArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Name of the Process Set.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Collection of regular expression specifications used to identify the processes to be monitored.
	Specification ProcessSetSpecification `pulumi:"specification"`
}

// The set of arguments for constructing a ProcessSet resource.
type ProcessSetArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Name of the Process Set.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Collection of regular expression specifications used to identify the processes to be monitored.
	Specification ProcessSetSpecificationInput
}

func (ProcessSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*processSetArgs)(nil)).Elem()
}

type ProcessSetInput interface {
	pulumi.Input

	ToProcessSetOutput() ProcessSetOutput
	ToProcessSetOutputWithContext(ctx context.Context) ProcessSetOutput
}

func (*ProcessSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessSet)(nil)).Elem()
}

func (i *ProcessSet) ToProcessSetOutput() ProcessSetOutput {
	return i.ToProcessSetOutputWithContext(context.Background())
}

func (i *ProcessSet) ToProcessSetOutputWithContext(ctx context.Context) ProcessSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessSetOutput)
}

// ProcessSetArrayInput is an input type that accepts ProcessSetArray and ProcessSetArrayOutput values.
// You can construct a concrete instance of `ProcessSetArrayInput` via:
//
//	ProcessSetArray{ ProcessSetArgs{...} }
type ProcessSetArrayInput interface {
	pulumi.Input

	ToProcessSetArrayOutput() ProcessSetArrayOutput
	ToProcessSetArrayOutputWithContext(context.Context) ProcessSetArrayOutput
}

type ProcessSetArray []ProcessSetInput

func (ProcessSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessSet)(nil)).Elem()
}

func (i ProcessSetArray) ToProcessSetArrayOutput() ProcessSetArrayOutput {
	return i.ToProcessSetArrayOutputWithContext(context.Background())
}

func (i ProcessSetArray) ToProcessSetArrayOutputWithContext(ctx context.Context) ProcessSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessSetArrayOutput)
}

// ProcessSetMapInput is an input type that accepts ProcessSetMap and ProcessSetMapOutput values.
// You can construct a concrete instance of `ProcessSetMapInput` via:
//
//	ProcessSetMap{ "key": ProcessSetArgs{...} }
type ProcessSetMapInput interface {
	pulumi.Input

	ToProcessSetMapOutput() ProcessSetMapOutput
	ToProcessSetMapOutputWithContext(context.Context) ProcessSetMapOutput
}

type ProcessSetMap map[string]ProcessSetInput

func (ProcessSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessSet)(nil)).Elem()
}

func (i ProcessSetMap) ToProcessSetMapOutput() ProcessSetMapOutput {
	return i.ToProcessSetMapOutputWithContext(context.Background())
}

func (i ProcessSetMap) ToProcessSetMapOutputWithContext(ctx context.Context) ProcessSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessSetMapOutput)
}

type ProcessSetOutput struct{ *pulumi.OutputState }

func (ProcessSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessSet)(nil)).Elem()
}

func (o ProcessSetOutput) ToProcessSetOutput() ProcessSetOutput {
	return o
}

func (o ProcessSetOutput) ToProcessSetOutputWithContext(ctx context.Context) ProcessSetOutput {
	return o
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o ProcessSetOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o ProcessSetOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Name of the Process Set.
func (o ProcessSetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o ProcessSetOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// The current revision of the Process Set.
func (o ProcessSetOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.StringOutput { return v.Revision }).(pulumi.StringOutput)
}

// (Updatable) Collection of regular expression specifications used to identify the processes to be monitored.
func (o ProcessSetOutput) Specification() ProcessSetSpecificationOutput {
	return o.ApplyT(func(v *ProcessSet) ProcessSetSpecificationOutput { return v.Specification }).(ProcessSetSpecificationOutput)
}

// The current state of the Resource.
func (o ProcessSetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o ProcessSetOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the process set was created. An RFC3339 formatted datetime string.
func (o ProcessSetOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the process set was last updated. An RFC3339 formatted datetime string.
func (o ProcessSetOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessSet) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type ProcessSetArrayOutput struct{ *pulumi.OutputState }

func (ProcessSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessSet)(nil)).Elem()
}

func (o ProcessSetArrayOutput) ToProcessSetArrayOutput() ProcessSetArrayOutput {
	return o
}

func (o ProcessSetArrayOutput) ToProcessSetArrayOutputWithContext(ctx context.Context) ProcessSetArrayOutput {
	return o
}

func (o ProcessSetArrayOutput) Index(i pulumi.IntInput) ProcessSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcessSet {
		return vs[0].([]*ProcessSet)[vs[1].(int)]
	}).(ProcessSetOutput)
}

type ProcessSetMapOutput struct{ *pulumi.OutputState }

func (ProcessSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessSet)(nil)).Elem()
}

func (o ProcessSetMapOutput) ToProcessSetMapOutput() ProcessSetMapOutput {
	return o
}

func (o ProcessSetMapOutput) ToProcessSetMapOutputWithContext(ctx context.Context) ProcessSetMapOutput {
	return o
}

func (o ProcessSetMapOutput) MapIndex(k pulumi.StringInput) ProcessSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcessSet {
		return vs[0].(map[string]*ProcessSet)[vs[1].(string)]
	}).(ProcessSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessSetInput)(nil)).Elem(), &ProcessSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessSetArrayInput)(nil)).Elem(), ProcessSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessSetMapInput)(nil)).Elem(), ProcessSetMap{})
	pulumi.RegisterOutputType(ProcessSetOutput{})
	pulumi.RegisterOutputType(ProcessSetArrayOutput{})
	pulumi.RegisterOutputType(ProcessSetMapOutput{})
}
