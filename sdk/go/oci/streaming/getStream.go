// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streaming

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Stream resource in Oracle Cloud Infrastructure Streaming service.
//
// Gets detailed information about a stream, including the number of partitions.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Streaming"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Streaming.GetStream(ctx, &streaming.GetStreamArgs{
//				StreamId: oci_streaming_stream.Test_stream.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupStream(ctx *pulumi.Context, args *LookupStreamArgs, opts ...pulumi.InvokeOption) (*LookupStreamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamResult
	err := ctx.Invoke("oci:Streaming/getStream:getStream", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStream.
type LookupStreamArgs struct {
	// The OCID of the stream.
	StreamId string `pulumi:"streamId"`
}

// A collection of values returned by getStream.
type LookupStreamResult struct {
	// The OCID of the compartment that contains the stream.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations": {"CostCenter": "42"}}'
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the stream.
	Id string `pulumi:"id"`
	// Any additional details about the current state of the stream.
	LifecycleStateDetails string `pulumi:"lifecycleStateDetails"`
	// The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool's associated subnet.
	MessagesEndpoint string `pulumi:"messagesEndpoint"`
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name string `pulumi:"name"`
	// The number of partitions in the stream.
	Partitions int `pulumi:"partitions"`
	// The retention period of the stream, in hours. This property is read-only.
	RetentionInHours int `pulumi:"retentionInHours"`
	// The current state of the stream.
	State    string `pulumi:"state"`
	StreamId string `pulumi:"streamId"`
	// The OCID of the stream pool that contains the stream.
	StreamPoolId string `pulumi:"streamPoolId"`
	// The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated string `pulumi:"timeCreated"`
}

func LookupStreamOutput(ctx *pulumi.Context, args LookupStreamOutputArgs, opts ...pulumi.InvokeOption) LookupStreamResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStreamResult, error) {
			args := v.(LookupStreamArgs)
			r, err := LookupStream(ctx, &args, opts...)
			var s LookupStreamResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStreamResultOutput)
}

// A collection of arguments for invoking getStream.
type LookupStreamOutputArgs struct {
	// The OCID of the stream.
	StreamId pulumi.StringInput `pulumi:"streamId"`
}

func (LookupStreamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamArgs)(nil)).Elem()
}

// A collection of values returned by getStream.
type LookupStreamResultOutput struct{ *pulumi.OutputState }

func (LookupStreamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamResult)(nil)).Elem()
}

func (o LookupStreamResultOutput) ToLookupStreamResultOutput() LookupStreamResultOutput {
	return o
}

func (o LookupStreamResultOutput) ToLookupStreamResultOutputWithContext(ctx context.Context) LookupStreamResultOutput {
	return o
}

// The OCID of the compartment that contains the stream.
func (o LookupStreamResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations": {"CostCenter": "42"}}'
func (o LookupStreamResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupStreamResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o LookupStreamResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupStreamResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the stream.
func (o LookupStreamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Id }).(pulumi.StringOutput)
}

// Any additional details about the current state of the stream.
func (o LookupStreamResultOutput) LifecycleStateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.LifecycleStateDetails }).(pulumi.StringOutput)
}

// The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool's associated subnet.
func (o LookupStreamResultOutput) MessagesEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.MessagesEndpoint }).(pulumi.StringOutput)
}

// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
func (o LookupStreamResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of partitions in the stream.
func (o LookupStreamResultOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v LookupStreamResult) int { return v.Partitions }).(pulumi.IntOutput)
}

// The retention period of the stream, in hours. This property is read-only.
func (o LookupStreamResultOutput) RetentionInHours() pulumi.IntOutput {
	return o.ApplyT(func(v LookupStreamResult) int { return v.RetentionInHours }).(pulumi.IntOutput)
}

// The current state of the stream.
func (o LookupStreamResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupStreamResultOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.StreamId }).(pulumi.StringOutput)
}

// The OCID of the stream pool that contains the stream.
func (o LookupStreamResultOutput) StreamPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.StreamPoolId }).(pulumi.StringOutput)
}

// The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
func (o LookupStreamResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamResultOutput{})
}
