// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streaming

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Stream Pools in Oracle Cloud Infrastructure Streaming service.
//
// List the stream pools for a given compartment ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Streaming"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Streaming.GetStreamPools(ctx, &streaming.GetStreamPoolsArgs{
//				CompartmentId: _var.Compartment_id,
//				Id:            pulumi.StringRef(_var.Stream_pool_id),
//				Name:          pulumi.StringRef(_var.Stream_pool_name),
//				State:         pulumi.StringRef(_var.Stream_pool_state),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetStreamPools(ctx *pulumi.Context, args *GetStreamPoolsArgs, opts ...pulumi.InvokeOption) (*GetStreamPoolsResult, error) {
	var rv GetStreamPoolsResult
	err := ctx.Invoke("oci:Streaming/getStreamPools:getStreamPools", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamPools.
type GetStreamPoolsArgs struct {
	// The OCID of the compartment.
	CompartmentId string                 `pulumi:"compartmentId"`
	Filters       []GetStreamPoolsFilter `pulumi:"filters"`
	// A filter to return only resources that match the given ID exactly.
	Id *string `pulumi:"id"`
	// A filter to return only resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getStreamPools.
type GetStreamPoolsResult struct {
	// Compartment OCID that the pool belongs to.
	CompartmentId string                 `pulumi:"compartmentId"`
	Filters       []GetStreamPoolsFilter `pulumi:"filters"`
	// The OCID of the stream pool.
	Id *string `pulumi:"id"`
	// The name of the stream pool.
	Name *string `pulumi:"name"`
	// The current state of the stream pool.
	State *string `pulumi:"state"`
	// The list of stream_pools.
	StreamPools []GetStreamPoolsStreamPool `pulumi:"streamPools"`
}

func GetStreamPoolsOutput(ctx *pulumi.Context, args GetStreamPoolsOutputArgs, opts ...pulumi.InvokeOption) GetStreamPoolsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetStreamPoolsResult, error) {
			args := v.(GetStreamPoolsArgs)
			r, err := GetStreamPools(ctx, &args, opts...)
			var s GetStreamPoolsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetStreamPoolsResultOutput)
}

// A collection of arguments for invoking getStreamPools.
type GetStreamPoolsOutputArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput             `pulumi:"compartmentId"`
	Filters       GetStreamPoolsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given ID exactly.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A filter to return only resources that match the given name exactly.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetStreamPoolsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamPoolsArgs)(nil)).Elem()
}

// A collection of values returned by getStreamPools.
type GetStreamPoolsResultOutput struct{ *pulumi.OutputState }

func (GetStreamPoolsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamPoolsResult)(nil)).Elem()
}

func (o GetStreamPoolsResultOutput) ToGetStreamPoolsResultOutput() GetStreamPoolsResultOutput {
	return o
}

func (o GetStreamPoolsResultOutput) ToGetStreamPoolsResultOutputWithContext(ctx context.Context) GetStreamPoolsResultOutput {
	return o
}

// Compartment OCID that the pool belongs to.
func (o GetStreamPoolsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStreamPoolsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetStreamPoolsResultOutput) Filters() GetStreamPoolsFilterArrayOutput {
	return o.ApplyT(func(v GetStreamPoolsResult) []GetStreamPoolsFilter { return v.Filters }).(GetStreamPoolsFilterArrayOutput)
}

// The OCID of the stream pool.
func (o GetStreamPoolsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamPoolsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the stream pool.
func (o GetStreamPoolsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamPoolsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The current state of the stream pool.
func (o GetStreamPoolsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamPoolsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The list of stream_pools.
func (o GetStreamPoolsResultOutput) StreamPools() GetStreamPoolsStreamPoolArrayOutput {
	return o.ApplyT(func(v GetStreamPoolsResult) []GetStreamPoolsStreamPool { return v.StreamPools }).(GetStreamPoolsStreamPoolArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStreamPoolsResultOutput{})
}
