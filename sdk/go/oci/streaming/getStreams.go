// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streaming

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Streams in Oracle Cloud Infrastructure Streaming service.
//
// Lists the streams in the given compartment id.
// If the compartment id is specified, it will list streams in the compartment, regardless of their stream pool.
// If the stream pool id is specified, the action will be scoped to that stream pool.
// The compartment id and stream pool id cannot be specified at the same time.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Streaming"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Streaming.GetStreams(ctx, &streaming.GetStreamsArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				Id:            pulumi.StringRef(streamId),
//				Name:          pulumi.StringRef(streamName),
//				State:         pulumi.StringRef(streamState),
//				StreamPoolId:  pulumi.StringRef(testStreamPool.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetStreams(ctx *pulumi.Context, args *GetStreamsArgs, opts ...pulumi.InvokeOption) (*GetStreamsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStreamsResult
	err := ctx.Invoke("oci:Streaming/getStreams:getStreams", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreams.
type GetStreamsArgs struct {
	// The OCID of the compartment. Is exclusive with the `streamPoolId` parameter. One of them is required.
	CompartmentId *string            `pulumi:"compartmentId"`
	Filters       []GetStreamsFilter `pulumi:"filters"`
	// A filter to return only resources that match the given ID exactly.
	Id *string `pulumi:"id"`
	// A filter to return only resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State *string `pulumi:"state"`
	// The OCID of the stream pool. Is exclusive with the `compartmentId` parameter. One of them is required.
	StreamPoolId *string `pulumi:"streamPoolId"`
}

// A collection of values returned by getStreams.
type GetStreamsResult struct {
	// The OCID of the compartment that contains the stream.
	CompartmentId *string            `pulumi:"compartmentId"`
	Filters       []GetStreamsFilter `pulumi:"filters"`
	// The OCID of the stream.
	Id *string `pulumi:"id"`
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name *string `pulumi:"name"`
	// The current state of the stream.
	State *string `pulumi:"state"`
	// The OCID of the stream pool that contains the stream.
	StreamPoolId *string `pulumi:"streamPoolId"`
	// The list of streams.
	Streams []GetStreamsStream `pulumi:"streams"`
}

func GetStreamsOutput(ctx *pulumi.Context, args GetStreamsOutputArgs, opts ...pulumi.InvokeOption) GetStreamsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetStreamsResultOutput, error) {
			args := v.(GetStreamsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Streaming/getStreams:getStreams", args, GetStreamsResultOutput{}, options).(GetStreamsResultOutput), nil
		}).(GetStreamsResultOutput)
}

// A collection of arguments for invoking getStreams.
type GetStreamsOutputArgs struct {
	// The OCID of the compartment. Is exclusive with the `streamPoolId` parameter. One of them is required.
	CompartmentId pulumi.StringPtrInput      `pulumi:"compartmentId"`
	Filters       GetStreamsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given ID exactly.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A filter to return only resources that match the given name exactly.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The OCID of the stream pool. Is exclusive with the `compartmentId` parameter. One of them is required.
	StreamPoolId pulumi.StringPtrInput `pulumi:"streamPoolId"`
}

func (GetStreamsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamsArgs)(nil)).Elem()
}

// A collection of values returned by getStreams.
type GetStreamsResultOutput struct{ *pulumi.OutputState }

func (GetStreamsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamsResult)(nil)).Elem()
}

func (o GetStreamsResultOutput) ToGetStreamsResultOutput() GetStreamsResultOutput {
	return o
}

func (o GetStreamsResultOutput) ToGetStreamsResultOutputWithContext(ctx context.Context) GetStreamsResultOutput {
	return o
}

// The OCID of the compartment that contains the stream.
func (o GetStreamsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetStreamsResultOutput) Filters() GetStreamsFilterArrayOutput {
	return o.ApplyT(func(v GetStreamsResult) []GetStreamsFilter { return v.Filters }).(GetStreamsFilterArrayOutput)
}

// The OCID of the stream.
func (o GetStreamsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
func (o GetStreamsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The current state of the stream.
func (o GetStreamsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The OCID of the stream pool that contains the stream.
func (o GetStreamsResultOutput) StreamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamsResult) *string { return v.StreamPoolId }).(pulumi.StringPtrOutput)
}

// The list of streams.
func (o GetStreamsResultOutput) Streams() GetStreamsStreamArrayOutput {
	return o.ApplyT(func(v GetStreamsResult) []GetStreamsStream { return v.Streams }).(GetStreamsStreamArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStreamsResultOutput{})
}
