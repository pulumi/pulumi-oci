// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tenantmanagercontrolplane

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Subscription Available Regions in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
//
// List the available regions based on subscription ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/tenantmanagercontrolplane"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tenantmanagercontrolplane.GetSubscriptionAvailableRegions(ctx, &tenantmanagercontrolplane.GetSubscriptionAvailableRegionsArgs{
//				SubscriptionId: testSubscription.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSubscriptionAvailableRegions(ctx *pulumi.Context, args *GetSubscriptionAvailableRegionsArgs, opts ...pulumi.InvokeOption) (*GetSubscriptionAvailableRegionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSubscriptionAvailableRegionsResult
	err := ctx.Invoke("oci:Tenantmanagercontrolplane/getSubscriptionAvailableRegions:getSubscriptionAvailableRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubscriptionAvailableRegions.
type GetSubscriptionAvailableRegionsArgs struct {
	Filters []GetSubscriptionAvailableRegionsFilter `pulumi:"filters"`
	// OCID of the subscription.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// A collection of values returned by getSubscriptionAvailableRegions.
type GetSubscriptionAvailableRegionsResult struct {
	// The list of available_region_collection.
	AvailableRegionCollections []GetSubscriptionAvailableRegionsAvailableRegionCollection `pulumi:"availableRegionCollections"`
	Filters                    []GetSubscriptionAvailableRegionsFilter                    `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	SubscriptionId string `pulumi:"subscriptionId"`
}

func GetSubscriptionAvailableRegionsOutput(ctx *pulumi.Context, args GetSubscriptionAvailableRegionsOutputArgs, opts ...pulumi.InvokeOption) GetSubscriptionAvailableRegionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSubscriptionAvailableRegionsResultOutput, error) {
			args := v.(GetSubscriptionAvailableRegionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Tenantmanagercontrolplane/getSubscriptionAvailableRegions:getSubscriptionAvailableRegions", args, GetSubscriptionAvailableRegionsResultOutput{}, options).(GetSubscriptionAvailableRegionsResultOutput), nil
		}).(GetSubscriptionAvailableRegionsResultOutput)
}

// A collection of arguments for invoking getSubscriptionAvailableRegions.
type GetSubscriptionAvailableRegionsOutputArgs struct {
	Filters GetSubscriptionAvailableRegionsFilterArrayInput `pulumi:"filters"`
	// OCID of the subscription.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
}

func (GetSubscriptionAvailableRegionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionAvailableRegionsArgs)(nil)).Elem()
}

// A collection of values returned by getSubscriptionAvailableRegions.
type GetSubscriptionAvailableRegionsResultOutput struct{ *pulumi.OutputState }

func (GetSubscriptionAvailableRegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionAvailableRegionsResult)(nil)).Elem()
}

func (o GetSubscriptionAvailableRegionsResultOutput) ToGetSubscriptionAvailableRegionsResultOutput() GetSubscriptionAvailableRegionsResultOutput {
	return o
}

func (o GetSubscriptionAvailableRegionsResultOutput) ToGetSubscriptionAvailableRegionsResultOutputWithContext(ctx context.Context) GetSubscriptionAvailableRegionsResultOutput {
	return o
}

// The list of available_region_collection.
func (o GetSubscriptionAvailableRegionsResultOutput) AvailableRegionCollections() GetSubscriptionAvailableRegionsAvailableRegionCollectionArrayOutput {
	return o.ApplyT(func(v GetSubscriptionAvailableRegionsResult) []GetSubscriptionAvailableRegionsAvailableRegionCollection {
		return v.AvailableRegionCollections
	}).(GetSubscriptionAvailableRegionsAvailableRegionCollectionArrayOutput)
}

func (o GetSubscriptionAvailableRegionsResultOutput) Filters() GetSubscriptionAvailableRegionsFilterArrayOutput {
	return o.ApplyT(func(v GetSubscriptionAvailableRegionsResult) []GetSubscriptionAvailableRegionsFilter {
		return v.Filters
	}).(GetSubscriptionAvailableRegionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSubscriptionAvailableRegionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionAvailableRegionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSubscriptionAvailableRegionsResultOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionAvailableRegionsResult) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSubscriptionAvailableRegionsResultOutput{})
}
