// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tenantmanagercontrolplane

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Subscription Mapping resource in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
//
// Get the subscription mapping details by subscription mapping ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/tenantmanagercontrolplane"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tenantmanagercontrolplane.GetSubscriptionMapping(ctx, &tenantmanagercontrolplane.GetSubscriptionMappingArgs{
//				SubscriptionMappingId: testSubscriptionMappingOciTenantmanagercontrolplaneSubscriptionMapping.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSubscriptionMapping(ctx *pulumi.Context, args *LookupSubscriptionMappingArgs, opts ...pulumi.InvokeOption) (*LookupSubscriptionMappingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubscriptionMappingResult
	err := ctx.Invoke("oci:Tenantmanagercontrolplane/getSubscriptionMapping:getSubscriptionMapping", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubscriptionMapping.
type LookupSubscriptionMappingArgs struct {
	// OCID of the subscriptionMappingId.
	SubscriptionMappingId string `pulumi:"subscriptionMappingId"`
}

// A collection of values returned by getSubscriptionMapping.
type LookupSubscriptionMappingResult struct {
	// OCID of the compartment. Always a tenancy OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// OCID of the mapping between subscription and compartment identified by the tenancy.
	Id string `pulumi:"id"`
	// Denotes if the subscription is explicity assigned to the root compartment or tenancy.
	IsExplicitlyAssigned bool `pulumi:"isExplicitlyAssigned"`
	// Lifecycle state of the subscriptionMapping.
	State string `pulumi:"state"`
	// OCID of the subscription.
	SubscriptionId        string `pulumi:"subscriptionId"`
	SubscriptionMappingId string `pulumi:"subscriptionMappingId"`
	// Date-time when subscription mapping was created.
	TimeCreated string `pulumi:"timeCreated"`
	// Date-time when subscription mapping was terminated.
	TimeTerminated string `pulumi:"timeTerminated"`
	// Date-time when subscription mapping was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupSubscriptionMappingOutput(ctx *pulumi.Context, args LookupSubscriptionMappingOutputArgs, opts ...pulumi.InvokeOption) LookupSubscriptionMappingResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubscriptionMappingResultOutput, error) {
			args := v.(LookupSubscriptionMappingArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Tenantmanagercontrolplane/getSubscriptionMapping:getSubscriptionMapping", args, LookupSubscriptionMappingResultOutput{}, options).(LookupSubscriptionMappingResultOutput), nil
		}).(LookupSubscriptionMappingResultOutput)
}

// A collection of arguments for invoking getSubscriptionMapping.
type LookupSubscriptionMappingOutputArgs struct {
	// OCID of the subscriptionMappingId.
	SubscriptionMappingId pulumi.StringInput `pulumi:"subscriptionMappingId"`
}

func (LookupSubscriptionMappingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionMappingArgs)(nil)).Elem()
}

// A collection of values returned by getSubscriptionMapping.
type LookupSubscriptionMappingResultOutput struct{ *pulumi.OutputState }

func (LookupSubscriptionMappingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionMappingResult)(nil)).Elem()
}

func (o LookupSubscriptionMappingResultOutput) ToLookupSubscriptionMappingResultOutput() LookupSubscriptionMappingResultOutput {
	return o
}

func (o LookupSubscriptionMappingResultOutput) ToLookupSubscriptionMappingResultOutputWithContext(ctx context.Context) LookupSubscriptionMappingResultOutput {
	return o
}

// OCID of the compartment. Always a tenancy OCID.
func (o LookupSubscriptionMappingResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// OCID of the mapping between subscription and compartment identified by the tenancy.
func (o LookupSubscriptionMappingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.Id }).(pulumi.StringOutput)
}

// Denotes if the subscription is explicity assigned to the root compartment or tenancy.
func (o LookupSubscriptionMappingResultOutput) IsExplicitlyAssigned() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) bool { return v.IsExplicitlyAssigned }).(pulumi.BoolOutput)
}

// Lifecycle state of the subscriptionMapping.
func (o LookupSubscriptionMappingResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.State }).(pulumi.StringOutput)
}

// OCID of the subscription.
func (o LookupSubscriptionMappingResultOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

func (o LookupSubscriptionMappingResultOutput) SubscriptionMappingId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.SubscriptionMappingId }).(pulumi.StringOutput)
}

// Date-time when subscription mapping was created.
func (o LookupSubscriptionMappingResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// Date-time when subscription mapping was terminated.
func (o LookupSubscriptionMappingResultOutput) TimeTerminated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.TimeTerminated }).(pulumi.StringOutput)
}

// Date-time when subscription mapping was updated.
func (o LookupSubscriptionMappingResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscriptionMappingResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscriptionMappingResultOutput{})
}
