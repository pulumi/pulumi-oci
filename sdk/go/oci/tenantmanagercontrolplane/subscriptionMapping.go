// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tenantmanagercontrolplane

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Subscription Mapping resource in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
//
// Assign the tenancy record identified by the compartment ID to the given subscription ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/tenantmanagercontrolplane"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tenantmanagercontrolplane.NewSubscriptionMapping(ctx, "test_subscription_mapping", &tenantmanagercontrolplane.SubscriptionMappingArgs{
//				CompartmentId:  pulumi.Any(compartmentId),
//				SubscriptionId: pulumi.Any(testSubscription.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SubscriptionMappings can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Tenantmanagercontrolplane/subscriptionMapping:SubscriptionMapping test_subscription_mapping "id"
// ```
type SubscriptionMapping struct {
	pulumi.CustomResourceState

	// OCID of the compartment. Always a tenancy OCID.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Denotes if the subscription is explicity assigned to the root compartment or tenancy.
	IsExplicitlyAssigned pulumi.BoolOutput `pulumi:"isExplicitlyAssigned"`
	// Lifecycle state of the subscriptionMapping.
	State pulumi.StringOutput `pulumi:"state"`
	// OCID of Subscription.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// Date-time when subscription mapping was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date-time when subscription mapping was terminated.
	TimeTerminated pulumi.StringOutput `pulumi:"timeTerminated"`
	// Date-time when subscription mapping was updated.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewSubscriptionMapping registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionMapping(ctx *pulumi.Context,
	name string, args *SubscriptionMappingArgs, opts ...pulumi.ResourceOption) (*SubscriptionMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriptionMapping
	err := ctx.RegisterResource("oci:Tenantmanagercontrolplane/subscriptionMapping:SubscriptionMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionMapping gets an existing SubscriptionMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionMappingState, opts ...pulumi.ResourceOption) (*SubscriptionMapping, error) {
	var resource SubscriptionMapping
	err := ctx.ReadResource("oci:Tenantmanagercontrolplane/subscriptionMapping:SubscriptionMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionMapping resources.
type subscriptionMappingState struct {
	// OCID of the compartment. Always a tenancy OCID.
	CompartmentId *string `pulumi:"compartmentId"`
	// Denotes if the subscription is explicity assigned to the root compartment or tenancy.
	IsExplicitlyAssigned *bool `pulumi:"isExplicitlyAssigned"`
	// Lifecycle state of the subscriptionMapping.
	State *string `pulumi:"state"`
	// OCID of Subscription.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Date-time when subscription mapping was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// Date-time when subscription mapping was terminated.
	TimeTerminated *string `pulumi:"timeTerminated"`
	// Date-time when subscription mapping was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type SubscriptionMappingState struct {
	// OCID of the compartment. Always a tenancy OCID.
	CompartmentId pulumi.StringPtrInput
	// Denotes if the subscription is explicity assigned to the root compartment or tenancy.
	IsExplicitlyAssigned pulumi.BoolPtrInput
	// Lifecycle state of the subscriptionMapping.
	State pulumi.StringPtrInput
	// OCID of Subscription.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId pulumi.StringPtrInput
	// Date-time when subscription mapping was created.
	TimeCreated pulumi.StringPtrInput
	// Date-time when subscription mapping was terminated.
	TimeTerminated pulumi.StringPtrInput
	// Date-time when subscription mapping was updated.
	TimeUpdated pulumi.StringPtrInput
}

func (SubscriptionMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionMappingState)(nil)).Elem()
}

type subscriptionMappingArgs struct {
	// OCID of the compartment. Always a tenancy OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// OCID of Subscription.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a SubscriptionMapping resource.
type SubscriptionMappingArgs struct {
	// OCID of the compartment. Always a tenancy OCID.
	CompartmentId pulumi.StringInput
	// OCID of Subscription.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId pulumi.StringInput
}

func (SubscriptionMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionMappingArgs)(nil)).Elem()
}

type SubscriptionMappingInput interface {
	pulumi.Input

	ToSubscriptionMappingOutput() SubscriptionMappingOutput
	ToSubscriptionMappingOutputWithContext(ctx context.Context) SubscriptionMappingOutput
}

func (*SubscriptionMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionMapping)(nil)).Elem()
}

func (i *SubscriptionMapping) ToSubscriptionMappingOutput() SubscriptionMappingOutput {
	return i.ToSubscriptionMappingOutputWithContext(context.Background())
}

func (i *SubscriptionMapping) ToSubscriptionMappingOutputWithContext(ctx context.Context) SubscriptionMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionMappingOutput)
}

// SubscriptionMappingArrayInput is an input type that accepts SubscriptionMappingArray and SubscriptionMappingArrayOutput values.
// You can construct a concrete instance of `SubscriptionMappingArrayInput` via:
//
//	SubscriptionMappingArray{ SubscriptionMappingArgs{...} }
type SubscriptionMappingArrayInput interface {
	pulumi.Input

	ToSubscriptionMappingArrayOutput() SubscriptionMappingArrayOutput
	ToSubscriptionMappingArrayOutputWithContext(context.Context) SubscriptionMappingArrayOutput
}

type SubscriptionMappingArray []SubscriptionMappingInput

func (SubscriptionMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionMapping)(nil)).Elem()
}

func (i SubscriptionMappingArray) ToSubscriptionMappingArrayOutput() SubscriptionMappingArrayOutput {
	return i.ToSubscriptionMappingArrayOutputWithContext(context.Background())
}

func (i SubscriptionMappingArray) ToSubscriptionMappingArrayOutputWithContext(ctx context.Context) SubscriptionMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionMappingArrayOutput)
}

// SubscriptionMappingMapInput is an input type that accepts SubscriptionMappingMap and SubscriptionMappingMapOutput values.
// You can construct a concrete instance of `SubscriptionMappingMapInput` via:
//
//	SubscriptionMappingMap{ "key": SubscriptionMappingArgs{...} }
type SubscriptionMappingMapInput interface {
	pulumi.Input

	ToSubscriptionMappingMapOutput() SubscriptionMappingMapOutput
	ToSubscriptionMappingMapOutputWithContext(context.Context) SubscriptionMappingMapOutput
}

type SubscriptionMappingMap map[string]SubscriptionMappingInput

func (SubscriptionMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionMapping)(nil)).Elem()
}

func (i SubscriptionMappingMap) ToSubscriptionMappingMapOutput() SubscriptionMappingMapOutput {
	return i.ToSubscriptionMappingMapOutputWithContext(context.Background())
}

func (i SubscriptionMappingMap) ToSubscriptionMappingMapOutputWithContext(ctx context.Context) SubscriptionMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionMappingMapOutput)
}

type SubscriptionMappingOutput struct{ *pulumi.OutputState }

func (SubscriptionMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionMapping)(nil)).Elem()
}

func (o SubscriptionMappingOutput) ToSubscriptionMappingOutput() SubscriptionMappingOutput {
	return o
}

func (o SubscriptionMappingOutput) ToSubscriptionMappingOutputWithContext(ctx context.Context) SubscriptionMappingOutput {
	return o
}

// OCID of the compartment. Always a tenancy OCID.
func (o SubscriptionMappingOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionMapping) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Denotes if the subscription is explicity assigned to the root compartment or tenancy.
func (o SubscriptionMappingOutput) IsExplicitlyAssigned() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubscriptionMapping) pulumi.BoolOutput { return v.IsExplicitlyAssigned }).(pulumi.BoolOutput)
}

// Lifecycle state of the subscriptionMapping.
func (o SubscriptionMappingOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionMapping) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// OCID of Subscription.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SubscriptionMappingOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionMapping) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Date-time when subscription mapping was created.
func (o SubscriptionMappingOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionMapping) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// Date-time when subscription mapping was terminated.
func (o SubscriptionMappingOutput) TimeTerminated() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionMapping) pulumi.StringOutput { return v.TimeTerminated }).(pulumi.StringOutput)
}

// Date-time when subscription mapping was updated.
func (o SubscriptionMappingOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionMapping) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type SubscriptionMappingArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionMapping)(nil)).Elem()
}

func (o SubscriptionMappingArrayOutput) ToSubscriptionMappingArrayOutput() SubscriptionMappingArrayOutput {
	return o
}

func (o SubscriptionMappingArrayOutput) ToSubscriptionMappingArrayOutputWithContext(ctx context.Context) SubscriptionMappingArrayOutput {
	return o
}

func (o SubscriptionMappingArrayOutput) Index(i pulumi.IntInput) SubscriptionMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionMapping {
		return vs[0].([]*SubscriptionMapping)[vs[1].(int)]
	}).(SubscriptionMappingOutput)
}

type SubscriptionMappingMapOutput struct{ *pulumi.OutputState }

func (SubscriptionMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionMapping)(nil)).Elem()
}

func (o SubscriptionMappingMapOutput) ToSubscriptionMappingMapOutput() SubscriptionMappingMapOutput {
	return o
}

func (o SubscriptionMappingMapOutput) ToSubscriptionMappingMapOutputWithContext(ctx context.Context) SubscriptionMappingMapOutput {
	return o
}

func (o SubscriptionMappingMapOutput) MapIndex(k pulumi.StringInput) SubscriptionMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionMapping {
		return vs[0].(map[string]*SubscriptionMapping)[vs[1].(string)]
	}).(SubscriptionMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionMappingInput)(nil)).Elem(), &SubscriptionMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionMappingArrayInput)(nil)).Elem(), SubscriptionMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionMappingMapInput)(nil)).Elem(), SubscriptionMappingMap{})
	pulumi.RegisterOutputType(SubscriptionMappingOutput{})
	pulumi.RegisterOutputType(SubscriptionMappingArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionMappingMapOutput{})
}
