// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package usageproxy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Usagelimits in Oracle Cloud Infrastructure Usage Proxy service.
//
// Returns the list of usage limit for the subscription ID and tenant ID.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/UsageProxy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := UsageProxy.GetUsagelimits(ctx, &usageproxy.GetUsagelimitsArgs{
//				CompartmentId:  compartmentId,
//				SubscriptionId: testSubscription.Id,
//				LimitType:      pulumi.StringRef(usagelimitLimitType),
//				ResourceType:   pulumi.StringRef(usagelimitResourceType),
//				ServiceType:    pulumi.StringRef(usagelimitServiceType),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetUsagelimits(ctx *pulumi.Context, args *GetUsagelimitsArgs, opts ...pulumi.InvokeOption) (*GetUsagelimitsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUsagelimitsResult
	err := ctx.Invoke("oci:UsageProxy/getUsagelimits:getUsagelimits", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsagelimits.
type GetUsagelimitsArgs struct {
	// The OCID of the root compartment.
	CompartmentId string                 `pulumi:"compartmentId"`
	Filters       []GetUsagelimitsFilter `pulumi:"filters"`
	// Hard or soft limit. Hard limits lead to breaches, soft to alerts.
	LimitType *string `pulumi:"limitType"`
	// Resource Name.
	ResourceType *string `pulumi:"resourceType"`
	// Service Name.
	ServiceType *string `pulumi:"serviceType"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// A collection of values returned by getUsagelimits.
type GetUsagelimitsResult struct {
	CompartmentId string                 `pulumi:"compartmentId"`
	Filters       []GetUsagelimitsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The limit type of the usage limit
	LimitType      *string `pulumi:"limitType"`
	ResourceType   *string `pulumi:"resourceType"`
	ServiceType    *string `pulumi:"serviceType"`
	SubscriptionId string  `pulumi:"subscriptionId"`
	// The list of usage_limit_collection.
	UsageLimitCollections []GetUsagelimitsUsageLimitCollection `pulumi:"usageLimitCollections"`
}

func GetUsagelimitsOutput(ctx *pulumi.Context, args GetUsagelimitsOutputArgs, opts ...pulumi.InvokeOption) GetUsagelimitsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUsagelimitsResult, error) {
			args := v.(GetUsagelimitsArgs)
			r, err := GetUsagelimits(ctx, &args, opts...)
			var s GetUsagelimitsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUsagelimitsResultOutput)
}

// A collection of arguments for invoking getUsagelimits.
type GetUsagelimitsOutputArgs struct {
	// The OCID of the root compartment.
	CompartmentId pulumi.StringInput             `pulumi:"compartmentId"`
	Filters       GetUsagelimitsFilterArrayInput `pulumi:"filters"`
	// Hard or soft limit. Hard limits lead to breaches, soft to alerts.
	LimitType pulumi.StringPtrInput `pulumi:"limitType"`
	// Resource Name.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// Service Name.
	ServiceType pulumi.StringPtrInput `pulumi:"serviceType"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
}

func (GetUsagelimitsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsArgs)(nil)).Elem()
}

// A collection of values returned by getUsagelimits.
type GetUsagelimitsResultOutput struct{ *pulumi.OutputState }

func (GetUsagelimitsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsResult)(nil)).Elem()
}

func (o GetUsagelimitsResultOutput) ToGetUsagelimitsResultOutput() GetUsagelimitsResultOutput {
	return o
}

func (o GetUsagelimitsResultOutput) ToGetUsagelimitsResultOutputWithContext(ctx context.Context) GetUsagelimitsResultOutput {
	return o
}

func (o GetUsagelimitsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetUsagelimitsResultOutput) Filters() GetUsagelimitsFilterArrayOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) []GetUsagelimitsFilter { return v.Filters }).(GetUsagelimitsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsagelimitsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The limit type of the usage limit
func (o GetUsagelimitsResultOutput) LimitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) *string { return v.LimitType }).(pulumi.StringPtrOutput)
}

func (o GetUsagelimitsResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

func (o GetUsagelimitsResultOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

func (o GetUsagelimitsResultOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The list of usage_limit_collection.
func (o GetUsagelimitsResultOutput) UsageLimitCollections() GetUsagelimitsUsageLimitCollectionArrayOutput {
	return o.ApplyT(func(v GetUsagelimitsResult) []GetUsagelimitsUsageLimitCollection { return v.UsageLimitCollections }).(GetUsagelimitsUsageLimitCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsagelimitsResultOutput{})
}
