// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package usageproxy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SubscriptionRedeemableUserItem struct {
	// The email ID for a user that can redeem rewards.
	EmailId string `pulumi:"emailId"`
}

// SubscriptionRedeemableUserItemInput is an input type that accepts SubscriptionRedeemableUserItemArgs and SubscriptionRedeemableUserItemOutput values.
// You can construct a concrete instance of `SubscriptionRedeemableUserItemInput` via:
//
//          SubscriptionRedeemableUserItemArgs{...}
type SubscriptionRedeemableUserItemInput interface {
	pulumi.Input

	ToSubscriptionRedeemableUserItemOutput() SubscriptionRedeemableUserItemOutput
	ToSubscriptionRedeemableUserItemOutputWithContext(context.Context) SubscriptionRedeemableUserItemOutput
}

type SubscriptionRedeemableUserItemArgs struct {
	// The email ID for a user that can redeem rewards.
	EmailId pulumi.StringInput `pulumi:"emailId"`
}

func (SubscriptionRedeemableUserItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i SubscriptionRedeemableUserItemArgs) ToSubscriptionRedeemableUserItemOutput() SubscriptionRedeemableUserItemOutput {
	return i.ToSubscriptionRedeemableUserItemOutputWithContext(context.Background())
}

func (i SubscriptionRedeemableUserItemArgs) ToSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRedeemableUserItemOutput)
}

// SubscriptionRedeemableUserItemArrayInput is an input type that accepts SubscriptionRedeemableUserItemArray and SubscriptionRedeemableUserItemArrayOutput values.
// You can construct a concrete instance of `SubscriptionRedeemableUserItemArrayInput` via:
//
//          SubscriptionRedeemableUserItemArray{ SubscriptionRedeemableUserItemArgs{...} }
type SubscriptionRedeemableUserItemArrayInput interface {
	pulumi.Input

	ToSubscriptionRedeemableUserItemArrayOutput() SubscriptionRedeemableUserItemArrayOutput
	ToSubscriptionRedeemableUserItemArrayOutputWithContext(context.Context) SubscriptionRedeemableUserItemArrayOutput
}

type SubscriptionRedeemableUserItemArray []SubscriptionRedeemableUserItemInput

func (SubscriptionRedeemableUserItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i SubscriptionRedeemableUserItemArray) ToSubscriptionRedeemableUserItemArrayOutput() SubscriptionRedeemableUserItemArrayOutput {
	return i.ToSubscriptionRedeemableUserItemArrayOutputWithContext(context.Background())
}

func (i SubscriptionRedeemableUserItemArray) ToSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRedeemableUserItemArrayOutput)
}

type SubscriptionRedeemableUserItemOutput struct{ *pulumi.OutputState }

func (SubscriptionRedeemableUserItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o SubscriptionRedeemableUserItemOutput) ToSubscriptionRedeemableUserItemOutput() SubscriptionRedeemableUserItemOutput {
	return o
}

func (o SubscriptionRedeemableUserItemOutput) ToSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemOutput {
	return o
}

// The email ID for a user that can redeem rewards.
func (o SubscriptionRedeemableUserItemOutput) EmailId() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionRedeemableUserItem) string { return v.EmailId }).(pulumi.StringOutput)
}

type SubscriptionRedeemableUserItemArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionRedeemableUserItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o SubscriptionRedeemableUserItemArrayOutput) ToSubscriptionRedeemableUserItemArrayOutput() SubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o SubscriptionRedeemableUserItemArrayOutput) ToSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o SubscriptionRedeemableUserItemArrayOutput) Index(i pulumi.IntInput) SubscriptionRedeemableUserItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionRedeemableUserItem {
		return vs[0].([]SubscriptionRedeemableUserItem)[vs[1].(int)]
	}).(SubscriptionRedeemableUserItemOutput)
}

type GetSubscriptionProductItem struct {
	// The earned rewards for the product.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards bool `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName string `pulumi:"productName"`
	// The rate card product number.
	ProductNumber string `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount float64 `pulumi:"usageAmount"`
}

// GetSubscriptionProductItemInput is an input type that accepts GetSubscriptionProductItemArgs and GetSubscriptionProductItemOutput values.
// You can construct a concrete instance of `GetSubscriptionProductItemInput` via:
//
//          GetSubscriptionProductItemArgs{...}
type GetSubscriptionProductItemInput interface {
	pulumi.Input

	ToGetSubscriptionProductItemOutput() GetSubscriptionProductItemOutput
	ToGetSubscriptionProductItemOutputWithContext(context.Context) GetSubscriptionProductItemOutput
}

type GetSubscriptionProductItemArgs struct {
	// The earned rewards for the product.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards pulumi.BoolInput `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName pulumi.StringInput `pulumi:"productName"`
	// The rate card product number.
	ProductNumber pulumi.StringInput `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
}

func (GetSubscriptionProductItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductItem)(nil)).Elem()
}

func (i GetSubscriptionProductItemArgs) ToGetSubscriptionProductItemOutput() GetSubscriptionProductItemOutput {
	return i.ToGetSubscriptionProductItemOutputWithContext(context.Background())
}

func (i GetSubscriptionProductItemArgs) ToGetSubscriptionProductItemOutputWithContext(ctx context.Context) GetSubscriptionProductItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductItemOutput)
}

// GetSubscriptionProductItemArrayInput is an input type that accepts GetSubscriptionProductItemArray and GetSubscriptionProductItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductItemArrayInput` via:
//
//          GetSubscriptionProductItemArray{ GetSubscriptionProductItemArgs{...} }
type GetSubscriptionProductItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductItemArrayOutput() GetSubscriptionProductItemArrayOutput
	ToGetSubscriptionProductItemArrayOutputWithContext(context.Context) GetSubscriptionProductItemArrayOutput
}

type GetSubscriptionProductItemArray []GetSubscriptionProductItemInput

func (GetSubscriptionProductItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductItem)(nil)).Elem()
}

func (i GetSubscriptionProductItemArray) ToGetSubscriptionProductItemArrayOutput() GetSubscriptionProductItemArrayOutput {
	return i.ToGetSubscriptionProductItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductItemArray) ToGetSubscriptionProductItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductItemArrayOutput)
}

type GetSubscriptionProductItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductItem)(nil)).Elem()
}

func (o GetSubscriptionProductItemOutput) ToGetSubscriptionProductItemOutput() GetSubscriptionProductItemOutput {
	return o
}

func (o GetSubscriptionProductItemOutput) ToGetSubscriptionProductItemOutputWithContext(ctx context.Context) GetSubscriptionProductItemOutput {
	return o
}

// The earned rewards for the product.
func (o GetSubscriptionProductItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The boolean parameter to indicate if the product is eligible to earn rewards.
func (o GetSubscriptionProductItemOutput) IsEligibleToEarnRewards() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionProductItem) bool { return v.IsEligibleToEarnRewards }).(pulumi.BoolOutput)
}

// The rate card product name.
func (o GetSubscriptionProductItemOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductItem) string { return v.ProductName }).(pulumi.StringOutput)
}

// The rate card product number.
func (o GetSubscriptionProductItemOutput) ProductNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductItem) string { return v.ProductNumber }).(pulumi.StringOutput)
}

// The rate card product usage amount.
func (o GetSubscriptionProductItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

type GetSubscriptionProductItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductItem)(nil)).Elem()
}

func (o GetSubscriptionProductItemArrayOutput) ToGetSubscriptionProductItemArrayOutput() GetSubscriptionProductItemArrayOutput {
	return o
}

func (o GetSubscriptionProductItemArrayOutput) ToGetSubscriptionProductItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductItemArrayOutput {
	return o
}

func (o GetSubscriptionProductItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductItem {
		return vs[0].([]GetSubscriptionProductItem)[vs[1].(int)]
	}).(GetSubscriptionProductItemOutput)
}

type GetSubscriptionProductsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSubscriptionProductsFilterInput is an input type that accepts GetSubscriptionProductsFilterArgs and GetSubscriptionProductsFilterOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsFilterInput` via:
//
//          GetSubscriptionProductsFilterArgs{...}
type GetSubscriptionProductsFilterInput interface {
	pulumi.Input

	ToGetSubscriptionProductsFilterOutput() GetSubscriptionProductsFilterOutput
	ToGetSubscriptionProductsFilterOutputWithContext(context.Context) GetSubscriptionProductsFilterOutput
}

type GetSubscriptionProductsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSubscriptionProductsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsFilter)(nil)).Elem()
}

func (i GetSubscriptionProductsFilterArgs) ToGetSubscriptionProductsFilterOutput() GetSubscriptionProductsFilterOutput {
	return i.ToGetSubscriptionProductsFilterOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsFilterArgs) ToGetSubscriptionProductsFilterOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsFilterOutput)
}

// GetSubscriptionProductsFilterArrayInput is an input type that accepts GetSubscriptionProductsFilterArray and GetSubscriptionProductsFilterArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsFilterArrayInput` via:
//
//          GetSubscriptionProductsFilterArray{ GetSubscriptionProductsFilterArgs{...} }
type GetSubscriptionProductsFilterArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsFilterArrayOutput() GetSubscriptionProductsFilterArrayOutput
	ToGetSubscriptionProductsFilterArrayOutputWithContext(context.Context) GetSubscriptionProductsFilterArrayOutput
}

type GetSubscriptionProductsFilterArray []GetSubscriptionProductsFilterInput

func (GetSubscriptionProductsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsFilter)(nil)).Elem()
}

func (i GetSubscriptionProductsFilterArray) ToGetSubscriptionProductsFilterArrayOutput() GetSubscriptionProductsFilterArrayOutput {
	return i.ToGetSubscriptionProductsFilterArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsFilterArray) ToGetSubscriptionProductsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsFilterArrayOutput)
}

type GetSubscriptionProductsFilterOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsFilter)(nil)).Elem()
}

func (o GetSubscriptionProductsFilterOutput) ToGetSubscriptionProductsFilterOutput() GetSubscriptionProductsFilterOutput {
	return o
}

func (o GetSubscriptionProductsFilterOutput) ToGetSubscriptionProductsFilterOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterOutput {
	return o
}

func (o GetSubscriptionProductsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSubscriptionProductsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubscriptionProductsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSubscriptionProductsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionProductsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSubscriptionProductsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsFilter)(nil)).Elem()
}

func (o GetSubscriptionProductsFilterArrayOutput) ToGetSubscriptionProductsFilterArrayOutput() GetSubscriptionProductsFilterArrayOutput {
	return o
}

func (o GetSubscriptionProductsFilterArrayOutput) ToGetSubscriptionProductsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterArrayOutput {
	return o
}

func (o GetSubscriptionProductsFilterArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsFilter {
		return vs[0].([]GetSubscriptionProductsFilter)[vs[1].(int)]
	}).(GetSubscriptionProductsFilterOutput)
}

type GetSubscriptionProductsProductCollection struct {
	// The list of product rewards summaries.
	Items []GetSubscriptionProductsProductCollectionItem `pulumi:"items"`
}

// GetSubscriptionProductsProductCollectionInput is an input type that accepts GetSubscriptionProductsProductCollectionArgs and GetSubscriptionProductsProductCollectionOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionInput` via:
//
//          GetSubscriptionProductsProductCollectionArgs{...}
type GetSubscriptionProductsProductCollectionInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionOutput() GetSubscriptionProductsProductCollectionOutput
	ToGetSubscriptionProductsProductCollectionOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionOutput
}

type GetSubscriptionProductsProductCollectionArgs struct {
	// The list of product rewards summaries.
	Items GetSubscriptionProductsProductCollectionItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionProductsProductCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionArgs) ToGetSubscriptionProductsProductCollectionOutput() GetSubscriptionProductsProductCollectionOutput {
	return i.ToGetSubscriptionProductsProductCollectionOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionArgs) ToGetSubscriptionProductsProductCollectionOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionOutput)
}

// GetSubscriptionProductsProductCollectionArrayInput is an input type that accepts GetSubscriptionProductsProductCollectionArray and GetSubscriptionProductsProductCollectionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionArrayInput` via:
//
//          GetSubscriptionProductsProductCollectionArray{ GetSubscriptionProductsProductCollectionArgs{...} }
type GetSubscriptionProductsProductCollectionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionArrayOutput() GetSubscriptionProductsProductCollectionArrayOutput
	ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionArrayOutput
}

type GetSubscriptionProductsProductCollectionArray []GetSubscriptionProductsProductCollectionInput

func (GetSubscriptionProductsProductCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionArray) ToGetSubscriptionProductsProductCollectionArrayOutput() GetSubscriptionProductsProductCollectionArrayOutput {
	return i.ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionArray) ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionArrayOutput)
}

type GetSubscriptionProductsProductCollectionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionOutput) ToGetSubscriptionProductsProductCollectionOutput() GetSubscriptionProductsProductCollectionOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionOutput) ToGetSubscriptionProductsProductCollectionOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionOutput {
	return o
}

// The list of product rewards summaries.
func (o GetSubscriptionProductsProductCollectionOutput) Items() GetSubscriptionProductsProductCollectionItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollection) []GetSubscriptionProductsProductCollectionItem {
		return v.Items
	}).(GetSubscriptionProductsProductCollectionItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionArrayOutput) ToGetSubscriptionProductsProductCollectionArrayOutput() GetSubscriptionProductsProductCollectionArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionArrayOutput) ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsProductCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsProductCollection {
		return vs[0].([]GetSubscriptionProductsProductCollection)[vs[1].(int)]
	}).(GetSubscriptionProductsProductCollectionOutput)
}

type GetSubscriptionProductsProductCollectionItem struct {
	// The list of product rewards summaries.
	Items []GetSubscriptionProductsProductCollectionItemItem `pulumi:"items"`
}

// GetSubscriptionProductsProductCollectionItemInput is an input type that accepts GetSubscriptionProductsProductCollectionItemArgs and GetSubscriptionProductsProductCollectionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemInput` via:
//
//          GetSubscriptionProductsProductCollectionItemArgs{...}
type GetSubscriptionProductsProductCollectionItemInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemOutput() GetSubscriptionProductsProductCollectionItemOutput
	ToGetSubscriptionProductsProductCollectionItemOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemOutput
}

type GetSubscriptionProductsProductCollectionItemArgs struct {
	// The list of product rewards summaries.
	Items GetSubscriptionProductsProductCollectionItemItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionProductsProductCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemArgs) ToGetSubscriptionProductsProductCollectionItemOutput() GetSubscriptionProductsProductCollectionItemOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemArgs) ToGetSubscriptionProductsProductCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemOutput)
}

// GetSubscriptionProductsProductCollectionItemArrayInput is an input type that accepts GetSubscriptionProductsProductCollectionItemArray and GetSubscriptionProductsProductCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemArrayInput` via:
//
//          GetSubscriptionProductsProductCollectionItemArray{ GetSubscriptionProductsProductCollectionItemArgs{...} }
type GetSubscriptionProductsProductCollectionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemArrayOutput() GetSubscriptionProductsProductCollectionItemArrayOutput
	ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemArrayOutput
}

type GetSubscriptionProductsProductCollectionItemArray []GetSubscriptionProductsProductCollectionItemInput

func (GetSubscriptionProductsProductCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemArray) ToGetSubscriptionProductsProductCollectionItemArrayOutput() GetSubscriptionProductsProductCollectionItemArrayOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemArray) ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemOutput) ToGetSubscriptionProductsProductCollectionItemOutput() GetSubscriptionProductsProductCollectionItemOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemOutput) ToGetSubscriptionProductsProductCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemOutput {
	return o
}

// The list of product rewards summaries.
func (o GetSubscriptionProductsProductCollectionItemOutput) Items() GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItem) []GetSubscriptionProductsProductCollectionItemItem {
		return v.Items
	}).(GetSubscriptionProductsProductCollectionItemItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemArrayOutput() GetSubscriptionProductsProductCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsProductCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsProductCollectionItem {
		return vs[0].([]GetSubscriptionProductsProductCollectionItem)[vs[1].(int)]
	}).(GetSubscriptionProductsProductCollectionItemOutput)
}

type GetSubscriptionProductsProductCollectionItemItem struct {
	// The earned rewards for the product.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards bool `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName string `pulumi:"productName"`
	// The rate card product number.
	ProductNumber string `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount float64 `pulumi:"usageAmount"`
}

// GetSubscriptionProductsProductCollectionItemItemInput is an input type that accepts GetSubscriptionProductsProductCollectionItemItemArgs and GetSubscriptionProductsProductCollectionItemItemOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemItemInput` via:
//
//          GetSubscriptionProductsProductCollectionItemItemArgs{...}
type GetSubscriptionProductsProductCollectionItemItemInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemItemOutput() GetSubscriptionProductsProductCollectionItemItemOutput
	ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemItemOutput
}

type GetSubscriptionProductsProductCollectionItemItemArgs struct {
	// The earned rewards for the product.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards pulumi.BoolInput `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName pulumi.StringInput `pulumi:"productName"`
	// The rate card product number.
	ProductNumber pulumi.StringInput `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
}

func (GetSubscriptionProductsProductCollectionItemItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemItemArgs) ToGetSubscriptionProductsProductCollectionItemItemOutput() GetSubscriptionProductsProductCollectionItemItemOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemItemArgs) ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemItemOutput)
}

// GetSubscriptionProductsProductCollectionItemItemArrayInput is an input type that accepts GetSubscriptionProductsProductCollectionItemItemArray and GetSubscriptionProductsProductCollectionItemItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemItemArrayInput` via:
//
//          GetSubscriptionProductsProductCollectionItemItemArray{ GetSubscriptionProductsProductCollectionItemItemArgs{...} }
type GetSubscriptionProductsProductCollectionItemItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemItemArrayOutput() GetSubscriptionProductsProductCollectionItemItemArrayOutput
	ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemItemArrayOutput
}

type GetSubscriptionProductsProductCollectionItemItemArray []GetSubscriptionProductsProductCollectionItemItemInput

func (GetSubscriptionProductsProductCollectionItemItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemItemArray) ToGetSubscriptionProductsProductCollectionItemItemArrayOutput() GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemItemArray) ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionItemItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemItemOutput) ToGetSubscriptionProductsProductCollectionItemItemOutput() GetSubscriptionProductsProductCollectionItemItemOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemItemOutput) ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemOutput {
	return o
}

// The earned rewards for the product.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The boolean parameter to indicate if the product is eligible to earn rewards.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) IsEligibleToEarnRewards() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) bool { return v.IsEligibleToEarnRewards }).(pulumi.BoolOutput)
}

// The rate card product name.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) string { return v.ProductName }).(pulumi.StringOutput)
}

// The rate card product number.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) ProductNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) string { return v.ProductNumber }).(pulumi.StringOutput)
}

// The rate card product usage amount.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

type GetSubscriptionProductsProductCollectionItemItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemItemArrayOutput() GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsProductCollectionItemItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsProductCollectionItemItem {
		return vs[0].([]GetSubscriptionProductsProductCollectionItemItem)[vs[1].(int)]
	}).(GetSubscriptionProductsProductCollectionItemItemOutput)
}

type GetSubscriptionRedeemableUserItem struct {
	// The email ID of a user that can redeem rewards.
	EmailId string `pulumi:"emailId"`
}

// GetSubscriptionRedeemableUserItemInput is an input type that accepts GetSubscriptionRedeemableUserItemArgs and GetSubscriptionRedeemableUserItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUserItemInput` via:
//
//          GetSubscriptionRedeemableUserItemArgs{...}
type GetSubscriptionRedeemableUserItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUserItemOutput() GetSubscriptionRedeemableUserItemOutput
	ToGetSubscriptionRedeemableUserItemOutputWithContext(context.Context) GetSubscriptionRedeemableUserItemOutput
}

type GetSubscriptionRedeemableUserItemArgs struct {
	// The email ID of a user that can redeem rewards.
	EmailId pulumi.StringInput `pulumi:"emailId"`
}

func (GetSubscriptionRedeemableUserItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUserItemArgs) ToGetSubscriptionRedeemableUserItemOutput() GetSubscriptionRedeemableUserItemOutput {
	return i.ToGetSubscriptionRedeemableUserItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUserItemArgs) ToGetSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUserItemOutput)
}

// GetSubscriptionRedeemableUserItemArrayInput is an input type that accepts GetSubscriptionRedeemableUserItemArray and GetSubscriptionRedeemableUserItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUserItemArrayInput` via:
//
//          GetSubscriptionRedeemableUserItemArray{ GetSubscriptionRedeemableUserItemArgs{...} }
type GetSubscriptionRedeemableUserItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUserItemArrayOutput() GetSubscriptionRedeemableUserItemArrayOutput
	ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUserItemArrayOutput
}

type GetSubscriptionRedeemableUserItemArray []GetSubscriptionRedeemableUserItemInput

func (GetSubscriptionRedeemableUserItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUserItemArray) ToGetSubscriptionRedeemableUserItemArrayOutput() GetSubscriptionRedeemableUserItemArrayOutput {
	return i.ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUserItemArray) ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUserItemArrayOutput)
}

type GetSubscriptionRedeemableUserItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUserItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUserItemOutput) ToGetSubscriptionRedeemableUserItemOutput() GetSubscriptionRedeemableUserItemOutput {
	return o
}

func (o GetSubscriptionRedeemableUserItemOutput) ToGetSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemOutput {
	return o
}

// The email ID of a user that can redeem rewards.
func (o GetSubscriptionRedeemableUserItemOutput) EmailId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUserItem) string { return v.EmailId }).(pulumi.StringOutput)
}

type GetSubscriptionRedeemableUserItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUserItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUserItemArrayOutput) ToGetSubscriptionRedeemableUserItemArrayOutput() GetSubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUserItemArrayOutput) ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUserItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUserItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUserItem {
		return vs[0].([]GetSubscriptionRedeemableUserItem)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUserItemOutput)
}

type GetSubscriptionRedeemableUsersFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSubscriptionRedeemableUsersFilterInput is an input type that accepts GetSubscriptionRedeemableUsersFilterArgs and GetSubscriptionRedeemableUsersFilterOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersFilterInput` via:
//
//          GetSubscriptionRedeemableUsersFilterArgs{...}
type GetSubscriptionRedeemableUsersFilterInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersFilterOutput() GetSubscriptionRedeemableUsersFilterOutput
	ToGetSubscriptionRedeemableUsersFilterOutputWithContext(context.Context) GetSubscriptionRedeemableUsersFilterOutput
}

type GetSubscriptionRedeemableUsersFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSubscriptionRedeemableUsersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersFilterArgs) ToGetSubscriptionRedeemableUsersFilterOutput() GetSubscriptionRedeemableUsersFilterOutput {
	return i.ToGetSubscriptionRedeemableUsersFilterOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersFilterArgs) ToGetSubscriptionRedeemableUsersFilterOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersFilterOutput)
}

// GetSubscriptionRedeemableUsersFilterArrayInput is an input type that accepts GetSubscriptionRedeemableUsersFilterArray and GetSubscriptionRedeemableUsersFilterArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersFilterArrayInput` via:
//
//          GetSubscriptionRedeemableUsersFilterArray{ GetSubscriptionRedeemableUsersFilterArgs{...} }
type GetSubscriptionRedeemableUsersFilterArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersFilterArrayOutput() GetSubscriptionRedeemableUsersFilterArrayOutput
	ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersFilterArrayOutput
}

type GetSubscriptionRedeemableUsersFilterArray []GetSubscriptionRedeemableUsersFilterInput

func (GetSubscriptionRedeemableUsersFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersFilterArray) ToGetSubscriptionRedeemableUsersFilterArrayOutput() GetSubscriptionRedeemableUsersFilterArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersFilterArray) ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersFilterArrayOutput)
}

type GetSubscriptionRedeemableUsersFilterOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersFilterOutput) ToGetSubscriptionRedeemableUsersFilterOutput() GetSubscriptionRedeemableUsersFilterOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterOutput) ToGetSubscriptionRedeemableUsersFilterOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSubscriptionRedeemableUsersFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSubscriptionRedeemableUsersFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSubscriptionRedeemableUsersFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersFilterArrayOutput) ToGetSubscriptionRedeemableUsersFilterArrayOutput() GetSubscriptionRedeemableUsersFilterArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterArrayOutput) ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersFilter {
		return vs[0].([]GetSubscriptionRedeemableUsersFilter)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersFilterOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollection struct {
	// The list of user email IDs that can redeem rewards.
	Items []GetSubscriptionRedeemableUsersRedeemableUserCollectionItem `pulumi:"items"`
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs and GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionInput` via:
//
//          GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs{...}
type GetSubscriptionRedeemableUsersRedeemableUserCollectionInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs struct {
	// The list of user email IDs that can redeem rewards.
	Items GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput)
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionArray and GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput` via:
//
//          GetSubscriptionRedeemableUsersRedeemableUserCollectionArray{ GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs{...} }
type GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionArray []GetSubscriptionRedeemableUsersRedeemableUserCollectionInput

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return o
}

// The list of user email IDs that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) Items() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollection) []GetSubscriptionRedeemableUsersRedeemableUserCollectionItem {
		return v.Items
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersRedeemableUserCollection {
		return vs[0].([]GetSubscriptionRedeemableUsersRedeemableUserCollection)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItem struct {
	// The list of user email IDs that can redeem rewards.
	Items []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem `pulumi:"items"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId string `pulumi:"tenancyId"`
	UserId    string `pulumi:"userId"`
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput` via:
//
//          GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs{...}
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs struct {
	// The list of user email IDs that can redeem rewards.
	Items GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput `pulumi:"items"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId pulumi.StringInput `pulumi:"tenancyId"`
	UserId    pulumi.StringInput `pulumi:"userId"`
}

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput)
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput` via:
//
//          GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray{ GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs{...} }
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return o
}

// The list of user email IDs that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) Items() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem {
		return v.Items
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput)
}

// The subscription ID for which rewards information is requested for.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The OCID of the tenancy.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) TenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) string { return v.TenancyId }).(pulumi.StringOutput)
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) string { return v.UserId }).(pulumi.StringOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersRedeemableUserCollectionItem {
		return vs[0].([]GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem struct {
	// The email ID of a user that can redeem rewards.
	EmailId string `pulumi:"emailId"`
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput` via:
//
//          GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs{...}
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs struct {
	// The email ID of a user that can redeem rewards.
	EmailId pulumi.StringInput `pulumi:"emailId"`
}

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput)
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput` via:
//
//          GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray{ GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs{...} }
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return o
}

// The email ID of a user that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) EmailId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem) string { return v.EmailId }).(pulumi.StringOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem {
		return vs[0].([]GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput)
}

type GetSubscriptionRewardItem struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards float64 `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount float64 `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount float64 `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual bool `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards float64 `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned string `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired string `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded string `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted string `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount float64 `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey string `pulumi:"usagePeriodKey"`
}

// GetSubscriptionRewardItemInput is an input type that accepts GetSubscriptionRewardItemArgs and GetSubscriptionRewardItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardItemInput` via:
//
//          GetSubscriptionRewardItemArgs{...}
type GetSubscriptionRewardItemInput interface {
	pulumi.Input

	ToGetSubscriptionRewardItemOutput() GetSubscriptionRewardItemOutput
	ToGetSubscriptionRewardItemOutputWithContext(context.Context) GetSubscriptionRewardItemOutput
}

type GetSubscriptionRewardItemArgs struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards pulumi.Float64Input `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount pulumi.Float64Input `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount pulumi.Float64Input `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual pulumi.BoolInput `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards pulumi.Float64Input `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned pulumi.StringInput `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired pulumi.StringInput `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded pulumi.StringInput `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted pulumi.StringInput `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey pulumi.StringInput `pulumi:"usagePeriodKey"`
}

func (GetSubscriptionRewardItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardItem)(nil)).Elem()
}

func (i GetSubscriptionRewardItemArgs) ToGetSubscriptionRewardItemOutput() GetSubscriptionRewardItemOutput {
	return i.ToGetSubscriptionRewardItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardItemArgs) ToGetSubscriptionRewardItemOutputWithContext(ctx context.Context) GetSubscriptionRewardItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardItemOutput)
}

// GetSubscriptionRewardItemArrayInput is an input type that accepts GetSubscriptionRewardItemArray and GetSubscriptionRewardItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardItemArrayInput` via:
//
//          GetSubscriptionRewardItemArray{ GetSubscriptionRewardItemArgs{...} }
type GetSubscriptionRewardItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardItemArrayOutput() GetSubscriptionRewardItemArrayOutput
	ToGetSubscriptionRewardItemArrayOutputWithContext(context.Context) GetSubscriptionRewardItemArrayOutput
}

type GetSubscriptionRewardItemArray []GetSubscriptionRewardItemInput

func (GetSubscriptionRewardItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardItem)(nil)).Elem()
}

func (i GetSubscriptionRewardItemArray) ToGetSubscriptionRewardItemArrayOutput() GetSubscriptionRewardItemArrayOutput {
	return i.ToGetSubscriptionRewardItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardItemArray) ToGetSubscriptionRewardItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardItemArrayOutput)
}

type GetSubscriptionRewardItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardItem)(nil)).Elem()
}

func (o GetSubscriptionRewardItemOutput) ToGetSubscriptionRewardItemOutput() GetSubscriptionRewardItemOutput {
	return o
}

func (o GetSubscriptionRewardItemOutput) ToGetSubscriptionRewardItemOutputWithContext(ctx context.Context) GetSubscriptionRewardItemOutput {
	return o
}

// The number of rewards available for a specific usage period.
func (o GetSubscriptionRewardItemOutput) AvailableRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.AvailableRewards }).(pulumi.Float64Output)
}

// The number of rewards earned for the specific usage period.
func (o GetSubscriptionRewardItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The eligible usage amount for the usage period.
func (o GetSubscriptionRewardItemOutput) EligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.EligibleUsageAmount }).(pulumi.Float64Output)
}

// The ineligible usage amount for the usage period.
func (o GetSubscriptionRewardItemOutput) IneligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.IneligibleUsageAmount }).(pulumi.Float64Output)
}

// The boolean parameter to indicate whether or not the available rewards are manually posted.
func (o GetSubscriptionRewardItemOutput) IsManual() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) bool { return v.IsManual }).(pulumi.BoolOutput)
}

// The number of rewards redeemed for a specific month.
func (o GetSubscriptionRewardItemOutput) RedeemedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.RedeemedRewards }).(pulumi.Float64Output)
}

// The date and time when rewards accrue.
func (o GetSubscriptionRewardItemOutput) TimeRewardsEarned() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeRewardsEarned }).(pulumi.StringOutput)
}

// The date and time when rewards expire.
func (o GetSubscriptionRewardItemOutput) TimeRewardsExpired() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeRewardsExpired }).(pulumi.StringOutput)
}

// The end date and time for the usage period.
func (o GetSubscriptionRewardItemOutput) TimeUsageEnded() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeUsageEnded }).(pulumi.StringOutput)
}

// The start date and time for the usage period.
func (o GetSubscriptionRewardItemOutput) TimeUsageStarted() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeUsageStarted }).(pulumi.StringOutput)
}

// The usage amount for the usage period.
func (o GetSubscriptionRewardItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

// The usage period ID.
func (o GetSubscriptionRewardItemOutput) UsagePeriodKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.UsagePeriodKey }).(pulumi.StringOutput)
}

type GetSubscriptionRewardItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardItem)(nil)).Elem()
}

func (o GetSubscriptionRewardItemArrayOutput) ToGetSubscriptionRewardItemArrayOutput() GetSubscriptionRewardItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardItemArrayOutput) ToGetSubscriptionRewardItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardItem {
		return vs[0].([]GetSubscriptionRewardItem)[vs[1].(int)]
	}).(GetSubscriptionRewardItemOutput)
}

type GetSubscriptionRewardSummary struct {
	// The currency unit for the reward amount.
	Currency string `pulumi:"currency"`
	// The redemption code used in the billing center during the reward redemption process
	RedemptionCode string `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate float64 `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId string `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable float64 `pulumi:"totalRewardsAvailable"`
}

// GetSubscriptionRewardSummaryInput is an input type that accepts GetSubscriptionRewardSummaryArgs and GetSubscriptionRewardSummaryOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardSummaryInput` via:
//
//          GetSubscriptionRewardSummaryArgs{...}
type GetSubscriptionRewardSummaryInput interface {
	pulumi.Input

	ToGetSubscriptionRewardSummaryOutput() GetSubscriptionRewardSummaryOutput
	ToGetSubscriptionRewardSummaryOutputWithContext(context.Context) GetSubscriptionRewardSummaryOutput
}

type GetSubscriptionRewardSummaryArgs struct {
	// The currency unit for the reward amount.
	Currency pulumi.StringInput `pulumi:"currency"`
	// The redemption code used in the billing center during the reward redemption process
	RedemptionCode pulumi.StringInput `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate pulumi.Float64Input `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId pulumi.StringInput `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable pulumi.Float64Input `pulumi:"totalRewardsAvailable"`
}

func (GetSubscriptionRewardSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardSummaryArgs) ToGetSubscriptionRewardSummaryOutput() GetSubscriptionRewardSummaryOutput {
	return i.ToGetSubscriptionRewardSummaryOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardSummaryArgs) ToGetSubscriptionRewardSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardSummaryOutput)
}

// GetSubscriptionRewardSummaryArrayInput is an input type that accepts GetSubscriptionRewardSummaryArray and GetSubscriptionRewardSummaryArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardSummaryArrayInput` via:
//
//          GetSubscriptionRewardSummaryArray{ GetSubscriptionRewardSummaryArgs{...} }
type GetSubscriptionRewardSummaryArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardSummaryArrayOutput() GetSubscriptionRewardSummaryArrayOutput
	ToGetSubscriptionRewardSummaryArrayOutputWithContext(context.Context) GetSubscriptionRewardSummaryArrayOutput
}

type GetSubscriptionRewardSummaryArray []GetSubscriptionRewardSummaryInput

func (GetSubscriptionRewardSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardSummaryArray) ToGetSubscriptionRewardSummaryArrayOutput() GetSubscriptionRewardSummaryArrayOutput {
	return i.ToGetSubscriptionRewardSummaryArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardSummaryArray) ToGetSubscriptionRewardSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardSummaryArrayOutput)
}

type GetSubscriptionRewardSummaryOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardSummaryOutput) ToGetSubscriptionRewardSummaryOutput() GetSubscriptionRewardSummaryOutput {
	return o
}

func (o GetSubscriptionRewardSummaryOutput) ToGetSubscriptionRewardSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryOutput {
	return o
}

// The currency unit for the reward amount.
func (o GetSubscriptionRewardSummaryOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.Currency }).(pulumi.StringOutput)
}

// The redemption code used in the billing center during the reward redemption process
func (o GetSubscriptionRewardSummaryOutput) RedemptionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.RedemptionCode }).(pulumi.StringOutput)
}

// The current Rewards percentage in decimal format.
func (o GetSubscriptionRewardSummaryOutput) RewardsRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) float64 { return v.RewardsRate }).(pulumi.Float64Output)
}

// The subscription ID for which rewards information is requested for.
func (o GetSubscriptionRewardSummaryOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The OCID of the tenancy.
func (o GetSubscriptionRewardSummaryOutput) TenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.TenancyId }).(pulumi.StringOutput)
}

// The total number of available rewards for a given subscription ID.
func (o GetSubscriptionRewardSummaryOutput) TotalRewardsAvailable() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) float64 { return v.TotalRewardsAvailable }).(pulumi.Float64Output)
}

type GetSubscriptionRewardSummaryArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardSummaryArrayOutput) ToGetSubscriptionRewardSummaryArrayOutput() GetSubscriptionRewardSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardSummaryArrayOutput) ToGetSubscriptionRewardSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardSummaryArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardSummary {
		return vs[0].([]GetSubscriptionRewardSummary)[vs[1].(int)]
	}).(GetSubscriptionRewardSummaryOutput)
}

type GetSubscriptionRewardsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSubscriptionRewardsFilterInput is an input type that accepts GetSubscriptionRewardsFilterArgs and GetSubscriptionRewardsFilterOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsFilterInput` via:
//
//          GetSubscriptionRewardsFilterArgs{...}
type GetSubscriptionRewardsFilterInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsFilterOutput() GetSubscriptionRewardsFilterOutput
	ToGetSubscriptionRewardsFilterOutputWithContext(context.Context) GetSubscriptionRewardsFilterOutput
}

type GetSubscriptionRewardsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSubscriptionRewardsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (i GetSubscriptionRewardsFilterArgs) ToGetSubscriptionRewardsFilterOutput() GetSubscriptionRewardsFilterOutput {
	return i.ToGetSubscriptionRewardsFilterOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsFilterArgs) ToGetSubscriptionRewardsFilterOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsFilterOutput)
}

// GetSubscriptionRewardsFilterArrayInput is an input type that accepts GetSubscriptionRewardsFilterArray and GetSubscriptionRewardsFilterArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsFilterArrayInput` via:
//
//          GetSubscriptionRewardsFilterArray{ GetSubscriptionRewardsFilterArgs{...} }
type GetSubscriptionRewardsFilterArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsFilterArrayOutput() GetSubscriptionRewardsFilterArrayOutput
	ToGetSubscriptionRewardsFilterArrayOutputWithContext(context.Context) GetSubscriptionRewardsFilterArrayOutput
}

type GetSubscriptionRewardsFilterArray []GetSubscriptionRewardsFilterInput

func (GetSubscriptionRewardsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (i GetSubscriptionRewardsFilterArray) ToGetSubscriptionRewardsFilterArrayOutput() GetSubscriptionRewardsFilterArrayOutput {
	return i.ToGetSubscriptionRewardsFilterArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsFilterArray) ToGetSubscriptionRewardsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsFilterArrayOutput)
}

type GetSubscriptionRewardsFilterOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (o GetSubscriptionRewardsFilterOutput) ToGetSubscriptionRewardsFilterOutput() GetSubscriptionRewardsFilterOutput {
	return o
}

func (o GetSubscriptionRewardsFilterOutput) ToGetSubscriptionRewardsFilterOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterOutput {
	return o
}

func (o GetSubscriptionRewardsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSubscriptionRewardsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSubscriptionRewardsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSubscriptionRewardsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (o GetSubscriptionRewardsFilterArrayOutput) ToGetSubscriptionRewardsFilterArrayOutput() GetSubscriptionRewardsFilterArrayOutput {
	return o
}

func (o GetSubscriptionRewardsFilterArrayOutput) ToGetSubscriptionRewardsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterArrayOutput {
	return o
}

func (o GetSubscriptionRewardsFilterArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsFilter {
		return vs[0].([]GetSubscriptionRewardsFilter)[vs[1].(int)]
	}).(GetSubscriptionRewardsFilterOutput)
}

type GetSubscriptionRewardsRewardCollection struct {
	// The monthly summary of rewards.
	Items []GetSubscriptionRewardsRewardCollectionItem `pulumi:"items"`
}

// GetSubscriptionRewardsRewardCollectionInput is an input type that accepts GetSubscriptionRewardsRewardCollectionArgs and GetSubscriptionRewardsRewardCollectionOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionInput` via:
//
//          GetSubscriptionRewardsRewardCollectionArgs{...}
type GetSubscriptionRewardsRewardCollectionInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionOutput() GetSubscriptionRewardsRewardCollectionOutput
	ToGetSubscriptionRewardsRewardCollectionOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionOutput
}

type GetSubscriptionRewardsRewardCollectionArgs struct {
	// The monthly summary of rewards.
	Items GetSubscriptionRewardsRewardCollectionItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionRewardsRewardCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionArgs) ToGetSubscriptionRewardsRewardCollectionOutput() GetSubscriptionRewardsRewardCollectionOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionArgs) ToGetSubscriptionRewardsRewardCollectionOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionOutput)
}

// GetSubscriptionRewardsRewardCollectionArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionArray and GetSubscriptionRewardsRewardCollectionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionArrayInput` via:
//
//          GetSubscriptionRewardsRewardCollectionArray{ GetSubscriptionRewardsRewardCollectionArgs{...} }
type GetSubscriptionRewardsRewardCollectionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionArrayOutput() GetSubscriptionRewardsRewardCollectionArrayOutput
	ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionArrayOutput
}

type GetSubscriptionRewardsRewardCollectionArray []GetSubscriptionRewardsRewardCollectionInput

func (GetSubscriptionRewardsRewardCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionArray) ToGetSubscriptionRewardsRewardCollectionArrayOutput() GetSubscriptionRewardsRewardCollectionArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionArray) ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionOutput) ToGetSubscriptionRewardsRewardCollectionOutput() GetSubscriptionRewardsRewardCollectionOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionOutput) ToGetSubscriptionRewardsRewardCollectionOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionOutput {
	return o
}

// The monthly summary of rewards.
func (o GetSubscriptionRewardsRewardCollectionOutput) Items() GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollection) []GetSubscriptionRewardsRewardCollectionItem {
		return v.Items
	}).(GetSubscriptionRewardsRewardCollectionItemArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionArrayOutput) ToGetSubscriptionRewardsRewardCollectionArrayOutput() GetSubscriptionRewardsRewardCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionArrayOutput) ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollection {
		return vs[0].([]GetSubscriptionRewardsRewardCollection)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionOutput)
}

type GetSubscriptionRewardsRewardCollectionItem struct {
	// The monthly summary of rewards.
	Items []GetSubscriptionRewardsRewardCollectionItemItem `pulumi:"items"`
	// The overall monthly reward summary.
	Summaries []GetSubscriptionRewardsRewardCollectionItemSummary `pulumi:"summaries"`
}

// GetSubscriptionRewardsRewardCollectionItemInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemArgs and GetSubscriptionRewardsRewardCollectionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemInput` via:
//
//          GetSubscriptionRewardsRewardCollectionItemArgs{...}
type GetSubscriptionRewardsRewardCollectionItemInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemOutput() GetSubscriptionRewardsRewardCollectionItemOutput
	ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemOutput
}

type GetSubscriptionRewardsRewardCollectionItemArgs struct {
	// The monthly summary of rewards.
	Items GetSubscriptionRewardsRewardCollectionItemItemArrayInput `pulumi:"items"`
	// The overall monthly reward summary.
	Summaries GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput `pulumi:"summaries"`
}

func (GetSubscriptionRewardsRewardCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemArgs) ToGetSubscriptionRewardsRewardCollectionItemOutput() GetSubscriptionRewardsRewardCollectionItemOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemArgs) ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemOutput)
}

// GetSubscriptionRewardsRewardCollectionItemArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemArray and GetSubscriptionRewardsRewardCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemArrayInput` via:
//
//          GetSubscriptionRewardsRewardCollectionItemArray{ GetSubscriptionRewardsRewardCollectionItemArgs{...} }
type GetSubscriptionRewardsRewardCollectionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemArrayOutput
	ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemArrayOutput
}

type GetSubscriptionRewardsRewardCollectionItemArray []GetSubscriptionRewardsRewardCollectionItemInput

func (GetSubscriptionRewardsRewardCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemArray) ToGetSubscriptionRewardsRewardCollectionItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemArray) ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemOutput) ToGetSubscriptionRewardsRewardCollectionItemOutput() GetSubscriptionRewardsRewardCollectionItemOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemOutput) ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemOutput {
	return o
}

// The monthly summary of rewards.
func (o GetSubscriptionRewardsRewardCollectionItemOutput) Items() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItem) []GetSubscriptionRewardsRewardCollectionItemItem {
		return v.Items
	}).(GetSubscriptionRewardsRewardCollectionItemItemArrayOutput)
}

// The overall monthly reward summary.
func (o GetSubscriptionRewardsRewardCollectionItemOutput) Summaries() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItem) []GetSubscriptionRewardsRewardCollectionItemSummary {
		return v.Summaries
	}).(GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollectionItem {
		return vs[0].([]GetSubscriptionRewardsRewardCollectionItem)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionItemOutput)
}

type GetSubscriptionRewardsRewardCollectionItemItem struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards float64 `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount float64 `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount float64 `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual bool `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards float64 `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned string `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired string `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded string `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted string `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount float64 `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey string `pulumi:"usagePeriodKey"`
}

// GetSubscriptionRewardsRewardCollectionItemItemInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemItemArgs and GetSubscriptionRewardsRewardCollectionItemItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemItemInput` via:
//
//          GetSubscriptionRewardsRewardCollectionItemItemArgs{...}
type GetSubscriptionRewardsRewardCollectionItemItemInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemItemOutput() GetSubscriptionRewardsRewardCollectionItemItemOutput
	ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemItemOutput
}

type GetSubscriptionRewardsRewardCollectionItemItemArgs struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards pulumi.Float64Input `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount pulumi.Float64Input `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount pulumi.Float64Input `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual pulumi.BoolInput `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards pulumi.Float64Input `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned pulumi.StringInput `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired pulumi.StringInput `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded pulumi.StringInput `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted pulumi.StringInput `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey pulumi.StringInput `pulumi:"usagePeriodKey"`
}

func (GetSubscriptionRewardsRewardCollectionItemItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArgs) ToGetSubscriptionRewardsRewardCollectionItemItemOutput() GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArgs) ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemItemOutput)
}

// GetSubscriptionRewardsRewardCollectionItemItemArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemItemArray and GetSubscriptionRewardsRewardCollectionItemItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemItemArrayInput` via:
//
//          GetSubscriptionRewardsRewardCollectionItemItemArray{ GetSubscriptionRewardsRewardCollectionItemItemArgs{...} }
type GetSubscriptionRewardsRewardCollectionItemItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput
	ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemItemArrayOutput
}

type GetSubscriptionRewardsRewardCollectionItemItemArray []GetSubscriptionRewardsRewardCollectionItemItemInput

func (GetSubscriptionRewardsRewardCollectionItemItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArray) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArray) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemItemArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) ToGetSubscriptionRewardsRewardCollectionItemItemOutput() GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return o
}

// The number of rewards available for a specific usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) AvailableRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.AvailableRewards }).(pulumi.Float64Output)
}

// The number of rewards earned for the specific usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The eligible usage amount for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) EligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.EligibleUsageAmount }).(pulumi.Float64Output)
}

// The ineligible usage amount for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) IneligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.IneligibleUsageAmount }).(pulumi.Float64Output)
}

// The boolean parameter to indicate whether or not the available rewards are manually posted.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) IsManual() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) bool { return v.IsManual }).(pulumi.BoolOutput)
}

// The number of rewards redeemed for a specific month.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) RedeemedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.RedeemedRewards }).(pulumi.Float64Output)
}

// The date and time when rewards accrue.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeRewardsEarned() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeRewardsEarned }).(pulumi.StringOutput)
}

// The date and time when rewards expire.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeRewardsExpired() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeRewardsExpired }).(pulumi.StringOutput)
}

// The end date and time for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeUsageEnded() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeUsageEnded }).(pulumi.StringOutput)
}

// The start date and time for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeUsageStarted() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeUsageStarted }).(pulumi.StringOutput)
}

// The usage amount for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

// The usage period ID.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) UsagePeriodKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.UsagePeriodKey }).(pulumi.StringOutput)
}

type GetSubscriptionRewardsRewardCollectionItemItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollectionItemItem {
		return vs[0].([]GetSubscriptionRewardsRewardCollectionItemItem)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionItemItemOutput)
}

type GetSubscriptionRewardsRewardCollectionItemSummary struct {
	// The currency unit for the reward amount.
	Currency string `pulumi:"currency"`
	// The redemption code used in the billing center during the reward redemption process
	RedemptionCode string `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate float64 `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId string `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable float64 `pulumi:"totalRewardsAvailable"`
}

// GetSubscriptionRewardsRewardCollectionItemSummaryInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemSummaryArgs and GetSubscriptionRewardsRewardCollectionItemSummaryOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemSummaryInput` via:
//
//          GetSubscriptionRewardsRewardCollectionItemSummaryArgs{...}
type GetSubscriptionRewardsRewardCollectionItemSummaryInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemSummaryOutput() GetSubscriptionRewardsRewardCollectionItemSummaryOutput
	ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryOutput
}

type GetSubscriptionRewardsRewardCollectionItemSummaryArgs struct {
	// The currency unit for the reward amount.
	Currency pulumi.StringInput `pulumi:"currency"`
	// The redemption code used in the billing center during the reward redemption process
	RedemptionCode pulumi.StringInput `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate pulumi.Float64Input `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId pulumi.StringInput `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable pulumi.Float64Input `pulumi:"totalRewardsAvailable"`
}

func (GetSubscriptionRewardsRewardCollectionItemSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArgs) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutput() GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArgs) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemSummaryOutput)
}

// GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemSummaryArray and GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput` via:
//
//          GetSubscriptionRewardsRewardCollectionItemSummaryArray{ GetSubscriptionRewardsRewardCollectionItemSummaryArgs{...} }
type GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput
	ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput
}

type GetSubscriptionRewardsRewardCollectionItemSummaryArray []GetSubscriptionRewardsRewardCollectionItemSummaryInput

func (GetSubscriptionRewardsRewardCollectionItemSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArray) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArray) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemSummaryOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutput() GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return o
}

// The currency unit for the reward amount.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.Currency }).(pulumi.StringOutput)
}

// The redemption code used in the billing center during the reward redemption process
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) RedemptionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.RedemptionCode }).(pulumi.StringOutput)
}

// The current Rewards percentage in decimal format.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) RewardsRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) float64 { return v.RewardsRate }).(pulumi.Float64Output)
}

// The subscription ID for which rewards information is requested for.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The OCID of the tenancy.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) TenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.TenancyId }).(pulumi.StringOutput)
}

// The total number of available rewards for a given subscription ID.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) TotalRewardsAvailable() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) float64 { return v.TotalRewardsAvailable }).(pulumi.Float64Output)
}

type GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollectionItemSummary {
		return vs[0].([]GetSubscriptionRewardsRewardCollectionItemSummary)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionItemSummaryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRedeemableUserItemInput)(nil)).Elem(), SubscriptionRedeemableUserItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRedeemableUserItemArrayInput)(nil)).Elem(), SubscriptionRedeemableUserItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductItemInput)(nil)).Elem(), GetSubscriptionProductItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductItemArrayInput)(nil)).Elem(), GetSubscriptionProductItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsFilterInput)(nil)).Elem(), GetSubscriptionProductsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsFilterArrayInput)(nil)).Elem(), GetSubscriptionProductsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionArrayInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemArrayInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItemInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItemArrayInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUserItemInput)(nil)).Elem(), GetSubscriptionRedeemableUserItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUserItemArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUserItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersFilterInput)(nil)).Elem(), GetSubscriptionRedeemableUsersFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersFilterArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardItemInput)(nil)).Elem(), GetSubscriptionRewardItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardItemArrayInput)(nil)).Elem(), GetSubscriptionRewardItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardSummaryInput)(nil)).Elem(), GetSubscriptionRewardSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardSummaryArrayInput)(nil)).Elem(), GetSubscriptionRewardSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsFilterInput)(nil)).Elem(), GetSubscriptionRewardsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsFilterArrayInput)(nil)).Elem(), GetSubscriptionRewardsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItemInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItemArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummaryInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemSummaryArray{})
	pulumi.RegisterOutputType(SubscriptionRedeemableUserItemOutput{})
	pulumi.RegisterOutputType(SubscriptionRedeemableUserItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsFilterOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUserItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUserItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersFilterOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardSummaryOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardSummaryArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsFilterOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemSummaryOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput{})
}
