// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package usageproxy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SubscriptionRedeemableUserItem struct {
	// The email ID for a user that can redeem rewards.
	EmailId string `pulumi:"emailId"`
	// The first name of the user that can redeem rewards.
	FirstName *string `pulumi:"firstName"`
	// The last name of the user that can redeem rewards.
	LastName *string `pulumi:"lastName"`
}

// SubscriptionRedeemableUserItemInput is an input type that accepts SubscriptionRedeemableUserItemArgs and SubscriptionRedeemableUserItemOutput values.
// You can construct a concrete instance of `SubscriptionRedeemableUserItemInput` via:
//
//	SubscriptionRedeemableUserItemArgs{...}
type SubscriptionRedeemableUserItemInput interface {
	pulumi.Input

	ToSubscriptionRedeemableUserItemOutput() SubscriptionRedeemableUserItemOutput
	ToSubscriptionRedeemableUserItemOutputWithContext(context.Context) SubscriptionRedeemableUserItemOutput
}

type SubscriptionRedeemableUserItemArgs struct {
	// The email ID for a user that can redeem rewards.
	EmailId pulumi.StringInput `pulumi:"emailId"`
	// The first name of the user that can redeem rewards.
	FirstName pulumi.StringPtrInput `pulumi:"firstName"`
	// The last name of the user that can redeem rewards.
	LastName pulumi.StringPtrInput `pulumi:"lastName"`
}

func (SubscriptionRedeemableUserItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i SubscriptionRedeemableUserItemArgs) ToSubscriptionRedeemableUserItemOutput() SubscriptionRedeemableUserItemOutput {
	return i.ToSubscriptionRedeemableUserItemOutputWithContext(context.Background())
}

func (i SubscriptionRedeemableUserItemArgs) ToSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRedeemableUserItemOutput)
}

// SubscriptionRedeemableUserItemArrayInput is an input type that accepts SubscriptionRedeemableUserItemArray and SubscriptionRedeemableUserItemArrayOutput values.
// You can construct a concrete instance of `SubscriptionRedeemableUserItemArrayInput` via:
//
//	SubscriptionRedeemableUserItemArray{ SubscriptionRedeemableUserItemArgs{...} }
type SubscriptionRedeemableUserItemArrayInput interface {
	pulumi.Input

	ToSubscriptionRedeemableUserItemArrayOutput() SubscriptionRedeemableUserItemArrayOutput
	ToSubscriptionRedeemableUserItemArrayOutputWithContext(context.Context) SubscriptionRedeemableUserItemArrayOutput
}

type SubscriptionRedeemableUserItemArray []SubscriptionRedeemableUserItemInput

func (SubscriptionRedeemableUserItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i SubscriptionRedeemableUserItemArray) ToSubscriptionRedeemableUserItemArrayOutput() SubscriptionRedeemableUserItemArrayOutput {
	return i.ToSubscriptionRedeemableUserItemArrayOutputWithContext(context.Background())
}

func (i SubscriptionRedeemableUserItemArray) ToSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRedeemableUserItemArrayOutput)
}

type SubscriptionRedeemableUserItemOutput struct{ *pulumi.OutputState }

func (SubscriptionRedeemableUserItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o SubscriptionRedeemableUserItemOutput) ToSubscriptionRedeemableUserItemOutput() SubscriptionRedeemableUserItemOutput {
	return o
}

func (o SubscriptionRedeemableUserItemOutput) ToSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemOutput {
	return o
}

// The email ID for a user that can redeem rewards.
func (o SubscriptionRedeemableUserItemOutput) EmailId() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionRedeemableUserItem) string { return v.EmailId }).(pulumi.StringOutput)
}

// The first name of the user that can redeem rewards.
func (o SubscriptionRedeemableUserItemOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRedeemableUserItem) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

// The last name of the user that can redeem rewards.
func (o SubscriptionRedeemableUserItemOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRedeemableUserItem) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

type SubscriptionRedeemableUserItemArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionRedeemableUserItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o SubscriptionRedeemableUserItemArrayOutput) ToSubscriptionRedeemableUserItemArrayOutput() SubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o SubscriptionRedeemableUserItemArrayOutput) ToSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) SubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o SubscriptionRedeemableUserItemArrayOutput) Index(i pulumi.IntInput) SubscriptionRedeemableUserItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionRedeemableUserItem {
		return vs[0].([]SubscriptionRedeemableUserItem)[vs[1].(int)]
	}).(SubscriptionRedeemableUserItemOutput)
}

type GetResourceQuotasFilter struct {
	// The resource name.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetResourceQuotasFilterInput is an input type that accepts GetResourceQuotasFilterArgs and GetResourceQuotasFilterOutput values.
// You can construct a concrete instance of `GetResourceQuotasFilterInput` via:
//
//	GetResourceQuotasFilterArgs{...}
type GetResourceQuotasFilterInput interface {
	pulumi.Input

	ToGetResourceQuotasFilterOutput() GetResourceQuotasFilterOutput
	ToGetResourceQuotasFilterOutputWithContext(context.Context) GetResourceQuotasFilterOutput
}

type GetResourceQuotasFilterArgs struct {
	// The resource name.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetResourceQuotasFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceQuotasFilter)(nil)).Elem()
}

func (i GetResourceQuotasFilterArgs) ToGetResourceQuotasFilterOutput() GetResourceQuotasFilterOutput {
	return i.ToGetResourceQuotasFilterOutputWithContext(context.Background())
}

func (i GetResourceQuotasFilterArgs) ToGetResourceQuotasFilterOutputWithContext(ctx context.Context) GetResourceQuotasFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceQuotasFilterOutput)
}

// GetResourceQuotasFilterArrayInput is an input type that accepts GetResourceQuotasFilterArray and GetResourceQuotasFilterArrayOutput values.
// You can construct a concrete instance of `GetResourceQuotasFilterArrayInput` via:
//
//	GetResourceQuotasFilterArray{ GetResourceQuotasFilterArgs{...} }
type GetResourceQuotasFilterArrayInput interface {
	pulumi.Input

	ToGetResourceQuotasFilterArrayOutput() GetResourceQuotasFilterArrayOutput
	ToGetResourceQuotasFilterArrayOutputWithContext(context.Context) GetResourceQuotasFilterArrayOutput
}

type GetResourceQuotasFilterArray []GetResourceQuotasFilterInput

func (GetResourceQuotasFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceQuotasFilter)(nil)).Elem()
}

func (i GetResourceQuotasFilterArray) ToGetResourceQuotasFilterArrayOutput() GetResourceQuotasFilterArrayOutput {
	return i.ToGetResourceQuotasFilterArrayOutputWithContext(context.Background())
}

func (i GetResourceQuotasFilterArray) ToGetResourceQuotasFilterArrayOutputWithContext(ctx context.Context) GetResourceQuotasFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceQuotasFilterArrayOutput)
}

type GetResourceQuotasFilterOutput struct{ *pulumi.OutputState }

func (GetResourceQuotasFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceQuotasFilter)(nil)).Elem()
}

func (o GetResourceQuotasFilterOutput) ToGetResourceQuotasFilterOutput() GetResourceQuotasFilterOutput {
	return o
}

func (o GetResourceQuotasFilterOutput) ToGetResourceQuotasFilterOutputWithContext(ctx context.Context) GetResourceQuotasFilterOutput {
	return o
}

// The resource name.
func (o GetResourceQuotasFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceQuotasFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetResourceQuotasFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceQuotasFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetResourceQuotasFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResourceQuotasFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetResourceQuotasFilterArrayOutput struct{ *pulumi.OutputState }

func (GetResourceQuotasFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceQuotasFilter)(nil)).Elem()
}

func (o GetResourceQuotasFilterArrayOutput) ToGetResourceQuotasFilterArrayOutput() GetResourceQuotasFilterArrayOutput {
	return o
}

func (o GetResourceQuotasFilterArrayOutput) ToGetResourceQuotasFilterArrayOutputWithContext(ctx context.Context) GetResourceQuotasFilterArrayOutput {
	return o
}

func (o GetResourceQuotasFilterArrayOutput) Index(i pulumi.IntInput) GetResourceQuotasFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceQuotasFilter {
		return vs[0].([]GetResourceQuotasFilter)[vs[1].(int)]
	}).(GetResourceQuotasFilterOutput)
}

type GetResourceQuotasResourceQuotumCollection struct {
	// Used to indicate if further quota consumption isAllowed.
	IsAllowed bool `pulumi:"isAllowed"`
	// The list of resource quota details.
	Items []GetResourceQuotasResourceQuotumCollectionItem `pulumi:"items"`
}

// GetResourceQuotasResourceQuotumCollectionInput is an input type that accepts GetResourceQuotasResourceQuotumCollectionArgs and GetResourceQuotasResourceQuotumCollectionOutput values.
// You can construct a concrete instance of `GetResourceQuotasResourceQuotumCollectionInput` via:
//
//	GetResourceQuotasResourceQuotumCollectionArgs{...}
type GetResourceQuotasResourceQuotumCollectionInput interface {
	pulumi.Input

	ToGetResourceQuotasResourceQuotumCollectionOutput() GetResourceQuotasResourceQuotumCollectionOutput
	ToGetResourceQuotasResourceQuotumCollectionOutputWithContext(context.Context) GetResourceQuotasResourceQuotumCollectionOutput
}

type GetResourceQuotasResourceQuotumCollectionArgs struct {
	// Used to indicate if further quota consumption isAllowed.
	IsAllowed pulumi.BoolInput `pulumi:"isAllowed"`
	// The list of resource quota details.
	Items GetResourceQuotasResourceQuotumCollectionItemArrayInput `pulumi:"items"`
}

func (GetResourceQuotasResourceQuotumCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceQuotasResourceQuotumCollection)(nil)).Elem()
}

func (i GetResourceQuotasResourceQuotumCollectionArgs) ToGetResourceQuotasResourceQuotumCollectionOutput() GetResourceQuotasResourceQuotumCollectionOutput {
	return i.ToGetResourceQuotasResourceQuotumCollectionOutputWithContext(context.Background())
}

func (i GetResourceQuotasResourceQuotumCollectionArgs) ToGetResourceQuotasResourceQuotumCollectionOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceQuotasResourceQuotumCollectionOutput)
}

// GetResourceQuotasResourceQuotumCollectionArrayInput is an input type that accepts GetResourceQuotasResourceQuotumCollectionArray and GetResourceQuotasResourceQuotumCollectionArrayOutput values.
// You can construct a concrete instance of `GetResourceQuotasResourceQuotumCollectionArrayInput` via:
//
//	GetResourceQuotasResourceQuotumCollectionArray{ GetResourceQuotasResourceQuotumCollectionArgs{...} }
type GetResourceQuotasResourceQuotumCollectionArrayInput interface {
	pulumi.Input

	ToGetResourceQuotasResourceQuotumCollectionArrayOutput() GetResourceQuotasResourceQuotumCollectionArrayOutput
	ToGetResourceQuotasResourceQuotumCollectionArrayOutputWithContext(context.Context) GetResourceQuotasResourceQuotumCollectionArrayOutput
}

type GetResourceQuotasResourceQuotumCollectionArray []GetResourceQuotasResourceQuotumCollectionInput

func (GetResourceQuotasResourceQuotumCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceQuotasResourceQuotumCollection)(nil)).Elem()
}

func (i GetResourceQuotasResourceQuotumCollectionArray) ToGetResourceQuotasResourceQuotumCollectionArrayOutput() GetResourceQuotasResourceQuotumCollectionArrayOutput {
	return i.ToGetResourceQuotasResourceQuotumCollectionArrayOutputWithContext(context.Background())
}

func (i GetResourceQuotasResourceQuotumCollectionArray) ToGetResourceQuotasResourceQuotumCollectionArrayOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceQuotasResourceQuotumCollectionArrayOutput)
}

type GetResourceQuotasResourceQuotumCollectionOutput struct{ *pulumi.OutputState }

func (GetResourceQuotasResourceQuotumCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceQuotasResourceQuotumCollection)(nil)).Elem()
}

func (o GetResourceQuotasResourceQuotumCollectionOutput) ToGetResourceQuotasResourceQuotumCollectionOutput() GetResourceQuotasResourceQuotumCollectionOutput {
	return o
}

func (o GetResourceQuotasResourceQuotumCollectionOutput) ToGetResourceQuotasResourceQuotumCollectionOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionOutput {
	return o
}

// Used to indicate if further quota consumption isAllowed.
func (o GetResourceQuotasResourceQuotumCollectionOutput) IsAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollection) bool { return v.IsAllowed }).(pulumi.BoolOutput)
}

// The list of resource quota details.
func (o GetResourceQuotasResourceQuotumCollectionOutput) Items() GetResourceQuotasResourceQuotumCollectionItemArrayOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollection) []GetResourceQuotasResourceQuotumCollectionItem {
		return v.Items
	}).(GetResourceQuotasResourceQuotumCollectionItemArrayOutput)
}

type GetResourceQuotasResourceQuotumCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetResourceQuotasResourceQuotumCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceQuotasResourceQuotumCollection)(nil)).Elem()
}

func (o GetResourceQuotasResourceQuotumCollectionArrayOutput) ToGetResourceQuotasResourceQuotumCollectionArrayOutput() GetResourceQuotasResourceQuotumCollectionArrayOutput {
	return o
}

func (o GetResourceQuotasResourceQuotumCollectionArrayOutput) ToGetResourceQuotasResourceQuotumCollectionArrayOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionArrayOutput {
	return o
}

func (o GetResourceQuotasResourceQuotumCollectionArrayOutput) Index(i pulumi.IntInput) GetResourceQuotasResourceQuotumCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceQuotasResourceQuotumCollection {
		return vs[0].([]GetResourceQuotasResourceQuotumCollection)[vs[1].(int)]
	}).(GetResourceQuotasResourceQuotumCollectionOutput)
}

type GetResourceQuotasResourceQuotumCollectionItem struct {
	// The affected resource name.
	AffectedResource string `pulumi:"affectedResource"`
	// The quota balance.
	Balance float64 `pulumi:"balance"`
	// Used to indicate if further quota consumption isAllowed.
	IsAllowed bool `pulumi:"isAllowed"`
	// Used to indicate any resource dependencies.
	IsDependency bool `pulumi:"isDependency"`
	// Used to indicate if overages are incurred.
	IsOverage bool `pulumi:"isOverage"`
	// The resource name.
	Name string `pulumi:"name"`
	// The purchased quota limit.
	PurchasedLimit float64 `pulumi:"purchasedLimit"`
	// The service name.
	Service string `pulumi:"service"`
}

// GetResourceQuotasResourceQuotumCollectionItemInput is an input type that accepts GetResourceQuotasResourceQuotumCollectionItemArgs and GetResourceQuotasResourceQuotumCollectionItemOutput values.
// You can construct a concrete instance of `GetResourceQuotasResourceQuotumCollectionItemInput` via:
//
//	GetResourceQuotasResourceQuotumCollectionItemArgs{...}
type GetResourceQuotasResourceQuotumCollectionItemInput interface {
	pulumi.Input

	ToGetResourceQuotasResourceQuotumCollectionItemOutput() GetResourceQuotasResourceQuotumCollectionItemOutput
	ToGetResourceQuotasResourceQuotumCollectionItemOutputWithContext(context.Context) GetResourceQuotasResourceQuotumCollectionItemOutput
}

type GetResourceQuotasResourceQuotumCollectionItemArgs struct {
	// The affected resource name.
	AffectedResource pulumi.StringInput `pulumi:"affectedResource"`
	// The quota balance.
	Balance pulumi.Float64Input `pulumi:"balance"`
	// Used to indicate if further quota consumption isAllowed.
	IsAllowed pulumi.BoolInput `pulumi:"isAllowed"`
	// Used to indicate any resource dependencies.
	IsDependency pulumi.BoolInput `pulumi:"isDependency"`
	// Used to indicate if overages are incurred.
	IsOverage pulumi.BoolInput `pulumi:"isOverage"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The purchased quota limit.
	PurchasedLimit pulumi.Float64Input `pulumi:"purchasedLimit"`
	// The service name.
	Service pulumi.StringInput `pulumi:"service"`
}

func (GetResourceQuotasResourceQuotumCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceQuotasResourceQuotumCollectionItem)(nil)).Elem()
}

func (i GetResourceQuotasResourceQuotumCollectionItemArgs) ToGetResourceQuotasResourceQuotumCollectionItemOutput() GetResourceQuotasResourceQuotumCollectionItemOutput {
	return i.ToGetResourceQuotasResourceQuotumCollectionItemOutputWithContext(context.Background())
}

func (i GetResourceQuotasResourceQuotumCollectionItemArgs) ToGetResourceQuotasResourceQuotumCollectionItemOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceQuotasResourceQuotumCollectionItemOutput)
}

// GetResourceQuotasResourceQuotumCollectionItemArrayInput is an input type that accepts GetResourceQuotasResourceQuotumCollectionItemArray and GetResourceQuotasResourceQuotumCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetResourceQuotasResourceQuotumCollectionItemArrayInput` via:
//
//	GetResourceQuotasResourceQuotumCollectionItemArray{ GetResourceQuotasResourceQuotumCollectionItemArgs{...} }
type GetResourceQuotasResourceQuotumCollectionItemArrayInput interface {
	pulumi.Input

	ToGetResourceQuotasResourceQuotumCollectionItemArrayOutput() GetResourceQuotasResourceQuotumCollectionItemArrayOutput
	ToGetResourceQuotasResourceQuotumCollectionItemArrayOutputWithContext(context.Context) GetResourceQuotasResourceQuotumCollectionItemArrayOutput
}

type GetResourceQuotasResourceQuotumCollectionItemArray []GetResourceQuotasResourceQuotumCollectionItemInput

func (GetResourceQuotasResourceQuotumCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceQuotasResourceQuotumCollectionItem)(nil)).Elem()
}

func (i GetResourceQuotasResourceQuotumCollectionItemArray) ToGetResourceQuotasResourceQuotumCollectionItemArrayOutput() GetResourceQuotasResourceQuotumCollectionItemArrayOutput {
	return i.ToGetResourceQuotasResourceQuotumCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetResourceQuotasResourceQuotumCollectionItemArray) ToGetResourceQuotasResourceQuotumCollectionItemArrayOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceQuotasResourceQuotumCollectionItemArrayOutput)
}

type GetResourceQuotasResourceQuotumCollectionItemOutput struct{ *pulumi.OutputState }

func (GetResourceQuotasResourceQuotumCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceQuotasResourceQuotumCollectionItem)(nil)).Elem()
}

func (o GetResourceQuotasResourceQuotumCollectionItemOutput) ToGetResourceQuotasResourceQuotumCollectionItemOutput() GetResourceQuotasResourceQuotumCollectionItemOutput {
	return o
}

func (o GetResourceQuotasResourceQuotumCollectionItemOutput) ToGetResourceQuotasResourceQuotumCollectionItemOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionItemOutput {
	return o
}

// The affected resource name.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) AffectedResource() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) string { return v.AffectedResource }).(pulumi.StringOutput)
}

// The quota balance.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) Balance() pulumi.Float64Output {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) float64 { return v.Balance }).(pulumi.Float64Output)
}

// Used to indicate if further quota consumption isAllowed.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) IsAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) bool { return v.IsAllowed }).(pulumi.BoolOutput)
}

// Used to indicate any resource dependencies.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) IsDependency() pulumi.BoolOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) bool { return v.IsDependency }).(pulumi.BoolOutput)
}

// Used to indicate if overages are incurred.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) IsOverage() pulumi.BoolOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) bool { return v.IsOverage }).(pulumi.BoolOutput)
}

// The resource name.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) string { return v.Name }).(pulumi.StringOutput)
}

// The purchased quota limit.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) PurchasedLimit() pulumi.Float64Output {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) float64 { return v.PurchasedLimit }).(pulumi.Float64Output)
}

// The service name.
func (o GetResourceQuotasResourceQuotumCollectionItemOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceQuotasResourceQuotumCollectionItem) string { return v.Service }).(pulumi.StringOutput)
}

type GetResourceQuotasResourceQuotumCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetResourceQuotasResourceQuotumCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceQuotasResourceQuotumCollectionItem)(nil)).Elem()
}

func (o GetResourceQuotasResourceQuotumCollectionItemArrayOutput) ToGetResourceQuotasResourceQuotumCollectionItemArrayOutput() GetResourceQuotasResourceQuotumCollectionItemArrayOutput {
	return o
}

func (o GetResourceQuotasResourceQuotumCollectionItemArrayOutput) ToGetResourceQuotasResourceQuotumCollectionItemArrayOutputWithContext(ctx context.Context) GetResourceQuotasResourceQuotumCollectionItemArrayOutput {
	return o
}

func (o GetResourceQuotasResourceQuotumCollectionItemArrayOutput) Index(i pulumi.IntInput) GetResourceQuotasResourceQuotumCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceQuotasResourceQuotumCollectionItem {
		return vs[0].([]GetResourceQuotasResourceQuotumCollectionItem)[vs[1].(int)]
	}).(GetResourceQuotasResourceQuotumCollectionItemOutput)
}

type GetResourcesFilter struct {
	// Name of the resource.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetResourcesFilterInput is an input type that accepts GetResourcesFilterArgs and GetResourcesFilterOutput values.
// You can construct a concrete instance of `GetResourcesFilterInput` via:
//
//	GetResourcesFilterArgs{...}
type GetResourcesFilterInput interface {
	pulumi.Input

	ToGetResourcesFilterOutput() GetResourcesFilterOutput
	ToGetResourcesFilterOutputWithContext(context.Context) GetResourcesFilterOutput
}

type GetResourcesFilterArgs struct {
	// Name of the resource.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetResourcesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesFilter)(nil)).Elem()
}

func (i GetResourcesFilterArgs) ToGetResourcesFilterOutput() GetResourcesFilterOutput {
	return i.ToGetResourcesFilterOutputWithContext(context.Background())
}

func (i GetResourcesFilterArgs) ToGetResourcesFilterOutputWithContext(ctx context.Context) GetResourcesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesFilterOutput)
}

// GetResourcesFilterArrayInput is an input type that accepts GetResourcesFilterArray and GetResourcesFilterArrayOutput values.
// You can construct a concrete instance of `GetResourcesFilterArrayInput` via:
//
//	GetResourcesFilterArray{ GetResourcesFilterArgs{...} }
type GetResourcesFilterArrayInput interface {
	pulumi.Input

	ToGetResourcesFilterArrayOutput() GetResourcesFilterArrayOutput
	ToGetResourcesFilterArrayOutputWithContext(context.Context) GetResourcesFilterArrayOutput
}

type GetResourcesFilterArray []GetResourcesFilterInput

func (GetResourcesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesFilter)(nil)).Elem()
}

func (i GetResourcesFilterArray) ToGetResourcesFilterArrayOutput() GetResourcesFilterArrayOutput {
	return i.ToGetResourcesFilterArrayOutputWithContext(context.Background())
}

func (i GetResourcesFilterArray) ToGetResourcesFilterArrayOutputWithContext(ctx context.Context) GetResourcesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesFilterArrayOutput)
}

type GetResourcesFilterOutput struct{ *pulumi.OutputState }

func (GetResourcesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesFilter)(nil)).Elem()
}

func (o GetResourcesFilterOutput) ToGetResourcesFilterOutput() GetResourcesFilterOutput {
	return o
}

func (o GetResourcesFilterOutput) ToGetResourcesFilterOutputWithContext(ctx context.Context) GetResourcesFilterOutput {
	return o
}

// Name of the resource.
func (o GetResourcesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetResourcesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourcesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetResourcesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResourcesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetResourcesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetResourcesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesFilter)(nil)).Elem()
}

func (o GetResourcesFilterArrayOutput) ToGetResourcesFilterArrayOutput() GetResourcesFilterArrayOutput {
	return o
}

func (o GetResourcesFilterArrayOutput) ToGetResourcesFilterArrayOutputWithContext(ctx context.Context) GetResourcesFilterArrayOutput {
	return o
}

func (o GetResourcesFilterArrayOutput) Index(i pulumi.IntInput) GetResourcesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourcesFilter {
		return vs[0].([]GetResourcesFilter)[vs[1].(int)]
	}).(GetResourcesFilterOutput)
}

type GetResourcesResourcesCollection struct {
	// The list of resource details for a service.
	Items []GetResourcesResourcesCollectionItem `pulumi:"items"`
}

// GetResourcesResourcesCollectionInput is an input type that accepts GetResourcesResourcesCollectionArgs and GetResourcesResourcesCollectionOutput values.
// You can construct a concrete instance of `GetResourcesResourcesCollectionInput` via:
//
//	GetResourcesResourcesCollectionArgs{...}
type GetResourcesResourcesCollectionInput interface {
	pulumi.Input

	ToGetResourcesResourcesCollectionOutput() GetResourcesResourcesCollectionOutput
	ToGetResourcesResourcesCollectionOutputWithContext(context.Context) GetResourcesResourcesCollectionOutput
}

type GetResourcesResourcesCollectionArgs struct {
	// The list of resource details for a service.
	Items GetResourcesResourcesCollectionItemArrayInput `pulumi:"items"`
}

func (GetResourcesResourcesCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesResourcesCollection)(nil)).Elem()
}

func (i GetResourcesResourcesCollectionArgs) ToGetResourcesResourcesCollectionOutput() GetResourcesResourcesCollectionOutput {
	return i.ToGetResourcesResourcesCollectionOutputWithContext(context.Background())
}

func (i GetResourcesResourcesCollectionArgs) ToGetResourcesResourcesCollectionOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesResourcesCollectionOutput)
}

// GetResourcesResourcesCollectionArrayInput is an input type that accepts GetResourcesResourcesCollectionArray and GetResourcesResourcesCollectionArrayOutput values.
// You can construct a concrete instance of `GetResourcesResourcesCollectionArrayInput` via:
//
//	GetResourcesResourcesCollectionArray{ GetResourcesResourcesCollectionArgs{...} }
type GetResourcesResourcesCollectionArrayInput interface {
	pulumi.Input

	ToGetResourcesResourcesCollectionArrayOutput() GetResourcesResourcesCollectionArrayOutput
	ToGetResourcesResourcesCollectionArrayOutputWithContext(context.Context) GetResourcesResourcesCollectionArrayOutput
}

type GetResourcesResourcesCollectionArray []GetResourcesResourcesCollectionInput

func (GetResourcesResourcesCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesResourcesCollection)(nil)).Elem()
}

func (i GetResourcesResourcesCollectionArray) ToGetResourcesResourcesCollectionArrayOutput() GetResourcesResourcesCollectionArrayOutput {
	return i.ToGetResourcesResourcesCollectionArrayOutputWithContext(context.Background())
}

func (i GetResourcesResourcesCollectionArray) ToGetResourcesResourcesCollectionArrayOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesResourcesCollectionArrayOutput)
}

type GetResourcesResourcesCollectionOutput struct{ *pulumi.OutputState }

func (GetResourcesResourcesCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesResourcesCollection)(nil)).Elem()
}

func (o GetResourcesResourcesCollectionOutput) ToGetResourcesResourcesCollectionOutput() GetResourcesResourcesCollectionOutput {
	return o
}

func (o GetResourcesResourcesCollectionOutput) ToGetResourcesResourcesCollectionOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionOutput {
	return o
}

// The list of resource details for a service.
func (o GetResourcesResourcesCollectionOutput) Items() GetResourcesResourcesCollectionItemArrayOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollection) []GetResourcesResourcesCollectionItem { return v.Items }).(GetResourcesResourcesCollectionItemArrayOutput)
}

type GetResourcesResourcesCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetResourcesResourcesCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesResourcesCollection)(nil)).Elem()
}

func (o GetResourcesResourcesCollectionArrayOutput) ToGetResourcesResourcesCollectionArrayOutput() GetResourcesResourcesCollectionArrayOutput {
	return o
}

func (o GetResourcesResourcesCollectionArrayOutput) ToGetResourcesResourcesCollectionArrayOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionArrayOutput {
	return o
}

func (o GetResourcesResourcesCollectionArrayOutput) Index(i pulumi.IntInput) GetResourcesResourcesCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourcesResourcesCollection {
		return vs[0].([]GetResourcesResourcesCollection)[vs[1].(int)]
	}).(GetResourcesResourcesCollectionOutput)
}

type GetResourcesResourcesCollectionItem struct {
	// The details of any child resources.
	ChildResources []string `pulumi:"childResources"`
	// Units to be used for daily aggregated data.
	DailyUnitDisplayName string `pulumi:"dailyUnitDisplayName"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Units to be used for hourly aggregated data.
	HourlyUnitDisplayName string `pulumi:"hourlyUnitDisplayName"`
	// Instance type for the resource.
	InstanceType string `pulumi:"instanceType"`
	// Indicates if the SKU was purchased
	IsPurchased bool `pulumi:"isPurchased"`
	// Name of the resource.
	Name string `pulumi:"name"`
	// Default units to use when unspecified.
	RawUnitDisplayName string `pulumi:"rawUnitDisplayName"`
	// Name of the service.
	Servicename string `pulumi:"servicename"`
	// The details of resource Skus.
	Skuses []GetResourcesResourcesCollectionItemSkus `pulumi:"skuses"`
	// Usage data type of the resource.
	UsageDataType string `pulumi:"usageDataType"`
}

// GetResourcesResourcesCollectionItemInput is an input type that accepts GetResourcesResourcesCollectionItemArgs and GetResourcesResourcesCollectionItemOutput values.
// You can construct a concrete instance of `GetResourcesResourcesCollectionItemInput` via:
//
//	GetResourcesResourcesCollectionItemArgs{...}
type GetResourcesResourcesCollectionItemInput interface {
	pulumi.Input

	ToGetResourcesResourcesCollectionItemOutput() GetResourcesResourcesCollectionItemOutput
	ToGetResourcesResourcesCollectionItemOutputWithContext(context.Context) GetResourcesResourcesCollectionItemOutput
}

type GetResourcesResourcesCollectionItemArgs struct {
	// The details of any child resources.
	ChildResources pulumi.StringArrayInput `pulumi:"childResources"`
	// Units to be used for daily aggregated data.
	DailyUnitDisplayName pulumi.StringInput `pulumi:"dailyUnitDisplayName"`
	// Description of the resource.
	Description pulumi.StringInput `pulumi:"description"`
	// Units to be used for hourly aggregated data.
	HourlyUnitDisplayName pulumi.StringInput `pulumi:"hourlyUnitDisplayName"`
	// Instance type for the resource.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Indicates if the SKU was purchased
	IsPurchased pulumi.BoolInput `pulumi:"isPurchased"`
	// Name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Default units to use when unspecified.
	RawUnitDisplayName pulumi.StringInput `pulumi:"rawUnitDisplayName"`
	// Name of the service.
	Servicename pulumi.StringInput `pulumi:"servicename"`
	// The details of resource Skus.
	Skuses GetResourcesResourcesCollectionItemSkusArrayInput `pulumi:"skuses"`
	// Usage data type of the resource.
	UsageDataType pulumi.StringInput `pulumi:"usageDataType"`
}

func (GetResourcesResourcesCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesResourcesCollectionItem)(nil)).Elem()
}

func (i GetResourcesResourcesCollectionItemArgs) ToGetResourcesResourcesCollectionItemOutput() GetResourcesResourcesCollectionItemOutput {
	return i.ToGetResourcesResourcesCollectionItemOutputWithContext(context.Background())
}

func (i GetResourcesResourcesCollectionItemArgs) ToGetResourcesResourcesCollectionItemOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesResourcesCollectionItemOutput)
}

// GetResourcesResourcesCollectionItemArrayInput is an input type that accepts GetResourcesResourcesCollectionItemArray and GetResourcesResourcesCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetResourcesResourcesCollectionItemArrayInput` via:
//
//	GetResourcesResourcesCollectionItemArray{ GetResourcesResourcesCollectionItemArgs{...} }
type GetResourcesResourcesCollectionItemArrayInput interface {
	pulumi.Input

	ToGetResourcesResourcesCollectionItemArrayOutput() GetResourcesResourcesCollectionItemArrayOutput
	ToGetResourcesResourcesCollectionItemArrayOutputWithContext(context.Context) GetResourcesResourcesCollectionItemArrayOutput
}

type GetResourcesResourcesCollectionItemArray []GetResourcesResourcesCollectionItemInput

func (GetResourcesResourcesCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesResourcesCollectionItem)(nil)).Elem()
}

func (i GetResourcesResourcesCollectionItemArray) ToGetResourcesResourcesCollectionItemArrayOutput() GetResourcesResourcesCollectionItemArrayOutput {
	return i.ToGetResourcesResourcesCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetResourcesResourcesCollectionItemArray) ToGetResourcesResourcesCollectionItemArrayOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesResourcesCollectionItemArrayOutput)
}

type GetResourcesResourcesCollectionItemOutput struct{ *pulumi.OutputState }

func (GetResourcesResourcesCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesResourcesCollectionItem)(nil)).Elem()
}

func (o GetResourcesResourcesCollectionItemOutput) ToGetResourcesResourcesCollectionItemOutput() GetResourcesResourcesCollectionItemOutput {
	return o
}

func (o GetResourcesResourcesCollectionItemOutput) ToGetResourcesResourcesCollectionItemOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemOutput {
	return o
}

// The details of any child resources.
func (o GetResourcesResourcesCollectionItemOutput) ChildResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) []string { return v.ChildResources }).(pulumi.StringArrayOutput)
}

// Units to be used for daily aggregated data.
func (o GetResourcesResourcesCollectionItemOutput) DailyUnitDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.DailyUnitDisplayName }).(pulumi.StringOutput)
}

// Description of the resource.
func (o GetResourcesResourcesCollectionItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.Description }).(pulumi.StringOutput)
}

// Units to be used for hourly aggregated data.
func (o GetResourcesResourcesCollectionItemOutput) HourlyUnitDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.HourlyUnitDisplayName }).(pulumi.StringOutput)
}

// Instance type for the resource.
func (o GetResourcesResourcesCollectionItemOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Indicates if the SKU was purchased
func (o GetResourcesResourcesCollectionItemOutput) IsPurchased() pulumi.BoolOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) bool { return v.IsPurchased }).(pulumi.BoolOutput)
}

// Name of the resource.
func (o GetResourcesResourcesCollectionItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.Name }).(pulumi.StringOutput)
}

// Default units to use when unspecified.
func (o GetResourcesResourcesCollectionItemOutput) RawUnitDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.RawUnitDisplayName }).(pulumi.StringOutput)
}

// Name of the service.
func (o GetResourcesResourcesCollectionItemOutput) Servicename() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.Servicename }).(pulumi.StringOutput)
}

// The details of resource Skus.
func (o GetResourcesResourcesCollectionItemOutput) Skuses() GetResourcesResourcesCollectionItemSkusArrayOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) []GetResourcesResourcesCollectionItemSkus { return v.Skuses }).(GetResourcesResourcesCollectionItemSkusArrayOutput)
}

// Usage data type of the resource.
func (o GetResourcesResourcesCollectionItemOutput) UsageDataType() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItem) string { return v.UsageDataType }).(pulumi.StringOutput)
}

type GetResourcesResourcesCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetResourcesResourcesCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesResourcesCollectionItem)(nil)).Elem()
}

func (o GetResourcesResourcesCollectionItemArrayOutput) ToGetResourcesResourcesCollectionItemArrayOutput() GetResourcesResourcesCollectionItemArrayOutput {
	return o
}

func (o GetResourcesResourcesCollectionItemArrayOutput) ToGetResourcesResourcesCollectionItemArrayOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemArrayOutput {
	return o
}

func (o GetResourcesResourcesCollectionItemArrayOutput) Index(i pulumi.IntInput) GetResourcesResourcesCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourcesResourcesCollectionItem {
		return vs[0].([]GetResourcesResourcesCollectionItem)[vs[1].(int)]
	}).(GetResourcesResourcesCollectionItemOutput)
}

type GetResourcesResourcesCollectionItemSkus struct {
	// The cloud credit type for the resource.
	CloudCreditType string `pulumi:"cloudCreditType"`
	// The Sku Id for the resource.
	SkuId string `pulumi:"skuId"`
	// The Sku type for the resource.
	SkuType string `pulumi:"skuType"`
}

// GetResourcesResourcesCollectionItemSkusInput is an input type that accepts GetResourcesResourcesCollectionItemSkusArgs and GetResourcesResourcesCollectionItemSkusOutput values.
// You can construct a concrete instance of `GetResourcesResourcesCollectionItemSkusInput` via:
//
//	GetResourcesResourcesCollectionItemSkusArgs{...}
type GetResourcesResourcesCollectionItemSkusInput interface {
	pulumi.Input

	ToGetResourcesResourcesCollectionItemSkusOutput() GetResourcesResourcesCollectionItemSkusOutput
	ToGetResourcesResourcesCollectionItemSkusOutputWithContext(context.Context) GetResourcesResourcesCollectionItemSkusOutput
}

type GetResourcesResourcesCollectionItemSkusArgs struct {
	// The cloud credit type for the resource.
	CloudCreditType pulumi.StringInput `pulumi:"cloudCreditType"`
	// The Sku Id for the resource.
	SkuId pulumi.StringInput `pulumi:"skuId"`
	// The Sku type for the resource.
	SkuType pulumi.StringInput `pulumi:"skuType"`
}

func (GetResourcesResourcesCollectionItemSkusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesResourcesCollectionItemSkus)(nil)).Elem()
}

func (i GetResourcesResourcesCollectionItemSkusArgs) ToGetResourcesResourcesCollectionItemSkusOutput() GetResourcesResourcesCollectionItemSkusOutput {
	return i.ToGetResourcesResourcesCollectionItemSkusOutputWithContext(context.Background())
}

func (i GetResourcesResourcesCollectionItemSkusArgs) ToGetResourcesResourcesCollectionItemSkusOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemSkusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesResourcesCollectionItemSkusOutput)
}

// GetResourcesResourcesCollectionItemSkusArrayInput is an input type that accepts GetResourcesResourcesCollectionItemSkusArray and GetResourcesResourcesCollectionItemSkusArrayOutput values.
// You can construct a concrete instance of `GetResourcesResourcesCollectionItemSkusArrayInput` via:
//
//	GetResourcesResourcesCollectionItemSkusArray{ GetResourcesResourcesCollectionItemSkusArgs{...} }
type GetResourcesResourcesCollectionItemSkusArrayInput interface {
	pulumi.Input

	ToGetResourcesResourcesCollectionItemSkusArrayOutput() GetResourcesResourcesCollectionItemSkusArrayOutput
	ToGetResourcesResourcesCollectionItemSkusArrayOutputWithContext(context.Context) GetResourcesResourcesCollectionItemSkusArrayOutput
}

type GetResourcesResourcesCollectionItemSkusArray []GetResourcesResourcesCollectionItemSkusInput

func (GetResourcesResourcesCollectionItemSkusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesResourcesCollectionItemSkus)(nil)).Elem()
}

func (i GetResourcesResourcesCollectionItemSkusArray) ToGetResourcesResourcesCollectionItemSkusArrayOutput() GetResourcesResourcesCollectionItemSkusArrayOutput {
	return i.ToGetResourcesResourcesCollectionItemSkusArrayOutputWithContext(context.Background())
}

func (i GetResourcesResourcesCollectionItemSkusArray) ToGetResourcesResourcesCollectionItemSkusArrayOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemSkusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourcesResourcesCollectionItemSkusArrayOutput)
}

type GetResourcesResourcesCollectionItemSkusOutput struct{ *pulumi.OutputState }

func (GetResourcesResourcesCollectionItemSkusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcesResourcesCollectionItemSkus)(nil)).Elem()
}

func (o GetResourcesResourcesCollectionItemSkusOutput) ToGetResourcesResourcesCollectionItemSkusOutput() GetResourcesResourcesCollectionItemSkusOutput {
	return o
}

func (o GetResourcesResourcesCollectionItemSkusOutput) ToGetResourcesResourcesCollectionItemSkusOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemSkusOutput {
	return o
}

// The cloud credit type for the resource.
func (o GetResourcesResourcesCollectionItemSkusOutput) CloudCreditType() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItemSkus) string { return v.CloudCreditType }).(pulumi.StringOutput)
}

// The Sku Id for the resource.
func (o GetResourcesResourcesCollectionItemSkusOutput) SkuId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItemSkus) string { return v.SkuId }).(pulumi.StringOutput)
}

// The Sku type for the resource.
func (o GetResourcesResourcesCollectionItemSkusOutput) SkuType() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcesResourcesCollectionItemSkus) string { return v.SkuType }).(pulumi.StringOutput)
}

type GetResourcesResourcesCollectionItemSkusArrayOutput struct{ *pulumi.OutputState }

func (GetResourcesResourcesCollectionItemSkusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourcesResourcesCollectionItemSkus)(nil)).Elem()
}

func (o GetResourcesResourcesCollectionItemSkusArrayOutput) ToGetResourcesResourcesCollectionItemSkusArrayOutput() GetResourcesResourcesCollectionItemSkusArrayOutput {
	return o
}

func (o GetResourcesResourcesCollectionItemSkusArrayOutput) ToGetResourcesResourcesCollectionItemSkusArrayOutputWithContext(ctx context.Context) GetResourcesResourcesCollectionItemSkusArrayOutput {
	return o
}

func (o GetResourcesResourcesCollectionItemSkusArrayOutput) Index(i pulumi.IntInput) GetResourcesResourcesCollectionItemSkusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourcesResourcesCollectionItemSkus {
		return vs[0].([]GetResourcesResourcesCollectionItemSkus)[vs[1].(int)]
	}).(GetResourcesResourcesCollectionItemSkusOutput)
}

type GetSubscriptionProductItem struct {
	// The earned rewards for the product.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards bool `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName string `pulumi:"productName"`
	// The rate card product number.
	ProductNumber string `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount float64 `pulumi:"usageAmount"`
}

// GetSubscriptionProductItemInput is an input type that accepts GetSubscriptionProductItemArgs and GetSubscriptionProductItemOutput values.
// You can construct a concrete instance of `GetSubscriptionProductItemInput` via:
//
//	GetSubscriptionProductItemArgs{...}
type GetSubscriptionProductItemInput interface {
	pulumi.Input

	ToGetSubscriptionProductItemOutput() GetSubscriptionProductItemOutput
	ToGetSubscriptionProductItemOutputWithContext(context.Context) GetSubscriptionProductItemOutput
}

type GetSubscriptionProductItemArgs struct {
	// The earned rewards for the product.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards pulumi.BoolInput `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName pulumi.StringInput `pulumi:"productName"`
	// The rate card product number.
	ProductNumber pulumi.StringInput `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
}

func (GetSubscriptionProductItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductItem)(nil)).Elem()
}

func (i GetSubscriptionProductItemArgs) ToGetSubscriptionProductItemOutput() GetSubscriptionProductItemOutput {
	return i.ToGetSubscriptionProductItemOutputWithContext(context.Background())
}

func (i GetSubscriptionProductItemArgs) ToGetSubscriptionProductItemOutputWithContext(ctx context.Context) GetSubscriptionProductItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductItemOutput)
}

// GetSubscriptionProductItemArrayInput is an input type that accepts GetSubscriptionProductItemArray and GetSubscriptionProductItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductItemArrayInput` via:
//
//	GetSubscriptionProductItemArray{ GetSubscriptionProductItemArgs{...} }
type GetSubscriptionProductItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductItemArrayOutput() GetSubscriptionProductItemArrayOutput
	ToGetSubscriptionProductItemArrayOutputWithContext(context.Context) GetSubscriptionProductItemArrayOutput
}

type GetSubscriptionProductItemArray []GetSubscriptionProductItemInput

func (GetSubscriptionProductItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductItem)(nil)).Elem()
}

func (i GetSubscriptionProductItemArray) ToGetSubscriptionProductItemArrayOutput() GetSubscriptionProductItemArrayOutput {
	return i.ToGetSubscriptionProductItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductItemArray) ToGetSubscriptionProductItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductItemArrayOutput)
}

type GetSubscriptionProductItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductItem)(nil)).Elem()
}

func (o GetSubscriptionProductItemOutput) ToGetSubscriptionProductItemOutput() GetSubscriptionProductItemOutput {
	return o
}

func (o GetSubscriptionProductItemOutput) ToGetSubscriptionProductItemOutputWithContext(ctx context.Context) GetSubscriptionProductItemOutput {
	return o
}

// The earned rewards for the product.
func (o GetSubscriptionProductItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The boolean parameter to indicate if the product is eligible to earn rewards.
func (o GetSubscriptionProductItemOutput) IsEligibleToEarnRewards() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionProductItem) bool { return v.IsEligibleToEarnRewards }).(pulumi.BoolOutput)
}

// The rate card product name.
func (o GetSubscriptionProductItemOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductItem) string { return v.ProductName }).(pulumi.StringOutput)
}

// The rate card product number.
func (o GetSubscriptionProductItemOutput) ProductNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductItem) string { return v.ProductNumber }).(pulumi.StringOutput)
}

// The rate card product usage amount.
func (o GetSubscriptionProductItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

type GetSubscriptionProductItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductItem)(nil)).Elem()
}

func (o GetSubscriptionProductItemArrayOutput) ToGetSubscriptionProductItemArrayOutput() GetSubscriptionProductItemArrayOutput {
	return o
}

func (o GetSubscriptionProductItemArrayOutput) ToGetSubscriptionProductItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductItemArrayOutput {
	return o
}

func (o GetSubscriptionProductItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductItem {
		return vs[0].([]GetSubscriptionProductItem)[vs[1].(int)]
	}).(GetSubscriptionProductItemOutput)
}

type GetSubscriptionProductsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSubscriptionProductsFilterInput is an input type that accepts GetSubscriptionProductsFilterArgs and GetSubscriptionProductsFilterOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsFilterInput` via:
//
//	GetSubscriptionProductsFilterArgs{...}
type GetSubscriptionProductsFilterInput interface {
	pulumi.Input

	ToGetSubscriptionProductsFilterOutput() GetSubscriptionProductsFilterOutput
	ToGetSubscriptionProductsFilterOutputWithContext(context.Context) GetSubscriptionProductsFilterOutput
}

type GetSubscriptionProductsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSubscriptionProductsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsFilter)(nil)).Elem()
}

func (i GetSubscriptionProductsFilterArgs) ToGetSubscriptionProductsFilterOutput() GetSubscriptionProductsFilterOutput {
	return i.ToGetSubscriptionProductsFilterOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsFilterArgs) ToGetSubscriptionProductsFilterOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsFilterOutput)
}

// GetSubscriptionProductsFilterArrayInput is an input type that accepts GetSubscriptionProductsFilterArray and GetSubscriptionProductsFilterArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsFilterArrayInput` via:
//
//	GetSubscriptionProductsFilterArray{ GetSubscriptionProductsFilterArgs{...} }
type GetSubscriptionProductsFilterArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsFilterArrayOutput() GetSubscriptionProductsFilterArrayOutput
	ToGetSubscriptionProductsFilterArrayOutputWithContext(context.Context) GetSubscriptionProductsFilterArrayOutput
}

type GetSubscriptionProductsFilterArray []GetSubscriptionProductsFilterInput

func (GetSubscriptionProductsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsFilter)(nil)).Elem()
}

func (i GetSubscriptionProductsFilterArray) ToGetSubscriptionProductsFilterArrayOutput() GetSubscriptionProductsFilterArrayOutput {
	return i.ToGetSubscriptionProductsFilterArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsFilterArray) ToGetSubscriptionProductsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsFilterArrayOutput)
}

type GetSubscriptionProductsFilterOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsFilter)(nil)).Elem()
}

func (o GetSubscriptionProductsFilterOutput) ToGetSubscriptionProductsFilterOutput() GetSubscriptionProductsFilterOutput {
	return o
}

func (o GetSubscriptionProductsFilterOutput) ToGetSubscriptionProductsFilterOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterOutput {
	return o
}

func (o GetSubscriptionProductsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSubscriptionProductsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubscriptionProductsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSubscriptionProductsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionProductsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSubscriptionProductsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsFilter)(nil)).Elem()
}

func (o GetSubscriptionProductsFilterArrayOutput) ToGetSubscriptionProductsFilterArrayOutput() GetSubscriptionProductsFilterArrayOutput {
	return o
}

func (o GetSubscriptionProductsFilterArrayOutput) ToGetSubscriptionProductsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsFilterArrayOutput {
	return o
}

func (o GetSubscriptionProductsFilterArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsFilter {
		return vs[0].([]GetSubscriptionProductsFilter)[vs[1].(int)]
	}).(GetSubscriptionProductsFilterOutput)
}

type GetSubscriptionProductsProductCollection struct {
	// The list of product rewards summaries.
	Items []GetSubscriptionProductsProductCollectionItem `pulumi:"items"`
}

// GetSubscriptionProductsProductCollectionInput is an input type that accepts GetSubscriptionProductsProductCollectionArgs and GetSubscriptionProductsProductCollectionOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionInput` via:
//
//	GetSubscriptionProductsProductCollectionArgs{...}
type GetSubscriptionProductsProductCollectionInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionOutput() GetSubscriptionProductsProductCollectionOutput
	ToGetSubscriptionProductsProductCollectionOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionOutput
}

type GetSubscriptionProductsProductCollectionArgs struct {
	// The list of product rewards summaries.
	Items GetSubscriptionProductsProductCollectionItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionProductsProductCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionArgs) ToGetSubscriptionProductsProductCollectionOutput() GetSubscriptionProductsProductCollectionOutput {
	return i.ToGetSubscriptionProductsProductCollectionOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionArgs) ToGetSubscriptionProductsProductCollectionOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionOutput)
}

// GetSubscriptionProductsProductCollectionArrayInput is an input type that accepts GetSubscriptionProductsProductCollectionArray and GetSubscriptionProductsProductCollectionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionArrayInput` via:
//
//	GetSubscriptionProductsProductCollectionArray{ GetSubscriptionProductsProductCollectionArgs{...} }
type GetSubscriptionProductsProductCollectionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionArrayOutput() GetSubscriptionProductsProductCollectionArrayOutput
	ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionArrayOutput
}

type GetSubscriptionProductsProductCollectionArray []GetSubscriptionProductsProductCollectionInput

func (GetSubscriptionProductsProductCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionArray) ToGetSubscriptionProductsProductCollectionArrayOutput() GetSubscriptionProductsProductCollectionArrayOutput {
	return i.ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionArray) ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionArrayOutput)
}

type GetSubscriptionProductsProductCollectionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionOutput) ToGetSubscriptionProductsProductCollectionOutput() GetSubscriptionProductsProductCollectionOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionOutput) ToGetSubscriptionProductsProductCollectionOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionOutput {
	return o
}

// The list of product rewards summaries.
func (o GetSubscriptionProductsProductCollectionOutput) Items() GetSubscriptionProductsProductCollectionItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollection) []GetSubscriptionProductsProductCollectionItem {
		return v.Items
	}).(GetSubscriptionProductsProductCollectionItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollection)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionArrayOutput) ToGetSubscriptionProductsProductCollectionArrayOutput() GetSubscriptionProductsProductCollectionArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionArrayOutput) ToGetSubscriptionProductsProductCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsProductCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsProductCollection {
		return vs[0].([]GetSubscriptionProductsProductCollection)[vs[1].(int)]
	}).(GetSubscriptionProductsProductCollectionOutput)
}

type GetSubscriptionProductsProductCollectionItem struct {
	// The list of product rewards summaries.
	Items []GetSubscriptionProductsProductCollectionItemItem `pulumi:"items"`
}

// GetSubscriptionProductsProductCollectionItemInput is an input type that accepts GetSubscriptionProductsProductCollectionItemArgs and GetSubscriptionProductsProductCollectionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemInput` via:
//
//	GetSubscriptionProductsProductCollectionItemArgs{...}
type GetSubscriptionProductsProductCollectionItemInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemOutput() GetSubscriptionProductsProductCollectionItemOutput
	ToGetSubscriptionProductsProductCollectionItemOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemOutput
}

type GetSubscriptionProductsProductCollectionItemArgs struct {
	// The list of product rewards summaries.
	Items GetSubscriptionProductsProductCollectionItemItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionProductsProductCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemArgs) ToGetSubscriptionProductsProductCollectionItemOutput() GetSubscriptionProductsProductCollectionItemOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemArgs) ToGetSubscriptionProductsProductCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemOutput)
}

// GetSubscriptionProductsProductCollectionItemArrayInput is an input type that accepts GetSubscriptionProductsProductCollectionItemArray and GetSubscriptionProductsProductCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemArrayInput` via:
//
//	GetSubscriptionProductsProductCollectionItemArray{ GetSubscriptionProductsProductCollectionItemArgs{...} }
type GetSubscriptionProductsProductCollectionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemArrayOutput() GetSubscriptionProductsProductCollectionItemArrayOutput
	ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemArrayOutput
}

type GetSubscriptionProductsProductCollectionItemArray []GetSubscriptionProductsProductCollectionItemInput

func (GetSubscriptionProductsProductCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemArray) ToGetSubscriptionProductsProductCollectionItemArrayOutput() GetSubscriptionProductsProductCollectionItemArrayOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemArray) ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemOutput) ToGetSubscriptionProductsProductCollectionItemOutput() GetSubscriptionProductsProductCollectionItemOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemOutput) ToGetSubscriptionProductsProductCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemOutput {
	return o
}

// The list of product rewards summaries.
func (o GetSubscriptionProductsProductCollectionItemOutput) Items() GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItem) []GetSubscriptionProductsProductCollectionItemItem {
		return v.Items
	}).(GetSubscriptionProductsProductCollectionItemItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemArrayOutput() GetSubscriptionProductsProductCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsProductCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsProductCollectionItem {
		return vs[0].([]GetSubscriptionProductsProductCollectionItem)[vs[1].(int)]
	}).(GetSubscriptionProductsProductCollectionItemOutput)
}

type GetSubscriptionProductsProductCollectionItemItem struct {
	// The earned rewards for the product.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards bool `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName string `pulumi:"productName"`
	// The rate card product number.
	ProductNumber string `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount float64 `pulumi:"usageAmount"`
}

// GetSubscriptionProductsProductCollectionItemItemInput is an input type that accepts GetSubscriptionProductsProductCollectionItemItemArgs and GetSubscriptionProductsProductCollectionItemItemOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemItemInput` via:
//
//	GetSubscriptionProductsProductCollectionItemItemArgs{...}
type GetSubscriptionProductsProductCollectionItemItemInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemItemOutput() GetSubscriptionProductsProductCollectionItemItemOutput
	ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemItemOutput
}

type GetSubscriptionProductsProductCollectionItemItemArgs struct {
	// The earned rewards for the product.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The boolean parameter to indicate if the product is eligible to earn rewards.
	IsEligibleToEarnRewards pulumi.BoolInput `pulumi:"isEligibleToEarnRewards"`
	// The rate card product name.
	ProductName pulumi.StringInput `pulumi:"productName"`
	// The rate card product number.
	ProductNumber pulumi.StringInput `pulumi:"productNumber"`
	// The rate card product usage amount.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
}

func (GetSubscriptionProductsProductCollectionItemItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemItemArgs) ToGetSubscriptionProductsProductCollectionItemItemOutput() GetSubscriptionProductsProductCollectionItemItemOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemItemArgs) ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemItemOutput)
}

// GetSubscriptionProductsProductCollectionItemItemArrayInput is an input type that accepts GetSubscriptionProductsProductCollectionItemItemArray and GetSubscriptionProductsProductCollectionItemItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionProductsProductCollectionItemItemArrayInput` via:
//
//	GetSubscriptionProductsProductCollectionItemItemArray{ GetSubscriptionProductsProductCollectionItemItemArgs{...} }
type GetSubscriptionProductsProductCollectionItemItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionProductsProductCollectionItemItemArrayOutput() GetSubscriptionProductsProductCollectionItemItemArrayOutput
	ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(context.Context) GetSubscriptionProductsProductCollectionItemItemArrayOutput
}

type GetSubscriptionProductsProductCollectionItemItemArray []GetSubscriptionProductsProductCollectionItemItemInput

func (GetSubscriptionProductsProductCollectionItemItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionProductsProductCollectionItemItemArray) ToGetSubscriptionProductsProductCollectionItemItemArrayOutput() GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return i.ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionProductsProductCollectionItemItemArray) ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionProductsProductCollectionItemItemArrayOutput)
}

type GetSubscriptionProductsProductCollectionItemItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemItemOutput) ToGetSubscriptionProductsProductCollectionItemItemOutput() GetSubscriptionProductsProductCollectionItemItemOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemItemOutput) ToGetSubscriptionProductsProductCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemOutput {
	return o
}

// The earned rewards for the product.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The boolean parameter to indicate if the product is eligible to earn rewards.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) IsEligibleToEarnRewards() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) bool { return v.IsEligibleToEarnRewards }).(pulumi.BoolOutput)
}

// The rate card product name.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) string { return v.ProductName }).(pulumi.StringOutput)
}

// The rate card product number.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) ProductNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) string { return v.ProductNumber }).(pulumi.StringOutput)
}

// The rate card product usage amount.
func (o GetSubscriptionProductsProductCollectionItemItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionProductsProductCollectionItemItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

type GetSubscriptionProductsProductCollectionItemItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionProductsProductCollectionItemItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionProductsProductCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionProductsProductCollectionItemItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemItemArrayOutput() GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemItemArrayOutput) ToGetSubscriptionProductsProductCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionProductsProductCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionProductsProductCollectionItemItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionProductsProductCollectionItemItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionProductsProductCollectionItemItem {
		return vs[0].([]GetSubscriptionProductsProductCollectionItemItem)[vs[1].(int)]
	}).(GetSubscriptionProductsProductCollectionItemItemOutput)
}

type GetSubscriptionRedeemableUserItem struct {
	// The email ID of the user that can redeem rewards.
	EmailId string `pulumi:"emailId"`
	// The first name of the user that can redeem rewards.
	FirstName string `pulumi:"firstName"`
	// The last name of the user that can redeem rewards.
	LastName string `pulumi:"lastName"`
}

// GetSubscriptionRedeemableUserItemInput is an input type that accepts GetSubscriptionRedeemableUserItemArgs and GetSubscriptionRedeemableUserItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUserItemInput` via:
//
//	GetSubscriptionRedeemableUserItemArgs{...}
type GetSubscriptionRedeemableUserItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUserItemOutput() GetSubscriptionRedeemableUserItemOutput
	ToGetSubscriptionRedeemableUserItemOutputWithContext(context.Context) GetSubscriptionRedeemableUserItemOutput
}

type GetSubscriptionRedeemableUserItemArgs struct {
	// The email ID of the user that can redeem rewards.
	EmailId pulumi.StringInput `pulumi:"emailId"`
	// The first name of the user that can redeem rewards.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// The last name of the user that can redeem rewards.
	LastName pulumi.StringInput `pulumi:"lastName"`
}

func (GetSubscriptionRedeemableUserItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUserItemArgs) ToGetSubscriptionRedeemableUserItemOutput() GetSubscriptionRedeemableUserItemOutput {
	return i.ToGetSubscriptionRedeemableUserItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUserItemArgs) ToGetSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUserItemOutput)
}

// GetSubscriptionRedeemableUserItemArrayInput is an input type that accepts GetSubscriptionRedeemableUserItemArray and GetSubscriptionRedeemableUserItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUserItemArrayInput` via:
//
//	GetSubscriptionRedeemableUserItemArray{ GetSubscriptionRedeemableUserItemArgs{...} }
type GetSubscriptionRedeemableUserItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUserItemArrayOutput() GetSubscriptionRedeemableUserItemArrayOutput
	ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUserItemArrayOutput
}

type GetSubscriptionRedeemableUserItemArray []GetSubscriptionRedeemableUserItemInput

func (GetSubscriptionRedeemableUserItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUserItemArray) ToGetSubscriptionRedeemableUserItemArrayOutput() GetSubscriptionRedeemableUserItemArrayOutput {
	return i.ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUserItemArray) ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUserItemArrayOutput)
}

type GetSubscriptionRedeemableUserItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUserItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUserItemOutput) ToGetSubscriptionRedeemableUserItemOutput() GetSubscriptionRedeemableUserItemOutput {
	return o
}

func (o GetSubscriptionRedeemableUserItemOutput) ToGetSubscriptionRedeemableUserItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemOutput {
	return o
}

// The email ID of the user that can redeem rewards.
func (o GetSubscriptionRedeemableUserItemOutput) EmailId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUserItem) string { return v.EmailId }).(pulumi.StringOutput)
}

// The first name of the user that can redeem rewards.
func (o GetSubscriptionRedeemableUserItemOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUserItem) string { return v.FirstName }).(pulumi.StringOutput)
}

// The last name of the user that can redeem rewards.
func (o GetSubscriptionRedeemableUserItemOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUserItem) string { return v.LastName }).(pulumi.StringOutput)
}

type GetSubscriptionRedeemableUserItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUserItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUserItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUserItemArrayOutput) ToGetSubscriptionRedeemableUserItemArrayOutput() GetSubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUserItemArrayOutput) ToGetSubscriptionRedeemableUserItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUserItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUserItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUserItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUserItem {
		return vs[0].([]GetSubscriptionRedeemableUserItem)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUserItemOutput)
}

type GetSubscriptionRedeemableUsersFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSubscriptionRedeemableUsersFilterInput is an input type that accepts GetSubscriptionRedeemableUsersFilterArgs and GetSubscriptionRedeemableUsersFilterOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersFilterInput` via:
//
//	GetSubscriptionRedeemableUsersFilterArgs{...}
type GetSubscriptionRedeemableUsersFilterInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersFilterOutput() GetSubscriptionRedeemableUsersFilterOutput
	ToGetSubscriptionRedeemableUsersFilterOutputWithContext(context.Context) GetSubscriptionRedeemableUsersFilterOutput
}

type GetSubscriptionRedeemableUsersFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSubscriptionRedeemableUsersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersFilterArgs) ToGetSubscriptionRedeemableUsersFilterOutput() GetSubscriptionRedeemableUsersFilterOutput {
	return i.ToGetSubscriptionRedeemableUsersFilterOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersFilterArgs) ToGetSubscriptionRedeemableUsersFilterOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersFilterOutput)
}

// GetSubscriptionRedeemableUsersFilterArrayInput is an input type that accepts GetSubscriptionRedeemableUsersFilterArray and GetSubscriptionRedeemableUsersFilterArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersFilterArrayInput` via:
//
//	GetSubscriptionRedeemableUsersFilterArray{ GetSubscriptionRedeemableUsersFilterArgs{...} }
type GetSubscriptionRedeemableUsersFilterArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersFilterArrayOutput() GetSubscriptionRedeemableUsersFilterArrayOutput
	ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersFilterArrayOutput
}

type GetSubscriptionRedeemableUsersFilterArray []GetSubscriptionRedeemableUsersFilterInput

func (GetSubscriptionRedeemableUsersFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersFilterArray) ToGetSubscriptionRedeemableUsersFilterArrayOutput() GetSubscriptionRedeemableUsersFilterArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersFilterArray) ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersFilterArrayOutput)
}

type GetSubscriptionRedeemableUsersFilterOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersFilterOutput) ToGetSubscriptionRedeemableUsersFilterOutput() GetSubscriptionRedeemableUsersFilterOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterOutput) ToGetSubscriptionRedeemableUsersFilterOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSubscriptionRedeemableUsersFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSubscriptionRedeemableUsersFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSubscriptionRedeemableUsersFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersFilter)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersFilterArrayOutput) ToGetSubscriptionRedeemableUsersFilterArrayOutput() GetSubscriptionRedeemableUsersFilterArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterArrayOutput) ToGetSubscriptionRedeemableUsersFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersFilterArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersFilterArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersFilter {
		return vs[0].([]GetSubscriptionRedeemableUsersFilter)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersFilterOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollection struct {
	// The list of user summary that can redeem rewards.
	Items []GetSubscriptionRedeemableUsersRedeemableUserCollectionItem `pulumi:"items"`
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs and GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionInput` via:
//
//	GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs{...}
type GetSubscriptionRedeemableUsersRedeemableUserCollectionInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs struct {
	// The list of user summary that can redeem rewards.
	Items GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput)
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionArray and GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput` via:
//
//	GetSubscriptionRedeemableUsersRedeemableUserCollectionArray{ GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs{...} }
type GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionArray []GetSubscriptionRedeemableUsersRedeemableUserCollectionInput

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return o
}

// The list of user summary that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput) Items() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollection) []GetSubscriptionRedeemableUsersRedeemableUserCollectionItem {
		return v.Items
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollection)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersRedeemableUserCollection {
		return vs[0].([]GetSubscriptionRedeemableUsersRedeemableUserCollection)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItem struct {
	// The list of user summary that can redeem rewards.
	Items []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem `pulumi:"items"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId string `pulumi:"tenancyId"`
	UserId    string `pulumi:"userId"`
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput` via:
//
//	GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs{...}
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs struct {
	// The list of user summary that can redeem rewards.
	Items GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput `pulumi:"items"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId pulumi.StringInput `pulumi:"tenancyId"`
	UserId    pulumi.StringInput `pulumi:"userId"`
}

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput)
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput` via:
//
//	GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray{ GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs{...} }
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return o
}

// The list of user summary that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) Items() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem {
		return v.Items
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput)
}

// The subscription ID for which rewards information is requested for.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The OCID of the tenancy.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) TenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) string { return v.TenancyId }).(pulumi.StringOutput)
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItem) string { return v.UserId }).(pulumi.StringOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersRedeemableUserCollectionItem {
		return vs[0].([]GetSubscriptionRedeemableUsersRedeemableUserCollectionItem)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem struct {
	// The email ID of the user that can redeem rewards.
	EmailId string `pulumi:"emailId"`
	// The first name of the user that can redeem rewards.
	FirstName string `pulumi:"firstName"`
	// The last name of the user that can redeem rewards.
	LastName string `pulumi:"lastName"`
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput` via:
//
//	GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs{...}
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs struct {
	// The email ID of the user that can redeem rewards.
	EmailId pulumi.StringInput `pulumi:"emailId"`
	// The first name of the user that can redeem rewards.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// The last name of the user that can redeem rewards.
	LastName pulumi.StringInput `pulumi:"lastName"`
}

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput)
}

// GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput is an input type that accepts GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray and GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput` via:
//
//	GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray{ GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs{...} }
type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput
	ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray []GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return i.ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return o
}

// The email ID of the user that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) EmailId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem) string { return v.EmailId }).(pulumi.StringOutput)
}

// The first name of the user that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem) string { return v.FirstName }).(pulumi.StringOutput)
}

// The last name of the user that can redeem rewards.
func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem) string { return v.LastName }).(pulumi.StringOutput)
}

type GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput() GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) ToGetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem {
		return vs[0].([]GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItem)[vs[1].(int)]
	}).(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput)
}

type GetSubscriptionRedemptionItem struct {
	// It provides the redeemed rewards in base/subscription currency.
	BaseRewards float64 `pulumi:"baseRewards"`
	// It provides the fxRate between invoice currency and subscription currency.
	FxRate float64 `pulumi:"fxRate"`
	// The currency associated with invoice.
	InvoiceCurrency string `pulumi:"invoiceCurrency"`
	// It provides the invoice number against the redemption.
	InvoiceNumber string `pulumi:"invoiceNumber"`
	// It provides the invoice total amount of given redemption.
	InvoiceTotalAmount float64 `pulumi:"invoiceTotalAmount"`
	// It provides the redeemed rewards in invoice currency.
	RedeemedRewards float64 `pulumi:"redeemedRewards"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode string `pulumi:"redemptionCode"`
	// It provides the redemption email id.
	RedemptionEmail string `pulumi:"redemptionEmail"`
	// It provides the invoice date.
	TimeInvoiced string `pulumi:"timeInvoiced"`
	// It provides redeem date.
	TimeRedeemed string `pulumi:"timeRedeemed"`
}

// GetSubscriptionRedemptionItemInput is an input type that accepts GetSubscriptionRedemptionItemArgs and GetSubscriptionRedemptionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionItemInput` via:
//
//	GetSubscriptionRedemptionItemArgs{...}
type GetSubscriptionRedemptionItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionItemOutput() GetSubscriptionRedemptionItemOutput
	ToGetSubscriptionRedemptionItemOutputWithContext(context.Context) GetSubscriptionRedemptionItemOutput
}

type GetSubscriptionRedemptionItemArgs struct {
	// It provides the redeemed rewards in base/subscription currency.
	BaseRewards pulumi.Float64Input `pulumi:"baseRewards"`
	// It provides the fxRate between invoice currency and subscription currency.
	FxRate pulumi.Float64Input `pulumi:"fxRate"`
	// The currency associated with invoice.
	InvoiceCurrency pulumi.StringInput `pulumi:"invoiceCurrency"`
	// It provides the invoice number against the redemption.
	InvoiceNumber pulumi.StringInput `pulumi:"invoiceNumber"`
	// It provides the invoice total amount of given redemption.
	InvoiceTotalAmount pulumi.Float64Input `pulumi:"invoiceTotalAmount"`
	// It provides the redeemed rewards in invoice currency.
	RedeemedRewards pulumi.Float64Input `pulumi:"redeemedRewards"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode pulumi.StringInput `pulumi:"redemptionCode"`
	// It provides the redemption email id.
	RedemptionEmail pulumi.StringInput `pulumi:"redemptionEmail"`
	// It provides the invoice date.
	TimeInvoiced pulumi.StringInput `pulumi:"timeInvoiced"`
	// It provides redeem date.
	TimeRedeemed pulumi.StringInput `pulumi:"timeRedeemed"`
}

func (GetSubscriptionRedemptionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionItem)(nil)).Elem()
}

func (i GetSubscriptionRedemptionItemArgs) ToGetSubscriptionRedemptionItemOutput() GetSubscriptionRedemptionItemOutput {
	return i.ToGetSubscriptionRedemptionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionItemArgs) ToGetSubscriptionRedemptionItemOutputWithContext(ctx context.Context) GetSubscriptionRedemptionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionItemOutput)
}

// GetSubscriptionRedemptionItemArrayInput is an input type that accepts GetSubscriptionRedemptionItemArray and GetSubscriptionRedemptionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionItemArrayInput` via:
//
//	GetSubscriptionRedemptionItemArray{ GetSubscriptionRedemptionItemArgs{...} }
type GetSubscriptionRedemptionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionItemArrayOutput() GetSubscriptionRedemptionItemArrayOutput
	ToGetSubscriptionRedemptionItemArrayOutputWithContext(context.Context) GetSubscriptionRedemptionItemArrayOutput
}

type GetSubscriptionRedemptionItemArray []GetSubscriptionRedemptionItemInput

func (GetSubscriptionRedemptionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionItem)(nil)).Elem()
}

func (i GetSubscriptionRedemptionItemArray) ToGetSubscriptionRedemptionItemArrayOutput() GetSubscriptionRedemptionItemArrayOutput {
	return i.ToGetSubscriptionRedemptionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionItemArray) ToGetSubscriptionRedemptionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionItemArrayOutput)
}

type GetSubscriptionRedemptionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionItem)(nil)).Elem()
}

func (o GetSubscriptionRedemptionItemOutput) ToGetSubscriptionRedemptionItemOutput() GetSubscriptionRedemptionItemOutput {
	return o
}

func (o GetSubscriptionRedemptionItemOutput) ToGetSubscriptionRedemptionItemOutputWithContext(ctx context.Context) GetSubscriptionRedemptionItemOutput {
	return o
}

// It provides the redeemed rewards in base/subscription currency.
func (o GetSubscriptionRedemptionItemOutput) BaseRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) float64 { return v.BaseRewards }).(pulumi.Float64Output)
}

// It provides the fxRate between invoice currency and subscription currency.
func (o GetSubscriptionRedemptionItemOutput) FxRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) float64 { return v.FxRate }).(pulumi.Float64Output)
}

// The currency associated with invoice.
func (o GetSubscriptionRedemptionItemOutput) InvoiceCurrency() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) string { return v.InvoiceCurrency }).(pulumi.StringOutput)
}

// It provides the invoice number against the redemption.
func (o GetSubscriptionRedemptionItemOutput) InvoiceNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) string { return v.InvoiceNumber }).(pulumi.StringOutput)
}

// It provides the invoice total amount of given redemption.
func (o GetSubscriptionRedemptionItemOutput) InvoiceTotalAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) float64 { return v.InvoiceTotalAmount }).(pulumi.Float64Output)
}

// It provides the redeemed rewards in invoice currency.
func (o GetSubscriptionRedemptionItemOutput) RedeemedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) float64 { return v.RedeemedRewards }).(pulumi.Float64Output)
}

// The redemption code used in the Billing Center during the reward redemption process.
func (o GetSubscriptionRedemptionItemOutput) RedemptionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) string { return v.RedemptionCode }).(pulumi.StringOutput)
}

// It provides the redemption email id.
func (o GetSubscriptionRedemptionItemOutput) RedemptionEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) string { return v.RedemptionEmail }).(pulumi.StringOutput)
}

// It provides the invoice date.
func (o GetSubscriptionRedemptionItemOutput) TimeInvoiced() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) string { return v.TimeInvoiced }).(pulumi.StringOutput)
}

// It provides redeem date.
func (o GetSubscriptionRedemptionItemOutput) TimeRedeemed() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionItem) string { return v.TimeRedeemed }).(pulumi.StringOutput)
}

type GetSubscriptionRedemptionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionItem)(nil)).Elem()
}

func (o GetSubscriptionRedemptionItemArrayOutput) ToGetSubscriptionRedemptionItemArrayOutput() GetSubscriptionRedemptionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionItemArrayOutput) ToGetSubscriptionRedemptionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedemptionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedemptionItem {
		return vs[0].([]GetSubscriptionRedemptionItem)[vs[1].(int)]
	}).(GetSubscriptionRedemptionItemOutput)
}

type GetSubscriptionRedemptionsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSubscriptionRedemptionsFilterInput is an input type that accepts GetSubscriptionRedemptionsFilterArgs and GetSubscriptionRedemptionsFilterOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsFilterInput` via:
//
//	GetSubscriptionRedemptionsFilterArgs{...}
type GetSubscriptionRedemptionsFilterInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsFilterOutput() GetSubscriptionRedemptionsFilterOutput
	ToGetSubscriptionRedemptionsFilterOutputWithContext(context.Context) GetSubscriptionRedemptionsFilterOutput
}

type GetSubscriptionRedemptionsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSubscriptionRedemptionsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsFilter)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsFilterArgs) ToGetSubscriptionRedemptionsFilterOutput() GetSubscriptionRedemptionsFilterOutput {
	return i.ToGetSubscriptionRedemptionsFilterOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsFilterArgs) ToGetSubscriptionRedemptionsFilterOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsFilterOutput)
}

// GetSubscriptionRedemptionsFilterArrayInput is an input type that accepts GetSubscriptionRedemptionsFilterArray and GetSubscriptionRedemptionsFilterArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsFilterArrayInput` via:
//
//	GetSubscriptionRedemptionsFilterArray{ GetSubscriptionRedemptionsFilterArgs{...} }
type GetSubscriptionRedemptionsFilterArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsFilterArrayOutput() GetSubscriptionRedemptionsFilterArrayOutput
	ToGetSubscriptionRedemptionsFilterArrayOutputWithContext(context.Context) GetSubscriptionRedemptionsFilterArrayOutput
}

type GetSubscriptionRedemptionsFilterArray []GetSubscriptionRedemptionsFilterInput

func (GetSubscriptionRedemptionsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsFilter)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsFilterArray) ToGetSubscriptionRedemptionsFilterArrayOutput() GetSubscriptionRedemptionsFilterArrayOutput {
	return i.ToGetSubscriptionRedemptionsFilterArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsFilterArray) ToGetSubscriptionRedemptionsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsFilterArrayOutput)
}

type GetSubscriptionRedemptionsFilterOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsFilter)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsFilterOutput) ToGetSubscriptionRedemptionsFilterOutput() GetSubscriptionRedemptionsFilterOutput {
	return o
}

func (o GetSubscriptionRedemptionsFilterOutput) ToGetSubscriptionRedemptionsFilterOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsFilterOutput {
	return o
}

func (o GetSubscriptionRedemptionsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSubscriptionRedemptionsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSubscriptionRedemptionsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSubscriptionRedemptionsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsFilter)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsFilterArrayOutput) ToGetSubscriptionRedemptionsFilterArrayOutput() GetSubscriptionRedemptionsFilterArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsFilterArrayOutput) ToGetSubscriptionRedemptionsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsFilterArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsFilterArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedemptionsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedemptionsFilter {
		return vs[0].([]GetSubscriptionRedemptionsFilter)[vs[1].(int)]
	}).(GetSubscriptionRedemptionsFilterOutput)
}

type GetSubscriptionRedemptionsRedemptionCollection struct {
	// The list of redemption summary.
	Items []GetSubscriptionRedemptionsRedemptionCollectionItem `pulumi:"items"`
}

// GetSubscriptionRedemptionsRedemptionCollectionInput is an input type that accepts GetSubscriptionRedemptionsRedemptionCollectionArgs and GetSubscriptionRedemptionsRedemptionCollectionOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsRedemptionCollectionInput` via:
//
//	GetSubscriptionRedemptionsRedemptionCollectionArgs{...}
type GetSubscriptionRedemptionsRedemptionCollectionInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsRedemptionCollectionOutput() GetSubscriptionRedemptionsRedemptionCollectionOutput
	ToGetSubscriptionRedemptionsRedemptionCollectionOutputWithContext(context.Context) GetSubscriptionRedemptionsRedemptionCollectionOutput
}

type GetSubscriptionRedemptionsRedemptionCollectionArgs struct {
	// The list of redemption summary.
	Items GetSubscriptionRedemptionsRedemptionCollectionItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionRedemptionsRedemptionCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollection)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsRedemptionCollectionArgs) ToGetSubscriptionRedemptionsRedemptionCollectionOutput() GetSubscriptionRedemptionsRedemptionCollectionOutput {
	return i.ToGetSubscriptionRedemptionsRedemptionCollectionOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsRedemptionCollectionArgs) ToGetSubscriptionRedemptionsRedemptionCollectionOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsRedemptionCollectionOutput)
}

// GetSubscriptionRedemptionsRedemptionCollectionArrayInput is an input type that accepts GetSubscriptionRedemptionsRedemptionCollectionArray and GetSubscriptionRedemptionsRedemptionCollectionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsRedemptionCollectionArrayInput` via:
//
//	GetSubscriptionRedemptionsRedemptionCollectionArray{ GetSubscriptionRedemptionsRedemptionCollectionArgs{...} }
type GetSubscriptionRedemptionsRedemptionCollectionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsRedemptionCollectionArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionArrayOutput
	ToGetSubscriptionRedemptionsRedemptionCollectionArrayOutputWithContext(context.Context) GetSubscriptionRedemptionsRedemptionCollectionArrayOutput
}

type GetSubscriptionRedemptionsRedemptionCollectionArray []GetSubscriptionRedemptionsRedemptionCollectionInput

func (GetSubscriptionRedemptionsRedemptionCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsRedemptionCollection)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsRedemptionCollectionArray) ToGetSubscriptionRedemptionsRedemptionCollectionArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionArrayOutput {
	return i.ToGetSubscriptionRedemptionsRedemptionCollectionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsRedemptionCollectionArray) ToGetSubscriptionRedemptionsRedemptionCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsRedemptionCollectionArrayOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsRedemptionCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollection)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsRedemptionCollectionOutput) ToGetSubscriptionRedemptionsRedemptionCollectionOutput() GetSubscriptionRedemptionsRedemptionCollectionOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionOutput) ToGetSubscriptionRedemptionsRedemptionCollectionOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionOutput {
	return o
}

// The list of redemption summary.
func (o GetSubscriptionRedemptionsRedemptionCollectionOutput) Items() GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollection) []GetSubscriptionRedemptionsRedemptionCollectionItem {
		return v.Items
	}).(GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsRedemptionCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsRedemptionCollection)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsRedemptionCollectionArrayOutput) ToGetSubscriptionRedemptionsRedemptionCollectionArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionArrayOutput) ToGetSubscriptionRedemptionsRedemptionCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedemptionsRedemptionCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedemptionsRedemptionCollection {
		return vs[0].([]GetSubscriptionRedemptionsRedemptionCollection)[vs[1].(int)]
	}).(GetSubscriptionRedemptionsRedemptionCollectionOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionItem struct {
	// The list of redemption summary.
	Items []GetSubscriptionRedemptionsRedemptionCollectionItemItem `pulumi:"items"`
}

// GetSubscriptionRedemptionsRedemptionCollectionItemInput is an input type that accepts GetSubscriptionRedemptionsRedemptionCollectionItemArgs and GetSubscriptionRedemptionsRedemptionCollectionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsRedemptionCollectionItemInput` via:
//
//	GetSubscriptionRedemptionsRedemptionCollectionItemArgs{...}
type GetSubscriptionRedemptionsRedemptionCollectionItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsRedemptionCollectionItemOutput() GetSubscriptionRedemptionsRedemptionCollectionItemOutput
	ToGetSubscriptionRedemptionsRedemptionCollectionItemOutputWithContext(context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemOutput
}

type GetSubscriptionRedemptionsRedemptionCollectionItemArgs struct {
	// The list of redemption summary.
	Items GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionRedemptionsRedemptionCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemArgs) ToGetSubscriptionRedemptionsRedemptionCollectionItemOutput() GetSubscriptionRedemptionsRedemptionCollectionItemOutput {
	return i.ToGetSubscriptionRedemptionsRedemptionCollectionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemArgs) ToGetSubscriptionRedemptionsRedemptionCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsRedemptionCollectionItemOutput)
}

// GetSubscriptionRedemptionsRedemptionCollectionItemArrayInput is an input type that accepts GetSubscriptionRedemptionsRedemptionCollectionItemArray and GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsRedemptionCollectionItemArrayInput` via:
//
//	GetSubscriptionRedemptionsRedemptionCollectionItemArray{ GetSubscriptionRedemptionsRedemptionCollectionItemArgs{...} }
type GetSubscriptionRedemptionsRedemptionCollectionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput
	ToGetSubscriptionRedemptionsRedemptionCollectionItemArrayOutputWithContext(context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput
}

type GetSubscriptionRedemptionsRedemptionCollectionItemArray []GetSubscriptionRedemptionsRedemptionCollectionItemInput

func (GetSubscriptionRedemptionsRedemptionCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsRedemptionCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemArray) ToGetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput {
	return i.ToGetSubscriptionRedemptionsRedemptionCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemArray) ToGetSubscriptionRedemptionsRedemptionCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsRedemptionCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemOutput() GetSubscriptionRedemptionsRedemptionCollectionItemOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemOutput {
	return o
}

// The list of redemption summary.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemOutput) Items() GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItem) []GetSubscriptionRedemptionsRedemptionCollectionItemItem {
		return v.Items
	}).(GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsRedemptionCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedemptionsRedemptionCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedemptionsRedemptionCollectionItem {
		return vs[0].([]GetSubscriptionRedemptionsRedemptionCollectionItem)[vs[1].(int)]
	}).(GetSubscriptionRedemptionsRedemptionCollectionItemOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionItemItem struct {
	// It provides the redeemed rewards in base/subscription currency.
	BaseRewards float64 `pulumi:"baseRewards"`
	// It provides the fxRate between invoice currency and subscription currency.
	FxRate float64 `pulumi:"fxRate"`
	// The currency associated with invoice.
	InvoiceCurrency string `pulumi:"invoiceCurrency"`
	// It provides the invoice number against the redemption.
	InvoiceNumber string `pulumi:"invoiceNumber"`
	// It provides the invoice total amount of given redemption.
	InvoiceTotalAmount float64 `pulumi:"invoiceTotalAmount"`
	// It provides the redeemed rewards in invoice currency.
	RedeemedRewards float64 `pulumi:"redeemedRewards"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode string `pulumi:"redemptionCode"`
	// It provides the redemption email id.
	RedemptionEmail string `pulumi:"redemptionEmail"`
	// It provides the invoice date.
	TimeInvoiced string `pulumi:"timeInvoiced"`
	// It provides redeem date.
	TimeRedeemed string `pulumi:"timeRedeemed"`
}

// GetSubscriptionRedemptionsRedemptionCollectionItemItemInput is an input type that accepts GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs and GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsRedemptionCollectionItemItemInput` via:
//
//	GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs{...}
type GetSubscriptionRedemptionsRedemptionCollectionItemItemInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsRedemptionCollectionItemItemOutput() GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput
	ToGetSubscriptionRedemptionsRedemptionCollectionItemItemOutputWithContext(context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput
}

type GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs struct {
	// It provides the redeemed rewards in base/subscription currency.
	BaseRewards pulumi.Float64Input `pulumi:"baseRewards"`
	// It provides the fxRate between invoice currency and subscription currency.
	FxRate pulumi.Float64Input `pulumi:"fxRate"`
	// The currency associated with invoice.
	InvoiceCurrency pulumi.StringInput `pulumi:"invoiceCurrency"`
	// It provides the invoice number against the redemption.
	InvoiceNumber pulumi.StringInput `pulumi:"invoiceNumber"`
	// It provides the invoice total amount of given redemption.
	InvoiceTotalAmount pulumi.Float64Input `pulumi:"invoiceTotalAmount"`
	// It provides the redeemed rewards in invoice currency.
	RedeemedRewards pulumi.Float64Input `pulumi:"redeemedRewards"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode pulumi.StringInput `pulumi:"redemptionCode"`
	// It provides the redemption email id.
	RedemptionEmail pulumi.StringInput `pulumi:"redemptionEmail"`
	// It provides the invoice date.
	TimeInvoiced pulumi.StringInput `pulumi:"timeInvoiced"`
	// It provides redeem date.
	TimeRedeemed pulumi.StringInput `pulumi:"timeRedeemed"`
}

func (GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemOutput() GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput {
	return i.ToGetSubscriptionRedemptionsRedemptionCollectionItemItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput)
}

// GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayInput is an input type that accepts GetSubscriptionRedemptionsRedemptionCollectionItemItemArray and GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayInput` via:
//
//	GetSubscriptionRedemptionsRedemptionCollectionItemItemArray{ GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs{...} }
type GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput
	ToGetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutputWithContext(context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput
}

type GetSubscriptionRedemptionsRedemptionCollectionItemItemArray []GetSubscriptionRedemptionsRedemptionCollectionItemItemInput

func (GetSubscriptionRedemptionsRedemptionCollectionItemItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsRedemptionCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemItemArray) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput {
	return i.ToGetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRedemptionsRedemptionCollectionItemItemArray) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemOutput() GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput {
	return o
}

// It provides the redeemed rewards in base/subscription currency.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) BaseRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) float64 { return v.BaseRewards }).(pulumi.Float64Output)
}

// It provides the fxRate between invoice currency and subscription currency.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) FxRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) float64 { return v.FxRate }).(pulumi.Float64Output)
}

// The currency associated with invoice.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) InvoiceCurrency() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) string { return v.InvoiceCurrency }).(pulumi.StringOutput)
}

// It provides the invoice number against the redemption.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) InvoiceNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) string { return v.InvoiceNumber }).(pulumi.StringOutput)
}

// It provides the invoice total amount of given redemption.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) InvoiceTotalAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) float64 { return v.InvoiceTotalAmount }).(pulumi.Float64Output)
}

// It provides the redeemed rewards in invoice currency.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) RedeemedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) float64 { return v.RedeemedRewards }).(pulumi.Float64Output)
}

// The redemption code used in the Billing Center during the reward redemption process.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) RedemptionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) string { return v.RedemptionCode }).(pulumi.StringOutput)
}

// It provides the redemption email id.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) RedemptionEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) string { return v.RedemptionEmail }).(pulumi.StringOutput)
}

// It provides the invoice date.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) TimeInvoiced() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) string { return v.TimeInvoiced }).(pulumi.StringOutput)
}

// It provides redeem date.
func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput) TimeRedeemed() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRedemptionsRedemptionCollectionItemItem) string { return v.TimeRedeemed }).(pulumi.StringOutput)
}

type GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRedemptionsRedemptionCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput() GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput) ToGetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRedemptionsRedemptionCollectionItemItem {
		return vs[0].([]GetSubscriptionRedemptionsRedemptionCollectionItemItem)[vs[1].(int)]
	}).(GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput)
}

type GetSubscriptionRewardItem struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards float64 `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount float64 `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount float64 `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual bool `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards float64 `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned string `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired string `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded string `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted string `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount float64 `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey string `pulumi:"usagePeriodKey"`
}

// GetSubscriptionRewardItemInput is an input type that accepts GetSubscriptionRewardItemArgs and GetSubscriptionRewardItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardItemInput` via:
//
//	GetSubscriptionRewardItemArgs{...}
type GetSubscriptionRewardItemInput interface {
	pulumi.Input

	ToGetSubscriptionRewardItemOutput() GetSubscriptionRewardItemOutput
	ToGetSubscriptionRewardItemOutputWithContext(context.Context) GetSubscriptionRewardItemOutput
}

type GetSubscriptionRewardItemArgs struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards pulumi.Float64Input `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount pulumi.Float64Input `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount pulumi.Float64Input `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual pulumi.BoolInput `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards pulumi.Float64Input `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned pulumi.StringInput `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired pulumi.StringInput `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded pulumi.StringInput `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted pulumi.StringInput `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey pulumi.StringInput `pulumi:"usagePeriodKey"`
}

func (GetSubscriptionRewardItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardItem)(nil)).Elem()
}

func (i GetSubscriptionRewardItemArgs) ToGetSubscriptionRewardItemOutput() GetSubscriptionRewardItemOutput {
	return i.ToGetSubscriptionRewardItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardItemArgs) ToGetSubscriptionRewardItemOutputWithContext(ctx context.Context) GetSubscriptionRewardItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardItemOutput)
}

// GetSubscriptionRewardItemArrayInput is an input type that accepts GetSubscriptionRewardItemArray and GetSubscriptionRewardItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardItemArrayInput` via:
//
//	GetSubscriptionRewardItemArray{ GetSubscriptionRewardItemArgs{...} }
type GetSubscriptionRewardItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardItemArrayOutput() GetSubscriptionRewardItemArrayOutput
	ToGetSubscriptionRewardItemArrayOutputWithContext(context.Context) GetSubscriptionRewardItemArrayOutput
}

type GetSubscriptionRewardItemArray []GetSubscriptionRewardItemInput

func (GetSubscriptionRewardItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardItem)(nil)).Elem()
}

func (i GetSubscriptionRewardItemArray) ToGetSubscriptionRewardItemArrayOutput() GetSubscriptionRewardItemArrayOutput {
	return i.ToGetSubscriptionRewardItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardItemArray) ToGetSubscriptionRewardItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardItemArrayOutput)
}

type GetSubscriptionRewardItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardItem)(nil)).Elem()
}

func (o GetSubscriptionRewardItemOutput) ToGetSubscriptionRewardItemOutput() GetSubscriptionRewardItemOutput {
	return o
}

func (o GetSubscriptionRewardItemOutput) ToGetSubscriptionRewardItemOutputWithContext(ctx context.Context) GetSubscriptionRewardItemOutput {
	return o
}

// The number of rewards available for a specific usage period.
func (o GetSubscriptionRewardItemOutput) AvailableRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.AvailableRewards }).(pulumi.Float64Output)
}

// The number of rewards earned for the specific usage period.
func (o GetSubscriptionRewardItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The eligible usage amount for the usage period.
func (o GetSubscriptionRewardItemOutput) EligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.EligibleUsageAmount }).(pulumi.Float64Output)
}

// The ineligible usage amount for the usage period.
func (o GetSubscriptionRewardItemOutput) IneligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.IneligibleUsageAmount }).(pulumi.Float64Output)
}

// The boolean parameter to indicate whether or not the available rewards are manually posted.
func (o GetSubscriptionRewardItemOutput) IsManual() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) bool { return v.IsManual }).(pulumi.BoolOutput)
}

// The number of rewards redeemed for a specific month.
func (o GetSubscriptionRewardItemOutput) RedeemedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.RedeemedRewards }).(pulumi.Float64Output)
}

// The date and time when rewards accrue.
func (o GetSubscriptionRewardItemOutput) TimeRewardsEarned() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeRewardsEarned }).(pulumi.StringOutput)
}

// The date and time when rewards expire.
func (o GetSubscriptionRewardItemOutput) TimeRewardsExpired() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeRewardsExpired }).(pulumi.StringOutput)
}

// The end date and time for the usage period.
func (o GetSubscriptionRewardItemOutput) TimeUsageEnded() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeUsageEnded }).(pulumi.StringOutput)
}

// The start date and time for the usage period.
func (o GetSubscriptionRewardItemOutput) TimeUsageStarted() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.TimeUsageStarted }).(pulumi.StringOutput)
}

// The usage amount for the usage period.
func (o GetSubscriptionRewardItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

// The usage period ID.
func (o GetSubscriptionRewardItemOutput) UsagePeriodKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardItem) string { return v.UsagePeriodKey }).(pulumi.StringOutput)
}

type GetSubscriptionRewardItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardItem)(nil)).Elem()
}

func (o GetSubscriptionRewardItemArrayOutput) ToGetSubscriptionRewardItemArrayOutput() GetSubscriptionRewardItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardItemArrayOutput) ToGetSubscriptionRewardItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardItem {
		return vs[0].([]GetSubscriptionRewardItem)[vs[1].(int)]
	}).(GetSubscriptionRewardItemOutput)
}

type GetSubscriptionRewardSummary struct {
	// The currency unit for the reward amount.
	Currency string `pulumi:"currency"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode string `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate float64 `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId string `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable float64 `pulumi:"totalRewardsAvailable"`
}

// GetSubscriptionRewardSummaryInput is an input type that accepts GetSubscriptionRewardSummaryArgs and GetSubscriptionRewardSummaryOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardSummaryInput` via:
//
//	GetSubscriptionRewardSummaryArgs{...}
type GetSubscriptionRewardSummaryInput interface {
	pulumi.Input

	ToGetSubscriptionRewardSummaryOutput() GetSubscriptionRewardSummaryOutput
	ToGetSubscriptionRewardSummaryOutputWithContext(context.Context) GetSubscriptionRewardSummaryOutput
}

type GetSubscriptionRewardSummaryArgs struct {
	// The currency unit for the reward amount.
	Currency pulumi.StringInput `pulumi:"currency"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode pulumi.StringInput `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate pulumi.Float64Input `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId pulumi.StringInput `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable pulumi.Float64Input `pulumi:"totalRewardsAvailable"`
}

func (GetSubscriptionRewardSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardSummaryArgs) ToGetSubscriptionRewardSummaryOutput() GetSubscriptionRewardSummaryOutput {
	return i.ToGetSubscriptionRewardSummaryOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardSummaryArgs) ToGetSubscriptionRewardSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardSummaryOutput)
}

// GetSubscriptionRewardSummaryArrayInput is an input type that accepts GetSubscriptionRewardSummaryArray and GetSubscriptionRewardSummaryArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardSummaryArrayInput` via:
//
//	GetSubscriptionRewardSummaryArray{ GetSubscriptionRewardSummaryArgs{...} }
type GetSubscriptionRewardSummaryArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardSummaryArrayOutput() GetSubscriptionRewardSummaryArrayOutput
	ToGetSubscriptionRewardSummaryArrayOutputWithContext(context.Context) GetSubscriptionRewardSummaryArrayOutput
}

type GetSubscriptionRewardSummaryArray []GetSubscriptionRewardSummaryInput

func (GetSubscriptionRewardSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardSummaryArray) ToGetSubscriptionRewardSummaryArrayOutput() GetSubscriptionRewardSummaryArrayOutput {
	return i.ToGetSubscriptionRewardSummaryArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardSummaryArray) ToGetSubscriptionRewardSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardSummaryArrayOutput)
}

type GetSubscriptionRewardSummaryOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardSummaryOutput) ToGetSubscriptionRewardSummaryOutput() GetSubscriptionRewardSummaryOutput {
	return o
}

func (o GetSubscriptionRewardSummaryOutput) ToGetSubscriptionRewardSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryOutput {
	return o
}

// The currency unit for the reward amount.
func (o GetSubscriptionRewardSummaryOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.Currency }).(pulumi.StringOutput)
}

// The redemption code used in the Billing Center during the reward redemption process.
func (o GetSubscriptionRewardSummaryOutput) RedemptionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.RedemptionCode }).(pulumi.StringOutput)
}

// The current Rewards percentage in decimal format.
func (o GetSubscriptionRewardSummaryOutput) RewardsRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) float64 { return v.RewardsRate }).(pulumi.Float64Output)
}

// The subscription ID for which rewards information is requested for.
func (o GetSubscriptionRewardSummaryOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The OCID of the tenancy.
func (o GetSubscriptionRewardSummaryOutput) TenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) string { return v.TenancyId }).(pulumi.StringOutput)
}

// The total number of available rewards for a given subscription ID.
func (o GetSubscriptionRewardSummaryOutput) TotalRewardsAvailable() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardSummary) float64 { return v.TotalRewardsAvailable }).(pulumi.Float64Output)
}

type GetSubscriptionRewardSummaryArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardSummaryArrayOutput) ToGetSubscriptionRewardSummaryArrayOutput() GetSubscriptionRewardSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardSummaryArrayOutput) ToGetSubscriptionRewardSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardSummaryArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardSummary {
		return vs[0].([]GetSubscriptionRewardSummary)[vs[1].(int)]
	}).(GetSubscriptionRewardSummaryOutput)
}

type GetSubscriptionRewardsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSubscriptionRewardsFilterInput is an input type that accepts GetSubscriptionRewardsFilterArgs and GetSubscriptionRewardsFilterOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsFilterInput` via:
//
//	GetSubscriptionRewardsFilterArgs{...}
type GetSubscriptionRewardsFilterInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsFilterOutput() GetSubscriptionRewardsFilterOutput
	ToGetSubscriptionRewardsFilterOutputWithContext(context.Context) GetSubscriptionRewardsFilterOutput
}

type GetSubscriptionRewardsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSubscriptionRewardsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (i GetSubscriptionRewardsFilterArgs) ToGetSubscriptionRewardsFilterOutput() GetSubscriptionRewardsFilterOutput {
	return i.ToGetSubscriptionRewardsFilterOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsFilterArgs) ToGetSubscriptionRewardsFilterOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsFilterOutput)
}

// GetSubscriptionRewardsFilterArrayInput is an input type that accepts GetSubscriptionRewardsFilterArray and GetSubscriptionRewardsFilterArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsFilterArrayInput` via:
//
//	GetSubscriptionRewardsFilterArray{ GetSubscriptionRewardsFilterArgs{...} }
type GetSubscriptionRewardsFilterArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsFilterArrayOutput() GetSubscriptionRewardsFilterArrayOutput
	ToGetSubscriptionRewardsFilterArrayOutputWithContext(context.Context) GetSubscriptionRewardsFilterArrayOutput
}

type GetSubscriptionRewardsFilterArray []GetSubscriptionRewardsFilterInput

func (GetSubscriptionRewardsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (i GetSubscriptionRewardsFilterArray) ToGetSubscriptionRewardsFilterArrayOutput() GetSubscriptionRewardsFilterArrayOutput {
	return i.ToGetSubscriptionRewardsFilterArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsFilterArray) ToGetSubscriptionRewardsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsFilterArrayOutput)
}

type GetSubscriptionRewardsFilterOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (o GetSubscriptionRewardsFilterOutput) ToGetSubscriptionRewardsFilterOutput() GetSubscriptionRewardsFilterOutput {
	return o
}

func (o GetSubscriptionRewardsFilterOutput) ToGetSubscriptionRewardsFilterOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterOutput {
	return o
}

func (o GetSubscriptionRewardsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSubscriptionRewardsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSubscriptionRewardsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSubscriptionRewardsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsFilter)(nil)).Elem()
}

func (o GetSubscriptionRewardsFilterArrayOutput) ToGetSubscriptionRewardsFilterArrayOutput() GetSubscriptionRewardsFilterArrayOutput {
	return o
}

func (o GetSubscriptionRewardsFilterArrayOutput) ToGetSubscriptionRewardsFilterArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsFilterArrayOutput {
	return o
}

func (o GetSubscriptionRewardsFilterArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsFilter {
		return vs[0].([]GetSubscriptionRewardsFilter)[vs[1].(int)]
	}).(GetSubscriptionRewardsFilterOutput)
}

type GetSubscriptionRewardsRewardCollection struct {
	// The monthly summary of rewards.
	Items []GetSubscriptionRewardsRewardCollectionItem `pulumi:"items"`
}

// GetSubscriptionRewardsRewardCollectionInput is an input type that accepts GetSubscriptionRewardsRewardCollectionArgs and GetSubscriptionRewardsRewardCollectionOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionInput` via:
//
//	GetSubscriptionRewardsRewardCollectionArgs{...}
type GetSubscriptionRewardsRewardCollectionInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionOutput() GetSubscriptionRewardsRewardCollectionOutput
	ToGetSubscriptionRewardsRewardCollectionOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionOutput
}

type GetSubscriptionRewardsRewardCollectionArgs struct {
	// The monthly summary of rewards.
	Items GetSubscriptionRewardsRewardCollectionItemArrayInput `pulumi:"items"`
}

func (GetSubscriptionRewardsRewardCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionArgs) ToGetSubscriptionRewardsRewardCollectionOutput() GetSubscriptionRewardsRewardCollectionOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionArgs) ToGetSubscriptionRewardsRewardCollectionOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionOutput)
}

// GetSubscriptionRewardsRewardCollectionArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionArray and GetSubscriptionRewardsRewardCollectionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionArrayInput` via:
//
//	GetSubscriptionRewardsRewardCollectionArray{ GetSubscriptionRewardsRewardCollectionArgs{...} }
type GetSubscriptionRewardsRewardCollectionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionArrayOutput() GetSubscriptionRewardsRewardCollectionArrayOutput
	ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionArrayOutput
}

type GetSubscriptionRewardsRewardCollectionArray []GetSubscriptionRewardsRewardCollectionInput

func (GetSubscriptionRewardsRewardCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionArray) ToGetSubscriptionRewardsRewardCollectionArrayOutput() GetSubscriptionRewardsRewardCollectionArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionArray) ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionOutput) ToGetSubscriptionRewardsRewardCollectionOutput() GetSubscriptionRewardsRewardCollectionOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionOutput) ToGetSubscriptionRewardsRewardCollectionOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionOutput {
	return o
}

// The monthly summary of rewards.
func (o GetSubscriptionRewardsRewardCollectionOutput) Items() GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollection) []GetSubscriptionRewardsRewardCollectionItem {
		return v.Items
	}).(GetSubscriptionRewardsRewardCollectionItemArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollection)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionArrayOutput) ToGetSubscriptionRewardsRewardCollectionArrayOutput() GetSubscriptionRewardsRewardCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionArrayOutput) ToGetSubscriptionRewardsRewardCollectionArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollection {
		return vs[0].([]GetSubscriptionRewardsRewardCollection)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionOutput)
}

type GetSubscriptionRewardsRewardCollectionItem struct {
	// The monthly summary of rewards.
	Items []GetSubscriptionRewardsRewardCollectionItemItem `pulumi:"items"`
	// The overall monthly reward summary.
	Summaries []GetSubscriptionRewardsRewardCollectionItemSummary `pulumi:"summaries"`
}

// GetSubscriptionRewardsRewardCollectionItemInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemArgs and GetSubscriptionRewardsRewardCollectionItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemInput` via:
//
//	GetSubscriptionRewardsRewardCollectionItemArgs{...}
type GetSubscriptionRewardsRewardCollectionItemInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemOutput() GetSubscriptionRewardsRewardCollectionItemOutput
	ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemOutput
}

type GetSubscriptionRewardsRewardCollectionItemArgs struct {
	// The monthly summary of rewards.
	Items GetSubscriptionRewardsRewardCollectionItemItemArrayInput `pulumi:"items"`
	// The overall monthly reward summary.
	Summaries GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput `pulumi:"summaries"`
}

func (GetSubscriptionRewardsRewardCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemArgs) ToGetSubscriptionRewardsRewardCollectionItemOutput() GetSubscriptionRewardsRewardCollectionItemOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemArgs) ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemOutput)
}

// GetSubscriptionRewardsRewardCollectionItemArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemArray and GetSubscriptionRewardsRewardCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemArrayInput` via:
//
//	GetSubscriptionRewardsRewardCollectionItemArray{ GetSubscriptionRewardsRewardCollectionItemArgs{...} }
type GetSubscriptionRewardsRewardCollectionItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemArrayOutput
	ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemArrayOutput
}

type GetSubscriptionRewardsRewardCollectionItemArray []GetSubscriptionRewardsRewardCollectionItemInput

func (GetSubscriptionRewardsRewardCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemArray) ToGetSubscriptionRewardsRewardCollectionItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemArray) ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemOutput) ToGetSubscriptionRewardsRewardCollectionItemOutput() GetSubscriptionRewardsRewardCollectionItemOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemOutput) ToGetSubscriptionRewardsRewardCollectionItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemOutput {
	return o
}

// The monthly summary of rewards.
func (o GetSubscriptionRewardsRewardCollectionItemOutput) Items() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItem) []GetSubscriptionRewardsRewardCollectionItemItem {
		return v.Items
	}).(GetSubscriptionRewardsRewardCollectionItemItemArrayOutput)
}

// The overall monthly reward summary.
func (o GetSubscriptionRewardsRewardCollectionItemOutput) Summaries() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItem) []GetSubscriptionRewardsRewardCollectionItemSummary {
		return v.Summaries
	}).(GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollectionItem {
		return vs[0].([]GetSubscriptionRewardsRewardCollectionItem)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionItemOutput)
}

type GetSubscriptionRewardsRewardCollectionItemItem struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards float64 `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards float64 `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount float64 `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount float64 `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual bool `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards float64 `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned string `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired string `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded string `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted string `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount float64 `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey string `pulumi:"usagePeriodKey"`
}

// GetSubscriptionRewardsRewardCollectionItemItemInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemItemArgs and GetSubscriptionRewardsRewardCollectionItemItemOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemItemInput` via:
//
//	GetSubscriptionRewardsRewardCollectionItemItemArgs{...}
type GetSubscriptionRewardsRewardCollectionItemItemInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemItemOutput() GetSubscriptionRewardsRewardCollectionItemItemOutput
	ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemItemOutput
}

type GetSubscriptionRewardsRewardCollectionItemItemArgs struct {
	// The number of rewards available for a specific usage period.
	AvailableRewards pulumi.Float64Input `pulumi:"availableRewards"`
	// The number of rewards earned for the specific usage period.
	EarnedRewards pulumi.Float64Input `pulumi:"earnedRewards"`
	// The eligible usage amount for the usage period.
	EligibleUsageAmount pulumi.Float64Input `pulumi:"eligibleUsageAmount"`
	// The ineligible usage amount for the usage period.
	IneligibleUsageAmount pulumi.Float64Input `pulumi:"ineligibleUsageAmount"`
	// The boolean parameter to indicate whether or not the available rewards are manually posted.
	IsManual pulumi.BoolInput `pulumi:"isManual"`
	// The number of rewards redeemed for a specific month.
	RedeemedRewards pulumi.Float64Input `pulumi:"redeemedRewards"`
	// The date and time when rewards accrue.
	TimeRewardsEarned pulumi.StringInput `pulumi:"timeRewardsEarned"`
	// The date and time when rewards expire.
	TimeRewardsExpired pulumi.StringInput `pulumi:"timeRewardsExpired"`
	// The end date and time for the usage period.
	TimeUsageEnded pulumi.StringInput `pulumi:"timeUsageEnded"`
	// The start date and time for the usage period.
	TimeUsageStarted pulumi.StringInput `pulumi:"timeUsageStarted"`
	// The usage amount for the usage period.
	UsageAmount pulumi.Float64Input `pulumi:"usageAmount"`
	// The usage period ID.
	UsagePeriodKey pulumi.StringInput `pulumi:"usagePeriodKey"`
}

func (GetSubscriptionRewardsRewardCollectionItemItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArgs) ToGetSubscriptionRewardsRewardCollectionItemItemOutput() GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArgs) ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemItemOutput)
}

// GetSubscriptionRewardsRewardCollectionItemItemArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemItemArray and GetSubscriptionRewardsRewardCollectionItemItemArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemItemArrayInput` via:
//
//	GetSubscriptionRewardsRewardCollectionItemItemArray{ GetSubscriptionRewardsRewardCollectionItemItemArgs{...} }
type GetSubscriptionRewardsRewardCollectionItemItemArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput
	ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemItemArrayOutput
}

type GetSubscriptionRewardsRewardCollectionItemItemArray []GetSubscriptionRewardsRewardCollectionItemItemInput

func (GetSubscriptionRewardsRewardCollectionItemItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArray) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemItemArray) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemItemArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemItemOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) ToGetSubscriptionRewardsRewardCollectionItemItemOutput() GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) ToGetSubscriptionRewardsRewardCollectionItemItemOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return o
}

// The number of rewards available for a specific usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) AvailableRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.AvailableRewards }).(pulumi.Float64Output)
}

// The number of rewards earned for the specific usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) EarnedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.EarnedRewards }).(pulumi.Float64Output)
}

// The eligible usage amount for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) EligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.EligibleUsageAmount }).(pulumi.Float64Output)
}

// The ineligible usage amount for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) IneligibleUsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.IneligibleUsageAmount }).(pulumi.Float64Output)
}

// The boolean parameter to indicate whether or not the available rewards are manually posted.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) IsManual() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) bool { return v.IsManual }).(pulumi.BoolOutput)
}

// The number of rewards redeemed for a specific month.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) RedeemedRewards() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.RedeemedRewards }).(pulumi.Float64Output)
}

// The date and time when rewards accrue.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeRewardsEarned() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeRewardsEarned }).(pulumi.StringOutput)
}

// The date and time when rewards expire.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeRewardsExpired() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeRewardsExpired }).(pulumi.StringOutput)
}

// The end date and time for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeUsageEnded() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeUsageEnded }).(pulumi.StringOutput)
}

// The start date and time for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) TimeUsageStarted() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.TimeUsageStarted }).(pulumi.StringOutput)
}

// The usage amount for the usage period.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) UsageAmount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) float64 { return v.UsageAmount }).(pulumi.Float64Output)
}

// The usage period ID.
func (o GetSubscriptionRewardsRewardCollectionItemItemOutput) UsagePeriodKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemItem) string { return v.UsagePeriodKey }).(pulumi.StringOutput)
}

type GetSubscriptionRewardsRewardCollectionItemItemArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemItem)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutput() GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemItemArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemItemArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemItemArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionItemItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollectionItemItem {
		return vs[0].([]GetSubscriptionRewardsRewardCollectionItemItem)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionItemItemOutput)
}

type GetSubscriptionRewardsRewardCollectionItemSummary struct {
	// The currency unit for the reward amount.
	Currency string `pulumi:"currency"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode string `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate float64 `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId string `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable float64 `pulumi:"totalRewardsAvailable"`
}

// GetSubscriptionRewardsRewardCollectionItemSummaryInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemSummaryArgs and GetSubscriptionRewardsRewardCollectionItemSummaryOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemSummaryInput` via:
//
//	GetSubscriptionRewardsRewardCollectionItemSummaryArgs{...}
type GetSubscriptionRewardsRewardCollectionItemSummaryInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemSummaryOutput() GetSubscriptionRewardsRewardCollectionItemSummaryOutput
	ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryOutput
}

type GetSubscriptionRewardsRewardCollectionItemSummaryArgs struct {
	// The currency unit for the reward amount.
	Currency pulumi.StringInput `pulumi:"currency"`
	// The redemption code used in the Billing Center during the reward redemption process.
	RedemptionCode pulumi.StringInput `pulumi:"redemptionCode"`
	// The current Rewards percentage in decimal format.
	RewardsRate pulumi.Float64Input `pulumi:"rewardsRate"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId pulumi.StringInput `pulumi:"tenancyId"`
	// The total number of available rewards for a given subscription ID.
	TotalRewardsAvailable pulumi.Float64Input `pulumi:"totalRewardsAvailable"`
}

func (GetSubscriptionRewardsRewardCollectionItemSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArgs) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutput() GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArgs) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemSummaryOutput)
}

// GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput is an input type that accepts GetSubscriptionRewardsRewardCollectionItemSummaryArray and GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput` via:
//
//	GetSubscriptionRewardsRewardCollectionItemSummaryArray{ GetSubscriptionRewardsRewardCollectionItemSummaryArgs{...} }
type GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput interface {
	pulumi.Input

	ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput
	ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput
}

type GetSubscriptionRewardsRewardCollectionItemSummaryArray []GetSubscriptionRewardsRewardCollectionItemSummaryInput

func (GetSubscriptionRewardsRewardCollectionItemSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArray) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return i.ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionRewardsRewardCollectionItemSummaryArray) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput)
}

type GetSubscriptionRewardsRewardCollectionItemSummaryOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutput() GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return o
}

// The currency unit for the reward amount.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.Currency }).(pulumi.StringOutput)
}

// The redemption code used in the Billing Center during the reward redemption process.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) RedemptionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.RedemptionCode }).(pulumi.StringOutput)
}

// The current Rewards percentage in decimal format.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) RewardsRate() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) float64 { return v.RewardsRate }).(pulumi.Float64Output)
}

// The subscription ID for which rewards information is requested for.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The OCID of the tenancy.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) TenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) string { return v.TenancyId }).(pulumi.StringOutput)
}

// The total number of available rewards for a given subscription ID.
func (o GetSubscriptionRewardsRewardCollectionItemSummaryOutput) TotalRewardsAvailable() pulumi.Float64Output {
	return o.ApplyT(func(v GetSubscriptionRewardsRewardCollectionItemSummary) float64 { return v.TotalRewardsAvailable }).(pulumi.Float64Output)
}

type GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionRewardsRewardCollectionItemSummary)(nil)).Elem()
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput() GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) ToGetSubscriptionRewardsRewardCollectionItemSummaryArrayOutputWithContext(ctx context.Context) GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput {
	return o
}

func (o GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput) Index(i pulumi.IntInput) GetSubscriptionRewardsRewardCollectionItemSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionRewardsRewardCollectionItemSummary {
		return vs[0].([]GetSubscriptionRewardsRewardCollectionItemSummary)[vs[1].(int)]
	}).(GetSubscriptionRewardsRewardCollectionItemSummaryOutput)
}

type GetUsagelimitsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetUsagelimitsFilterInput is an input type that accepts GetUsagelimitsFilterArgs and GetUsagelimitsFilterOutput values.
// You can construct a concrete instance of `GetUsagelimitsFilterInput` via:
//
//	GetUsagelimitsFilterArgs{...}
type GetUsagelimitsFilterInput interface {
	pulumi.Input

	ToGetUsagelimitsFilterOutput() GetUsagelimitsFilterOutput
	ToGetUsagelimitsFilterOutputWithContext(context.Context) GetUsagelimitsFilterOutput
}

type GetUsagelimitsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetUsagelimitsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsFilter)(nil)).Elem()
}

func (i GetUsagelimitsFilterArgs) ToGetUsagelimitsFilterOutput() GetUsagelimitsFilterOutput {
	return i.ToGetUsagelimitsFilterOutputWithContext(context.Background())
}

func (i GetUsagelimitsFilterArgs) ToGetUsagelimitsFilterOutputWithContext(ctx context.Context) GetUsagelimitsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsagelimitsFilterOutput)
}

// GetUsagelimitsFilterArrayInput is an input type that accepts GetUsagelimitsFilterArray and GetUsagelimitsFilterArrayOutput values.
// You can construct a concrete instance of `GetUsagelimitsFilterArrayInput` via:
//
//	GetUsagelimitsFilterArray{ GetUsagelimitsFilterArgs{...} }
type GetUsagelimitsFilterArrayInput interface {
	pulumi.Input

	ToGetUsagelimitsFilterArrayOutput() GetUsagelimitsFilterArrayOutput
	ToGetUsagelimitsFilterArrayOutputWithContext(context.Context) GetUsagelimitsFilterArrayOutput
}

type GetUsagelimitsFilterArray []GetUsagelimitsFilterInput

func (GetUsagelimitsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsagelimitsFilter)(nil)).Elem()
}

func (i GetUsagelimitsFilterArray) ToGetUsagelimitsFilterArrayOutput() GetUsagelimitsFilterArrayOutput {
	return i.ToGetUsagelimitsFilterArrayOutputWithContext(context.Background())
}

func (i GetUsagelimitsFilterArray) ToGetUsagelimitsFilterArrayOutputWithContext(ctx context.Context) GetUsagelimitsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsagelimitsFilterArrayOutput)
}

type GetUsagelimitsFilterOutput struct{ *pulumi.OutputState }

func (GetUsagelimitsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsFilter)(nil)).Elem()
}

func (o GetUsagelimitsFilterOutput) ToGetUsagelimitsFilterOutput() GetUsagelimitsFilterOutput {
	return o
}

func (o GetUsagelimitsFilterOutput) ToGetUsagelimitsFilterOutputWithContext(ctx context.Context) GetUsagelimitsFilterOutput {
	return o
}

func (o GetUsagelimitsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetUsagelimitsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUsagelimitsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetUsagelimitsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsagelimitsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetUsagelimitsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetUsagelimitsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsagelimitsFilter)(nil)).Elem()
}

func (o GetUsagelimitsFilterArrayOutput) ToGetUsagelimitsFilterArrayOutput() GetUsagelimitsFilterArrayOutput {
	return o
}

func (o GetUsagelimitsFilterArrayOutput) ToGetUsagelimitsFilterArrayOutputWithContext(ctx context.Context) GetUsagelimitsFilterArrayOutput {
	return o
}

func (o GetUsagelimitsFilterArrayOutput) Index(i pulumi.IntInput) GetUsagelimitsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsagelimitsFilter {
		return vs[0].([]GetUsagelimitsFilter)[vs[1].(int)]
	}).(GetUsagelimitsFilterOutput)
}

type GetUsagelimitsUsageLimitCollection struct {
	// The list of usage limits.
	Items []GetUsagelimitsUsageLimitCollectionItem `pulumi:"items"`
}

// GetUsagelimitsUsageLimitCollectionInput is an input type that accepts GetUsagelimitsUsageLimitCollectionArgs and GetUsagelimitsUsageLimitCollectionOutput values.
// You can construct a concrete instance of `GetUsagelimitsUsageLimitCollectionInput` via:
//
//	GetUsagelimitsUsageLimitCollectionArgs{...}
type GetUsagelimitsUsageLimitCollectionInput interface {
	pulumi.Input

	ToGetUsagelimitsUsageLimitCollectionOutput() GetUsagelimitsUsageLimitCollectionOutput
	ToGetUsagelimitsUsageLimitCollectionOutputWithContext(context.Context) GetUsagelimitsUsageLimitCollectionOutput
}

type GetUsagelimitsUsageLimitCollectionArgs struct {
	// The list of usage limits.
	Items GetUsagelimitsUsageLimitCollectionItemArrayInput `pulumi:"items"`
}

func (GetUsagelimitsUsageLimitCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsUsageLimitCollection)(nil)).Elem()
}

func (i GetUsagelimitsUsageLimitCollectionArgs) ToGetUsagelimitsUsageLimitCollectionOutput() GetUsagelimitsUsageLimitCollectionOutput {
	return i.ToGetUsagelimitsUsageLimitCollectionOutputWithContext(context.Background())
}

func (i GetUsagelimitsUsageLimitCollectionArgs) ToGetUsagelimitsUsageLimitCollectionOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsagelimitsUsageLimitCollectionOutput)
}

// GetUsagelimitsUsageLimitCollectionArrayInput is an input type that accepts GetUsagelimitsUsageLimitCollectionArray and GetUsagelimitsUsageLimitCollectionArrayOutput values.
// You can construct a concrete instance of `GetUsagelimitsUsageLimitCollectionArrayInput` via:
//
//	GetUsagelimitsUsageLimitCollectionArray{ GetUsagelimitsUsageLimitCollectionArgs{...} }
type GetUsagelimitsUsageLimitCollectionArrayInput interface {
	pulumi.Input

	ToGetUsagelimitsUsageLimitCollectionArrayOutput() GetUsagelimitsUsageLimitCollectionArrayOutput
	ToGetUsagelimitsUsageLimitCollectionArrayOutputWithContext(context.Context) GetUsagelimitsUsageLimitCollectionArrayOutput
}

type GetUsagelimitsUsageLimitCollectionArray []GetUsagelimitsUsageLimitCollectionInput

func (GetUsagelimitsUsageLimitCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsagelimitsUsageLimitCollection)(nil)).Elem()
}

func (i GetUsagelimitsUsageLimitCollectionArray) ToGetUsagelimitsUsageLimitCollectionArrayOutput() GetUsagelimitsUsageLimitCollectionArrayOutput {
	return i.ToGetUsagelimitsUsageLimitCollectionArrayOutputWithContext(context.Background())
}

func (i GetUsagelimitsUsageLimitCollectionArray) ToGetUsagelimitsUsageLimitCollectionArrayOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsagelimitsUsageLimitCollectionArrayOutput)
}

type GetUsagelimitsUsageLimitCollectionOutput struct{ *pulumi.OutputState }

func (GetUsagelimitsUsageLimitCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsUsageLimitCollection)(nil)).Elem()
}

func (o GetUsagelimitsUsageLimitCollectionOutput) ToGetUsagelimitsUsageLimitCollectionOutput() GetUsagelimitsUsageLimitCollectionOutput {
	return o
}

func (o GetUsagelimitsUsageLimitCollectionOutput) ToGetUsagelimitsUsageLimitCollectionOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionOutput {
	return o
}

// The list of usage limits.
func (o GetUsagelimitsUsageLimitCollectionOutput) Items() GetUsagelimitsUsageLimitCollectionItemArrayOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollection) []GetUsagelimitsUsageLimitCollectionItem { return v.Items }).(GetUsagelimitsUsageLimitCollectionItemArrayOutput)
}

type GetUsagelimitsUsageLimitCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetUsagelimitsUsageLimitCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsagelimitsUsageLimitCollection)(nil)).Elem()
}

func (o GetUsagelimitsUsageLimitCollectionArrayOutput) ToGetUsagelimitsUsageLimitCollectionArrayOutput() GetUsagelimitsUsageLimitCollectionArrayOutput {
	return o
}

func (o GetUsagelimitsUsageLimitCollectionArrayOutput) ToGetUsagelimitsUsageLimitCollectionArrayOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionArrayOutput {
	return o
}

func (o GetUsagelimitsUsageLimitCollectionArrayOutput) Index(i pulumi.IntInput) GetUsagelimitsUsageLimitCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsagelimitsUsageLimitCollection {
		return vs[0].([]GetUsagelimitsUsageLimitCollection)[vs[1].(int)]
	}).(GetUsagelimitsUsageLimitCollectionOutput)
}

type GetUsagelimitsUsageLimitCollectionItem struct {
	// The action when usage limit is hit
	Action string `pulumi:"action"`
	// The alert level of the usage limit
	AlertLevel float64 `pulumi:"alertLevel"`
	// The user who created the limit
	CreatedBy string `pulumi:"createdBy"`
	// Entitlement ID of the usage limit
	EntitlementId string `pulumi:"entitlementId"`
	// The usage limit ID
	Id    string `pulumi:"id"`
	Limit string `pulumi:"limit"`
	// Hard or soft limit. Hard limits lead to breaches, soft to alerts.
	LimitType string `pulumi:"limitType"`
	// The maximum hard limit set for the usage limit
	MaxHardLimit string `pulumi:"maxHardLimit"`
	// The user who modified the limit
	ModifiedBy string `pulumi:"modifiedBy"`
	// The resource for which the limit is defined
	ResourceName string `pulumi:"resourceName"`
	// The service for which the limit is defined
	ServiceName string `pulumi:"serviceName"`
	// The SKU for which the usage limit is set
	SkuPartId string `pulumi:"skuPartId"`
	// The usage limit lifecycle state.
	State string `pulumi:"state"`
	// Time when the usage limit was created
	TimeCreated string `pulumi:"timeCreated"`
	// Time when the usage limit was modified
	TimeModified string `pulumi:"timeModified"`
	// The value type of the usage limit
	ValueType string `pulumi:"valueType"`
}

// GetUsagelimitsUsageLimitCollectionItemInput is an input type that accepts GetUsagelimitsUsageLimitCollectionItemArgs and GetUsagelimitsUsageLimitCollectionItemOutput values.
// You can construct a concrete instance of `GetUsagelimitsUsageLimitCollectionItemInput` via:
//
//	GetUsagelimitsUsageLimitCollectionItemArgs{...}
type GetUsagelimitsUsageLimitCollectionItemInput interface {
	pulumi.Input

	ToGetUsagelimitsUsageLimitCollectionItemOutput() GetUsagelimitsUsageLimitCollectionItemOutput
	ToGetUsagelimitsUsageLimitCollectionItemOutputWithContext(context.Context) GetUsagelimitsUsageLimitCollectionItemOutput
}

type GetUsagelimitsUsageLimitCollectionItemArgs struct {
	// The action when usage limit is hit
	Action pulumi.StringInput `pulumi:"action"`
	// The alert level of the usage limit
	AlertLevel pulumi.Float64Input `pulumi:"alertLevel"`
	// The user who created the limit
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Entitlement ID of the usage limit
	EntitlementId pulumi.StringInput `pulumi:"entitlementId"`
	// The usage limit ID
	Id    pulumi.StringInput `pulumi:"id"`
	Limit pulumi.StringInput `pulumi:"limit"`
	// Hard or soft limit. Hard limits lead to breaches, soft to alerts.
	LimitType pulumi.StringInput `pulumi:"limitType"`
	// The maximum hard limit set for the usage limit
	MaxHardLimit pulumi.StringInput `pulumi:"maxHardLimit"`
	// The user who modified the limit
	ModifiedBy pulumi.StringInput `pulumi:"modifiedBy"`
	// The resource for which the limit is defined
	ResourceName pulumi.StringInput `pulumi:"resourceName"`
	// The service for which the limit is defined
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// The SKU for which the usage limit is set
	SkuPartId pulumi.StringInput `pulumi:"skuPartId"`
	// The usage limit lifecycle state.
	State pulumi.StringInput `pulumi:"state"`
	// Time when the usage limit was created
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// Time when the usage limit was modified
	TimeModified pulumi.StringInput `pulumi:"timeModified"`
	// The value type of the usage limit
	ValueType pulumi.StringInput `pulumi:"valueType"`
}

func (GetUsagelimitsUsageLimitCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsUsageLimitCollectionItem)(nil)).Elem()
}

func (i GetUsagelimitsUsageLimitCollectionItemArgs) ToGetUsagelimitsUsageLimitCollectionItemOutput() GetUsagelimitsUsageLimitCollectionItemOutput {
	return i.ToGetUsagelimitsUsageLimitCollectionItemOutputWithContext(context.Background())
}

func (i GetUsagelimitsUsageLimitCollectionItemArgs) ToGetUsagelimitsUsageLimitCollectionItemOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsagelimitsUsageLimitCollectionItemOutput)
}

// GetUsagelimitsUsageLimitCollectionItemArrayInput is an input type that accepts GetUsagelimitsUsageLimitCollectionItemArray and GetUsagelimitsUsageLimitCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetUsagelimitsUsageLimitCollectionItemArrayInput` via:
//
//	GetUsagelimitsUsageLimitCollectionItemArray{ GetUsagelimitsUsageLimitCollectionItemArgs{...} }
type GetUsagelimitsUsageLimitCollectionItemArrayInput interface {
	pulumi.Input

	ToGetUsagelimitsUsageLimitCollectionItemArrayOutput() GetUsagelimitsUsageLimitCollectionItemArrayOutput
	ToGetUsagelimitsUsageLimitCollectionItemArrayOutputWithContext(context.Context) GetUsagelimitsUsageLimitCollectionItemArrayOutput
}

type GetUsagelimitsUsageLimitCollectionItemArray []GetUsagelimitsUsageLimitCollectionItemInput

func (GetUsagelimitsUsageLimitCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsagelimitsUsageLimitCollectionItem)(nil)).Elem()
}

func (i GetUsagelimitsUsageLimitCollectionItemArray) ToGetUsagelimitsUsageLimitCollectionItemArrayOutput() GetUsagelimitsUsageLimitCollectionItemArrayOutput {
	return i.ToGetUsagelimitsUsageLimitCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetUsagelimitsUsageLimitCollectionItemArray) ToGetUsagelimitsUsageLimitCollectionItemArrayOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsagelimitsUsageLimitCollectionItemArrayOutput)
}

type GetUsagelimitsUsageLimitCollectionItemOutput struct{ *pulumi.OutputState }

func (GetUsagelimitsUsageLimitCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagelimitsUsageLimitCollectionItem)(nil)).Elem()
}

func (o GetUsagelimitsUsageLimitCollectionItemOutput) ToGetUsagelimitsUsageLimitCollectionItemOutput() GetUsagelimitsUsageLimitCollectionItemOutput {
	return o
}

func (o GetUsagelimitsUsageLimitCollectionItemOutput) ToGetUsagelimitsUsageLimitCollectionItemOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionItemOutput {
	return o
}

// The action when usage limit is hit
func (o GetUsagelimitsUsageLimitCollectionItemOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.Action }).(pulumi.StringOutput)
}

// The alert level of the usage limit
func (o GetUsagelimitsUsageLimitCollectionItemOutput) AlertLevel() pulumi.Float64Output {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) float64 { return v.AlertLevel }).(pulumi.Float64Output)
}

// The user who created the limit
func (o GetUsagelimitsUsageLimitCollectionItemOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Entitlement ID of the usage limit
func (o GetUsagelimitsUsageLimitCollectionItemOutput) EntitlementId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.EntitlementId }).(pulumi.StringOutput)
}

// The usage limit ID
func (o GetUsagelimitsUsageLimitCollectionItemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUsagelimitsUsageLimitCollectionItemOutput) Limit() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.Limit }).(pulumi.StringOutput)
}

// Hard or soft limit. Hard limits lead to breaches, soft to alerts.
func (o GetUsagelimitsUsageLimitCollectionItemOutput) LimitType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.LimitType }).(pulumi.StringOutput)
}

// The maximum hard limit set for the usage limit
func (o GetUsagelimitsUsageLimitCollectionItemOutput) MaxHardLimit() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.MaxHardLimit }).(pulumi.StringOutput)
}

// The user who modified the limit
func (o GetUsagelimitsUsageLimitCollectionItemOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.ModifiedBy }).(pulumi.StringOutput)
}

// The resource for which the limit is defined
func (o GetUsagelimitsUsageLimitCollectionItemOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.ResourceName }).(pulumi.StringOutput)
}

// The service for which the limit is defined
func (o GetUsagelimitsUsageLimitCollectionItemOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.ServiceName }).(pulumi.StringOutput)
}

// The SKU for which the usage limit is set
func (o GetUsagelimitsUsageLimitCollectionItemOutput) SkuPartId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.SkuPartId }).(pulumi.StringOutput)
}

// The usage limit lifecycle state.
func (o GetUsagelimitsUsageLimitCollectionItemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.State }).(pulumi.StringOutput)
}

// Time when the usage limit was created
func (o GetUsagelimitsUsageLimitCollectionItemOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// Time when the usage limit was modified
func (o GetUsagelimitsUsageLimitCollectionItemOutput) TimeModified() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.TimeModified }).(pulumi.StringOutput)
}

// The value type of the usage limit
func (o GetUsagelimitsUsageLimitCollectionItemOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagelimitsUsageLimitCollectionItem) string { return v.ValueType }).(pulumi.StringOutput)
}

type GetUsagelimitsUsageLimitCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetUsagelimitsUsageLimitCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsagelimitsUsageLimitCollectionItem)(nil)).Elem()
}

func (o GetUsagelimitsUsageLimitCollectionItemArrayOutput) ToGetUsagelimitsUsageLimitCollectionItemArrayOutput() GetUsagelimitsUsageLimitCollectionItemArrayOutput {
	return o
}

func (o GetUsagelimitsUsageLimitCollectionItemArrayOutput) ToGetUsagelimitsUsageLimitCollectionItemArrayOutputWithContext(ctx context.Context) GetUsagelimitsUsageLimitCollectionItemArrayOutput {
	return o
}

func (o GetUsagelimitsUsageLimitCollectionItemArrayOutput) Index(i pulumi.IntInput) GetUsagelimitsUsageLimitCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsagelimitsUsageLimitCollectionItem {
		return vs[0].([]GetUsagelimitsUsageLimitCollectionItem)[vs[1].(int)]
	}).(GetUsagelimitsUsageLimitCollectionItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRedeemableUserItemInput)(nil)).Elem(), SubscriptionRedeemableUserItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRedeemableUserItemArrayInput)(nil)).Elem(), SubscriptionRedeemableUserItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceQuotasFilterInput)(nil)).Elem(), GetResourceQuotasFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceQuotasFilterArrayInput)(nil)).Elem(), GetResourceQuotasFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceQuotasResourceQuotumCollectionInput)(nil)).Elem(), GetResourceQuotasResourceQuotumCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceQuotasResourceQuotumCollectionArrayInput)(nil)).Elem(), GetResourceQuotasResourceQuotumCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceQuotasResourceQuotumCollectionItemInput)(nil)).Elem(), GetResourceQuotasResourceQuotumCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceQuotasResourceQuotumCollectionItemArrayInput)(nil)).Elem(), GetResourceQuotasResourceQuotumCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesFilterInput)(nil)).Elem(), GetResourcesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesFilterArrayInput)(nil)).Elem(), GetResourcesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesResourcesCollectionInput)(nil)).Elem(), GetResourcesResourcesCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesResourcesCollectionArrayInput)(nil)).Elem(), GetResourcesResourcesCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesResourcesCollectionItemInput)(nil)).Elem(), GetResourcesResourcesCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesResourcesCollectionItemArrayInput)(nil)).Elem(), GetResourcesResourcesCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesResourcesCollectionItemSkusInput)(nil)).Elem(), GetResourcesResourcesCollectionItemSkusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourcesResourcesCollectionItemSkusArrayInput)(nil)).Elem(), GetResourcesResourcesCollectionItemSkusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductItemInput)(nil)).Elem(), GetSubscriptionProductItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductItemArrayInput)(nil)).Elem(), GetSubscriptionProductItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsFilterInput)(nil)).Elem(), GetSubscriptionProductsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsFilterArrayInput)(nil)).Elem(), GetSubscriptionProductsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionArrayInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemArrayInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItemInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionProductsProductCollectionItemItemArrayInput)(nil)).Elem(), GetSubscriptionProductsProductCollectionItemItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUserItemInput)(nil)).Elem(), GetSubscriptionRedeemableUserItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUserItemArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUserItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersFilterInput)(nil)).Elem(), GetSubscriptionRedeemableUsersFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersFilterArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayInput)(nil)).Elem(), GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionItemInput)(nil)).Elem(), GetSubscriptionRedemptionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionItemArrayInput)(nil)).Elem(), GetSubscriptionRedemptionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsFilterInput)(nil)).Elem(), GetSubscriptionRedemptionsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsFilterArrayInput)(nil)).Elem(), GetSubscriptionRedemptionsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionInput)(nil)).Elem(), GetSubscriptionRedemptionsRedemptionCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionArrayInput)(nil)).Elem(), GetSubscriptionRedemptionsRedemptionCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItemInput)(nil)).Elem(), GetSubscriptionRedemptionsRedemptionCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItemArrayInput)(nil)).Elem(), GetSubscriptionRedemptionsRedemptionCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItemItemInput)(nil)).Elem(), GetSubscriptionRedemptionsRedemptionCollectionItemItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayInput)(nil)).Elem(), GetSubscriptionRedemptionsRedemptionCollectionItemItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardItemInput)(nil)).Elem(), GetSubscriptionRewardItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardItemArrayInput)(nil)).Elem(), GetSubscriptionRewardItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardSummaryInput)(nil)).Elem(), GetSubscriptionRewardSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardSummaryArrayInput)(nil)).Elem(), GetSubscriptionRewardSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsFilterInput)(nil)).Elem(), GetSubscriptionRewardsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsFilterArrayInput)(nil)).Elem(), GetSubscriptionRewardsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItemInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemItemArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummaryInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionRewardsRewardCollectionItemSummaryArrayInput)(nil)).Elem(), GetSubscriptionRewardsRewardCollectionItemSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsagelimitsFilterInput)(nil)).Elem(), GetUsagelimitsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsagelimitsFilterArrayInput)(nil)).Elem(), GetUsagelimitsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsagelimitsUsageLimitCollectionInput)(nil)).Elem(), GetUsagelimitsUsageLimitCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsagelimitsUsageLimitCollectionArrayInput)(nil)).Elem(), GetUsagelimitsUsageLimitCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsagelimitsUsageLimitCollectionItemInput)(nil)).Elem(), GetUsagelimitsUsageLimitCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsagelimitsUsageLimitCollectionItemArrayInput)(nil)).Elem(), GetUsagelimitsUsageLimitCollectionItemArray{})
	pulumi.RegisterOutputType(SubscriptionRedeemableUserItemOutput{})
	pulumi.RegisterOutputType(SubscriptionRedeemableUserItemArrayOutput{})
	pulumi.RegisterOutputType(GetResourceQuotasFilterOutput{})
	pulumi.RegisterOutputType(GetResourceQuotasFilterArrayOutput{})
	pulumi.RegisterOutputType(GetResourceQuotasResourceQuotumCollectionOutput{})
	pulumi.RegisterOutputType(GetResourceQuotasResourceQuotumCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetResourceQuotasResourceQuotumCollectionItemOutput{})
	pulumi.RegisterOutputType(GetResourceQuotasResourceQuotumCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetResourcesFilterOutput{})
	pulumi.RegisterOutputType(GetResourcesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetResourcesResourcesCollectionOutput{})
	pulumi.RegisterOutputType(GetResourcesResourcesCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetResourcesResourcesCollectionItemOutput{})
	pulumi.RegisterOutputType(GetResourcesResourcesCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetResourcesResourcesCollectionItemSkusOutput{})
	pulumi.RegisterOutputType(GetResourcesResourcesCollectionItemSkusArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsFilterOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionProductsProductCollectionItemItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUserItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUserItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersFilterOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsFilterOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsRedemptionCollectionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsRedemptionCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsRedemptionCollectionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsRedemptionCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsRedemptionCollectionItemItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRedemptionsRedemptionCollectionItemItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardSummaryOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardSummaryArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsFilterOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemItemOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemItemArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemSummaryOutput{})
	pulumi.RegisterOutputType(GetSubscriptionRewardsRewardCollectionItemSummaryArrayOutput{})
	pulumi.RegisterOutputType(GetUsagelimitsFilterOutput{})
	pulumi.RegisterOutputType(GetUsagelimitsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetUsagelimitsUsageLimitCollectionOutput{})
	pulumi.RegisterOutputType(GetUsagelimitsUsageLimitCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetUsagelimitsUsageLimitCollectionItemOutput{})
	pulumi.RegisterOutputType(GetUsagelimitsUsageLimitCollectionItemArrayOutput{})
}
