// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package usageproxy

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Subscription Redeemable User resource in Oracle Cloud Infrastructure Usage Proxy service.
//
// Adds the list of redeemable user summary for a subscription ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/UsageProxy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := UsageProxy.NewSubscriptionRedeemableUser(ctx, "testSubscriptionRedeemableUser", &UsageProxy.SubscriptionRedeemableUserArgs{
//				SubscriptionId: pulumi.Any(oci_ons_subscription.Test_subscription.Id),
//				TenancyId:      pulumi.Any(oci_identity_tenancy.Test_tenancy.Id),
//				Items: usageproxy.SubscriptionRedeemableUserItemArray{
//					&usageproxy.SubscriptionRedeemableUserItemArgs{
//						EmailId:   pulumi.Any(oci_usage_proxy_email.Test_email.Id),
//						FirstName: pulumi.Any(_var.Subscription_redeemable_user_items_first_name),
//						LastName:  pulumi.Any(_var.Subscription_redeemable_user_items_last_name),
//					},
//				},
//				UserId: pulumi.Any(oci_identity_user.Test_user.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SubscriptionRedeemableUsers can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:UsageProxy/subscriptionRedeemableUser:SubscriptionRedeemableUser test_subscription_redeemable_user "subscriptions/{subscriptionId}/redeemableUsers/tenancyId/{tenancyId}"
//
// ```
type SubscriptionRedeemableUser struct {
	pulumi.CustomResourceState

	// The list of new user to be added to the list of user that can redeem rewards.
	Items SubscriptionRedeemableUserItemArrayOutput `pulumi:"items"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId pulumi.StringOutput `pulumi:"tenancyId"`
	// The user ID of the person to send a copy of an email.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewSubscriptionRedeemableUser registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionRedeemableUser(ctx *pulumi.Context,
	name string, args *SubscriptionRedeemableUserArgs, opts ...pulumi.ResourceOption) (*SubscriptionRedeemableUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	if args.TenancyId == nil {
		return nil, errors.New("invalid value for required argument 'TenancyId'")
	}
	var resource SubscriptionRedeemableUser
	err := ctx.RegisterResource("oci:UsageProxy/subscriptionRedeemableUser:SubscriptionRedeemableUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionRedeemableUser gets an existing SubscriptionRedeemableUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionRedeemableUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionRedeemableUserState, opts ...pulumi.ResourceOption) (*SubscriptionRedeemableUser, error) {
	var resource SubscriptionRedeemableUser
	err := ctx.ReadResource("oci:UsageProxy/subscriptionRedeemableUser:SubscriptionRedeemableUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionRedeemableUser resources.
type subscriptionRedeemableUserState struct {
	// The list of new user to be added to the list of user that can redeem rewards.
	Items []SubscriptionRedeemableUserItem `pulumi:"items"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId *string `pulumi:"tenancyId"`
	// The user ID of the person to send a copy of an email.
	UserId *string `pulumi:"userId"`
}

type SubscriptionRedeemableUserState struct {
	// The list of new user to be added to the list of user that can redeem rewards.
	Items SubscriptionRedeemableUserItemArrayInput
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringPtrInput
	// The OCID of the tenancy.
	TenancyId pulumi.StringPtrInput
	// The user ID of the person to send a copy of an email.
	UserId pulumi.StringPtrInput
}

func (SubscriptionRedeemableUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionRedeemableUserState)(nil)).Elem()
}

type subscriptionRedeemableUserArgs struct {
	// The list of new user to be added to the list of user that can redeem rewards.
	Items []SubscriptionRedeemableUserItem `pulumi:"items"`
	// The subscription ID for which rewards information is requested for.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The OCID of the tenancy.
	TenancyId string `pulumi:"tenancyId"`
	// The user ID of the person to send a copy of an email.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a SubscriptionRedeemableUser resource.
type SubscriptionRedeemableUserArgs struct {
	// The list of new user to be added to the list of user that can redeem rewards.
	Items SubscriptionRedeemableUserItemArrayInput
	// The subscription ID for which rewards information is requested for.
	SubscriptionId pulumi.StringInput
	// The OCID of the tenancy.
	TenancyId pulumi.StringInput
	// The user ID of the person to send a copy of an email.
	UserId pulumi.StringPtrInput
}

func (SubscriptionRedeemableUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionRedeemableUserArgs)(nil)).Elem()
}

type SubscriptionRedeemableUserInput interface {
	pulumi.Input

	ToSubscriptionRedeemableUserOutput() SubscriptionRedeemableUserOutput
	ToSubscriptionRedeemableUserOutputWithContext(ctx context.Context) SubscriptionRedeemableUserOutput
}

func (*SubscriptionRedeemableUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRedeemableUser)(nil)).Elem()
}

func (i *SubscriptionRedeemableUser) ToSubscriptionRedeemableUserOutput() SubscriptionRedeemableUserOutput {
	return i.ToSubscriptionRedeemableUserOutputWithContext(context.Background())
}

func (i *SubscriptionRedeemableUser) ToSubscriptionRedeemableUserOutputWithContext(ctx context.Context) SubscriptionRedeemableUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRedeemableUserOutput)
}

// SubscriptionRedeemableUserArrayInput is an input type that accepts SubscriptionRedeemableUserArray and SubscriptionRedeemableUserArrayOutput values.
// You can construct a concrete instance of `SubscriptionRedeemableUserArrayInput` via:
//
//	SubscriptionRedeemableUserArray{ SubscriptionRedeemableUserArgs{...} }
type SubscriptionRedeemableUserArrayInput interface {
	pulumi.Input

	ToSubscriptionRedeemableUserArrayOutput() SubscriptionRedeemableUserArrayOutput
	ToSubscriptionRedeemableUserArrayOutputWithContext(context.Context) SubscriptionRedeemableUserArrayOutput
}

type SubscriptionRedeemableUserArray []SubscriptionRedeemableUserInput

func (SubscriptionRedeemableUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionRedeemableUser)(nil)).Elem()
}

func (i SubscriptionRedeemableUserArray) ToSubscriptionRedeemableUserArrayOutput() SubscriptionRedeemableUserArrayOutput {
	return i.ToSubscriptionRedeemableUserArrayOutputWithContext(context.Background())
}

func (i SubscriptionRedeemableUserArray) ToSubscriptionRedeemableUserArrayOutputWithContext(ctx context.Context) SubscriptionRedeemableUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRedeemableUserArrayOutput)
}

// SubscriptionRedeemableUserMapInput is an input type that accepts SubscriptionRedeemableUserMap and SubscriptionRedeemableUserMapOutput values.
// You can construct a concrete instance of `SubscriptionRedeemableUserMapInput` via:
//
//	SubscriptionRedeemableUserMap{ "key": SubscriptionRedeemableUserArgs{...} }
type SubscriptionRedeemableUserMapInput interface {
	pulumi.Input

	ToSubscriptionRedeemableUserMapOutput() SubscriptionRedeemableUserMapOutput
	ToSubscriptionRedeemableUserMapOutputWithContext(context.Context) SubscriptionRedeemableUserMapOutput
}

type SubscriptionRedeemableUserMap map[string]SubscriptionRedeemableUserInput

func (SubscriptionRedeemableUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionRedeemableUser)(nil)).Elem()
}

func (i SubscriptionRedeemableUserMap) ToSubscriptionRedeemableUserMapOutput() SubscriptionRedeemableUserMapOutput {
	return i.ToSubscriptionRedeemableUserMapOutputWithContext(context.Background())
}

func (i SubscriptionRedeemableUserMap) ToSubscriptionRedeemableUserMapOutputWithContext(ctx context.Context) SubscriptionRedeemableUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRedeemableUserMapOutput)
}

type SubscriptionRedeemableUserOutput struct{ *pulumi.OutputState }

func (SubscriptionRedeemableUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRedeemableUser)(nil)).Elem()
}

func (o SubscriptionRedeemableUserOutput) ToSubscriptionRedeemableUserOutput() SubscriptionRedeemableUserOutput {
	return o
}

func (o SubscriptionRedeemableUserOutput) ToSubscriptionRedeemableUserOutputWithContext(ctx context.Context) SubscriptionRedeemableUserOutput {
	return o
}

// The list of new user to be added to the list of user that can redeem rewards.
func (o SubscriptionRedeemableUserOutput) Items() SubscriptionRedeemableUserItemArrayOutput {
	return o.ApplyT(func(v *SubscriptionRedeemableUser) SubscriptionRedeemableUserItemArrayOutput { return v.Items }).(SubscriptionRedeemableUserItemArrayOutput)
}

// The subscription ID for which rewards information is requested for.
func (o SubscriptionRedeemableUserOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionRedeemableUser) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The OCID of the tenancy.
func (o SubscriptionRedeemableUserOutput) TenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionRedeemableUser) pulumi.StringOutput { return v.TenancyId }).(pulumi.StringOutput)
}

// The user ID of the person to send a copy of an email.
func (o SubscriptionRedeemableUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionRedeemableUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type SubscriptionRedeemableUserArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionRedeemableUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionRedeemableUser)(nil)).Elem()
}

func (o SubscriptionRedeemableUserArrayOutput) ToSubscriptionRedeemableUserArrayOutput() SubscriptionRedeemableUserArrayOutput {
	return o
}

func (o SubscriptionRedeemableUserArrayOutput) ToSubscriptionRedeemableUserArrayOutputWithContext(ctx context.Context) SubscriptionRedeemableUserArrayOutput {
	return o
}

func (o SubscriptionRedeemableUserArrayOutput) Index(i pulumi.IntInput) SubscriptionRedeemableUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionRedeemableUser {
		return vs[0].([]*SubscriptionRedeemableUser)[vs[1].(int)]
	}).(SubscriptionRedeemableUserOutput)
}

type SubscriptionRedeemableUserMapOutput struct{ *pulumi.OutputState }

func (SubscriptionRedeemableUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionRedeemableUser)(nil)).Elem()
}

func (o SubscriptionRedeemableUserMapOutput) ToSubscriptionRedeemableUserMapOutput() SubscriptionRedeemableUserMapOutput {
	return o
}

func (o SubscriptionRedeemableUserMapOutput) ToSubscriptionRedeemableUserMapOutputWithContext(ctx context.Context) SubscriptionRedeemableUserMapOutput {
	return o
}

func (o SubscriptionRedeemableUserMapOutput) MapIndex(k pulumi.StringInput) SubscriptionRedeemableUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionRedeemableUser {
		return vs[0].(map[string]*SubscriptionRedeemableUser)[vs[1].(string)]
	}).(SubscriptionRedeemableUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRedeemableUserInput)(nil)).Elem(), &SubscriptionRedeemableUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRedeemableUserArrayInput)(nil)).Elem(), SubscriptionRedeemableUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRedeemableUserMapInput)(nil)).Elem(), SubscriptionRedeemableUserMap{})
	pulumi.RegisterOutputType(SubscriptionRedeemableUserOutput{})
	pulumi.RegisterOutputType(SubscriptionRedeemableUserArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionRedeemableUserMapOutput{})
}
