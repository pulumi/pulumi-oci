// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Secret Version resource in Oracle Cloud Infrastructure Vault service.
//
// Gets information about the specified version of a secret.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/Vault"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Vault.GetSecretVersion(ctx, &vault.GetSecretVersionArgs{
// 			SecretId:            oci_vault_secret.Test_secret.Id,
// 			SecretVersionNumber: _var.Secret_version_secret_version_number,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetSecretVersion(ctx *pulumi.Context, args *GetSecretVersionArgs, opts ...pulumi.InvokeOption) (*GetSecretVersionResult, error) {
	var rv GetSecretVersionResult
	err := ctx.Invoke("oci:Vault/getSecretVersion:getSecretVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretVersion.
type GetSecretVersionArgs struct {
	// The OCID of the secret.
	SecretId string `pulumi:"secretId"`
	// The version number of the secret.
	SecretVersionNumber string `pulumi:"secretVersionNumber"`
}

// A collection of values returned by getSecretVersion.
type GetSecretVersionResult struct {
	// The content type of the secret version's secret contents.
	ContentType string `pulumi:"contentType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the secret version. A name is unique across versions of a secret.
	Name string `pulumi:"name"`
	// The OCID of the secret.
	SecretId            string `pulumi:"secretId"`
	SecretVersionNumber string `pulumi:"secretVersionNumber"`
	// A list of possible rotation states for the secret version. A secret version marked `CURRENT` is currently in use. A secret version marked `PENDING` is staged and available for use, but has not been applied on the target system and, therefore, has not been rotated into current, active use. The secret most recently uploaded to a vault is always marked `LATEST`. (The first version of a secret is always marked as both `CURRENT` and `LATEST`.) A secret version marked `PREVIOUS` is the secret version that was most recently marked `CURRENT`, before the last secret version rotation. A secret version marked `DEPRECATED` is neither current, pending, nor the previous one in use. Only secret versions marked `DEPRECATED` can be scheduled for deletion.
	Stages []string `pulumi:"stages"`
	// A optional property indicating when the secret version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
	// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfCurrentVersionExpiry string `pulumi:"timeOfCurrentVersionExpiry"`
	// An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion string `pulumi:"timeOfDeletion"`
	// The version number of the secret.
	VersionNumber string `pulumi:"versionNumber"`
}

func GetSecretVersionOutput(ctx *pulumi.Context, args GetSecretVersionOutputArgs, opts ...pulumi.InvokeOption) GetSecretVersionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSecretVersionResult, error) {
			args := v.(GetSecretVersionArgs)
			r, err := GetSecretVersion(ctx, &args, opts...)
			var s GetSecretVersionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSecretVersionResultOutput)
}

// A collection of arguments for invoking getSecretVersion.
type GetSecretVersionOutputArgs struct {
	// The OCID of the secret.
	SecretId pulumi.StringInput `pulumi:"secretId"`
	// The version number of the secret.
	SecretVersionNumber pulumi.StringInput `pulumi:"secretVersionNumber"`
}

func (GetSecretVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretVersionArgs)(nil)).Elem()
}

// A collection of values returned by getSecretVersion.
type GetSecretVersionResultOutput struct{ *pulumi.OutputState }

func (GetSecretVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretVersionResult)(nil)).Elem()
}

func (o GetSecretVersionResultOutput) ToGetSecretVersionResultOutput() GetSecretVersionResultOutput {
	return o
}

func (o GetSecretVersionResultOutput) ToGetSecretVersionResultOutputWithContext(ctx context.Context) GetSecretVersionResultOutput {
	return o
}

// The content type of the secret version's secret contents.
func (o GetSecretVersionResultOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.ContentType }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecretVersionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the secret version. A name is unique across versions of a secret.
func (o GetSecretVersionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The OCID of the secret.
func (o GetSecretVersionResultOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.SecretId }).(pulumi.StringOutput)
}

func (o GetSecretVersionResultOutput) SecretVersionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.SecretVersionNumber }).(pulumi.StringOutput)
}

// A list of possible rotation states for the secret version. A secret version marked `CURRENT` is currently in use. A secret version marked `PENDING` is staged and available for use, but has not been applied on the target system and, therefore, has not been rotated into current, active use. The secret most recently uploaded to a vault is always marked `LATEST`. (The first version of a secret is always marked as both `CURRENT` and `LATEST`.) A secret version marked `PREVIOUS` is the secret version that was most recently marked `CURRENT`, before the last secret version rotation. A secret version marked `DEPRECATED` is neither current, pending, nor the previous one in use. Only secret versions marked `DEPRECATED` can be scheduled for deletion.
func (o GetSecretVersionResultOutput) Stages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecretVersionResult) []string { return v.Stages }).(pulumi.StringArrayOutput)
}

// A optional property indicating when the secret version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o GetSecretVersionResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o GetSecretVersionResultOutput) TimeOfCurrentVersionExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.TimeOfCurrentVersionExpiry }).(pulumi.StringOutput)
}

// An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o GetSecretVersionResultOutput) TimeOfDeletion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.TimeOfDeletion }).(pulumi.StringOutput)
}

// The version number of the secret.
func (o GetSecretVersionResultOutput) VersionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretVersionResult) string { return v.VersionNumber }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecretVersionResultOutput{})
}
