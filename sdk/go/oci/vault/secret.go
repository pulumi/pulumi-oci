// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Secret resource in Oracle Cloud Infrastructure Vault service.
//
// Creates a new secret according to the details of the request.
//
// ## Import
//
// Secrets can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Vault/secret:Secret test_secret "id"
// ```
type Secret struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment where you want to create the secret.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The version number of the secret version that's currently in use.
	CurrentVersionNumber pulumi.StringOutput `pulumi:"currentVersionNumber"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) A brief description of the secret. Avoid entering confidential information.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) The value of this flag determines whether or not secret content will be generated automatically. If not set, it defaults to false.
	EnableAutoGeneration pulumi.BoolPtrOutput `pulumi:"enableAutoGeneration"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// The value of this flag determines whether or not secret content will be generated automatically.
	IsAutoGenerationEnabled pulumi.BoolOutput `pulumi:"isAutoGenerationEnabled"`
	// A Boolean value that indicates whether the secret is a source or replica secret.
	IsReplica pulumi.BoolOutput `pulumi:"isReplica"`
	// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// A property indicating when the secret was last rotated successfully, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	LastRotationTime pulumi.StringOutput `pulumi:"lastRotationTime"`
	// Additional information about the current lifecycle state of the secret.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) Additional metadata that you can use to provide context about how to use the secret during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A property indicating when the secret is scheduled to be rotated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	NextRotationTime pulumi.StringOutput `pulumi:"nextRotationTime"`
	// (Updatable) Defines the configuration that enables cross-region secret replication.
	ReplicationConfig SecretReplicationConfigPtrOutput `pulumi:"replicationConfig"`
	// (Updatable) Defines the frequency of the rotation and the information about the target system
	RotationConfig SecretRotationConfigOutput `pulumi:"rotationConfig"`
	// Additional information about the status of the secret rotation
	RotationStatus pulumi.StringOutput `pulumi:"rotationStatus"`
	// (Updatable) The content of the secret and metadata to help identify it.
	SecretContent SecretSecretContentOutput `pulumi:"secretContent"`
	// (Updatable) Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
	SecretGenerationContext SecretSecretGenerationContextOutput `pulumi:"secretGenerationContext"`
	// A user-friendly name for the secret. Secret names should be unique within a vault. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
	SecretName pulumi.StringOutput `pulumi:"secretName"`
	// (Updatable) A list of rules to control how the secret is used and managed.
	SecretRules SecretSecretRuleArrayOutput `pulumi:"secretRules"`
	// Details for the source that the source secret has.
	SourceRegionInformations SecretSourceRegionInformationArrayOutput `pulumi:"sourceRegionInformations"`
	// The current lifecycle state of the secret.
	State pulumi.StringOutput `pulumi:"state"`
	// A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfCurrentVersionExpiry pulumi.StringOutput `pulumi:"timeOfCurrentVersionExpiry"`
	// An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringOutput `pulumi:"timeOfDeletion"`
	// The OCID of the vault where you want to create the secret.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.SecretName == nil {
		return nil, errors.New("invalid value for required argument 'SecretName'")
	}
	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Secret
	err := ctx.RegisterResource("oci:Vault/secret:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("oci:Vault/secret:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
	// (Updatable) The OCID of the compartment where you want to create the secret.
	CompartmentId *string `pulumi:"compartmentId"`
	// The version number of the secret version that's currently in use.
	CurrentVersionNumber *string `pulumi:"currentVersionNumber"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A brief description of the secret. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// (Updatable) The value of this flag determines whether or not secret content will be generated automatically. If not set, it defaults to false.
	EnableAutoGeneration *bool `pulumi:"enableAutoGeneration"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The value of this flag determines whether or not secret content will be generated automatically.
	IsAutoGenerationEnabled *bool `pulumi:"isAutoGenerationEnabled"`
	// A Boolean value that indicates whether the secret is a source or replica secret.
	IsReplica *bool `pulumi:"isReplica"`
	// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
	KeyId *string `pulumi:"keyId"`
	// A property indicating when the secret was last rotated successfully, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	LastRotationTime *string `pulumi:"lastRotationTime"`
	// Additional information about the current lifecycle state of the secret.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) Additional metadata that you can use to provide context about how to use the secret during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// A property indicating when the secret is scheduled to be rotated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	NextRotationTime *string `pulumi:"nextRotationTime"`
	// (Updatable) Defines the configuration that enables cross-region secret replication.
	ReplicationConfig *SecretReplicationConfig `pulumi:"replicationConfig"`
	// (Updatable) Defines the frequency of the rotation and the information about the target system
	RotationConfig *SecretRotationConfig `pulumi:"rotationConfig"`
	// Additional information about the status of the secret rotation
	RotationStatus *string `pulumi:"rotationStatus"`
	// (Updatable) The content of the secret and metadata to help identify it.
	SecretContent *SecretSecretContent `pulumi:"secretContent"`
	// (Updatable) Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
	SecretGenerationContext *SecretSecretGenerationContext `pulumi:"secretGenerationContext"`
	// A user-friendly name for the secret. Secret names should be unique within a vault. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
	SecretName *string `pulumi:"secretName"`
	// (Updatable) A list of rules to control how the secret is used and managed.
	SecretRules []SecretSecretRule `pulumi:"secretRules"`
	// Details for the source that the source secret has.
	SourceRegionInformations []SecretSourceRegionInformation `pulumi:"sourceRegionInformations"`
	// The current lifecycle state of the secret.
	State *string `pulumi:"state"`
	// A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfCurrentVersionExpiry *string `pulumi:"timeOfCurrentVersionExpiry"`
	// An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion *string `pulumi:"timeOfDeletion"`
	// The OCID of the vault where you want to create the secret.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VaultId *string `pulumi:"vaultId"`
}

type SecretState struct {
	// (Updatable) The OCID of the compartment where you want to create the secret.
	CompartmentId pulumi.StringPtrInput
	// The version number of the secret version that's currently in use.
	CurrentVersionNumber pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) A brief description of the secret. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// (Updatable) The value of this flag determines whether or not secret content will be generated automatically. If not set, it defaults to false.
	EnableAutoGeneration pulumi.BoolPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// The value of this flag determines whether or not secret content will be generated automatically.
	IsAutoGenerationEnabled pulumi.BoolPtrInput
	// A Boolean value that indicates whether the secret is a source or replica secret.
	IsReplica pulumi.BoolPtrInput
	// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
	KeyId pulumi.StringPtrInput
	// A property indicating when the secret was last rotated successfully, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	LastRotationTime pulumi.StringPtrInput
	// Additional information about the current lifecycle state of the secret.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) Additional metadata that you can use to provide context about how to use the secret during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
	Metadata pulumi.StringMapInput
	// A property indicating when the secret is scheduled to be rotated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	NextRotationTime pulumi.StringPtrInput
	// (Updatable) Defines the configuration that enables cross-region secret replication.
	ReplicationConfig SecretReplicationConfigPtrInput
	// (Updatable) Defines the frequency of the rotation and the information about the target system
	RotationConfig SecretRotationConfigPtrInput
	// Additional information about the status of the secret rotation
	RotationStatus pulumi.StringPtrInput
	// (Updatable) The content of the secret and metadata to help identify it.
	SecretContent SecretSecretContentPtrInput
	// (Updatable) Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
	SecretGenerationContext SecretSecretGenerationContextPtrInput
	// A user-friendly name for the secret. Secret names should be unique within a vault. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
	SecretName pulumi.StringPtrInput
	// (Updatable) A list of rules to control how the secret is used and managed.
	SecretRules SecretSecretRuleArrayInput
	// Details for the source that the source secret has.
	SourceRegionInformations SecretSourceRegionInformationArrayInput
	// The current lifecycle state of the secret.
	State pulumi.StringPtrInput
	// A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfCurrentVersionExpiry pulumi.StringPtrInput
	// An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringPtrInput
	// The OCID of the vault where you want to create the secret.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VaultId pulumi.StringPtrInput
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	// (Updatable) The OCID of the compartment where you want to create the secret.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A brief description of the secret. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// (Updatable) The value of this flag determines whether or not secret content will be generated automatically. If not set, it defaults to false.
	EnableAutoGeneration *bool `pulumi:"enableAutoGeneration"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
	KeyId string `pulumi:"keyId"`
	// (Updatable) Additional metadata that you can use to provide context about how to use the secret during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// (Updatable) Defines the configuration that enables cross-region secret replication.
	ReplicationConfig *SecretReplicationConfig `pulumi:"replicationConfig"`
	// (Updatable) Defines the frequency of the rotation and the information about the target system
	RotationConfig *SecretRotationConfig `pulumi:"rotationConfig"`
	// (Updatable) The content of the secret and metadata to help identify it.
	SecretContent *SecretSecretContent `pulumi:"secretContent"`
	// (Updatable) Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
	SecretGenerationContext *SecretSecretGenerationContext `pulumi:"secretGenerationContext"`
	// A user-friendly name for the secret. Secret names should be unique within a vault. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
	SecretName string `pulumi:"secretName"`
	// (Updatable) A list of rules to control how the secret is used and managed.
	SecretRules []SecretSecretRule `pulumi:"secretRules"`
	// The OCID of the vault where you want to create the secret.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// (Updatable) The OCID of the compartment where you want to create the secret.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) A brief description of the secret. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// (Updatable) The value of this flag determines whether or not secret content will be generated automatically. If not set, it defaults to false.
	EnableAutoGeneration pulumi.BoolPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
	KeyId pulumi.StringInput
	// (Updatable) Additional metadata that you can use to provide context about how to use the secret during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
	Metadata pulumi.StringMapInput
	// (Updatable) Defines the configuration that enables cross-region secret replication.
	ReplicationConfig SecretReplicationConfigPtrInput
	// (Updatable) Defines the frequency of the rotation and the information about the target system
	RotationConfig SecretRotationConfigPtrInput
	// (Updatable) The content of the secret and metadata to help identify it.
	SecretContent SecretSecretContentPtrInput
	// (Updatable) Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
	SecretGenerationContext SecretSecretGenerationContextPtrInput
	// A user-friendly name for the secret. Secret names should be unique within a vault. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
	SecretName pulumi.StringInput
	// (Updatable) A list of rules to control how the secret is used and managed.
	SecretRules SecretSecretRuleArrayInput
	// The OCID of the vault where you want to create the secret.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VaultId pulumi.StringInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

// SecretMapInput is an input type that accepts SecretMap and SecretMapOutput values.
// You can construct a concrete instance of `SecretMapInput` via:
//
//	SecretMap{ "key": SecretArgs{...} }
type SecretMapInput interface {
	pulumi.Input

	ToSecretMapOutput() SecretMapOutput
	ToSecretMapOutputWithContext(context.Context) SecretMapOutput
}

type SecretMap map[string]SecretInput

func (SecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (i SecretMap) ToSecretMapOutput() SecretMapOutput {
	return i.ToSecretMapOutputWithContext(context.Background())
}

func (i SecretMap) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretMapOutput)
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// (Updatable) The OCID of the compartment where you want to create the secret.
func (o SecretOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The version number of the secret version that's currently in use.
func (o SecretOutput) CurrentVersionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.CurrentVersionNumber }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o SecretOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) A brief description of the secret. Avoid entering confidential information.
func (o SecretOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) The value of this flag determines whether or not secret content will be generated automatically. If not set, it defaults to false.
func (o SecretOutput) EnableAutoGeneration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.BoolPtrOutput { return v.EnableAutoGeneration }).(pulumi.BoolPtrOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o SecretOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The value of this flag determines whether or not secret content will be generated automatically.
func (o SecretOutput) IsAutoGenerationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Secret) pulumi.BoolOutput { return v.IsAutoGenerationEnabled }).(pulumi.BoolOutput)
}

// A Boolean value that indicates whether the secret is a source or replica secret.
func (o SecretOutput) IsReplica() pulumi.BoolOutput {
	return o.ApplyT(func(v *Secret) pulumi.BoolOutput { return v.IsReplica }).(pulumi.BoolOutput)
}

// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
func (o SecretOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// A property indicating when the secret was last rotated successfully, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o SecretOutput) LastRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.LastRotationTime }).(pulumi.StringOutput)
}

// Additional information about the current lifecycle state of the secret.
func (o SecretOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// (Updatable) Additional metadata that you can use to provide context about how to use the secret during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
func (o SecretOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A property indicating when the secret is scheduled to be rotated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o SecretOutput) NextRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.NextRotationTime }).(pulumi.StringOutput)
}

// (Updatable) Defines the configuration that enables cross-region secret replication.
func (o SecretOutput) ReplicationConfig() SecretReplicationConfigPtrOutput {
	return o.ApplyT(func(v *Secret) SecretReplicationConfigPtrOutput { return v.ReplicationConfig }).(SecretReplicationConfigPtrOutput)
}

// (Updatable) Defines the frequency of the rotation and the information about the target system
func (o SecretOutput) RotationConfig() SecretRotationConfigOutput {
	return o.ApplyT(func(v *Secret) SecretRotationConfigOutput { return v.RotationConfig }).(SecretRotationConfigOutput)
}

// Additional information about the status of the secret rotation
func (o SecretOutput) RotationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.RotationStatus }).(pulumi.StringOutput)
}

// (Updatable) The content of the secret and metadata to help identify it.
func (o SecretOutput) SecretContent() SecretSecretContentOutput {
	return o.ApplyT(func(v *Secret) SecretSecretContentOutput { return v.SecretContent }).(SecretSecretContentOutput)
}

// (Updatable) Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
func (o SecretOutput) SecretGenerationContext() SecretSecretGenerationContextOutput {
	return o.ApplyT(func(v *Secret) SecretSecretGenerationContextOutput { return v.SecretGenerationContext }).(SecretSecretGenerationContextOutput)
}

// A user-friendly name for the secret. Secret names should be unique within a vault. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
func (o SecretOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.SecretName }).(pulumi.StringOutput)
}

// (Updatable) A list of rules to control how the secret is used and managed.
func (o SecretOutput) SecretRules() SecretSecretRuleArrayOutput {
	return o.ApplyT(func(v *Secret) SecretSecretRuleArrayOutput { return v.SecretRules }).(SecretSecretRuleArrayOutput)
}

// Details for the source that the source secret has.
func (o SecretOutput) SourceRegionInformations() SecretSourceRegionInformationArrayOutput {
	return o.ApplyT(func(v *Secret) SecretSourceRegionInformationArrayOutput { return v.SourceRegionInformations }).(SecretSourceRegionInformationArrayOutput)
}

// The current lifecycle state of the secret.
func (o SecretOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o SecretOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o SecretOutput) TimeOfCurrentVersionExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.TimeOfCurrentVersionExpiry }).(pulumi.StringOutput)
}

// An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o SecretOutput) TimeOfDeletion() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.TimeOfDeletion }).(pulumi.StringOutput)
}

// The OCID of the vault where you want to create the secret.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SecretOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].([]*Secret)[vs[1].(int)]
	}).(SecretOutput)
}

type SecretMapOutput struct{ *pulumi.OutputState }

func (SecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (o SecretMapOutput) ToSecretMapOutput() SecretMapOutput {
	return o
}

func (o SecretMapOutput) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return o
}

func (o SecretMapOutput) MapIndex(k pulumi.StringInput) SecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].(map[string]*Secret)[vs[1].(string)]
	}).(SecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), &Secret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretArrayInput)(nil)).Elem(), SecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretMapInput)(nil)).Elem(), SecretMap{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretMapOutput{})
}
