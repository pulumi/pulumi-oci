// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vbs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Vbs Instance resource in Oracle Cloud Infrastructure Vbs Inst service.
//
// Creates a new VbsInstance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Vbs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vbs.NewInstVbsInstance(ctx, "testVbsInstance", &Vbs.InstVbsInstanceArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				DisplayName:   pulumi.Any(_var.Vbs_instance_display_name),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				IdcsAccessToken:                 pulumi.Any(_var.Vbs_instance_idcs_access_token),
//				IsResourceUsageAgreementGranted: pulumi.Any(_var.Vbs_instance_is_resource_usage_agreement_granted),
//				ResourceCompartmentId:           pulumi.Any(_var.Resource_compartment_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VbsInstances can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Vbs/instVbsInstance:InstVbsInstance test_vbs_instance "id"
//
// ```
type InstVbsInstance struct {
	pulumi.CustomResourceState

	// (Updatable) Compartment Identifier. It can only be the root compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Display Name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
	IdcsAccessToken pulumi.StringOutput `pulumi:"idcsAccessToken"`
	// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
	IsResourceUsageAgreementGranted pulumi.BoolOutput `pulumi:"isResourceUsageAgreementGranted"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecyleDetails pulumi.StringOutput `pulumi:"lifecyleDetails"`
	// Service Instance Name
	Name pulumi.StringOutput `pulumi:"name"`
	// (Updatable) Compartment where VBS may create additional resources for the service instance
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceCompartmentId pulumi.StringOutput `pulumi:"resourceCompartmentId"`
	// The current state of the VbsInstance.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the the VbsInstance was created. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the VbsInstance was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// Public web URL for accessing the VBS service instance
	VbsAccessUrl pulumi.StringOutput `pulumi:"vbsAccessUrl"`
}

// NewInstVbsInstance registers a new resource with the given unique name, arguments, and options.
func NewInstVbsInstance(ctx *pulumi.Context,
	name string, args *InstVbsInstanceArgs, opts ...pulumi.ResourceOption) (*InstVbsInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstVbsInstance
	err := ctx.RegisterResource("oci:Vbs/instVbsInstance:InstVbsInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstVbsInstance gets an existing InstVbsInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstVbsInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstVbsInstanceState, opts ...pulumi.ResourceOption) (*InstVbsInstance, error) {
	var resource InstVbsInstance
	err := ctx.ReadResource("oci:Vbs/instVbsInstance:InstVbsInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstVbsInstance resources.
type instVbsInstanceState struct {
	// (Updatable) Compartment Identifier. It can only be the root compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Display Name
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
	IdcsAccessToken *string `pulumi:"idcsAccessToken"`
	// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
	IsResourceUsageAgreementGranted *bool `pulumi:"isResourceUsageAgreementGranted"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecyleDetails *string `pulumi:"lifecyleDetails"`
	// Service Instance Name
	Name *string `pulumi:"name"`
	// (Updatable) Compartment where VBS may create additional resources for the service instance
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceCompartmentId *string `pulumi:"resourceCompartmentId"`
	// The current state of the VbsInstance.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the the VbsInstance was created. An RFC3339 formatted datetime string
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the VbsInstance was updated. An RFC3339 formatted datetime string
	TimeUpdated *string `pulumi:"timeUpdated"`
	// Public web URL for accessing the VBS service instance
	VbsAccessUrl *string `pulumi:"vbsAccessUrl"`
}

type InstVbsInstanceState struct {
	// (Updatable) Compartment Identifier. It can only be the root compartment
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Display Name
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
	IdcsAccessToken pulumi.StringPtrInput
	// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
	IsResourceUsageAgreementGranted pulumi.BoolPtrInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecyleDetails pulumi.StringPtrInput
	// Service Instance Name
	Name pulumi.StringPtrInput
	// (Updatable) Compartment where VBS may create additional resources for the service instance
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceCompartmentId pulumi.StringPtrInput
	// The current state of the VbsInstance.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The time the the VbsInstance was created. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringPtrInput
	// The time the VbsInstance was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringPtrInput
	// Public web URL for accessing the VBS service instance
	VbsAccessUrl pulumi.StringPtrInput
}

func (InstVbsInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instVbsInstanceState)(nil)).Elem()
}

type instVbsInstanceArgs struct {
	// (Updatable) Compartment Identifier. It can only be the root compartment
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Display Name
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
	IdcsAccessToken *string `pulumi:"idcsAccessToken"`
	// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
	IsResourceUsageAgreementGranted *bool `pulumi:"isResourceUsageAgreementGranted"`
	// Service Instance Name
	Name *string `pulumi:"name"`
	// (Updatable) Compartment where VBS may create additional resources for the service instance
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceCompartmentId *string `pulumi:"resourceCompartmentId"`
}

// The set of arguments for constructing a InstVbsInstance resource.
type InstVbsInstanceArgs struct {
	// (Updatable) Compartment Identifier. It can only be the root compartment
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Display Name
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
	IdcsAccessToken pulumi.StringPtrInput
	// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
	IsResourceUsageAgreementGranted pulumi.BoolPtrInput
	// Service Instance Name
	Name pulumi.StringPtrInput
	// (Updatable) Compartment where VBS may create additional resources for the service instance
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ResourceCompartmentId pulumi.StringPtrInput
}

func (InstVbsInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instVbsInstanceArgs)(nil)).Elem()
}

type InstVbsInstanceInput interface {
	pulumi.Input

	ToInstVbsInstanceOutput() InstVbsInstanceOutput
	ToInstVbsInstanceOutputWithContext(ctx context.Context) InstVbsInstanceOutput
}

func (*InstVbsInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**InstVbsInstance)(nil)).Elem()
}

func (i *InstVbsInstance) ToInstVbsInstanceOutput() InstVbsInstanceOutput {
	return i.ToInstVbsInstanceOutputWithContext(context.Background())
}

func (i *InstVbsInstance) ToInstVbsInstanceOutputWithContext(ctx context.Context) InstVbsInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstVbsInstanceOutput)
}

func (i *InstVbsInstance) ToOutput(ctx context.Context) pulumix.Output[*InstVbsInstance] {
	return pulumix.Output[*InstVbsInstance]{
		OutputState: i.ToInstVbsInstanceOutputWithContext(ctx).OutputState,
	}
}

// InstVbsInstanceArrayInput is an input type that accepts InstVbsInstanceArray and InstVbsInstanceArrayOutput values.
// You can construct a concrete instance of `InstVbsInstanceArrayInput` via:
//
//	InstVbsInstanceArray{ InstVbsInstanceArgs{...} }
type InstVbsInstanceArrayInput interface {
	pulumi.Input

	ToInstVbsInstanceArrayOutput() InstVbsInstanceArrayOutput
	ToInstVbsInstanceArrayOutputWithContext(context.Context) InstVbsInstanceArrayOutput
}

type InstVbsInstanceArray []InstVbsInstanceInput

func (InstVbsInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstVbsInstance)(nil)).Elem()
}

func (i InstVbsInstanceArray) ToInstVbsInstanceArrayOutput() InstVbsInstanceArrayOutput {
	return i.ToInstVbsInstanceArrayOutputWithContext(context.Background())
}

func (i InstVbsInstanceArray) ToInstVbsInstanceArrayOutputWithContext(ctx context.Context) InstVbsInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstVbsInstanceArrayOutput)
}

func (i InstVbsInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]*InstVbsInstance] {
	return pulumix.Output[[]*InstVbsInstance]{
		OutputState: i.ToInstVbsInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

// InstVbsInstanceMapInput is an input type that accepts InstVbsInstanceMap and InstVbsInstanceMapOutput values.
// You can construct a concrete instance of `InstVbsInstanceMapInput` via:
//
//	InstVbsInstanceMap{ "key": InstVbsInstanceArgs{...} }
type InstVbsInstanceMapInput interface {
	pulumi.Input

	ToInstVbsInstanceMapOutput() InstVbsInstanceMapOutput
	ToInstVbsInstanceMapOutputWithContext(context.Context) InstVbsInstanceMapOutput
}

type InstVbsInstanceMap map[string]InstVbsInstanceInput

func (InstVbsInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstVbsInstance)(nil)).Elem()
}

func (i InstVbsInstanceMap) ToInstVbsInstanceMapOutput() InstVbsInstanceMapOutput {
	return i.ToInstVbsInstanceMapOutputWithContext(context.Background())
}

func (i InstVbsInstanceMap) ToInstVbsInstanceMapOutputWithContext(ctx context.Context) InstVbsInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstVbsInstanceMapOutput)
}

func (i InstVbsInstanceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InstVbsInstance] {
	return pulumix.Output[map[string]*InstVbsInstance]{
		OutputState: i.ToInstVbsInstanceMapOutputWithContext(ctx).OutputState,
	}
}

type InstVbsInstanceOutput struct{ *pulumi.OutputState }

func (InstVbsInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstVbsInstance)(nil)).Elem()
}

func (o InstVbsInstanceOutput) ToInstVbsInstanceOutput() InstVbsInstanceOutput {
	return o
}

func (o InstVbsInstanceOutput) ToInstVbsInstanceOutputWithContext(ctx context.Context) InstVbsInstanceOutput {
	return o
}

func (o InstVbsInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[*InstVbsInstance] {
	return pulumix.Output[*InstVbsInstance]{
		OutputState: o.OutputState,
	}
}

// (Updatable) Compartment Identifier. It can only be the root compartment
func (o InstVbsInstanceOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o InstVbsInstanceOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Display Name
func (o InstVbsInstanceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o InstVbsInstanceOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
func (o InstVbsInstanceOutput) IdcsAccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.IdcsAccessToken }).(pulumi.StringOutput)
}

// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
func (o InstVbsInstanceOutput) IsResourceUsageAgreementGranted() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.BoolOutput { return v.IsResourceUsageAgreementGranted }).(pulumi.BoolOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o InstVbsInstanceOutput) LifecyleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.LifecyleDetails }).(pulumi.StringOutput)
}

// Service Instance Name
func (o InstVbsInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Updatable) Compartment where VBS may create additional resources for the service instance
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o InstVbsInstanceOutput) ResourceCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.ResourceCompartmentId }).(pulumi.StringOutput)
}

// The current state of the VbsInstance.
func (o InstVbsInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o InstVbsInstanceOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the the VbsInstance was created. An RFC3339 formatted datetime string
func (o InstVbsInstanceOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the VbsInstance was updated. An RFC3339 formatted datetime string
func (o InstVbsInstanceOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// Public web URL for accessing the VBS service instance
func (o InstVbsInstanceOutput) VbsAccessUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *InstVbsInstance) pulumi.StringOutput { return v.VbsAccessUrl }).(pulumi.StringOutput)
}

type InstVbsInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstVbsInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstVbsInstance)(nil)).Elem()
}

func (o InstVbsInstanceArrayOutput) ToInstVbsInstanceArrayOutput() InstVbsInstanceArrayOutput {
	return o
}

func (o InstVbsInstanceArrayOutput) ToInstVbsInstanceArrayOutputWithContext(ctx context.Context) InstVbsInstanceArrayOutput {
	return o
}

func (o InstVbsInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InstVbsInstance] {
	return pulumix.Output[[]*InstVbsInstance]{
		OutputState: o.OutputState,
	}
}

func (o InstVbsInstanceArrayOutput) Index(i pulumi.IntInput) InstVbsInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstVbsInstance {
		return vs[0].([]*InstVbsInstance)[vs[1].(int)]
	}).(InstVbsInstanceOutput)
}

type InstVbsInstanceMapOutput struct{ *pulumi.OutputState }

func (InstVbsInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstVbsInstance)(nil)).Elem()
}

func (o InstVbsInstanceMapOutput) ToInstVbsInstanceMapOutput() InstVbsInstanceMapOutput {
	return o
}

func (o InstVbsInstanceMapOutput) ToInstVbsInstanceMapOutputWithContext(ctx context.Context) InstVbsInstanceMapOutput {
	return o
}

func (o InstVbsInstanceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InstVbsInstance] {
	return pulumix.Output[map[string]*InstVbsInstance]{
		OutputState: o.OutputState,
	}
}

func (o InstVbsInstanceMapOutput) MapIndex(k pulumi.StringInput) InstVbsInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstVbsInstance {
		return vs[0].(map[string]*InstVbsInstance)[vs[1].(string)]
	}).(InstVbsInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstVbsInstanceInput)(nil)).Elem(), &InstVbsInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstVbsInstanceArrayInput)(nil)).Elem(), InstVbsInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstVbsInstanceMapInput)(nil)).Elem(), InstVbsInstanceMap{})
	pulumi.RegisterOutputType(InstVbsInstanceOutput{})
	pulumi.RegisterOutputType(InstVbsInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstVbsInstanceMapOutput{})
}
