// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vnmonitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Path Analysi resource in Oracle Cloud Infrastructure Vn Monitoring service.
//
// Use this method to initiate a [Network Path Analyzer](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) analysis. This method returns
// an opc-work-request-id, and you can poll the status of the work request until it either fails or succeeds.
//
// If the work request status is successful, use [ListWorkRequestResults](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestResult/ListWorkRequestResults)
// with the work request ID to ask for the successful analysis results. If the work request status is failed, use
// [ListWorkRequestErrors](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestError/ListWorkRequestErrors)
// with the work request ID to ask for the analysis failure information. The information
// returned from either of these methods can be used to build a final report.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/vnmonitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vnmonitoring.NewPathAnalysi(ctx, "test_path_analysi", &vnmonitoring.PathAnalysiArgs{
//				Type:          pulumi.Any(pathAnalysiType),
//				CacheControl:  pulumi.Any(pathAnalysiCacheControl),
//				CompartmentId: pulumi.Any(compartmentId),
//				DestinationEndpoint: &vnmonitoring.PathAnalysiDestinationEndpointArgs{
//					Type:                  pulumi.Any(pathAnalysiDestinationEndpointType),
//					Address:               pulumi.Any(pathAnalysiDestinationEndpointAddress),
//					InstanceId:            pulumi.Any(testInstance.Id),
//					ListenerId:            pulumi.Any(testListener.Id),
//					LoadBalancerId:        pulumi.Any(testLoadBalancer.Id),
//					NetworkLoadBalancerId: pulumi.Any(testNetworkLoadBalancer.Id),
//					SubnetId:              pulumi.Any(testSubnet.Id),
//					VlanId:                pulumi.Any(testVlan.Id),
//					VnicId:                pulumi.Any(testVnicAttachment.Id),
//				},
//				PathAnalyzerTestId: pulumi.Any(testPathAnalyzerTest.Id),
//				Protocol:           pulumi.Any(pathAnalysiProtocol),
//				ProtocolParameters: &vnmonitoring.PathAnalysiProtocolParametersArgs{
//					Type:            pulumi.Any(pathAnalysiProtocolParametersType),
//					DestinationPort: pulumi.Any(pathAnalysiProtocolParametersDestinationPort),
//					IcmpCode:        pulumi.Any(pathAnalysiProtocolParametersIcmpCode),
//					IcmpType:        pulumi.Any(pathAnalysiProtocolParametersIcmpType),
//					SourcePort:      pulumi.Any(pathAnalysiProtocolParametersSourcePort),
//				},
//				QueryOptions: &vnmonitoring.PathAnalysiQueryOptionsArgs{
//					IsBiDirectionalAnalysis: pulumi.Any(pathAnalysiQueryOptionsIsBiDirectionalAnalysis),
//				},
//				SourceEndpoint: &vnmonitoring.PathAnalysiSourceEndpointArgs{
//					Type:                  pulumi.Any(pathAnalysiSourceEndpointType),
//					Address:               pulumi.Any(pathAnalysiSourceEndpointAddress),
//					InstanceId:            pulumi.Any(testInstance.Id),
//					ListenerId:            pulumi.Any(testListener.Id),
//					LoadBalancerId:        pulumi.Any(testLoadBalancer.Id),
//					NetworkLoadBalancerId: pulumi.Any(testNetworkLoadBalancer.Id),
//					SubnetId:              pulumi.Any(testSubnet.Id),
//					VlanId:                pulumi.Any(testVlan.Id),
//					VnicId:                pulumi.Any(testVnicAttachment.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PathAnalysis can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:VnMonitoring/pathAnalysi:PathAnalysi test_path_analysi "id"
// ```
type PathAnalysi struct {
	pulumi.CustomResourceState

	// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
	CacheControl pulumi.StringOutput `pulumi:"cacheControl"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	DestinationEndpoint PathAnalysiDestinationEndpointOutput `pulumi:"destinationEndpoint"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
	PathAnalyzerTestId pulumi.StringOutput `pulumi:"pathAnalyzerTestId"`
	// The IP protocol to used for the path analysis.
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
	ProtocolParameters PathAnalysiProtocolParametersOutput `pulumi:"protocolParameters"`
	// Defines the query options required for a `PathAnalyzerTest` resource.
	QueryOptions PathAnalysiQueryOptionsOutput `pulumi:"queryOptions"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	SourceEndpoint PathAnalysiSourceEndpointOutput `pulumi:"sourceEndpoint"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPathAnalysi registers a new resource with the given unique name, arguments, and options.
func NewPathAnalysi(ctx *pulumi.Context,
	name string, args *PathAnalysiArgs, opts ...pulumi.ResourceOption) (*PathAnalysi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PathAnalysi
	err := ctx.RegisterResource("oci:VnMonitoring/pathAnalysi:PathAnalysi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPathAnalysi gets an existing PathAnalysi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPathAnalysi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PathAnalysiState, opts ...pulumi.ResourceOption) (*PathAnalysi, error) {
	var resource PathAnalysi
	err := ctx.ReadResource("oci:VnMonitoring/pathAnalysi:PathAnalysi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PathAnalysi resources.
type pathAnalysiState struct {
	// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
	CacheControl *string `pulumi:"cacheControl"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	DestinationEndpoint *PathAnalysiDestinationEndpoint `pulumi:"destinationEndpoint"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
	PathAnalyzerTestId *string `pulumi:"pathAnalyzerTestId"`
	// The IP protocol to used for the path analysis.
	Protocol *int `pulumi:"protocol"`
	// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
	ProtocolParameters *PathAnalysiProtocolParameters `pulumi:"protocolParameters"`
	// Defines the query options required for a `PathAnalyzerTest` resource.
	QueryOptions *PathAnalysiQueryOptions `pulumi:"queryOptions"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	SourceEndpoint *PathAnalysiSourceEndpoint `pulumi:"sourceEndpoint"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type *string `pulumi:"type"`
}

type PathAnalysiState struct {
	// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
	CacheControl pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
	CompartmentId pulumi.StringPtrInput
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	DestinationEndpoint PathAnalysiDestinationEndpointPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
	PathAnalyzerTestId pulumi.StringPtrInput
	// The IP protocol to used for the path analysis.
	Protocol pulumi.IntPtrInput
	// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
	ProtocolParameters PathAnalysiProtocolParametersPtrInput
	// Defines the query options required for a `PathAnalyzerTest` resource.
	QueryOptions PathAnalysiQueryOptionsPtrInput
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	SourceEndpoint PathAnalysiSourceEndpointPtrInput
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringPtrInput
}

func (PathAnalysiState) ElementType() reflect.Type {
	return reflect.TypeOf((*pathAnalysiState)(nil)).Elem()
}

type pathAnalysiArgs struct {
	// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
	CacheControl *string `pulumi:"cacheControl"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	DestinationEndpoint *PathAnalysiDestinationEndpoint `pulumi:"destinationEndpoint"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
	PathAnalyzerTestId *string `pulumi:"pathAnalyzerTestId"`
	// The IP protocol to used for the path analysis.
	Protocol *int `pulumi:"protocol"`
	// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
	ProtocolParameters *PathAnalysiProtocolParameters `pulumi:"protocolParameters"`
	// Defines the query options required for a `PathAnalyzerTest` resource.
	QueryOptions *PathAnalysiQueryOptions `pulumi:"queryOptions"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	SourceEndpoint *PathAnalysiSourceEndpoint `pulumi:"sourceEndpoint"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a PathAnalysi resource.
type PathAnalysiArgs struct {
	// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
	CacheControl pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
	CompartmentId pulumi.StringPtrInput
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	DestinationEndpoint PathAnalysiDestinationEndpointPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
	PathAnalyzerTestId pulumi.StringPtrInput
	// The IP protocol to used for the path analysis.
	Protocol pulumi.IntPtrInput
	// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
	ProtocolParameters PathAnalysiProtocolParametersPtrInput
	// Defines the query options required for a `PathAnalyzerTest` resource.
	QueryOptions PathAnalysiQueryOptionsPtrInput
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	SourceEndpoint PathAnalysiSourceEndpointPtrInput
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringInput
}

func (PathAnalysiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pathAnalysiArgs)(nil)).Elem()
}

type PathAnalysiInput interface {
	pulumi.Input

	ToPathAnalysiOutput() PathAnalysiOutput
	ToPathAnalysiOutputWithContext(ctx context.Context) PathAnalysiOutput
}

func (*PathAnalysi) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysi)(nil)).Elem()
}

func (i *PathAnalysi) ToPathAnalysiOutput() PathAnalysiOutput {
	return i.ToPathAnalysiOutputWithContext(context.Background())
}

func (i *PathAnalysi) ToPathAnalysiOutputWithContext(ctx context.Context) PathAnalysiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiOutput)
}

// PathAnalysiArrayInput is an input type that accepts PathAnalysiArray and PathAnalysiArrayOutput values.
// You can construct a concrete instance of `PathAnalysiArrayInput` via:
//
//	PathAnalysiArray{ PathAnalysiArgs{...} }
type PathAnalysiArrayInput interface {
	pulumi.Input

	ToPathAnalysiArrayOutput() PathAnalysiArrayOutput
	ToPathAnalysiArrayOutputWithContext(context.Context) PathAnalysiArrayOutput
}

type PathAnalysiArray []PathAnalysiInput

func (PathAnalysiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PathAnalysi)(nil)).Elem()
}

func (i PathAnalysiArray) ToPathAnalysiArrayOutput() PathAnalysiArrayOutput {
	return i.ToPathAnalysiArrayOutputWithContext(context.Background())
}

func (i PathAnalysiArray) ToPathAnalysiArrayOutputWithContext(ctx context.Context) PathAnalysiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiArrayOutput)
}

// PathAnalysiMapInput is an input type that accepts PathAnalysiMap and PathAnalysiMapOutput values.
// You can construct a concrete instance of `PathAnalysiMapInput` via:
//
//	PathAnalysiMap{ "key": PathAnalysiArgs{...} }
type PathAnalysiMapInput interface {
	pulumi.Input

	ToPathAnalysiMapOutput() PathAnalysiMapOutput
	ToPathAnalysiMapOutputWithContext(context.Context) PathAnalysiMapOutput
}

type PathAnalysiMap map[string]PathAnalysiInput

func (PathAnalysiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PathAnalysi)(nil)).Elem()
}

func (i PathAnalysiMap) ToPathAnalysiMapOutput() PathAnalysiMapOutput {
	return i.ToPathAnalysiMapOutputWithContext(context.Background())
}

func (i PathAnalysiMap) ToPathAnalysiMapOutputWithContext(ctx context.Context) PathAnalysiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiMapOutput)
}

type PathAnalysiOutput struct{ *pulumi.OutputState }

func (PathAnalysiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysi)(nil)).Elem()
}

func (o PathAnalysiOutput) ToPathAnalysiOutput() PathAnalysiOutput {
	return o
}

func (o PathAnalysiOutput) ToPathAnalysiOutputWithContext(ctx context.Context) PathAnalysiOutput {
	return o
}

// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
func (o PathAnalysiOutput) CacheControl() pulumi.StringOutput {
	return o.ApplyT(func(v *PathAnalysi) pulumi.StringOutput { return v.CacheControl }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
func (o PathAnalysiOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PathAnalysi) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Information describing a source or destination in a `PathAnalyzerTest` resource.
func (o PathAnalysiOutput) DestinationEndpoint() PathAnalysiDestinationEndpointOutput {
	return o.ApplyT(func(v *PathAnalysi) PathAnalysiDestinationEndpointOutput { return v.DestinationEndpoint }).(PathAnalysiDestinationEndpointOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
func (o PathAnalysiOutput) PathAnalyzerTestId() pulumi.StringOutput {
	return o.ApplyT(func(v *PathAnalysi) pulumi.StringOutput { return v.PathAnalyzerTestId }).(pulumi.StringOutput)
}

// The IP protocol to used for the path analysis.
func (o PathAnalysiOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *PathAnalysi) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
func (o PathAnalysiOutput) ProtocolParameters() PathAnalysiProtocolParametersOutput {
	return o.ApplyT(func(v *PathAnalysi) PathAnalysiProtocolParametersOutput { return v.ProtocolParameters }).(PathAnalysiProtocolParametersOutput)
}

// Defines the query options required for a `PathAnalyzerTest` resource.
func (o PathAnalysiOutput) QueryOptions() PathAnalysiQueryOptionsOutput {
	return o.ApplyT(func(v *PathAnalysi) PathAnalysiQueryOptionsOutput { return v.QueryOptions }).(PathAnalysiQueryOptionsOutput)
}

// Information describing a source or destination in a `PathAnalyzerTest` resource.
func (o PathAnalysiOutput) SourceEndpoint() PathAnalysiSourceEndpointOutput {
	return o.ApplyT(func(v *PathAnalysi) PathAnalysiSourceEndpointOutput { return v.SourceEndpoint }).(PathAnalysiSourceEndpointOutput)
}

// The type of the `PathAnalysis` query.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalysiOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PathAnalysi) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type PathAnalysiArrayOutput struct{ *pulumi.OutputState }

func (PathAnalysiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PathAnalysi)(nil)).Elem()
}

func (o PathAnalysiArrayOutput) ToPathAnalysiArrayOutput() PathAnalysiArrayOutput {
	return o
}

func (o PathAnalysiArrayOutput) ToPathAnalysiArrayOutputWithContext(ctx context.Context) PathAnalysiArrayOutput {
	return o
}

func (o PathAnalysiArrayOutput) Index(i pulumi.IntInput) PathAnalysiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PathAnalysi {
		return vs[0].([]*PathAnalysi)[vs[1].(int)]
	}).(PathAnalysiOutput)
}

type PathAnalysiMapOutput struct{ *pulumi.OutputState }

func (PathAnalysiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PathAnalysi)(nil)).Elem()
}

func (o PathAnalysiMapOutput) ToPathAnalysiMapOutput() PathAnalysiMapOutput {
	return o
}

func (o PathAnalysiMapOutput) ToPathAnalysiMapOutputWithContext(ctx context.Context) PathAnalysiMapOutput {
	return o
}

func (o PathAnalysiMapOutput) MapIndex(k pulumi.StringInput) PathAnalysiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PathAnalysi {
		return vs[0].(map[string]*PathAnalysi)[vs[1].(string)]
	}).(PathAnalysiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiInput)(nil)).Elem(), &PathAnalysi{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiArrayInput)(nil)).Elem(), PathAnalysiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiMapInput)(nil)).Elem(), PathAnalysiMap{})
	pulumi.RegisterOutputType(PathAnalysiOutput{})
	pulumi.RegisterOutputType(PathAnalysiArrayOutput{})
	pulumi.RegisterOutputType(PathAnalysiMapOutput{})
}
