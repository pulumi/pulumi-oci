// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vnmonitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetPathAnalyzerTestDestinationEndpoint struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address string `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId string `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId string `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId string `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type string `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId string `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId string `pulumi:"vnicId"`
}

// GetPathAnalyzerTestDestinationEndpointInput is an input type that accepts GetPathAnalyzerTestDestinationEndpointArgs and GetPathAnalyzerTestDestinationEndpointOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestDestinationEndpointInput` via:
//
//	GetPathAnalyzerTestDestinationEndpointArgs{...}
type GetPathAnalyzerTestDestinationEndpointInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestDestinationEndpointOutput() GetPathAnalyzerTestDestinationEndpointOutput
	ToGetPathAnalyzerTestDestinationEndpointOutputWithContext(context.Context) GetPathAnalyzerTestDestinationEndpointOutput
}

type GetPathAnalyzerTestDestinationEndpointArgs struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringInput `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringInput `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State pulumi.StringInput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringInput `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId pulumi.StringInput `pulumi:"vnicId"`
}

func (GetPathAnalyzerTestDestinationEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestDestinationEndpointArgs) ToGetPathAnalyzerTestDestinationEndpointOutput() GetPathAnalyzerTestDestinationEndpointOutput {
	return i.ToGetPathAnalyzerTestDestinationEndpointOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestDestinationEndpointArgs) ToGetPathAnalyzerTestDestinationEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestDestinationEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestDestinationEndpointOutput)
}

// GetPathAnalyzerTestDestinationEndpointArrayInput is an input type that accepts GetPathAnalyzerTestDestinationEndpointArray and GetPathAnalyzerTestDestinationEndpointArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestDestinationEndpointArrayInput` via:
//
//	GetPathAnalyzerTestDestinationEndpointArray{ GetPathAnalyzerTestDestinationEndpointArgs{...} }
type GetPathAnalyzerTestDestinationEndpointArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestDestinationEndpointArrayOutput() GetPathAnalyzerTestDestinationEndpointArrayOutput
	ToGetPathAnalyzerTestDestinationEndpointArrayOutputWithContext(context.Context) GetPathAnalyzerTestDestinationEndpointArrayOutput
}

type GetPathAnalyzerTestDestinationEndpointArray []GetPathAnalyzerTestDestinationEndpointInput

func (GetPathAnalyzerTestDestinationEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestDestinationEndpointArray) ToGetPathAnalyzerTestDestinationEndpointArrayOutput() GetPathAnalyzerTestDestinationEndpointArrayOutput {
	return i.ToGetPathAnalyzerTestDestinationEndpointArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestDestinationEndpointArray) ToGetPathAnalyzerTestDestinationEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestDestinationEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestDestinationEndpointArrayOutput)
}

type GetPathAnalyzerTestDestinationEndpointOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestDestinationEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestDestinationEndpointOutput) ToGetPathAnalyzerTestDestinationEndpointOutput() GetPathAnalyzerTestDestinationEndpointOutput {
	return o
}

func (o GetPathAnalyzerTestDestinationEndpointOutput) ToGetPathAnalyzerTestDestinationEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestDestinationEndpointOutput {
	return o
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o GetPathAnalyzerTestDestinationEndpointOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.Address }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o GetPathAnalyzerTestDestinationEndpointOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o GetPathAnalyzerTestDestinationEndpointOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.ListenerId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o GetPathAnalyzerTestDestinationEndpointOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o GetPathAnalyzerTestDestinationEndpointOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.NetworkLoadBalancerId }).(pulumi.StringOutput)
}

// The current state of the `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestDestinationEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.State }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o GetPathAnalyzerTestDestinationEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of the `Endpoint`.
func (o GetPathAnalyzerTestDestinationEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o GetPathAnalyzerTestDestinationEndpointOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.VlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o GetPathAnalyzerTestDestinationEndpointOutput) VnicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestDestinationEndpoint) string { return v.VnicId }).(pulumi.StringOutput)
}

type GetPathAnalyzerTestDestinationEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestDestinationEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestDestinationEndpointArrayOutput) ToGetPathAnalyzerTestDestinationEndpointArrayOutput() GetPathAnalyzerTestDestinationEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestDestinationEndpointArrayOutput) ToGetPathAnalyzerTestDestinationEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestDestinationEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestDestinationEndpointArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestDestinationEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestDestinationEndpoint {
		return vs[0].([]GetPathAnalyzerTestDestinationEndpoint)[vs[1].(int)]
	}).(GetPathAnalyzerTestDestinationEndpointOutput)
}

type GetPathAnalyzerTestProtocolParameter struct {
	// The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort int `pulumi:"destinationPort"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode int `pulumi:"icmpCode"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType int `pulumi:"icmpType"`
	// The source port to use in a `PathAnalyzerTest` resource.
	SourcePort int `pulumi:"sourcePort"`
	// The type of the `Endpoint`.
	Type string `pulumi:"type"`
}

// GetPathAnalyzerTestProtocolParameterInput is an input type that accepts GetPathAnalyzerTestProtocolParameterArgs and GetPathAnalyzerTestProtocolParameterOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestProtocolParameterInput` via:
//
//	GetPathAnalyzerTestProtocolParameterArgs{...}
type GetPathAnalyzerTestProtocolParameterInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestProtocolParameterOutput() GetPathAnalyzerTestProtocolParameterOutput
	ToGetPathAnalyzerTestProtocolParameterOutputWithContext(context.Context) GetPathAnalyzerTestProtocolParameterOutput
}

type GetPathAnalyzerTestProtocolParameterArgs struct {
	// The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort pulumi.IntInput `pulumi:"destinationPort"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode pulumi.IntInput `pulumi:"icmpCode"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType pulumi.IntInput `pulumi:"icmpType"`
	// The source port to use in a `PathAnalyzerTest` resource.
	SourcePort pulumi.IntInput `pulumi:"sourcePort"`
	// The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPathAnalyzerTestProtocolParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestProtocolParameter)(nil)).Elem()
}

func (i GetPathAnalyzerTestProtocolParameterArgs) ToGetPathAnalyzerTestProtocolParameterOutput() GetPathAnalyzerTestProtocolParameterOutput {
	return i.ToGetPathAnalyzerTestProtocolParameterOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestProtocolParameterArgs) ToGetPathAnalyzerTestProtocolParameterOutputWithContext(ctx context.Context) GetPathAnalyzerTestProtocolParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestProtocolParameterOutput)
}

// GetPathAnalyzerTestProtocolParameterArrayInput is an input type that accepts GetPathAnalyzerTestProtocolParameterArray and GetPathAnalyzerTestProtocolParameterArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestProtocolParameterArrayInput` via:
//
//	GetPathAnalyzerTestProtocolParameterArray{ GetPathAnalyzerTestProtocolParameterArgs{...} }
type GetPathAnalyzerTestProtocolParameterArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestProtocolParameterArrayOutput() GetPathAnalyzerTestProtocolParameterArrayOutput
	ToGetPathAnalyzerTestProtocolParameterArrayOutputWithContext(context.Context) GetPathAnalyzerTestProtocolParameterArrayOutput
}

type GetPathAnalyzerTestProtocolParameterArray []GetPathAnalyzerTestProtocolParameterInput

func (GetPathAnalyzerTestProtocolParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestProtocolParameter)(nil)).Elem()
}

func (i GetPathAnalyzerTestProtocolParameterArray) ToGetPathAnalyzerTestProtocolParameterArrayOutput() GetPathAnalyzerTestProtocolParameterArrayOutput {
	return i.ToGetPathAnalyzerTestProtocolParameterArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestProtocolParameterArray) ToGetPathAnalyzerTestProtocolParameterArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestProtocolParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestProtocolParameterArrayOutput)
}

type GetPathAnalyzerTestProtocolParameterOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestProtocolParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestProtocolParameter)(nil)).Elem()
}

func (o GetPathAnalyzerTestProtocolParameterOutput) ToGetPathAnalyzerTestProtocolParameterOutput() GetPathAnalyzerTestProtocolParameterOutput {
	return o
}

func (o GetPathAnalyzerTestProtocolParameterOutput) ToGetPathAnalyzerTestProtocolParameterOutputWithContext(ctx context.Context) GetPathAnalyzerTestProtocolParameterOutput {
	return o
}

// The destination port to use in a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestProtocolParameterOutput) DestinationPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestProtocolParameter) int { return v.DestinationPort }).(pulumi.IntOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
func (o GetPathAnalyzerTestProtocolParameterOutput) IcmpCode() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestProtocolParameter) int { return v.IcmpCode }).(pulumi.IntOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
func (o GetPathAnalyzerTestProtocolParameterOutput) IcmpType() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestProtocolParameter) int { return v.IcmpType }).(pulumi.IntOutput)
}

// The source port to use in a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestProtocolParameterOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestProtocolParameter) int { return v.SourcePort }).(pulumi.IntOutput)
}

// The type of the `Endpoint`.
func (o GetPathAnalyzerTestProtocolParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestProtocolParameter) string { return v.Type }).(pulumi.StringOutput)
}

type GetPathAnalyzerTestProtocolParameterArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestProtocolParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestProtocolParameter)(nil)).Elem()
}

func (o GetPathAnalyzerTestProtocolParameterArrayOutput) ToGetPathAnalyzerTestProtocolParameterArrayOutput() GetPathAnalyzerTestProtocolParameterArrayOutput {
	return o
}

func (o GetPathAnalyzerTestProtocolParameterArrayOutput) ToGetPathAnalyzerTestProtocolParameterArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestProtocolParameterArrayOutput {
	return o
}

func (o GetPathAnalyzerTestProtocolParameterArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestProtocolParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestProtocolParameter {
		return vs[0].([]GetPathAnalyzerTestProtocolParameter)[vs[1].(int)]
	}).(GetPathAnalyzerTestProtocolParameterOutput)
}

type GetPathAnalyzerTestQueryOption struct {
	// If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis bool `pulumi:"isBiDirectionalAnalysis"`
}

// GetPathAnalyzerTestQueryOptionInput is an input type that accepts GetPathAnalyzerTestQueryOptionArgs and GetPathAnalyzerTestQueryOptionOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestQueryOptionInput` via:
//
//	GetPathAnalyzerTestQueryOptionArgs{...}
type GetPathAnalyzerTestQueryOptionInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestQueryOptionOutput() GetPathAnalyzerTestQueryOptionOutput
	ToGetPathAnalyzerTestQueryOptionOutputWithContext(context.Context) GetPathAnalyzerTestQueryOptionOutput
}

type GetPathAnalyzerTestQueryOptionArgs struct {
	// If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis pulumi.BoolInput `pulumi:"isBiDirectionalAnalysis"`
}

func (GetPathAnalyzerTestQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestQueryOption)(nil)).Elem()
}

func (i GetPathAnalyzerTestQueryOptionArgs) ToGetPathAnalyzerTestQueryOptionOutput() GetPathAnalyzerTestQueryOptionOutput {
	return i.ToGetPathAnalyzerTestQueryOptionOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestQueryOptionArgs) ToGetPathAnalyzerTestQueryOptionOutputWithContext(ctx context.Context) GetPathAnalyzerTestQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestQueryOptionOutput)
}

// GetPathAnalyzerTestQueryOptionArrayInput is an input type that accepts GetPathAnalyzerTestQueryOptionArray and GetPathAnalyzerTestQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestQueryOptionArrayInput` via:
//
//	GetPathAnalyzerTestQueryOptionArray{ GetPathAnalyzerTestQueryOptionArgs{...} }
type GetPathAnalyzerTestQueryOptionArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestQueryOptionArrayOutput() GetPathAnalyzerTestQueryOptionArrayOutput
	ToGetPathAnalyzerTestQueryOptionArrayOutputWithContext(context.Context) GetPathAnalyzerTestQueryOptionArrayOutput
}

type GetPathAnalyzerTestQueryOptionArray []GetPathAnalyzerTestQueryOptionInput

func (GetPathAnalyzerTestQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestQueryOption)(nil)).Elem()
}

func (i GetPathAnalyzerTestQueryOptionArray) ToGetPathAnalyzerTestQueryOptionArrayOutput() GetPathAnalyzerTestQueryOptionArrayOutput {
	return i.ToGetPathAnalyzerTestQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestQueryOptionArray) ToGetPathAnalyzerTestQueryOptionArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestQueryOptionArrayOutput)
}

type GetPathAnalyzerTestQueryOptionOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestQueryOption)(nil)).Elem()
}

func (o GetPathAnalyzerTestQueryOptionOutput) ToGetPathAnalyzerTestQueryOptionOutput() GetPathAnalyzerTestQueryOptionOutput {
	return o
}

func (o GetPathAnalyzerTestQueryOptionOutput) ToGetPathAnalyzerTestQueryOptionOutputWithContext(ctx context.Context) GetPathAnalyzerTestQueryOptionOutput {
	return o
}

// If true, a path analysis is done for both the forward and reverse routes.
func (o GetPathAnalyzerTestQueryOptionOutput) IsBiDirectionalAnalysis() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestQueryOption) bool { return v.IsBiDirectionalAnalysis }).(pulumi.BoolOutput)
}

type GetPathAnalyzerTestQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestQueryOption)(nil)).Elem()
}

func (o GetPathAnalyzerTestQueryOptionArrayOutput) ToGetPathAnalyzerTestQueryOptionArrayOutput() GetPathAnalyzerTestQueryOptionArrayOutput {
	return o
}

func (o GetPathAnalyzerTestQueryOptionArrayOutput) ToGetPathAnalyzerTestQueryOptionArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestQueryOptionArrayOutput {
	return o
}

func (o GetPathAnalyzerTestQueryOptionArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestQueryOption {
		return vs[0].([]GetPathAnalyzerTestQueryOption)[vs[1].(int)]
	}).(GetPathAnalyzerTestQueryOptionOutput)
}

type GetPathAnalyzerTestSourceEndpoint struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address string `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId string `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId string `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId string `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type string `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId string `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId string `pulumi:"vnicId"`
}

// GetPathAnalyzerTestSourceEndpointInput is an input type that accepts GetPathAnalyzerTestSourceEndpointArgs and GetPathAnalyzerTestSourceEndpointOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestSourceEndpointInput` via:
//
//	GetPathAnalyzerTestSourceEndpointArgs{...}
type GetPathAnalyzerTestSourceEndpointInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestSourceEndpointOutput() GetPathAnalyzerTestSourceEndpointOutput
	ToGetPathAnalyzerTestSourceEndpointOutputWithContext(context.Context) GetPathAnalyzerTestSourceEndpointOutput
}

type GetPathAnalyzerTestSourceEndpointArgs struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringInput `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringInput `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State pulumi.StringInput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringInput `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId pulumi.StringInput `pulumi:"vnicId"`
}

func (GetPathAnalyzerTestSourceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestSourceEndpointArgs) ToGetPathAnalyzerTestSourceEndpointOutput() GetPathAnalyzerTestSourceEndpointOutput {
	return i.ToGetPathAnalyzerTestSourceEndpointOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestSourceEndpointArgs) ToGetPathAnalyzerTestSourceEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestSourceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestSourceEndpointOutput)
}

// GetPathAnalyzerTestSourceEndpointArrayInput is an input type that accepts GetPathAnalyzerTestSourceEndpointArray and GetPathAnalyzerTestSourceEndpointArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestSourceEndpointArrayInput` via:
//
//	GetPathAnalyzerTestSourceEndpointArray{ GetPathAnalyzerTestSourceEndpointArgs{...} }
type GetPathAnalyzerTestSourceEndpointArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestSourceEndpointArrayOutput() GetPathAnalyzerTestSourceEndpointArrayOutput
	ToGetPathAnalyzerTestSourceEndpointArrayOutputWithContext(context.Context) GetPathAnalyzerTestSourceEndpointArrayOutput
}

type GetPathAnalyzerTestSourceEndpointArray []GetPathAnalyzerTestSourceEndpointInput

func (GetPathAnalyzerTestSourceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestSourceEndpointArray) ToGetPathAnalyzerTestSourceEndpointArrayOutput() GetPathAnalyzerTestSourceEndpointArrayOutput {
	return i.ToGetPathAnalyzerTestSourceEndpointArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestSourceEndpointArray) ToGetPathAnalyzerTestSourceEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestSourceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestSourceEndpointArrayOutput)
}

type GetPathAnalyzerTestSourceEndpointOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestSourceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestSourceEndpointOutput) ToGetPathAnalyzerTestSourceEndpointOutput() GetPathAnalyzerTestSourceEndpointOutput {
	return o
}

func (o GetPathAnalyzerTestSourceEndpointOutput) ToGetPathAnalyzerTestSourceEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestSourceEndpointOutput {
	return o
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o GetPathAnalyzerTestSourceEndpointOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.Address }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o GetPathAnalyzerTestSourceEndpointOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o GetPathAnalyzerTestSourceEndpointOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.ListenerId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o GetPathAnalyzerTestSourceEndpointOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o GetPathAnalyzerTestSourceEndpointOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.NetworkLoadBalancerId }).(pulumi.StringOutput)
}

// The current state of the `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestSourceEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.State }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o GetPathAnalyzerTestSourceEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of the `Endpoint`.
func (o GetPathAnalyzerTestSourceEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o GetPathAnalyzerTestSourceEndpointOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.VlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o GetPathAnalyzerTestSourceEndpointOutput) VnicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestSourceEndpoint) string { return v.VnicId }).(pulumi.StringOutput)
}

type GetPathAnalyzerTestSourceEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestSourceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestSourceEndpointArrayOutput) ToGetPathAnalyzerTestSourceEndpointArrayOutput() GetPathAnalyzerTestSourceEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestSourceEndpointArrayOutput) ToGetPathAnalyzerTestSourceEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestSourceEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestSourceEndpointArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestSourceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestSourceEndpoint {
		return vs[0].([]GetPathAnalyzerTestSourceEndpoint)[vs[1].(int)]
	}).(GetPathAnalyzerTestSourceEndpointOutput)
}

type GetPathAnalyzerTestsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetPathAnalyzerTestsFilterInput is an input type that accepts GetPathAnalyzerTestsFilterArgs and GetPathAnalyzerTestsFilterOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsFilterInput` via:
//
//	GetPathAnalyzerTestsFilterArgs{...}
type GetPathAnalyzerTestsFilterInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsFilterOutput() GetPathAnalyzerTestsFilterOutput
	ToGetPathAnalyzerTestsFilterOutputWithContext(context.Context) GetPathAnalyzerTestsFilterOutput
}

type GetPathAnalyzerTestsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPathAnalyzerTestsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsFilter)(nil)).Elem()
}

func (i GetPathAnalyzerTestsFilterArgs) ToGetPathAnalyzerTestsFilterOutput() GetPathAnalyzerTestsFilterOutput {
	return i.ToGetPathAnalyzerTestsFilterOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsFilterArgs) ToGetPathAnalyzerTestsFilterOutputWithContext(ctx context.Context) GetPathAnalyzerTestsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsFilterOutput)
}

// GetPathAnalyzerTestsFilterArrayInput is an input type that accepts GetPathAnalyzerTestsFilterArray and GetPathAnalyzerTestsFilterArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsFilterArrayInput` via:
//
//	GetPathAnalyzerTestsFilterArray{ GetPathAnalyzerTestsFilterArgs{...} }
type GetPathAnalyzerTestsFilterArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsFilterArrayOutput() GetPathAnalyzerTestsFilterArrayOutput
	ToGetPathAnalyzerTestsFilterArrayOutputWithContext(context.Context) GetPathAnalyzerTestsFilterArrayOutput
}

type GetPathAnalyzerTestsFilterArray []GetPathAnalyzerTestsFilterInput

func (GetPathAnalyzerTestsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsFilter)(nil)).Elem()
}

func (i GetPathAnalyzerTestsFilterArray) ToGetPathAnalyzerTestsFilterArrayOutput() GetPathAnalyzerTestsFilterArrayOutput {
	return i.ToGetPathAnalyzerTestsFilterArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsFilterArray) ToGetPathAnalyzerTestsFilterArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsFilterArrayOutput)
}

type GetPathAnalyzerTestsFilterOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsFilter)(nil)).Elem()
}

func (o GetPathAnalyzerTestsFilterOutput) ToGetPathAnalyzerTestsFilterOutput() GetPathAnalyzerTestsFilterOutput {
	return o
}

func (o GetPathAnalyzerTestsFilterOutput) ToGetPathAnalyzerTestsFilterOutputWithContext(ctx context.Context) GetPathAnalyzerTestsFilterOutput {
	return o
}

func (o GetPathAnalyzerTestsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPathAnalyzerTestsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetPathAnalyzerTestsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPathAnalyzerTestsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsFilter)(nil)).Elem()
}

func (o GetPathAnalyzerTestsFilterArrayOutput) ToGetPathAnalyzerTestsFilterArrayOutput() GetPathAnalyzerTestsFilterArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsFilterArrayOutput) ToGetPathAnalyzerTestsFilterArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsFilterArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsFilterArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestsFilter {
		return vs[0].([]GetPathAnalyzerTestsFilter)[vs[1].(int)]
	}).(GetPathAnalyzerTestsFilterOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollection struct {
	Items []GetPathAnalyzerTestsPathAnalyzerTestCollectionItem `pulumi:"items"`
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs and GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs{...}
type GetPathAnalyzerTestsPathAnalyzerTestCollectionInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs struct {
	Items GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayInput `pulumi:"items"`
}

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollection)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput)
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionArray and GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionArray{ GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs{...} }
type GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionArray []GetPathAnalyzerTestsPathAnalyzerTestCollectionInput

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollection)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollection)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput) Items() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollection) []GetPathAnalyzerTestsPathAnalyzerTestCollectionItem {
		return v.Items
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollection)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestsPathAnalyzerTestCollection {
		return vs[0].([]GetPathAnalyzerTestsPathAnalyzerTestCollection)[vs[1].(int)]
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItem struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	DestinationEndpoints []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint `pulumi:"destinationEndpoints"`
	// A filter that returns only resources that match the entire display name given.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A unique identifier established when the resource is created. The identifier can't be changed later.
	Id string `pulumi:"id"`
	// The IP protocol to use for the `PathAnalyzerTest` resource.
	Protocol int `pulumi:"protocol"`
	// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
	ProtocolParameters []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter `pulumi:"protocolParameters"`
	// Defines the query options required for a `PathAnalyzerTest` resource.
	QueryOptions []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption `pulumi:"queryOptions"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	SourceEndpoints []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint `pulumi:"sourceEndpoints"`
	// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs{...}
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	DestinationEndpoints GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayInput `pulumi:"destinationEndpoints"`
	// A filter that returns only resources that match the entire display name given.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// A unique identifier established when the resource is created. The identifier can't be changed later.
	Id pulumi.StringInput `pulumi:"id"`
	// The IP protocol to use for the `PathAnalyzerTest` resource.
	Protocol pulumi.IntInput `pulumi:"protocol"`
	// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
	ProtocolParameters GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayInput `pulumi:"protocolParameters"`
	// Defines the query options required for a `PathAnalyzerTest` resource.
	QueryOptions GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayInput `pulumi:"queryOptions"`
	// Information describing a source or destination in a `PathAnalyzerTest` resource.
	SourceEndpoints GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayInput `pulumi:"sourceEndpoints"`
	// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
	State pulumi.StringInput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput `pulumi:"systemTags"`
	// The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItem)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput)
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArray and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArray{ GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs{...} }
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArray []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemInput

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItem)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItem)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) map[string]interface{} {
		return v.DefinedTags
	}).(pulumi.MapOutput)
}

// Information describing a source or destination in a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) DestinationEndpoints() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint {
		return v.DestinationEndpoints
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput)
}

// A filter that returns only resources that match the entire display name given.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) map[string]interface{} {
		return v.FreeformTags
	}).(pulumi.MapOutput)
}

// A unique identifier established when the resource is created. The identifier can't be changed later.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) string { return v.Id }).(pulumi.StringOutput)
}

// The IP protocol to use for the `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) int { return v.Protocol }).(pulumi.IntOutput)
}

// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) ProtocolParameters() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter {
		return v.ProtocolParameters
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput)
}

// Defines the query options required for a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) QueryOptions() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption {
		return v.QueryOptions
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput)
}

// Information describing a source or destination in a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) SourceEndpoints() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint {
		return v.SourceEndpoints
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput)
}

// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItem) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItem)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestsPathAnalyzerTestCollectionItem {
		return vs[0].([]GetPathAnalyzerTestsPathAnalyzerTestCollectionItem)[vs[1].(int)]
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address string `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId string `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId string `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
	State string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId string `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type string `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId string `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId string `pulumi:"vnicId"`
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs{...}
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringInput `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringInput `pulumi:"networkLoadBalancerId"`
	// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
	State pulumi.StringInput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringInput `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId pulumi.StringInput `pulumi:"vnicId"`
}

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput)
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArray and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArray{ GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs{...} }
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArray []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointInput

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput {
	return o
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string { return v.Address }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string {
		return v.InstanceId
	}).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string {
		return v.ListenerId
	}).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string {
		return v.LoadBalancerId
	}).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string {
		return v.NetworkLoadBalancerId
	}).(pulumi.StringOutput)
}

// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string { return v.State }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string {
		return v.SubnetId
	}).(pulumi.StringOutput)
}

// The type of the `Endpoint`.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string { return v.VlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput) VnicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint) string { return v.VnicId }).(pulumi.StringOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint {
		return vs[0].([]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint)[vs[1].(int)]
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter struct {
	// The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort int `pulumi:"destinationPort"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode int `pulumi:"icmpCode"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType int `pulumi:"icmpType"`
	// The source port to use in a `PathAnalyzerTest` resource.
	SourcePort int `pulumi:"sourcePort"`
	// The type of the `Endpoint`.
	Type string `pulumi:"type"`
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs{...}
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs struct {
	// The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort pulumi.IntInput `pulumi:"destinationPort"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode pulumi.IntInput `pulumi:"icmpCode"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType pulumi.IntInput `pulumi:"icmpType"`
	// The source port to use in a `PathAnalyzerTest` resource.
	SourcePort pulumi.IntInput `pulumi:"sourcePort"`
	// The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput)
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArray and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArray{ GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs{...} }
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArray []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterInput

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput {
	return o
}

// The destination port to use in a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) DestinationPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter) int {
		return v.DestinationPort
	}).(pulumi.IntOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) IcmpCode() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter) int { return v.IcmpCode }).(pulumi.IntOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) IcmpType() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter) int { return v.IcmpType }).(pulumi.IntOutput)
}

// The source port to use in a `PathAnalyzerTest` resource.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter) int { return v.SourcePort }).(pulumi.IntOutput)
}

// The type of the `Endpoint`.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter) string { return v.Type }).(pulumi.StringOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter {
		return vs[0].([]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter)[vs[1].(int)]
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption struct {
	// If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis bool `pulumi:"isBiDirectionalAnalysis"`
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs{...}
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs struct {
	// If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis pulumi.BoolInput `pulumi:"isBiDirectionalAnalysis"`
}

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput)
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArray and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArray{ GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs{...} }
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArray []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionInput

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput {
	return o
}

// If true, a path analysis is done for both the forward and reverse routes.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput) IsBiDirectionalAnalysis() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption) bool {
		return v.IsBiDirectionalAnalysis
	}).(pulumi.BoolOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption {
		return vs[0].([]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption)[vs[1].(int)]
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address string `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId string `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId string `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
	State string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId string `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type string `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId string `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId string `pulumi:"vnicId"`
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs{...}
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringInput `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringInput `pulumi:"networkLoadBalancerId"`
	// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
	State pulumi.StringInput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringInput `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId pulumi.StringInput `pulumi:"vnicId"`
}

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput)
}

// GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayInput is an input type that accepts GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArray and GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput values.
// You can construct a concrete instance of `GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayInput` via:
//
//	GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArray{ GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs{...} }
type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayInput interface {
	pulumi.Input

	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput
	ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutputWithContext(context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArray []GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointInput

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint)(nil)).Elem()
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput {
	return i.ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutputWithContext(context.Background())
}

func (i GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArray) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput {
	return o
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.Address }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.ListenerId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string {
		return v.LoadBalancerId
	}).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string {
		return v.NetworkLoadBalancerId
	}).(pulumi.StringOutput)
}

// A filter that returns only resources whose `lifecycleState` matches the given `lifecycleState`.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.State }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of the `Endpoint`.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.VlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput) VnicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint) string { return v.VnicId }).(pulumi.StringOutput)
}

type GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint)(nil)).Elem()
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput() GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput) ToGetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutputWithContext(ctx context.Context) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput {
	return o
}

func (o GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput) Index(i pulumi.IntInput) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint {
		return vs[0].([]GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint)[vs[1].(int)]
	}).(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput)
}

type PathAnalysiDestinationEndpoint struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address *string `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId *string `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId *string `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
	State                 *string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId *string `pulumi:"subnetId"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type string `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId *string `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId *string `pulumi:"vnicId"`
}

// PathAnalysiDestinationEndpointInput is an input type that accepts PathAnalysiDestinationEndpointArgs and PathAnalysiDestinationEndpointOutput values.
// You can construct a concrete instance of `PathAnalysiDestinationEndpointInput` via:
//
//	PathAnalysiDestinationEndpointArgs{...}
type PathAnalysiDestinationEndpointInput interface {
	pulumi.Input

	ToPathAnalysiDestinationEndpointOutput() PathAnalysiDestinationEndpointOutput
	ToPathAnalysiDestinationEndpointOutputWithContext(context.Context) PathAnalysiDestinationEndpointOutput
}

type PathAnalysiDestinationEndpointArgs struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringPtrInput `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringPtrInput `pulumi:"networkLoadBalancerId"`
	State                 pulumi.StringPtrInput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringInput `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringPtrInput `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId pulumi.StringPtrInput `pulumi:"vnicId"`
}

func (PathAnalysiDestinationEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiDestinationEndpoint)(nil)).Elem()
}

func (i PathAnalysiDestinationEndpointArgs) ToPathAnalysiDestinationEndpointOutput() PathAnalysiDestinationEndpointOutput {
	return i.ToPathAnalysiDestinationEndpointOutputWithContext(context.Background())
}

func (i PathAnalysiDestinationEndpointArgs) ToPathAnalysiDestinationEndpointOutputWithContext(ctx context.Context) PathAnalysiDestinationEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiDestinationEndpointOutput)
}

func (i PathAnalysiDestinationEndpointArgs) ToPathAnalysiDestinationEndpointPtrOutput() PathAnalysiDestinationEndpointPtrOutput {
	return i.ToPathAnalysiDestinationEndpointPtrOutputWithContext(context.Background())
}

func (i PathAnalysiDestinationEndpointArgs) ToPathAnalysiDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiDestinationEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiDestinationEndpointOutput).ToPathAnalysiDestinationEndpointPtrOutputWithContext(ctx)
}

// PathAnalysiDestinationEndpointPtrInput is an input type that accepts PathAnalysiDestinationEndpointArgs, PathAnalysiDestinationEndpointPtr and PathAnalysiDestinationEndpointPtrOutput values.
// You can construct a concrete instance of `PathAnalysiDestinationEndpointPtrInput` via:
//
//	        PathAnalysiDestinationEndpointArgs{...}
//
//	or:
//
//	        nil
type PathAnalysiDestinationEndpointPtrInput interface {
	pulumi.Input

	ToPathAnalysiDestinationEndpointPtrOutput() PathAnalysiDestinationEndpointPtrOutput
	ToPathAnalysiDestinationEndpointPtrOutputWithContext(context.Context) PathAnalysiDestinationEndpointPtrOutput
}

type pathAnalysiDestinationEndpointPtrType PathAnalysiDestinationEndpointArgs

func PathAnalysiDestinationEndpointPtr(v *PathAnalysiDestinationEndpointArgs) PathAnalysiDestinationEndpointPtrInput {
	return (*pathAnalysiDestinationEndpointPtrType)(v)
}

func (*pathAnalysiDestinationEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiDestinationEndpoint)(nil)).Elem()
}

func (i *pathAnalysiDestinationEndpointPtrType) ToPathAnalysiDestinationEndpointPtrOutput() PathAnalysiDestinationEndpointPtrOutput {
	return i.ToPathAnalysiDestinationEndpointPtrOutputWithContext(context.Background())
}

func (i *pathAnalysiDestinationEndpointPtrType) ToPathAnalysiDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiDestinationEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiDestinationEndpointPtrOutput)
}

type PathAnalysiDestinationEndpointOutput struct{ *pulumi.OutputState }

func (PathAnalysiDestinationEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiDestinationEndpoint)(nil)).Elem()
}

func (o PathAnalysiDestinationEndpointOutput) ToPathAnalysiDestinationEndpointOutput() PathAnalysiDestinationEndpointOutput {
	return o
}

func (o PathAnalysiDestinationEndpointOutput) ToPathAnalysiDestinationEndpointOutputWithContext(ctx context.Context) PathAnalysiDestinationEndpointOutput {
	return o
}

func (o PathAnalysiDestinationEndpointOutput) ToPathAnalysiDestinationEndpointPtrOutput() PathAnalysiDestinationEndpointPtrOutput {
	return o.ToPathAnalysiDestinationEndpointPtrOutputWithContext(context.Background())
}

func (o PathAnalysiDestinationEndpointOutput) ToPathAnalysiDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiDestinationEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalysiDestinationEndpoint) *PathAnalysiDestinationEndpoint {
		return &v
	}).(PathAnalysiDestinationEndpointPtrOutput)
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalysiDestinationEndpointOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalysiDestinationEndpointOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalysiDestinationEndpointOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalysiDestinationEndpointOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.LoadBalancerId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalysiDestinationEndpointOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.NetworkLoadBalancerId }).(pulumi.StringPtrOutput)
}

func (o PathAnalysiDestinationEndpointOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalysiDestinationEndpointOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The type of the `PathAnalysis` query.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalysiDestinationEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalysiDestinationEndpointOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o PathAnalysiDestinationEndpointOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiDestinationEndpoint) *string { return v.VnicId }).(pulumi.StringPtrOutput)
}

type PathAnalysiDestinationEndpointPtrOutput struct{ *pulumi.OutputState }

func (PathAnalysiDestinationEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiDestinationEndpoint)(nil)).Elem()
}

func (o PathAnalysiDestinationEndpointPtrOutput) ToPathAnalysiDestinationEndpointPtrOutput() PathAnalysiDestinationEndpointPtrOutput {
	return o
}

func (o PathAnalysiDestinationEndpointPtrOutput) ToPathAnalysiDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiDestinationEndpointPtrOutput {
	return o
}

func (o PathAnalysiDestinationEndpointPtrOutput) Elem() PathAnalysiDestinationEndpointOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) PathAnalysiDestinationEndpoint {
		if v != nil {
			return *v
		}
		var ret PathAnalysiDestinationEndpoint
		return ret
	}).(PathAnalysiDestinationEndpointOutput)
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalysiDestinationEndpointPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalysiDestinationEndpointPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalysiDestinationEndpointPtrOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ListenerId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalysiDestinationEndpointPtrOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalysiDestinationEndpointPtrOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.NetworkLoadBalancerId
	}).(pulumi.StringPtrOutput)
}

func (o PathAnalysiDestinationEndpointPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalysiDestinationEndpointPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The type of the `PathAnalysis` query.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalysiDestinationEndpointPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalysiDestinationEndpointPtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o PathAnalysiDestinationEndpointPtrOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VnicId
	}).(pulumi.StringPtrOutput)
}

type PathAnalysiProtocolParameters struct {
	// The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort *int `pulumi:"destinationPort"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode *int `pulumi:"icmpCode"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType *int `pulumi:"icmpType"`
	// The source port to use in a `PathAnalyzerTest` resource.
	SourcePort *int `pulumi:"sourcePort"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type string `pulumi:"type"`
}

// PathAnalysiProtocolParametersInput is an input type that accepts PathAnalysiProtocolParametersArgs and PathAnalysiProtocolParametersOutput values.
// You can construct a concrete instance of `PathAnalysiProtocolParametersInput` via:
//
//	PathAnalysiProtocolParametersArgs{...}
type PathAnalysiProtocolParametersInput interface {
	pulumi.Input

	ToPathAnalysiProtocolParametersOutput() PathAnalysiProtocolParametersOutput
	ToPathAnalysiProtocolParametersOutputWithContext(context.Context) PathAnalysiProtocolParametersOutput
}

type PathAnalysiProtocolParametersArgs struct {
	// The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort pulumi.IntPtrInput `pulumi:"destinationPort"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode pulumi.IntPtrInput `pulumi:"icmpCode"`
	// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType pulumi.IntPtrInput `pulumi:"icmpType"`
	// The source port to use in a `PathAnalyzerTest` resource.
	SourcePort pulumi.IntPtrInput `pulumi:"sourcePort"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringInput `pulumi:"type"`
}

func (PathAnalysiProtocolParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiProtocolParameters)(nil)).Elem()
}

func (i PathAnalysiProtocolParametersArgs) ToPathAnalysiProtocolParametersOutput() PathAnalysiProtocolParametersOutput {
	return i.ToPathAnalysiProtocolParametersOutputWithContext(context.Background())
}

func (i PathAnalysiProtocolParametersArgs) ToPathAnalysiProtocolParametersOutputWithContext(ctx context.Context) PathAnalysiProtocolParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiProtocolParametersOutput)
}

func (i PathAnalysiProtocolParametersArgs) ToPathAnalysiProtocolParametersPtrOutput() PathAnalysiProtocolParametersPtrOutput {
	return i.ToPathAnalysiProtocolParametersPtrOutputWithContext(context.Background())
}

func (i PathAnalysiProtocolParametersArgs) ToPathAnalysiProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalysiProtocolParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiProtocolParametersOutput).ToPathAnalysiProtocolParametersPtrOutputWithContext(ctx)
}

// PathAnalysiProtocolParametersPtrInput is an input type that accepts PathAnalysiProtocolParametersArgs, PathAnalysiProtocolParametersPtr and PathAnalysiProtocolParametersPtrOutput values.
// You can construct a concrete instance of `PathAnalysiProtocolParametersPtrInput` via:
//
//	        PathAnalysiProtocolParametersArgs{...}
//
//	or:
//
//	        nil
type PathAnalysiProtocolParametersPtrInput interface {
	pulumi.Input

	ToPathAnalysiProtocolParametersPtrOutput() PathAnalysiProtocolParametersPtrOutput
	ToPathAnalysiProtocolParametersPtrOutputWithContext(context.Context) PathAnalysiProtocolParametersPtrOutput
}

type pathAnalysiProtocolParametersPtrType PathAnalysiProtocolParametersArgs

func PathAnalysiProtocolParametersPtr(v *PathAnalysiProtocolParametersArgs) PathAnalysiProtocolParametersPtrInput {
	return (*pathAnalysiProtocolParametersPtrType)(v)
}

func (*pathAnalysiProtocolParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiProtocolParameters)(nil)).Elem()
}

func (i *pathAnalysiProtocolParametersPtrType) ToPathAnalysiProtocolParametersPtrOutput() PathAnalysiProtocolParametersPtrOutput {
	return i.ToPathAnalysiProtocolParametersPtrOutputWithContext(context.Background())
}

func (i *pathAnalysiProtocolParametersPtrType) ToPathAnalysiProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalysiProtocolParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiProtocolParametersPtrOutput)
}

type PathAnalysiProtocolParametersOutput struct{ *pulumi.OutputState }

func (PathAnalysiProtocolParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiProtocolParameters)(nil)).Elem()
}

func (o PathAnalysiProtocolParametersOutput) ToPathAnalysiProtocolParametersOutput() PathAnalysiProtocolParametersOutput {
	return o
}

func (o PathAnalysiProtocolParametersOutput) ToPathAnalysiProtocolParametersOutputWithContext(ctx context.Context) PathAnalysiProtocolParametersOutput {
	return o
}

func (o PathAnalysiProtocolParametersOutput) ToPathAnalysiProtocolParametersPtrOutput() PathAnalysiProtocolParametersPtrOutput {
	return o.ToPathAnalysiProtocolParametersPtrOutputWithContext(context.Background())
}

func (o PathAnalysiProtocolParametersOutput) ToPathAnalysiProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalysiProtocolParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalysiProtocolParameters) *PathAnalysiProtocolParameters {
		return &v
	}).(PathAnalysiProtocolParametersPtrOutput)
}

// The destination port to use in a `PathAnalyzerTest` resource.
func (o PathAnalysiProtocolParametersOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalysiProtocolParameters) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
func (o PathAnalysiProtocolParametersOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalysiProtocolParameters) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
func (o PathAnalysiProtocolParametersOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalysiProtocolParameters) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

// The source port to use in a `PathAnalyzerTest` resource.
func (o PathAnalysiProtocolParametersOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalysiProtocolParameters) *int { return v.SourcePort }).(pulumi.IntPtrOutput)
}

// The type of the `PathAnalysis` query.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalysiProtocolParametersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PathAnalysiProtocolParameters) string { return v.Type }).(pulumi.StringOutput)
}

type PathAnalysiProtocolParametersPtrOutput struct{ *pulumi.OutputState }

func (PathAnalysiProtocolParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiProtocolParameters)(nil)).Elem()
}

func (o PathAnalysiProtocolParametersPtrOutput) ToPathAnalysiProtocolParametersPtrOutput() PathAnalysiProtocolParametersPtrOutput {
	return o
}

func (o PathAnalysiProtocolParametersPtrOutput) ToPathAnalysiProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalysiProtocolParametersPtrOutput {
	return o
}

func (o PathAnalysiProtocolParametersPtrOutput) Elem() PathAnalysiProtocolParametersOutput {
	return o.ApplyT(func(v *PathAnalysiProtocolParameters) PathAnalysiProtocolParameters {
		if v != nil {
			return *v
		}
		var ret PathAnalysiProtocolParameters
		return ret
	}).(PathAnalysiProtocolParametersOutput)
}

// The destination port to use in a `PathAnalyzerTest` resource.
func (o PathAnalysiProtocolParametersPtrOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalysiProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.DestinationPort
	}).(pulumi.IntPtrOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
func (o PathAnalysiProtocolParametersPtrOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalysiProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.IcmpCode
	}).(pulumi.IntPtrOutput)
}

// The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
func (o PathAnalysiProtocolParametersPtrOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalysiProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.IcmpType
	}).(pulumi.IntPtrOutput)
}

// The source port to use in a `PathAnalyzerTest` resource.
func (o PathAnalysiProtocolParametersPtrOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalysiProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.SourcePort
	}).(pulumi.IntPtrOutput)
}

// The type of the `PathAnalysis` query.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalysiProtocolParametersPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiProtocolParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PathAnalysiQueryOptions struct {
	// If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis *bool `pulumi:"isBiDirectionalAnalysis"`
}

// PathAnalysiQueryOptionsInput is an input type that accepts PathAnalysiQueryOptionsArgs and PathAnalysiQueryOptionsOutput values.
// You can construct a concrete instance of `PathAnalysiQueryOptionsInput` via:
//
//	PathAnalysiQueryOptionsArgs{...}
type PathAnalysiQueryOptionsInput interface {
	pulumi.Input

	ToPathAnalysiQueryOptionsOutput() PathAnalysiQueryOptionsOutput
	ToPathAnalysiQueryOptionsOutputWithContext(context.Context) PathAnalysiQueryOptionsOutput
}

type PathAnalysiQueryOptionsArgs struct {
	// If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis pulumi.BoolPtrInput `pulumi:"isBiDirectionalAnalysis"`
}

func (PathAnalysiQueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiQueryOptions)(nil)).Elem()
}

func (i PathAnalysiQueryOptionsArgs) ToPathAnalysiQueryOptionsOutput() PathAnalysiQueryOptionsOutput {
	return i.ToPathAnalysiQueryOptionsOutputWithContext(context.Background())
}

func (i PathAnalysiQueryOptionsArgs) ToPathAnalysiQueryOptionsOutputWithContext(ctx context.Context) PathAnalysiQueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiQueryOptionsOutput)
}

func (i PathAnalysiQueryOptionsArgs) ToPathAnalysiQueryOptionsPtrOutput() PathAnalysiQueryOptionsPtrOutput {
	return i.ToPathAnalysiQueryOptionsPtrOutputWithContext(context.Background())
}

func (i PathAnalysiQueryOptionsArgs) ToPathAnalysiQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalysiQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiQueryOptionsOutput).ToPathAnalysiQueryOptionsPtrOutputWithContext(ctx)
}

// PathAnalysiQueryOptionsPtrInput is an input type that accepts PathAnalysiQueryOptionsArgs, PathAnalysiQueryOptionsPtr and PathAnalysiQueryOptionsPtrOutput values.
// You can construct a concrete instance of `PathAnalysiQueryOptionsPtrInput` via:
//
//	        PathAnalysiQueryOptionsArgs{...}
//
//	or:
//
//	        nil
type PathAnalysiQueryOptionsPtrInput interface {
	pulumi.Input

	ToPathAnalysiQueryOptionsPtrOutput() PathAnalysiQueryOptionsPtrOutput
	ToPathAnalysiQueryOptionsPtrOutputWithContext(context.Context) PathAnalysiQueryOptionsPtrOutput
}

type pathAnalysiQueryOptionsPtrType PathAnalysiQueryOptionsArgs

func PathAnalysiQueryOptionsPtr(v *PathAnalysiQueryOptionsArgs) PathAnalysiQueryOptionsPtrInput {
	return (*pathAnalysiQueryOptionsPtrType)(v)
}

func (*pathAnalysiQueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiQueryOptions)(nil)).Elem()
}

func (i *pathAnalysiQueryOptionsPtrType) ToPathAnalysiQueryOptionsPtrOutput() PathAnalysiQueryOptionsPtrOutput {
	return i.ToPathAnalysiQueryOptionsPtrOutputWithContext(context.Background())
}

func (i *pathAnalysiQueryOptionsPtrType) ToPathAnalysiQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalysiQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiQueryOptionsPtrOutput)
}

type PathAnalysiQueryOptionsOutput struct{ *pulumi.OutputState }

func (PathAnalysiQueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiQueryOptions)(nil)).Elem()
}

func (o PathAnalysiQueryOptionsOutput) ToPathAnalysiQueryOptionsOutput() PathAnalysiQueryOptionsOutput {
	return o
}

func (o PathAnalysiQueryOptionsOutput) ToPathAnalysiQueryOptionsOutputWithContext(ctx context.Context) PathAnalysiQueryOptionsOutput {
	return o
}

func (o PathAnalysiQueryOptionsOutput) ToPathAnalysiQueryOptionsPtrOutput() PathAnalysiQueryOptionsPtrOutput {
	return o.ToPathAnalysiQueryOptionsPtrOutputWithContext(context.Background())
}

func (o PathAnalysiQueryOptionsOutput) ToPathAnalysiQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalysiQueryOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalysiQueryOptions) *PathAnalysiQueryOptions {
		return &v
	}).(PathAnalysiQueryOptionsPtrOutput)
}

// If true, a path analysis is done for both the forward and reverse routes.
func (o PathAnalysiQueryOptionsOutput) IsBiDirectionalAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PathAnalysiQueryOptions) *bool { return v.IsBiDirectionalAnalysis }).(pulumi.BoolPtrOutput)
}

type PathAnalysiQueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (PathAnalysiQueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiQueryOptions)(nil)).Elem()
}

func (o PathAnalysiQueryOptionsPtrOutput) ToPathAnalysiQueryOptionsPtrOutput() PathAnalysiQueryOptionsPtrOutput {
	return o
}

func (o PathAnalysiQueryOptionsPtrOutput) ToPathAnalysiQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalysiQueryOptionsPtrOutput {
	return o
}

func (o PathAnalysiQueryOptionsPtrOutput) Elem() PathAnalysiQueryOptionsOutput {
	return o.ApplyT(func(v *PathAnalysiQueryOptions) PathAnalysiQueryOptions {
		if v != nil {
			return *v
		}
		var ret PathAnalysiQueryOptions
		return ret
	}).(PathAnalysiQueryOptionsOutput)
}

// If true, a path analysis is done for both the forward and reverse routes.
func (o PathAnalysiQueryOptionsPtrOutput) IsBiDirectionalAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PathAnalysiQueryOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IsBiDirectionalAnalysis
	}).(pulumi.BoolPtrOutput)
}

type PathAnalysiSourceEndpoint struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address *string `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId *string `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId *string `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
	State                 *string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId *string `pulumi:"subnetId"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type string `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId *string `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId *string `pulumi:"vnicId"`
}

// PathAnalysiSourceEndpointInput is an input type that accepts PathAnalysiSourceEndpointArgs and PathAnalysiSourceEndpointOutput values.
// You can construct a concrete instance of `PathAnalysiSourceEndpointInput` via:
//
//	PathAnalysiSourceEndpointArgs{...}
type PathAnalysiSourceEndpointInput interface {
	pulumi.Input

	ToPathAnalysiSourceEndpointOutput() PathAnalysiSourceEndpointOutput
	ToPathAnalysiSourceEndpointOutputWithContext(context.Context) PathAnalysiSourceEndpointOutput
}

type PathAnalysiSourceEndpointArgs struct {
	// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringPtrInput `pulumi:"loadBalancerId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringPtrInput `pulumi:"networkLoadBalancerId"`
	State                 pulumi.StringPtrInput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The type of the `PathAnalysis` query.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringInput `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringPtrInput `pulumi:"vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	VnicId pulumi.StringPtrInput `pulumi:"vnicId"`
}

func (PathAnalysiSourceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiSourceEndpoint)(nil)).Elem()
}

func (i PathAnalysiSourceEndpointArgs) ToPathAnalysiSourceEndpointOutput() PathAnalysiSourceEndpointOutput {
	return i.ToPathAnalysiSourceEndpointOutputWithContext(context.Background())
}

func (i PathAnalysiSourceEndpointArgs) ToPathAnalysiSourceEndpointOutputWithContext(ctx context.Context) PathAnalysiSourceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiSourceEndpointOutput)
}

func (i PathAnalysiSourceEndpointArgs) ToPathAnalysiSourceEndpointPtrOutput() PathAnalysiSourceEndpointPtrOutput {
	return i.ToPathAnalysiSourceEndpointPtrOutputWithContext(context.Background())
}

func (i PathAnalysiSourceEndpointArgs) ToPathAnalysiSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiSourceEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiSourceEndpointOutput).ToPathAnalysiSourceEndpointPtrOutputWithContext(ctx)
}

// PathAnalysiSourceEndpointPtrInput is an input type that accepts PathAnalysiSourceEndpointArgs, PathAnalysiSourceEndpointPtr and PathAnalysiSourceEndpointPtrOutput values.
// You can construct a concrete instance of `PathAnalysiSourceEndpointPtrInput` via:
//
//	        PathAnalysiSourceEndpointArgs{...}
//
//	or:
//
//	        nil
type PathAnalysiSourceEndpointPtrInput interface {
	pulumi.Input

	ToPathAnalysiSourceEndpointPtrOutput() PathAnalysiSourceEndpointPtrOutput
	ToPathAnalysiSourceEndpointPtrOutputWithContext(context.Context) PathAnalysiSourceEndpointPtrOutput
}

type pathAnalysiSourceEndpointPtrType PathAnalysiSourceEndpointArgs

func PathAnalysiSourceEndpointPtr(v *PathAnalysiSourceEndpointArgs) PathAnalysiSourceEndpointPtrInput {
	return (*pathAnalysiSourceEndpointPtrType)(v)
}

func (*pathAnalysiSourceEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiSourceEndpoint)(nil)).Elem()
}

func (i *pathAnalysiSourceEndpointPtrType) ToPathAnalysiSourceEndpointPtrOutput() PathAnalysiSourceEndpointPtrOutput {
	return i.ToPathAnalysiSourceEndpointPtrOutputWithContext(context.Background())
}

func (i *pathAnalysiSourceEndpointPtrType) ToPathAnalysiSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiSourceEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalysiSourceEndpointPtrOutput)
}

type PathAnalysiSourceEndpointOutput struct{ *pulumi.OutputState }

func (PathAnalysiSourceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalysiSourceEndpoint)(nil)).Elem()
}

func (o PathAnalysiSourceEndpointOutput) ToPathAnalysiSourceEndpointOutput() PathAnalysiSourceEndpointOutput {
	return o
}

func (o PathAnalysiSourceEndpointOutput) ToPathAnalysiSourceEndpointOutputWithContext(ctx context.Context) PathAnalysiSourceEndpointOutput {
	return o
}

func (o PathAnalysiSourceEndpointOutput) ToPathAnalysiSourceEndpointPtrOutput() PathAnalysiSourceEndpointPtrOutput {
	return o.ToPathAnalysiSourceEndpointPtrOutputWithContext(context.Background())
}

func (o PathAnalysiSourceEndpointOutput) ToPathAnalysiSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiSourceEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalysiSourceEndpoint) *PathAnalysiSourceEndpoint {
		return &v
	}).(PathAnalysiSourceEndpointPtrOutput)
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalysiSourceEndpointOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalysiSourceEndpointOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalysiSourceEndpointOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalysiSourceEndpointOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.LoadBalancerId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalysiSourceEndpointOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.NetworkLoadBalancerId }).(pulumi.StringPtrOutput)
}

func (o PathAnalysiSourceEndpointOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalysiSourceEndpointOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The type of the `PathAnalysis` query.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalysiSourceEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalysiSourceEndpointOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o PathAnalysiSourceEndpointOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalysiSourceEndpoint) *string { return v.VnicId }).(pulumi.StringPtrOutput)
}

type PathAnalysiSourceEndpointPtrOutput struct{ *pulumi.OutputState }

func (PathAnalysiSourceEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalysiSourceEndpoint)(nil)).Elem()
}

func (o PathAnalysiSourceEndpointPtrOutput) ToPathAnalysiSourceEndpointPtrOutput() PathAnalysiSourceEndpointPtrOutput {
	return o
}

func (o PathAnalysiSourceEndpointPtrOutput) ToPathAnalysiSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalysiSourceEndpointPtrOutput {
	return o
}

func (o PathAnalysiSourceEndpointPtrOutput) Elem() PathAnalysiSourceEndpointOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) PathAnalysiSourceEndpoint {
		if v != nil {
			return *v
		}
		var ret PathAnalysiSourceEndpoint
		return ret
	}).(PathAnalysiSourceEndpointOutput)
}

// The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalysiSourceEndpointPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalysiSourceEndpointPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalysiSourceEndpointPtrOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ListenerId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalysiSourceEndpointPtrOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalysiSourceEndpointPtrOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.NetworkLoadBalancerId
	}).(pulumi.StringPtrOutput)
}

func (o PathAnalysiSourceEndpointPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalysiSourceEndpointPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The type of the `PathAnalysis` query.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalysiSourceEndpointPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalysiSourceEndpointPtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
func (o PathAnalysiSourceEndpointPtrOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalysiSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VnicId
	}).(pulumi.StringPtrOutput)
}

type PathAnalyzerTestDestinationEndpoint struct {
	// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address *string `pulumi:"address"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId *string `pulumi:"instanceId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId *string `pulumi:"listenerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State *string `pulumi:"state"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId *string `pulumi:"subnetId"`
	// (Updatable) The type of the `Endpoint`.
	Type string `pulumi:"type"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId *string `pulumi:"vlanId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VnicId *string `pulumi:"vnicId"`
}

// PathAnalyzerTestDestinationEndpointInput is an input type that accepts PathAnalyzerTestDestinationEndpointArgs and PathAnalyzerTestDestinationEndpointOutput values.
// You can construct a concrete instance of `PathAnalyzerTestDestinationEndpointInput` via:
//
//	PathAnalyzerTestDestinationEndpointArgs{...}
type PathAnalyzerTestDestinationEndpointInput interface {
	pulumi.Input

	ToPathAnalyzerTestDestinationEndpointOutput() PathAnalyzerTestDestinationEndpointOutput
	ToPathAnalyzerTestDestinationEndpointOutputWithContext(context.Context) PathAnalyzerTestDestinationEndpointOutput
}

type PathAnalyzerTestDestinationEndpointArgs struct {
	// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringPtrInput `pulumi:"loadBalancerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringPtrInput `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State pulumi.StringPtrInput `pulumi:"state"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// (Updatable) The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringPtrInput `pulumi:"vlanId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VnicId pulumi.StringPtrInput `pulumi:"vnicId"`
}

func (PathAnalyzerTestDestinationEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (i PathAnalyzerTestDestinationEndpointArgs) ToPathAnalyzerTestDestinationEndpointOutput() PathAnalyzerTestDestinationEndpointOutput {
	return i.ToPathAnalyzerTestDestinationEndpointOutputWithContext(context.Background())
}

func (i PathAnalyzerTestDestinationEndpointArgs) ToPathAnalyzerTestDestinationEndpointOutputWithContext(ctx context.Context) PathAnalyzerTestDestinationEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestDestinationEndpointOutput)
}

func (i PathAnalyzerTestDestinationEndpointArgs) ToPathAnalyzerTestDestinationEndpointPtrOutput() PathAnalyzerTestDestinationEndpointPtrOutput {
	return i.ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(context.Background())
}

func (i PathAnalyzerTestDestinationEndpointArgs) ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestDestinationEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestDestinationEndpointOutput).ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(ctx)
}

// PathAnalyzerTestDestinationEndpointPtrInput is an input type that accepts PathAnalyzerTestDestinationEndpointArgs, PathAnalyzerTestDestinationEndpointPtr and PathAnalyzerTestDestinationEndpointPtrOutput values.
// You can construct a concrete instance of `PathAnalyzerTestDestinationEndpointPtrInput` via:
//
//	        PathAnalyzerTestDestinationEndpointArgs{...}
//
//	or:
//
//	        nil
type PathAnalyzerTestDestinationEndpointPtrInput interface {
	pulumi.Input

	ToPathAnalyzerTestDestinationEndpointPtrOutput() PathAnalyzerTestDestinationEndpointPtrOutput
	ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(context.Context) PathAnalyzerTestDestinationEndpointPtrOutput
}

type pathAnalyzerTestDestinationEndpointPtrType PathAnalyzerTestDestinationEndpointArgs

func PathAnalyzerTestDestinationEndpointPtr(v *PathAnalyzerTestDestinationEndpointArgs) PathAnalyzerTestDestinationEndpointPtrInput {
	return (*pathAnalyzerTestDestinationEndpointPtrType)(v)
}

func (*pathAnalyzerTestDestinationEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (i *pathAnalyzerTestDestinationEndpointPtrType) ToPathAnalyzerTestDestinationEndpointPtrOutput() PathAnalyzerTestDestinationEndpointPtrOutput {
	return i.ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(context.Background())
}

func (i *pathAnalyzerTestDestinationEndpointPtrType) ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestDestinationEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestDestinationEndpointPtrOutput)
}

type PathAnalyzerTestDestinationEndpointOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestDestinationEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (o PathAnalyzerTestDestinationEndpointOutput) ToPathAnalyzerTestDestinationEndpointOutput() PathAnalyzerTestDestinationEndpointOutput {
	return o
}

func (o PathAnalyzerTestDestinationEndpointOutput) ToPathAnalyzerTestDestinationEndpointOutputWithContext(ctx context.Context) PathAnalyzerTestDestinationEndpointOutput {
	return o
}

func (o PathAnalyzerTestDestinationEndpointOutput) ToPathAnalyzerTestDestinationEndpointPtrOutput() PathAnalyzerTestDestinationEndpointPtrOutput {
	return o.ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(context.Background())
}

func (o PathAnalyzerTestDestinationEndpointOutput) ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestDestinationEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalyzerTestDestinationEndpoint) *PathAnalyzerTestDestinationEndpoint {
		return &v
	}).(PathAnalyzerTestDestinationEndpointPtrOutput)
}

// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalyzerTestDestinationEndpointOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalyzerTestDestinationEndpointOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalyzerTestDestinationEndpointOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalyzerTestDestinationEndpointOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.LoadBalancerId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalyzerTestDestinationEndpointOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.NetworkLoadBalancerId }).(pulumi.StringPtrOutput)
}

// The current state of the `PathAnalyzerTest` resource.
func (o PathAnalyzerTestDestinationEndpointOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.State }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalyzerTestDestinationEndpointOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// (Updatable) The type of the `Endpoint`.
func (o PathAnalyzerTestDestinationEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalyzerTestDestinationEndpointOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalyzerTestDestinationEndpointOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestDestinationEndpoint) *string { return v.VnicId }).(pulumi.StringPtrOutput)
}

type PathAnalyzerTestDestinationEndpointPtrOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestDestinationEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestDestinationEndpoint)(nil)).Elem()
}

func (o PathAnalyzerTestDestinationEndpointPtrOutput) ToPathAnalyzerTestDestinationEndpointPtrOutput() PathAnalyzerTestDestinationEndpointPtrOutput {
	return o
}

func (o PathAnalyzerTestDestinationEndpointPtrOutput) ToPathAnalyzerTestDestinationEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestDestinationEndpointPtrOutput {
	return o
}

func (o PathAnalyzerTestDestinationEndpointPtrOutput) Elem() PathAnalyzerTestDestinationEndpointOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) PathAnalyzerTestDestinationEndpoint {
		if v != nil {
			return *v
		}
		var ret PathAnalyzerTestDestinationEndpoint
		return ret
	}).(PathAnalyzerTestDestinationEndpointOutput)
}

// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalyzerTestDestinationEndpointPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalyzerTestDestinationEndpointPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalyzerTestDestinationEndpointPtrOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ListenerId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalyzerTestDestinationEndpointPtrOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalyzerTestDestinationEndpointPtrOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.NetworkLoadBalancerId
	}).(pulumi.StringPtrOutput)
}

// The current state of the `PathAnalyzerTest` resource.
func (o PathAnalyzerTestDestinationEndpointPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalyzerTestDestinationEndpointPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The type of the `Endpoint`.
func (o PathAnalyzerTestDestinationEndpointPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalyzerTestDestinationEndpointPtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalyzerTestDestinationEndpointPtrOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestDestinationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VnicId
	}).(pulumi.StringPtrOutput)
}

type PathAnalyzerTestProtocolParameters struct {
	// (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort *int `pulumi:"destinationPort"`
	// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode *int `pulumi:"icmpCode"`
	// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType *int `pulumi:"icmpType"`
	// (Updatable) The source port to use in a `PathAnalyzerTest` resource.
	SourcePort *int `pulumi:"sourcePort"`
	// (Updatable) The type of the `Endpoint`.
	Type string `pulumi:"type"`
}

// PathAnalyzerTestProtocolParametersInput is an input type that accepts PathAnalyzerTestProtocolParametersArgs and PathAnalyzerTestProtocolParametersOutput values.
// You can construct a concrete instance of `PathAnalyzerTestProtocolParametersInput` via:
//
//	PathAnalyzerTestProtocolParametersArgs{...}
type PathAnalyzerTestProtocolParametersInput interface {
	pulumi.Input

	ToPathAnalyzerTestProtocolParametersOutput() PathAnalyzerTestProtocolParametersOutput
	ToPathAnalyzerTestProtocolParametersOutputWithContext(context.Context) PathAnalyzerTestProtocolParametersOutput
}

type PathAnalyzerTestProtocolParametersArgs struct {
	// (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
	DestinationPort pulumi.IntPtrInput `pulumi:"destinationPort"`
	// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
	IcmpCode pulumi.IntPtrInput `pulumi:"icmpCode"`
	// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
	IcmpType pulumi.IntPtrInput `pulumi:"icmpType"`
	// (Updatable) The source port to use in a `PathAnalyzerTest` resource.
	SourcePort pulumi.IntPtrInput `pulumi:"sourcePort"`
	// (Updatable) The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PathAnalyzerTestProtocolParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestProtocolParameters)(nil)).Elem()
}

func (i PathAnalyzerTestProtocolParametersArgs) ToPathAnalyzerTestProtocolParametersOutput() PathAnalyzerTestProtocolParametersOutput {
	return i.ToPathAnalyzerTestProtocolParametersOutputWithContext(context.Background())
}

func (i PathAnalyzerTestProtocolParametersArgs) ToPathAnalyzerTestProtocolParametersOutputWithContext(ctx context.Context) PathAnalyzerTestProtocolParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestProtocolParametersOutput)
}

func (i PathAnalyzerTestProtocolParametersArgs) ToPathAnalyzerTestProtocolParametersPtrOutput() PathAnalyzerTestProtocolParametersPtrOutput {
	return i.ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(context.Background())
}

func (i PathAnalyzerTestProtocolParametersArgs) ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalyzerTestProtocolParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestProtocolParametersOutput).ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(ctx)
}

// PathAnalyzerTestProtocolParametersPtrInput is an input type that accepts PathAnalyzerTestProtocolParametersArgs, PathAnalyzerTestProtocolParametersPtr and PathAnalyzerTestProtocolParametersPtrOutput values.
// You can construct a concrete instance of `PathAnalyzerTestProtocolParametersPtrInput` via:
//
//	        PathAnalyzerTestProtocolParametersArgs{...}
//
//	or:
//
//	        nil
type PathAnalyzerTestProtocolParametersPtrInput interface {
	pulumi.Input

	ToPathAnalyzerTestProtocolParametersPtrOutput() PathAnalyzerTestProtocolParametersPtrOutput
	ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(context.Context) PathAnalyzerTestProtocolParametersPtrOutput
}

type pathAnalyzerTestProtocolParametersPtrType PathAnalyzerTestProtocolParametersArgs

func PathAnalyzerTestProtocolParametersPtr(v *PathAnalyzerTestProtocolParametersArgs) PathAnalyzerTestProtocolParametersPtrInput {
	return (*pathAnalyzerTestProtocolParametersPtrType)(v)
}

func (*pathAnalyzerTestProtocolParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestProtocolParameters)(nil)).Elem()
}

func (i *pathAnalyzerTestProtocolParametersPtrType) ToPathAnalyzerTestProtocolParametersPtrOutput() PathAnalyzerTestProtocolParametersPtrOutput {
	return i.ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(context.Background())
}

func (i *pathAnalyzerTestProtocolParametersPtrType) ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalyzerTestProtocolParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestProtocolParametersPtrOutput)
}

type PathAnalyzerTestProtocolParametersOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestProtocolParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestProtocolParameters)(nil)).Elem()
}

func (o PathAnalyzerTestProtocolParametersOutput) ToPathAnalyzerTestProtocolParametersOutput() PathAnalyzerTestProtocolParametersOutput {
	return o
}

func (o PathAnalyzerTestProtocolParametersOutput) ToPathAnalyzerTestProtocolParametersOutputWithContext(ctx context.Context) PathAnalyzerTestProtocolParametersOutput {
	return o
}

func (o PathAnalyzerTestProtocolParametersOutput) ToPathAnalyzerTestProtocolParametersPtrOutput() PathAnalyzerTestProtocolParametersPtrOutput {
	return o.ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(context.Background())
}

func (o PathAnalyzerTestProtocolParametersOutput) ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalyzerTestProtocolParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalyzerTestProtocolParameters) *PathAnalyzerTestProtocolParameters {
		return &v
	}).(PathAnalyzerTestProtocolParametersPtrOutput)
}

// (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
func (o PathAnalyzerTestProtocolParametersOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestProtocolParameters) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
func (o PathAnalyzerTestProtocolParametersOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestProtocolParameters) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
func (o PathAnalyzerTestProtocolParametersOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestProtocolParameters) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

// (Updatable) The source port to use in a `PathAnalyzerTest` resource.
func (o PathAnalyzerTestProtocolParametersOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestProtocolParameters) *int { return v.SourcePort }).(pulumi.IntPtrOutput)
}

// (Updatable) The type of the `Endpoint`.
func (o PathAnalyzerTestProtocolParametersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PathAnalyzerTestProtocolParameters) string { return v.Type }).(pulumi.StringOutput)
}

type PathAnalyzerTestProtocolParametersPtrOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestProtocolParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestProtocolParameters)(nil)).Elem()
}

func (o PathAnalyzerTestProtocolParametersPtrOutput) ToPathAnalyzerTestProtocolParametersPtrOutput() PathAnalyzerTestProtocolParametersPtrOutput {
	return o
}

func (o PathAnalyzerTestProtocolParametersPtrOutput) ToPathAnalyzerTestProtocolParametersPtrOutputWithContext(ctx context.Context) PathAnalyzerTestProtocolParametersPtrOutput {
	return o
}

func (o PathAnalyzerTestProtocolParametersPtrOutput) Elem() PathAnalyzerTestProtocolParametersOutput {
	return o.ApplyT(func(v *PathAnalyzerTestProtocolParameters) PathAnalyzerTestProtocolParameters {
		if v != nil {
			return *v
		}
		var ret PathAnalyzerTestProtocolParameters
		return ret
	}).(PathAnalyzerTestProtocolParametersOutput)
}

// (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
func (o PathAnalyzerTestProtocolParametersPtrOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.DestinationPort
	}).(pulumi.IntPtrOutput)
}

// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
func (o PathAnalyzerTestProtocolParametersPtrOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.IcmpCode
	}).(pulumi.IntPtrOutput)
}

// (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
func (o PathAnalyzerTestProtocolParametersPtrOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.IcmpType
	}).(pulumi.IntPtrOutput)
}

// (Updatable) The source port to use in a `PathAnalyzerTest` resource.
func (o PathAnalyzerTestProtocolParametersPtrOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestProtocolParameters) *int {
		if v == nil {
			return nil
		}
		return v.SourcePort
	}).(pulumi.IntPtrOutput)
}

// (Updatable) The type of the `Endpoint`.
func (o PathAnalyzerTestProtocolParametersPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestProtocolParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PathAnalyzerTestQueryOptions struct {
	// (Updatable) If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis *bool `pulumi:"isBiDirectionalAnalysis"`
}

// PathAnalyzerTestQueryOptionsInput is an input type that accepts PathAnalyzerTestQueryOptionsArgs and PathAnalyzerTestQueryOptionsOutput values.
// You can construct a concrete instance of `PathAnalyzerTestQueryOptionsInput` via:
//
//	PathAnalyzerTestQueryOptionsArgs{...}
type PathAnalyzerTestQueryOptionsInput interface {
	pulumi.Input

	ToPathAnalyzerTestQueryOptionsOutput() PathAnalyzerTestQueryOptionsOutput
	ToPathAnalyzerTestQueryOptionsOutputWithContext(context.Context) PathAnalyzerTestQueryOptionsOutput
}

type PathAnalyzerTestQueryOptionsArgs struct {
	// (Updatable) If true, a path analysis is done for both the forward and reverse routes.
	IsBiDirectionalAnalysis pulumi.BoolPtrInput `pulumi:"isBiDirectionalAnalysis"`
}

func (PathAnalyzerTestQueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestQueryOptions)(nil)).Elem()
}

func (i PathAnalyzerTestQueryOptionsArgs) ToPathAnalyzerTestQueryOptionsOutput() PathAnalyzerTestQueryOptionsOutput {
	return i.ToPathAnalyzerTestQueryOptionsOutputWithContext(context.Background())
}

func (i PathAnalyzerTestQueryOptionsArgs) ToPathAnalyzerTestQueryOptionsOutputWithContext(ctx context.Context) PathAnalyzerTestQueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestQueryOptionsOutput)
}

func (i PathAnalyzerTestQueryOptionsArgs) ToPathAnalyzerTestQueryOptionsPtrOutput() PathAnalyzerTestQueryOptionsPtrOutput {
	return i.ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(context.Background())
}

func (i PathAnalyzerTestQueryOptionsArgs) ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalyzerTestQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestQueryOptionsOutput).ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(ctx)
}

// PathAnalyzerTestQueryOptionsPtrInput is an input type that accepts PathAnalyzerTestQueryOptionsArgs, PathAnalyzerTestQueryOptionsPtr and PathAnalyzerTestQueryOptionsPtrOutput values.
// You can construct a concrete instance of `PathAnalyzerTestQueryOptionsPtrInput` via:
//
//	        PathAnalyzerTestQueryOptionsArgs{...}
//
//	or:
//
//	        nil
type PathAnalyzerTestQueryOptionsPtrInput interface {
	pulumi.Input

	ToPathAnalyzerTestQueryOptionsPtrOutput() PathAnalyzerTestQueryOptionsPtrOutput
	ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(context.Context) PathAnalyzerTestQueryOptionsPtrOutput
}

type pathAnalyzerTestQueryOptionsPtrType PathAnalyzerTestQueryOptionsArgs

func PathAnalyzerTestQueryOptionsPtr(v *PathAnalyzerTestQueryOptionsArgs) PathAnalyzerTestQueryOptionsPtrInput {
	return (*pathAnalyzerTestQueryOptionsPtrType)(v)
}

func (*pathAnalyzerTestQueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestQueryOptions)(nil)).Elem()
}

func (i *pathAnalyzerTestQueryOptionsPtrType) ToPathAnalyzerTestQueryOptionsPtrOutput() PathAnalyzerTestQueryOptionsPtrOutput {
	return i.ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(context.Background())
}

func (i *pathAnalyzerTestQueryOptionsPtrType) ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalyzerTestQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestQueryOptionsPtrOutput)
}

type PathAnalyzerTestQueryOptionsOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestQueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestQueryOptions)(nil)).Elem()
}

func (o PathAnalyzerTestQueryOptionsOutput) ToPathAnalyzerTestQueryOptionsOutput() PathAnalyzerTestQueryOptionsOutput {
	return o
}

func (o PathAnalyzerTestQueryOptionsOutput) ToPathAnalyzerTestQueryOptionsOutputWithContext(ctx context.Context) PathAnalyzerTestQueryOptionsOutput {
	return o
}

func (o PathAnalyzerTestQueryOptionsOutput) ToPathAnalyzerTestQueryOptionsPtrOutput() PathAnalyzerTestQueryOptionsPtrOutput {
	return o.ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(context.Background())
}

func (o PathAnalyzerTestQueryOptionsOutput) ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalyzerTestQueryOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalyzerTestQueryOptions) *PathAnalyzerTestQueryOptions {
		return &v
	}).(PathAnalyzerTestQueryOptionsPtrOutput)
}

// (Updatable) If true, a path analysis is done for both the forward and reverse routes.
func (o PathAnalyzerTestQueryOptionsOutput) IsBiDirectionalAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestQueryOptions) *bool { return v.IsBiDirectionalAnalysis }).(pulumi.BoolPtrOutput)
}

type PathAnalyzerTestQueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestQueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestQueryOptions)(nil)).Elem()
}

func (o PathAnalyzerTestQueryOptionsPtrOutput) ToPathAnalyzerTestQueryOptionsPtrOutput() PathAnalyzerTestQueryOptionsPtrOutput {
	return o
}

func (o PathAnalyzerTestQueryOptionsPtrOutput) ToPathAnalyzerTestQueryOptionsPtrOutputWithContext(ctx context.Context) PathAnalyzerTestQueryOptionsPtrOutput {
	return o
}

func (o PathAnalyzerTestQueryOptionsPtrOutput) Elem() PathAnalyzerTestQueryOptionsOutput {
	return o.ApplyT(func(v *PathAnalyzerTestQueryOptions) PathAnalyzerTestQueryOptions {
		if v != nil {
			return *v
		}
		var ret PathAnalyzerTestQueryOptions
		return ret
	}).(PathAnalyzerTestQueryOptionsOutput)
}

// (Updatable) If true, a path analysis is done for both the forward and reverse routes.
func (o PathAnalyzerTestQueryOptionsPtrOutput) IsBiDirectionalAnalysis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestQueryOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IsBiDirectionalAnalysis
	}).(pulumi.BoolPtrOutput)
}

type PathAnalyzerTestSourceEndpoint struct {
	// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address *string `pulumi:"address"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId *string `pulumi:"instanceId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId *string `pulumi:"listenerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State *string `pulumi:"state"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId *string `pulumi:"subnetId"`
	// (Updatable) The type of the `Endpoint`.
	Type string `pulumi:"type"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId *string `pulumi:"vlanId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VnicId *string `pulumi:"vnicId"`
}

// PathAnalyzerTestSourceEndpointInput is an input type that accepts PathAnalyzerTestSourceEndpointArgs and PathAnalyzerTestSourceEndpointOutput values.
// You can construct a concrete instance of `PathAnalyzerTestSourceEndpointInput` via:
//
//	PathAnalyzerTestSourceEndpointArgs{...}
type PathAnalyzerTestSourceEndpointInput interface {
	pulumi.Input

	ToPathAnalyzerTestSourceEndpointOutput() PathAnalyzerTestSourceEndpointOutput
	ToPathAnalyzerTestSourceEndpointOutputWithContext(context.Context) PathAnalyzerTestSourceEndpointOutput
}

type PathAnalyzerTestSourceEndpointArgs struct {
	// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
	LoadBalancerId pulumi.StringPtrInput `pulumi:"loadBalancerId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
	NetworkLoadBalancerId pulumi.StringPtrInput `pulumi:"networkLoadBalancerId"`
	// The current state of the `PathAnalyzerTest` resource.
	State pulumi.StringPtrInput `pulumi:"state"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// (Updatable) The type of the `Endpoint`.
	Type pulumi.StringInput `pulumi:"type"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
	VlanId pulumi.StringPtrInput `pulumi:"vlanId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VnicId pulumi.StringPtrInput `pulumi:"vnicId"`
}

func (PathAnalyzerTestSourceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (i PathAnalyzerTestSourceEndpointArgs) ToPathAnalyzerTestSourceEndpointOutput() PathAnalyzerTestSourceEndpointOutput {
	return i.ToPathAnalyzerTestSourceEndpointOutputWithContext(context.Background())
}

func (i PathAnalyzerTestSourceEndpointArgs) ToPathAnalyzerTestSourceEndpointOutputWithContext(ctx context.Context) PathAnalyzerTestSourceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestSourceEndpointOutput)
}

func (i PathAnalyzerTestSourceEndpointArgs) ToPathAnalyzerTestSourceEndpointPtrOutput() PathAnalyzerTestSourceEndpointPtrOutput {
	return i.ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(context.Background())
}

func (i PathAnalyzerTestSourceEndpointArgs) ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestSourceEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestSourceEndpointOutput).ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(ctx)
}

// PathAnalyzerTestSourceEndpointPtrInput is an input type that accepts PathAnalyzerTestSourceEndpointArgs, PathAnalyzerTestSourceEndpointPtr and PathAnalyzerTestSourceEndpointPtrOutput values.
// You can construct a concrete instance of `PathAnalyzerTestSourceEndpointPtrInput` via:
//
//	        PathAnalyzerTestSourceEndpointArgs{...}
//
//	or:
//
//	        nil
type PathAnalyzerTestSourceEndpointPtrInput interface {
	pulumi.Input

	ToPathAnalyzerTestSourceEndpointPtrOutput() PathAnalyzerTestSourceEndpointPtrOutput
	ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(context.Context) PathAnalyzerTestSourceEndpointPtrOutput
}

type pathAnalyzerTestSourceEndpointPtrType PathAnalyzerTestSourceEndpointArgs

func PathAnalyzerTestSourceEndpointPtr(v *PathAnalyzerTestSourceEndpointArgs) PathAnalyzerTestSourceEndpointPtrInput {
	return (*pathAnalyzerTestSourceEndpointPtrType)(v)
}

func (*pathAnalyzerTestSourceEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (i *pathAnalyzerTestSourceEndpointPtrType) ToPathAnalyzerTestSourceEndpointPtrOutput() PathAnalyzerTestSourceEndpointPtrOutput {
	return i.ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(context.Background())
}

func (i *pathAnalyzerTestSourceEndpointPtrType) ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestSourceEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathAnalyzerTestSourceEndpointPtrOutput)
}

type PathAnalyzerTestSourceEndpointOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestSourceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (o PathAnalyzerTestSourceEndpointOutput) ToPathAnalyzerTestSourceEndpointOutput() PathAnalyzerTestSourceEndpointOutput {
	return o
}

func (o PathAnalyzerTestSourceEndpointOutput) ToPathAnalyzerTestSourceEndpointOutputWithContext(ctx context.Context) PathAnalyzerTestSourceEndpointOutput {
	return o
}

func (o PathAnalyzerTestSourceEndpointOutput) ToPathAnalyzerTestSourceEndpointPtrOutput() PathAnalyzerTestSourceEndpointPtrOutput {
	return o.ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(context.Background())
}

func (o PathAnalyzerTestSourceEndpointOutput) ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestSourceEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathAnalyzerTestSourceEndpoint) *PathAnalyzerTestSourceEndpoint {
		return &v
	}).(PathAnalyzerTestSourceEndpointPtrOutput)
}

// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalyzerTestSourceEndpointOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalyzerTestSourceEndpointOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalyzerTestSourceEndpointOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalyzerTestSourceEndpointOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.LoadBalancerId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalyzerTestSourceEndpointOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.NetworkLoadBalancerId }).(pulumi.StringPtrOutput)
}

// The current state of the `PathAnalyzerTest` resource.
func (o PathAnalyzerTestSourceEndpointOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.State }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalyzerTestSourceEndpointOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// (Updatable) The type of the `Endpoint`.
func (o PathAnalyzerTestSourceEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalyzerTestSourceEndpointOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalyzerTestSourceEndpointOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathAnalyzerTestSourceEndpoint) *string { return v.VnicId }).(pulumi.StringPtrOutput)
}

type PathAnalyzerTestSourceEndpointPtrOutput struct{ *pulumi.OutputState }

func (PathAnalyzerTestSourceEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathAnalyzerTestSourceEndpoint)(nil)).Elem()
}

func (o PathAnalyzerTestSourceEndpointPtrOutput) ToPathAnalyzerTestSourceEndpointPtrOutput() PathAnalyzerTestSourceEndpointPtrOutput {
	return o
}

func (o PathAnalyzerTestSourceEndpointPtrOutput) ToPathAnalyzerTestSourceEndpointPtrOutputWithContext(ctx context.Context) PathAnalyzerTestSourceEndpointPtrOutput {
	return o
}

func (o PathAnalyzerTestSourceEndpointPtrOutput) Elem() PathAnalyzerTestSourceEndpointOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) PathAnalyzerTestSourceEndpoint {
		if v != nil {
			return *v
		}
		var ret PathAnalyzerTestSourceEndpoint
		return ret
	}).(PathAnalyzerTestSourceEndpointOutput)
}

// (Updatable) The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
func (o PathAnalyzerTestSourceEndpointPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
func (o PathAnalyzerTestSourceEndpointPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
func (o PathAnalyzerTestSourceEndpointPtrOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ListenerId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's load balancer.
func (o PathAnalyzerTestSourceEndpointPtrOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener's network load balancer.
func (o PathAnalyzerTestSourceEndpointPtrOutput) NetworkLoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.NetworkLoadBalancerId
	}).(pulumi.StringPtrOutput)
}

// The current state of the `PathAnalyzerTest` resource.
func (o PathAnalyzerTestSourceEndpointPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
func (o PathAnalyzerTestSourceEndpointPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The type of the `Endpoint`.
func (o PathAnalyzerTestSourceEndpointPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
func (o PathAnalyzerTestSourceEndpointPtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PathAnalyzerTestSourceEndpointPtrOutput) VnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PathAnalyzerTestSourceEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.VnicId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestDestinationEndpointInput)(nil)).Elem(), GetPathAnalyzerTestDestinationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestDestinationEndpointArrayInput)(nil)).Elem(), GetPathAnalyzerTestDestinationEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestProtocolParameterInput)(nil)).Elem(), GetPathAnalyzerTestProtocolParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestProtocolParameterArrayInput)(nil)).Elem(), GetPathAnalyzerTestProtocolParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestQueryOptionInput)(nil)).Elem(), GetPathAnalyzerTestQueryOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestQueryOptionArrayInput)(nil)).Elem(), GetPathAnalyzerTestQueryOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestSourceEndpointInput)(nil)).Elem(), GetPathAnalyzerTestSourceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestSourceEndpointArrayInput)(nil)).Elem(), GetPathAnalyzerTestSourceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsFilterInput)(nil)).Elem(), GetPathAnalyzerTestsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsFilterArrayInput)(nil)).Elem(), GetPathAnalyzerTestsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayInput)(nil)).Elem(), GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiDestinationEndpointInput)(nil)).Elem(), PathAnalysiDestinationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiDestinationEndpointPtrInput)(nil)).Elem(), PathAnalysiDestinationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiProtocolParametersInput)(nil)).Elem(), PathAnalysiProtocolParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiProtocolParametersPtrInput)(nil)).Elem(), PathAnalysiProtocolParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiQueryOptionsInput)(nil)).Elem(), PathAnalysiQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiQueryOptionsPtrInput)(nil)).Elem(), PathAnalysiQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiSourceEndpointInput)(nil)).Elem(), PathAnalysiSourceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalysiSourceEndpointPtrInput)(nil)).Elem(), PathAnalysiSourceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestDestinationEndpointInput)(nil)).Elem(), PathAnalyzerTestDestinationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestDestinationEndpointPtrInput)(nil)).Elem(), PathAnalyzerTestDestinationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestProtocolParametersInput)(nil)).Elem(), PathAnalyzerTestProtocolParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestProtocolParametersPtrInput)(nil)).Elem(), PathAnalyzerTestProtocolParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestQueryOptionsInput)(nil)).Elem(), PathAnalyzerTestQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestQueryOptionsPtrInput)(nil)).Elem(), PathAnalyzerTestQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestSourceEndpointInput)(nil)).Elem(), PathAnalyzerTestSourceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PathAnalyzerTestSourceEndpointPtrInput)(nil)).Elem(), PathAnalyzerTestSourceEndpointArgs{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestDestinationEndpointOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestDestinationEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestProtocolParameterOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestProtocolParameterArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestQueryOptionOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestQueryOptionArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestSourceEndpointOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestSourceEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsFilterOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameterArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOptionArrayOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointOutput{})
	pulumi.RegisterOutputType(GetPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpointArrayOutput{})
	pulumi.RegisterOutputType(PathAnalysiDestinationEndpointOutput{})
	pulumi.RegisterOutputType(PathAnalysiDestinationEndpointPtrOutput{})
	pulumi.RegisterOutputType(PathAnalysiProtocolParametersOutput{})
	pulumi.RegisterOutputType(PathAnalysiProtocolParametersPtrOutput{})
	pulumi.RegisterOutputType(PathAnalysiQueryOptionsOutput{})
	pulumi.RegisterOutputType(PathAnalysiQueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(PathAnalysiSourceEndpointOutput{})
	pulumi.RegisterOutputType(PathAnalysiSourceEndpointPtrOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestDestinationEndpointOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestDestinationEndpointPtrOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestProtocolParametersOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestProtocolParametersPtrOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestQueryOptionsOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestQueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestSourceEndpointOutput{})
	pulumi.RegisterOutputType(PathAnalyzerTestSourceEndpointPtrOutput{})
}
