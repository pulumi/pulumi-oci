// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vulnerabilityscanning

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Container Scan Recipe resource in Oracle Cloud Infrastructure Vulnerability Scanning service.
//
// Creates a new ContainerScanRecipe. A recipe determines the types of security issues that you want scanned.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/VulnerabilityScanning"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := VulnerabilityScanning.NewContainerScanRecipe(ctx, "testContainerScanRecipe", &VulnerabilityScanning.ContainerScanRecipeArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				ScanSettings: &vulnerabilityscanning.ContainerScanRecipeScanSettingsArgs{
//					ScanLevel: pulumi.Any(_var.Container_scan_recipe_scan_settings_scan_level),
//				},
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				DisplayName: pulumi.Any(_var.Container_scan_recipe_display_name),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				ImageCount: pulumi.Any(_var.Container_scan_recipe_image_count),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ContainerScanRecipes can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:VulnerabilityScanning/containerScanRecipe:ContainerScanRecipe test_container_scan_recipe "id"
//
// ```
type ContainerScanRecipe struct {
	pulumi.CustomResourceState

	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
	ImageCount pulumi.IntOutput `pulumi:"imageCount"`
	// (Updatable) A collection of container scan settings
	ScanSettings ContainerScanRecipeScanSettingsOutput `pulumi:"scanSettings"`
	// The current state of the config.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewContainerScanRecipe registers a new resource with the given unique name, arguments, and options.
func NewContainerScanRecipe(ctx *pulumi.Context,
	name string, args *ContainerScanRecipeArgs, opts ...pulumi.ResourceOption) (*ContainerScanRecipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ScanSettings == nil {
		return nil, errors.New("invalid value for required argument 'ScanSettings'")
	}
	var resource ContainerScanRecipe
	err := ctx.RegisterResource("oci:VulnerabilityScanning/containerScanRecipe:ContainerScanRecipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerScanRecipe gets an existing ContainerScanRecipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerScanRecipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerScanRecipeState, opts ...pulumi.ResourceOption) (*ContainerScanRecipe, error) {
	var resource ContainerScanRecipe
	err := ctx.ReadResource("oci:VulnerabilityScanning/containerScanRecipe:ContainerScanRecipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerScanRecipe resources.
type containerScanRecipeState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
	ImageCount *int `pulumi:"imageCount"`
	// (Updatable) A collection of container scan settings
	ScanSettings *ContainerScanRecipeScanSettings `pulumi:"scanSettings"`
	// The current state of the config.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ContainerScanRecipeState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
	ImageCount pulumi.IntPtrInput
	// (Updatable) A collection of container scan settings
	ScanSettings ContainerScanRecipeScanSettingsPtrInput
	// The current state of the config.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeCreated pulumi.StringPtrInput
	// Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
	TimeUpdated pulumi.StringPtrInput
}

func (ContainerScanRecipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerScanRecipeState)(nil)).Elem()
}

type containerScanRecipeArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
	ImageCount *int `pulumi:"imageCount"`
	// (Updatable) A collection of container scan settings
	ScanSettings ContainerScanRecipeScanSettings `pulumi:"scanSettings"`
}

// The set of arguments for constructing a ContainerScanRecipe resource.
type ContainerScanRecipeArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
	ImageCount pulumi.IntPtrInput
	// (Updatable) A collection of container scan settings
	ScanSettings ContainerScanRecipeScanSettingsInput
}

func (ContainerScanRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerScanRecipeArgs)(nil)).Elem()
}

type ContainerScanRecipeInput interface {
	pulumi.Input

	ToContainerScanRecipeOutput() ContainerScanRecipeOutput
	ToContainerScanRecipeOutputWithContext(ctx context.Context) ContainerScanRecipeOutput
}

func (*ContainerScanRecipe) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerScanRecipe)(nil)).Elem()
}

func (i *ContainerScanRecipe) ToContainerScanRecipeOutput() ContainerScanRecipeOutput {
	return i.ToContainerScanRecipeOutputWithContext(context.Background())
}

func (i *ContainerScanRecipe) ToContainerScanRecipeOutputWithContext(ctx context.Context) ContainerScanRecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanRecipeOutput)
}

// ContainerScanRecipeArrayInput is an input type that accepts ContainerScanRecipeArray and ContainerScanRecipeArrayOutput values.
// You can construct a concrete instance of `ContainerScanRecipeArrayInput` via:
//
//	ContainerScanRecipeArray{ ContainerScanRecipeArgs{...} }
type ContainerScanRecipeArrayInput interface {
	pulumi.Input

	ToContainerScanRecipeArrayOutput() ContainerScanRecipeArrayOutput
	ToContainerScanRecipeArrayOutputWithContext(context.Context) ContainerScanRecipeArrayOutput
}

type ContainerScanRecipeArray []ContainerScanRecipeInput

func (ContainerScanRecipeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerScanRecipe)(nil)).Elem()
}

func (i ContainerScanRecipeArray) ToContainerScanRecipeArrayOutput() ContainerScanRecipeArrayOutput {
	return i.ToContainerScanRecipeArrayOutputWithContext(context.Background())
}

func (i ContainerScanRecipeArray) ToContainerScanRecipeArrayOutputWithContext(ctx context.Context) ContainerScanRecipeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanRecipeArrayOutput)
}

// ContainerScanRecipeMapInput is an input type that accepts ContainerScanRecipeMap and ContainerScanRecipeMapOutput values.
// You can construct a concrete instance of `ContainerScanRecipeMapInput` via:
//
//	ContainerScanRecipeMap{ "key": ContainerScanRecipeArgs{...} }
type ContainerScanRecipeMapInput interface {
	pulumi.Input

	ToContainerScanRecipeMapOutput() ContainerScanRecipeMapOutput
	ToContainerScanRecipeMapOutputWithContext(context.Context) ContainerScanRecipeMapOutput
}

type ContainerScanRecipeMap map[string]ContainerScanRecipeInput

func (ContainerScanRecipeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerScanRecipe)(nil)).Elem()
}

func (i ContainerScanRecipeMap) ToContainerScanRecipeMapOutput() ContainerScanRecipeMapOutput {
	return i.ToContainerScanRecipeMapOutputWithContext(context.Background())
}

func (i ContainerScanRecipeMap) ToContainerScanRecipeMapOutputWithContext(ctx context.Context) ContainerScanRecipeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScanRecipeMapOutput)
}

type ContainerScanRecipeOutput struct{ *pulumi.OutputState }

func (ContainerScanRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerScanRecipe)(nil)).Elem()
}

func (o ContainerScanRecipeOutput) ToContainerScanRecipeOutput() ContainerScanRecipeOutput {
	return o
}

func (o ContainerScanRecipeOutput) ToContainerScanRecipeOutputWithContext(ctx context.Context) ContainerScanRecipeOutput {
	return o
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
func (o ContainerScanRecipeOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o ContainerScanRecipeOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) User friendly name of container scan recipe. If not present, will be auto-generated.
func (o ContainerScanRecipeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o ContainerScanRecipeOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// (Updatable) This field is set equal to the number of images we want to scan in the first go when the recipe is created
func (o ContainerScanRecipeOutput) ImageCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.IntOutput { return v.ImageCount }).(pulumi.IntOutput)
}

// (Updatable) A collection of container scan settings
func (o ContainerScanRecipeOutput) ScanSettings() ContainerScanRecipeScanSettingsOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) ContainerScanRecipeScanSettingsOutput { return v.ScanSettings }).(ContainerScanRecipeScanSettingsOutput)
}

// The current state of the config.
func (o ContainerScanRecipeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o ContainerScanRecipeOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
func (o ContainerScanRecipeOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
func (o ContainerScanRecipeOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerScanRecipe) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type ContainerScanRecipeArrayOutput struct{ *pulumi.OutputState }

func (ContainerScanRecipeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerScanRecipe)(nil)).Elem()
}

func (o ContainerScanRecipeArrayOutput) ToContainerScanRecipeArrayOutput() ContainerScanRecipeArrayOutput {
	return o
}

func (o ContainerScanRecipeArrayOutput) ToContainerScanRecipeArrayOutputWithContext(ctx context.Context) ContainerScanRecipeArrayOutput {
	return o
}

func (o ContainerScanRecipeArrayOutput) Index(i pulumi.IntInput) ContainerScanRecipeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerScanRecipe {
		return vs[0].([]*ContainerScanRecipe)[vs[1].(int)]
	}).(ContainerScanRecipeOutput)
}

type ContainerScanRecipeMapOutput struct{ *pulumi.OutputState }

func (ContainerScanRecipeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerScanRecipe)(nil)).Elem()
}

func (o ContainerScanRecipeMapOutput) ToContainerScanRecipeMapOutput() ContainerScanRecipeMapOutput {
	return o
}

func (o ContainerScanRecipeMapOutput) ToContainerScanRecipeMapOutputWithContext(ctx context.Context) ContainerScanRecipeMapOutput {
	return o
}

func (o ContainerScanRecipeMapOutput) MapIndex(k pulumi.StringInput) ContainerScanRecipeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerScanRecipe {
		return vs[0].(map[string]*ContainerScanRecipe)[vs[1].(string)]
	}).(ContainerScanRecipeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerScanRecipeInput)(nil)).Elem(), &ContainerScanRecipe{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerScanRecipeArrayInput)(nil)).Elem(), ContainerScanRecipeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerScanRecipeMapInput)(nil)).Elem(), ContainerScanRecipeMap{})
	pulumi.RegisterOutputType(ContainerScanRecipeOutput{})
	pulumi.RegisterOutputType(ContainerScanRecipeArrayOutput{})
	pulumi.RegisterOutputType(ContainerScanRecipeMapOutput{})
}
