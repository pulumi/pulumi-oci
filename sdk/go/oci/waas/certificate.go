// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Certificate resource in Oracle Cloud Infrastructure Web Application Acceleration and Security service.
//
// Allows an SSL certificate to be added to a WAAS policy. The Web Application Firewall terminates SSL connections to inspect requests in runtime, and then re-encrypts requests before sending them to the origin for fulfillment.
//
// For more information, see [WAF Settings](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/wafsettings.htm).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Waas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waas.NewCertificate(ctx, "testCertificate", &Waas.CertificateArgs{
//				CertificateData: pulumi.Any(_var.Certificate_certificate_data),
//				CompartmentId:   pulumi.Any(_var.Compartment_id),
//				PrivateKeyData:  pulumi.Any(_var.Certificate_private_key_data),
//				DefinedTags: pulumi.Map{
//					"Operations.CostCenter": pulumi.Any("42"),
//				},
//				DisplayName: pulumi.Any(_var.Certificate_display_name),
//				FreeformTags: pulumi.Map{
//					"Department": pulumi.Any("Finance"),
//				},
//				IsTrustVerificationDisabled: pulumi.Any(_var.Certificate_is_trust_verification_disabled),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Import is not supported for this resource.
type Certificate struct {
	pulumi.CustomResourceState

	// The data of the SSL certificate.
	//
	// **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
	//
	// The example below shows an intermediate certificate appended to a leaf certificate.
	CertificateData pulumi.StringOutput `pulumi:"certificateData"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
	Extensions CertificateExtensionArrayOutput `pulumi:"extensions"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Set to `true` if the SSL certificate is self-signed.
	IsTrustVerificationDisabled pulumi.BoolOutput   `pulumi:"isTrustVerificationDisabled"`
	IssuedBy                    pulumi.StringOutput `pulumi:"issuedBy"`
	// The issuer of the certificate.
	IssuerNames CertificateIssuerNameArrayOutput `pulumi:"issuerNames"`
	// The private key of the SSL certificate.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PrivateKeyData pulumi.StringOutput `pulumi:"privateKeyData"`
	// Information about the public key and the algorithm used by the public key.
	PublicKeyInfos CertificatePublicKeyInfoArrayOutput `pulumi:"publicKeyInfos"`
	// A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
	SignatureAlgorithm pulumi.StringOutput `pulumi:"signatureAlgorithm"`
	// The current lifecycle state of the SSL certificate.
	State pulumi.StringOutput `pulumi:"state"`
	// The entity to be secured by the certificate.
	SubjectNames CertificateSubjectNameArrayOutput `pulumi:"subjectNames"`
	// The date and time the certificate was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
	TimeNotValidAfter pulumi.StringOutput `pulumi:"timeNotValidAfter"`
	// The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
	TimeNotValidBefore pulumi.StringOutput `pulumi:"timeNotValidBefore"`
	// The version of the encoded certificate.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateData == nil {
		return nil, errors.New("invalid value for required argument 'CertificateData'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.PrivateKeyData == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKeyData'")
	}
	if args.PrivateKeyData != nil {
		args.PrivateKeyData = pulumi.ToSecret(args.PrivateKeyData).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKeyData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("oci:Waas/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("oci:Waas/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// The data of the SSL certificate.
	//
	// **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
	//
	// The example below shows an intermediate certificate appended to a leaf certificate.
	CertificateData *string `pulumi:"certificateData"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
	Extensions []CertificateExtension `pulumi:"extensions"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Set to `true` if the SSL certificate is self-signed.
	IsTrustVerificationDisabled *bool   `pulumi:"isTrustVerificationDisabled"`
	IssuedBy                    *string `pulumi:"issuedBy"`
	// The issuer of the certificate.
	IssuerNames []CertificateIssuerName `pulumi:"issuerNames"`
	// The private key of the SSL certificate.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PrivateKeyData *string `pulumi:"privateKeyData"`
	// Information about the public key and the algorithm used by the public key.
	PublicKeyInfos []CertificatePublicKeyInfo `pulumi:"publicKeyInfos"`
	// A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
	SerialNumber *string `pulumi:"serialNumber"`
	// The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// The current lifecycle state of the SSL certificate.
	State *string `pulumi:"state"`
	// The entity to be secured by the certificate.
	SubjectNames []CertificateSubjectName `pulumi:"subjectNames"`
	// The date and time the certificate was created, expressed in RFC 3339 timestamp format.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
	TimeNotValidAfter *string `pulumi:"timeNotValidAfter"`
	// The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
	TimeNotValidBefore *string `pulumi:"timeNotValidBefore"`
	// The version of the encoded certificate.
	Version *int `pulumi:"version"`
}

type CertificateState struct {
	// The data of the SSL certificate.
	//
	// **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
	//
	// The example below shows an intermediate certificate appended to a leaf certificate.
	CertificateData pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
	Extensions CertificateExtensionArrayInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Set to `true` if the SSL certificate is self-signed.
	IsTrustVerificationDisabled pulumi.BoolPtrInput
	IssuedBy                    pulumi.StringPtrInput
	// The issuer of the certificate.
	IssuerNames CertificateIssuerNameArrayInput
	// The private key of the SSL certificate.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PrivateKeyData pulumi.StringPtrInput
	// Information about the public key and the algorithm used by the public key.
	PublicKeyInfos CertificatePublicKeyInfoArrayInput
	// A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
	SerialNumber pulumi.StringPtrInput
	// The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
	SignatureAlgorithm pulumi.StringPtrInput
	// The current lifecycle state of the SSL certificate.
	State pulumi.StringPtrInput
	// The entity to be secured by the certificate.
	SubjectNames CertificateSubjectNameArrayInput
	// The date and time the certificate was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringPtrInput
	// The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
	TimeNotValidAfter pulumi.StringPtrInput
	// The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
	TimeNotValidBefore pulumi.StringPtrInput
	// The version of the encoded certificate.
	Version pulumi.IntPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// The data of the SSL certificate.
	//
	// **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
	//
	// The example below shows an intermediate certificate appended to a leaf certificate.
	CertificateData string `pulumi:"certificateData"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Set to `true` if the SSL certificate is self-signed.
	IsTrustVerificationDisabled *bool `pulumi:"isTrustVerificationDisabled"`
	// The private key of the SSL certificate.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PrivateKeyData string `pulumi:"privateKeyData"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The data of the SSL certificate.
	//
	// **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
	//
	// The example below shows an intermediate certificate appended to a leaf certificate.
	CertificateData pulumi.StringInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Set to `true` if the SSL certificate is self-signed.
	IsTrustVerificationDisabled pulumi.BoolPtrInput
	// The private key of the SSL certificate.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PrivateKeyData pulumi.StringInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// The data of the SSL certificate.
//
// **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
//
// The example below shows an intermediate certificate appended to a leaf certificate.
func (o CertificateOutput) CertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateData }).(pulumi.StringOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
func (o CertificateOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
func (o CertificateOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Certificate) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
func (o CertificateOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
func (o CertificateOutput) Extensions() CertificateExtensionArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateExtensionArrayOutput { return v.Extensions }).(CertificateExtensionArrayOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o CertificateOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Certificate) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// Set to `true` if the SSL certificate is self-signed.
func (o CertificateOutput) IsTrustVerificationDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.IsTrustVerificationDisabled }).(pulumi.BoolOutput)
}

func (o CertificateOutput) IssuedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.IssuedBy }).(pulumi.StringOutput)
}

// The issuer of the certificate.
func (o CertificateOutput) IssuerNames() CertificateIssuerNameArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateIssuerNameArrayOutput { return v.IssuerNames }).(CertificateIssuerNameArrayOutput)
}

// The private key of the SSL certificate.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o CertificateOutput) PrivateKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.PrivateKeyData }).(pulumi.StringOutput)
}

// Information about the public key and the algorithm used by the public key.
func (o CertificateOutput) PublicKeyInfos() CertificatePublicKeyInfoArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificatePublicKeyInfoArrayOutput { return v.PublicKeyInfos }).(CertificatePublicKeyInfoArrayOutput)
}

// A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
func (o CertificateOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

// The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
func (o CertificateOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// The current lifecycle state of the SSL certificate.
func (o CertificateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The entity to be secured by the certificate.
func (o CertificateOutput) SubjectNames() CertificateSubjectNameArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateSubjectNameArrayOutput { return v.SubjectNames }).(CertificateSubjectNameArrayOutput)
}

// The date and time the certificate was created, expressed in RFC 3339 timestamp format.
func (o CertificateOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
func (o CertificateOutput) TimeNotValidAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.TimeNotValidAfter }).(pulumi.StringOutput)
}

// The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
func (o CertificateOutput) TimeNotValidBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.TimeNotValidBefore }).(pulumi.StringOutput)
}

// The version of the encoded certificate.
func (o CertificateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Certificate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
