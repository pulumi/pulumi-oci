// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Certificate resource in Oracle Cloud Infrastructure Web Application Acceleration and Security service.
//
// Gets the details of an SSL certificate.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Waas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waas.GetCertificate(ctx, &waas.GetCertificateArgs{
//				CertificateId: oci_waas_certificate.Test_certificate.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("oci:Waas/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate used in the WAAS policy. This number is generated when the certificate is added to the policy.
	CertificateId string `pulumi:"certificateId"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	// The data of the SSL certificate.
	CertificateData string `pulumi:"certificateData"`
	CertificateId   string `pulumi:"certificateId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate's compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The user-friendly name of the SSL certificate.
	DisplayName string `pulumi:"displayName"`
	// Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
	Extensions []GetCertificateExtension `pulumi:"extensions"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate.
	Id string `pulumi:"id"`
	// This indicates whether trust verification was disabled during the creation of SSL certificate. If `true` SSL certificate trust verification was disabled and this SSL certificate is most likely self-signed.
	IsTrustVerificationDisabled bool   `pulumi:"isTrustVerificationDisabled"`
	IssuedBy                    string `pulumi:"issuedBy"`
	// The issuer of the certificate.
	IssuerNames    []GetCertificateIssuerName `pulumi:"issuerNames"`
	PrivateKeyData string                     `pulumi:"privateKeyData"`
	// Information about the public key and the algorithm used by the public key.
	PublicKeyInfos []GetCertificatePublicKeyInfo `pulumi:"publicKeyInfos"`
	// A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
	SerialNumber string `pulumi:"serialNumber"`
	// The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
	SignatureAlgorithm string `pulumi:"signatureAlgorithm"`
	// The current lifecycle state of the SSL certificate.
	State string `pulumi:"state"`
	// The entity to be secured by the certificate.
	SubjectNames []GetCertificateSubjectName `pulumi:"subjectNames"`
	// The date and time the certificate was created, expressed in RFC 3339 timestamp format.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
	TimeNotValidAfter string `pulumi:"timeNotValidAfter"`
	// The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
	TimeNotValidBefore string `pulumi:"timeNotValidBefore"`
	// The version of the encoded certificate.
	Version int `pulumi:"version"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateResult, error) {
			args := v.(LookupCertificateArgs)
			r, err := LookupCertificate(ctx, &args, opts...)
			var s LookupCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertificateResultOutput)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate used in the WAAS policy. This number is generated when the certificate is added to the policy.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCertificate.
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// The data of the SSL certificate.
func (o LookupCertificateResultOutput) CertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateData }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate's compartment.
func (o LookupCertificateResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
func (o LookupCertificateResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The user-friendly name of the SSL certificate.
func (o LookupCertificateResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
func (o LookupCertificateResultOutput) Extensions() GetCertificateExtensionArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateExtension { return v.Extensions }).(GetCertificateExtensionArrayOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o LookupCertificateResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate.
func (o LookupCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// This indicates whether trust verification was disabled during the creation of SSL certificate. If `true` SSL certificate trust verification was disabled and this SSL certificate is most likely self-signed.
func (o LookupCertificateResultOutput) IsTrustVerificationDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCertificateResult) bool { return v.IsTrustVerificationDisabled }).(pulumi.BoolOutput)
}

func (o LookupCertificateResultOutput) IssuedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.IssuedBy }).(pulumi.StringOutput)
}

// The issuer of the certificate.
func (o LookupCertificateResultOutput) IssuerNames() GetCertificateIssuerNameArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateIssuerName { return v.IssuerNames }).(GetCertificateIssuerNameArrayOutput)
}

func (o LookupCertificateResultOutput) PrivateKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.PrivateKeyData }).(pulumi.StringOutput)
}

// Information about the public key and the algorithm used by the public key.
func (o LookupCertificateResultOutput) PublicKeyInfos() GetCertificatePublicKeyInfoArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificatePublicKeyInfo { return v.PublicKeyInfos }).(GetCertificatePublicKeyInfoArrayOutput)
}

// A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
func (o LookupCertificateResultOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
func (o LookupCertificateResultOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// The current lifecycle state of the SSL certificate.
func (o LookupCertificateResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.State }).(pulumi.StringOutput)
}

// The entity to be secured by the certificate.
func (o LookupCertificateResultOutput) SubjectNames() GetCertificateSubjectNameArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateSubjectName { return v.SubjectNames }).(GetCertificateSubjectNameArrayOutput)
}

// The date and time the certificate was created, expressed in RFC 3339 timestamp format.
func (o LookupCertificateResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
func (o LookupCertificateResultOutput) TimeNotValidAfter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.TimeNotValidAfter }).(pulumi.StringOutput)
}

// The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
func (o LookupCertificateResultOutput) TimeNotValidBefore() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.TimeNotValidBefore }).(pulumi.StringOutput)
}

// The version of the encoded certificate.
func (o LookupCertificateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCertificateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
