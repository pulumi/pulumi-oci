// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Adm.inputs.GetRemediationRunStagesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRemediationRunStagesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRemediationRunStagesPlainArgs Empty = new GetRemediationRunStagesPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetRemediationRunStagesFilter> filters;

    public Optional<List<GetRemediationRunStagesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique Remediation Run identifier path parameter.
     * 
     */
    @Import(name="remediationRunId", required=true)
    private String remediationRunId;

    /**
     * @return Unique Remediation Run identifier path parameter.
     * 
     */
    public String remediationRunId() {
        return this.remediationRunId;
    }

    /**
     * A filter to return only Stages that match the specified status.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return A filter to return only Stages that match the specified status.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A filter to return only Stages that match the specified type.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return A filter to return only Stages that match the specified type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetRemediationRunStagesPlainArgs() {}

    private GetRemediationRunStagesPlainArgs(GetRemediationRunStagesPlainArgs $) {
        this.filters = $.filters;
        this.remediationRunId = $.remediationRunId;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRemediationRunStagesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRemediationRunStagesPlainArgs $;

        public Builder() {
            $ = new GetRemediationRunStagesPlainArgs();
        }

        public Builder(GetRemediationRunStagesPlainArgs defaults) {
            $ = new GetRemediationRunStagesPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetRemediationRunStagesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetRemediationRunStagesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param remediationRunId Unique Remediation Run identifier path parameter.
         * 
         * @return builder
         * 
         */
        public Builder remediationRunId(String remediationRunId) {
            $.remediationRunId = remediationRunId;
            return this;
        }

        /**
         * @param status A filter to return only Stages that match the specified status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param type A filter to return only Stages that match the specified type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetRemediationRunStagesPlainArgs build() {
            $.remediationRunId = Objects.requireNonNull($.remediationRunId, "expected parameter 'remediationRunId' to be non-null");
            return $;
        }
    }

}
