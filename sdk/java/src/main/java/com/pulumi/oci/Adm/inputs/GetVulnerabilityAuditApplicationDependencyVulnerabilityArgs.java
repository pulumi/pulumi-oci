// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs Empty = new GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs();

    /**
     * A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater or equal than the specified value.
     * 
     */
    @Import(name="cvssV2greaterThanOrEqual")
    private @Nullable Output<Double> cvssV2greaterThanOrEqual;

    /**
     * @return A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater or equal than the specified value.
     * 
     */
    public Optional<Output<Double>> cvssV2greaterThanOrEqual() {
        return Optional.ofNullable(this.cvssV2greaterThanOrEqual);
    }

    /**
     * A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater or equal than the specified value.
     * 
     */
    @Import(name="cvssV3greaterThanOrEqual")
    private @Nullable Output<Double> cvssV3greaterThanOrEqual;

    /**
     * @return A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater or equal than the specified value.
     * 
     */
    public Optional<Output<Double>> cvssV3greaterThanOrEqual() {
        return Optional.ofNullable(this.cvssV3greaterThanOrEqual);
    }

    /**
     * A filter to limit depth of the application dependencies tree traversal. Additionally query parameters such as &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; can&#39;t be used in conjunction with this latter.
     * 
     */
    @Import(name="depth")
    private @Nullable Output<Integer> depth;

    /**
     * @return A filter to limit depth of the application dependencies tree traversal. Additionally query parameters such as &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; can&#39;t be used in conjunction with this latter.
     * 
     */
    public Optional<Output<Integer>> depth() {
        return Optional.ofNullable(this.depth);
    }

    /**
     * A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
     * 
     */
    @Import(name="gav")
    private @Nullable Output<String> gav;

    /**
     * @return A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
     * 
     */
    public Optional<Output<String>> gav() {
        return Optional.ofNullable(this.gav);
    }

    /**
     * A filter to override the top level root identifier with the new given value. The application dependency tree will only be traversed from the given node. Query parameters &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; cannot be used in conjunction with this parameter.
     * 
     */
    @Import(name="rootNodeId")
    private @Nullable Output<String> rootNodeId;

    /**
     * @return A filter to override the top level root identifier with the new given value. The application dependency tree will only be traversed from the given node. Query parameters &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; cannot be used in conjunction with this parameter.
     * 
     */
    public Optional<Output<String>> rootNodeId() {
        return Optional.ofNullable(this.rootNodeId);
    }

    @Import(name="sortBy")
    private @Nullable Output<String> sortBy;

    public Optional<Output<String>> sortBy() {
        return Optional.ofNullable(this.sortBy);
    }

    /**
     * Unique Vulnerability Audit identifier path parameter.
     * 
     */
    @Import(name="vulnerabilityAuditId", required=true)
    private Output<String> vulnerabilityAuditId;

    /**
     * @return Unique Vulnerability Audit identifier path parameter.
     * 
     */
    public Output<String> vulnerabilityAuditId() {
        return this.vulnerabilityAuditId;
    }

    /**
     * A filter to return only Vulnerability Audits that match the specified id.
     * 
     */
    @Import(name="vulnerabilityId")
    private @Nullable Output<String> vulnerabilityId;

    /**
     * @return A filter to return only Vulnerability Audits that match the specified id.
     * 
     */
    public Optional<Output<String>> vulnerabilityId() {
        return Optional.ofNullable(this.vulnerabilityId);
    }

    private GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs() {}

    private GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs(GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs $) {
        this.cvssV2greaterThanOrEqual = $.cvssV2greaterThanOrEqual;
        this.cvssV3greaterThanOrEqual = $.cvssV3greaterThanOrEqual;
        this.depth = $.depth;
        this.gav = $.gav;
        this.rootNodeId = $.rootNodeId;
        this.sortBy = $.sortBy;
        this.vulnerabilityAuditId = $.vulnerabilityAuditId;
        this.vulnerabilityId = $.vulnerabilityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs $;

        public Builder() {
            $ = new GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs();
        }

        public Builder(GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs defaults) {
            $ = new GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cvssV2greaterThanOrEqual A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater or equal than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder cvssV2greaterThanOrEqual(@Nullable Output<Double> cvssV2greaterThanOrEqual) {
            $.cvssV2greaterThanOrEqual = cvssV2greaterThanOrEqual;
            return this;
        }

        /**
         * @param cvssV2greaterThanOrEqual A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater or equal than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder cvssV2greaterThanOrEqual(Double cvssV2greaterThanOrEqual) {
            return cvssV2greaterThanOrEqual(Output.of(cvssV2greaterThanOrEqual));
        }

        /**
         * @param cvssV3greaterThanOrEqual A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater or equal than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder cvssV3greaterThanOrEqual(@Nullable Output<Double> cvssV3greaterThanOrEqual) {
            $.cvssV3greaterThanOrEqual = cvssV3greaterThanOrEqual;
            return this;
        }

        /**
         * @param cvssV3greaterThanOrEqual A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater or equal than the specified value.
         * 
         * @return builder
         * 
         */
        public Builder cvssV3greaterThanOrEqual(Double cvssV3greaterThanOrEqual) {
            return cvssV3greaterThanOrEqual(Output.of(cvssV3greaterThanOrEqual));
        }

        /**
         * @param depth A filter to limit depth of the application dependencies tree traversal. Additionally query parameters such as &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; can&#39;t be used in conjunction with this latter.
         * 
         * @return builder
         * 
         */
        public Builder depth(@Nullable Output<Integer> depth) {
            $.depth = depth;
            return this;
        }

        /**
         * @param depth A filter to limit depth of the application dependencies tree traversal. Additionally query parameters such as &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; can&#39;t be used in conjunction with this latter.
         * 
         * @return builder
         * 
         */
        public Builder depth(Integer depth) {
            return depth(Output.of(depth));
        }

        /**
         * @param gav A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
         * 
         * @return builder
         * 
         */
        public Builder gav(@Nullable Output<String> gav) {
            $.gav = gav;
            return this;
        }

        /**
         * @param gav A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
         * 
         * @return builder
         * 
         */
        public Builder gav(String gav) {
            return gav(Output.of(gav));
        }

        /**
         * @param rootNodeId A filter to override the top level root identifier with the new given value. The application dependency tree will only be traversed from the given node. Query parameters &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; cannot be used in conjunction with this parameter.
         * 
         * @return builder
         * 
         */
        public Builder rootNodeId(@Nullable Output<String> rootNodeId) {
            $.rootNodeId = rootNodeId;
            return this;
        }

        /**
         * @param rootNodeId A filter to override the top level root identifier with the new given value. The application dependency tree will only be traversed from the given node. Query parameters &#34;cvssV2GreaterThanOrEqual&#34;, &#34;cvssV3GreaterThanOrEqual&#34;, &#34;gav&#34; and &#34;vulnerabilityId&#34; cannot be used in conjunction with this parameter.
         * 
         * @return builder
         * 
         */
        public Builder rootNodeId(String rootNodeId) {
            return rootNodeId(Output.of(rootNodeId));
        }

        public Builder sortBy(@Nullable Output<String> sortBy) {
            $.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(String sortBy) {
            return sortBy(Output.of(sortBy));
        }

        /**
         * @param vulnerabilityAuditId Unique Vulnerability Audit identifier path parameter.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityAuditId(Output<String> vulnerabilityAuditId) {
            $.vulnerabilityAuditId = vulnerabilityAuditId;
            return this;
        }

        /**
         * @param vulnerabilityAuditId Unique Vulnerability Audit identifier path parameter.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityAuditId(String vulnerabilityAuditId) {
            return vulnerabilityAuditId(Output.of(vulnerabilityAuditId));
        }

        /**
         * @param vulnerabilityId A filter to return only Vulnerability Audits that match the specified id.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityId(@Nullable Output<String> vulnerabilityId) {
            $.vulnerabilityId = vulnerabilityId;
            return this;
        }

        /**
         * @param vulnerabilityId A filter to return only Vulnerability Audits that match the specified id.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityId(String vulnerabilityId) {
            return vulnerabilityId(Output.of(vulnerabilityId));
        }

        public GetVulnerabilityAuditApplicationDependencyVulnerabilityArgs build() {
            $.vulnerabilityAuditId = Objects.requireNonNull($.vulnerabilityAuditId, "expected parameter 'vulnerabilityAuditId' to be non-null");
            return $;
        }
    }

}
