// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Adm.inputs.GetVulnerabilityAuditsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVulnerabilityAuditsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVulnerabilityAuditsArgs Empty = new GetVulnerabilityAuditsArgs();

    /**
     * A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetVulnerabilityAuditsFilterArgs>> filters;

    public Optional<Output<List<GetVulnerabilityAuditsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return only successful or failed Vulnerability Audits.
     * 
     */
    @Import(name="isSuccess")
    private @Nullable Output<Boolean> isSuccess;

    /**
     * @return A filter to return only successful or failed Vulnerability Audits.
     * 
     */
    public Optional<Output<Boolean>> isSuccess() {
        return Optional.ofNullable(this.isSuccess);
    }

    /**
     * A filter to return only Vulnerability Audits that were created against the specified knowledge base.
     * 
     */
    @Import(name="knowledgeBaseId")
    private @Nullable Output<String> knowledgeBaseId;

    /**
     * @return A filter to return only Vulnerability Audits that were created against the specified knowledge base.
     * 
     */
    public Optional<Output<String>> knowledgeBaseId() {
        return Optional.ofNullable(this.knowledgeBaseId);
    }

    /**
     * A filter that returns only Vulnerability Audits that have a maximum observed Severity greater than or equal to the specified value.
     * 
     */
    @Import(name="maxObservedSeverityGreaterThanOrEqualTo")
    private @Nullable Output<String> maxObservedSeverityGreaterThanOrEqualTo;

    /**
     * @return A filter that returns only Vulnerability Audits that have a maximum observed Severity greater than or equal to the specified value.
     * 
     */
    public Optional<Output<String>> maxObservedSeverityGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.maxObservedSeverityGreaterThanOrEqualTo);
    }

    /**
     * A filter to return only Vulnerability Audits that match the specified lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only Vulnerability Audits that match the specified lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return only Vulnerability Audits with timeCreated greater or equal to the specified value.
     * 
     */
    @Import(name="timeCreatedGreaterThanOrEqualTo")
    private @Nullable Output<String> timeCreatedGreaterThanOrEqualTo;

    /**
     * @return A filter to return only Vulnerability Audits with timeCreated greater or equal to the specified value.
     * 
     */
    public Optional<Output<String>> timeCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedGreaterThanOrEqualTo);
    }

    /**
     * A filter to return only Vulnerability Audits with timeCreated less or equal to the specified value.
     * 
     */
    @Import(name="timeCreatedLessThanOrEqualTo")
    private @Nullable Output<String> timeCreatedLessThanOrEqualTo;

    /**
     * @return A filter to return only Vulnerability Audits with timeCreated less or equal to the specified value.
     * 
     */
    public Optional<Output<String>> timeCreatedLessThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedLessThanOrEqualTo);
    }

    private GetVulnerabilityAuditsArgs() {}

    private GetVulnerabilityAuditsArgs(GetVulnerabilityAuditsArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.id = $.id;
        this.isSuccess = $.isSuccess;
        this.knowledgeBaseId = $.knowledgeBaseId;
        this.maxObservedSeverityGreaterThanOrEqualTo = $.maxObservedSeverityGreaterThanOrEqualTo;
        this.state = $.state;
        this.timeCreatedGreaterThanOrEqualTo = $.timeCreatedGreaterThanOrEqualTo;
        this.timeCreatedLessThanOrEqualTo = $.timeCreatedLessThanOrEqualTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVulnerabilityAuditsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVulnerabilityAuditsArgs $;

        public Builder() {
            $ = new GetVulnerabilityAuditsArgs();
        }

        public Builder(GetVulnerabilityAuditsArgs defaults) {
            $ = new GetVulnerabilityAuditsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetVulnerabilityAuditsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetVulnerabilityAuditsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetVulnerabilityAuditsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isSuccess A filter to return only successful or failed Vulnerability Audits.
         * 
         * @return builder
         * 
         */
        public Builder isSuccess(@Nullable Output<Boolean> isSuccess) {
            $.isSuccess = isSuccess;
            return this;
        }

        /**
         * @param isSuccess A filter to return only successful or failed Vulnerability Audits.
         * 
         * @return builder
         * 
         */
        public Builder isSuccess(Boolean isSuccess) {
            return isSuccess(Output.of(isSuccess));
        }

        /**
         * @param knowledgeBaseId A filter to return only Vulnerability Audits that were created against the specified knowledge base.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseId(@Nullable Output<String> knowledgeBaseId) {
            $.knowledgeBaseId = knowledgeBaseId;
            return this;
        }

        /**
         * @param knowledgeBaseId A filter to return only Vulnerability Audits that were created against the specified knowledge base.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseId(String knowledgeBaseId) {
            return knowledgeBaseId(Output.of(knowledgeBaseId));
        }

        /**
         * @param maxObservedSeverityGreaterThanOrEqualTo A filter that returns only Vulnerability Audits that have a maximum observed Severity greater than or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedSeverityGreaterThanOrEqualTo(@Nullable Output<String> maxObservedSeverityGreaterThanOrEqualTo) {
            $.maxObservedSeverityGreaterThanOrEqualTo = maxObservedSeverityGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param maxObservedSeverityGreaterThanOrEqualTo A filter that returns only Vulnerability Audits that have a maximum observed Severity greater than or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedSeverityGreaterThanOrEqualTo(String maxObservedSeverityGreaterThanOrEqualTo) {
            return maxObservedSeverityGreaterThanOrEqualTo(Output.of(maxObservedSeverityGreaterThanOrEqualTo));
        }

        /**
         * @param state A filter to return only Vulnerability Audits that match the specified lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only Vulnerability Audits that match the specified lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreatedGreaterThanOrEqualTo A filter to return only Vulnerability Audits with timeCreated greater or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThanOrEqualTo(@Nullable Output<String> timeCreatedGreaterThanOrEqualTo) {
            $.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeCreatedGreaterThanOrEqualTo A filter to return only Vulnerability Audits with timeCreated greater or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThanOrEqualTo(String timeCreatedGreaterThanOrEqualTo) {
            return timeCreatedGreaterThanOrEqualTo(Output.of(timeCreatedGreaterThanOrEqualTo));
        }

        /**
         * @param timeCreatedLessThanOrEqualTo A filter to return only Vulnerability Audits with timeCreated less or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedLessThanOrEqualTo(@Nullable Output<String> timeCreatedLessThanOrEqualTo) {
            $.timeCreatedLessThanOrEqualTo = timeCreatedLessThanOrEqualTo;
            return this;
        }

        /**
         * @param timeCreatedLessThanOrEqualTo A filter to return only Vulnerability Audits with timeCreated less or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedLessThanOrEqualTo(String timeCreatedLessThanOrEqualTo) {
            return timeCreatedLessThanOrEqualTo(Output.of(timeCreatedLessThanOrEqualTo));
        }

        public GetVulnerabilityAuditsArgs build() {
            return $;
        }
    }

}
