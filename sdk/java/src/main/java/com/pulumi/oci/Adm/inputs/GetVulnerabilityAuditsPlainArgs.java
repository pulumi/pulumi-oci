// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Adm.inputs.GetVulnerabilityAuditsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVulnerabilityAuditsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVulnerabilityAuditsPlainArgs Empty = new GetVulnerabilityAuditsPlainArgs();

    /**
     * A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetVulnerabilityAuditsFilter> filters;

    public Optional<List<GetVulnerabilityAuditsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return only successful or failed Vulnerability Audits.
     * 
     */
    @Import(name="isSuccess")
    private @Nullable Boolean isSuccess;

    /**
     * @return A filter to return only successful or failed Vulnerability Audits.
     * 
     */
    public Optional<Boolean> isSuccess() {
        return Optional.ofNullable(this.isSuccess);
    }

    /**
     * A filter to return only Vulnerability Audits that were created against the specified knowledge base.
     * 
     */
    @Import(name="knowledgeBaseId")
    private @Nullable String knowledgeBaseId;

    /**
     * @return A filter to return only Vulnerability Audits that were created against the specified knowledge base.
     * 
     */
    public Optional<String> knowledgeBaseId() {
        return Optional.ofNullable(this.knowledgeBaseId);
    }

    /**
     * A filter that returns only Vulnerability Audits that have a maximum observed Severity greater than or equal to the specified value.
     * 
     */
    @Import(name="maxObservedSeverityGreaterThanOrEqualTo")
    private @Nullable String maxObservedSeverityGreaterThanOrEqualTo;

    /**
     * @return A filter that returns only Vulnerability Audits that have a maximum observed Severity greater than or equal to the specified value.
     * 
     */
    public Optional<String> maxObservedSeverityGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.maxObservedSeverityGreaterThanOrEqualTo);
    }

    /**
     * A filter to return only Vulnerability Audits that match the specified lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only Vulnerability Audits that match the specified lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return only Vulnerability Audits with timeCreated greater or equal to the specified value.
     * 
     */
    @Import(name="timeCreatedGreaterThanOrEqualTo")
    private @Nullable String timeCreatedGreaterThanOrEqualTo;

    /**
     * @return A filter to return only Vulnerability Audits with timeCreated greater or equal to the specified value.
     * 
     */
    public Optional<String> timeCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedGreaterThanOrEqualTo);
    }

    /**
     * A filter to return only Vulnerability Audits with timeCreated less or equal to the specified value.
     * 
     */
    @Import(name="timeCreatedLessThanOrEqualTo")
    private @Nullable String timeCreatedLessThanOrEqualTo;

    /**
     * @return A filter to return only Vulnerability Audits with timeCreated less or equal to the specified value.
     * 
     */
    public Optional<String> timeCreatedLessThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedLessThanOrEqualTo);
    }

    private GetVulnerabilityAuditsPlainArgs() {}

    private GetVulnerabilityAuditsPlainArgs(GetVulnerabilityAuditsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.id = $.id;
        this.isSuccess = $.isSuccess;
        this.knowledgeBaseId = $.knowledgeBaseId;
        this.maxObservedSeverityGreaterThanOrEqualTo = $.maxObservedSeverityGreaterThanOrEqualTo;
        this.state = $.state;
        this.timeCreatedGreaterThanOrEqualTo = $.timeCreatedGreaterThanOrEqualTo;
        this.timeCreatedLessThanOrEqualTo = $.timeCreatedLessThanOrEqualTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVulnerabilityAuditsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVulnerabilityAuditsPlainArgs $;

        public Builder() {
            $ = new GetVulnerabilityAuditsPlainArgs();
        }

        public Builder(GetVulnerabilityAuditsPlainArgs defaults) {
            $ = new GetVulnerabilityAuditsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetVulnerabilityAuditsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetVulnerabilityAuditsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param isSuccess A filter to return only successful or failed Vulnerability Audits.
         * 
         * @return builder
         * 
         */
        public Builder isSuccess(@Nullable Boolean isSuccess) {
            $.isSuccess = isSuccess;
            return this;
        }

        /**
         * @param knowledgeBaseId A filter to return only Vulnerability Audits that were created against the specified knowledge base.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseId(@Nullable String knowledgeBaseId) {
            $.knowledgeBaseId = knowledgeBaseId;
            return this;
        }

        /**
         * @param maxObservedSeverityGreaterThanOrEqualTo A filter that returns only Vulnerability Audits that have a maximum observed Severity greater than or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedSeverityGreaterThanOrEqualTo(@Nullable String maxObservedSeverityGreaterThanOrEqualTo) {
            $.maxObservedSeverityGreaterThanOrEqualTo = maxObservedSeverityGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param state A filter to return only Vulnerability Audits that match the specified lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param timeCreatedGreaterThanOrEqualTo A filter to return only Vulnerability Audits with timeCreated greater or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThanOrEqualTo(@Nullable String timeCreatedGreaterThanOrEqualTo) {
            $.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeCreatedLessThanOrEqualTo A filter to return only Vulnerability Audits with timeCreated less or equal to the specified value.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedLessThanOrEqualTo(@Nullable String timeCreatedLessThanOrEqualTo) {
            $.timeCreatedLessThanOrEqualTo = timeCreatedLessThanOrEqualTo;
            return this;
        }

        public GetVulnerabilityAuditsPlainArgs build() {
            return $;
        }
    }

}
