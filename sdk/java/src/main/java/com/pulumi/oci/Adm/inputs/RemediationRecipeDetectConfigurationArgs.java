// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemediationRecipeDetectConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RemediationRecipeDetectConfigurationArgs Empty = new RemediationRecipeDetectConfigurationArgs();

    /**
     * (Updatable) The list of dependencies to be ignored by the recommendation algorithm. The dependency pattern is matched against the &#39;group:artifact:version&#39; or the purl of a dependency. An asterisk (*) at the end in the dependency pattern acts as a wildcard and matches zero or more characters.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<List<String>> exclusions;

    /**
     * @return (Updatable) The list of dependencies to be ignored by the recommendation algorithm. The dependency pattern is matched against the &#39;group:artifact:version&#39; or the purl of a dependency. An asterisk (*) at the end in the dependency pattern acts as a wildcard and matches zero or more characters.
     * 
     */
    public Optional<Output<List<String>>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * (Updatable) The maximum Common Vulnerability Scoring System Version 2 (CVSS V2) score. An artifact with a CVSS V2 score below this value is not considered for patching.
     * 
     */
    @Import(name="maxPermissibleCvssV2score")
    private @Nullable Output<Double> maxPermissibleCvssV2score;

    /**
     * @return (Updatable) The maximum Common Vulnerability Scoring System Version 2 (CVSS V2) score. An artifact with a CVSS V2 score below this value is not considered for patching.
     * 
     */
    public Optional<Output<Double>> maxPermissibleCvssV2score() {
        return Optional.ofNullable(this.maxPermissibleCvssV2score);
    }

    /**
     * (Updatable) The maximum Common Vulnerability Scoring System Version 3 (CVSS V3) score. An artifact with a CVSS V3 score below this value is not considered for patching.
     * 
     */
    @Import(name="maxPermissibleCvssV3score")
    private @Nullable Output<Double> maxPermissibleCvssV3score;

    /**
     * @return (Updatable) The maximum Common Vulnerability Scoring System Version 3 (CVSS V3) score. An artifact with a CVSS V3 score below this value is not considered for patching.
     * 
     */
    public Optional<Output<Double>> maxPermissibleCvssV3score() {
        return Optional.ofNullable(this.maxPermissibleCvssV3score);
    }

    /**
     * (Updatable) The upgrade policy for recommendations. The `Nearest` upgrade policy upgrades a dependency to the oldest version that meets both of the following criteria: it is newer than the current version and it is not affected by a vulnerability.
     * 
     */
    @Import(name="upgradePolicy")
    private @Nullable Output<String> upgradePolicy;

    /**
     * @return (Updatable) The upgrade policy for recommendations. The `Nearest` upgrade policy upgrades a dependency to the oldest version that meets both of the following criteria: it is newer than the current version and it is not affected by a vulnerability.
     * 
     */
    public Optional<Output<String>> upgradePolicy() {
        return Optional.ofNullable(this.upgradePolicy);
    }

    private RemediationRecipeDetectConfigurationArgs() {}

    private RemediationRecipeDetectConfigurationArgs(RemediationRecipeDetectConfigurationArgs $) {
        this.exclusions = $.exclusions;
        this.maxPermissibleCvssV2score = $.maxPermissibleCvssV2score;
        this.maxPermissibleCvssV3score = $.maxPermissibleCvssV3score;
        this.upgradePolicy = $.upgradePolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemediationRecipeDetectConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemediationRecipeDetectConfigurationArgs $;

        public Builder() {
            $ = new RemediationRecipeDetectConfigurationArgs();
        }

        public Builder(RemediationRecipeDetectConfigurationArgs defaults) {
            $ = new RemediationRecipeDetectConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exclusions (Updatable) The list of dependencies to be ignored by the recommendation algorithm. The dependency pattern is matched against the &#39;group:artifact:version&#39; or the purl of a dependency. An asterisk (*) at the end in the dependency pattern acts as a wildcard and matches zero or more characters.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable Output<List<String>> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions (Updatable) The list of dependencies to be ignored by the recommendation algorithm. The dependency pattern is matched against the &#39;group:artifact:version&#39; or the purl of a dependency. An asterisk (*) at the end in the dependency pattern acts as a wildcard and matches zero or more characters.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(List<String> exclusions) {
            return exclusions(Output.of(exclusions));
        }

        /**
         * @param exclusions (Updatable) The list of dependencies to be ignored by the recommendation algorithm. The dependency pattern is matched against the &#39;group:artifact:version&#39; or the purl of a dependency. An asterisk (*) at the end in the dependency pattern acts as a wildcard and matches zero or more characters.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(String... exclusions) {
            return exclusions(List.of(exclusions));
        }

        /**
         * @param maxPermissibleCvssV2score (Updatable) The maximum Common Vulnerability Scoring System Version 2 (CVSS V2) score. An artifact with a CVSS V2 score below this value is not considered for patching.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV2score(@Nullable Output<Double> maxPermissibleCvssV2score) {
            $.maxPermissibleCvssV2score = maxPermissibleCvssV2score;
            return this;
        }

        /**
         * @param maxPermissibleCvssV2score (Updatable) The maximum Common Vulnerability Scoring System Version 2 (CVSS V2) score. An artifact with a CVSS V2 score below this value is not considered for patching.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV2score(Double maxPermissibleCvssV2score) {
            return maxPermissibleCvssV2score(Output.of(maxPermissibleCvssV2score));
        }

        /**
         * @param maxPermissibleCvssV3score (Updatable) The maximum Common Vulnerability Scoring System Version 3 (CVSS V3) score. An artifact with a CVSS V3 score below this value is not considered for patching.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV3score(@Nullable Output<Double> maxPermissibleCvssV3score) {
            $.maxPermissibleCvssV3score = maxPermissibleCvssV3score;
            return this;
        }

        /**
         * @param maxPermissibleCvssV3score (Updatable) The maximum Common Vulnerability Scoring System Version 3 (CVSS V3) score. An artifact with a CVSS V3 score below this value is not considered for patching.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV3score(Double maxPermissibleCvssV3score) {
            return maxPermissibleCvssV3score(Output.of(maxPermissibleCvssV3score));
        }

        /**
         * @param upgradePolicy (Updatable) The upgrade policy for recommendations. The `Nearest` upgrade policy upgrades a dependency to the oldest version that meets both of the following criteria: it is newer than the current version and it is not affected by a vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder upgradePolicy(@Nullable Output<String> upgradePolicy) {
            $.upgradePolicy = upgradePolicy;
            return this;
        }

        /**
         * @param upgradePolicy (Updatable) The upgrade policy for recommendations. The `Nearest` upgrade policy upgrades a dependency to the oldest version that meets both of the following criteria: it is newer than the current version and it is not affected by a vulnerability.
         * 
         * @return builder
         * 
         */
        public Builder upgradePolicy(String upgradePolicy) {
            return upgradePolicy(Output.of(upgradePolicy));
        }

        public RemediationRecipeDetectConfigurationArgs build() {
            return $;
        }
    }

}
