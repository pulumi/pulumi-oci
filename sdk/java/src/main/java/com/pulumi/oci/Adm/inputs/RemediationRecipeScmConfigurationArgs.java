// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemediationRecipeScmConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RemediationRecipeScmConfigurationArgs Empty = new RemediationRecipeScmConfigurationArgs();

    /**
     * (Updatable) The branch used by ADM to patch vulnerabilities.
     * 
     */
    @Import(name="branch", required=true)
    private Output<String> branch;

    /**
     * @return (Updatable) The branch used by ADM to patch vulnerabilities.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }

    /**
     * (Updatable) The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
     * 
     */
    @Import(name="buildFileLocation")
    private @Nullable Output<String> buildFileLocation;

    /**
     * @return (Updatable) The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
     * 
     */
    public Optional<Output<String>> buildFileLocation() {
        return Optional.ofNullable(this.buildFileLocation);
    }

    /**
     * (Updatable) The type of External Source Code Management.
     * 
     */
    @Import(name="externalScmType")
    private @Nullable Output<String> externalScmType;

    /**
     * @return (Updatable) The type of External Source Code Management.
     * 
     */
    public Optional<Output<String>> externalScmType() {
        return Optional.ofNullable(this.externalScmType);
    }

    /**
     * (Updatable) If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
     * 
     */
    @Import(name="isAutomergeEnabled", required=true)
    private Output<Boolean> isAutomergeEnabled;

    /**
     * @return (Updatable) If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
     * 
     */
    public Output<Boolean> isAutomergeEnabled() {
        return this.isAutomergeEnabled;
    }

    /**
     * (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
     * 
     */
    @Import(name="ociCodeRepositoryId")
    private @Nullable Output<String> ociCodeRepositoryId;

    /**
     * @return (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
     * 
     */
    public Optional<Output<String>> ociCodeRepositoryId() {
        return Optional.ofNullable(this.ociCodeRepositoryId);
    }

    /**
     * (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The secret provides the credentials necessary to authenticate against the SCM.
     * 
     */
    @Import(name="patSecretId")
    private @Nullable Output<String> patSecretId;

    /**
     * @return (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The secret provides the credentials necessary to authenticate against the SCM.
     * 
     */
    public Optional<Output<String>> patSecretId() {
        return Optional.ofNullable(this.patSecretId);
    }

    /**
     * (Updatable) The repository URL for the SCM. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName] For GitLab the expected format is https://gitlab.com/[groupName]/[repoName]
     * 
     */
    @Import(name="repositoryUrl")
    private @Nullable Output<String> repositoryUrl;

    /**
     * @return (Updatable) The repository URL for the SCM. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName] For GitLab the expected format is https://gitlab.com/[groupName]/[repoName]
     * 
     */
    public Optional<Output<String>> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }

    /**
     * (Updatable) The type of Source Code Management.
     * 
     */
    @Import(name="scmType", required=true)
    private Output<String> scmType;

    /**
     * @return (Updatable) The type of Source Code Management.
     * 
     */
    public Output<String> scmType() {
        return this.scmType;
    }

    /**
     * (Updatable) The username for the SCM (to perform operations such as cloning or pushing via HTTP).
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return (Updatable) The username for the SCM (to perform operations such as cloning or pushing via HTTP).
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private RemediationRecipeScmConfigurationArgs() {}

    private RemediationRecipeScmConfigurationArgs(RemediationRecipeScmConfigurationArgs $) {
        this.branch = $.branch;
        this.buildFileLocation = $.buildFileLocation;
        this.externalScmType = $.externalScmType;
        this.isAutomergeEnabled = $.isAutomergeEnabled;
        this.ociCodeRepositoryId = $.ociCodeRepositoryId;
        this.patSecretId = $.patSecretId;
        this.repositoryUrl = $.repositoryUrl;
        this.scmType = $.scmType;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemediationRecipeScmConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemediationRecipeScmConfigurationArgs $;

        public Builder() {
            $ = new RemediationRecipeScmConfigurationArgs();
        }

        public Builder(RemediationRecipeScmConfigurationArgs defaults) {
            $ = new RemediationRecipeScmConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch (Updatable) The branch used by ADM to patch vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder branch(Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch (Updatable) The branch used by ADM to patch vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param buildFileLocation (Updatable) The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
         * 
         * @return builder
         * 
         */
        public Builder buildFileLocation(@Nullable Output<String> buildFileLocation) {
            $.buildFileLocation = buildFileLocation;
            return this;
        }

        /**
         * @param buildFileLocation (Updatable) The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
         * 
         * @return builder
         * 
         */
        public Builder buildFileLocation(String buildFileLocation) {
            return buildFileLocation(Output.of(buildFileLocation));
        }

        /**
         * @param externalScmType (Updatable) The type of External Source Code Management.
         * 
         * @return builder
         * 
         */
        public Builder externalScmType(@Nullable Output<String> externalScmType) {
            $.externalScmType = externalScmType;
            return this;
        }

        /**
         * @param externalScmType (Updatable) The type of External Source Code Management.
         * 
         * @return builder
         * 
         */
        public Builder externalScmType(String externalScmType) {
            return externalScmType(Output.of(externalScmType));
        }

        /**
         * @param isAutomergeEnabled (Updatable) If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
         * 
         * @return builder
         * 
         */
        public Builder isAutomergeEnabled(Output<Boolean> isAutomergeEnabled) {
            $.isAutomergeEnabled = isAutomergeEnabled;
            return this;
        }

        /**
         * @param isAutomergeEnabled (Updatable) If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
         * 
         * @return builder
         * 
         */
        public Builder isAutomergeEnabled(Boolean isAutomergeEnabled) {
            return isAutomergeEnabled(Output.of(isAutomergeEnabled));
        }

        /**
         * @param ociCodeRepositoryId (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
         * 
         * @return builder
         * 
         */
        public Builder ociCodeRepositoryId(@Nullable Output<String> ociCodeRepositoryId) {
            $.ociCodeRepositoryId = ociCodeRepositoryId;
            return this;
        }

        /**
         * @param ociCodeRepositoryId (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
         * 
         * @return builder
         * 
         */
        public Builder ociCodeRepositoryId(String ociCodeRepositoryId) {
            return ociCodeRepositoryId(Output.of(ociCodeRepositoryId));
        }

        /**
         * @param patSecretId (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The secret provides the credentials necessary to authenticate against the SCM.
         * 
         * @return builder
         * 
         */
        public Builder patSecretId(@Nullable Output<String> patSecretId) {
            $.patSecretId = patSecretId;
            return this;
        }

        /**
         * @param patSecretId (Updatable) The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The secret provides the credentials necessary to authenticate against the SCM.
         * 
         * @return builder
         * 
         */
        public Builder patSecretId(String patSecretId) {
            return patSecretId(Output.of(patSecretId));
        }

        /**
         * @param repositoryUrl (Updatable) The repository URL for the SCM. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName] For GitLab the expected format is https://gitlab.com/[groupName]/[repoName]
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(@Nullable Output<String> repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param repositoryUrl (Updatable) The repository URL for the SCM. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName] For GitLab the expected format is https://gitlab.com/[groupName]/[repoName]
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            return repositoryUrl(Output.of(repositoryUrl));
        }

        /**
         * @param scmType (Updatable) The type of Source Code Management.
         * 
         * @return builder
         * 
         */
        public Builder scmType(Output<String> scmType) {
            $.scmType = scmType;
            return this;
        }

        /**
         * @param scmType (Updatable) The type of Source Code Management.
         * 
         * @return builder
         * 
         */
        public Builder scmType(String scmType) {
            return scmType(Output.of(scmType));
        }

        /**
         * @param username (Updatable) The username for the SCM (to perform operations such as cloning or pushing via HTTP).
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username (Updatable) The username for the SCM (to perform operations such as cloning or pushing via HTTP).
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public RemediationRecipeScmConfigurationArgs build() {
            if ($.branch == null) {
                throw new MissingRequiredPropertyException("RemediationRecipeScmConfigurationArgs", "branch");
            }
            if ($.isAutomergeEnabled == null) {
                throw new MissingRequiredPropertyException("RemediationRecipeScmConfigurationArgs", "isAutomergeEnabled");
            }
            if ($.scmType == null) {
                throw new MissingRequiredPropertyException("RemediationRecipeScmConfigurationArgs", "scmType");
            }
            return $;
        }
    }

}
