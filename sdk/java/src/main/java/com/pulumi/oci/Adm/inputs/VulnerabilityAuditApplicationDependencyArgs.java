// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VulnerabilityAuditApplicationDependencyArgs extends com.pulumi.resources.ResourceArgs {

    public static final VulnerabilityAuditApplicationDependencyArgs Empty = new VulnerabilityAuditApplicationDependencyArgs();

    /**
     * List of application dependencies on which this application dependency depends, each identified by its nodeId.
     * 
     */
    @Import(name="applicationDependencyNodeIds")
    private @Nullable Output<List<String>> applicationDependencyNodeIds;

    /**
     * @return List of application dependencies on which this application dependency depends, each identified by its nodeId.
     * 
     */
    public Optional<Output<List<String>>> applicationDependencyNodeIds() {
        return Optional.ofNullable(this.applicationDependencyNodeIds);
    }

    /**
     * Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
     * 
     */
    @Import(name="gav", required=true)
    private Output<String> gav;

    /**
     * @return Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
     * 
     */
    public Output<String> gav() {
        return this.gav;
    }

    /**
     * Unique identifier of an application dependency, for example nodeId1. The nodeId can be generated by assigning a unique id to each application dependency in the tree of application dependencies. Every node, even those who share the same GAV, should have a different nodeId. The preferred way of constructing a nodeId is to assign incremental integers during a breadth first or depth first search. A nodeId can be reused only it refers to the same subtree of application dependencies. (This is not equivalent to referring to the same GAV, that is, a GAV can have multiple transitive dependencies.)
     * 
     */
    @Import(name="nodeId", required=true)
    private Output<String> nodeId;

    /**
     * @return Unique identifier of an application dependency, for example nodeId1. The nodeId can be generated by assigning a unique id to each application dependency in the tree of application dependencies. Every node, even those who share the same GAV, should have a different nodeId. The preferred way of constructing a nodeId is to assign incremental integers during a breadth first or depth first search. A nodeId can be reused only it refers to the same subtree of application dependencies. (This is not equivalent to referring to the same GAV, that is, a GAV can have multiple transitive dependencies.)
     * 
     */
    public Output<String> nodeId() {
        return this.nodeId;
    }

    private VulnerabilityAuditApplicationDependencyArgs() {}

    private VulnerabilityAuditApplicationDependencyArgs(VulnerabilityAuditApplicationDependencyArgs $) {
        this.applicationDependencyNodeIds = $.applicationDependencyNodeIds;
        this.gav = $.gav;
        this.nodeId = $.nodeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityAuditApplicationDependencyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityAuditApplicationDependencyArgs $;

        public Builder() {
            $ = new VulnerabilityAuditApplicationDependencyArgs();
        }

        public Builder(VulnerabilityAuditApplicationDependencyArgs defaults) {
            $ = new VulnerabilityAuditApplicationDependencyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationDependencyNodeIds List of application dependencies on which this application dependency depends, each identified by its nodeId.
         * 
         * @return builder
         * 
         */
        public Builder applicationDependencyNodeIds(@Nullable Output<List<String>> applicationDependencyNodeIds) {
            $.applicationDependencyNodeIds = applicationDependencyNodeIds;
            return this;
        }

        /**
         * @param applicationDependencyNodeIds List of application dependencies on which this application dependency depends, each identified by its nodeId.
         * 
         * @return builder
         * 
         */
        public Builder applicationDependencyNodeIds(List<String> applicationDependencyNodeIds) {
            return applicationDependencyNodeIds(Output.of(applicationDependencyNodeIds));
        }

        /**
         * @param applicationDependencyNodeIds List of application dependencies on which this application dependency depends, each identified by its nodeId.
         * 
         * @return builder
         * 
         */
        public Builder applicationDependencyNodeIds(String... applicationDependencyNodeIds) {
            return applicationDependencyNodeIds(List.of(applicationDependencyNodeIds));
        }

        /**
         * @param gav Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
         * 
         * @return builder
         * 
         */
        public Builder gav(Output<String> gav) {
            $.gav = gav;
            return this;
        }

        /**
         * @param gav Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
         * 
         * @return builder
         * 
         */
        public Builder gav(String gav) {
            return gav(Output.of(gav));
        }

        /**
         * @param nodeId Unique identifier of an application dependency, for example nodeId1. The nodeId can be generated by assigning a unique id to each application dependency in the tree of application dependencies. Every node, even those who share the same GAV, should have a different nodeId. The preferred way of constructing a nodeId is to assign incremental integers during a breadth first or depth first search. A nodeId can be reused only it refers to the same subtree of application dependencies. (This is not equivalent to referring to the same GAV, that is, a GAV can have multiple transitive dependencies.)
         * 
         * @return builder
         * 
         */
        public Builder nodeId(Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId Unique identifier of an application dependency, for example nodeId1. The nodeId can be generated by assigning a unique id to each application dependency in the tree of application dependencies. Every node, even those who share the same GAV, should have a different nodeId. The preferred way of constructing a nodeId is to assign incremental integers during a breadth first or depth first search. A nodeId can be reused only it refers to the same subtree of application dependencies. (This is not equivalent to referring to the same GAV, that is, a GAV can have multiple transitive dependencies.)
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        public VulnerabilityAuditApplicationDependencyArgs build() {
            if ($.gav == null) {
                throw new MissingRequiredPropertyException("VulnerabilityAuditApplicationDependencyArgs", "gav");
            }
            if ($.nodeId == null) {
                throw new MissingRequiredPropertyException("VulnerabilityAuditApplicationDependencyArgs", "nodeId");
            }
            return $;
        }
    }

}
