// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VulnerabilityAuditConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VulnerabilityAuditConfigurationArgs Empty = new VulnerabilityAuditConfigurationArgs();

    /**
     * Pattern to exclude artifacts from audit.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<List<String>> exclusions;

    /**
     * @return Pattern to exclude artifacts from audit.
     * 
     */
    public Optional<Output<List<String>>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
     * 
     */
    @Import(name="maxPermissibleCvssV2score")
    private @Nullable Output<Double> maxPermissibleCvssV2score;

    /**
     * @return The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
     * 
     */
    public Optional<Output<Double>> maxPermissibleCvssV2score() {
        return Optional.ofNullable(this.maxPermissibleCvssV2score);
    }

    /**
     * The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
     * 
     */
    @Import(name="maxPermissibleCvssV3score")
    private @Nullable Output<Double> maxPermissibleCvssV3score;

    /**
     * @return The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
     * 
     */
    public Optional<Output<Double>> maxPermissibleCvssV3score() {
        return Optional.ofNullable(this.maxPermissibleCvssV3score);
    }

    private VulnerabilityAuditConfigurationArgs() {}

    private VulnerabilityAuditConfigurationArgs(VulnerabilityAuditConfigurationArgs $) {
        this.exclusions = $.exclusions;
        this.maxPermissibleCvssV2score = $.maxPermissibleCvssV2score;
        this.maxPermissibleCvssV3score = $.maxPermissibleCvssV3score;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityAuditConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityAuditConfigurationArgs $;

        public Builder() {
            $ = new VulnerabilityAuditConfigurationArgs();
        }

        public Builder(VulnerabilityAuditConfigurationArgs defaults) {
            $ = new VulnerabilityAuditConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exclusions Pattern to exclude artifacts from audit.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable Output<List<String>> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions Pattern to exclude artifacts from audit.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(List<String> exclusions) {
            return exclusions(Output.of(exclusions));
        }

        /**
         * @param exclusions Pattern to exclude artifacts from audit.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(String... exclusions) {
            return exclusions(List.of(exclusions));
        }

        /**
         * @param maxPermissibleCvssV2score The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV2score(@Nullable Output<Double> maxPermissibleCvssV2score) {
            $.maxPermissibleCvssV2score = maxPermissibleCvssV2score;
            return this;
        }

        /**
         * @param maxPermissibleCvssV2score The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV2score(Double maxPermissibleCvssV2score) {
            return maxPermissibleCvssV2score(Output.of(maxPermissibleCvssV2score));
        }

        /**
         * @param maxPermissibleCvssV3score The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV3score(@Nullable Output<Double> maxPermissibleCvssV3score) {
            $.maxPermissibleCvssV3score = maxPermissibleCvssV3score;
            return this;
        }

        /**
         * @param maxPermissibleCvssV3score The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
         * 
         * @return builder
         * 
         */
        public Builder maxPermissibleCvssV3score(Double maxPermissibleCvssV3score) {
            return maxPermissibleCvssV3score(Output.of(maxPermissibleCvssV3score));
        }

        public VulnerabilityAuditConfigurationArgs build() {
            return $;
        }
    }

}
