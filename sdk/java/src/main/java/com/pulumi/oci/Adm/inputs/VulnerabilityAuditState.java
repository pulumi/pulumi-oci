// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Adm.inputs.VulnerabilityAuditApplicationDependencyArgs;
import com.pulumi.oci.Adm.inputs.VulnerabilityAuditConfigurationArgs;
import com.pulumi.oci.Adm.inputs.VulnerabilityAuditSourceArgs;
import com.pulumi.oci.Adm.inputs.VulnerabilityAuditVulnerabilityArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VulnerabilityAuditState extends com.pulumi.resources.ResourceArgs {

    public static final VulnerabilityAuditState Empty = new VulnerabilityAuditState();

    /**
     * List of application dependencies (without vulnerabilities).
     * 
     */
    @Import(name="applicationDependencies")
    private @Nullable Output<List<VulnerabilityAuditApplicationDependencyArgs>> applicationDependencies;

    /**
     * @return List of application dependencies (without vulnerabilities).
     * 
     */
    public Optional<Output<List<VulnerabilityAuditApplicationDependencyArgs>>> applicationDependencies() {
        return Optional.ofNullable(this.applicationDependencies);
    }

    /**
     * The type of the build tool.
     * 
     */
    @Import(name="buildType")
    private @Nullable Output<String> buildType;

    /**
     * @return The type of the build tool.
     * 
     */
    public Optional<Output<String>> buildType() {
        return Optional.ofNullable(this.buildType);
    }

    /**
     * (Updatable) The compartment Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.  If compartment identifier is not provided the compartment of the associated knowledge base will be used instead.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The compartment Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.  If compartment identifier is not provided the compartment of the associated knowledge base will be used instead.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Configuration for a vulnerability audit. A vulnerable application dependency is ignored if its name does match any of the items in `exclusions`, or all of the associated Vulnerabilies have a CVSS v2 score below `maxPermissibleCvssV2Score` and a CVSS v3 score below `maxPermissibleCvssV3Score`. type: object
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<VulnerabilityAuditConfigurationArgs> configuration;

    /**
     * @return Configuration for a vulnerability audit. A vulnerable application dependency is ignored if its name does match any of the items in `exclusions`, or all of the associated Vulnerabilies have a CVSS v2 score below `maxPermissibleCvssV2Score` and a CVSS v3 score below `maxPermissibleCvssV3Score`. type: object
     * 
     */
    public Optional<Output<VulnerabilityAuditConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The name of the vulnerability audit.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The name of the vulnerability audit.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
     * 
     */
    @Import(name="isSuccess")
    private @Nullable Output<Boolean> isSuccess;

    /**
     * @return Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
     * 
     */
    public Optional<Output<Boolean>> isSuccess() {
        return Optional.ofNullable(this.isSuccess);
    }

    /**
     * The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the knowledge base.
     * 
     */
    @Import(name="knowledgeBaseId")
    private @Nullable Output<String> knowledgeBaseId;

    /**
     * @return The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the knowledge base.
     * 
     */
    public Optional<Output<String>> knowledgeBaseId() {
        return Optional.ofNullable(this.knowledgeBaseId);
    }

    /**
     * Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable application dependencies.
     * 
     */
    @Import(name="maxObservedCvssV2score")
    private @Nullable Output<Double> maxObservedCvssV2score;

    /**
     * @return Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable application dependencies.
     * 
     */
    public Optional<Output<Double>> maxObservedCvssV2score() {
        return Optional.ofNullable(this.maxObservedCvssV2score);
    }

    /**
     * Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable application dependencies including ignored ones.
     * 
     */
    @Import(name="maxObservedCvssV2scoreWithIgnored")
    private @Nullable Output<Double> maxObservedCvssV2scoreWithIgnored;

    /**
     * @return Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable application dependencies including ignored ones.
     * 
     */
    public Optional<Output<Double>> maxObservedCvssV2scoreWithIgnored() {
        return Optional.ofNullable(this.maxObservedCvssV2scoreWithIgnored);
    }

    /**
     * Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable application dependencies.
     * 
     */
    @Import(name="maxObservedCvssV3score")
    private @Nullable Output<Double> maxObservedCvssV3score;

    /**
     * @return Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable application dependencies.
     * 
     */
    public Optional<Output<Double>> maxObservedCvssV3score() {
        return Optional.ofNullable(this.maxObservedCvssV3score);
    }

    /**
     * Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable application dependencies including ignored ones.
     * 
     */
    @Import(name="maxObservedCvssV3scoreWithIgnored")
    private @Nullable Output<Double> maxObservedCvssV3scoreWithIgnored;

    /**
     * @return Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable application dependencies including ignored ones.
     * 
     */
    public Optional<Output<Double>> maxObservedCvssV3scoreWithIgnored() {
        return Optional.ofNullable(this.maxObservedCvssV3scoreWithIgnored);
    }

    /**
     * vulnerability audit source.
     * 
     */
    @Import(name="source")
    private @Nullable Output<VulnerabilityAuditSourceArgs> source;

    /**
     * @return vulnerability audit source.
     * 
     */
    public Optional<Output<VulnerabilityAuditSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The current lifecycle state of the vulnerability audit.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the vulnerability audit.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The creation date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The creation date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The update date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The update date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * List of vulnerabilities found in the vulnerability audit.
     * 
     */
    @Import(name="vulnerabilities")
    private @Nullable Output<List<VulnerabilityAuditVulnerabilityArgs>> vulnerabilities;

    /**
     * @return List of vulnerabilities found in the vulnerability audit.
     * 
     */
    public Optional<Output<List<VulnerabilityAuditVulnerabilityArgs>>> vulnerabilities() {
        return Optional.ofNullable(this.vulnerabilities);
    }

    /**
     * Count of non-ignored vulnerable application dependencies.
     * 
     */
    @Import(name="vulnerableArtifactsCount")
    private @Nullable Output<Integer> vulnerableArtifactsCount;

    /**
     * @return Count of non-ignored vulnerable application dependencies.
     * 
     */
    public Optional<Output<Integer>> vulnerableArtifactsCount() {
        return Optional.ofNullable(this.vulnerableArtifactsCount);
    }

    /**
     * Count of all vulnerable application dependencies.
     * 
     */
    @Import(name="vulnerableArtifactsCountWithIgnored")
    private @Nullable Output<Integer> vulnerableArtifactsCountWithIgnored;

    /**
     * @return Count of all vulnerable application dependencies.
     * 
     */
    public Optional<Output<Integer>> vulnerableArtifactsCountWithIgnored() {
        return Optional.ofNullable(this.vulnerableArtifactsCountWithIgnored);
    }

    private VulnerabilityAuditState() {}

    private VulnerabilityAuditState(VulnerabilityAuditState $) {
        this.applicationDependencies = $.applicationDependencies;
        this.buildType = $.buildType;
        this.compartmentId = $.compartmentId;
        this.configuration = $.configuration;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isSuccess = $.isSuccess;
        this.knowledgeBaseId = $.knowledgeBaseId;
        this.maxObservedCvssV2score = $.maxObservedCvssV2score;
        this.maxObservedCvssV2scoreWithIgnored = $.maxObservedCvssV2scoreWithIgnored;
        this.maxObservedCvssV3score = $.maxObservedCvssV3score;
        this.maxObservedCvssV3scoreWithIgnored = $.maxObservedCvssV3scoreWithIgnored;
        this.source = $.source;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.vulnerabilities = $.vulnerabilities;
        this.vulnerableArtifactsCount = $.vulnerableArtifactsCount;
        this.vulnerableArtifactsCountWithIgnored = $.vulnerableArtifactsCountWithIgnored;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityAuditState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityAuditState $;

        public Builder() {
            $ = new VulnerabilityAuditState();
        }

        public Builder(VulnerabilityAuditState defaults) {
            $ = new VulnerabilityAuditState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationDependencies List of application dependencies (without vulnerabilities).
         * 
         * @return builder
         * 
         */
        public Builder applicationDependencies(@Nullable Output<List<VulnerabilityAuditApplicationDependencyArgs>> applicationDependencies) {
            $.applicationDependencies = applicationDependencies;
            return this;
        }

        /**
         * @param applicationDependencies List of application dependencies (without vulnerabilities).
         * 
         * @return builder
         * 
         */
        public Builder applicationDependencies(List<VulnerabilityAuditApplicationDependencyArgs> applicationDependencies) {
            return applicationDependencies(Output.of(applicationDependencies));
        }

        /**
         * @param applicationDependencies List of application dependencies (without vulnerabilities).
         * 
         * @return builder
         * 
         */
        public Builder applicationDependencies(VulnerabilityAuditApplicationDependencyArgs... applicationDependencies) {
            return applicationDependencies(List.of(applicationDependencies));
        }

        /**
         * @param buildType The type of the build tool.
         * 
         * @return builder
         * 
         */
        public Builder buildType(@Nullable Output<String> buildType) {
            $.buildType = buildType;
            return this;
        }

        /**
         * @param buildType The type of the build tool.
         * 
         * @return builder
         * 
         */
        public Builder buildType(String buildType) {
            return buildType(Output.of(buildType));
        }

        /**
         * @param compartmentId (Updatable) The compartment Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.  If compartment identifier is not provided the compartment of the associated knowledge base will be used instead.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The compartment Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.  If compartment identifier is not provided the compartment of the associated knowledge base will be used instead.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param configuration Configuration for a vulnerability audit. A vulnerable application dependency is ignored if its name does match any of the items in `exclusions`, or all of the associated Vulnerabilies have a CVSS v2 score below `maxPermissibleCvssV2Score` and a CVSS v3 score below `maxPermissibleCvssV3Score`. type: object
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<VulnerabilityAuditConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration Configuration for a vulnerability audit. A vulnerable application dependency is ignored if its name does match any of the items in `exclusions`, or all of the associated Vulnerabilies have a CVSS v2 score below `maxPermissibleCvssV2Score` and a CVSS v3 score below `maxPermissibleCvssV3Score`. type: object
         * 
         * @return builder
         * 
         */
        public Builder configuration(VulnerabilityAuditConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) The name of the vulnerability audit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The name of the vulnerability audit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isSuccess Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
         * 
         * @return builder
         * 
         */
        public Builder isSuccess(@Nullable Output<Boolean> isSuccess) {
            $.isSuccess = isSuccess;
            return this;
        }

        /**
         * @param isSuccess Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
         * 
         * @return builder
         * 
         */
        public Builder isSuccess(Boolean isSuccess) {
            return isSuccess(Output.of(isSuccess));
        }

        /**
         * @param knowledgeBaseId The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the knowledge base.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseId(@Nullable Output<String> knowledgeBaseId) {
            $.knowledgeBaseId = knowledgeBaseId;
            return this;
        }

        /**
         * @param knowledgeBaseId The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the knowledge base.
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseId(String knowledgeBaseId) {
            return knowledgeBaseId(Output.of(knowledgeBaseId));
        }

        /**
         * @param maxObservedCvssV2score Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV2score(@Nullable Output<Double> maxObservedCvssV2score) {
            $.maxObservedCvssV2score = maxObservedCvssV2score;
            return this;
        }

        /**
         * @param maxObservedCvssV2score Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV2score(Double maxObservedCvssV2score) {
            return maxObservedCvssV2score(Output.of(maxObservedCvssV2score));
        }

        /**
         * @param maxObservedCvssV2scoreWithIgnored Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable application dependencies including ignored ones.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV2scoreWithIgnored(@Nullable Output<Double> maxObservedCvssV2scoreWithIgnored) {
            $.maxObservedCvssV2scoreWithIgnored = maxObservedCvssV2scoreWithIgnored;
            return this;
        }

        /**
         * @param maxObservedCvssV2scoreWithIgnored Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable application dependencies including ignored ones.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV2scoreWithIgnored(Double maxObservedCvssV2scoreWithIgnored) {
            return maxObservedCvssV2scoreWithIgnored(Output.of(maxObservedCvssV2scoreWithIgnored));
        }

        /**
         * @param maxObservedCvssV3score Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV3score(@Nullable Output<Double> maxObservedCvssV3score) {
            $.maxObservedCvssV3score = maxObservedCvssV3score;
            return this;
        }

        /**
         * @param maxObservedCvssV3score Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV3score(Double maxObservedCvssV3score) {
            return maxObservedCvssV3score(Output.of(maxObservedCvssV3score));
        }

        /**
         * @param maxObservedCvssV3scoreWithIgnored Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable application dependencies including ignored ones.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV3scoreWithIgnored(@Nullable Output<Double> maxObservedCvssV3scoreWithIgnored) {
            $.maxObservedCvssV3scoreWithIgnored = maxObservedCvssV3scoreWithIgnored;
            return this;
        }

        /**
         * @param maxObservedCvssV3scoreWithIgnored Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable application dependencies including ignored ones.
         * 
         * @return builder
         * 
         */
        public Builder maxObservedCvssV3scoreWithIgnored(Double maxObservedCvssV3scoreWithIgnored) {
            return maxObservedCvssV3scoreWithIgnored(Output.of(maxObservedCvssV3scoreWithIgnored));
        }

        /**
         * @param source vulnerability audit source.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<VulnerabilityAuditSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source vulnerability audit source.
         * 
         * @return builder
         * 
         */
        public Builder source(VulnerabilityAuditSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param state The current lifecycle state of the vulnerability audit.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the vulnerability audit.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,Object>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,Object> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated The creation date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The creation date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The update date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The update date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param vulnerabilities List of vulnerabilities found in the vulnerability audit.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilities(@Nullable Output<List<VulnerabilityAuditVulnerabilityArgs>> vulnerabilities) {
            $.vulnerabilities = vulnerabilities;
            return this;
        }

        /**
         * @param vulnerabilities List of vulnerabilities found in the vulnerability audit.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilities(List<VulnerabilityAuditVulnerabilityArgs> vulnerabilities) {
            return vulnerabilities(Output.of(vulnerabilities));
        }

        /**
         * @param vulnerabilities List of vulnerabilities found in the vulnerability audit.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilities(VulnerabilityAuditVulnerabilityArgs... vulnerabilities) {
            return vulnerabilities(List.of(vulnerabilities));
        }

        /**
         * @param vulnerableArtifactsCount Count of non-ignored vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder vulnerableArtifactsCount(@Nullable Output<Integer> vulnerableArtifactsCount) {
            $.vulnerableArtifactsCount = vulnerableArtifactsCount;
            return this;
        }

        /**
         * @param vulnerableArtifactsCount Count of non-ignored vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder vulnerableArtifactsCount(Integer vulnerableArtifactsCount) {
            return vulnerableArtifactsCount(Output.of(vulnerableArtifactsCount));
        }

        /**
         * @param vulnerableArtifactsCountWithIgnored Count of all vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder vulnerableArtifactsCountWithIgnored(@Nullable Output<Integer> vulnerableArtifactsCountWithIgnored) {
            $.vulnerableArtifactsCountWithIgnored = vulnerableArtifactsCountWithIgnored;
            return this;
        }

        /**
         * @param vulnerableArtifactsCountWithIgnored Count of all vulnerable application dependencies.
         * 
         * @return builder
         * 
         */
        public Builder vulnerableArtifactsCountWithIgnored(Integer vulnerableArtifactsCountWithIgnored) {
            return vulnerableArtifactsCountWithIgnored(Output.of(vulnerableArtifactsCountWithIgnored));
        }

        public VulnerabilityAuditState build() {
            return $;
        }
    }

}
