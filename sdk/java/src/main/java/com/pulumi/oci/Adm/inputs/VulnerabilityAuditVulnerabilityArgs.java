// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VulnerabilityAuditVulnerabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final VulnerabilityAuditVulnerabilityArgs Empty = new VulnerabilityAuditVulnerabilityArgs();

    /**
     * Common Vulnerability Scoring System (CVSS) Version 2, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV2Score can be obtained from the metrics field of the listVulnerabilities endpoint.
     * 
     */
    @Import(name="cvssV2score")
    private @Nullable Output<Double> cvssV2score;

    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 2, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV2Score can be obtained from the metrics field of the listVulnerabilities endpoint.
     * 
     */
    public Optional<Output<Double>> cvssV2score() {
        return Optional.ofNullable(this.cvssV2score);
    }

    /**
     * Common Vulnerability Scoring System (CVSS) Version 3, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV3Score can be obtained from the metrics field of the listVulnerabilities endpoint.
     * 
     */
    @Import(name="cvssV3score")
    private @Nullable Output<Double> cvssV3score;

    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 3, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV3Score can be obtained from the metrics field of the listVulnerabilities endpoint.
     * 
     */
    public Optional<Output<Double>> cvssV3score() {
        return Optional.ofNullable(this.cvssV3score);
    }

    /**
     * Unique vulnerability identifier, e.g. CVE-1999-0067.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique vulnerability identifier, e.g. CVE-1999-0067.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
     * 
     */
    @Import(name="isFalsePositive")
    private @Nullable Output<Boolean> isFalsePositive;

    /**
     * @return Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
     * 
     */
    public Optional<Output<Boolean>> isFalsePositive() {
        return Optional.ofNullable(this.isFalsePositive);
    }

    /**
     * Indicates if the vulnerability was ignored according to the audit configuration.
     * 
     */
    @Import(name="isIgnored")
    private @Nullable Output<Boolean> isIgnored;

    /**
     * @return Indicates if the vulnerability was ignored according to the audit configuration.
     * 
     */
    public Optional<Output<Boolean>> isIgnored() {
        return Optional.ofNullable(this.isIgnored);
    }

    /**
     * ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * vulnerability audit source.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return vulnerability audit source.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private VulnerabilityAuditVulnerabilityArgs() {}

    private VulnerabilityAuditVulnerabilityArgs(VulnerabilityAuditVulnerabilityArgs $) {
        this.cvssV2score = $.cvssV2score;
        this.cvssV3score = $.cvssV3score;
        this.id = $.id;
        this.isFalsePositive = $.isFalsePositive;
        this.isIgnored = $.isIgnored;
        this.severity = $.severity;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityAuditVulnerabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityAuditVulnerabilityArgs $;

        public Builder() {
            $ = new VulnerabilityAuditVulnerabilityArgs();
        }

        public Builder(VulnerabilityAuditVulnerabilityArgs defaults) {
            $ = new VulnerabilityAuditVulnerabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cvssV2score Common Vulnerability Scoring System (CVSS) Version 2, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV2Score can be obtained from the metrics field of the listVulnerabilities endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cvssV2score(@Nullable Output<Double> cvssV2score) {
            $.cvssV2score = cvssV2score;
            return this;
        }

        /**
         * @param cvssV2score Common Vulnerability Scoring System (CVSS) Version 2, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV2Score can be obtained from the metrics field of the listVulnerabilities endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cvssV2score(Double cvssV2score) {
            return cvssV2score(Output.of(cvssV2score));
        }

        /**
         * @param cvssV3score Common Vulnerability Scoring System (CVSS) Version 3, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV3Score can be obtained from the metrics field of the listVulnerabilities endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cvssV3score(@Nullable Output<Double> cvssV3score) {
            $.cvssV3score = cvssV3score;
            return this;
        }

        /**
         * @param cvssV3score Common Vulnerability Scoring System (CVSS) Version 3, calculated from the metrics provided in the CVSS vector provided from the vulnerability source. This field is deprecated and will be removed in the future. The cvssV3Score can be obtained from the metrics field of the listVulnerabilities endpoint.
         * 
         * @return builder
         * 
         */
        public Builder cvssV3score(Double cvssV3score) {
            return cvssV3score(Output.of(cvssV3score));
        }

        /**
         * @param id Unique vulnerability identifier, e.g. CVE-1999-0067.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique vulnerability identifier, e.g. CVE-1999-0067.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isFalsePositive Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
         * 
         * @return builder
         * 
         */
        public Builder isFalsePositive(@Nullable Output<Boolean> isFalsePositive) {
            $.isFalsePositive = isFalsePositive;
            return this;
        }

        /**
         * @param isFalsePositive Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
         * 
         * @return builder
         * 
         */
        public Builder isFalsePositive(Boolean isFalsePositive) {
            return isFalsePositive(Output.of(isFalsePositive));
        }

        /**
         * @param isIgnored Indicates if the vulnerability was ignored according to the audit configuration.
         * 
         * @return builder
         * 
         */
        public Builder isIgnored(@Nullable Output<Boolean> isIgnored) {
            $.isIgnored = isIgnored;
            return this;
        }

        /**
         * @param isIgnored Indicates if the vulnerability was ignored according to the audit configuration.
         * 
         * @return builder
         * 
         */
        public Builder isIgnored(Boolean isIgnored) {
            return isIgnored(Output.of(isIgnored));
        }

        /**
         * @param severity ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param source vulnerability audit source.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source vulnerability audit source.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public VulnerabilityAuditVulnerabilityArgs build() {
            return $;
        }
    }

}
