// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRemediationRecipeScmConfiguration {
    /**
     * @return The branch used by ADM to patch vulnerabilities.
     * 
     */
    private String branch;
    /**
     * @return The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
     * 
     */
    private String buildFileLocation;
    /**
     * @return The type of External Source Code Management.
     * 
     */
    private String externalScmType;
    /**
     * @return If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
     * 
     */
    private Boolean isAutomergeEnabled;
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
     * 
     */
    private String ociCodeRepositoryId;
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The PAT provides the credentials to access the Jenkins Pipeline.
     * 
     */
    private String patSecretId;
    /**
     * @return The location of the repository where the GitHub Actions is defined. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName]
     * 
     */
    private String repositoryUrl;
    /**
     * @return The type of Source Code Management.
     * 
     */
    private String scmType;
    /**
     * @return The username that will be used to authenticate with Jenkins.
     * 
     */
    private String username;

    private GetRemediationRecipeScmConfiguration() {}
    /**
     * @return The branch used by ADM to patch vulnerabilities.
     * 
     */
    public String branch() {
        return this.branch;
    }
    /**
     * @return The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
     * 
     */
    public String buildFileLocation() {
        return this.buildFileLocation;
    }
    /**
     * @return The type of External Source Code Management.
     * 
     */
    public String externalScmType() {
        return this.externalScmType;
    }
    /**
     * @return If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
     * 
     */
    public Boolean isAutomergeEnabled() {
        return this.isAutomergeEnabled;
    }
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
     * 
     */
    public String ociCodeRepositoryId() {
        return this.ociCodeRepositoryId;
    }
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The PAT provides the credentials to access the Jenkins Pipeline.
     * 
     */
    public String patSecretId() {
        return this.patSecretId;
    }
    /**
     * @return The location of the repository where the GitHub Actions is defined. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName]
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }
    /**
     * @return The type of Source Code Management.
     * 
     */
    public String scmType() {
        return this.scmType;
    }
    /**
     * @return The username that will be used to authenticate with Jenkins.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRemediationRecipeScmConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branch;
        private String buildFileLocation;
        private String externalScmType;
        private Boolean isAutomergeEnabled;
        private String ociCodeRepositoryId;
        private String patSecretId;
        private String repositoryUrl;
        private String scmType;
        private String username;
        public Builder() {}
        public Builder(GetRemediationRecipeScmConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.buildFileLocation = defaults.buildFileLocation;
    	      this.externalScmType = defaults.externalScmType;
    	      this.isAutomergeEnabled = defaults.isAutomergeEnabled;
    	      this.ociCodeRepositoryId = defaults.ociCodeRepositoryId;
    	      this.patSecretId = defaults.patSecretId;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.scmType = defaults.scmType;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder branch(String branch) {
            this.branch = Objects.requireNonNull(branch);
            return this;
        }
        @CustomType.Setter
        public Builder buildFileLocation(String buildFileLocation) {
            this.buildFileLocation = Objects.requireNonNull(buildFileLocation);
            return this;
        }
        @CustomType.Setter
        public Builder externalScmType(String externalScmType) {
            this.externalScmType = Objects.requireNonNull(externalScmType);
            return this;
        }
        @CustomType.Setter
        public Builder isAutomergeEnabled(Boolean isAutomergeEnabled) {
            this.isAutomergeEnabled = Objects.requireNonNull(isAutomergeEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder ociCodeRepositoryId(String ociCodeRepositoryId) {
            this.ociCodeRepositoryId = Objects.requireNonNull(ociCodeRepositoryId);
            return this;
        }
        @CustomType.Setter
        public Builder patSecretId(String patSecretId) {
            this.patSecretId = Objects.requireNonNull(patSecretId);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = Objects.requireNonNull(repositoryUrl);
            return this;
        }
        @CustomType.Setter
        public Builder scmType(String scmType) {
            this.scmType = Objects.requireNonNull(scmType);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public GetRemediationRecipeScmConfiguration build() {
            final var _resultValue = new GetRemediationRecipeScmConfiguration();
            _resultValue.branch = branch;
            _resultValue.buildFileLocation = buildFileLocation;
            _resultValue.externalScmType = externalScmType;
            _resultValue.isAutomergeEnabled = isAutomergeEnabled;
            _resultValue.ociCodeRepositoryId = ociCodeRepositoryId;
            _resultValue.patSecretId = patSecretId;
            _resultValue.repositoryUrl = repositoryUrl;
            _resultValue.scmType = scmType;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
