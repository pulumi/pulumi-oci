// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRemediationRecipeScmConfiguration {
    /**
     * @return The branch used by ADM to patch vulnerabilities.
     * 
     */
    private @Nullable String branch;
    /**
     * @return The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
     * 
     */
    private @Nullable String buildFileLocation;
    /**
     * @return The type of External Source Code Management.
     * 
     */
    private @Nullable String externalScmType;
    /**
     * @return If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
     * 
     */
    private @Nullable Boolean isAutomergeEnabled;
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
     * 
     */
    private @Nullable String ociCodeRepositoryId;
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The PAT provides the credentials to access the Jenkins Pipeline.
     * 
     */
    private @Nullable String patSecretId;
    /**
     * @return The location of the repository where the GitHub Actions is defined. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName]
     * 
     */
    private @Nullable String repositoryUrl;
    /**
     * @return The type of Source Code Management.
     * 
     */
    private @Nullable String scmType;
    /**
     * @return The username that will be used to authenticate with Jenkins.
     * 
     */
    private @Nullable String username;

    private GetRemediationRecipeScmConfiguration() {}
    /**
     * @return The branch used by ADM to patch vulnerabilities.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported. If this property is not specified, ADM will use the build file located at the root of the repository.
     * 
     */
    public Optional<String> buildFileLocation() {
        return Optional.ofNullable(this.buildFileLocation);
    }
    /**
     * @return The type of External Source Code Management.
     * 
     */
    public Optional<String> externalScmType() {
        return Optional.ofNullable(this.externalScmType);
    }
    /**
     * @return If true, the Pull Request (PR) will be merged after the verify stage completes successfully     If false, the PR with the proposed changes must be reviewed and manually merged.
     * 
     */
    public Optional<Boolean> isAutomergeEnabled() {
        return Optional.ofNullable(this.isAutomergeEnabled);
    }
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Oracle Cloud Infrastructure DevOps repository.
     * 
     */
    public Optional<String> ociCodeRepositoryId() {
        return Optional.ofNullable(this.ociCodeRepositoryId);
    }
    /**
     * @return The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret. The PAT provides the credentials to access the Jenkins Pipeline.
     * 
     */
    public Optional<String> patSecretId() {
        return Optional.ofNullable(this.patSecretId);
    }
    /**
     * @return The location of the repository where the GitHub Actions is defined. For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName] For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName]
     * 
     */
    public Optional<String> repositoryUrl() {
        return Optional.ofNullable(this.repositoryUrl);
    }
    /**
     * @return The type of Source Code Management.
     * 
     */
    public Optional<String> scmType() {
        return Optional.ofNullable(this.scmType);
    }
    /**
     * @return The username that will be used to authenticate with Jenkins.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRemediationRecipeScmConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String branch;
        private @Nullable String buildFileLocation;
        private @Nullable String externalScmType;
        private @Nullable Boolean isAutomergeEnabled;
        private @Nullable String ociCodeRepositoryId;
        private @Nullable String patSecretId;
        private @Nullable String repositoryUrl;
        private @Nullable String scmType;
        private @Nullable String username;
        public Builder() {}
        public Builder(GetRemediationRecipeScmConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.buildFileLocation = defaults.buildFileLocation;
    	      this.externalScmType = defaults.externalScmType;
    	      this.isAutomergeEnabled = defaults.isAutomergeEnabled;
    	      this.ociCodeRepositoryId = defaults.ociCodeRepositoryId;
    	      this.patSecretId = defaults.patSecretId;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.scmType = defaults.scmType;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder branch(@Nullable String branch) {
            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder buildFileLocation(@Nullable String buildFileLocation) {
            this.buildFileLocation = buildFileLocation;
            return this;
        }
        @CustomType.Setter
        public Builder externalScmType(@Nullable String externalScmType) {
            this.externalScmType = externalScmType;
            return this;
        }
        @CustomType.Setter
        public Builder isAutomergeEnabled(@Nullable Boolean isAutomergeEnabled) {
            this.isAutomergeEnabled = isAutomergeEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ociCodeRepositoryId(@Nullable String ociCodeRepositoryId) {
            this.ociCodeRepositoryId = ociCodeRepositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder patSecretId(@Nullable String patSecretId) {
            this.patSecretId = patSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(@Nullable String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder scmType(@Nullable String scmType) {
            this.scmType = scmType;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        public GetRemediationRecipeScmConfiguration build() {
            final var o = new GetRemediationRecipeScmConfiguration();
            o.branch = branch;
            o.buildFileLocation = buildFileLocation;
            o.externalScmType = externalScmType;
            o.isAutomergeEnabled = isAutomergeEnabled;
            o.ociCodeRepositoryId = ociCodeRepositoryId;
            o.patSecretId = patSecretId;
            o.repositoryUrl = repositoryUrl;
            o.scmType = scmType;
            o.username = username;
            return o;
        }
    }
}
