// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Adm.outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem {
    /**
     * @return List of application dependencies on which this application dependency depends, each identified by its nodeId.
     * 
     */
    private List<String> applicationDependencyNodeIds;
    /**
     * @return A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
     * 
     */
    private String gav;
    /**
     * @return Indicates if the artifact is found in the knowledge base, this field is deprecated and will be removed in the future.
     * 
     */
    private Boolean isFoundInKnowledgeBase;
    /**
     * @return Unique identifier of an application dependency, for example nodeId1.
     * 
     */
    private String nodeId;
    /**
     * @return A filter to return only resources that match the entire purl given.
     * 
     */
    private String purl;
    /**
     * @return List of vulnerabilities for the application dependency.
     * 
     */
    private List<GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability> vulnerabilities;
    /**
     * @return Potential issues in the artifact identifiers (purls) provided by the user, that the user is alerted about. ADM supports the following warnings:
     * * MISSING_VERSION: Missing version
     * * INCORRECT_FORMAT_VERSION: Version can not be parsed according to the ecosystem
     * * UNKNOWN_ECOSYSTEM: The purl&#39;s ecosystem is unknown to ADM
     * * INCORRECT_FORMAT_EPOCH: Epoch qualifier can not be parsed according to the ecosystem
     * * MISSING_DISTRO: The distro qualifier is required for the ecosystem, but was not provided in the purl
     * * UNKNOWN_DISTRO: ADM does not have data for the provided distro value for the given ecosystem
     * * MISSING_ARCH: The arch qualifier is required for the ecosystem and distro, but was not provided in the purl
     * * UNKNOWN_ARCH: ADM does not have data for the provided arch value for the given ecosystem and distro
     * * EPOCH_VALUE_MISMATCH: Epoch value in qualifier is not the same as the epoch value in version
     * * INVALID_PURL: The provided PURL could not be parsed
     * 
     */
    private List<String> warnings;

    private GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem() {}
    /**
     * @return List of application dependencies on which this application dependency depends, each identified by its nodeId.
     * 
     */
    public List<String> applicationDependencyNodeIds() {
        return this.applicationDependencyNodeIds;
    }
    /**
     * @return A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
     * 
     */
    public String gav() {
        return this.gav;
    }
    /**
     * @return Indicates if the artifact is found in the knowledge base, this field is deprecated and will be removed in the future.
     * 
     */
    public Boolean isFoundInKnowledgeBase() {
        return this.isFoundInKnowledgeBase;
    }
    /**
     * @return Unique identifier of an application dependency, for example nodeId1.
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }
    /**
     * @return A filter to return only resources that match the entire purl given.
     * 
     */
    public String purl() {
        return this.purl;
    }
    /**
     * @return List of vulnerabilities for the application dependency.
     * 
     */
    public List<GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability> vulnerabilities() {
        return this.vulnerabilities;
    }
    /**
     * @return Potential issues in the artifact identifiers (purls) provided by the user, that the user is alerted about. ADM supports the following warnings:
     * * MISSING_VERSION: Missing version
     * * INCORRECT_FORMAT_VERSION: Version can not be parsed according to the ecosystem
     * * UNKNOWN_ECOSYSTEM: The purl&#39;s ecosystem is unknown to ADM
     * * INCORRECT_FORMAT_EPOCH: Epoch qualifier can not be parsed according to the ecosystem
     * * MISSING_DISTRO: The distro qualifier is required for the ecosystem, but was not provided in the purl
     * * UNKNOWN_DISTRO: ADM does not have data for the provided distro value for the given ecosystem
     * * MISSING_ARCH: The arch qualifier is required for the ecosystem and distro, but was not provided in the purl
     * * UNKNOWN_ARCH: ADM does not have data for the provided arch value for the given ecosystem and distro
     * * EPOCH_VALUE_MISMATCH: Epoch value in qualifier is not the same as the epoch value in version
     * * INVALID_PURL: The provided PURL could not be parsed
     * 
     */
    public List<String> warnings() {
        return this.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> applicationDependencyNodeIds;
        private String gav;
        private Boolean isFoundInKnowledgeBase;
        private String nodeId;
        private String purl;
        private List<GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability> vulnerabilities;
        private List<String> warnings;
        public Builder() {}
        public Builder(GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationDependencyNodeIds = defaults.applicationDependencyNodeIds;
    	      this.gav = defaults.gav;
    	      this.isFoundInKnowledgeBase = defaults.isFoundInKnowledgeBase;
    	      this.nodeId = defaults.nodeId;
    	      this.purl = defaults.purl;
    	      this.vulnerabilities = defaults.vulnerabilities;
    	      this.warnings = defaults.warnings;
        }

        @CustomType.Setter
        public Builder applicationDependencyNodeIds(List<String> applicationDependencyNodeIds) {
            if (applicationDependencyNodeIds == null) {
              throw new MissingRequiredPropertyException("GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem", "applicationDependencyNodeIds");
            }
            this.applicationDependencyNodeIds = applicationDependencyNodeIds;
            return this;
        }
        public Builder applicationDependencyNodeIds(String... applicationDependencyNodeIds) {
            return applicationDependencyNodeIds(List.of(applicationDependencyNodeIds));
        }
        @CustomType.Setter
        public Builder gav(String gav) {
            if (gav == null) {
              throw new MissingRequiredPropertyException("GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem", "gav");
            }
            this.gav = gav;
            return this;
        }
        @CustomType.Setter
        public Builder isFoundInKnowledgeBase(Boolean isFoundInKnowledgeBase) {
            if (isFoundInKnowledgeBase == null) {
              throw new MissingRequiredPropertyException("GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem", "isFoundInKnowledgeBase");
            }
            this.isFoundInKnowledgeBase = isFoundInKnowledgeBase;
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(String nodeId) {
            if (nodeId == null) {
              throw new MissingRequiredPropertyException("GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem", "nodeId");
            }
            this.nodeId = nodeId;
            return this;
        }
        @CustomType.Setter
        public Builder purl(String purl) {
            if (purl == null) {
              throw new MissingRequiredPropertyException("GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem", "purl");
            }
            this.purl = purl;
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilities(List<GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability> vulnerabilities) {
            if (vulnerabilities == null) {
              throw new MissingRequiredPropertyException("GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem", "vulnerabilities");
            }
            this.vulnerabilities = vulnerabilities;
            return this;
        }
        public Builder vulnerabilities(GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability... vulnerabilities) {
            return vulnerabilities(List.of(vulnerabilities));
        }
        @CustomType.Setter
        public Builder warnings(List<String> warnings) {
            if (warnings == null) {
              throw new MissingRequiredPropertyException("GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem", "warnings");
            }
            this.warnings = warnings;
            return this;
        }
        public Builder warnings(String... warnings) {
            return warnings(List.of(warnings));
        }
        public GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem build() {
            final var _resultValue = new GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem();
            _resultValue.applicationDependencyNodeIds = applicationDependencyNodeIds;
            _resultValue.gav = gav;
            _resultValue.isFoundInKnowledgeBase = isFoundInKnowledgeBase;
            _resultValue.nodeId = nodeId;
            _resultValue.purl = purl;
            _resultValue.vulnerabilities = vulnerabilities;
            _resultValue.warnings = warnings;
            return _resultValue;
        }
    }
}
