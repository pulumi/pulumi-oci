// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability {
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 2.
     * 
     */
    private Double cvssV2score;
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 3.
     * 
     */
    private Double cvssV3score;
    /**
     * @return Unique vulnerability identifier, e.g. CVE-1999-0067.
     * 
     */
    private String id;
    /**
     * @return Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
     * 
     */
    private Boolean isFalsePositive;
    /**
     * @return Indicates if the vulnerability was ignored according to the audit configuration.
     * 
     */
    private Boolean isIgnored;

    private GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability() {}
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 2.
     * 
     */
    public Double cvssV2score() {
        return this.cvssV2score;
    }
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 3.
     * 
     */
    public Double cvssV3score() {
        return this.cvssV3score;
    }
    /**
     * @return Unique vulnerability identifier, e.g. CVE-1999-0067.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
     * 
     */
    public Boolean isFalsePositive() {
        return this.isFalsePositive;
    }
    /**
     * @return Indicates if the vulnerability was ignored according to the audit configuration.
     * 
     */
    public Boolean isIgnored() {
        return this.isIgnored;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double cvssV2score;
        private Double cvssV3score;
        private String id;
        private Boolean isFalsePositive;
        private Boolean isIgnored;
        public Builder() {}
        public Builder(GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cvssV2score = defaults.cvssV2score;
    	      this.cvssV3score = defaults.cvssV3score;
    	      this.id = defaults.id;
    	      this.isFalsePositive = defaults.isFalsePositive;
    	      this.isIgnored = defaults.isIgnored;
        }

        @CustomType.Setter
        public Builder cvssV2score(Double cvssV2score) {
            this.cvssV2score = Objects.requireNonNull(cvssV2score);
            return this;
        }
        @CustomType.Setter
        public Builder cvssV3score(Double cvssV3score) {
            this.cvssV3score = Objects.requireNonNull(cvssV3score);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isFalsePositive(Boolean isFalsePositive) {
            this.isFalsePositive = Objects.requireNonNull(isFalsePositive);
            return this;
        }
        @CustomType.Setter
        public Builder isIgnored(Boolean isIgnored) {
            this.isIgnored = Objects.requireNonNull(isIgnored);
            return this;
        }
        public GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability build() {
            final var o = new GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability();
            o.cvssV2score = cvssV2score;
            o.cvssV3score = cvssV3score;
            o.id = id;
            o.isFalsePositive = isFalsePositive;
            o.isIgnored = isIgnored;
            return o;
        }
    }
}
