// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class VulnerabilityAuditApplicationDependency {
    /**
     * @return List of Application Dependencies on which this Application Dependency depends, each identified by its nodeId.
     * 
     */
    private @Nullable List<String> applicationDependencyNodeIds;
    /**
     * @return Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
     * 
     */
    private String gav;
    /**
     * @return Unique identifier of an Application Dependency, for example nodeId1. The nodeId can be generated by assigning a unique id to each application dependency in the tree of application dependencies. Every node, even those who share the same GAV, should have a different nodeId. The preferred way of constructing a nodeId is to assign incremental integers during a breadth first or depth first search. A nodeId can be reused only it refers to the same subtree of application dependencies. (This is not equivalent to referring to the same GAV, that is, a GAV can have multiple transitive dependencies.)
     * 
     */
    private String nodeId;

    private VulnerabilityAuditApplicationDependency() {}
    /**
     * @return List of Application Dependencies on which this Application Dependency depends, each identified by its nodeId.
     * 
     */
    public List<String> applicationDependencyNodeIds() {
        return this.applicationDependencyNodeIds == null ? List.of() : this.applicationDependencyNodeIds;
    }
    /**
     * @return Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
     * 
     */
    public String gav() {
        return this.gav;
    }
    /**
     * @return Unique identifier of an Application Dependency, for example nodeId1. The nodeId can be generated by assigning a unique id to each application dependency in the tree of application dependencies. Every node, even those who share the same GAV, should have a different nodeId. The preferred way of constructing a nodeId is to assign incremental integers during a breadth first or depth first search. A nodeId can be reused only it refers to the same subtree of application dependencies. (This is not equivalent to referring to the same GAV, that is, a GAV can have multiple transitive dependencies.)
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VulnerabilityAuditApplicationDependency defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> applicationDependencyNodeIds;
        private String gav;
        private String nodeId;
        public Builder() {}
        public Builder(VulnerabilityAuditApplicationDependency defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationDependencyNodeIds = defaults.applicationDependencyNodeIds;
    	      this.gav = defaults.gav;
    	      this.nodeId = defaults.nodeId;
        }

        @CustomType.Setter
        public Builder applicationDependencyNodeIds(@Nullable List<String> applicationDependencyNodeIds) {
            this.applicationDependencyNodeIds = applicationDependencyNodeIds;
            return this;
        }
        public Builder applicationDependencyNodeIds(String... applicationDependencyNodeIds) {
            return applicationDependencyNodeIds(List.of(applicationDependencyNodeIds));
        }
        @CustomType.Setter
        public Builder gav(String gav) {
            this.gav = Objects.requireNonNull(gav);
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(String nodeId) {
            this.nodeId = Objects.requireNonNull(nodeId);
            return this;
        }
        public VulnerabilityAuditApplicationDependency build() {
            final var o = new VulnerabilityAuditApplicationDependency();
            o.applicationDependencyNodeIds = applicationDependencyNodeIds;
            o.gav = gav;
            o.nodeId = nodeId;
            return o;
        }
    }
}
