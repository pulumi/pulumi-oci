// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Adm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VulnerabilityAuditVulnerability {
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 2.
     * 
     */
    private @Nullable Double cvssV2score;
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 3.
     * 
     */
    private @Nullable Double cvssV3score;
    /**
     * @return Unique vulnerability identifier, e.g. CVE-1999-0067.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
     * 
     */
    private @Nullable Boolean isFalsePositive;
    /**
     * @return Indicates if the vulnerability was ignored according to the audit configuration.
     * 
     */
    private @Nullable Boolean isIgnored;
    /**
     * @return ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
     * 
     */
    private @Nullable String severity;
    /**
     * @return vulnerability audit source.
     * 
     */
    private @Nullable String source;

    private VulnerabilityAuditVulnerability() {}
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 2.
     * 
     */
    public Optional<Double> cvssV2score() {
        return Optional.ofNullable(this.cvssV2score);
    }
    /**
     * @return Common Vulnerability Scoring System (CVSS) Version 3.
     * 
     */
    public Optional<Double> cvssV3score() {
        return Optional.ofNullable(this.cvssV3score);
    }
    /**
     * @return Unique vulnerability identifier, e.g. CVE-1999-0067.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
     * 
     */
    public Optional<Boolean> isFalsePositive() {
        return Optional.ofNullable(this.isFalsePositive);
    }
    /**
     * @return Indicates if the vulnerability was ignored according to the audit configuration.
     * 
     */
    public Optional<Boolean> isIgnored() {
        return Optional.ofNullable(this.isIgnored);
    }
    /**
     * @return ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    /**
     * @return vulnerability audit source.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VulnerabilityAuditVulnerability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double cvssV2score;
        private @Nullable Double cvssV3score;
        private @Nullable String id;
        private @Nullable Boolean isFalsePositive;
        private @Nullable Boolean isIgnored;
        private @Nullable String severity;
        private @Nullable String source;
        public Builder() {}
        public Builder(VulnerabilityAuditVulnerability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cvssV2score = defaults.cvssV2score;
    	      this.cvssV3score = defaults.cvssV3score;
    	      this.id = defaults.id;
    	      this.isFalsePositive = defaults.isFalsePositive;
    	      this.isIgnored = defaults.isIgnored;
    	      this.severity = defaults.severity;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder cvssV2score(@Nullable Double cvssV2score) {

            this.cvssV2score = cvssV2score;
            return this;
        }
        @CustomType.Setter
        public Builder cvssV3score(@Nullable Double cvssV3score) {

            this.cvssV3score = cvssV3score;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isFalsePositive(@Nullable Boolean isFalsePositive) {

            this.isFalsePositive = isFalsePositive;
            return this;
        }
        @CustomType.Setter
        public Builder isIgnored(@Nullable Boolean isIgnored) {

            this.isIgnored = isIgnored;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {

            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {

            this.source = source;
            return this;
        }
        public VulnerabilityAuditVulnerability build() {
            final var _resultValue = new VulnerabilityAuditVulnerability();
            _resultValue.cvssV2score = cvssV2score;
            _resultValue.cvssV3score = cvssV3score;
            _resultValue.id = id;
            _resultValue.isFalsePositive = isFalsePositive;
            _resultValue.isIgnored = isIgnored;
            _resultValue.severity = severity;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
