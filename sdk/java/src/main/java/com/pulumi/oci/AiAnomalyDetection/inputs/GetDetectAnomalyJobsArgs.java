// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiAnomalyDetection.inputs.GetDetectAnomalyJobsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDetectAnomalyJobsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDetectAnomalyJobsArgs Empty = new GetDetectAnomalyJobsArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Unique Async Job identifier
     * 
     */
    @Import(name="detectAnomalyJobId")
    private @Nullable Output<String> detectAnomalyJobId;

    /**
     * @return Unique Async Job identifier
     * 
     */
    public Optional<Output<String>> detectAnomalyJobId() {
        return Optional.ofNullable(this.detectAnomalyJobId);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDetectAnomalyJobsFilterArgs>> filters;

    public Optional<Output<List<GetDetectAnomalyJobsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The ID of the trained model for which to list the resources.
     * 
     */
    @Import(name="modelId")
    private @Nullable Output<String> modelId;

    /**
     * @return The ID of the trained model for which to list the resources.
     * 
     */
    public Optional<Output<String>> modelId() {
        return Optional.ofNullable(this.modelId);
    }

    /**
     * The ID of the project for which to list the objects.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project for which to list the objects.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetDetectAnomalyJobsArgs() {}

    private GetDetectAnomalyJobsArgs(GetDetectAnomalyJobsArgs $) {
        this.compartmentId = $.compartmentId;
        this.detectAnomalyJobId = $.detectAnomalyJobId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.modelId = $.modelId;
        this.projectId = $.projectId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDetectAnomalyJobsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDetectAnomalyJobsArgs $;

        public Builder() {
            $ = new GetDetectAnomalyJobsArgs();
        }

        public Builder(GetDetectAnomalyJobsArgs defaults) {
            $ = new GetDetectAnomalyJobsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param detectAnomalyJobId Unique Async Job identifier
         * 
         * @return builder
         * 
         */
        public Builder detectAnomalyJobId(@Nullable Output<String> detectAnomalyJobId) {
            $.detectAnomalyJobId = detectAnomalyJobId;
            return this;
        }

        /**
         * @param detectAnomalyJobId Unique Async Job identifier
         * 
         * @return builder
         * 
         */
        public Builder detectAnomalyJobId(String detectAnomalyJobId) {
            return detectAnomalyJobId(Output.of(detectAnomalyJobId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetDetectAnomalyJobsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDetectAnomalyJobsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDetectAnomalyJobsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param modelId The ID of the trained model for which to list the resources.
         * 
         * @return builder
         * 
         */
        public Builder modelId(@Nullable Output<String> modelId) {
            $.modelId = modelId;
            return this;
        }

        /**
         * @param modelId The ID of the trained model for which to list the resources.
         * 
         * @return builder
         * 
         */
        public Builder modelId(String modelId) {
            return modelId(Output.of(modelId));
        }

        /**
         * @param projectId The ID of the project for which to list the objects.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project for which to list the objects.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param state &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetDetectAnomalyJobsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDetectAnomalyJobsArgs", "compartmentId");
            }
            return $;
        }
    }

}
