// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.AiAnomalyDetection.inputs.ModelModelTrainingResultRowReductionDetailArgs;
import com.pulumi.oci.AiAnomalyDetection.inputs.ModelModelTrainingResultSignalDetailArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelModelTrainingResultArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelModelTrainingResultArgs Empty = new ModelModelTrainingResultArgs();

    /**
     * Accuracy metric for a signal.
     * 
     */
    @Import(name="fap")
    private @Nullable Output<Double> fap;

    /**
     * @return Accuracy metric for a signal.
     * 
     */
    public Optional<Output<Double>> fap() {
        return Optional.ofNullable(this.fap);
    }

    /**
     * A boolean value to indicate if train goal/targetFap is achieved for trained model
     * 
     */
    @Import(name="isTrainingGoalAchieved")
    private @Nullable Output<Boolean> isTrainingGoalAchieved;

    /**
     * @return A boolean value to indicate if train goal/targetFap is achieved for trained model
     * 
     */
    public Optional<Output<Boolean>> isTrainingGoalAchieved() {
        return Optional.ofNullable(this.isTrainingGoalAchieved);
    }

    @Import(name="mae")
    private @Nullable Output<Double> mae;

    public Optional<Output<Double>> mae() {
        return Optional.ofNullable(this.mae);
    }

    @Import(name="maxInferenceSyncRows")
    private @Nullable Output<Integer> maxInferenceSyncRows;

    public Optional<Output<Integer>> maxInferenceSyncRows() {
        return Optional.ofNullable(this.maxInferenceSyncRows);
    }

    /**
     * The model accuracy metric on timestamp level.
     * 
     */
    @Import(name="multivariateFap")
    private @Nullable Output<Double> multivariateFap;

    /**
     * @return The model accuracy metric on timestamp level.
     * 
     */
    public Optional<Output<Double>> multivariateFap() {
        return Optional.ofNullable(this.multivariateFap);
    }

    @Import(name="rmse")
    private @Nullable Output<Double> rmse;

    public Optional<Output<Double>> rmse() {
        return Optional.ofNullable(this.rmse);
    }

    /**
     * Information regarding how/what row reduction methods will be applied. If this property is not present or is null, then it means row reduction is not applied.
     * 
     */
    @Import(name="rowReductionDetails")
    private @Nullable Output<List<ModelModelTrainingResultRowReductionDetailArgs>> rowReductionDetails;

    /**
     * @return Information regarding how/what row reduction methods will be applied. If this property is not present or is null, then it means row reduction is not applied.
     * 
     */
    public Optional<Output<List<ModelModelTrainingResultRowReductionDetailArgs>>> rowReductionDetails() {
        return Optional.ofNullable(this.rowReductionDetails);
    }

    /**
     * The list of signal details.
     * 
     */
    @Import(name="signalDetails")
    private @Nullable Output<List<ModelModelTrainingResultSignalDetailArgs>> signalDetails;

    /**
     * @return The list of signal details.
     * 
     */
    public Optional<Output<List<ModelModelTrainingResultSignalDetailArgs>>> signalDetails() {
        return Optional.ofNullable(this.signalDetails);
    }

    /**
     * A warning message to explain the reason when targetFap cannot be achieved for trained model
     * 
     */
    @Import(name="warning")
    private @Nullable Output<String> warning;

    /**
     * @return A warning message to explain the reason when targetFap cannot be achieved for trained model
     * 
     */
    public Optional<Output<String>> warning() {
        return Optional.ofNullable(this.warning);
    }

    /**
     * Window size defined during training or deduced by the algorithm.
     * 
     */
    @Import(name="windowSize")
    private @Nullable Output<Integer> windowSize;

    /**
     * @return Window size defined during training or deduced by the algorithm.
     * 
     */
    public Optional<Output<Integer>> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    private ModelModelTrainingResultArgs() {}

    private ModelModelTrainingResultArgs(ModelModelTrainingResultArgs $) {
        this.fap = $.fap;
        this.isTrainingGoalAchieved = $.isTrainingGoalAchieved;
        this.mae = $.mae;
        this.maxInferenceSyncRows = $.maxInferenceSyncRows;
        this.multivariateFap = $.multivariateFap;
        this.rmse = $.rmse;
        this.rowReductionDetails = $.rowReductionDetails;
        this.signalDetails = $.signalDetails;
        this.warning = $.warning;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelModelTrainingResultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelModelTrainingResultArgs $;

        public Builder() {
            $ = new ModelModelTrainingResultArgs();
        }

        public Builder(ModelModelTrainingResultArgs defaults) {
            $ = new ModelModelTrainingResultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fap Accuracy metric for a signal.
         * 
         * @return builder
         * 
         */
        public Builder fap(@Nullable Output<Double> fap) {
            $.fap = fap;
            return this;
        }

        /**
         * @param fap Accuracy metric for a signal.
         * 
         * @return builder
         * 
         */
        public Builder fap(Double fap) {
            return fap(Output.of(fap));
        }

        /**
         * @param isTrainingGoalAchieved A boolean value to indicate if train goal/targetFap is achieved for trained model
         * 
         * @return builder
         * 
         */
        public Builder isTrainingGoalAchieved(@Nullable Output<Boolean> isTrainingGoalAchieved) {
            $.isTrainingGoalAchieved = isTrainingGoalAchieved;
            return this;
        }

        /**
         * @param isTrainingGoalAchieved A boolean value to indicate if train goal/targetFap is achieved for trained model
         * 
         * @return builder
         * 
         */
        public Builder isTrainingGoalAchieved(Boolean isTrainingGoalAchieved) {
            return isTrainingGoalAchieved(Output.of(isTrainingGoalAchieved));
        }

        public Builder mae(@Nullable Output<Double> mae) {
            $.mae = mae;
            return this;
        }

        public Builder mae(Double mae) {
            return mae(Output.of(mae));
        }

        public Builder maxInferenceSyncRows(@Nullable Output<Integer> maxInferenceSyncRows) {
            $.maxInferenceSyncRows = maxInferenceSyncRows;
            return this;
        }

        public Builder maxInferenceSyncRows(Integer maxInferenceSyncRows) {
            return maxInferenceSyncRows(Output.of(maxInferenceSyncRows));
        }

        /**
         * @param multivariateFap The model accuracy metric on timestamp level.
         * 
         * @return builder
         * 
         */
        public Builder multivariateFap(@Nullable Output<Double> multivariateFap) {
            $.multivariateFap = multivariateFap;
            return this;
        }

        /**
         * @param multivariateFap The model accuracy metric on timestamp level.
         * 
         * @return builder
         * 
         */
        public Builder multivariateFap(Double multivariateFap) {
            return multivariateFap(Output.of(multivariateFap));
        }

        public Builder rmse(@Nullable Output<Double> rmse) {
            $.rmse = rmse;
            return this;
        }

        public Builder rmse(Double rmse) {
            return rmse(Output.of(rmse));
        }

        /**
         * @param rowReductionDetails Information regarding how/what row reduction methods will be applied. If this property is not present or is null, then it means row reduction is not applied.
         * 
         * @return builder
         * 
         */
        public Builder rowReductionDetails(@Nullable Output<List<ModelModelTrainingResultRowReductionDetailArgs>> rowReductionDetails) {
            $.rowReductionDetails = rowReductionDetails;
            return this;
        }

        /**
         * @param rowReductionDetails Information regarding how/what row reduction methods will be applied. If this property is not present or is null, then it means row reduction is not applied.
         * 
         * @return builder
         * 
         */
        public Builder rowReductionDetails(List<ModelModelTrainingResultRowReductionDetailArgs> rowReductionDetails) {
            return rowReductionDetails(Output.of(rowReductionDetails));
        }

        /**
         * @param rowReductionDetails Information regarding how/what row reduction methods will be applied. If this property is not present or is null, then it means row reduction is not applied.
         * 
         * @return builder
         * 
         */
        public Builder rowReductionDetails(ModelModelTrainingResultRowReductionDetailArgs... rowReductionDetails) {
            return rowReductionDetails(List.of(rowReductionDetails));
        }

        /**
         * @param signalDetails The list of signal details.
         * 
         * @return builder
         * 
         */
        public Builder signalDetails(@Nullable Output<List<ModelModelTrainingResultSignalDetailArgs>> signalDetails) {
            $.signalDetails = signalDetails;
            return this;
        }

        /**
         * @param signalDetails The list of signal details.
         * 
         * @return builder
         * 
         */
        public Builder signalDetails(List<ModelModelTrainingResultSignalDetailArgs> signalDetails) {
            return signalDetails(Output.of(signalDetails));
        }

        /**
         * @param signalDetails The list of signal details.
         * 
         * @return builder
         * 
         */
        public Builder signalDetails(ModelModelTrainingResultSignalDetailArgs... signalDetails) {
            return signalDetails(List.of(signalDetails));
        }

        /**
         * @param warning A warning message to explain the reason when targetFap cannot be achieved for trained model
         * 
         * @return builder
         * 
         */
        public Builder warning(@Nullable Output<String> warning) {
            $.warning = warning;
            return this;
        }

        /**
         * @param warning A warning message to explain the reason when targetFap cannot be achieved for trained model
         * 
         * @return builder
         * 
         */
        public Builder warning(String warning) {
            return warning(Output.of(warning));
        }

        /**
         * @param windowSize Window size defined during training or deduced by the algorithm.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(@Nullable Output<Integer> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize Window size defined during training or deduced by the algorithm.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(Integer windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public ModelModelTrainingResultArgs build() {
            return $;
        }
    }

}
