// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDetectionModelModelTrainingDetail {
    /**
     * @return User can choose specific algorithm for training.
     * 
     */
    private String algorithmHint;
    /**
     * @return The list of OCIDs of the data assets to train the model. The dataAssets have to be in the same project where the ai model would reside.
     * 
     */
    private List<String> dataAssetIds;
    /**
     * @return A target model accuracy metric user provides as their requirement
     * 
     */
    private Double targetFap;
    /**
     * @return Fraction of total data that is used for training the model. The remaining is used for validation of the model.
     * 
     */
    private Double trainingFraction;
    /**
     * @return Window size defined during training or deduced by the algorithm.
     * 
     */
    private Integer windowSize;

    private GetDetectionModelModelTrainingDetail() {}
    /**
     * @return User can choose specific algorithm for training.
     * 
     */
    public String algorithmHint() {
        return this.algorithmHint;
    }
    /**
     * @return The list of OCIDs of the data assets to train the model. The dataAssets have to be in the same project where the ai model would reside.
     * 
     */
    public List<String> dataAssetIds() {
        return this.dataAssetIds;
    }
    /**
     * @return A target model accuracy metric user provides as their requirement
     * 
     */
    public Double targetFap() {
        return this.targetFap;
    }
    /**
     * @return Fraction of total data that is used for training the model. The remaining is used for validation of the model.
     * 
     */
    public Double trainingFraction() {
        return this.trainingFraction;
    }
    /**
     * @return Window size defined during training or deduced by the algorithm.
     * 
     */
    public Integer windowSize() {
        return this.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDetectionModelModelTrainingDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithmHint;
        private List<String> dataAssetIds;
        private Double targetFap;
        private Double trainingFraction;
        private Integer windowSize;
        public Builder() {}
        public Builder(GetDetectionModelModelTrainingDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithmHint = defaults.algorithmHint;
    	      this.dataAssetIds = defaults.dataAssetIds;
    	      this.targetFap = defaults.targetFap;
    	      this.trainingFraction = defaults.trainingFraction;
    	      this.windowSize = defaults.windowSize;
        }

        @CustomType.Setter
        public Builder algorithmHint(String algorithmHint) {
            if (algorithmHint == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingDetail", "algorithmHint");
            }
            this.algorithmHint = algorithmHint;
            return this;
        }
        @CustomType.Setter
        public Builder dataAssetIds(List<String> dataAssetIds) {
            if (dataAssetIds == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingDetail", "dataAssetIds");
            }
            this.dataAssetIds = dataAssetIds;
            return this;
        }
        public Builder dataAssetIds(String... dataAssetIds) {
            return dataAssetIds(List.of(dataAssetIds));
        }
        @CustomType.Setter
        public Builder targetFap(Double targetFap) {
            if (targetFap == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingDetail", "targetFap");
            }
            this.targetFap = targetFap;
            return this;
        }
        @CustomType.Setter
        public Builder trainingFraction(Double trainingFraction) {
            if (trainingFraction == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingDetail", "trainingFraction");
            }
            this.trainingFraction = trainingFraction;
            return this;
        }
        @CustomType.Setter
        public Builder windowSize(Integer windowSize) {
            if (windowSize == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingDetail", "windowSize");
            }
            this.windowSize = windowSize;
            return this;
        }
        public GetDetectionModelModelTrainingDetail build() {
            final var _resultValue = new GetDetectionModelModelTrainingDetail();
            _resultValue.algorithmHint = algorithmHint;
            _resultValue.dataAssetIds = dataAssetIds;
            _resultValue.targetFap = targetFap;
            _resultValue.trainingFraction = trainingFraction;
            _resultValue.windowSize = windowSize;
            return _resultValue;
        }
    }
}
