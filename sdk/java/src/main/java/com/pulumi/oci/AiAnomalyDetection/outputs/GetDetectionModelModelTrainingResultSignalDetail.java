// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDetectionModelModelTrainingResultSignalDetail {
    /**
     * @return detailed information for a signal.
     * 
     */
    private String details;
    /**
     * @return Accuracy metric for a signal.
     * 
     */
    private Double fap;
    /**
     * @return A boolean value to indicate if a signal is quantized or not.
     * 
     */
    private Boolean isQuantized;
    /**
     * @return Max value within a signal.
     * 
     */
    private Double max;
    /**
     * @return Min value within a signal.
     * 
     */
    private Double min;
    /**
     * @return The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    private Double mviRatio;
    /**
     * @return The name of a signal.
     * 
     */
    private String signalName;
    /**
     * @return Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    private String status;
    /**
     * @return Standard deviation of values within a signal.
     * 
     */
    private Double std;

    private GetDetectionModelModelTrainingResultSignalDetail() {}
    /**
     * @return detailed information for a signal.
     * 
     */
    public String details() {
        return this.details;
    }
    /**
     * @return Accuracy metric for a signal.
     * 
     */
    public Double fap() {
        return this.fap;
    }
    /**
     * @return A boolean value to indicate if a signal is quantized or not.
     * 
     */
    public Boolean isQuantized() {
        return this.isQuantized;
    }
    /**
     * @return Max value within a signal.
     * 
     */
    public Double max() {
        return this.max;
    }
    /**
     * @return Min value within a signal.
     * 
     */
    public Double min() {
        return this.min;
    }
    /**
     * @return The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    public Double mviRatio() {
        return this.mviRatio;
    }
    /**
     * @return The name of a signal.
     * 
     */
    public String signalName() {
        return this.signalName;
    }
    /**
     * @return Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Standard deviation of values within a signal.
     * 
     */
    public Double std() {
        return this.std;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDetectionModelModelTrainingResultSignalDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String details;
        private Double fap;
        private Boolean isQuantized;
        private Double max;
        private Double min;
        private Double mviRatio;
        private String signalName;
        private String status;
        private Double std;
        public Builder() {}
        public Builder(GetDetectionModelModelTrainingResultSignalDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.details = defaults.details;
    	      this.fap = defaults.fap;
    	      this.isQuantized = defaults.isQuantized;
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.mviRatio = defaults.mviRatio;
    	      this.signalName = defaults.signalName;
    	      this.status = defaults.status;
    	      this.std = defaults.std;
        }

        @CustomType.Setter
        public Builder details(String details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "details");
            }
            this.details = details;
            return this;
        }
        @CustomType.Setter
        public Builder fap(Double fap) {
            if (fap == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "fap");
            }
            this.fap = fap;
            return this;
        }
        @CustomType.Setter
        public Builder isQuantized(Boolean isQuantized) {
            if (isQuantized == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "isQuantized");
            }
            this.isQuantized = isQuantized;
            return this;
        }
        @CustomType.Setter
        public Builder max(Double max) {
            if (max == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "max");
            }
            this.max = max;
            return this;
        }
        @CustomType.Setter
        public Builder min(Double min) {
            if (min == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "min");
            }
            this.min = min;
            return this;
        }
        @CustomType.Setter
        public Builder mviRatio(Double mviRatio) {
            if (mviRatio == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "mviRatio");
            }
            this.mviRatio = mviRatio;
            return this;
        }
        @CustomType.Setter
        public Builder signalName(String signalName) {
            if (signalName == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "signalName");
            }
            this.signalName = signalName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder std(Double std) {
            if (std == null) {
              throw new MissingRequiredPropertyException("GetDetectionModelModelTrainingResultSignalDetail", "std");
            }
            this.std = std;
            return this;
        }
        public GetDetectionModelModelTrainingResultSignalDetail build() {
            final var _resultValue = new GetDetectionModelModelTrainingResultSignalDetail();
            _resultValue.details = details;
            _resultValue.fap = fap;
            _resultValue.isQuantized = isQuantized;
            _resultValue.max = max;
            _resultValue.min = min;
            _resultValue.mviRatio = mviRatio;
            _resultValue.signalName = signalName;
            _resultValue.status = status;
            _resultValue.std = std;
            return _resultValue;
        }
    }
}
