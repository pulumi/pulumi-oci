// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiAnomalyDetection.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelModelTrainingResultSignalDetail {
    /**
     * @return detailed information for a signal.
     * 
     */
    private @Nullable String details;
    /**
     * @return Accuracy metric for a signal.
     * 
     */
    private @Nullable Double fap;
    /**
     * @return A boolean value to indicate if a signal is quantized or not.
     * 
     */
    private @Nullable Boolean isQuantized;
    /**
     * @return Max value within a signal.
     * 
     */
    private @Nullable Double max;
    /**
     * @return Min value within a signal.
     * 
     */
    private @Nullable Double min;
    /**
     * @return The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    private @Nullable Double mviRatio;
    /**
     * @return The name of a signal.
     * 
     */
    private @Nullable String signalName;
    /**
     * @return Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    private @Nullable String status;
    /**
     * @return Standard deviation of values within a signal.
     * 
     */
    private @Nullable Double std;

    private ModelModelTrainingResultSignalDetail() {}
    /**
     * @return detailed information for a signal.
     * 
     */
    public Optional<String> details() {
        return Optional.ofNullable(this.details);
    }
    /**
     * @return Accuracy metric for a signal.
     * 
     */
    public Optional<Double> fap() {
        return Optional.ofNullable(this.fap);
    }
    /**
     * @return A boolean value to indicate if a signal is quantized or not.
     * 
     */
    public Optional<Boolean> isQuantized() {
        return Optional.ofNullable(this.isQuantized);
    }
    /**
     * @return Max value within a signal.
     * 
     */
    public Optional<Double> max() {
        return Optional.ofNullable(this.max);
    }
    /**
     * @return Min value within a signal.
     * 
     */
    public Optional<Double> min() {
        return Optional.ofNullable(this.min);
    }
    /**
     * @return The ratio of missing values in a signal filled/imputed by the IDP algorithm.
     * 
     */
    public Optional<Double> mviRatio() {
        return Optional.ofNullable(this.mviRatio);
    }
    /**
     * @return The name of a signal.
     * 
     */
    public Optional<String> signalName() {
        return Optional.ofNullable(this.signalName);
    }
    /**
     * @return Status of the signal:
     * * ACCEPTED - the signal is used for training the model
     * * DROPPED - the signal does not meet requirement, and is dropped before training the model.
     * * OTHER - placeholder for other status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Standard deviation of values within a signal.
     * 
     */
    public Optional<Double> std() {
        return Optional.ofNullable(this.std);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelModelTrainingResultSignalDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String details;
        private @Nullable Double fap;
        private @Nullable Boolean isQuantized;
        private @Nullable Double max;
        private @Nullable Double min;
        private @Nullable Double mviRatio;
        private @Nullable String signalName;
        private @Nullable String status;
        private @Nullable Double std;
        public Builder() {}
        public Builder(ModelModelTrainingResultSignalDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.details = defaults.details;
    	      this.fap = defaults.fap;
    	      this.isQuantized = defaults.isQuantized;
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.mviRatio = defaults.mviRatio;
    	      this.signalName = defaults.signalName;
    	      this.status = defaults.status;
    	      this.std = defaults.std;
        }

        @CustomType.Setter
        public Builder details(@Nullable String details) {

            this.details = details;
            return this;
        }
        @CustomType.Setter
        public Builder fap(@Nullable Double fap) {

            this.fap = fap;
            return this;
        }
        @CustomType.Setter
        public Builder isQuantized(@Nullable Boolean isQuantized) {

            this.isQuantized = isQuantized;
            return this;
        }
        @CustomType.Setter
        public Builder max(@Nullable Double max) {

            this.max = max;
            return this;
        }
        @CustomType.Setter
        public Builder min(@Nullable Double min) {

            this.min = min;
            return this;
        }
        @CustomType.Setter
        public Builder mviRatio(@Nullable Double mviRatio) {

            this.mviRatio = mviRatio;
            return this;
        }
        @CustomType.Setter
        public Builder signalName(@Nullable String signalName) {

            this.signalName = signalName;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder std(@Nullable Double std) {

            this.std = std;
            return this;
        }
        public ModelModelTrainingResultSignalDetail build() {
            final var _resultValue = new ModelModelTrainingResultSignalDetail();
            _resultValue.details = details;
            _resultValue.fap = fap;
            _resultValue.isQuantized = isQuantized;
            _resultValue.max = max;
            _resultValue.min = min;
            _resultValue.mviRatio = mviRatio;
            _resultValue.signalName = signalName;
            _resultValue.status = status;
            _resultValue.std = std;
            return _resultValue;
        }
    }
}
