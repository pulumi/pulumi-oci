// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.AiDocument.inputs.ModelComponentModelArgs;
import com.pulumi.oci.AiDocument.inputs.ModelTestingDatasetArgs;
import com.pulumi.oci.AiDocument.inputs.ModelTrainingDatasetArgs;
import com.pulumi.oci.AiDocument.inputs.ModelValidationDatasetArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelArgs Empty = new ModelArgs();

    /**
     * (Updatable) The compartment identifier.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The compartment identifier.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) list of active custom Key Value models that need to be composed.
     * 
     */
    @Import(name="componentModels")
    private @Nullable Output<List<ModelComponentModelArgs>> componentModels;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) list of active custom Key Value models that need to be composed.
     * 
     */
    public Optional<Output<List<ModelComponentModelArgs>>> componentModels() {
        return Optional.ofNullable(this.componentModels);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) An optional description of the model.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) An optional description of the model.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A human-friendly name for the model, which can be changed.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A human-friendly name for the model, which can be changed.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
     * 
     */
    @Import(name="isQuickMode")
    private @Nullable Output<Boolean> isQuickMode;

    /**
     * @return Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
     * 
     */
    public Optional<Output<Boolean>> isQuickMode() {
        return Optional.ofNullable(this.isQuickMode);
    }

    /**
     * The maximum model training time in hours, expressed as a decimal fraction.
     * 
     */
    @Import(name="maxTrainingTimeInHours")
    private @Nullable Output<Double> maxTrainingTimeInHours;

    /**
     * @return The maximum model training time in hours, expressed as a decimal fraction.
     * 
     */
    public Optional<Output<Double>> maxTrainingTimeInHours() {
        return Optional.ofNullable(this.maxTrainingTimeInHours);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of active custom Key Value model that need to be composed.
     * 
     */
    @Import(name="modelId")
    private @Nullable Output<String> modelId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of active custom Key Value model that need to be composed.
     * 
     */
    public Optional<Output<String>> modelId() {
        return Optional.ofNullable(this.modelId);
    }

    /**
     * The type of the Document model.
     * 
     */
    @Import(name="modelType", required=true)
    private Output<String> modelType;

    /**
     * @return The type of the Document model.
     * 
     */
    public Output<String> modelType() {
        return this.modelType;
    }

    /**
     * The model version
     * 
     */
    @Import(name="modelVersion")
    private @Nullable Output<String> modelVersion;

    /**
     * @return The model version
     * 
     */
    public Optional<Output<String>> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The base entity which is the input for creating and training a model.
     * 
     */
    @Import(name="testingDataset")
    private @Nullable Output<ModelTestingDatasetArgs> testingDataset;

    /**
     * @return The base entity which is the input for creating and training a model.
     * 
     */
    public Optional<Output<ModelTestingDatasetArgs>> testingDataset() {
        return Optional.ofNullable(this.testingDataset);
    }

    /**
     * The base entity which is the input for creating and training a model.
     * 
     */
    @Import(name="trainingDataset")
    private @Nullable Output<ModelTrainingDatasetArgs> trainingDataset;

    /**
     * @return The base entity which is the input for creating and training a model.
     * 
     */
    public Optional<Output<ModelTrainingDatasetArgs>> trainingDataset() {
        return Optional.ofNullable(this.trainingDataset);
    }

    /**
     * The base entity which is the input for creating and training a model.
     * 
     */
    @Import(name="validationDataset")
    private @Nullable Output<ModelValidationDatasetArgs> validationDataset;

    /**
     * @return The base entity which is the input for creating and training a model.
     * 
     */
    public Optional<Output<ModelValidationDatasetArgs>> validationDataset() {
        return Optional.ofNullable(this.validationDataset);
    }

    private ModelArgs() {}

    private ModelArgs(ModelArgs $) {
        this.compartmentId = $.compartmentId;
        this.componentModels = $.componentModels;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isQuickMode = $.isQuickMode;
        this.maxTrainingTimeInHours = $.maxTrainingTimeInHours;
        this.modelId = $.modelId;
        this.modelType = $.modelType;
        this.modelVersion = $.modelVersion;
        this.projectId = $.projectId;
        this.testingDataset = $.testingDataset;
        this.trainingDataset = $.trainingDataset;
        this.validationDataset = $.validationDataset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelArgs $;

        public Builder() {
            $ = new ModelArgs();
        }

        public Builder(ModelArgs defaults) {
            $ = new ModelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The compartment identifier.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The compartment identifier.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param componentModels The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) list of active custom Key Value models that need to be composed.
         * 
         * @return builder
         * 
         */
        public Builder componentModels(@Nullable Output<List<ModelComponentModelArgs>> componentModels) {
            $.componentModels = componentModels;
            return this;
        }

        /**
         * @param componentModels The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) list of active custom Key Value models that need to be composed.
         * 
         * @return builder
         * 
         */
        public Builder componentModels(List<ModelComponentModelArgs> componentModels) {
            return componentModels(Output.of(componentModels));
        }

        /**
         * @param componentModels The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) list of active custom Key Value models that need to be composed.
         * 
         * @return builder
         * 
         */
        public Builder componentModels(ModelComponentModelArgs... componentModels) {
            return componentModels(List.of(componentModels));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) An optional description of the model.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) An optional description of the model.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A human-friendly name for the model, which can be changed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A human-friendly name for the model, which can be changed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isQuickMode Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
         * 
         * @return builder
         * 
         */
        public Builder isQuickMode(@Nullable Output<Boolean> isQuickMode) {
            $.isQuickMode = isQuickMode;
            return this;
        }

        /**
         * @param isQuickMode Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
         * 
         * @return builder
         * 
         */
        public Builder isQuickMode(Boolean isQuickMode) {
            return isQuickMode(Output.of(isQuickMode));
        }

        /**
         * @param maxTrainingTimeInHours The maximum model training time in hours, expressed as a decimal fraction.
         * 
         * @return builder
         * 
         */
        public Builder maxTrainingTimeInHours(@Nullable Output<Double> maxTrainingTimeInHours) {
            $.maxTrainingTimeInHours = maxTrainingTimeInHours;
            return this;
        }

        /**
         * @param maxTrainingTimeInHours The maximum model training time in hours, expressed as a decimal fraction.
         * 
         * @return builder
         * 
         */
        public Builder maxTrainingTimeInHours(Double maxTrainingTimeInHours) {
            return maxTrainingTimeInHours(Output.of(maxTrainingTimeInHours));
        }

        /**
         * @param modelId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of active custom Key Value model that need to be composed.
         * 
         * @return builder
         * 
         */
        public Builder modelId(@Nullable Output<String> modelId) {
            $.modelId = modelId;
            return this;
        }

        /**
         * @param modelId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of active custom Key Value model that need to be composed.
         * 
         * @return builder
         * 
         */
        public Builder modelId(String modelId) {
            return modelId(Output.of(modelId));
        }

        /**
         * @param modelType The type of the Document model.
         * 
         * @return builder
         * 
         */
        public Builder modelType(Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType The type of the Document model.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param modelVersion The model version
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(@Nullable Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion The model version
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        /**
         * @param projectId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param testingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder testingDataset(@Nullable Output<ModelTestingDatasetArgs> testingDataset) {
            $.testingDataset = testingDataset;
            return this;
        }

        /**
         * @param testingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder testingDataset(ModelTestingDatasetArgs testingDataset) {
            return testingDataset(Output.of(testingDataset));
        }

        /**
         * @param trainingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder trainingDataset(@Nullable Output<ModelTrainingDatasetArgs> trainingDataset) {
            $.trainingDataset = trainingDataset;
            return this;
        }

        /**
         * @param trainingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder trainingDataset(ModelTrainingDatasetArgs trainingDataset) {
            return trainingDataset(Output.of(trainingDataset));
        }

        /**
         * @param validationDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder validationDataset(@Nullable Output<ModelValidationDatasetArgs> validationDataset) {
            $.validationDataset = validationDataset;
            return this;
        }

        /**
         * @param validationDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder validationDataset(ModelValidationDatasetArgs validationDataset) {
            return validationDataset(Output.of(validationDataset));
        }

        public ModelArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.modelType = Objects.requireNonNull($.modelType, "expected parameter 'modelType' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            return $;
        }
    }

}
