// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetModelTypeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetModelTypeArgs Empty = new GetModelTypeArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The sub type based upon model selected.
     * 
     */
    @Import(name="modelSubType")
    private @Nullable Output<String> modelSubType;

    /**
     * @return The sub type based upon model selected.
     * 
     */
    public Optional<Output<String>> modelSubType() {
        return Optional.ofNullable(this.modelSubType);
    }

    /**
     * The type of the Document model.
     * 
     */
    @Import(name="modelType", required=true)
    private Output<String> modelType;

    /**
     * @return The type of the Document model.
     * 
     */
    public Output<String> modelType() {
        return this.modelType;
    }

    private GetModelTypeArgs() {}

    private GetModelTypeArgs(GetModelTypeArgs $) {
        this.compartmentId = $.compartmentId;
        this.modelSubType = $.modelSubType;
        this.modelType = $.modelType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetModelTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetModelTypeArgs $;

        public Builder() {
            $ = new GetModelTypeArgs();
        }

        public Builder(GetModelTypeArgs defaults) {
            $ = new GetModelTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param modelSubType The sub type based upon model selected.
         * 
         * @return builder
         * 
         */
        public Builder modelSubType(@Nullable Output<String> modelSubType) {
            $.modelSubType = modelSubType;
            return this;
        }

        /**
         * @param modelSubType The sub type based upon model selected.
         * 
         * @return builder
         * 
         */
        public Builder modelSubType(String modelSubType) {
            return modelSubType(Output.of(modelSubType));
        }

        /**
         * @param modelType The type of the Document model.
         * 
         * @return builder
         * 
         */
        public Builder modelType(Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType The type of the Document model.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        public GetModelTypeArgs build() {
            if ($.modelType == null) {
                throw new MissingRequiredPropertyException("GetModelTypeArgs", "modelType");
            }
            return $;
        }
    }

}
