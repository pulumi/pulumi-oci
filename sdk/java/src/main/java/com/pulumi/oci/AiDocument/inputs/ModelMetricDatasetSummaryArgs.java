// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelMetricDatasetSummaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelMetricDatasetSummaryArgs Empty = new ModelMetricDatasetSummaryArgs();

    /**
     * Number of samples used for testing the model.
     * 
     */
    @Import(name="testSampleCount")
    private @Nullable Output<Integer> testSampleCount;

    /**
     * @return Number of samples used for testing the model.
     * 
     */
    public Optional<Output<Integer>> testSampleCount() {
        return Optional.ofNullable(this.testSampleCount);
    }

    /**
     * Number of samples used for training the model.
     * 
     */
    @Import(name="trainingSampleCount")
    private @Nullable Output<Integer> trainingSampleCount;

    /**
     * @return Number of samples used for training the model.
     * 
     */
    public Optional<Output<Integer>> trainingSampleCount() {
        return Optional.ofNullable(this.trainingSampleCount);
    }

    /**
     * Number of samples used for validating the model.
     * 
     */
    @Import(name="validationSampleCount")
    private @Nullable Output<Integer> validationSampleCount;

    /**
     * @return Number of samples used for validating the model.
     * 
     */
    public Optional<Output<Integer>> validationSampleCount() {
        return Optional.ofNullable(this.validationSampleCount);
    }

    private ModelMetricDatasetSummaryArgs() {}

    private ModelMetricDatasetSummaryArgs(ModelMetricDatasetSummaryArgs $) {
        this.testSampleCount = $.testSampleCount;
        this.trainingSampleCount = $.trainingSampleCount;
        this.validationSampleCount = $.validationSampleCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelMetricDatasetSummaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelMetricDatasetSummaryArgs $;

        public Builder() {
            $ = new ModelMetricDatasetSummaryArgs();
        }

        public Builder(ModelMetricDatasetSummaryArgs defaults) {
            $ = new ModelMetricDatasetSummaryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param testSampleCount Number of samples used for testing the model.
         * 
         * @return builder
         * 
         */
        public Builder testSampleCount(@Nullable Output<Integer> testSampleCount) {
            $.testSampleCount = testSampleCount;
            return this;
        }

        /**
         * @param testSampleCount Number of samples used for testing the model.
         * 
         * @return builder
         * 
         */
        public Builder testSampleCount(Integer testSampleCount) {
            return testSampleCount(Output.of(testSampleCount));
        }

        /**
         * @param trainingSampleCount Number of samples used for training the model.
         * 
         * @return builder
         * 
         */
        public Builder trainingSampleCount(@Nullable Output<Integer> trainingSampleCount) {
            $.trainingSampleCount = trainingSampleCount;
            return this;
        }

        /**
         * @param trainingSampleCount Number of samples used for training the model.
         * 
         * @return builder
         * 
         */
        public Builder trainingSampleCount(Integer trainingSampleCount) {
            return trainingSampleCount(Output.of(trainingSampleCount));
        }

        /**
         * @param validationSampleCount Number of samples used for validating the model.
         * 
         * @return builder
         * 
         */
        public Builder validationSampleCount(@Nullable Output<Integer> validationSampleCount) {
            $.validationSampleCount = validationSampleCount;
            return this;
        }

        /**
         * @param validationSampleCount Number of samples used for validating the model.
         * 
         * @return builder
         * 
         */
        public Builder validationSampleCount(Integer validationSampleCount) {
            return validationSampleCount(Output.of(validationSampleCount));
        }

        public ModelMetricDatasetSummaryArgs build() {
            return $;
        }
    }

}
