// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ModelModelSubTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelModelSubTypeArgs Empty = new ModelModelSubTypeArgs();

    /**
     * The model sub type for PRE_TRAINED_KEY_VALUE_EXTRACTION The allowed values are:
     * * `RECEIPT`
     * * `INVOICE`
     * * `PASSPORT`
     * * `DRIVER_LICENSE`
     * * `HEALTH_INSURANCE_ID`
     * 
     */
    @Import(name="modelSubType", required=true)
    private Output<String> modelSubType;

    /**
     * @return The model sub type for PRE_TRAINED_KEY_VALUE_EXTRACTION The allowed values are:
     * * `RECEIPT`
     * * `INVOICE`
     * * `PASSPORT`
     * * `DRIVER_LICENSE`
     * * `HEALTH_INSURANCE_ID`
     * 
     */
    public Output<String> modelSubType() {
        return this.modelSubType;
    }

    /**
     * Sub type model based on the model type. The allowed values are:
     * * `PRE_TRAINED_KEY_VALUE_EXTRACTION`
     * * `PRE_TRAINED_DOCUMENT_ELEMENTS_EXTRACTION`
     * 
     */
    @Import(name="modelType", required=true)
    private Output<String> modelType;

    /**
     * @return Sub type model based on the model type. The allowed values are:
     * * `PRE_TRAINED_KEY_VALUE_EXTRACTION`
     * * `PRE_TRAINED_DOCUMENT_ELEMENTS_EXTRACTION`
     * 
     */
    public Output<String> modelType() {
        return this.modelType;
    }

    private ModelModelSubTypeArgs() {}

    private ModelModelSubTypeArgs(ModelModelSubTypeArgs $) {
        this.modelSubType = $.modelSubType;
        this.modelType = $.modelType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelModelSubTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelModelSubTypeArgs $;

        public Builder() {
            $ = new ModelModelSubTypeArgs();
        }

        public Builder(ModelModelSubTypeArgs defaults) {
            $ = new ModelModelSubTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param modelSubType The model sub type for PRE_TRAINED_KEY_VALUE_EXTRACTION The allowed values are:
         * * `RECEIPT`
         * * `INVOICE`
         * * `PASSPORT`
         * * `DRIVER_LICENSE`
         * * `HEALTH_INSURANCE_ID`
         * 
         * @return builder
         * 
         */
        public Builder modelSubType(Output<String> modelSubType) {
            $.modelSubType = modelSubType;
            return this;
        }

        /**
         * @param modelSubType The model sub type for PRE_TRAINED_KEY_VALUE_EXTRACTION The allowed values are:
         * * `RECEIPT`
         * * `INVOICE`
         * * `PASSPORT`
         * * `DRIVER_LICENSE`
         * * `HEALTH_INSURANCE_ID`
         * 
         * @return builder
         * 
         */
        public Builder modelSubType(String modelSubType) {
            return modelSubType(Output.of(modelSubType));
        }

        /**
         * @param modelType Sub type model based on the model type. The allowed values are:
         * * `PRE_TRAINED_KEY_VALUE_EXTRACTION`
         * * `PRE_TRAINED_DOCUMENT_ELEMENTS_EXTRACTION`
         * 
         * @return builder
         * 
         */
        public Builder modelType(Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType Sub type model based on the model type. The allowed values are:
         * * `PRE_TRAINED_KEY_VALUE_EXTRACTION`
         * * `PRE_TRAINED_DOCUMENT_ELEMENTS_EXTRACTION`
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        public ModelModelSubTypeArgs build() {
            if ($.modelSubType == null) {
                throw new MissingRequiredPropertyException("ModelModelSubTypeArgs", "modelSubType");
            }
            if ($.modelType == null) {
                throw new MissingRequiredPropertyException("ModelModelSubTypeArgs", "modelType");
            }
            return $;
        }
    }

}
