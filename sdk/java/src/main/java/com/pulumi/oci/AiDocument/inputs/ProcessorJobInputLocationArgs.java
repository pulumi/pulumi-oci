// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiDocument.inputs.ProcessorJobInputLocationObjectLocationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcessorJobInputLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProcessorJobInputLocationArgs Empty = new ProcessorJobInputLocationArgs();

    /**
     * Raw document data with Base64 encoding.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return Raw document data with Base64 encoding.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * The list of ObjectLocations.
     * 
     */
    @Import(name="objectLocations")
    private @Nullable Output<List<ProcessorJobInputLocationObjectLocationArgs>> objectLocations;

    /**
     * @return The list of ObjectLocations.
     * 
     */
    public Optional<Output<List<ProcessorJobInputLocationObjectLocationArgs>>> objectLocations() {
        return Optional.ofNullable(this.objectLocations);
    }

    /**
     * The page ranges to be analysed.
     * 
     */
    @Import(name="pageRanges")
    private @Nullable Output<List<String>> pageRanges;

    /**
     * @return The page ranges to be analysed.
     * 
     */
    public Optional<Output<List<String>>> pageRanges() {
        return Optional.ofNullable(this.pageRanges);
    }

    /**
     * The type of input location. The allowed values are:
     * * `OBJECT_STORAGE_LOCATIONS`: A list of object locations in Object Storage.
     * * `INLINE_DOCUMENT_CONTENT`: The content of an inline document.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The type of input location. The allowed values are:
     * * `OBJECT_STORAGE_LOCATIONS`: A list of object locations in Object Storage.
     * * `INLINE_DOCUMENT_CONTENT`: The content of an inline document.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private ProcessorJobInputLocationArgs() {}

    private ProcessorJobInputLocationArgs(ProcessorJobInputLocationArgs $) {
        this.data = $.data;
        this.objectLocations = $.objectLocations;
        this.pageRanges = $.pageRanges;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessorJobInputLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessorJobInputLocationArgs $;

        public Builder() {
            $ = new ProcessorJobInputLocationArgs();
        }

        public Builder(ProcessorJobInputLocationArgs defaults) {
            $ = new ProcessorJobInputLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data Raw document data with Base64 encoding.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data Raw document data with Base64 encoding.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param objectLocations The list of ObjectLocations.
         * 
         * @return builder
         * 
         */
        public Builder objectLocations(@Nullable Output<List<ProcessorJobInputLocationObjectLocationArgs>> objectLocations) {
            $.objectLocations = objectLocations;
            return this;
        }

        /**
         * @param objectLocations The list of ObjectLocations.
         * 
         * @return builder
         * 
         */
        public Builder objectLocations(List<ProcessorJobInputLocationObjectLocationArgs> objectLocations) {
            return objectLocations(Output.of(objectLocations));
        }

        /**
         * @param objectLocations The list of ObjectLocations.
         * 
         * @return builder
         * 
         */
        public Builder objectLocations(ProcessorJobInputLocationObjectLocationArgs... objectLocations) {
            return objectLocations(List.of(objectLocations));
        }

        /**
         * @param pageRanges The page ranges to be analysed.
         * 
         * @return builder
         * 
         */
        public Builder pageRanges(@Nullable Output<List<String>> pageRanges) {
            $.pageRanges = pageRanges;
            return this;
        }

        /**
         * @param pageRanges The page ranges to be analysed.
         * 
         * @return builder
         * 
         */
        public Builder pageRanges(List<String> pageRanges) {
            return pageRanges(Output.of(pageRanges));
        }

        /**
         * @param pageRanges The page ranges to be analysed.
         * 
         * @return builder
         * 
         */
        public Builder pageRanges(String... pageRanges) {
            return pageRanges(List.of(pageRanges));
        }

        /**
         * @param sourceType The type of input location. The allowed values are:
         * * `OBJECT_STORAGE_LOCATIONS`: A list of object locations in Object Storage.
         * * `INLINE_DOCUMENT_CONTENT`: The content of an inline document.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The type of input location. The allowed values are:
         * * `OBJECT_STORAGE_LOCATIONS`: A list of object locations in Object Storage.
         * * `INLINE_DOCUMENT_CONTENT`: The content of an inline document.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public ProcessorJobInputLocationArgs build() {
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("ProcessorJobInputLocationArgs", "sourceType");
            }
            return $;
        }
    }

}
