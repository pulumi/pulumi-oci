// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiDocument.inputs.ProcessorJobProcessorConfigFeatureArgs;
import com.pulumi.oci.AiDocument.inputs.ProcessorJobProcessorConfigNormalizationFieldArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcessorJobProcessorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProcessorJobProcessorConfigArgs Empty = new ProcessorJobProcessorConfigArgs();

    /**
     * The document type.
     * 
     */
    @Import(name="documentType")
    private @Nullable Output<String> documentType;

    /**
     * @return The document type.
     * 
     */
    public Optional<Output<String>> documentType() {
        return Optional.ofNullable(this.documentType);
    }

    /**
     * The types of document analysis requested.
     * 
     */
    @Import(name="features", required=true)
    private Output<List<ProcessorJobProcessorConfigFeatureArgs>> features;

    /**
     * @return The types of document analysis requested.
     * 
     */
    public Output<List<ProcessorJobProcessorConfigFeatureArgs>> features() {
        return this.features;
    }

    /**
     * Whether or not to generate a ZIP file containing the results.
     * 
     */
    @Import(name="isZipOutputEnabled")
    private @Nullable Output<Boolean> isZipOutputEnabled;

    /**
     * @return Whether or not to generate a ZIP file containing the results.
     * 
     */
    public Optional<Output<Boolean>> isZipOutputEnabled() {
        return Optional.ofNullable(this.isZipOutputEnabled);
    }

    /**
     * The document language, abbreviated according to the BCP 47 Language-Tag syntax.
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return The document language, abbreviated according to the BCP 47 Language-Tag syntax.
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * Unique identifier custom model OCID that should be used for inference.
     * 
     */
    @Import(name="modelId")
    private @Nullable Output<String> modelId;

    /**
     * @return Unique identifier custom model OCID that should be used for inference.
     * 
     */
    public Optional<Output<String>> modelId() {
        return Optional.ofNullable(this.modelId);
    }

    /**
     * A string-to-object map where the key is the normalization field and the object contains information about the field.
     * 
     */
    @Import(name="normalizationFields")
    private @Nullable Output<List<ProcessorJobProcessorConfigNormalizationFieldArgs>> normalizationFields;

    /**
     * @return A string-to-object map where the key is the normalization field and the object contains information about the field.
     * 
     */
    public Optional<Output<List<ProcessorJobProcessorConfigNormalizationFieldArgs>>> normalizationFields() {
        return Optional.ofNullable(this.normalizationFields);
    }

    /**
     * The type of the processor.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="processorType", required=true)
    private Output<String> processorType;

    /**
     * @return The type of the processor.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> processorType() {
        return this.processorType;
    }

    private ProcessorJobProcessorConfigArgs() {}

    private ProcessorJobProcessorConfigArgs(ProcessorJobProcessorConfigArgs $) {
        this.documentType = $.documentType;
        this.features = $.features;
        this.isZipOutputEnabled = $.isZipOutputEnabled;
        this.language = $.language;
        this.modelId = $.modelId;
        this.normalizationFields = $.normalizationFields;
        this.processorType = $.processorType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessorJobProcessorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessorJobProcessorConfigArgs $;

        public Builder() {
            $ = new ProcessorJobProcessorConfigArgs();
        }

        public Builder(ProcessorJobProcessorConfigArgs defaults) {
            $ = new ProcessorJobProcessorConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param documentType The document type.
         * 
         * @return builder
         * 
         */
        public Builder documentType(@Nullable Output<String> documentType) {
            $.documentType = documentType;
            return this;
        }

        /**
         * @param documentType The document type.
         * 
         * @return builder
         * 
         */
        public Builder documentType(String documentType) {
            return documentType(Output.of(documentType));
        }

        /**
         * @param features The types of document analysis requested.
         * 
         * @return builder
         * 
         */
        public Builder features(Output<List<ProcessorJobProcessorConfigFeatureArgs>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features The types of document analysis requested.
         * 
         * @return builder
         * 
         */
        public Builder features(List<ProcessorJobProcessorConfigFeatureArgs> features) {
            return features(Output.of(features));
        }

        /**
         * @param features The types of document analysis requested.
         * 
         * @return builder
         * 
         */
        public Builder features(ProcessorJobProcessorConfigFeatureArgs... features) {
            return features(List.of(features));
        }

        /**
         * @param isZipOutputEnabled Whether or not to generate a ZIP file containing the results.
         * 
         * @return builder
         * 
         */
        public Builder isZipOutputEnabled(@Nullable Output<Boolean> isZipOutputEnabled) {
            $.isZipOutputEnabled = isZipOutputEnabled;
            return this;
        }

        /**
         * @param isZipOutputEnabled Whether or not to generate a ZIP file containing the results.
         * 
         * @return builder
         * 
         */
        public Builder isZipOutputEnabled(Boolean isZipOutputEnabled) {
            return isZipOutputEnabled(Output.of(isZipOutputEnabled));
        }

        /**
         * @param language The document language, abbreviated according to the BCP 47 Language-Tag syntax.
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language The document language, abbreviated according to the BCP 47 Language-Tag syntax.
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param modelId Unique identifier custom model OCID that should be used for inference.
         * 
         * @return builder
         * 
         */
        public Builder modelId(@Nullable Output<String> modelId) {
            $.modelId = modelId;
            return this;
        }

        /**
         * @param modelId Unique identifier custom model OCID that should be used for inference.
         * 
         * @return builder
         * 
         */
        public Builder modelId(String modelId) {
            return modelId(Output.of(modelId));
        }

        /**
         * @param normalizationFields A string-to-object map where the key is the normalization field and the object contains information about the field.
         * 
         * @return builder
         * 
         */
        public Builder normalizationFields(@Nullable Output<List<ProcessorJobProcessorConfigNormalizationFieldArgs>> normalizationFields) {
            $.normalizationFields = normalizationFields;
            return this;
        }

        /**
         * @param normalizationFields A string-to-object map where the key is the normalization field and the object contains information about the field.
         * 
         * @return builder
         * 
         */
        public Builder normalizationFields(List<ProcessorJobProcessorConfigNormalizationFieldArgs> normalizationFields) {
            return normalizationFields(Output.of(normalizationFields));
        }

        /**
         * @param normalizationFields A string-to-object map where the key is the normalization field and the object contains information about the field.
         * 
         * @return builder
         * 
         */
        public Builder normalizationFields(ProcessorJobProcessorConfigNormalizationFieldArgs... normalizationFields) {
            return normalizationFields(List.of(normalizationFields));
        }

        /**
         * @param processorType The type of the processor.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder processorType(Output<String> processorType) {
            $.processorType = processorType;
            return this;
        }

        /**
         * @param processorType The type of the processor.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder processorType(String processorType) {
            return processorType(Output.of(processorType));
        }

        public ProcessorJobProcessorConfigArgs build() {
            if ($.features == null) {
                throw new MissingRequiredPropertyException("ProcessorJobProcessorConfigArgs", "features");
            }
            if ($.processorType == null) {
                throw new MissingRequiredPropertyException("ProcessorJobProcessorConfigArgs", "processorType");
            }
            return $;
        }
    }

}
