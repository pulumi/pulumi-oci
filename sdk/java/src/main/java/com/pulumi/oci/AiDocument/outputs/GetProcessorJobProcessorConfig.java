// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiDocument.outputs.GetProcessorJobProcessorConfigFeature;
import com.pulumi.oci.AiDocument.outputs.GetProcessorJobProcessorConfigNormalizationField;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProcessorJobProcessorConfig {
    /**
     * @return The document type.
     * 
     */
    private String documentType;
    /**
     * @return The types of document analysis requested.
     * 
     */
    private List<GetProcessorJobProcessorConfigFeature> features;
    /**
     * @return Whether or not to generate a ZIP file containing the results.
     * 
     */
    private Boolean isZipOutputEnabled;
    /**
     * @return The document language, abbreviated according to the BCP 47 Language-Tag syntax.
     * 
     */
    private String language;
    /**
     * @return Unique identifier custom model OCID that should be used for inference.
     * 
     */
    private String modelId;
    /**
     * @return A string-to-object map where the key is the normalization field and the object contains information about the field.
     * 
     */
    private List<GetProcessorJobProcessorConfigNormalizationField> normalizationFields;
    /**
     * @return The type of the processor.
     * 
     */
    private String processorType;

    private GetProcessorJobProcessorConfig() {}
    /**
     * @return The document type.
     * 
     */
    public String documentType() {
        return this.documentType;
    }
    /**
     * @return The types of document analysis requested.
     * 
     */
    public List<GetProcessorJobProcessorConfigFeature> features() {
        return this.features;
    }
    /**
     * @return Whether or not to generate a ZIP file containing the results.
     * 
     */
    public Boolean isZipOutputEnabled() {
        return this.isZipOutputEnabled;
    }
    /**
     * @return The document language, abbreviated according to the BCP 47 Language-Tag syntax.
     * 
     */
    public String language() {
        return this.language;
    }
    /**
     * @return Unique identifier custom model OCID that should be used for inference.
     * 
     */
    public String modelId() {
        return this.modelId;
    }
    /**
     * @return A string-to-object map where the key is the normalization field and the object contains information about the field.
     * 
     */
    public List<GetProcessorJobProcessorConfigNormalizationField> normalizationFields() {
        return this.normalizationFields;
    }
    /**
     * @return The type of the processor.
     * 
     */
    public String processorType() {
        return this.processorType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProcessorJobProcessorConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String documentType;
        private List<GetProcessorJobProcessorConfigFeature> features;
        private Boolean isZipOutputEnabled;
        private String language;
        private String modelId;
        private List<GetProcessorJobProcessorConfigNormalizationField> normalizationFields;
        private String processorType;
        public Builder() {}
        public Builder(GetProcessorJobProcessorConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.documentType = defaults.documentType;
    	      this.features = defaults.features;
    	      this.isZipOutputEnabled = defaults.isZipOutputEnabled;
    	      this.language = defaults.language;
    	      this.modelId = defaults.modelId;
    	      this.normalizationFields = defaults.normalizationFields;
    	      this.processorType = defaults.processorType;
        }

        @CustomType.Setter
        public Builder documentType(String documentType) {
            if (documentType == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobProcessorConfig", "documentType");
            }
            this.documentType = documentType;
            return this;
        }
        @CustomType.Setter
        public Builder features(List<GetProcessorJobProcessorConfigFeature> features) {
            if (features == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobProcessorConfig", "features");
            }
            this.features = features;
            return this;
        }
        public Builder features(GetProcessorJobProcessorConfigFeature... features) {
            return features(List.of(features));
        }
        @CustomType.Setter
        public Builder isZipOutputEnabled(Boolean isZipOutputEnabled) {
            if (isZipOutputEnabled == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobProcessorConfig", "isZipOutputEnabled");
            }
            this.isZipOutputEnabled = isZipOutputEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder language(String language) {
            if (language == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobProcessorConfig", "language");
            }
            this.language = language;
            return this;
        }
        @CustomType.Setter
        public Builder modelId(String modelId) {
            if (modelId == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobProcessorConfig", "modelId");
            }
            this.modelId = modelId;
            return this;
        }
        @CustomType.Setter
        public Builder normalizationFields(List<GetProcessorJobProcessorConfigNormalizationField> normalizationFields) {
            if (normalizationFields == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobProcessorConfig", "normalizationFields");
            }
            this.normalizationFields = normalizationFields;
            return this;
        }
        public Builder normalizationFields(GetProcessorJobProcessorConfigNormalizationField... normalizationFields) {
            return normalizationFields(List.of(normalizationFields));
        }
        @CustomType.Setter
        public Builder processorType(String processorType) {
            if (processorType == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobProcessorConfig", "processorType");
            }
            this.processorType = processorType;
            return this;
        }
        public GetProcessorJobProcessorConfig build() {
            final var _resultValue = new GetProcessorJobProcessorConfig();
            _resultValue.documentType = documentType;
            _resultValue.features = features;
            _resultValue.isZipOutputEnabled = isZipOutputEnabled;
            _resultValue.language = language;
            _resultValue.modelId = modelId;
            _resultValue.normalizationFields = normalizationFields;
            _resultValue.processorType = processorType;
            return _resultValue;
        }
    }
}
