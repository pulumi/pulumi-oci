// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiDocument.outputs.GetProcessorJobInputLocation;
import com.pulumi.oci.AiDocument.outputs.GetProcessorJobOutputLocation;
import com.pulumi.oci.AiDocument.outputs.GetProcessorJobProcessorConfig;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProcessorJobResult {
    /**
     * @return The compartment identifier.
     * 
     */
    private String compartmentId;
    /**
     * @return The display name of the processor job.
     * 
     */
    private String displayName;
    /**
     * @return The id of the processor job.
     * 
     */
    private String id;
    /**
     * @return The location of the inputs.
     * 
     */
    private List<GetProcessorJobInputLocation> inputLocations;
    /**
     * @return The detailed status of FAILED state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The object storage location where to store analysis results.
     * 
     */
    private List<GetProcessorJobOutputLocation> outputLocations;
    /**
     * @return How much progress the operation has made, compared to the total amount of work to be performed.
     * 
     */
    private Double percentComplete;
    /**
     * @return The configuration of a processor.
     * 
     */
    private List<GetProcessorJobProcessorConfig> processorConfigs;
    private String processorJobId;
    /**
     * @return The current state of the processor job.
     * 
     */
    private String state;
    /**
     * @return The job acceptance time.
     * 
     */
    private String timeAccepted;
    /**
     * @return The job finish time.
     * 
     */
    private String timeFinished;
    /**
     * @return The job start time.
     * 
     */
    private String timeStarted;

    private GetProcessorJobResult() {}
    /**
     * @return The compartment identifier.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The display name of the processor job.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The id of the processor job.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the inputs.
     * 
     */
    public List<GetProcessorJobInputLocation> inputLocations() {
        return this.inputLocations;
    }
    /**
     * @return The detailed status of FAILED state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The object storage location where to store analysis results.
     * 
     */
    public List<GetProcessorJobOutputLocation> outputLocations() {
        return this.outputLocations;
    }
    /**
     * @return How much progress the operation has made, compared to the total amount of work to be performed.
     * 
     */
    public Double percentComplete() {
        return this.percentComplete;
    }
    /**
     * @return The configuration of a processor.
     * 
     */
    public List<GetProcessorJobProcessorConfig> processorConfigs() {
        return this.processorConfigs;
    }
    public String processorJobId() {
        return this.processorJobId;
    }
    /**
     * @return The current state of the processor job.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The job acceptance time.
     * 
     */
    public String timeAccepted() {
        return this.timeAccepted;
    }
    /**
     * @return The job finish time.
     * 
     */
    public String timeFinished() {
        return this.timeFinished;
    }
    /**
     * @return The job start time.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProcessorJobResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String displayName;
        private String id;
        private List<GetProcessorJobInputLocation> inputLocations;
        private String lifecycleDetails;
        private List<GetProcessorJobOutputLocation> outputLocations;
        private Double percentComplete;
        private List<GetProcessorJobProcessorConfig> processorConfigs;
        private String processorJobId;
        private String state;
        private String timeAccepted;
        private String timeFinished;
        private String timeStarted;
        public Builder() {}
        public Builder(GetProcessorJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.inputLocations = defaults.inputLocations;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.outputLocations = defaults.outputLocations;
    	      this.percentComplete = defaults.percentComplete;
    	      this.processorConfigs = defaults.processorConfigs;
    	      this.processorJobId = defaults.processorJobId;
    	      this.state = defaults.state;
    	      this.timeAccepted = defaults.timeAccepted;
    	      this.timeFinished = defaults.timeFinished;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inputLocations(List<GetProcessorJobInputLocation> inputLocations) {
            if (inputLocations == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "inputLocations");
            }
            this.inputLocations = inputLocations;
            return this;
        }
        public Builder inputLocations(GetProcessorJobInputLocation... inputLocations) {
            return inputLocations(List.of(inputLocations));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder outputLocations(List<GetProcessorJobOutputLocation> outputLocations) {
            if (outputLocations == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "outputLocations");
            }
            this.outputLocations = outputLocations;
            return this;
        }
        public Builder outputLocations(GetProcessorJobOutputLocation... outputLocations) {
            return outputLocations(List.of(outputLocations));
        }
        @CustomType.Setter
        public Builder percentComplete(Double percentComplete) {
            if (percentComplete == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "percentComplete");
            }
            this.percentComplete = percentComplete;
            return this;
        }
        @CustomType.Setter
        public Builder processorConfigs(List<GetProcessorJobProcessorConfig> processorConfigs) {
            if (processorConfigs == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "processorConfigs");
            }
            this.processorConfigs = processorConfigs;
            return this;
        }
        public Builder processorConfigs(GetProcessorJobProcessorConfig... processorConfigs) {
            return processorConfigs(List.of(processorConfigs));
        }
        @CustomType.Setter
        public Builder processorJobId(String processorJobId) {
            if (processorJobId == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "processorJobId");
            }
            this.processorJobId = processorJobId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeAccepted(String timeAccepted) {
            if (timeAccepted == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "timeAccepted");
            }
            this.timeAccepted = timeAccepted;
            return this;
        }
        @CustomType.Setter
        public Builder timeFinished(String timeFinished) {
            if (timeFinished == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "timeFinished");
            }
            this.timeFinished = timeFinished;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetProcessorJobResult", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        public GetProcessorJobResult build() {
            final var _resultValue = new GetProcessorJobResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.inputLocations = inputLocations;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.outputLocations = outputLocations;
            _resultValue.percentComplete = percentComplete;
            _resultValue.processorConfigs = processorConfigs;
            _resultValue.processorJobId = processorJobId;
            _resultValue.state = state;
            _resultValue.timeAccepted = timeAccepted;
            _resultValue.timeFinished = timeFinished;
            _resultValue.timeStarted = timeStarted;
            return _resultValue;
        }
    }
}
