// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiDocument.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelMetricDatasetSummary {
    /**
     * @return Number of samples used for testing the model.
     * 
     */
    private @Nullable Integer testSampleCount;
    /**
     * @return Number of samples used for training the model.
     * 
     */
    private @Nullable Integer trainingSampleCount;
    /**
     * @return Number of samples used for validating the model.
     * 
     */
    private @Nullable Integer validationSampleCount;

    private ModelMetricDatasetSummary() {}
    /**
     * @return Number of samples used for testing the model.
     * 
     */
    public Optional<Integer> testSampleCount() {
        return Optional.ofNullable(this.testSampleCount);
    }
    /**
     * @return Number of samples used for training the model.
     * 
     */
    public Optional<Integer> trainingSampleCount() {
        return Optional.ofNullable(this.trainingSampleCount);
    }
    /**
     * @return Number of samples used for validating the model.
     * 
     */
    public Optional<Integer> validationSampleCount() {
        return Optional.ofNullable(this.validationSampleCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelMetricDatasetSummary defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer testSampleCount;
        private @Nullable Integer trainingSampleCount;
        private @Nullable Integer validationSampleCount;
        public Builder() {}
        public Builder(ModelMetricDatasetSummary defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.testSampleCount = defaults.testSampleCount;
    	      this.trainingSampleCount = defaults.trainingSampleCount;
    	      this.validationSampleCount = defaults.validationSampleCount;
        }

        @CustomType.Setter
        public Builder testSampleCount(@Nullable Integer testSampleCount) {

            this.testSampleCount = testSampleCount;
            return this;
        }
        @CustomType.Setter
        public Builder trainingSampleCount(@Nullable Integer trainingSampleCount) {

            this.trainingSampleCount = trainingSampleCount;
            return this;
        }
        @CustomType.Setter
        public Builder validationSampleCount(@Nullable Integer validationSampleCount) {

            this.validationSampleCount = validationSampleCount;
            return this;
        }
        public ModelMetricDatasetSummary build() {
            final var _resultValue = new ModelMetricDatasetSummary();
            _resultValue.testSampleCount = testSampleCount;
            _resultValue.trainingSampleCount = trainingSampleCount;
            _resultValue.validationSampleCount = validationSampleCount;
            return _resultValue;
        }
    }
}
