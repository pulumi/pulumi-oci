// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiLanguage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetModelTypeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetModelTypeArgs Empty = new GetModelTypeArgs();

    /**
     * Results like version and model supported info by specifying model type
     * 
     */
    @Import(name="modelType", required=true)
    private Output<String> modelType;

    /**
     * @return Results like version and model supported info by specifying model type
     * 
     */
    public Output<String> modelType() {
        return this.modelType;
    }

    private GetModelTypeArgs() {}

    private GetModelTypeArgs(GetModelTypeArgs $) {
        this.modelType = $.modelType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetModelTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetModelTypeArgs $;

        public Builder() {
            $ = new GetModelTypeArgs();
        }

        public Builder(GetModelTypeArgs defaults) {
            $ = new GetModelTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param modelType Results like version and model supported info by specifying model type
         * 
         * @return builder
         * 
         */
        public Builder modelType(Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType Results like version and model supported info by specifying model type
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        public GetModelTypeArgs build() {
            if ($.modelType == null) {
                throw new MissingRequiredPropertyException("GetModelTypeArgs", "modelType");
            }
            return $;
        }
    }

}
