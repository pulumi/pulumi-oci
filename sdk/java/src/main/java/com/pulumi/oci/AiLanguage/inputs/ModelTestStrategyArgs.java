// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiLanguage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiLanguage.inputs.ModelTestStrategyTestingDatasetArgs;
import com.pulumi.oci.AiLanguage.inputs.ModelTestStrategyValidationDatasetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelTestStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelTestStrategyArgs Empty = new ModelTestStrategyArgs();

    /**
     * This information will define the test strategy different datasets for test and validation(optional) dataset.
     * 
     */
    @Import(name="strategyType", required=true)
    private Output<String> strategyType;

    /**
     * @return This information will define the test strategy different datasets for test and validation(optional) dataset.
     * 
     */
    public Output<String> strategyType() {
        return this.strategyType;
    }

    /**
     * Possible data set type
     * 
     */
    @Import(name="testingDataset", required=true)
    private Output<ModelTestStrategyTestingDatasetArgs> testingDataset;

    /**
     * @return Possible data set type
     * 
     */
    public Output<ModelTestStrategyTestingDatasetArgs> testingDataset() {
        return this.testingDataset;
    }

    /**
     * Possible data set type
     * 
     */
    @Import(name="validationDataset")
    private @Nullable Output<ModelTestStrategyValidationDatasetArgs> validationDataset;

    /**
     * @return Possible data set type
     * 
     */
    public Optional<Output<ModelTestStrategyValidationDatasetArgs>> validationDataset() {
        return Optional.ofNullable(this.validationDataset);
    }

    private ModelTestStrategyArgs() {}

    private ModelTestStrategyArgs(ModelTestStrategyArgs $) {
        this.strategyType = $.strategyType;
        this.testingDataset = $.testingDataset;
        this.validationDataset = $.validationDataset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelTestStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelTestStrategyArgs $;

        public Builder() {
            $ = new ModelTestStrategyArgs();
        }

        public Builder(ModelTestStrategyArgs defaults) {
            $ = new ModelTestStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param strategyType This information will define the test strategy different datasets for test and validation(optional) dataset.
         * 
         * @return builder
         * 
         */
        public Builder strategyType(Output<String> strategyType) {
            $.strategyType = strategyType;
            return this;
        }

        /**
         * @param strategyType This information will define the test strategy different datasets for test and validation(optional) dataset.
         * 
         * @return builder
         * 
         */
        public Builder strategyType(String strategyType) {
            return strategyType(Output.of(strategyType));
        }

        /**
         * @param testingDataset Possible data set type
         * 
         * @return builder
         * 
         */
        public Builder testingDataset(Output<ModelTestStrategyTestingDatasetArgs> testingDataset) {
            $.testingDataset = testingDataset;
            return this;
        }

        /**
         * @param testingDataset Possible data set type
         * 
         * @return builder
         * 
         */
        public Builder testingDataset(ModelTestStrategyTestingDatasetArgs testingDataset) {
            return testingDataset(Output.of(testingDataset));
        }

        /**
         * @param validationDataset Possible data set type
         * 
         * @return builder
         * 
         */
        public Builder validationDataset(@Nullable Output<ModelTestStrategyValidationDatasetArgs> validationDataset) {
            $.validationDataset = validationDataset;
            return this;
        }

        /**
         * @param validationDataset Possible data set type
         * 
         * @return builder
         * 
         */
        public Builder validationDataset(ModelTestStrategyValidationDatasetArgs validationDataset) {
            return validationDataset(Output.of(validationDataset));
        }

        public ModelTestStrategyArgs build() {
            if ($.strategyType == null) {
                throw new MissingRequiredPropertyException("ModelTestStrategyArgs", "strategyType");
            }
            if ($.testingDataset == null) {
                throw new MissingRequiredPropertyException("ModelTestStrategyArgs", "testingDataset");
            }
            return $;
        }
    }

}
