// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiLanguage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.AiLanguage.inputs.ModelTestStrategyTestingDatasetLocationDetailsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelTestStrategyTestingDatasetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelTestStrategyTestingDatasetArgs Empty = new ModelTestStrategyTestingDatasetArgs();

    /**
     * Data Science Labelling Service OCID
     * 
     */
    @Import(name="datasetId")
    private @Nullable Output<String> datasetId;

    /**
     * @return Data Science Labelling Service OCID
     * 
     */
    public Optional<Output<String>> datasetId() {
        return Optional.ofNullable(this.datasetId);
    }

    /**
     * Possible data sets
     * 
     */
    @Import(name="datasetType", required=true)
    private Output<String> datasetType;

    /**
     * @return Possible data sets
     * 
     */
    public Output<String> datasetType() {
        return this.datasetType;
    }

    /**
     * Possible object storage location types
     * 
     */
    @Import(name="locationDetails")
    private @Nullable Output<ModelTestStrategyTestingDatasetLocationDetailsArgs> locationDetails;

    /**
     * @return Possible object storage location types
     * 
     */
    public Optional<Output<ModelTestStrategyTestingDatasetLocationDetailsArgs>> locationDetails() {
        return Optional.ofNullable(this.locationDetails);
    }

    private ModelTestStrategyTestingDatasetArgs() {}

    private ModelTestStrategyTestingDatasetArgs(ModelTestStrategyTestingDatasetArgs $) {
        this.datasetId = $.datasetId;
        this.datasetType = $.datasetType;
        this.locationDetails = $.locationDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelTestStrategyTestingDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelTestStrategyTestingDatasetArgs $;

        public Builder() {
            $ = new ModelTestStrategyTestingDatasetArgs();
        }

        public Builder(ModelTestStrategyTestingDatasetArgs defaults) {
            $ = new ModelTestStrategyTestingDatasetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datasetId Data Science Labelling Service OCID
         * 
         * @return builder
         * 
         */
        public Builder datasetId(@Nullable Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        /**
         * @param datasetId Data Science Labelling Service OCID
         * 
         * @return builder
         * 
         */
        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        /**
         * @param datasetType Possible data sets
         * 
         * @return builder
         * 
         */
        public Builder datasetType(Output<String> datasetType) {
            $.datasetType = datasetType;
            return this;
        }

        /**
         * @param datasetType Possible data sets
         * 
         * @return builder
         * 
         */
        public Builder datasetType(String datasetType) {
            return datasetType(Output.of(datasetType));
        }

        /**
         * @param locationDetails Possible object storage location types
         * 
         * @return builder
         * 
         */
        public Builder locationDetails(@Nullable Output<ModelTestStrategyTestingDatasetLocationDetailsArgs> locationDetails) {
            $.locationDetails = locationDetails;
            return this;
        }

        /**
         * @param locationDetails Possible object storage location types
         * 
         * @return builder
         * 
         */
        public Builder locationDetails(ModelTestStrategyTestingDatasetLocationDetailsArgs locationDetails) {
            return locationDetails(Output.of(locationDetails));
        }

        public ModelTestStrategyTestingDatasetArgs build() {
            $.datasetType = Objects.requireNonNull($.datasetType, "expected parameter 'datasetType' to be non-null");
            return $;
        }
    }

}
