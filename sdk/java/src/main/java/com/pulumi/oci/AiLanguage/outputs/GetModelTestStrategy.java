// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiLanguage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiLanguage.outputs.GetModelTestStrategyTestingDataset;
import com.pulumi.oci.AiLanguage.outputs.GetModelTestStrategyValidationDataset;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetModelTestStrategy {
    /**
     * @return This information will define the test strategy different datasets for test and validation(optional) dataset.
     * 
     */
    private String strategyType;
    /**
     * @return Possible data set type
     * 
     */
    private List<GetModelTestStrategyTestingDataset> testingDatasets;
    /**
     * @return Possible data set type
     * 
     */
    private List<GetModelTestStrategyValidationDataset> validationDatasets;

    private GetModelTestStrategy() {}
    /**
     * @return This information will define the test strategy different datasets for test and validation(optional) dataset.
     * 
     */
    public String strategyType() {
        return this.strategyType;
    }
    /**
     * @return Possible data set type
     * 
     */
    public List<GetModelTestStrategyTestingDataset> testingDatasets() {
        return this.testingDatasets;
    }
    /**
     * @return Possible data set type
     * 
     */
    public List<GetModelTestStrategyValidationDataset> validationDatasets() {
        return this.validationDatasets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelTestStrategy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String strategyType;
        private List<GetModelTestStrategyTestingDataset> testingDatasets;
        private List<GetModelTestStrategyValidationDataset> validationDatasets;
        public Builder() {}
        public Builder(GetModelTestStrategy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.strategyType = defaults.strategyType;
    	      this.testingDatasets = defaults.testingDatasets;
    	      this.validationDatasets = defaults.validationDatasets;
        }

        @CustomType.Setter
        public Builder strategyType(String strategyType) {
            if (strategyType == null) {
              throw new MissingRequiredPropertyException("GetModelTestStrategy", "strategyType");
            }
            this.strategyType = strategyType;
            return this;
        }
        @CustomType.Setter
        public Builder testingDatasets(List<GetModelTestStrategyTestingDataset> testingDatasets) {
            if (testingDatasets == null) {
              throw new MissingRequiredPropertyException("GetModelTestStrategy", "testingDatasets");
            }
            this.testingDatasets = testingDatasets;
            return this;
        }
        public Builder testingDatasets(GetModelTestStrategyTestingDataset... testingDatasets) {
            return testingDatasets(List.of(testingDatasets));
        }
        @CustomType.Setter
        public Builder validationDatasets(List<GetModelTestStrategyValidationDataset> validationDatasets) {
            if (validationDatasets == null) {
              throw new MissingRequiredPropertyException("GetModelTestStrategy", "validationDatasets");
            }
            this.validationDatasets = validationDatasets;
            return this;
        }
        public Builder validationDatasets(GetModelTestStrategyValidationDataset... validationDatasets) {
            return validationDatasets(List.of(validationDatasets));
        }
        public GetModelTestStrategy build() {
            final var _resultValue = new GetModelTestStrategy();
            _resultValue.strategyType = strategyType;
            _resultValue.testingDatasets = testingDatasets;
            _resultValue.validationDatasets = validationDatasets;
            return _resultValue;
        }
    }
}
