// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiLanguage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetModelTestStrategyTestingDatasetLocationDetail {
    /**
     * @return Object storage bucket name
     * 
     */
    private String bucket;
    /**
     * @return Possible object storage location types
     * 
     */
    private String locationType;
    /**
     * @return Object storage namespace
     * 
     */
    private String namespace;
    /**
     * @return Array of files which need to be processed in the bucket
     * 
     */
    private List<String> objectNames;

    private GetModelTestStrategyTestingDatasetLocationDetail() {}
    /**
     * @return Object storage bucket name
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Possible object storage location types
     * 
     */
    public String locationType() {
        return this.locationType;
    }
    /**
     * @return Object storage namespace
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Array of files which need to be processed in the bucket
     * 
     */
    public List<String> objectNames() {
        return this.objectNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelTestStrategyTestingDatasetLocationDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String locationType;
        private String namespace;
        private List<String> objectNames;
        public Builder() {}
        public Builder(GetModelTestStrategyTestingDatasetLocationDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.locationType = defaults.locationType;
    	      this.namespace = defaults.namespace;
    	      this.objectNames = defaults.objectNames;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetModelTestStrategyTestingDatasetLocationDetail", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder locationType(String locationType) {
            if (locationType == null) {
              throw new MissingRequiredPropertyException("GetModelTestStrategyTestingDatasetLocationDetail", "locationType");
            }
            this.locationType = locationType;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetModelTestStrategyTestingDatasetLocationDetail", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder objectNames(List<String> objectNames) {
            if (objectNames == null) {
              throw new MissingRequiredPropertyException("GetModelTestStrategyTestingDatasetLocationDetail", "objectNames");
            }
            this.objectNames = objectNames;
            return this;
        }
        public Builder objectNames(String... objectNames) {
            return objectNames(List.of(objectNames));
        }
        public GetModelTestStrategyTestingDatasetLocationDetail build() {
            final var _resultValue = new GetModelTestStrategyTestingDatasetLocationDetail();
            _resultValue.bucket = bucket;
            _resultValue.locationType = locationType;
            _resultValue.namespace = namespace;
            _resultValue.objectNames = objectNames;
            return _resultValue;
        }
    }
}
