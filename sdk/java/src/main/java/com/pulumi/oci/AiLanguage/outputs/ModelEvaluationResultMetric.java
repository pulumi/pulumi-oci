// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiLanguage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelEvaluationResultMetric {
    /**
     * @return The fraction of the labels that were correctly recognised .
     * 
     */
    private @Nullable Double accuracy;
    /**
     * @return F1-score, is a measure of a model’s accuracy on a dataset
     * 
     */
    private @Nullable Double macroF1;
    /**
     * @return Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
     * 
     */
    private @Nullable Double macroPrecision;
    /**
     * @return Measures the model&#39;s ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
     * 
     */
    private @Nullable Double macroRecall;
    /**
     * @return F1-score, is a measure of a model’s accuracy on a dataset
     * 
     */
    private @Nullable Double microF1;
    /**
     * @return Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
     * 
     */
    private @Nullable Double microPrecision;
    /**
     * @return Measures the model&#39;s ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
     * 
     */
    private @Nullable Double microRecall;
    /**
     * @return F1-score, is a measure of a model’s accuracy on a dataset
     * 
     */
    private @Nullable Double weightedF1;
    /**
     * @return Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
     * 
     */
    private @Nullable Double weightedPrecision;
    /**
     * @return Measures the model&#39;s ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
     * 
     */
    private @Nullable Double weightedRecall;

    private ModelEvaluationResultMetric() {}
    /**
     * @return The fraction of the labels that were correctly recognised .
     * 
     */
    public Optional<Double> accuracy() {
        return Optional.ofNullable(this.accuracy);
    }
    /**
     * @return F1-score, is a measure of a model’s accuracy on a dataset
     * 
     */
    public Optional<Double> macroF1() {
        return Optional.ofNullable(this.macroF1);
    }
    /**
     * @return Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
     * 
     */
    public Optional<Double> macroPrecision() {
        return Optional.ofNullable(this.macroPrecision);
    }
    /**
     * @return Measures the model&#39;s ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
     * 
     */
    public Optional<Double> macroRecall() {
        return Optional.ofNullable(this.macroRecall);
    }
    /**
     * @return F1-score, is a measure of a model’s accuracy on a dataset
     * 
     */
    public Optional<Double> microF1() {
        return Optional.ofNullable(this.microF1);
    }
    /**
     * @return Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
     * 
     */
    public Optional<Double> microPrecision() {
        return Optional.ofNullable(this.microPrecision);
    }
    /**
     * @return Measures the model&#39;s ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
     * 
     */
    public Optional<Double> microRecall() {
        return Optional.ofNullable(this.microRecall);
    }
    /**
     * @return F1-score, is a measure of a model’s accuracy on a dataset
     * 
     */
    public Optional<Double> weightedF1() {
        return Optional.ofNullable(this.weightedF1);
    }
    /**
     * @return Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
     * 
     */
    public Optional<Double> weightedPrecision() {
        return Optional.ofNullable(this.weightedPrecision);
    }
    /**
     * @return Measures the model&#39;s ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
     * 
     */
    public Optional<Double> weightedRecall() {
        return Optional.ofNullable(this.weightedRecall);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelEvaluationResultMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double accuracy;
        private @Nullable Double macroF1;
        private @Nullable Double macroPrecision;
        private @Nullable Double macroRecall;
        private @Nullable Double microF1;
        private @Nullable Double microPrecision;
        private @Nullable Double microRecall;
        private @Nullable Double weightedF1;
        private @Nullable Double weightedPrecision;
        private @Nullable Double weightedRecall;
        public Builder() {}
        public Builder(ModelEvaluationResultMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accuracy = defaults.accuracy;
    	      this.macroF1 = defaults.macroF1;
    	      this.macroPrecision = defaults.macroPrecision;
    	      this.macroRecall = defaults.macroRecall;
    	      this.microF1 = defaults.microF1;
    	      this.microPrecision = defaults.microPrecision;
    	      this.microRecall = defaults.microRecall;
    	      this.weightedF1 = defaults.weightedF1;
    	      this.weightedPrecision = defaults.weightedPrecision;
    	      this.weightedRecall = defaults.weightedRecall;
        }

        @CustomType.Setter
        public Builder accuracy(@Nullable Double accuracy) {

            this.accuracy = accuracy;
            return this;
        }
        @CustomType.Setter
        public Builder macroF1(@Nullable Double macroF1) {

            this.macroF1 = macroF1;
            return this;
        }
        @CustomType.Setter
        public Builder macroPrecision(@Nullable Double macroPrecision) {

            this.macroPrecision = macroPrecision;
            return this;
        }
        @CustomType.Setter
        public Builder macroRecall(@Nullable Double macroRecall) {

            this.macroRecall = macroRecall;
            return this;
        }
        @CustomType.Setter
        public Builder microF1(@Nullable Double microF1) {

            this.microF1 = microF1;
            return this;
        }
        @CustomType.Setter
        public Builder microPrecision(@Nullable Double microPrecision) {

            this.microPrecision = microPrecision;
            return this;
        }
        @CustomType.Setter
        public Builder microRecall(@Nullable Double microRecall) {

            this.microRecall = microRecall;
            return this;
        }
        @CustomType.Setter
        public Builder weightedF1(@Nullable Double weightedF1) {

            this.weightedF1 = weightedF1;
            return this;
        }
        @CustomType.Setter
        public Builder weightedPrecision(@Nullable Double weightedPrecision) {

            this.weightedPrecision = weightedPrecision;
            return this;
        }
        @CustomType.Setter
        public Builder weightedRecall(@Nullable Double weightedRecall) {

            this.weightedRecall = weightedRecall;
            return this;
        }
        public ModelEvaluationResultMetric build() {
            final var _resultValue = new ModelEvaluationResultMetric();
            _resultValue.accuracy = accuracy;
            _resultValue.macroF1 = macroF1;
            _resultValue.macroPrecision = macroPrecision;
            _resultValue.macroRecall = macroRecall;
            _resultValue.microF1 = microF1;
            _resultValue.microPrecision = microPrecision;
            _resultValue.microRecall = microRecall;
            _resultValue.weightedF1 = weightedF1;
            _resultValue.weightedPrecision = weightedPrecision;
            _resultValue.weightedRecall = weightedRecall;
            return _resultValue;
        }
    }
}
