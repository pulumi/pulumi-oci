// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiVision.inputs.StreamGroupStreamOverlapArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamGroupArgs Empty = new StreamGroupArgs();

    /**
     * (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A human-friendly name for the streamGroup.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A human-friendly name for the streamGroup.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Stream
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Stream
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
     * 
     */
    @Import(name="streamOverlaps")
    private @Nullable Output<List<StreamGroupStreamOverlapArgs>> streamOverlaps;

    /**
     * @return (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
     * 
     */
    public Optional<Output<List<StreamGroupStreamOverlapArgs>>> streamOverlaps() {
        return Optional.ofNullable(this.streamOverlaps);
    }

    /**
     * (Updatable) List of streamSource OCIDs associated with the stream group
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="streamSourceIds")
    private @Nullable Output<List<String>> streamSourceIds;

    /**
     * @return (Updatable) List of streamSource OCIDs associated with the stream group
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<List<String>>> streamSourceIds() {
        return Optional.ofNullable(this.streamSourceIds);
    }

    private StreamGroupArgs() {}

    private StreamGroupArgs(StreamGroupArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isEnabled = $.isEnabled;
        this.streamOverlaps = $.streamOverlaps;
        this.streamSourceIds = $.streamSourceIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamGroupArgs $;

        public Builder() {
            $ = new StreamGroupArgs();
        }

        public Builder(StreamGroupArgs defaults) {
            $ = new StreamGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) A human-friendly name for the streamGroup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A human-friendly name for the streamGroup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isEnabled (Updatable) Stream
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Stream
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param streamOverlaps (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
         * 
         * @return builder
         * 
         */
        public Builder streamOverlaps(@Nullable Output<List<StreamGroupStreamOverlapArgs>> streamOverlaps) {
            $.streamOverlaps = streamOverlaps;
            return this;
        }

        /**
         * @param streamOverlaps (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
         * 
         * @return builder
         * 
         */
        public Builder streamOverlaps(List<StreamGroupStreamOverlapArgs> streamOverlaps) {
            return streamOverlaps(Output.of(streamOverlaps));
        }

        /**
         * @param streamOverlaps (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
         * 
         * @return builder
         * 
         */
        public Builder streamOverlaps(StreamGroupStreamOverlapArgs... streamOverlaps) {
            return streamOverlaps(List.of(streamOverlaps));
        }

        /**
         * @param streamSourceIds (Updatable) List of streamSource OCIDs associated with the stream group
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder streamSourceIds(@Nullable Output<List<String>> streamSourceIds) {
            $.streamSourceIds = streamSourceIds;
            return this;
        }

        /**
         * @param streamSourceIds (Updatable) List of streamSource OCIDs associated with the stream group
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder streamSourceIds(List<String> streamSourceIds) {
            return streamSourceIds(Output.of(streamSourceIds));
        }

        /**
         * @param streamSourceIds (Updatable) List of streamSource OCIDs associated with the stream group
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder streamSourceIds(String... streamSourceIds) {
            return streamSourceIds(List.of(streamSourceIds));
        }

        public StreamGroupArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("StreamGroupArgs", "compartmentId");
            }
            return $;
        }
    }

}
