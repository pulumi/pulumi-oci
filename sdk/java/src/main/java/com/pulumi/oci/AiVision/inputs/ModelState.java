// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.AiVision.inputs.ModelTestingDatasetArgs;
import com.pulumi.oci.AiVision.inputs.ModelTrainingDatasetArgs;
import com.pulumi.oci.AiVision.inputs.ModelValidationDatasetArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelState extends com.pulumi.resources.ResourceArgs {

    public static final ModelState Empty = new ModelState();

    /**
     * The mean average precision of the trained model.
     * 
     */
    @Import(name="averagePrecision")
    private @Nullable Output<Double> averagePrecision;

    /**
     * @return The mean average precision of the trained model.
     * 
     */
    public Optional<Output<Double>> averagePrecision() {
        return Optional.ofNullable(this.averagePrecision);
    }

    /**
     * (Updatable) The compartment identifier.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The compartment identifier.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The intersection over the union threshold used for calculating precision and recall.
     * 
     */
    @Import(name="confidenceThreshold")
    private @Nullable Output<Double> confidenceThreshold;

    /**
     * @return The intersection over the union threshold used for calculating precision and recall.
     * 
     */
    public Optional<Output<Double>> confidenceThreshold() {
        return Optional.ofNullable(this.confidenceThreshold);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) An optional description of the model.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) An optional description of the model.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A human-friendly name for the model, which can be changed.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A human-friendly name for the model, which can be changed.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
     * 
     */
    @Import(name="isQuickMode")
    private @Nullable Output<Boolean> isQuickMode;

    /**
     * @return Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
     * 
     */
    public Optional<Output<Boolean>> isQuickMode() {
        return Optional.ofNullable(this.isQuickMode);
    }

    /**
     * A message describing the current state in more detail, that can provide actionable information if training failed.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return A message describing the current state in more detail, that can provide actionable information if training failed.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The maximum model training duration in hours, expressed as a decimal fraction.
     * 
     */
    @Import(name="maxTrainingDurationInHours")
    private @Nullable Output<Double> maxTrainingDurationInHours;

    /**
     * @return The maximum model training duration in hours, expressed as a decimal fraction.
     * 
     */
    public Optional<Output<Double>> maxTrainingDurationInHours() {
        return Optional.ofNullable(this.maxTrainingDurationInHours);
    }

    /**
     * The complete set of per-label metrics for successfully trained models.
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<String> metrics;

    /**
     * @return The complete set of per-label metrics for successfully trained models.
     * 
     */
    public Optional<Output<String>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * Which type of Vision model this is.
     * 
     */
    @Import(name="modelType")
    private @Nullable Output<String> modelType;

    /**
     * @return Which type of Vision model this is.
     * 
     */
    public Optional<Output<String>> modelType() {
        return Optional.ofNullable(this.modelType);
    }

    /**
     * The model version
     * 
     */
    @Import(name="modelVersion")
    private @Nullable Output<String> modelVersion;

    /**
     * @return The model version
     * 
     */
    public Optional<Output<String>> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }

    /**
     * The precision of the trained model.
     * 
     */
    @Import(name="precision")
    private @Nullable Output<Double> precision;

    /**
     * @return The precision of the trained model.
     * 
     */
    public Optional<Output<Double>> precision() {
        return Optional.ofNullable(this.precision);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Recall of the trained model.
     * 
     */
    @Import(name="recall")
    private @Nullable Output<Double> recall;

    /**
     * @return Recall of the trained model.
     * 
     */
    public Optional<Output<Double>> recall() {
        return Optional.ofNullable(this.recall);
    }

    /**
     * The current state of the model.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the model.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{&#34;orcl-cloud&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{&#34;orcl-cloud&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The number of images set aside for evaluating model performance metrics after training.
     * 
     */
    @Import(name="testImageCount")
    private @Nullable Output<Integer> testImageCount;

    /**
     * @return The number of images set aside for evaluating model performance metrics after training.
     * 
     */
    public Optional<Output<Integer>> testImageCount() {
        return Optional.ofNullable(this.testImageCount);
    }

    /**
     * The base entity which is the input for creating and training a model.
     * 
     */
    @Import(name="testingDataset")
    private @Nullable Output<ModelTestingDatasetArgs> testingDataset;

    /**
     * @return The base entity which is the input for creating and training a model.
     * 
     */
    public Optional<Output<ModelTestingDatasetArgs>> testingDataset() {
        return Optional.ofNullable(this.testingDataset);
    }

    /**
     * When the model was created, as an RFC3339 datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return When the model was created, as an RFC3339 datetime string.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * When the model was updated, as an RFC3339 datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return When the model was updated, as an RFC3339 datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The number of images in the dataset used to train, validate, and test the model.
     * 
     */
    @Import(name="totalImageCount")
    private @Nullable Output<Integer> totalImageCount;

    /**
     * @return The number of images in the dataset used to train, validate, and test the model.
     * 
     */
    public Optional<Output<Integer>> totalImageCount() {
        return Optional.ofNullable(this.totalImageCount);
    }

    /**
     * The total hours actually used for model training.
     * 
     */
    @Import(name="trainedDurationInHours")
    private @Nullable Output<Double> trainedDurationInHours;

    /**
     * @return The total hours actually used for model training.
     * 
     */
    public Optional<Output<Double>> trainedDurationInHours() {
        return Optional.ofNullable(this.trainedDurationInHours);
    }

    /**
     * The base entity which is the input for creating and training a model.
     * 
     */
    @Import(name="trainingDataset")
    private @Nullable Output<ModelTrainingDatasetArgs> trainingDataset;

    /**
     * @return The base entity which is the input for creating and training a model.
     * 
     */
    public Optional<Output<ModelTrainingDatasetArgs>> trainingDataset() {
        return Optional.ofNullable(this.trainingDataset);
    }

    /**
     * The base entity which is the input for creating and training a model.
     * 
     */
    @Import(name="validationDataset")
    private @Nullable Output<ModelValidationDatasetArgs> validationDataset;

    /**
     * @return The base entity which is the input for creating and training a model.
     * 
     */
    public Optional<Output<ModelValidationDatasetArgs>> validationDataset() {
        return Optional.ofNullable(this.validationDataset);
    }

    private ModelState() {}

    private ModelState(ModelState $) {
        this.averagePrecision = $.averagePrecision;
        this.compartmentId = $.compartmentId;
        this.confidenceThreshold = $.confidenceThreshold;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isQuickMode = $.isQuickMode;
        this.lifecycleDetails = $.lifecycleDetails;
        this.maxTrainingDurationInHours = $.maxTrainingDurationInHours;
        this.metrics = $.metrics;
        this.modelType = $.modelType;
        this.modelVersion = $.modelVersion;
        this.precision = $.precision;
        this.projectId = $.projectId;
        this.recall = $.recall;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.testImageCount = $.testImageCount;
        this.testingDataset = $.testingDataset;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.totalImageCount = $.totalImageCount;
        this.trainedDurationInHours = $.trainedDurationInHours;
        this.trainingDataset = $.trainingDataset;
        this.validationDataset = $.validationDataset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelState $;

        public Builder() {
            $ = new ModelState();
        }

        public Builder(ModelState defaults) {
            $ = new ModelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param averagePrecision The mean average precision of the trained model.
         * 
         * @return builder
         * 
         */
        public Builder averagePrecision(@Nullable Output<Double> averagePrecision) {
            $.averagePrecision = averagePrecision;
            return this;
        }

        /**
         * @param averagePrecision The mean average precision of the trained model.
         * 
         * @return builder
         * 
         */
        public Builder averagePrecision(Double averagePrecision) {
            return averagePrecision(Output.of(averagePrecision));
        }

        /**
         * @param compartmentId (Updatable) The compartment identifier.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The compartment identifier.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param confidenceThreshold The intersection over the union threshold used for calculating precision and recall.
         * 
         * @return builder
         * 
         */
        public Builder confidenceThreshold(@Nullable Output<Double> confidenceThreshold) {
            $.confidenceThreshold = confidenceThreshold;
            return this;
        }

        /**
         * @param confidenceThreshold The intersection over the union threshold used for calculating precision and recall.
         * 
         * @return builder
         * 
         */
        public Builder confidenceThreshold(Double confidenceThreshold) {
            return confidenceThreshold(Output.of(confidenceThreshold));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) An optional description of the model.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) An optional description of the model.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A human-friendly name for the model, which can be changed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A human-friendly name for the model, which can be changed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isQuickMode Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
         * 
         * @return builder
         * 
         */
        public Builder isQuickMode(@Nullable Output<Boolean> isQuickMode) {
            $.isQuickMode = isQuickMode;
            return this;
        }

        /**
         * @param isQuickMode Set to true when experimenting with a new model type or dataset, so the model training is quick, with a predefined low number of passes through the training data.
         * 
         * @return builder
         * 
         */
        public Builder isQuickMode(Boolean isQuickMode) {
            return isQuickMode(Output.of(isQuickMode));
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail, that can provide actionable information if training failed.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails A message describing the current state in more detail, that can provide actionable information if training failed.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param maxTrainingDurationInHours The maximum model training duration in hours, expressed as a decimal fraction.
         * 
         * @return builder
         * 
         */
        public Builder maxTrainingDurationInHours(@Nullable Output<Double> maxTrainingDurationInHours) {
            $.maxTrainingDurationInHours = maxTrainingDurationInHours;
            return this;
        }

        /**
         * @param maxTrainingDurationInHours The maximum model training duration in hours, expressed as a decimal fraction.
         * 
         * @return builder
         * 
         */
        public Builder maxTrainingDurationInHours(Double maxTrainingDurationInHours) {
            return maxTrainingDurationInHours(Output.of(maxTrainingDurationInHours));
        }

        /**
         * @param metrics The complete set of per-label metrics for successfully trained models.
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<String> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics The complete set of per-label metrics for successfully trained models.
         * 
         * @return builder
         * 
         */
        public Builder metrics(String metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param modelType Which type of Vision model this is.
         * 
         * @return builder
         * 
         */
        public Builder modelType(@Nullable Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType Which type of Vision model this is.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param modelVersion The model version
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(@Nullable Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion The model version
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        /**
         * @param precision The precision of the trained model.
         * 
         * @return builder
         * 
         */
        public Builder precision(@Nullable Output<Double> precision) {
            $.precision = precision;
            return this;
        }

        /**
         * @param precision The precision of the trained model.
         * 
         * @return builder
         * 
         */
        public Builder precision(Double precision) {
            return precision(Output.of(precision));
        }

        /**
         * @param projectId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param recall Recall of the trained model.
         * 
         * @return builder
         * 
         */
        public Builder recall(@Nullable Output<Double> recall) {
            $.recall = recall;
            return this;
        }

        /**
         * @param recall Recall of the trained model.
         * 
         * @return builder
         * 
         */
        public Builder recall(Double recall) {
            return recall(Output.of(recall));
        }

        /**
         * @param state The current state of the model.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the model.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{&#34;orcl-cloud&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{&#34;orcl-cloud&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param testImageCount The number of images set aside for evaluating model performance metrics after training.
         * 
         * @return builder
         * 
         */
        public Builder testImageCount(@Nullable Output<Integer> testImageCount) {
            $.testImageCount = testImageCount;
            return this;
        }

        /**
         * @param testImageCount The number of images set aside for evaluating model performance metrics after training.
         * 
         * @return builder
         * 
         */
        public Builder testImageCount(Integer testImageCount) {
            return testImageCount(Output.of(testImageCount));
        }

        /**
         * @param testingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder testingDataset(@Nullable Output<ModelTestingDatasetArgs> testingDataset) {
            $.testingDataset = testingDataset;
            return this;
        }

        /**
         * @param testingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder testingDataset(ModelTestingDatasetArgs testingDataset) {
            return testingDataset(Output.of(testingDataset));
        }

        /**
         * @param timeCreated When the model was created, as an RFC3339 datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated When the model was created, as an RFC3339 datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated When the model was updated, as an RFC3339 datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated When the model was updated, as an RFC3339 datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param totalImageCount The number of images in the dataset used to train, validate, and test the model.
         * 
         * @return builder
         * 
         */
        public Builder totalImageCount(@Nullable Output<Integer> totalImageCount) {
            $.totalImageCount = totalImageCount;
            return this;
        }

        /**
         * @param totalImageCount The number of images in the dataset used to train, validate, and test the model.
         * 
         * @return builder
         * 
         */
        public Builder totalImageCount(Integer totalImageCount) {
            return totalImageCount(Output.of(totalImageCount));
        }

        /**
         * @param trainedDurationInHours The total hours actually used for model training.
         * 
         * @return builder
         * 
         */
        public Builder trainedDurationInHours(@Nullable Output<Double> trainedDurationInHours) {
            $.trainedDurationInHours = trainedDurationInHours;
            return this;
        }

        /**
         * @param trainedDurationInHours The total hours actually used for model training.
         * 
         * @return builder
         * 
         */
        public Builder trainedDurationInHours(Double trainedDurationInHours) {
            return trainedDurationInHours(Output.of(trainedDurationInHours));
        }

        /**
         * @param trainingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder trainingDataset(@Nullable Output<ModelTrainingDatasetArgs> trainingDataset) {
            $.trainingDataset = trainingDataset;
            return this;
        }

        /**
         * @param trainingDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder trainingDataset(ModelTrainingDatasetArgs trainingDataset) {
            return trainingDataset(Output.of(trainingDataset));
        }

        /**
         * @param validationDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder validationDataset(@Nullable Output<ModelValidationDatasetArgs> validationDataset) {
            $.validationDataset = validationDataset;
            return this;
        }

        /**
         * @param validationDataset The base entity which is the input for creating and training a model.
         * 
         * @return builder
         * 
         */
        public Builder validationDataset(ModelValidationDatasetArgs validationDataset) {
            return validationDataset(Output.of(validationDataset));
        }

        public ModelState build() {
            return $;
        }
    }

}
