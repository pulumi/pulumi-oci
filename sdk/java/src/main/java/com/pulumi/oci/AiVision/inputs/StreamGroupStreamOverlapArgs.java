// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamGroupStreamOverlapArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamGroupStreamOverlapArgs Empty = new StreamGroupStreamOverlapArgs();

    /**
     * (Updatable) List of streamSource OCIDs.
     * 
     */
    @Import(name="overlappingStreams")
    private @Nullable Output<List<String>> overlappingStreams;

    /**
     * @return (Updatable) List of streamSource OCIDs.
     * 
     */
    public Optional<Output<List<String>>> overlappingStreams() {
        return Optional.ofNullable(this.overlappingStreams);
    }

    private StreamGroupStreamOverlapArgs() {}

    private StreamGroupStreamOverlapArgs(StreamGroupStreamOverlapArgs $) {
        this.overlappingStreams = $.overlappingStreams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamGroupStreamOverlapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamGroupStreamOverlapArgs $;

        public Builder() {
            $ = new StreamGroupStreamOverlapArgs();
        }

        public Builder(StreamGroupStreamOverlapArgs defaults) {
            $ = new StreamGroupStreamOverlapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param overlappingStreams (Updatable) List of streamSource OCIDs.
         * 
         * @return builder
         * 
         */
        public Builder overlappingStreams(@Nullable Output<List<String>> overlappingStreams) {
            $.overlappingStreams = overlappingStreams;
            return this;
        }

        /**
         * @param overlappingStreams (Updatable) List of streamSource OCIDs.
         * 
         * @return builder
         * 
         */
        public Builder overlappingStreams(List<String> overlappingStreams) {
            return overlappingStreams(Output.of(overlappingStreams));
        }

        /**
         * @param overlappingStreams (Updatable) List of streamSource OCIDs.
         * 
         * @return builder
         * 
         */
        public Builder overlappingStreams(String... overlappingStreams) {
            return overlappingStreams(List.of(overlappingStreams));
        }

        public StreamGroupStreamOverlapArgs build() {
            return $;
        }
    }

}
