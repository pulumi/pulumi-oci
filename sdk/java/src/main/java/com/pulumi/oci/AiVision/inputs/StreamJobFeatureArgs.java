// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiVision.inputs.StreamJobFeatureTrackingTypeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamJobFeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamJobFeatureArgs Empty = new StreamJobFeatureArgs();

    /**
     * (Updatable) The feature of video analysis. Allowed values are:
     * * OBJECT_TRACKING: Object tracking feature(OT).
     * * FACE_DETECTION: Face detection feature(FD).
     * 
     */
    @Import(name="featureType", required=true)
    private Output<String> featureType;

    /**
     * @return (Updatable) The feature of video analysis. Allowed values are:
     * * OBJECT_TRACKING: Object tracking feature(OT).
     * * FACE_DETECTION: Face detection feature(FD).
     * 
     */
    public Output<String> featureType() {
        return this.featureType;
    }

    /**
     * (Updatable) The maximum number of results to return.
     * 
     */
    @Import(name="maxResults")
    private @Nullable Output<Integer> maxResults;

    /**
     * @return (Updatable) The maximum number of results to return.
     * 
     */
    public Optional<Output<Integer>> maxResults() {
        return Optional.ofNullable(this.maxResults);
    }

    /**
     * (Updatable) Whether or not return face landmarks.
     * 
     */
    @Import(name="shouldReturnLandmarks")
    private @Nullable Output<Boolean> shouldReturnLandmarks;

    /**
     * @return (Updatable) Whether or not return face landmarks.
     * 
     */
    public Optional<Output<Boolean>> shouldReturnLandmarks() {
        return Optional.ofNullable(this.shouldReturnLandmarks);
    }

    /**
     * (Updatable) List of details of what to track.
     * 
     */
    @Import(name="trackingTypes")
    private @Nullable Output<List<StreamJobFeatureTrackingTypeArgs>> trackingTypes;

    /**
     * @return (Updatable) List of details of what to track.
     * 
     */
    public Optional<Output<List<StreamJobFeatureTrackingTypeArgs>>> trackingTypes() {
        return Optional.ofNullable(this.trackingTypes);
    }

    private StreamJobFeatureArgs() {}

    private StreamJobFeatureArgs(StreamJobFeatureArgs $) {
        this.featureType = $.featureType;
        this.maxResults = $.maxResults;
        this.shouldReturnLandmarks = $.shouldReturnLandmarks;
        this.trackingTypes = $.trackingTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamJobFeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamJobFeatureArgs $;

        public Builder() {
            $ = new StreamJobFeatureArgs();
        }

        public Builder(StreamJobFeatureArgs defaults) {
            $ = new StreamJobFeatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param featureType (Updatable) The feature of video analysis. Allowed values are:
         * * OBJECT_TRACKING: Object tracking feature(OT).
         * * FACE_DETECTION: Face detection feature(FD).
         * 
         * @return builder
         * 
         */
        public Builder featureType(Output<String> featureType) {
            $.featureType = featureType;
            return this;
        }

        /**
         * @param featureType (Updatable) The feature of video analysis. Allowed values are:
         * * OBJECT_TRACKING: Object tracking feature(OT).
         * * FACE_DETECTION: Face detection feature(FD).
         * 
         * @return builder
         * 
         */
        public Builder featureType(String featureType) {
            return featureType(Output.of(featureType));
        }

        /**
         * @param maxResults (Updatable) The maximum number of results to return.
         * 
         * @return builder
         * 
         */
        public Builder maxResults(@Nullable Output<Integer> maxResults) {
            $.maxResults = maxResults;
            return this;
        }

        /**
         * @param maxResults (Updatable) The maximum number of results to return.
         * 
         * @return builder
         * 
         */
        public Builder maxResults(Integer maxResults) {
            return maxResults(Output.of(maxResults));
        }

        /**
         * @param shouldReturnLandmarks (Updatable) Whether or not return face landmarks.
         * 
         * @return builder
         * 
         */
        public Builder shouldReturnLandmarks(@Nullable Output<Boolean> shouldReturnLandmarks) {
            $.shouldReturnLandmarks = shouldReturnLandmarks;
            return this;
        }

        /**
         * @param shouldReturnLandmarks (Updatable) Whether or not return face landmarks.
         * 
         * @return builder
         * 
         */
        public Builder shouldReturnLandmarks(Boolean shouldReturnLandmarks) {
            return shouldReturnLandmarks(Output.of(shouldReturnLandmarks));
        }

        /**
         * @param trackingTypes (Updatable) List of details of what to track.
         * 
         * @return builder
         * 
         */
        public Builder trackingTypes(@Nullable Output<List<StreamJobFeatureTrackingTypeArgs>> trackingTypes) {
            $.trackingTypes = trackingTypes;
            return this;
        }

        /**
         * @param trackingTypes (Updatable) List of details of what to track.
         * 
         * @return builder
         * 
         */
        public Builder trackingTypes(List<StreamJobFeatureTrackingTypeArgs> trackingTypes) {
            return trackingTypes(Output.of(trackingTypes));
        }

        /**
         * @param trackingTypes (Updatable) List of details of what to track.
         * 
         * @return builder
         * 
         */
        public Builder trackingTypes(StreamJobFeatureTrackingTypeArgs... trackingTypes) {
            return trackingTypes(List.of(trackingTypes));
        }

        public StreamJobFeatureArgs build() {
            if ($.featureType == null) {
                throw new MissingRequiredPropertyException("StreamJobFeatureArgs", "featureType");
            }
            return $;
        }
    }

}
