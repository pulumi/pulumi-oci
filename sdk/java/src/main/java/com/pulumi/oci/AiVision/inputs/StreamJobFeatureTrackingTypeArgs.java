// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamJobFeatureTrackingTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamJobFeatureTrackingTypeArgs Empty = new StreamJobFeatureTrackingTypeArgs();

    /**
     * (Updatable) compartment Id of biometric compartment.
     * 
     */
    @Import(name="biometricStoreCompartmentId")
    private @Nullable Output<String> biometricStoreCompartmentId;

    /**
     * @return (Updatable) compartment Id of biometric compartment.
     * 
     */
    public Optional<Output<String>> biometricStoreCompartmentId() {
        return Optional.ofNullable(this.biometricStoreCompartmentId);
    }

    /**
     * (Updatable) Which biometric store user wants to do face recognition
     * 
     */
    @Import(name="biometricStoreId")
    private @Nullable Output<String> biometricStoreId;

    /**
     * @return (Updatable) Which biometric store user wants to do face recognition
     * 
     */
    public Optional<Output<String>> biometricStoreId() {
        return Optional.ofNullable(this.biometricStoreId);
    }

    /**
     * (Updatable) The detection model OCID.
     * 
     */
    @Import(name="detectionModelId")
    private @Nullable Output<String> detectionModelId;

    /**
     * @return (Updatable) The detection model OCID.
     * 
     */
    public Optional<Output<String>> detectionModelId() {
        return Optional.ofNullable(this.detectionModelId);
    }

    /**
     * (Updatable) The maximum number of results to return.
     * 
     */
    @Import(name="maxResults")
    private @Nullable Output<Integer> maxResults;

    /**
     * @return (Updatable) The maximum number of results to return.
     * 
     */
    public Optional<Output<Integer>> maxResults() {
        return Optional.ofNullable(this.maxResults);
    }

    /**
     * (Updatable) List of the objects to be tracked.
     * 
     */
    @Import(name="objects")
    private @Nullable Output<List<String>> objects;

    /**
     * @return (Updatable) List of the objects to be tracked.
     * 
     */
    public Optional<Output<List<String>>> objects() {
        return Optional.ofNullable(this.objects);
    }

    /**
     * (Updatable) Whether or not return face landmarks.
     * 
     */
    @Import(name="shouldReturnLandmarks")
    private @Nullable Output<Boolean> shouldReturnLandmarks;

    /**
     * @return (Updatable) Whether or not return face landmarks.
     * 
     */
    public Optional<Output<Boolean>> shouldReturnLandmarks() {
        return Optional.ofNullable(this.shouldReturnLandmarks);
    }

    /**
     * (Updatable) The tracking model OCID.
     * 
     */
    @Import(name="trackingModelId")
    private @Nullable Output<String> trackingModelId;

    /**
     * @return (Updatable) The tracking model OCID.
     * 
     */
    public Optional<Output<String>> trackingModelId() {
        return Optional.ofNullable(this.trackingModelId);
    }

    private StreamJobFeatureTrackingTypeArgs() {}

    private StreamJobFeatureTrackingTypeArgs(StreamJobFeatureTrackingTypeArgs $) {
        this.biometricStoreCompartmentId = $.biometricStoreCompartmentId;
        this.biometricStoreId = $.biometricStoreId;
        this.detectionModelId = $.detectionModelId;
        this.maxResults = $.maxResults;
        this.objects = $.objects;
        this.shouldReturnLandmarks = $.shouldReturnLandmarks;
        this.trackingModelId = $.trackingModelId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamJobFeatureTrackingTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamJobFeatureTrackingTypeArgs $;

        public Builder() {
            $ = new StreamJobFeatureTrackingTypeArgs();
        }

        public Builder(StreamJobFeatureTrackingTypeArgs defaults) {
            $ = new StreamJobFeatureTrackingTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param biometricStoreCompartmentId (Updatable) compartment Id of biometric compartment.
         * 
         * @return builder
         * 
         */
        public Builder biometricStoreCompartmentId(@Nullable Output<String> biometricStoreCompartmentId) {
            $.biometricStoreCompartmentId = biometricStoreCompartmentId;
            return this;
        }

        /**
         * @param biometricStoreCompartmentId (Updatable) compartment Id of biometric compartment.
         * 
         * @return builder
         * 
         */
        public Builder biometricStoreCompartmentId(String biometricStoreCompartmentId) {
            return biometricStoreCompartmentId(Output.of(biometricStoreCompartmentId));
        }

        /**
         * @param biometricStoreId (Updatable) Which biometric store user wants to do face recognition
         * 
         * @return builder
         * 
         */
        public Builder biometricStoreId(@Nullable Output<String> biometricStoreId) {
            $.biometricStoreId = biometricStoreId;
            return this;
        }

        /**
         * @param biometricStoreId (Updatable) Which biometric store user wants to do face recognition
         * 
         * @return builder
         * 
         */
        public Builder biometricStoreId(String biometricStoreId) {
            return biometricStoreId(Output.of(biometricStoreId));
        }

        /**
         * @param detectionModelId (Updatable) The detection model OCID.
         * 
         * @return builder
         * 
         */
        public Builder detectionModelId(@Nullable Output<String> detectionModelId) {
            $.detectionModelId = detectionModelId;
            return this;
        }

        /**
         * @param detectionModelId (Updatable) The detection model OCID.
         * 
         * @return builder
         * 
         */
        public Builder detectionModelId(String detectionModelId) {
            return detectionModelId(Output.of(detectionModelId));
        }

        /**
         * @param maxResults (Updatable) The maximum number of results to return.
         * 
         * @return builder
         * 
         */
        public Builder maxResults(@Nullable Output<Integer> maxResults) {
            $.maxResults = maxResults;
            return this;
        }

        /**
         * @param maxResults (Updatable) The maximum number of results to return.
         * 
         * @return builder
         * 
         */
        public Builder maxResults(Integer maxResults) {
            return maxResults(Output.of(maxResults));
        }

        /**
         * @param objects (Updatable) List of the objects to be tracked.
         * 
         * @return builder
         * 
         */
        public Builder objects(@Nullable Output<List<String>> objects) {
            $.objects = objects;
            return this;
        }

        /**
         * @param objects (Updatable) List of the objects to be tracked.
         * 
         * @return builder
         * 
         */
        public Builder objects(List<String> objects) {
            return objects(Output.of(objects));
        }

        /**
         * @param objects (Updatable) List of the objects to be tracked.
         * 
         * @return builder
         * 
         */
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }

        /**
         * @param shouldReturnLandmarks (Updatable) Whether or not return face landmarks.
         * 
         * @return builder
         * 
         */
        public Builder shouldReturnLandmarks(@Nullable Output<Boolean> shouldReturnLandmarks) {
            $.shouldReturnLandmarks = shouldReturnLandmarks;
            return this;
        }

        /**
         * @param shouldReturnLandmarks (Updatable) Whether or not return face landmarks.
         * 
         * @return builder
         * 
         */
        public Builder shouldReturnLandmarks(Boolean shouldReturnLandmarks) {
            return shouldReturnLandmarks(Output.of(shouldReturnLandmarks));
        }

        /**
         * @param trackingModelId (Updatable) The tracking model OCID.
         * 
         * @return builder
         * 
         */
        public Builder trackingModelId(@Nullable Output<String> trackingModelId) {
            $.trackingModelId = trackingModelId;
            return this;
        }

        /**
         * @param trackingModelId (Updatable) The tracking model OCID.
         * 
         * @return builder
         * 
         */
        public Builder trackingModelId(String trackingModelId) {
            return trackingModelId(Output.of(trackingModelId));
        }

        public StreamJobFeatureTrackingTypeArgs build() {
            return $;
        }
    }

}
