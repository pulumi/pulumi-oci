// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiVision.outputs.GetModelTestingDataset;
import com.pulumi.oci.AiVision.outputs.GetModelTrainingDataset;
import com.pulumi.oci.AiVision.outputs.GetModelValidationDataset;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetModelResult {
    /**
     * @return Average precision of the trained model
     * 
     */
    private Double averagePrecision;
    /**
     * @return Compartment Identifier
     * 
     */
    private String compartmentId;
    /**
     * @return Confidence ratio of the calculation
     * 
     */
    private Double confidenceThreshold;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A short description of the model.
     * 
     */
    private String description;
    /**
     * @return Model Identifier, can be renamed
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Unique identifier that is immutable on creation
     * 
     */
    private String id;
    /**
     * @return If It&#39;s true, Training is set for recommended epochs needed for quick training.
     * 
     */
    private Boolean isQuickMode;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The maximum duration in hours for which the training will run.
     * 
     */
    private Double maxTrainingDurationInHours;
    /**
     * @return Complete Training Metrics for successful trained model
     * 
     */
    private String metrics;
    private String modelId;
    /**
     * @return Type of the Model.
     * 
     */
    private String modelType;
    /**
     * @return The version of the model
     * 
     */
    private String modelVersion;
    /**
     * @return Precision of the trained model
     * 
     */
    private Double precision;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
     * 
     */
    private String projectId;
    /**
     * @return Recall of the trained model
     * 
     */
    private Double recall;
    /**
     * @return The current state of the Model.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return Total number of testing Images
     * 
     */
    private Integer testImageCount;
    /**
     * @return The base entity for a Dataset, which is the input for Model creation.
     * 
     */
    private List<GetModelTestingDataset> testingDatasets;
    /**
     * @return The time the Model was created. An RFC3339 formatted datetime string
     * 
     */
    private String timeCreated;
    /**
     * @return The time the Model was updated. An RFC3339 formatted datetime string
     * 
     */
    private String timeUpdated;
    /**
     * @return Total number of training Images
     * 
     */
    private Integer totalImageCount;
    /**
     * @return Total hours actually used for training
     * 
     */
    private Double trainedDurationInHours;
    /**
     * @return The base entity for a Dataset, which is the input for Model creation.
     * 
     */
    private List<GetModelTrainingDataset> trainingDatasets;
    /**
     * @return The base entity for a Dataset, which is the input for Model creation.
     * 
     */
    private List<GetModelValidationDataset> validationDatasets;

    private GetModelResult() {}
    /**
     * @return Average precision of the trained model
     * 
     */
    public Double averagePrecision() {
        return this.averagePrecision;
    }
    /**
     * @return Compartment Identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Confidence ratio of the calculation
     * 
     */
    public Double confidenceThreshold() {
        return this.confidenceThreshold;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A short description of the model.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Model Identifier, can be renamed
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable on creation
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If It&#39;s true, Training is set for recommended epochs needed for quick training.
     * 
     */
    public Boolean isQuickMode() {
        return this.isQuickMode;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The maximum duration in hours for which the training will run.
     * 
     */
    public Double maxTrainingDurationInHours() {
        return this.maxTrainingDurationInHours;
    }
    /**
     * @return Complete Training Metrics for successful trained model
     * 
     */
    public String metrics() {
        return this.metrics;
    }
    public String modelId() {
        return this.modelId;
    }
    /**
     * @return Type of the Model.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The version of the model
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Precision of the trained model
     * 
     */
    public Double precision() {
        return this.precision;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Recall of the trained model
     * 
     */
    public Double recall() {
        return this.recall;
    }
    /**
     * @return The current state of the Model.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Total number of testing Images
     * 
     */
    public Integer testImageCount() {
        return this.testImageCount;
    }
    /**
     * @return The base entity for a Dataset, which is the input for Model creation.
     * 
     */
    public List<GetModelTestingDataset> testingDatasets() {
        return this.testingDatasets;
    }
    /**
     * @return The time the Model was created. An RFC3339 formatted datetime string
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the Model was updated. An RFC3339 formatted datetime string
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Total number of training Images
     * 
     */
    public Integer totalImageCount() {
        return this.totalImageCount;
    }
    /**
     * @return Total hours actually used for training
     * 
     */
    public Double trainedDurationInHours() {
        return this.trainedDurationInHours;
    }
    /**
     * @return The base entity for a Dataset, which is the input for Model creation.
     * 
     */
    public List<GetModelTrainingDataset> trainingDatasets() {
        return this.trainingDatasets;
    }
    /**
     * @return The base entity for a Dataset, which is the input for Model creation.
     * 
     */
    public List<GetModelValidationDataset> validationDatasets() {
        return this.validationDatasets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double averagePrecision;
        private String compartmentId;
        private Double confidenceThreshold;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isQuickMode;
        private String lifecycleDetails;
        private Double maxTrainingDurationInHours;
        private String metrics;
        private String modelId;
        private String modelType;
        private String modelVersion;
        private Double precision;
        private String projectId;
        private Double recall;
        private String state;
        private Map<String,String> systemTags;
        private Integer testImageCount;
        private List<GetModelTestingDataset> testingDatasets;
        private String timeCreated;
        private String timeUpdated;
        private Integer totalImageCount;
        private Double trainedDurationInHours;
        private List<GetModelTrainingDataset> trainingDatasets;
        private List<GetModelValidationDataset> validationDatasets;
        public Builder() {}
        public Builder(GetModelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.averagePrecision = defaults.averagePrecision;
    	      this.compartmentId = defaults.compartmentId;
    	      this.confidenceThreshold = defaults.confidenceThreshold;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isQuickMode = defaults.isQuickMode;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maxTrainingDurationInHours = defaults.maxTrainingDurationInHours;
    	      this.metrics = defaults.metrics;
    	      this.modelId = defaults.modelId;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.precision = defaults.precision;
    	      this.projectId = defaults.projectId;
    	      this.recall = defaults.recall;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.testImageCount = defaults.testImageCount;
    	      this.testingDatasets = defaults.testingDatasets;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.totalImageCount = defaults.totalImageCount;
    	      this.trainedDurationInHours = defaults.trainedDurationInHours;
    	      this.trainingDatasets = defaults.trainingDatasets;
    	      this.validationDatasets = defaults.validationDatasets;
        }

        @CustomType.Setter
        public Builder averagePrecision(Double averagePrecision) {
            if (averagePrecision == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "averagePrecision");
            }
            this.averagePrecision = averagePrecision;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder confidenceThreshold(Double confidenceThreshold) {
            if (confidenceThreshold == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "confidenceThreshold");
            }
            this.confidenceThreshold = confidenceThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isQuickMode(Boolean isQuickMode) {
            if (isQuickMode == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "isQuickMode");
            }
            this.isQuickMode = isQuickMode;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maxTrainingDurationInHours(Double maxTrainingDurationInHours) {
            if (maxTrainingDurationInHours == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "maxTrainingDurationInHours");
            }
            this.maxTrainingDurationInHours = maxTrainingDurationInHours;
            return this;
        }
        @CustomType.Setter
        public Builder metrics(String metrics) {
            if (metrics == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "metrics");
            }
            this.metrics = metrics;
            return this;
        }
        @CustomType.Setter
        public Builder modelId(String modelId) {
            if (modelId == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "modelId");
            }
            this.modelId = modelId;
            return this;
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            if (modelType == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "modelType");
            }
            this.modelType = modelType;
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(String modelVersion) {
            if (modelVersion == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "modelVersion");
            }
            this.modelVersion = modelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder precision(Double precision) {
            if (precision == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "precision");
            }
            this.precision = precision;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder recall(Double recall) {
            if (recall == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "recall");
            }
            this.recall = recall;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder testImageCount(Integer testImageCount) {
            if (testImageCount == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "testImageCount");
            }
            this.testImageCount = testImageCount;
            return this;
        }
        @CustomType.Setter
        public Builder testingDatasets(List<GetModelTestingDataset> testingDatasets) {
            if (testingDatasets == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "testingDatasets");
            }
            this.testingDatasets = testingDatasets;
            return this;
        }
        public Builder testingDatasets(GetModelTestingDataset... testingDatasets) {
            return testingDatasets(List.of(testingDatasets));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder totalImageCount(Integer totalImageCount) {
            if (totalImageCount == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "totalImageCount");
            }
            this.totalImageCount = totalImageCount;
            return this;
        }
        @CustomType.Setter
        public Builder trainedDurationInHours(Double trainedDurationInHours) {
            if (trainedDurationInHours == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "trainedDurationInHours");
            }
            this.trainedDurationInHours = trainedDurationInHours;
            return this;
        }
        @CustomType.Setter
        public Builder trainingDatasets(List<GetModelTrainingDataset> trainingDatasets) {
            if (trainingDatasets == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "trainingDatasets");
            }
            this.trainingDatasets = trainingDatasets;
            return this;
        }
        public Builder trainingDatasets(GetModelTrainingDataset... trainingDatasets) {
            return trainingDatasets(List.of(trainingDatasets));
        }
        @CustomType.Setter
        public Builder validationDatasets(List<GetModelValidationDataset> validationDatasets) {
            if (validationDatasets == null) {
              throw new MissingRequiredPropertyException("GetModelResult", "validationDatasets");
            }
            this.validationDatasets = validationDatasets;
            return this;
        }
        public Builder validationDatasets(GetModelValidationDataset... validationDatasets) {
            return validationDatasets(List.of(validationDatasets));
        }
        public GetModelResult build() {
            final var _resultValue = new GetModelResult();
            _resultValue.averagePrecision = averagePrecision;
            _resultValue.compartmentId = compartmentId;
            _resultValue.confidenceThreshold = confidenceThreshold;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isQuickMode = isQuickMode;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.maxTrainingDurationInHours = maxTrainingDurationInHours;
            _resultValue.metrics = metrics;
            _resultValue.modelId = modelId;
            _resultValue.modelType = modelType;
            _resultValue.modelVersion = modelVersion;
            _resultValue.precision = precision;
            _resultValue.projectId = projectId;
            _resultValue.recall = recall;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.testImageCount = testImageCount;
            _resultValue.testingDatasets = testingDatasets;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.totalImageCount = totalImageCount;
            _resultValue.trainedDurationInHours = trainedDurationInHours;
            _resultValue.trainingDatasets = trainingDatasets;
            _resultValue.validationDatasets = validationDatasets;
            return _resultValue;
        }
    }
}
