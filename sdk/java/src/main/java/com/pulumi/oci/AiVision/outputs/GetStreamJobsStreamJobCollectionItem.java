// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.AiVision.outputs.GetStreamJobsStreamJobCollectionItemFeature;
import com.pulumi.oci.AiVision.outputs.GetStreamJobsStreamJobCollectionItemStreamOutputLocation;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStreamJobsStreamJobCollectionItem {
    /**
     * @return participant id of agent where results need to be sent
     * 
     */
    private String agentParticipantId;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return a list of document analysis features.
     * 
     */
    private List<GetStreamJobsStreamJobCollectionItemFeature> features;
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The filter to find the streamjob with the given identifier.
     * 
     */
    private String id;
    /**
     * @return Additional details about current state of streamJob
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The filter to match projects with the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return Details about a where results will be Sent
     * 
     */
    private List<GetStreamJobsStreamJobCollectionItemStreamOutputLocation> streamOutputLocations;
    /**
     * @return [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource
     * 
     */
    private String streamSourceId;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{&#34;orcl-cloud&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return When the streamJob was created, as an RFC3339 datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return When the stream job was updated, as an RFC3339 datetime string.
     * 
     */
    private String timeUpdated;

    private GetStreamJobsStreamJobCollectionItem() {}
    /**
     * @return participant id of agent where results need to be sent
     * 
     */
    public String agentParticipantId() {
        return this.agentParticipantId;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return a list of document analysis features.
     * 
     */
    public List<GetStreamJobsStreamJobCollectionItemFeature> features() {
        return this.features;
    }
    /**
     * @return A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The filter to find the streamjob with the given identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional details about current state of streamJob
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The filter to match projects with the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Details about a where results will be Sent
     * 
     */
    public List<GetStreamJobsStreamJobCollectionItemStreamOutputLocation> streamOutputLocations() {
        return this.streamOutputLocations;
    }
    /**
     * @return [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource
     * 
     */
    public String streamSourceId() {
        return this.streamSourceId;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{&#34;orcl-cloud&#34;: {&#34;free-tier-retained&#34;: &#34;true&#34;}}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return When the streamJob was created, as an RFC3339 datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return When the stream job was updated, as an RFC3339 datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamJobsStreamJobCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String agentParticipantId;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private List<GetStreamJobsStreamJobCollectionItemFeature> features;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String state;
        private List<GetStreamJobsStreamJobCollectionItemStreamOutputLocation> streamOutputLocations;
        private String streamSourceId;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetStreamJobsStreamJobCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentParticipantId = defaults.agentParticipantId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.features = defaults.features;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.state = defaults.state;
    	      this.streamOutputLocations = defaults.streamOutputLocations;
    	      this.streamSourceId = defaults.streamSourceId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder agentParticipantId(String agentParticipantId) {
            if (agentParticipantId == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "agentParticipantId");
            }
            this.agentParticipantId = agentParticipantId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder features(List<GetStreamJobsStreamJobCollectionItemFeature> features) {
            if (features == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "features");
            }
            this.features = features;
            return this;
        }
        public Builder features(GetStreamJobsStreamJobCollectionItemFeature... features) {
            return features(List.of(features));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamOutputLocations(List<GetStreamJobsStreamJobCollectionItemStreamOutputLocation> streamOutputLocations) {
            if (streamOutputLocations == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "streamOutputLocations");
            }
            this.streamOutputLocations = streamOutputLocations;
            return this;
        }
        public Builder streamOutputLocations(GetStreamJobsStreamJobCollectionItemStreamOutputLocation... streamOutputLocations) {
            return streamOutputLocations(List.of(streamOutputLocations));
        }
        @CustomType.Setter
        public Builder streamSourceId(String streamSourceId) {
            if (streamSourceId == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "streamSourceId");
            }
            this.streamSourceId = streamSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetStreamJobsStreamJobCollectionItem build() {
            final var _resultValue = new GetStreamJobsStreamJobCollectionItem();
            _resultValue.agentParticipantId = agentParticipantId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.features = features;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.state = state;
            _resultValue.streamOutputLocations = streamOutputLocations;
            _resultValue.streamSourceId = streamSourceId;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
