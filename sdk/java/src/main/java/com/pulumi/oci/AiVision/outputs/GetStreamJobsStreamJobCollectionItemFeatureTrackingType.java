// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AiVision.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamJobsStreamJobCollectionItemFeatureTrackingType {
    /**
     * @return compartment Id of biometric compartment.
     * 
     */
    private String biometricStoreCompartmentId;
    /**
     * @return Which biometric store user wants to do face recognition
     * 
     */
    private String biometricStoreId;
    /**
     * @return The detection model OCID.
     * 
     */
    private String detectionModelId;
    /**
     * @return The maximum number of results to return.
     * 
     */
    private Integer maxResults;
    /**
     * @return List of the objects to be tracked.
     * 
     */
    private List<String> objects;
    /**
     * @return Whether or not return face landmarks.
     * 
     */
    private Boolean shouldReturnLandmarks;
    /**
     * @return The tracking model OCID.
     * 
     */
    private String trackingModelId;

    private GetStreamJobsStreamJobCollectionItemFeatureTrackingType() {}
    /**
     * @return compartment Id of biometric compartment.
     * 
     */
    public String biometricStoreCompartmentId() {
        return this.biometricStoreCompartmentId;
    }
    /**
     * @return Which biometric store user wants to do face recognition
     * 
     */
    public String biometricStoreId() {
        return this.biometricStoreId;
    }
    /**
     * @return The detection model OCID.
     * 
     */
    public String detectionModelId() {
        return this.detectionModelId;
    }
    /**
     * @return The maximum number of results to return.
     * 
     */
    public Integer maxResults() {
        return this.maxResults;
    }
    /**
     * @return List of the objects to be tracked.
     * 
     */
    public List<String> objects() {
        return this.objects;
    }
    /**
     * @return Whether or not return face landmarks.
     * 
     */
    public Boolean shouldReturnLandmarks() {
        return this.shouldReturnLandmarks;
    }
    /**
     * @return The tracking model OCID.
     * 
     */
    public String trackingModelId() {
        return this.trackingModelId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamJobsStreamJobCollectionItemFeatureTrackingType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String biometricStoreCompartmentId;
        private String biometricStoreId;
        private String detectionModelId;
        private Integer maxResults;
        private List<String> objects;
        private Boolean shouldReturnLandmarks;
        private String trackingModelId;
        public Builder() {}
        public Builder(GetStreamJobsStreamJobCollectionItemFeatureTrackingType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.biometricStoreCompartmentId = defaults.biometricStoreCompartmentId;
    	      this.biometricStoreId = defaults.biometricStoreId;
    	      this.detectionModelId = defaults.detectionModelId;
    	      this.maxResults = defaults.maxResults;
    	      this.objects = defaults.objects;
    	      this.shouldReturnLandmarks = defaults.shouldReturnLandmarks;
    	      this.trackingModelId = defaults.trackingModelId;
        }

        @CustomType.Setter
        public Builder biometricStoreCompartmentId(String biometricStoreCompartmentId) {
            if (biometricStoreCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItemFeatureTrackingType", "biometricStoreCompartmentId");
            }
            this.biometricStoreCompartmentId = biometricStoreCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder biometricStoreId(String biometricStoreId) {
            if (biometricStoreId == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItemFeatureTrackingType", "biometricStoreId");
            }
            this.biometricStoreId = biometricStoreId;
            return this;
        }
        @CustomType.Setter
        public Builder detectionModelId(String detectionModelId) {
            if (detectionModelId == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItemFeatureTrackingType", "detectionModelId");
            }
            this.detectionModelId = detectionModelId;
            return this;
        }
        @CustomType.Setter
        public Builder maxResults(Integer maxResults) {
            if (maxResults == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItemFeatureTrackingType", "maxResults");
            }
            this.maxResults = maxResults;
            return this;
        }
        @CustomType.Setter
        public Builder objects(List<String> objects) {
            if (objects == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItemFeatureTrackingType", "objects");
            }
            this.objects = objects;
            return this;
        }
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }
        @CustomType.Setter
        public Builder shouldReturnLandmarks(Boolean shouldReturnLandmarks) {
            if (shouldReturnLandmarks == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItemFeatureTrackingType", "shouldReturnLandmarks");
            }
            this.shouldReturnLandmarks = shouldReturnLandmarks;
            return this;
        }
        @CustomType.Setter
        public Builder trackingModelId(String trackingModelId) {
            if (trackingModelId == null) {
              throw new MissingRequiredPropertyException("GetStreamJobsStreamJobCollectionItemFeatureTrackingType", "trackingModelId");
            }
            this.trackingModelId = trackingModelId;
            return this;
        }
        public GetStreamJobsStreamJobCollectionItemFeatureTrackingType build() {
            final var _resultValue = new GetStreamJobsStreamJobCollectionItemFeatureTrackingType();
            _resultValue.biometricStoreCompartmentId = biometricStoreCompartmentId;
            _resultValue.biometricStoreId = biometricStoreId;
            _resultValue.detectionModelId = detectionModelId;
            _resultValue.maxResults = maxResults;
            _resultValue.objects = objects;
            _resultValue.shouldReturnLandmarks = shouldReturnLandmarks;
            _resultValue.trackingModelId = trackingModelId;
            return _resultValue;
        }
    }
}
