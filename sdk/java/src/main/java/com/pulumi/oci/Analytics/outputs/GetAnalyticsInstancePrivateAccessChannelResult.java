// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Analytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Analytics.outputs.GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone;
import com.pulumi.oci.Analytics.outputs.GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAnalyticsInstancePrivateAccessChannelResult {
    private String analyticsInstanceId;
    /**
     * @return Display Name of the Private Access Channel.
     * 
     */
    private String displayName;
    /**
     * @return The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
     * 
     */
    private List<String> egressSourceIpAddresses;
    private String id;
    /**
     * @return IP Address of the Private Access channel.
     * 
     */
    private String ipAddress;
    /**
     * @return Private Access Channel unique identifier key.
     * 
     */
    private String key;
    /**
     * @return Network Security Group OCIDs for an Analytics instance.
     * 
     */
    private List<String> networkSecurityGroupIds;
    private String privateAccessChannelKey;
    /**
     * @return List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
     * 
     */
    private List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones;
    /**
     * @return List of Private Source DB SCAN hosts registered with Private Access Channel for access from Analytics Instance.
     * 
     */
    private List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost> privateSourceScanHosts;
    /**
     * @return OCID of the customer subnet connected to private access channel.
     * 
     */
    private String subnetId;
    /**
     * @return OCID of the customer VCN peered with private access channel.
     * 
     */
    private String vcnId;

    private GetAnalyticsInstancePrivateAccessChannelResult() {}
    public String analyticsInstanceId() {
        return this.analyticsInstanceId;
    }
    /**
     * @return Display Name of the Private Access Channel.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
     * 
     */
    public List<String> egressSourceIpAddresses() {
        return this.egressSourceIpAddresses;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return IP Address of the Private Access channel.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Private Access Channel unique identifier key.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Network Security Group OCIDs for an Analytics instance.
     * 
     */
    public List<String> networkSecurityGroupIds() {
        return this.networkSecurityGroupIds;
    }
    public String privateAccessChannelKey() {
        return this.privateAccessChannelKey;
    }
    /**
     * @return List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
     * 
     */
    public List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones() {
        return this.privateSourceDnsZones;
    }
    /**
     * @return List of Private Source DB SCAN hosts registered with Private Access Channel for access from Analytics Instance.
     * 
     */
    public List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost> privateSourceScanHosts() {
        return this.privateSourceScanHosts;
    }
    /**
     * @return OCID of the customer subnet connected to private access channel.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return OCID of the customer VCN peered with private access channel.
     * 
     */
    public String vcnId() {
        return this.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAnalyticsInstancePrivateAccessChannelResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String analyticsInstanceId;
        private String displayName;
        private List<String> egressSourceIpAddresses;
        private String id;
        private String ipAddress;
        private String key;
        private List<String> networkSecurityGroupIds;
        private String privateAccessChannelKey;
        private List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones;
        private List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost> privateSourceScanHosts;
        private String subnetId;
        private String vcnId;
        public Builder() {}
        public Builder(GetAnalyticsInstancePrivateAccessChannelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyticsInstanceId = defaults.analyticsInstanceId;
    	      this.displayName = defaults.displayName;
    	      this.egressSourceIpAddresses = defaults.egressSourceIpAddresses;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.key = defaults.key;
    	      this.networkSecurityGroupIds = defaults.networkSecurityGroupIds;
    	      this.privateAccessChannelKey = defaults.privateAccessChannelKey;
    	      this.privateSourceDnsZones = defaults.privateSourceDnsZones;
    	      this.privateSourceScanHosts = defaults.privateSourceScanHosts;
    	      this.subnetId = defaults.subnetId;
    	      this.vcnId = defaults.vcnId;
        }

        @CustomType.Setter
        public Builder analyticsInstanceId(String analyticsInstanceId) {
            if (analyticsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "analyticsInstanceId");
            }
            this.analyticsInstanceId = analyticsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder egressSourceIpAddresses(List<String> egressSourceIpAddresses) {
            if (egressSourceIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "egressSourceIpAddresses");
            }
            this.egressSourceIpAddresses = egressSourceIpAddresses;
            return this;
        }
        public Builder egressSourceIpAddresses(String... egressSourceIpAddresses) {
            return egressSourceIpAddresses(List.of(egressSourceIpAddresses));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder networkSecurityGroupIds(List<String> networkSecurityGroupIds) {
            if (networkSecurityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "networkSecurityGroupIds");
            }
            this.networkSecurityGroupIds = networkSecurityGroupIds;
            return this;
        }
        public Builder networkSecurityGroupIds(String... networkSecurityGroupIds) {
            return networkSecurityGroupIds(List.of(networkSecurityGroupIds));
        }
        @CustomType.Setter
        public Builder privateAccessChannelKey(String privateAccessChannelKey) {
            if (privateAccessChannelKey == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "privateAccessChannelKey");
            }
            this.privateAccessChannelKey = privateAccessChannelKey;
            return this;
        }
        @CustomType.Setter
        public Builder privateSourceDnsZones(List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone> privateSourceDnsZones) {
            if (privateSourceDnsZones == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "privateSourceDnsZones");
            }
            this.privateSourceDnsZones = privateSourceDnsZones;
            return this;
        }
        public Builder privateSourceDnsZones(GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone... privateSourceDnsZones) {
            return privateSourceDnsZones(List.of(privateSourceDnsZones));
        }
        @CustomType.Setter
        public Builder privateSourceScanHosts(List<GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost> privateSourceScanHosts) {
            if (privateSourceScanHosts == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "privateSourceScanHosts");
            }
            this.privateSourceScanHosts = privateSourceScanHosts;
            return this;
        }
        public Builder privateSourceScanHosts(GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost... privateSourceScanHosts) {
            return privateSourceScanHosts(List.of(privateSourceScanHosts));
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder vcnId(String vcnId) {
            if (vcnId == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancePrivateAccessChannelResult", "vcnId");
            }
            this.vcnId = vcnId;
            return this;
        }
        public GetAnalyticsInstancePrivateAccessChannelResult build() {
            final var _resultValue = new GetAnalyticsInstancePrivateAccessChannelResult();
            _resultValue.analyticsInstanceId = analyticsInstanceId;
            _resultValue.displayName = displayName;
            _resultValue.egressSourceIpAddresses = egressSourceIpAddresses;
            _resultValue.id = id;
            _resultValue.ipAddress = ipAddress;
            _resultValue.key = key;
            _resultValue.networkSecurityGroupIds = networkSecurityGroupIds;
            _resultValue.privateAccessChannelKey = privateAccessChannelKey;
            _resultValue.privateSourceDnsZones = privateSourceDnsZones;
            _resultValue.privateSourceScanHosts = privateSourceScanHosts;
            _resultValue.subnetId = subnetId;
            _resultValue.vcnId = vcnId;
            return _resultValue;
        }
    }
}
