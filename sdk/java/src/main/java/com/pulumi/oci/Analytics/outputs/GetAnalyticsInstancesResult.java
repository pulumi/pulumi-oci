// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Analytics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Analytics.outputs.GetAnalyticsInstancesAnalyticsInstance;
import com.pulumi.oci.Analytics.outputs.GetAnalyticsInstancesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAnalyticsInstancesResult {
    /**
     * @return The list of analytics_instances.
     * 
     */
    private List<GetAnalyticsInstancesAnalyticsInstance> analyticsInstances;
    /**
     * @return The capacity model to use. Accepted values are: OLPU_COUNT, USER_COUNT
     * 
     */
    private @Nullable String capacityType;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Analytics feature set.
     * 
     */
    private @Nullable String featureSet;
    private @Nullable List<GetAnalyticsInstancesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the Analytics instance. This name must be unique in the tenancy and cannot be changed.
     * 
     */
    private @Nullable String name;
    /**
     * @return The current state of an instance.
     * 
     */
    private @Nullable String state;

    private GetAnalyticsInstancesResult() {}
    /**
     * @return The list of analytics_instances.
     * 
     */
    public List<GetAnalyticsInstancesAnalyticsInstance> analyticsInstances() {
        return this.analyticsInstances;
    }
    /**
     * @return The capacity model to use. Accepted values are: OLPU_COUNT, USER_COUNT
     * 
     */
    public Optional<String> capacityType() {
        return Optional.ofNullable(this.capacityType);
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Analytics feature set.
     * 
     */
    public Optional<String> featureSet() {
        return Optional.ofNullable(this.featureSet);
    }
    public List<GetAnalyticsInstancesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the Analytics instance. This name must be unique in the tenancy and cannot be changed.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The current state of an instance.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAnalyticsInstancesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAnalyticsInstancesAnalyticsInstance> analyticsInstances;
        private @Nullable String capacityType;
        private String compartmentId;
        private @Nullable String featureSet;
        private @Nullable List<GetAnalyticsInstancesFilter> filters;
        private String id;
        private @Nullable String name;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetAnalyticsInstancesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyticsInstances = defaults.analyticsInstances;
    	      this.capacityType = defaults.capacityType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.featureSet = defaults.featureSet;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder analyticsInstances(List<GetAnalyticsInstancesAnalyticsInstance> analyticsInstances) {
            if (analyticsInstances == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancesResult", "analyticsInstances");
            }
            this.analyticsInstances = analyticsInstances;
            return this;
        }
        public Builder analyticsInstances(GetAnalyticsInstancesAnalyticsInstance... analyticsInstances) {
            return analyticsInstances(List.of(analyticsInstances));
        }
        @CustomType.Setter
        public Builder capacityType(@Nullable String capacityType) {

            this.capacityType = capacityType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder featureSet(@Nullable String featureSet) {

            this.featureSet = featureSet;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAnalyticsInstancesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAnalyticsInstancesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAnalyticsInstancesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetAnalyticsInstancesResult build() {
            final var _resultValue = new GetAnalyticsInstancesResult();
            _resultValue.analyticsInstances = analyticsInstances;
            _resultValue.capacityType = capacityType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.featureSet = featureSet;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
