// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.AnnouncementsService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServicesServicesCollectionItem {
    /**
     * @return Filter by comms manager name
     * 
     */
    private String commsManagerName;
    /**
     * @return The list of realms where this service is not available to be used.
     * 
     */
    private List<String> excludedRealms;
    /**
     * @return ID of the service object.
     * 
     */
    private String id;
    /**
     * @return A filter to return only services underlying a specific platform.
     * 
     */
    private String platformType;
    /**
     * @return The list of previously used names for this service object.
     * 
     */
    private List<String> previousServiceNames;
    /**
     * @return Name of the service represented by this object.
     * 
     */
    private String serviceName;
    /**
     * @return Short name of the team to whom this service object is related.
     * 
     */
    private String shortName;
    /**
     * @return Current state of the service object.
     * 
     */
    private String state;
    /**
     * @return Team name to which this service object is related.
     * 
     */
    private String teamName;
    /**
     * @return The date and time when the service object was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time when the service object was updated.
     * 
     */
    private String timeUpdated;
    private String type;

    private GetServicesServicesCollectionItem() {}
    /**
     * @return Filter by comms manager name
     * 
     */
    public String commsManagerName() {
        return this.commsManagerName;
    }
    /**
     * @return The list of realms where this service is not available to be used.
     * 
     */
    public List<String> excludedRealms() {
        return this.excludedRealms;
    }
    /**
     * @return ID of the service object.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A filter to return only services underlying a specific platform.
     * 
     */
    public String platformType() {
        return this.platformType;
    }
    /**
     * @return The list of previously used names for this service object.
     * 
     */
    public List<String> previousServiceNames() {
        return this.previousServiceNames;
    }
    /**
     * @return Name of the service represented by this object.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Short name of the team to whom this service object is related.
     * 
     */
    public String shortName() {
        return this.shortName;
    }
    /**
     * @return Current state of the service object.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Team name to which this service object is related.
     * 
     */
    public String teamName() {
        return this.teamName;
    }
    /**
     * @return The date and time when the service object was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time when the service object was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicesServicesCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commsManagerName;
        private List<String> excludedRealms;
        private String id;
        private String platformType;
        private List<String> previousServiceNames;
        private String serviceName;
        private String shortName;
        private String state;
        private String teamName;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetServicesServicesCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commsManagerName = defaults.commsManagerName;
    	      this.excludedRealms = defaults.excludedRealms;
    	      this.id = defaults.id;
    	      this.platformType = defaults.platformType;
    	      this.previousServiceNames = defaults.previousServiceNames;
    	      this.serviceName = defaults.serviceName;
    	      this.shortName = defaults.shortName;
    	      this.state = defaults.state;
    	      this.teamName = defaults.teamName;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder commsManagerName(String commsManagerName) {
            if (commsManagerName == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "commsManagerName");
            }
            this.commsManagerName = commsManagerName;
            return this;
        }
        @CustomType.Setter
        public Builder excludedRealms(List<String> excludedRealms) {
            if (excludedRealms == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "excludedRealms");
            }
            this.excludedRealms = excludedRealms;
            return this;
        }
        public Builder excludedRealms(String... excludedRealms) {
            return excludedRealms(List.of(excludedRealms));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder platformType(String platformType) {
            if (platformType == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "platformType");
            }
            this.platformType = platformType;
            return this;
        }
        @CustomType.Setter
        public Builder previousServiceNames(List<String> previousServiceNames) {
            if (previousServiceNames == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "previousServiceNames");
            }
            this.previousServiceNames = previousServiceNames;
            return this;
        }
        public Builder previousServiceNames(String... previousServiceNames) {
            return previousServiceNames(List.of(previousServiceNames));
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder shortName(String shortName) {
            if (shortName == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "shortName");
            }
            this.shortName = shortName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder teamName(String teamName) {
            if (teamName == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "teamName");
            }
            this.teamName = teamName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServicesServicesCollectionItem", "type");
            }
            this.type = type;
            return this;
        }
        public GetServicesServicesCollectionItem build() {
            final var _resultValue = new GetServicesServicesCollectionItem();
            _resultValue.commsManagerName = commsManagerName;
            _resultValue.excludedRealms = excludedRealms;
            _resultValue.id = id;
            _resultValue.platformType = platformType;
            _resultValue.previousServiceNames = previousServiceNames;
            _resultValue.serviceName = serviceName;
            _resultValue.shortName = shortName;
            _resultValue.state = state;
            _resultValue.teamName = teamName;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
