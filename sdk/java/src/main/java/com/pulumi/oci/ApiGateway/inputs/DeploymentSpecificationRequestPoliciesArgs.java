// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesAuthenticationArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesCorsArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesMutualTlsArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesRateLimitingArgs;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesUsagePlansArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRequestPoliciesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRequestPoliciesArgs Empty = new DeploymentSpecificationRequestPoliciesArgs();

    /**
     * (Updatable) Information on how to authenticate incoming requests.
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<DeploymentSpecificationRequestPoliciesAuthenticationArgs> authentication;

    /**
     * @return (Updatable) Information on how to authenticate incoming requests.
     * 
     */
    public Optional<Output<DeploymentSpecificationRequestPoliciesAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
     * 
     */
    @Import(name="cors")
    private @Nullable Output<DeploymentSpecificationRequestPoliciesCorsArgs> cors;

    /**
     * @return (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
     * 
     */
    public Optional<Output<DeploymentSpecificationRequestPoliciesCorsArgs>> cors() {
        return Optional.ofNullable(this.cors);
    }

    /**
     * (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
     * 
     */
    @Import(name="dynamicAuthentication")
    private @Nullable Output<DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs> dynamicAuthentication;

    /**
     * @return (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
     * 
     */
    public Optional<Output<DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs>> dynamicAuthentication() {
        return Optional.ofNullable(this.dynamicAuthentication);
    }

    /**
     * (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
     * 
     */
    @Import(name="mutualTls")
    private @Nullable Output<DeploymentSpecificationRequestPoliciesMutualTlsArgs> mutualTls;

    /**
     * @return (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
     * 
     */
    public Optional<Output<DeploymentSpecificationRequestPoliciesMutualTlsArgs>> mutualTls() {
        return Optional.ofNullable(this.mutualTls);
    }

    /**
     * (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
     * 
     */
    @Import(name="rateLimiting")
    private @Nullable Output<DeploymentSpecificationRequestPoliciesRateLimitingArgs> rateLimiting;

    /**
     * @return (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
     * 
     */
    public Optional<Output<DeploymentSpecificationRequestPoliciesRateLimitingArgs>> rateLimiting() {
        return Optional.ofNullable(this.rateLimiting);
    }

    /**
     * (Updatable) Usage plan policies for this deployment
     * 
     */
    @Import(name="usagePlans")
    private @Nullable Output<DeploymentSpecificationRequestPoliciesUsagePlansArgs> usagePlans;

    /**
     * @return (Updatable) Usage plan policies for this deployment
     * 
     */
    public Optional<Output<DeploymentSpecificationRequestPoliciesUsagePlansArgs>> usagePlans() {
        return Optional.ofNullable(this.usagePlans);
    }

    private DeploymentSpecificationRequestPoliciesArgs() {}

    private DeploymentSpecificationRequestPoliciesArgs(DeploymentSpecificationRequestPoliciesArgs $) {
        this.authentication = $.authentication;
        this.cors = $.cors;
        this.dynamicAuthentication = $.dynamicAuthentication;
        this.mutualTls = $.mutualTls;
        this.rateLimiting = $.rateLimiting;
        this.usagePlans = $.usagePlans;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRequestPoliciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRequestPoliciesArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRequestPoliciesArgs();
        }

        public Builder(DeploymentSpecificationRequestPoliciesArgs defaults) {
            $ = new DeploymentSpecificationRequestPoliciesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication (Updatable) Information on how to authenticate incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<DeploymentSpecificationRequestPoliciesAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication (Updatable) Information on how to authenticate incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder authentication(DeploymentSpecificationRequestPoliciesAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param cors (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
         * 
         * @return builder
         * 
         */
        public Builder cors(@Nullable Output<DeploymentSpecificationRequestPoliciesCorsArgs> cors) {
            $.cors = cors;
            return this;
        }

        /**
         * @param cors (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
         * 
         * @return builder
         * 
         */
        public Builder cors(DeploymentSpecificationRequestPoliciesCorsArgs cors) {
            return cors(Output.of(cors));
        }

        /**
         * @param dynamicAuthentication (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder dynamicAuthentication(@Nullable Output<DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs> dynamicAuthentication) {
            $.dynamicAuthentication = dynamicAuthentication;
            return this;
        }

        /**
         * @param dynamicAuthentication (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder dynamicAuthentication(DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs dynamicAuthentication) {
            return dynamicAuthentication(Output.of(dynamicAuthentication));
        }

        /**
         * @param mutualTls (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
         * 
         * @return builder
         * 
         */
        public Builder mutualTls(@Nullable Output<DeploymentSpecificationRequestPoliciesMutualTlsArgs> mutualTls) {
            $.mutualTls = mutualTls;
            return this;
        }

        /**
         * @param mutualTls (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
         * 
         * @return builder
         * 
         */
        public Builder mutualTls(DeploymentSpecificationRequestPoliciesMutualTlsArgs mutualTls) {
            return mutualTls(Output.of(mutualTls));
        }

        /**
         * @param rateLimiting (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
         * 
         * @return builder
         * 
         */
        public Builder rateLimiting(@Nullable Output<DeploymentSpecificationRequestPoliciesRateLimitingArgs> rateLimiting) {
            $.rateLimiting = rateLimiting;
            return this;
        }

        /**
         * @param rateLimiting (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
         * 
         * @return builder
         * 
         */
        public Builder rateLimiting(DeploymentSpecificationRequestPoliciesRateLimitingArgs rateLimiting) {
            return rateLimiting(Output.of(rateLimiting));
        }

        /**
         * @param usagePlans (Updatable) Usage plan policies for this deployment
         * 
         * @return builder
         * 
         */
        public Builder usagePlans(@Nullable Output<DeploymentSpecificationRequestPoliciesUsagePlansArgs> usagePlans) {
            $.usagePlans = usagePlans;
            return this;
        }

        /**
         * @param usagePlans (Updatable) Usage plan policies for this deployment
         * 
         * @return builder
         * 
         */
        public Builder usagePlans(DeploymentSpecificationRequestPoliciesUsagePlansArgs usagePlans) {
            return usagePlans(Output.of(usagePlans));
        }

        public DeploymentSpecificationRequestPoliciesArgs build() {
            return $;
        }
    }

}
