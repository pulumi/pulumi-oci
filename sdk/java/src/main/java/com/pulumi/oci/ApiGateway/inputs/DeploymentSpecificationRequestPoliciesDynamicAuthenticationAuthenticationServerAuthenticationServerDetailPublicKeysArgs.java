// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs Empty = new DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs();

    /**
     * (Updatable) Defines whether or not to uphold SSL verification.
     * 
     */
    @Import(name="isSslVerifyDisabled")
    private @Nullable Output<Boolean> isSslVerifyDisabled;

    /**
     * @return (Updatable) Defines whether or not to uphold SSL verification.
     * 
     */
    public Optional<Output<Boolean>> isSslVerifyDisabled() {
        return Optional.ofNullable(this.isSslVerifyDisabled);
    }

    /**
     * (Updatable) The set of static public keys.
     * 
     */
    @Import(name="keys")
    private @Nullable Output<List<DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs>> keys;

    /**
     * @return (Updatable) The set of static public keys.
     * 
     */
    public Optional<Output<List<DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * (Updatable) The duration for which the JWKS should be cached before it is fetched again.
     * 
     */
    @Import(name="maxCacheDurationInHours")
    private @Nullable Output<Integer> maxCacheDurationInHours;

    /**
     * @return (Updatable) The duration for which the JWKS should be cached before it is fetched again.
     * 
     */
    public Optional<Output<Integer>> maxCacheDurationInHours() {
        return Optional.ofNullable(this.maxCacheDurationInHours);
    }

    /**
     * (Updatable) Type of the public key set.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Type of the public key set.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs() {}

    private DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs(DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs $) {
        this.isSslVerifyDisabled = $.isSslVerifyDisabled;
        this.keys = $.keys;
        this.maxCacheDurationInHours = $.maxCacheDurationInHours;
        this.type = $.type;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs();
        }

        public Builder(DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs defaults) {
            $ = new DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isSslVerifyDisabled (Updatable) Defines whether or not to uphold SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyDisabled(@Nullable Output<Boolean> isSslVerifyDisabled) {
            $.isSslVerifyDisabled = isSslVerifyDisabled;
            return this;
        }

        /**
         * @param isSslVerifyDisabled (Updatable) Defines whether or not to uphold SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyDisabled(Boolean isSslVerifyDisabled) {
            return isSslVerifyDisabled(Output.of(isSslVerifyDisabled));
        }

        /**
         * @param keys (Updatable) The set of static public keys.
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<List<DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys (Updatable) The set of static public keys.
         * 
         * @return builder
         * 
         */
        public Builder keys(List<DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys (Updatable) The set of static public keys.
         * 
         * @return builder
         * 
         */
        public Builder keys(DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param maxCacheDurationInHours (Updatable) The duration for which the JWKS should be cached before it is fetched again.
         * 
         * @return builder
         * 
         */
        public Builder maxCacheDurationInHours(@Nullable Output<Integer> maxCacheDurationInHours) {
            $.maxCacheDurationInHours = maxCacheDurationInHours;
            return this;
        }

        /**
         * @param maxCacheDurationInHours (Updatable) The duration for which the JWKS should be cached before it is fetched again.
         * 
         * @return builder
         * 
         */
        public Builder maxCacheDurationInHours(Integer maxCacheDurationInHours) {
            return maxCacheDurationInHours(Output.of(maxCacheDurationInHours));
        }

        /**
         * @param type (Updatable) Type of the public key set.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Type of the public key set.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uri (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs", "type");
            }
            return $;
        }
    }

}
