// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApiGateway.inputs.DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRouteBackendRoutingBackendBackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRouteBackendRoutingBackendBackendArgs Empty = new DeploymentSpecificationRouteBackendRoutingBackendBackendArgs();

    /**
     * The body of the stock response from the mock backend.
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return The body of the stock response from the mock backend.
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * Defines a timeout for establishing a connection with a proxied server.
     * 
     */
    @Import(name="connectTimeoutInSeconds")
    private @Nullable Output<Double> connectTimeoutInSeconds;

    /**
     * @return Defines a timeout for establishing a connection with a proxied server.
     * 
     */
    public Optional<Output<Double>> connectTimeoutInSeconds() {
        return Optional.ofNullable(this.connectTimeoutInSeconds);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    @Import(name="functionId")
    private @Nullable Output<String> functionId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    public Optional<Output<String>> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    /**
     * The List of Headers
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs>> headers;

    /**
     * @return The List of Headers
     * 
     */
    public Optional<Output<List<DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Defines whether or not to uphold SSL verification.
     * 
     */
    @Import(name="isSslVerifyDisabled")
    private @Nullable Output<Boolean> isSslVerifyDisabled;

    /**
     * @return Defines whether or not to uphold SSL verification.
     * 
     */
    public Optional<Output<Boolean>> isSslVerifyDisabled() {
        return Optional.ofNullable(this.isSslVerifyDisabled);
    }

    /**
     * Defines a timeout for reading a response from the proxied server.
     * 
     */
    @Import(name="readTimeoutInSeconds")
    private @Nullable Output<Double> readTimeoutInSeconds;

    /**
     * @return Defines a timeout for reading a response from the proxied server.
     * 
     */
    public Optional<Output<Double>> readTimeoutInSeconds() {
        return Optional.ofNullable(this.readTimeoutInSeconds);
    }

    /**
     * Defines a timeout for transmitting a request to the proxied server.
     * 
     */
    @Import(name="sendTimeoutInSeconds")
    private @Nullable Output<Double> sendTimeoutInSeconds;

    /**
     * @return Defines a timeout for transmitting a request to the proxied server.
     * 
     */
    public Optional<Output<Double>> sendTimeoutInSeconds() {
        return Optional.ofNullable(this.sendTimeoutInSeconds);
    }

    /**
     * The status code of the stock response from the mock backend.
     * 
     */
    @Import(name="status")
    private @Nullable Output<Integer> status;

    /**
     * @return The status code of the stock response from the mock backend.
     * 
     */
    public Optional<Output<Integer>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Type of the Response Cache Store Policy.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The url of the HTTP Backend
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The url of the HTTP Backend
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private DeploymentSpecificationRouteBackendRoutingBackendBackendArgs() {}

    private DeploymentSpecificationRouteBackendRoutingBackendBackendArgs(DeploymentSpecificationRouteBackendRoutingBackendBackendArgs $) {
        this.body = $.body;
        this.connectTimeoutInSeconds = $.connectTimeoutInSeconds;
        this.functionId = $.functionId;
        this.headers = $.headers;
        this.isSslVerifyDisabled = $.isSslVerifyDisabled;
        this.readTimeoutInSeconds = $.readTimeoutInSeconds;
        this.sendTimeoutInSeconds = $.sendTimeoutInSeconds;
        this.status = $.status;
        this.type = $.type;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRouteBackendRoutingBackendBackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRouteBackendRoutingBackendBackendArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRouteBackendRoutingBackendBackendArgs();
        }

        public Builder(DeploymentSpecificationRouteBackendRoutingBackendBackendArgs defaults) {
            $ = new DeploymentSpecificationRouteBackendRoutingBackendBackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param body The body of the stock response from the mock backend.
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body The body of the stock response from the mock backend.
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param connectTimeoutInSeconds Defines a timeout for establishing a connection with a proxied server.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeoutInSeconds(@Nullable Output<Double> connectTimeoutInSeconds) {
            $.connectTimeoutInSeconds = connectTimeoutInSeconds;
            return this;
        }

        /**
         * @param connectTimeoutInSeconds Defines a timeout for establishing a connection with a proxied server.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeoutInSeconds(Double connectTimeoutInSeconds) {
            return connectTimeoutInSeconds(Output.of(connectTimeoutInSeconds));
        }

        /**
         * @param functionId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
         * 
         * @return builder
         * 
         */
        public Builder functionId(@Nullable Output<String> functionId) {
            $.functionId = functionId;
            return this;
        }

        /**
         * @param functionId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
         * 
         * @return builder
         * 
         */
        public Builder functionId(String functionId) {
            return functionId(Output.of(functionId));
        }

        /**
         * @param headers The List of Headers
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers The List of Headers
         * 
         * @return builder
         * 
         */
        public Builder headers(List<DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers The List of Headers
         * 
         * @return builder
         * 
         */
        public Builder headers(DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param isSslVerifyDisabled Defines whether or not to uphold SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyDisabled(@Nullable Output<Boolean> isSslVerifyDisabled) {
            $.isSslVerifyDisabled = isSslVerifyDisabled;
            return this;
        }

        /**
         * @param isSslVerifyDisabled Defines whether or not to uphold SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder isSslVerifyDisabled(Boolean isSslVerifyDisabled) {
            return isSslVerifyDisabled(Output.of(isSslVerifyDisabled));
        }

        /**
         * @param readTimeoutInSeconds Defines a timeout for reading a response from the proxied server.
         * 
         * @return builder
         * 
         */
        public Builder readTimeoutInSeconds(@Nullable Output<Double> readTimeoutInSeconds) {
            $.readTimeoutInSeconds = readTimeoutInSeconds;
            return this;
        }

        /**
         * @param readTimeoutInSeconds Defines a timeout for reading a response from the proxied server.
         * 
         * @return builder
         * 
         */
        public Builder readTimeoutInSeconds(Double readTimeoutInSeconds) {
            return readTimeoutInSeconds(Output.of(readTimeoutInSeconds));
        }

        /**
         * @param sendTimeoutInSeconds Defines a timeout for transmitting a request to the proxied server.
         * 
         * @return builder
         * 
         */
        public Builder sendTimeoutInSeconds(@Nullable Output<Double> sendTimeoutInSeconds) {
            $.sendTimeoutInSeconds = sendTimeoutInSeconds;
            return this;
        }

        /**
         * @param sendTimeoutInSeconds Defines a timeout for transmitting a request to the proxied server.
         * 
         * @return builder
         * 
         */
        public Builder sendTimeoutInSeconds(Double sendTimeoutInSeconds) {
            return sendTimeoutInSeconds(Output.of(sendTimeoutInSeconds));
        }

        /**
         * @param status The status code of the stock response from the mock backend.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<Integer> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status code of the stock response from the mock backend.
         * 
         * @return builder
         * 
         */
        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        /**
         * @param type Type of the Response Cache Store Policy.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the Response Cache Store Policy.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param url The url of the HTTP Backend
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The url of the HTTP Backend
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public DeploymentSpecificationRouteBackendRoutingBackendBackendArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DeploymentSpecificationRouteBackendRoutingBackendBackendArgs", "type");
            }
            return $;
        }
    }

}
