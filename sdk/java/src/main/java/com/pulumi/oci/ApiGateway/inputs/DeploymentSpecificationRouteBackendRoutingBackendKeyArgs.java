// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentSpecificationRouteBackendRoutingBackendKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentSpecificationRouteBackendRoutingBackendKeyArgs Empty = new DeploymentSpecificationRouteBackendRoutingBackendKeyArgs();

    /**
     * (Updatable) String describing the expression with wildcards.
     * 
     */
    @Import(name="expression")
    private @Nullable Output<String> expression;

    /**
     * @return (Updatable) String describing the expression with wildcards.
     * 
     */
    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
     * (Updatable) Information regarding whether this is the default branch.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return (Updatable) Information regarding whether this is the default branch.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * (Updatable) Name assigned to the branch.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) Name assigned to the branch.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Updatable) Information regarding type of the selection key.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) Information regarding type of the selection key.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * (Updatable) Information regarding the set of values of selector for which this branch should be selected.
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return (Updatable) Information regarding the set of values of selector for which this branch should be selected.
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private DeploymentSpecificationRouteBackendRoutingBackendKeyArgs() {}

    private DeploymentSpecificationRouteBackendRoutingBackendKeyArgs(DeploymentSpecificationRouteBackendRoutingBackendKeyArgs $) {
        this.expression = $.expression;
        this.isDefault = $.isDefault;
        this.name = $.name;
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentSpecificationRouteBackendRoutingBackendKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentSpecificationRouteBackendRoutingBackendKeyArgs $;

        public Builder() {
            $ = new DeploymentSpecificationRouteBackendRoutingBackendKeyArgs();
        }

        public Builder(DeploymentSpecificationRouteBackendRoutingBackendKeyArgs defaults) {
            $ = new DeploymentSpecificationRouteBackendRoutingBackendKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expression (Updatable) String describing the expression with wildcards.
         * 
         * @return builder
         * 
         */
        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression (Updatable) String describing the expression with wildcards.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param isDefault (Updatable) Information regarding whether this is the default branch.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault (Updatable) Information regarding whether this is the default branch.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param name (Updatable) Name assigned to the branch.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name assigned to the branch.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type (Updatable) Information regarding type of the selection key.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) Information regarding type of the selection key.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param values (Updatable) Information regarding the set of values of selector for which this branch should be selected.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values (Updatable) Information regarding the set of values of selector for which this branch should be selected.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values (Updatable) Information regarding the set of values of selector for which this branch should be selected.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public DeploymentSpecificationRouteBackendRoutingBackendKeyArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DeploymentSpecificationRouteBackendRoutingBackendKeyArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DeploymentSpecificationRouteBackendRoutingBackendKeyArgs", "type");
            }
            return $;
        }
    }

}
