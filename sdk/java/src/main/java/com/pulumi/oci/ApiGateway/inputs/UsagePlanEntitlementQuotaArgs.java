// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class UsagePlanEntitlementQuotaArgs extends com.pulumi.resources.ResourceArgs {

    public static final UsagePlanEntitlementQuotaArgs Empty = new UsagePlanEntitlementQuotaArgs();

    /**
     * (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
     * 
     */
    @Import(name="operationOnBreach", required=true)
    private Output<String> operationOnBreach;

    /**
     * @return (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
     * 
     */
    public Output<String> operationOnBreach() {
        return this.operationOnBreach;
    }

    /**
     * (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
     * 
     */
    @Import(name="resetPolicy", required=true)
    private Output<String> resetPolicy;

    /**
     * @return (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
     * 
     */
    public Output<String> resetPolicy() {
        return this.resetPolicy;
    }

    /**
     * (Updatable) The unit of time over which quotas are calculated. Example: `MINUTE` or `MONTH`
     * 
     */
    @Import(name="unit", required=true)
    private Output<String> unit;

    /**
     * @return (Updatable) The unit of time over which quotas are calculated. Example: `MINUTE` or `MONTH`
     * 
     */
    public Output<String> unit() {
        return this.unit;
    }

    /**
     * (Updatable) The number of requests that can be made per time period.
     * 
     */
    @Import(name="value", required=true)
    private Output<Integer> value;

    /**
     * @return (Updatable) The number of requests that can be made per time period.
     * 
     */
    public Output<Integer> value() {
        return this.value;
    }

    private UsagePlanEntitlementQuotaArgs() {}

    private UsagePlanEntitlementQuotaArgs(UsagePlanEntitlementQuotaArgs $) {
        this.operationOnBreach = $.operationOnBreach;
        this.resetPolicy = $.resetPolicy;
        this.unit = $.unit;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsagePlanEntitlementQuotaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsagePlanEntitlementQuotaArgs $;

        public Builder() {
            $ = new UsagePlanEntitlementQuotaArgs();
        }

        public Builder(UsagePlanEntitlementQuotaArgs defaults) {
            $ = new UsagePlanEntitlementQuotaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operationOnBreach (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
         * 
         * @return builder
         * 
         */
        public Builder operationOnBreach(Output<String> operationOnBreach) {
            $.operationOnBreach = operationOnBreach;
            return this;
        }

        /**
         * @param operationOnBreach (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
         * 
         * @return builder
         * 
         */
        public Builder operationOnBreach(String operationOnBreach) {
            return operationOnBreach(Output.of(operationOnBreach));
        }

        /**
         * @param resetPolicy (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
         * 
         * @return builder
         * 
         */
        public Builder resetPolicy(Output<String> resetPolicy) {
            $.resetPolicy = resetPolicy;
            return this;
        }

        /**
         * @param resetPolicy (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
         * 
         * @return builder
         * 
         */
        public Builder resetPolicy(String resetPolicy) {
            return resetPolicy(Output.of(resetPolicy));
        }

        /**
         * @param unit (Updatable) The unit of time over which quotas are calculated. Example: `MINUTE` or `MONTH`
         * 
         * @return builder
         * 
         */
        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit (Updatable) The unit of time over which quotas are calculated. Example: `MINUTE` or `MONTH`
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        /**
         * @param value (Updatable) The number of requests that can be made per time period.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<Integer> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value (Updatable) The number of requests that can be made per time period.
         * 
         * @return builder
         * 
         */
        public Builder value(Integer value) {
            return value(Output.of(value));
        }

        public UsagePlanEntitlementQuotaArgs build() {
            if ($.operationOnBreach == null) {
                throw new MissingRequiredPropertyException("UsagePlanEntitlementQuotaArgs", "operationOnBreach");
            }
            if ($.resetPolicy == null) {
                throw new MissingRequiredPropertyException("UsagePlanEntitlementQuotaArgs", "resetPolicy");
            }
            if ($.unit == null) {
                throw new MissingRequiredPropertyException("UsagePlanEntitlementQuotaArgs", "unit");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("UsagePlanEntitlementQuotaArgs", "value");
            }
            return $;
        }
    }

}
