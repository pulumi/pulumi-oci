// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesAuthentication;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesCors;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesDynamicAuthentication;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesMutualTls;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesRateLimiting;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesUsagePlans;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentSpecificationRequestPolicies {
    /**
     * @return (Updatable) Information on how to authenticate incoming requests.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesAuthentication authentication;
    /**
     * @return (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesCors cors;
    /**
     * @return (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesDynamicAuthentication dynamicAuthentication;
    /**
     * @return (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesMutualTls mutualTls;
    /**
     * @return (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesRateLimiting rateLimiting;
    /**
     * @return (Updatable) Usage plan policies for this deployment
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesUsagePlans usagePlans;

    private DeploymentSpecificationRequestPolicies() {}
    /**
     * @return (Updatable) Information on how to authenticate incoming requests.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesAuthentication> authentication() {
        return Optional.ofNullable(this.authentication);
    }
    /**
     * @return (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesCors> cors() {
        return Optional.ofNullable(this.cors);
    }
    /**
     * @return (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesDynamicAuthentication> dynamicAuthentication() {
        return Optional.ofNullable(this.dynamicAuthentication);
    }
    /**
     * @return (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesMutualTls> mutualTls() {
        return Optional.ofNullable(this.mutualTls);
    }
    /**
     * @return (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesRateLimiting> rateLimiting() {
        return Optional.ofNullable(this.rateLimiting);
    }
    /**
     * @return (Updatable) Usage plan policies for this deployment
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesUsagePlans> usagePlans() {
        return Optional.ofNullable(this.usagePlans);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentSpecificationRequestPolicies defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DeploymentSpecificationRequestPoliciesAuthentication authentication;
        private @Nullable DeploymentSpecificationRequestPoliciesCors cors;
        private @Nullable DeploymentSpecificationRequestPoliciesDynamicAuthentication dynamicAuthentication;
        private @Nullable DeploymentSpecificationRequestPoliciesMutualTls mutualTls;
        private @Nullable DeploymentSpecificationRequestPoliciesRateLimiting rateLimiting;
        private @Nullable DeploymentSpecificationRequestPoliciesUsagePlans usagePlans;
        public Builder() {}
        public Builder(DeploymentSpecificationRequestPolicies defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.cors = defaults.cors;
    	      this.dynamicAuthentication = defaults.dynamicAuthentication;
    	      this.mutualTls = defaults.mutualTls;
    	      this.rateLimiting = defaults.rateLimiting;
    	      this.usagePlans = defaults.usagePlans;
        }

        @CustomType.Setter
        public Builder authentication(@Nullable DeploymentSpecificationRequestPoliciesAuthentication authentication) {
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder cors(@Nullable DeploymentSpecificationRequestPoliciesCors cors) {
            this.cors = cors;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicAuthentication(@Nullable DeploymentSpecificationRequestPoliciesDynamicAuthentication dynamicAuthentication) {
            this.dynamicAuthentication = dynamicAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder mutualTls(@Nullable DeploymentSpecificationRequestPoliciesMutualTls mutualTls) {
            this.mutualTls = mutualTls;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimiting(@Nullable DeploymentSpecificationRequestPoliciesRateLimiting rateLimiting) {
            this.rateLimiting = rateLimiting;
            return this;
        }
        @CustomType.Setter
        public Builder usagePlans(@Nullable DeploymentSpecificationRequestPoliciesUsagePlans usagePlans) {
            this.usagePlans = usagePlans;
            return this;
        }
        public DeploymentSpecificationRequestPolicies build() {
            final var o = new DeploymentSpecificationRequestPolicies();
            o.authentication = authentication;
            o.cors = cors;
            o.dynamicAuthentication = dynamicAuthentication;
            o.mutualTls = mutualTls;
            o.rateLimiting = rateLimiting;
            o.usagePlans = usagePlans;
            return o;
        }
    }
}
