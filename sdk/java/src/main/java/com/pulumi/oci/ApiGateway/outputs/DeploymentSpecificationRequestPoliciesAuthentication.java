// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy;
import com.pulumi.oci.ApiGateway.outputs.DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentSpecificationRequestPoliciesAuthentication {
    /**
     * @return (Updatable) The list of intended recipients for the token.
     * 
     */
    private @Nullable List<String> audiences;
    /**
     * @return (Updatable) A list of keys from &#34;parameters&#34; attribute value whose values will be added to the cache key.
     * 
     */
    private @Nullable List<String> cacheKeys;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    private @Nullable String functionId;
    /**
     * @return (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    private @Nullable Boolean isAnonymousAccessAllowed;
    /**
     * @return (Updatable) A list of parties that could have issued the token.
     * 
     */
    private @Nullable List<String> issuers;
    /**
     * @return (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    private @Nullable Double maxClockSkewInSeconds;
    /**
     * @return (Updatable) A map where key is a user defined string and value is a context expressions whose values will be sent to the custom auth function. Values should contain an expression. Example: `{&#34;foo&#34;: &#34;request.header[abc]&#34;}`
     * 
     */
    private @Nullable Map<String,String> parameters;
    /**
     * @return (Updatable) A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys publicKeys;
    /**
     * @return (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    private @Nullable String tokenAuthScheme;
    /**
     * @return (Updatable) The name of the header containing the authentication token.
     * 
     */
    private @Nullable String tokenHeader;
    /**
     * @return (Updatable) The name of the query parameter containing the authentication token.
     * 
     */
    private @Nullable String tokenQueryParam;
    /**
     * @return (Updatable) Type of the authentication policy to use.
     * 
     */
    private String type;
    /**
     * @return (Updatable) Policy for defining behaviour on validation failure.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy validationFailurePolicy;
    /**
     * @return (Updatable) Authentication Policies for the Token Authentication types.
     * 
     */
    private @Nullable DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy validationPolicy;
    /**
     * @return (Updatable) A list of claims which should be validated to consider the token valid.
     * 
     */
    private @Nullable List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims;

    private DeploymentSpecificationRequestPoliciesAuthentication() {}
    /**
     * @return (Updatable) The list of intended recipients for the token.
     * 
     */
    public List<String> audiences() {
        return this.audiences == null ? List.of() : this.audiences;
    }
    /**
     * @return (Updatable) A list of keys from &#34;parameters&#34; attribute value whose values will be added to the cache key.
     * 
     */
    public List<String> cacheKeys() {
        return this.cacheKeys == null ? List.of() : this.cacheKeys;
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    public Optional<String> functionId() {
        return Optional.ofNullable(this.functionId);
    }
    /**
     * @return (Updatable) Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    public Optional<Boolean> isAnonymousAccessAllowed() {
        return Optional.ofNullable(this.isAnonymousAccessAllowed);
    }
    /**
     * @return (Updatable) A list of parties that could have issued the token.
     * 
     */
    public List<String> issuers() {
        return this.issuers == null ? List.of() : this.issuers;
    }
    /**
     * @return (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    public Optional<Double> maxClockSkewInSeconds() {
        return Optional.ofNullable(this.maxClockSkewInSeconds);
    }
    /**
     * @return (Updatable) A map where key is a user defined string and value is a context expressions whose values will be sent to the custom auth function. Values should contain an expression. Example: `{&#34;foo&#34;: &#34;request.header[abc]&#34;}`
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return (Updatable) A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys> publicKeys() {
        return Optional.ofNullable(this.publicKeys);
    }
    /**
     * @return (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    public Optional<String> tokenAuthScheme() {
        return Optional.ofNullable(this.tokenAuthScheme);
    }
    /**
     * @return (Updatable) The name of the header containing the authentication token.
     * 
     */
    public Optional<String> tokenHeader() {
        return Optional.ofNullable(this.tokenHeader);
    }
    /**
     * @return (Updatable) The name of the query parameter containing the authentication token.
     * 
     */
    public Optional<String> tokenQueryParam() {
        return Optional.ofNullable(this.tokenQueryParam);
    }
    /**
     * @return (Updatable) Type of the authentication policy to use.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return (Updatable) Policy for defining behaviour on validation failure.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy> validationFailurePolicy() {
        return Optional.ofNullable(this.validationFailurePolicy);
    }
    /**
     * @return (Updatable) Authentication Policies for the Token Authentication types.
     * 
     */
    public Optional<DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy> validationPolicy() {
        return Optional.ofNullable(this.validationPolicy);
    }
    /**
     * @return (Updatable) A list of claims which should be validated to consider the token valid.
     * 
     */
    public List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims() {
        return this.verifyClaims == null ? List.of() : this.verifyClaims;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentSpecificationRequestPoliciesAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> audiences;
        private @Nullable List<String> cacheKeys;
        private @Nullable String functionId;
        private @Nullable Boolean isAnonymousAccessAllowed;
        private @Nullable List<String> issuers;
        private @Nullable Double maxClockSkewInSeconds;
        private @Nullable Map<String,String> parameters;
        private @Nullable DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys publicKeys;
        private @Nullable String tokenAuthScheme;
        private @Nullable String tokenHeader;
        private @Nullable String tokenQueryParam;
        private String type;
        private @Nullable DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy validationFailurePolicy;
        private @Nullable DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy validationPolicy;
        private @Nullable List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims;
        public Builder() {}
        public Builder(DeploymentSpecificationRequestPoliciesAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.cacheKeys = defaults.cacheKeys;
    	      this.functionId = defaults.functionId;
    	      this.isAnonymousAccessAllowed = defaults.isAnonymousAccessAllowed;
    	      this.issuers = defaults.issuers;
    	      this.maxClockSkewInSeconds = defaults.maxClockSkewInSeconds;
    	      this.parameters = defaults.parameters;
    	      this.publicKeys = defaults.publicKeys;
    	      this.tokenAuthScheme = defaults.tokenAuthScheme;
    	      this.tokenHeader = defaults.tokenHeader;
    	      this.tokenQueryParam = defaults.tokenQueryParam;
    	      this.type = defaults.type;
    	      this.validationFailurePolicy = defaults.validationFailurePolicy;
    	      this.validationPolicy = defaults.validationPolicy;
    	      this.verifyClaims = defaults.verifyClaims;
        }

        @CustomType.Setter
        public Builder audiences(@Nullable List<String> audiences) {

            this.audiences = audiences;
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        @CustomType.Setter
        public Builder cacheKeys(@Nullable List<String> cacheKeys) {

            this.cacheKeys = cacheKeys;
            return this;
        }
        public Builder cacheKeys(String... cacheKeys) {
            return cacheKeys(List.of(cacheKeys));
        }
        @CustomType.Setter
        public Builder functionId(@Nullable String functionId) {

            this.functionId = functionId;
            return this;
        }
        @CustomType.Setter
        public Builder isAnonymousAccessAllowed(@Nullable Boolean isAnonymousAccessAllowed) {

            this.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder issuers(@Nullable List<String> issuers) {

            this.issuers = issuers;
            return this;
        }
        public Builder issuers(String... issuers) {
            return issuers(List.of(issuers));
        }
        @CustomType.Setter
        public Builder maxClockSkewInSeconds(@Nullable Double maxClockSkewInSeconds) {

            this.maxClockSkewInSeconds = maxClockSkewInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,String> parameters) {

            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeys(@Nullable DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys publicKeys) {

            this.publicKeys = publicKeys;
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthScheme(@Nullable String tokenAuthScheme) {

            this.tokenAuthScheme = tokenAuthScheme;
            return this;
        }
        @CustomType.Setter
        public Builder tokenHeader(@Nullable String tokenHeader) {

            this.tokenHeader = tokenHeader;
            return this;
        }
        @CustomType.Setter
        public Builder tokenQueryParam(@Nullable String tokenQueryParam) {

            this.tokenQueryParam = tokenQueryParam;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("DeploymentSpecificationRequestPoliciesAuthentication", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder validationFailurePolicy(@Nullable DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy validationFailurePolicy) {

            this.validationFailurePolicy = validationFailurePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder validationPolicy(@Nullable DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy validationPolicy) {

            this.validationPolicy = validationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder verifyClaims(@Nullable List<DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim> verifyClaims) {

            this.verifyClaims = verifyClaims;
            return this;
        }
        public Builder verifyClaims(DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim... verifyClaims) {
            return verifyClaims(List.of(verifyClaims));
        }
        public DeploymentSpecificationRequestPoliciesAuthentication build() {
            final var _resultValue = new DeploymentSpecificationRequestPoliciesAuthentication();
            _resultValue.audiences = audiences;
            _resultValue.cacheKeys = cacheKeys;
            _resultValue.functionId = functionId;
            _resultValue.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            _resultValue.issuers = issuers;
            _resultValue.maxClockSkewInSeconds = maxClockSkewInSeconds;
            _resultValue.parameters = parameters;
            _resultValue.publicKeys = publicKeys;
            _resultValue.tokenAuthScheme = tokenAuthScheme;
            _resultValue.tokenHeader = tokenHeader;
            _resultValue.tokenQueryParam = tokenQueryParam;
            _resultValue.type = type;
            _resultValue.validationFailurePolicy = validationFailurePolicy;
            _resultValue.validationPolicy = validationPolicy;
            _resultValue.verifyClaims = verifyClaims;
            return _resultValue;
        }
    }
}
