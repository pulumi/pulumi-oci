// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey {
    /**
     * @return (Updatable) A selection key string containing a wildcard to match with the context variable in an incoming request. If the context variable matches the string, the request is sent to the route or authentication server associated with the selection key. Valid wildcards are &#39;*&#39; (zero or more characters) and &#39;+&#39; (one or more characters). The string can only contain one wildcard, and the wildcard must be at the start or the end of the string.
     * 
     */
    private @Nullable String expression;
    /**
     * @return (Updatable) Specifies whether to use the route or authentication server associated with this selection key as the default. The default is used if the value of a context variable in an incoming request does not match any of the other selection key values when dynamically routing and dynamically authenticating requests.
     * 
     */
    private @Nullable Boolean isDefault;
    /**
     * @return (Updatable) Name assigned to the branch.
     * 
     */
    private String name;
    /**
     * @return (Updatable) Type of the selection key.
     * 
     */
    private @Nullable String type;
    /**
     * @return (Updatable) The set of selection keys to match with the context variable in an incoming request. If the context variable exactly matches one of the keys in the set, the request is sent to the route or authentication server associated with the set.
     * 
     */
    private @Nullable List<String> values;

    private DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey() {}
    /**
     * @return (Updatable) A selection key string containing a wildcard to match with the context variable in an incoming request. If the context variable matches the string, the request is sent to the route or authentication server associated with the selection key. Valid wildcards are &#39;*&#39; (zero or more characters) and &#39;+&#39; (one or more characters). The string can only contain one wildcard, and the wildcard must be at the start or the end of the string.
     * 
     */
    public Optional<String> expression() {
        return Optional.ofNullable(this.expression);
    }
    /**
     * @return (Updatable) Specifies whether to use the route or authentication server associated with this selection key as the default. The default is used if the value of a context variable in an incoming request does not match any of the other selection key values when dynamically routing and dynamically authenticating requests.
     * 
     */
    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }
    /**
     * @return (Updatable) Name assigned to the branch.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) Type of the selection key.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return (Updatable) The set of selection keys to match with the context variable in an incoming request. If the context variable exactly matches one of the keys in the set, the request is sent to the route or authentication server associated with the set.
     * 
     */
    public List<String> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String expression;
        private @Nullable Boolean isDefault;
        private String name;
        private @Nullable String type;
        private @Nullable List<String> values;
        public Builder() {}
        public Builder(DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expression = defaults.expression;
    	      this.isDefault = defaults.isDefault;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder expression(@Nullable String expression) {

            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(@Nullable Boolean isDefault) {

            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<String> values) {

            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey build() {
            final var _resultValue = new DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey();
            _resultValue.expression = expression;
            _resultValue.isDefault = isDefault;
            _resultValue.name = name;
            _resultValue.type = type;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
