// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem {
    /**
     * @return (Updatable) If a query parameter with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
     * 
     */
    private @Nullable String ifExists;
    /**
     * @return (Updatable) The case-sensitive name of the query parameter.  This name must be unique across transformation policies.
     * 
     */
    private String name;
    /**
     * @return (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    private List<String> values;

    private DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem() {}
    /**
     * @return (Updatable) If a query parameter with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
     * 
     */
    public Optional<String> ifExists() {
        return Optional.ofNullable(this.ifExists);
    }
    /**
     * @return (Updatable) The case-sensitive name of the query parameter.  This name must be unique across transformation policies.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
     * 
     */
    public List<String> values() {
        return this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ifExists;
        private String name;
        private List<String> values;
        public Builder() {}
        public Builder(DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ifExists = defaults.ifExists;
    	      this.name = defaults.name;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder ifExists(@Nullable String ifExists) {

            this.ifExists = ifExists;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder values(List<String> values) {
            if (values == null) {
              throw new MissingRequiredPropertyException("DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem", "values");
            }
            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem build() {
            final var _resultValue = new DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem();
            _resultValue.ifExists = ifExists;
            _resultValue.name = name;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
