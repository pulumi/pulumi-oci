// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCor;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeploymentsDeploymentCollectionSpecificationRequestPolicy {
    /**
     * @return Information on how to authenticate incoming requests.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication> authentications;
    /**
     * @return Enable CORS (Cross-Origin-Resource-Sharing) request handling.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCor> cors;
    /**
     * @return Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication> dynamicAuthentications;
    /**
     * @return Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl> mutualTls;
    /**
     * @return Limit the number of requests that should be handled for the specified window using a specfic key.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting> rateLimitings;
    /**
     * @return Usage plan policies for this deployment
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan> usagePlans;

    private GetDeploymentsDeploymentCollectionSpecificationRequestPolicy() {}
    /**
     * @return Information on how to authenticate incoming requests.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication> authentications() {
        return this.authentications;
    }
    /**
     * @return Enable CORS (Cross-Origin-Resource-Sharing) request handling.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCor> cors() {
        return this.cors;
    }
    /**
     * @return Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication> dynamicAuthentications() {
        return this.dynamicAuthentications;
    }
    /**
     * @return Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl> mutualTls() {
        return this.mutualTls;
    }
    /**
     * @return Limit the number of requests that should be handled for the specified window using a specfic key.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting> rateLimitings() {
        return this.rateLimitings;
    }
    /**
     * @return Usage plan policies for this deployment
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan> usagePlans() {
        return this.usagePlans;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication> authentications;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCor> cors;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication> dynamicAuthentications;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl> mutualTls;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting> rateLimitings;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan> usagePlans;
        public Builder() {}
        public Builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentications = defaults.authentications;
    	      this.cors = defaults.cors;
    	      this.dynamicAuthentications = defaults.dynamicAuthentications;
    	      this.mutualTls = defaults.mutualTls;
    	      this.rateLimitings = defaults.rateLimitings;
    	      this.usagePlans = defaults.usagePlans;
        }

        @CustomType.Setter
        public Builder authentications(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication> authentications) {
            this.authentications = Objects.requireNonNull(authentications);
            return this;
        }
        public Builder authentications(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication... authentications) {
            return authentications(List.of(authentications));
        }
        @CustomType.Setter
        public Builder cors(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCor> cors) {
            this.cors = Objects.requireNonNull(cors);
            return this;
        }
        public Builder cors(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCor... cors) {
            return cors(List.of(cors));
        }
        @CustomType.Setter
        public Builder dynamicAuthentications(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication> dynamicAuthentications) {
            this.dynamicAuthentications = Objects.requireNonNull(dynamicAuthentications);
            return this;
        }
        public Builder dynamicAuthentications(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication... dynamicAuthentications) {
            return dynamicAuthentications(List.of(dynamicAuthentications));
        }
        @CustomType.Setter
        public Builder mutualTls(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl> mutualTls) {
            this.mutualTls = Objects.requireNonNull(mutualTls);
            return this;
        }
        public Builder mutualTls(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl... mutualTls) {
            return mutualTls(List.of(mutualTls));
        }
        @CustomType.Setter
        public Builder rateLimitings(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting> rateLimitings) {
            this.rateLimitings = Objects.requireNonNull(rateLimitings);
            return this;
        }
        public Builder rateLimitings(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting... rateLimitings) {
            return rateLimitings(List.of(rateLimitings));
        }
        @CustomType.Setter
        public Builder usagePlans(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan> usagePlans) {
            this.usagePlans = Objects.requireNonNull(usagePlans);
            return this;
        }
        public Builder usagePlans(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan... usagePlans) {
            return usagePlans(List.of(usagePlans));
        }
        public GetDeploymentsDeploymentCollectionSpecificationRequestPolicy build() {
            final var o = new GetDeploymentsDeploymentCollectionSpecificationRequestPolicy();
            o.authentications = authentications;
            o.cors = cors;
            o.dynamicAuthentications = dynamicAuthentications;
            o.mutualTls = mutualTls;
            o.rateLimitings = rateLimitings;
            o.usagePlans = usagePlans;
            return o;
        }
    }
}
