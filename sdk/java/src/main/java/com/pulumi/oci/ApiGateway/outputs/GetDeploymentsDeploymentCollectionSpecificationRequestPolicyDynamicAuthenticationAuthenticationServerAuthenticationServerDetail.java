// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail {
    /**
     * @return The list of intended recipients for the token.
     * 
     */
    private List<String> audiences;
    /**
     * @return A list of keys from &#34;parameters&#34; attribute value whose values will be added to the cache key.
     * 
     */
    private List<String> cacheKeys;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    private String functionId;
    /**
     * @return Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    private Boolean isAnonymousAccessAllowed;
    /**
     * @return A list of parties that could have issued the token.
     * 
     */
    private List<String> issuers;
    /**
     * @return The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    private Double maxClockSkewInSeconds;
    /**
     * @return The List of Query Parameters
     * 
     */
    private Map<String,String> parameters;
    /**
     * @return A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey> publicKeys;
    /**
     * @return The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    private String tokenAuthScheme;
    /**
     * @return The name of the header containing the authentication token.
     * 
     */
    private String tokenHeader;
    /**
     * @return The name of the query parameter containing the authentication token.
     * 
     */
    private String tokenQueryParam;
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    private String type;
    /**
     * @return Policy for defining behaviour on validation failure.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy> validationFailurePolicies;
    /**
     * @return Authentication Policies for the Token Authentication types.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy> validationPolicies;
    /**
     * @return A list of claims which should be validated to consider the token valid.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim> verifyClaims;

    private GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail() {}
    /**
     * @return The list of intended recipients for the token.
     * 
     */
    public List<String> audiences() {
        return this.audiences;
    }
    /**
     * @return A list of keys from &#34;parameters&#34; attribute value whose values will be added to the cache key.
     * 
     */
    public List<String> cacheKeys() {
        return this.cacheKeys;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
     * 
     */
    public String functionId() {
        return this.functionId;
    }
    /**
     * @return Whether an unauthenticated user may access the API. Must be &#34;true&#34; to enable ANONYMOUS route authorization.
     * 
     */
    public Boolean isAnonymousAccessAllowed() {
        return this.isAnonymousAccessAllowed;
    }
    /**
     * @return A list of parties that could have issued the token.
     * 
     */
    public List<String> issuers() {
        return this.issuers;
    }
    /**
     * @return The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
     * 
     */
    public Double maxClockSkewInSeconds() {
        return this.maxClockSkewInSeconds;
    }
    /**
     * @return The List of Query Parameters
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters;
    }
    /**
     * @return A set of Public Keys that will be used to verify the JWT signature.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey> publicKeys() {
        return this.publicKeys;
    }
    /**
     * @return The authentication scheme that is to be used when authenticating the token. This must to be provided if &#34;tokenHeader&#34; is specified.
     * 
     */
    public String tokenAuthScheme() {
        return this.tokenAuthScheme;
    }
    /**
     * @return The name of the header containing the authentication token.
     * 
     */
    public String tokenHeader() {
        return this.tokenHeader;
    }
    /**
     * @return The name of the query parameter containing the authentication token.
     * 
     */
    public String tokenQueryParam() {
        return this.tokenQueryParam;
    }
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Policy for defining behaviour on validation failure.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy> validationFailurePolicies() {
        return this.validationFailurePolicies;
    }
    /**
     * @return Authentication Policies for the Token Authentication types.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy> validationPolicies() {
        return this.validationPolicies;
    }
    /**
     * @return A list of claims which should be validated to consider the token valid.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim> verifyClaims() {
        return this.verifyClaims;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> audiences;
        private List<String> cacheKeys;
        private String functionId;
        private Boolean isAnonymousAccessAllowed;
        private List<String> issuers;
        private Double maxClockSkewInSeconds;
        private Map<String,String> parameters;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey> publicKeys;
        private String tokenAuthScheme;
        private String tokenHeader;
        private String tokenQueryParam;
        private String type;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy> validationFailurePolicies;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy> validationPolicies;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim> verifyClaims;
        public Builder() {}
        public Builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.cacheKeys = defaults.cacheKeys;
    	      this.functionId = defaults.functionId;
    	      this.isAnonymousAccessAllowed = defaults.isAnonymousAccessAllowed;
    	      this.issuers = defaults.issuers;
    	      this.maxClockSkewInSeconds = defaults.maxClockSkewInSeconds;
    	      this.parameters = defaults.parameters;
    	      this.publicKeys = defaults.publicKeys;
    	      this.tokenAuthScheme = defaults.tokenAuthScheme;
    	      this.tokenHeader = defaults.tokenHeader;
    	      this.tokenQueryParam = defaults.tokenQueryParam;
    	      this.type = defaults.type;
    	      this.validationFailurePolicies = defaults.validationFailurePolicies;
    	      this.validationPolicies = defaults.validationPolicies;
    	      this.verifyClaims = defaults.verifyClaims;
        }

        @CustomType.Setter
        public Builder audiences(List<String> audiences) {
            if (audiences == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "audiences");
            }
            this.audiences = audiences;
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        @CustomType.Setter
        public Builder cacheKeys(List<String> cacheKeys) {
            if (cacheKeys == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "cacheKeys");
            }
            this.cacheKeys = cacheKeys;
            return this;
        }
        public Builder cacheKeys(String... cacheKeys) {
            return cacheKeys(List.of(cacheKeys));
        }
        @CustomType.Setter
        public Builder functionId(String functionId) {
            if (functionId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "functionId");
            }
            this.functionId = functionId;
            return this;
        }
        @CustomType.Setter
        public Builder isAnonymousAccessAllowed(Boolean isAnonymousAccessAllowed) {
            if (isAnonymousAccessAllowed == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "isAnonymousAccessAllowed");
            }
            this.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder issuers(List<String> issuers) {
            if (issuers == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "issuers");
            }
            this.issuers = issuers;
            return this;
        }
        public Builder issuers(String... issuers) {
            return issuers(List.of(issuers));
        }
        @CustomType.Setter
        public Builder maxClockSkewInSeconds(Double maxClockSkewInSeconds) {
            if (maxClockSkewInSeconds == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "maxClockSkewInSeconds");
            }
            this.maxClockSkewInSeconds = maxClockSkewInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(Map<String,String> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeys(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey> publicKeys) {
            if (publicKeys == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "publicKeys");
            }
            this.publicKeys = publicKeys;
            return this;
        }
        public Builder publicKeys(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey... publicKeys) {
            return publicKeys(List.of(publicKeys));
        }
        @CustomType.Setter
        public Builder tokenAuthScheme(String tokenAuthScheme) {
            if (tokenAuthScheme == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "tokenAuthScheme");
            }
            this.tokenAuthScheme = tokenAuthScheme;
            return this;
        }
        @CustomType.Setter
        public Builder tokenHeader(String tokenHeader) {
            if (tokenHeader == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "tokenHeader");
            }
            this.tokenHeader = tokenHeader;
            return this;
        }
        @CustomType.Setter
        public Builder tokenQueryParam(String tokenQueryParam) {
            if (tokenQueryParam == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "tokenQueryParam");
            }
            this.tokenQueryParam = tokenQueryParam;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder validationFailurePolicies(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy> validationFailurePolicies) {
            if (validationFailurePolicies == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "validationFailurePolicies");
            }
            this.validationFailurePolicies = validationFailurePolicies;
            return this;
        }
        public Builder validationFailurePolicies(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy... validationFailurePolicies) {
            return validationFailurePolicies(List.of(validationFailurePolicies));
        }
        @CustomType.Setter
        public Builder validationPolicies(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy> validationPolicies) {
            if (validationPolicies == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "validationPolicies");
            }
            this.validationPolicies = validationPolicies;
            return this;
        }
        public Builder validationPolicies(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy... validationPolicies) {
            return validationPolicies(List.of(validationPolicies));
        }
        @CustomType.Setter
        public Builder verifyClaims(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim> verifyClaims) {
            if (verifyClaims == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail", "verifyClaims");
            }
            this.verifyClaims = verifyClaims;
            return this;
        }
        public Builder verifyClaims(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim... verifyClaims) {
            return verifyClaims(List.of(verifyClaims));
        }
        public GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail build() {
            final var _resultValue = new GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail();
            _resultValue.audiences = audiences;
            _resultValue.cacheKeys = cacheKeys;
            _resultValue.functionId = functionId;
            _resultValue.isAnonymousAccessAllowed = isAnonymousAccessAllowed;
            _resultValue.issuers = issuers;
            _resultValue.maxClockSkewInSeconds = maxClockSkewInSeconds;
            _resultValue.parameters = parameters;
            _resultValue.publicKeys = publicKeys;
            _resultValue.tokenAuthScheme = tokenAuthScheme;
            _resultValue.tokenHeader = tokenHeader;
            _resultValue.tokenQueryParam = tokenQueryParam;
            _resultValue.type = type;
            _resultValue.validationFailurePolicies = validationFailurePolicies;
            _resultValue.validationPolicies = validationPolicies;
            _resultValue.verifyClaims = verifyClaims;
            return _resultValue;
        }
    }
}
