// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy {
    /**
     * @return Client App Credential details.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail> clientDetails;
    /**
     * @return The path to be used as fallback after OAuth2.
     * 
     */
    private String fallbackRedirectPath;
    /**
     * @return The path to be used as logout.
     * 
     */
    private String logoutPath;
    /**
     * @return The duration for which the OAuth2 success token should be cached before it is fetched again.
     * 
     */
    private Integer maxExpiryDurationInHours;
    /**
     * @return HTTP response code, can include context variables.
     * 
     */
    private String responseCode;
    /**
     * @return A set of transformations to apply to HTTP headers that pass through the gateway.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation> responseHeaderTransformations;
    /**
     * @return HTTP response message.
     * 
     */
    private String responseMessage;
    /**
     * @return Response Type.
     * 
     */
    private String responseType;
    /**
     * @return List of scopes.
     * 
     */
    private List<String> scopes;
    /**
     * @return Auth endpoint details.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail> sourceUriDetails;
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    private String type;
    /**
     * @return Defines whether or not to use cookies for OAuth2 intermediate steps.
     * 
     */
    private Boolean useCookiesForIntermediateSteps;
    /**
     * @return Defines whether or not to use cookies for session maintenance.
     * 
     */
    private Boolean useCookiesForSession;
    /**
     * @return Defines whether or not to support PKCE.
     * 
     */
    private Boolean usePkce;

    private GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy() {}
    /**
     * @return Client App Credential details.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail> clientDetails() {
        return this.clientDetails;
    }
    /**
     * @return The path to be used as fallback after OAuth2.
     * 
     */
    public String fallbackRedirectPath() {
        return this.fallbackRedirectPath;
    }
    /**
     * @return The path to be used as logout.
     * 
     */
    public String logoutPath() {
        return this.logoutPath;
    }
    /**
     * @return The duration for which the OAuth2 success token should be cached before it is fetched again.
     * 
     */
    public Integer maxExpiryDurationInHours() {
        return this.maxExpiryDurationInHours;
    }
    /**
     * @return HTTP response code, can include context variables.
     * 
     */
    public String responseCode() {
        return this.responseCode;
    }
    /**
     * @return A set of transformations to apply to HTTP headers that pass through the gateway.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation> responseHeaderTransformations() {
        return this.responseHeaderTransformations;
    }
    /**
     * @return HTTP response message.
     * 
     */
    public String responseMessage() {
        return this.responseMessage;
    }
    /**
     * @return Response Type.
     * 
     */
    public String responseType() {
        return this.responseType;
    }
    /**
     * @return List of scopes.
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Auth endpoint details.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail> sourceUriDetails() {
        return this.sourceUriDetails;
    }
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Defines whether or not to use cookies for OAuth2 intermediate steps.
     * 
     */
    public Boolean useCookiesForIntermediateSteps() {
        return this.useCookiesForIntermediateSteps;
    }
    /**
     * @return Defines whether or not to use cookies for session maintenance.
     * 
     */
    public Boolean useCookiesForSession() {
        return this.useCookiesForSession;
    }
    /**
     * @return Defines whether or not to support PKCE.
     * 
     */
    public Boolean usePkce() {
        return this.usePkce;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail> clientDetails;
        private String fallbackRedirectPath;
        private String logoutPath;
        private Integer maxExpiryDurationInHours;
        private String responseCode;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation> responseHeaderTransformations;
        private String responseMessage;
        private String responseType;
        private List<String> scopes;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail> sourceUriDetails;
        private String type;
        private Boolean useCookiesForIntermediateSteps;
        private Boolean useCookiesForSession;
        private Boolean usePkce;
        public Builder() {}
        public Builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientDetails = defaults.clientDetails;
    	      this.fallbackRedirectPath = defaults.fallbackRedirectPath;
    	      this.logoutPath = defaults.logoutPath;
    	      this.maxExpiryDurationInHours = defaults.maxExpiryDurationInHours;
    	      this.responseCode = defaults.responseCode;
    	      this.responseHeaderTransformations = defaults.responseHeaderTransformations;
    	      this.responseMessage = defaults.responseMessage;
    	      this.responseType = defaults.responseType;
    	      this.scopes = defaults.scopes;
    	      this.sourceUriDetails = defaults.sourceUriDetails;
    	      this.type = defaults.type;
    	      this.useCookiesForIntermediateSteps = defaults.useCookiesForIntermediateSteps;
    	      this.useCookiesForSession = defaults.useCookiesForSession;
    	      this.usePkce = defaults.usePkce;
        }

        @CustomType.Setter
        public Builder clientDetails(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail> clientDetails) {
            this.clientDetails = Objects.requireNonNull(clientDetails);
            return this;
        }
        public Builder clientDetails(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail... clientDetails) {
            return clientDetails(List.of(clientDetails));
        }
        @CustomType.Setter
        public Builder fallbackRedirectPath(String fallbackRedirectPath) {
            this.fallbackRedirectPath = Objects.requireNonNull(fallbackRedirectPath);
            return this;
        }
        @CustomType.Setter
        public Builder logoutPath(String logoutPath) {
            this.logoutPath = Objects.requireNonNull(logoutPath);
            return this;
        }
        @CustomType.Setter
        public Builder maxExpiryDurationInHours(Integer maxExpiryDurationInHours) {
            this.maxExpiryDurationInHours = Objects.requireNonNull(maxExpiryDurationInHours);
            return this;
        }
        @CustomType.Setter
        public Builder responseCode(String responseCode) {
            this.responseCode = Objects.requireNonNull(responseCode);
            return this;
        }
        @CustomType.Setter
        public Builder responseHeaderTransformations(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation> responseHeaderTransformations) {
            this.responseHeaderTransformations = Objects.requireNonNull(responseHeaderTransformations);
            return this;
        }
        public Builder responseHeaderTransformations(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation... responseHeaderTransformations) {
            return responseHeaderTransformations(List.of(responseHeaderTransformations));
        }
        @CustomType.Setter
        public Builder responseMessage(String responseMessage) {
            this.responseMessage = Objects.requireNonNull(responseMessage);
            return this;
        }
        @CustomType.Setter
        public Builder responseType(String responseType) {
            this.responseType = Objects.requireNonNull(responseType);
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            this.scopes = Objects.requireNonNull(scopes);
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder sourceUriDetails(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail> sourceUriDetails) {
            this.sourceUriDetails = Objects.requireNonNull(sourceUriDetails);
            return this;
        }
        public Builder sourceUriDetails(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail... sourceUriDetails) {
            return sourceUriDetails(List.of(sourceUriDetails));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder useCookiesForIntermediateSteps(Boolean useCookiesForIntermediateSteps) {
            this.useCookiesForIntermediateSteps = Objects.requireNonNull(useCookiesForIntermediateSteps);
            return this;
        }
        @CustomType.Setter
        public Builder useCookiesForSession(Boolean useCookiesForSession) {
            this.useCookiesForSession = Objects.requireNonNull(useCookiesForSession);
            return this;
        }
        @CustomType.Setter
        public Builder usePkce(Boolean usePkce) {
            this.usePkce = Objects.requireNonNull(usePkce);
            return this;
        }
        public GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy build() {
            final var o = new GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy();
            o.clientDetails = clientDetails;
            o.fallbackRedirectPath = fallbackRedirectPath;
            o.logoutPath = logoutPath;
            o.maxExpiryDurationInHours = maxExpiryDurationInHours;
            o.responseCode = responseCode;
            o.responseHeaderTransformations = responseHeaderTransformations;
            o.responseMessage = responseMessage;
            o.responseType = responseType;
            o.scopes = scopes;
            o.sourceUriDetails = sourceUriDetails;
            o.type = type;
            o.useCookiesForIntermediateSteps = useCookiesForIntermediateSteps;
            o.useCookiesForSession = useCookiesForSession;
            o.usePkce = usePkce;
            return o;
        }
    }
}
