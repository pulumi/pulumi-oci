// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey;
import com.pulumi.oci.ApiGateway.outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy {
    /**
     * @return Additional JWT validation checks.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy> additionalValidationPolicies;
    /**
     * @return Client App Credential details.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail> clientDetails;
    /**
     * @return Defines whether or not to uphold SSL verification.
     * 
     */
    private Boolean isSslVerifyDisabled;
    /**
     * @return The set of static public keys.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey> keys;
    /**
     * @return The duration for which the introspect URL response should be cached before it is fetched again.
     * 
     */
    private Integer maxCacheDurationInHours;
    /**
     * @return Auth endpoint details.
     * 
     */
    private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail> sourceUriDetails;
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    private String type;
    /**
     * @return The uri from which to retrieve the key. It must be accessible without authentication.
     * 
     */
    private String uri;

    private GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy() {}
    /**
     * @return Additional JWT validation checks.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy> additionalValidationPolicies() {
        return this.additionalValidationPolicies;
    }
    /**
     * @return Client App Credential details.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail> clientDetails() {
        return this.clientDetails;
    }
    /**
     * @return Defines whether or not to uphold SSL verification.
     * 
     */
    public Boolean isSslVerifyDisabled() {
        return this.isSslVerifyDisabled;
    }
    /**
     * @return The set of static public keys.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey> keys() {
        return this.keys;
    }
    /**
     * @return The duration for which the introspect URL response should be cached before it is fetched again.
     * 
     */
    public Integer maxCacheDurationInHours() {
        return this.maxCacheDurationInHours;
    }
    /**
     * @return Auth endpoint details.
     * 
     */
    public List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail> sourceUriDetails() {
        return this.sourceUriDetails;
    }
    /**
     * @return Type of the Response Cache Store Policy.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The uri from which to retrieve the key. It must be accessible without authentication.
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy> additionalValidationPolicies;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail> clientDetails;
        private Boolean isSslVerifyDisabled;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey> keys;
        private Integer maxCacheDurationInHours;
        private List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail> sourceUriDetails;
        private String type;
        private String uri;
        public Builder() {}
        public Builder(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalValidationPolicies = defaults.additionalValidationPolicies;
    	      this.clientDetails = defaults.clientDetails;
    	      this.isSslVerifyDisabled = defaults.isSslVerifyDisabled;
    	      this.keys = defaults.keys;
    	      this.maxCacheDurationInHours = defaults.maxCacheDurationInHours;
    	      this.sourceUriDetails = defaults.sourceUriDetails;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder additionalValidationPolicies(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy> additionalValidationPolicies) {
            if (additionalValidationPolicies == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "additionalValidationPolicies");
            }
            this.additionalValidationPolicies = additionalValidationPolicies;
            return this;
        }
        public Builder additionalValidationPolicies(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy... additionalValidationPolicies) {
            return additionalValidationPolicies(List.of(additionalValidationPolicies));
        }
        @CustomType.Setter
        public Builder clientDetails(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail> clientDetails) {
            if (clientDetails == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "clientDetails");
            }
            this.clientDetails = clientDetails;
            return this;
        }
        public Builder clientDetails(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail... clientDetails) {
            return clientDetails(List.of(clientDetails));
        }
        @CustomType.Setter
        public Builder isSslVerifyDisabled(Boolean isSslVerifyDisabled) {
            if (isSslVerifyDisabled == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "isSslVerifyDisabled");
            }
            this.isSslVerifyDisabled = isSslVerifyDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder keys(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey> keys) {
            if (keys == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "keys");
            }
            this.keys = keys;
            return this;
        }
        public Builder keys(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder maxCacheDurationInHours(Integer maxCacheDurationInHours) {
            if (maxCacheDurationInHours == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "maxCacheDurationInHours");
            }
            this.maxCacheDurationInHours = maxCacheDurationInHours;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUriDetails(List<GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail> sourceUriDetails) {
            if (sourceUriDetails == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "sourceUriDetails");
            }
            this.sourceUriDetails = sourceUriDetails;
            return this;
        }
        public Builder sourceUriDetails(GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail... sourceUriDetails) {
            return sourceUriDetails(List.of(sourceUriDetails));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy build() {
            final var _resultValue = new GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy();
            _resultValue.additionalValidationPolicies = additionalValidationPolicies;
            _resultValue.clientDetails = clientDetails;
            _resultValue.isSslVerifyDisabled = isSslVerifyDisabled;
            _resultValue.keys = keys;
            _resultValue.maxCacheDurationInHours = maxCacheDurationInHours;
            _resultValue.sourceUriDetails = sourceUriDetails;
            _resultValue.type = type;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
