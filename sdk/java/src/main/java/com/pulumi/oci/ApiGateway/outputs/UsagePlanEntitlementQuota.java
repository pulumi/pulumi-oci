// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApiGateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class UsagePlanEntitlementQuota {
    /**
     * @return (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
     * 
     */
    private final String operationOnBreach;
    /**
     * @return (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
     * 
     */
    private final String resetPolicy;
    /**
     * @return (Updatable) The unit of time over which rate limits are calculated. Example: `SECOND`
     * 
     */
    private final String unit;
    /**
     * @return (Updatable) The number of requests that can be made per time period.
     * 
     */
    private final Integer value;

    @CustomType.Constructor
    private UsagePlanEntitlementQuota(
        @CustomType.Parameter("operationOnBreach") String operationOnBreach,
        @CustomType.Parameter("resetPolicy") String resetPolicy,
        @CustomType.Parameter("unit") String unit,
        @CustomType.Parameter("value") Integer value) {
        this.operationOnBreach = operationOnBreach;
        this.resetPolicy = resetPolicy;
        this.unit = unit;
        this.value = value;
    }

    /**
     * @return (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
     * 
     */
    public String operationOnBreach() {
        return this.operationOnBreach;
    }
    /**
     * @return (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
     * 
     */
    public String resetPolicy() {
        return this.resetPolicy;
    }
    /**
     * @return (Updatable) The unit of time over which rate limits are calculated. Example: `SECOND`
     * 
     */
    public String unit() {
        return this.unit;
    }
    /**
     * @return (Updatable) The number of requests that can be made per time period.
     * 
     */
    public Integer value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UsagePlanEntitlementQuota defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String operationOnBreach;
        private String resetPolicy;
        private String unit;
        private Integer value;

        public Builder() {
    	      // Empty
        }

        public Builder(UsagePlanEntitlementQuota defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operationOnBreach = defaults.operationOnBreach;
    	      this.resetPolicy = defaults.resetPolicy;
    	      this.unit = defaults.unit;
    	      this.value = defaults.value;
        }

        public Builder operationOnBreach(String operationOnBreach) {
            this.operationOnBreach = Objects.requireNonNull(operationOnBreach);
            return this;
        }
        public Builder resetPolicy(String resetPolicy) {
            this.resetPolicy = Objects.requireNonNull(resetPolicy);
            return this;
        }
        public Builder unit(String unit) {
            this.unit = Objects.requireNonNull(unit);
            return this;
        }
        public Builder value(Integer value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }        public UsagePlanEntitlementQuota build() {
            return new UsagePlanEntitlementQuota(operationOnBreach, resetPolicy, unit, value);
        }
    }
}
