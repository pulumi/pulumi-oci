// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmConfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigRuleArgs Empty = new ConfigRuleArgs();

    /**
     * (Updatable) The name by which a configuration entity is displayed to the end user.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The name by which a configuration entity is displayed to the end user.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) The string that defines the Span Filter expression.
     * 
     */
    @Import(name="filterText")
    private @Nullable Output<String> filterText;

    /**
     * @return (Updatable) The string that defines the Span Filter expression.
     * 
     */
    public Optional<Output<String>> filterText() {
        return Optional.ofNullable(this.filterText);
    }

    /**
     * (Updatable) Specifies whether an Apdex score should be computed for error spans. Setting it to &#34;true&#34; means that the Apdex score is computed in the usual way. Setting it to &#34;false&#34; skips the Apdex computation and sets the Apdex score to &#34;frustrating&#34; regardless of the configured thresholds. The default is &#34;false&#34;.
     * 
     */
    @Import(name="isApplyToErrorSpans")
    private @Nullable Output<Boolean> isApplyToErrorSpans;

    /**
     * @return (Updatable) Specifies whether an Apdex score should be computed for error spans. Setting it to &#34;true&#34; means that the Apdex score is computed in the usual way. Setting it to &#34;false&#34; skips the Apdex computation and sets the Apdex score to &#34;frustrating&#34; regardless of the configured thresholds. The default is &#34;false&#34;.
     * 
     */
    public Optional<Output<Boolean>> isApplyToErrorSpans() {
        return Optional.ofNullable(this.isApplyToErrorSpans);
    }

    /**
     * (Updatable) Specifies whether the Apdex score should be computed for spans matching the rule. This can be used to disable Apdex score for spans that do not need or require it. The default is &#34;true&#34;.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Specifies whether the Apdex score should be computed for spans matching the rule. This can be used to disable Apdex score for spans that do not need or require it. The default is &#34;true&#34;.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) The priority controls the order in which multiple rules in a rule set are applied. Lower values indicate higher priorities. Rules with higher priority are applied first, and once a match is found, the rest of the rules are ignored. Rules within the same rule set cannot have the same priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return (Updatable) The priority controls the order in which multiple rules in a rule set are applied. Lower values indicate higher priorities. Rules with higher priority are applied first, and once a match is found, the rest of the rules are ignored. Rules within the same rule set cannot have the same priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * (Updatable) The maximum response time in milliseconds that is considered &#34;satisfactory&#34; for the end user.
     * 
     */
    @Import(name="satisfiedResponseTime")
    private @Nullable Output<Integer> satisfiedResponseTime;

    /**
     * @return (Updatable) The maximum response time in milliseconds that is considered &#34;satisfactory&#34; for the end user.
     * 
     */
    public Optional<Output<Integer>> satisfiedResponseTime() {
        return Optional.ofNullable(this.satisfiedResponseTime);
    }

    /**
     * (Updatable) The maximum response time in milliseconds that is considered &#34;tolerable&#34; for the end user. A response time beyond this threshold is considered &#34;frustrating&#34;. This value cannot be lower than &#34;satisfiedResponseTime&#34;.
     * 
     */
    @Import(name="toleratingResponseTime")
    private @Nullable Output<Integer> toleratingResponseTime;

    /**
     * @return (Updatable) The maximum response time in milliseconds that is considered &#34;tolerable&#34; for the end user. A response time beyond this threshold is considered &#34;frustrating&#34;. This value cannot be lower than &#34;satisfiedResponseTime&#34;.
     * 
     */
    public Optional<Output<Integer>> toleratingResponseTime() {
        return Optional.ofNullable(this.toleratingResponseTime);
    }

    private ConfigRuleArgs() {}

    private ConfigRuleArgs(ConfigRuleArgs $) {
        this.displayName = $.displayName;
        this.filterText = $.filterText;
        this.isApplyToErrorSpans = $.isApplyToErrorSpans;
        this.isEnabled = $.isEnabled;
        this.priority = $.priority;
        this.satisfiedResponseTime = $.satisfiedResponseTime;
        this.toleratingResponseTime = $.toleratingResponseTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigRuleArgs $;

        public Builder() {
            $ = new ConfigRuleArgs();
        }

        public Builder(ConfigRuleArgs defaults) {
            $ = new ConfigRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName (Updatable) The name by which a configuration entity is displayed to the end user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The name by which a configuration entity is displayed to the end user.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param filterText (Updatable) The string that defines the Span Filter expression.
         * 
         * @return builder
         * 
         */
        public Builder filterText(@Nullable Output<String> filterText) {
            $.filterText = filterText;
            return this;
        }

        /**
         * @param filterText (Updatable) The string that defines the Span Filter expression.
         * 
         * @return builder
         * 
         */
        public Builder filterText(String filterText) {
            return filterText(Output.of(filterText));
        }

        /**
         * @param isApplyToErrorSpans (Updatable) Specifies whether an Apdex score should be computed for error spans. Setting it to &#34;true&#34; means that the Apdex score is computed in the usual way. Setting it to &#34;false&#34; skips the Apdex computation and sets the Apdex score to &#34;frustrating&#34; regardless of the configured thresholds. The default is &#34;false&#34;.
         * 
         * @return builder
         * 
         */
        public Builder isApplyToErrorSpans(@Nullable Output<Boolean> isApplyToErrorSpans) {
            $.isApplyToErrorSpans = isApplyToErrorSpans;
            return this;
        }

        /**
         * @param isApplyToErrorSpans (Updatable) Specifies whether an Apdex score should be computed for error spans. Setting it to &#34;true&#34; means that the Apdex score is computed in the usual way. Setting it to &#34;false&#34; skips the Apdex computation and sets the Apdex score to &#34;frustrating&#34; regardless of the configured thresholds. The default is &#34;false&#34;.
         * 
         * @return builder
         * 
         */
        public Builder isApplyToErrorSpans(Boolean isApplyToErrorSpans) {
            return isApplyToErrorSpans(Output.of(isApplyToErrorSpans));
        }

        /**
         * @param isEnabled (Updatable) Specifies whether the Apdex score should be computed for spans matching the rule. This can be used to disable Apdex score for spans that do not need or require it. The default is &#34;true&#34;.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Specifies whether the Apdex score should be computed for spans matching the rule. This can be used to disable Apdex score for spans that do not need or require it. The default is &#34;true&#34;.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param priority (Updatable) The priority controls the order in which multiple rules in a rule set are applied. Lower values indicate higher priorities. Rules with higher priority are applied first, and once a match is found, the rest of the rules are ignored. Rules within the same rule set cannot have the same priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority (Updatable) The priority controls the order in which multiple rules in a rule set are applied. Lower values indicate higher priorities. Rules with higher priority are applied first, and once a match is found, the rest of the rules are ignored. Rules within the same rule set cannot have the same priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param satisfiedResponseTime (Updatable) The maximum response time in milliseconds that is considered &#34;satisfactory&#34; for the end user.
         * 
         * @return builder
         * 
         */
        public Builder satisfiedResponseTime(@Nullable Output<Integer> satisfiedResponseTime) {
            $.satisfiedResponseTime = satisfiedResponseTime;
            return this;
        }

        /**
         * @param satisfiedResponseTime (Updatable) The maximum response time in milliseconds that is considered &#34;satisfactory&#34; for the end user.
         * 
         * @return builder
         * 
         */
        public Builder satisfiedResponseTime(Integer satisfiedResponseTime) {
            return satisfiedResponseTime(Output.of(satisfiedResponseTime));
        }

        /**
         * @param toleratingResponseTime (Updatable) The maximum response time in milliseconds that is considered &#34;tolerable&#34; for the end user. A response time beyond this threshold is considered &#34;frustrating&#34;. This value cannot be lower than &#34;satisfiedResponseTime&#34;.
         * 
         * @return builder
         * 
         */
        public Builder toleratingResponseTime(@Nullable Output<Integer> toleratingResponseTime) {
            $.toleratingResponseTime = toleratingResponseTime;
            return this;
        }

        /**
         * @param toleratingResponseTime (Updatable) The maximum response time in milliseconds that is considered &#34;tolerable&#34; for the end user. A response time beyond this threshold is considered &#34;frustrating&#34;. This value cannot be lower than &#34;satisfiedResponseTime&#34;.
         * 
         * @return builder
         * 
         */
        public Builder toleratingResponseTime(Integer toleratingResponseTime) {
            return toleratingResponseTime(Output.of(toleratingResponseTime));
        }

        public ConfigRuleArgs build() {
            return $;
        }
    }

}
