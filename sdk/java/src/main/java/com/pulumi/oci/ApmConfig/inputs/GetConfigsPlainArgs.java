// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmConfig.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmConfig.inputs.GetConfigsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConfigsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConfigsPlainArgs Empty = new GetConfigsPlainArgs();

    /**
     * The APM Domain ID the request is intended for.
     * 
     */
    @Import(name="apmDomainId", required=true)
    private String apmDomainId;

    /**
     * @return The APM Domain ID the request is intended for.
     * 
     */
    public String apmDomainId() {
        return this.apmDomainId;
    }

    /**
     * A filter to match configuration items of a given type. Supported values are SPAN_FILTER, METRIC_GROUP, APDEX, AGENT and MACS_APM_EXTENSION.
     * 
     */
    @Import(name="configType")
    private @Nullable String configType;

    /**
     * @return A filter to match configuration items of a given type. Supported values are SPAN_FILTER, METRIC_GROUP, APDEX, AGENT and MACS_APM_EXTENSION.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }

    /**
     * A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="definedTagEquals")
    private @Nullable List<String> definedTagEquals;

    /**
     * @return A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> definedTagEquals() {
        return Optional.ofNullable(this.definedTagEquals);
    }

    /**
     * A list of tag existence filters to apply.  Only resources for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="definedTagExists")
    private @Nullable List<String> definedTagExists;

    /**
     * @return A list of tag existence filters to apply.  Only resources for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> definedTagExists() {
        return Optional.ofNullable(this.definedTagExists);
    }

    /**
     * A filter to return resources that match the given display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return resources that match the given display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetConfigsFilter> filters;

    public Optional<List<GetConfigsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="freeformTagEquals")
    private @Nullable List<String> freeformTagEquals;

    /**
     * @return A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> freeformTagEquals() {
        return Optional.ofNullable(this.freeformTagEquals);
    }

    /**
     * A list of tag existence filters to apply.  Only resources for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    @Import(name="freeformTagExists")
    private @Nullable List<String> freeformTagExists;

    /**
     * @return A list of tag existence filters to apply.  Only resources for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
     * 
     */
    public Optional<List<String>> freeformTagExists() {
        return Optional.ofNullable(this.freeformTagExists);
    }

    /**
     * A filter to return OPTIONS resources that match the given group.
     * 
     */
    @Import(name="optionsGroup")
    private @Nullable String optionsGroup;

    /**
     * @return A filter to return OPTIONS resources that match the given group.
     * 
     */
    public Optional<String> optionsGroup() {
        return Optional.ofNullable(this.optionsGroup);
    }

    private GetConfigsPlainArgs() {}

    private GetConfigsPlainArgs(GetConfigsPlainArgs $) {
        this.apmDomainId = $.apmDomainId;
        this.configType = $.configType;
        this.definedTagEquals = $.definedTagEquals;
        this.definedTagExists = $.definedTagExists;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.freeformTagEquals = $.freeformTagEquals;
        this.freeformTagExists = $.freeformTagExists;
        this.optionsGroup = $.optionsGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConfigsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConfigsPlainArgs $;

        public Builder() {
            $ = new GetConfigsPlainArgs();
        }

        public Builder(GetConfigsPlainArgs defaults) {
            $ = new GetConfigsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apmDomainId The APM Domain ID the request is intended for.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(String apmDomainId) {
            $.apmDomainId = apmDomainId;
            return this;
        }

        /**
         * @param configType A filter to match configuration items of a given type. Supported values are SPAN_FILTER, METRIC_GROUP, APDEX, AGENT and MACS_APM_EXTENSION.
         * 
         * @return builder
         * 
         */
        public Builder configType(@Nullable String configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(@Nullable List<String> definedTagEquals) {
            $.definedTagEquals = definedTagEquals;
            return this;
        }

        /**
         * @param definedTagEquals A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagEquals(String... definedTagEquals) {
            return definedTagEquals(List.of(definedTagEquals));
        }

        /**
         * @param definedTagExists A list of tag existence filters to apply.  Only resources for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagExists(@Nullable List<String> definedTagExists) {
            $.definedTagExists = definedTagExists;
            return this;
        }

        /**
         * @param definedTagExists A list of tag existence filters to apply.  Only resources for which the specified defined tags exist will be returned. Each item in the list has the format &#34;{namespace}.{tagName}.true&#34; (for checking existence of a defined tag) or &#34;{namespace}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as &#34;OR&#34;. Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder definedTagExists(String... definedTagExists) {
            return definedTagExists(List.of(definedTagExists));
        }

        /**
         * @param displayName A filter to return resources that match the given display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetConfigsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetConfigsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(@Nullable List<String> freeformTagEquals) {
            $.freeformTagEquals = freeformTagEquals;
            return this;
        }

        /**
         * @param freeformTagEquals A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is &#34;{tagName}.{value}&#34;.  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as &#34;OR&#34;.  Values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagEquals(String... freeformTagEquals) {
            return freeformTagEquals(List.of(freeformTagEquals));
        }

        /**
         * @param freeformTagExists A list of tag existence filters to apply.  Only resources for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagExists(@Nullable List<String> freeformTagExists) {
            $.freeformTagExists = freeformTagExists;
            return this;
        }

        /**
         * @param freeformTagExists A list of tag existence filters to apply.  Only resources for which the specified freeform tags exist the value will be returned. The key for each tag is &#34;{tagName}.true&#34;.  All inputs are case-insensitive. Currently, only existence (&#34;true&#34; at the end) is supported. Absence (&#34;false&#34; at the end) is not supported. Multiple values for different tag names are interpreted as &#34;AND&#34;.
         * 
         * @return builder
         * 
         */
        public Builder freeformTagExists(String... freeformTagExists) {
            return freeformTagExists(List.of(freeformTagExists));
        }

        /**
         * @param optionsGroup A filter to return OPTIONS resources that match the given group.
         * 
         * @return builder
         * 
         */
        public Builder optionsGroup(@Nullable String optionsGroup) {
            $.optionsGroup = optionsGroup;
            return this;
        }

        public GetConfigsPlainArgs build() {
            if ($.apmDomainId == null) {
                throw new MissingRequiredPropertyException("GetConfigsPlainArgs", "apmDomainId");
            }
            return $;
        }
    }

}
