// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmConfig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmConfig.outputs.GetConfigsConfigCollectionItemConfig;
import com.pulumi.oci.ApmConfig.outputs.GetConfigsConfigCollectionItemDimension;
import com.pulumi.oci.ApmConfig.outputs.GetConfigsConfigCollectionItemInUseBy;
import com.pulumi.oci.ApmConfig.outputs.GetConfigsConfigCollectionItemMetric;
import com.pulumi.oci.ApmConfig.outputs.GetConfigsConfigCollectionItemOverride;
import com.pulumi.oci.ApmConfig.outputs.GetConfigsConfigCollectionItemRule;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConfigsConfigCollectionItem {
    /**
     * @return The version of the referenced agent bundle.
     * 
     */
    private String agentVersion;
    /**
     * @return The APM Domain ID the request is intended for.
     * 
     */
    private String apmDomainId;
    /**
     * @return The directory owned by runAsUser.
     * 
     */
    private String attachInstallDir;
    /**
     * @return A filter to match configuration items of a given type. Supported values are SPAN_FILTER, METRIC_GROUP, APDEX, AGENT and MACS_APM_EXTENSION.
     * 
     */
    private String configType;
    /**
     * @return Collection of agent configuration files. For agents that use a single configuration file, this SHOULD contain a single entry and the file name MAY be an empty string. For multiple entries, you should use multiple blocks of `config_map`. To apply a different configuration in a subset of the agents, put this block anywhere in the body of the configuration and edit &lt;some variable&gt; and &lt;some content&gt; {{ &lt;some variable&gt; | default &lt;some content&gt; }} Example: com.oracle.apm.agent.tracer.enable.jfr = {{ isJfrEnabled | default false }} Then, in the configuration&#39;s overrides, specify a different value for &lt;some variable&gt; along with the desired agent filter. Example: &#34;agentFilter&#34;: &#34;ApplicationType=&#39;Tomcat&#39;&#34; &#34;overrideMap&#34;: { &#34;isJfrEnabled&#34;: true }
     * 
     */
    private List<GetConfigsConfigCollectionItemConfig> configs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a user.
     * 
     */
    private String createdBy;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A description of the metric.
     * 
     */
    private String description;
    /**
     * @return A list of dimensions for the metric. This variable should not be used.
     * 
     */
    private List<GetConfigsConfigCollectionItemDimension> dimensions;
    /**
     * @return A filter to return resources that match the given display name.
     * 
     */
    private String displayName;
    /**
     * @return For optimistic concurrency control. See `if-match`.
     * 
     */
    private String etag;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId is generated when a Span Filter is created.
     * 
     */
    private String filterId;
    /**
     * @return The string that defines the Span Filter expression.
     * 
     */
    private String filterText;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return A string that specifies the group that an OPTIONS item belongs to.
     * 
     */
    private String group;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration item. An OCID is generated when the item is created.
     * 
     */
    private String id;
    /**
     * @return The list of configuration items that reference the span filter.
     * 
     */
    private List<GetConfigsConfigCollectionItemInUseBy> inUseBies;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent that will provision the APM Agent.
     * 
     */
    private String managementAgentId;
    /**
     * @return The agent attribute KEY by which an Agent configuration is matched to an agent.  All agent configuration objects share the same key. It is [ServiceName, service.name] by default.  The attribute VALUE corresponding to this KEY is in the matchAgentsWithAttributeValue field.
     * 
     */
    private List<String> matchAgentsWithAttributeKeys;
    /**
     * @return The agent attribute VALUE by which an agent configuration is matched to an agent.  Each agent configuration object must specify a different value.  The attribute KEY corresponding to this VALUE is in the matchAgentsWithAttributeKey field.
     * 
     */
    private String matchAgentsWithAttributeValue;
    /**
     * @return The list of metrics in this group.
     * 
     */
    private List<GetConfigsConfigCollectionItemMetric> metrics;
    /**
     * @return The namespace to which the metrics are published. It must be one of several predefined namespaces.
     * 
     */
    private String namespace;
    private String opcDryRun;
    /**
     * @return The options are stored here as JSON.
     * 
     */
    private String options;
    /**
     * @return Agent configuration overrides that should apply to a subset of the agents associated with an Agent Config object.
     * 
     */
    private List<GetConfigsConfigCollectionItemOverride> overrides;
    /**
     * @return Filter patterns used to discover active Java processes for provisioning the APM Agent.
     * 
     */
    private List<String> processFilters;
    private List<GetConfigsConfigCollectionItemRule> rules;
    /**
     * @return The OS user that should be used to discover Java processes.
     * 
     */
    private String runAsUser;
    /**
     * @return The name of the service being monitored. This argument enables you to filter by service and view traces and other signals in the APM Explorer user interface.
     * 
     */
    private String serviceName;
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    private String timeUpdated;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a user.
     * 
     */
    private String updatedBy;

    private GetConfigsConfigCollectionItem() {}
    /**
     * @return The version of the referenced agent bundle.
     * 
     */
    public String agentVersion() {
        return this.agentVersion;
    }
    /**
     * @return The APM Domain ID the request is intended for.
     * 
     */
    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return The directory owned by runAsUser.
     * 
     */
    public String attachInstallDir() {
        return this.attachInstallDir;
    }
    /**
     * @return A filter to match configuration items of a given type. Supported values are SPAN_FILTER, METRIC_GROUP, APDEX, AGENT and MACS_APM_EXTENSION.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return Collection of agent configuration files. For agents that use a single configuration file, this SHOULD contain a single entry and the file name MAY be an empty string. For multiple entries, you should use multiple blocks of `config_map`. To apply a different configuration in a subset of the agents, put this block anywhere in the body of the configuration and edit &lt;some variable&gt; and &lt;some content&gt; {{ &lt;some variable&gt; | default &lt;some content&gt; }} Example: com.oracle.apm.agent.tracer.enable.jfr = {{ isJfrEnabled | default false }} Then, in the configuration&#39;s overrides, specify a different value for &lt;some variable&gt; along with the desired agent filter. Example: &#34;agentFilter&#34;: &#34;ApplicationType=&#39;Tomcat&#39;&#34; &#34;overrideMap&#34;: { &#34;isJfrEnabled&#34;: true }
     * 
     */
    public List<GetConfigsConfigCollectionItemConfig> configs() {
        return this.configs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a user.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A description of the metric.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A list of dimensions for the metric. This variable should not be used.
     * 
     */
    public List<GetConfigsConfigCollectionItemDimension> dimensions() {
        return this.dimensions;
    }
    /**
     * @return A filter to return resources that match the given display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return For optimistic concurrency control. See `if-match`.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId is generated when a Span Filter is created.
     * 
     */
    public String filterId() {
        return this.filterId;
    }
    /**
     * @return The string that defines the Span Filter expression.
     * 
     */
    public String filterText() {
        return this.filterText;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return A string that specifies the group that an OPTIONS item belongs to.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration item. An OCID is generated when the item is created.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of configuration items that reference the span filter.
     * 
     */
    public List<GetConfigsConfigCollectionItemInUseBy> inUseBies() {
        return this.inUseBies;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent that will provision the APM Agent.
     * 
     */
    public String managementAgentId() {
        return this.managementAgentId;
    }
    /**
     * @return The agent attribute KEY by which an Agent configuration is matched to an agent.  All agent configuration objects share the same key. It is [ServiceName, service.name] by default.  The attribute VALUE corresponding to this KEY is in the matchAgentsWithAttributeValue field.
     * 
     */
    public List<String> matchAgentsWithAttributeKeys() {
        return this.matchAgentsWithAttributeKeys;
    }
    /**
     * @return The agent attribute VALUE by which an agent configuration is matched to an agent.  Each agent configuration object must specify a different value.  The attribute KEY corresponding to this VALUE is in the matchAgentsWithAttributeKey field.
     * 
     */
    public String matchAgentsWithAttributeValue() {
        return this.matchAgentsWithAttributeValue;
    }
    /**
     * @return The list of metrics in this group.
     * 
     */
    public List<GetConfigsConfigCollectionItemMetric> metrics() {
        return this.metrics;
    }
    /**
     * @return The namespace to which the metrics are published. It must be one of several predefined namespaces.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    public String opcDryRun() {
        return this.opcDryRun;
    }
    /**
     * @return The options are stored here as JSON.
     * 
     */
    public String options() {
        return this.options;
    }
    /**
     * @return Agent configuration overrides that should apply to a subset of the agents associated with an Agent Config object.
     * 
     */
    public List<GetConfigsConfigCollectionItemOverride> overrides() {
        return this.overrides;
    }
    /**
     * @return Filter patterns used to discover active Java processes for provisioning the APM Agent.
     * 
     */
    public List<String> processFilters() {
        return this.processFilters;
    }
    public List<GetConfigsConfigCollectionItemRule> rules() {
        return this.rules;
    }
    /**
     * @return The OS user that should be used to discover Java processes.
     * 
     */
    public String runAsUser() {
        return this.runAsUser;
    }
    /**
     * @return The name of the service being monitored. This argument enables you to filter by service and view traces and other signals in the APM Explorer user interface.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a user.
     * 
     */
    public String updatedBy() {
        return this.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigsConfigCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String agentVersion;
        private String apmDomainId;
        private String attachInstallDir;
        private String configType;
        private List<GetConfigsConfigCollectionItemConfig> configs;
        private String createdBy;
        private Map<String,String> definedTags;
        private String description;
        private List<GetConfigsConfigCollectionItemDimension> dimensions;
        private String displayName;
        private String etag;
        private String filterId;
        private String filterText;
        private Map<String,String> freeformTags;
        private String group;
        private String id;
        private List<GetConfigsConfigCollectionItemInUseBy> inUseBies;
        private String managementAgentId;
        private List<String> matchAgentsWithAttributeKeys;
        private String matchAgentsWithAttributeValue;
        private List<GetConfigsConfigCollectionItemMetric> metrics;
        private String namespace;
        private String opcDryRun;
        private String options;
        private List<GetConfigsConfigCollectionItemOverride> overrides;
        private List<String> processFilters;
        private List<GetConfigsConfigCollectionItemRule> rules;
        private String runAsUser;
        private String serviceName;
        private String timeCreated;
        private String timeUpdated;
        private String updatedBy;
        public Builder() {}
        public Builder(GetConfigsConfigCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentVersion = defaults.agentVersion;
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.attachInstallDir = defaults.attachInstallDir;
    	      this.configType = defaults.configType;
    	      this.configs = defaults.configs;
    	      this.createdBy = defaults.createdBy;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.dimensions = defaults.dimensions;
    	      this.displayName = defaults.displayName;
    	      this.etag = defaults.etag;
    	      this.filterId = defaults.filterId;
    	      this.filterText = defaults.filterText;
    	      this.freeformTags = defaults.freeformTags;
    	      this.group = defaults.group;
    	      this.id = defaults.id;
    	      this.inUseBies = defaults.inUseBies;
    	      this.managementAgentId = defaults.managementAgentId;
    	      this.matchAgentsWithAttributeKeys = defaults.matchAgentsWithAttributeKeys;
    	      this.matchAgentsWithAttributeValue = defaults.matchAgentsWithAttributeValue;
    	      this.metrics = defaults.metrics;
    	      this.namespace = defaults.namespace;
    	      this.opcDryRun = defaults.opcDryRun;
    	      this.options = defaults.options;
    	      this.overrides = defaults.overrides;
    	      this.processFilters = defaults.processFilters;
    	      this.rules = defaults.rules;
    	      this.runAsUser = defaults.runAsUser;
    	      this.serviceName = defaults.serviceName;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.updatedBy = defaults.updatedBy;
        }

        @CustomType.Setter
        public Builder agentVersion(String agentVersion) {
            if (agentVersion == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "agentVersion");
            }
            this.agentVersion = agentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder apmDomainId(String apmDomainId) {
            if (apmDomainId == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "apmDomainId");
            }
            this.apmDomainId = apmDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder attachInstallDir(String attachInstallDir) {
            if (attachInstallDir == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "attachInstallDir");
            }
            this.attachInstallDir = attachInstallDir;
            return this;
        }
        @CustomType.Setter
        public Builder configType(String configType) {
            if (configType == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "configType");
            }
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder configs(List<GetConfigsConfigCollectionItemConfig> configs) {
            if (configs == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "configs");
            }
            this.configs = configs;
            return this;
        }
        public Builder configs(GetConfigsConfigCollectionItemConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(List<GetConfigsConfigCollectionItemDimension> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(GetConfigsConfigCollectionItemDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(String filterId) {
            if (filterId == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "filterId");
            }
            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder filterText(String filterText) {
            if (filterText == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "filterText");
            }
            this.filterText = filterText;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inUseBies(List<GetConfigsConfigCollectionItemInUseBy> inUseBies) {
            if (inUseBies == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "inUseBies");
            }
            this.inUseBies = inUseBies;
            return this;
        }
        public Builder inUseBies(GetConfigsConfigCollectionItemInUseBy... inUseBies) {
            return inUseBies(List.of(inUseBies));
        }
        @CustomType.Setter
        public Builder managementAgentId(String managementAgentId) {
            if (managementAgentId == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "managementAgentId");
            }
            this.managementAgentId = managementAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder matchAgentsWithAttributeKeys(List<String> matchAgentsWithAttributeKeys) {
            if (matchAgentsWithAttributeKeys == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "matchAgentsWithAttributeKeys");
            }
            this.matchAgentsWithAttributeKeys = matchAgentsWithAttributeKeys;
            return this;
        }
        public Builder matchAgentsWithAttributeKeys(String... matchAgentsWithAttributeKeys) {
            return matchAgentsWithAttributeKeys(List.of(matchAgentsWithAttributeKeys));
        }
        @CustomType.Setter
        public Builder matchAgentsWithAttributeValue(String matchAgentsWithAttributeValue) {
            if (matchAgentsWithAttributeValue == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "matchAgentsWithAttributeValue");
            }
            this.matchAgentsWithAttributeValue = matchAgentsWithAttributeValue;
            return this;
        }
        @CustomType.Setter
        public Builder metrics(List<GetConfigsConfigCollectionItemMetric> metrics) {
            if (metrics == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "metrics");
            }
            this.metrics = metrics;
            return this;
        }
        public Builder metrics(GetConfigsConfigCollectionItemMetric... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder opcDryRun(String opcDryRun) {
            if (opcDryRun == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "opcDryRun");
            }
            this.opcDryRun = opcDryRun;
            return this;
        }
        @CustomType.Setter
        public Builder options(String options) {
            if (options == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "options");
            }
            this.options = options;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(List<GetConfigsConfigCollectionItemOverride> overrides) {
            if (overrides == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "overrides");
            }
            this.overrides = overrides;
            return this;
        }
        public Builder overrides(GetConfigsConfigCollectionItemOverride... overrides) {
            return overrides(List.of(overrides));
        }
        @CustomType.Setter
        public Builder processFilters(List<String> processFilters) {
            if (processFilters == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "processFilters");
            }
            this.processFilters = processFilters;
            return this;
        }
        public Builder processFilters(String... processFilters) {
            return processFilters(List.of(processFilters));
        }
        @CustomType.Setter
        public Builder rules(List<GetConfigsConfigCollectionItemRule> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "rules");
            }
            this.rules = rules;
            return this;
        }
        public Builder rules(GetConfigsConfigCollectionItemRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder runAsUser(String runAsUser) {
            if (runAsUser == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "runAsUser");
            }
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(String updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetConfigsConfigCollectionItem", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        public GetConfigsConfigCollectionItem build() {
            final var _resultValue = new GetConfigsConfigCollectionItem();
            _resultValue.agentVersion = agentVersion;
            _resultValue.apmDomainId = apmDomainId;
            _resultValue.attachInstallDir = attachInstallDir;
            _resultValue.configType = configType;
            _resultValue.configs = configs;
            _resultValue.createdBy = createdBy;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.dimensions = dimensions;
            _resultValue.displayName = displayName;
            _resultValue.etag = etag;
            _resultValue.filterId = filterId;
            _resultValue.filterText = filterText;
            _resultValue.freeformTags = freeformTags;
            _resultValue.group = group;
            _resultValue.id = id;
            _resultValue.inUseBies = inUseBies;
            _resultValue.managementAgentId = managementAgentId;
            _resultValue.matchAgentsWithAttributeKeys = matchAgentsWithAttributeKeys;
            _resultValue.matchAgentsWithAttributeValue = matchAgentsWithAttributeValue;
            _resultValue.metrics = metrics;
            _resultValue.namespace = namespace;
            _resultValue.opcDryRun = opcDryRun;
            _resultValue.options = options;
            _resultValue.overrides = overrides;
            _resultValue.processFilters = processFilters;
            _resultValue.rules = rules;
            _resultValue.runAsUser = runAsUser;
            _resultValue.serviceName = serviceName;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.updatedBy = updatedBy;
            return _resultValue;
        }
    }
}
