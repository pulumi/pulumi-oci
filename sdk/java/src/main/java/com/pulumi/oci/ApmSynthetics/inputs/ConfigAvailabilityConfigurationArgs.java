// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigAvailabilityConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigAvailabilityConfigurationArgs Empty = new ConfigAvailabilityConfigurationArgs();

    /**
     * (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
     * 
     */
    @Import(name="maxAllowedFailuresPerInterval")
    private @Nullable Output<Integer> maxAllowedFailuresPerInterval;

    /**
     * @return (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
     * 
     */
    public Optional<Output<Integer>> maxAllowedFailuresPerInterval() {
        return Optional.ofNullable(this.maxAllowedFailuresPerInterval);
    }

    /**
     * (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
     * 
     */
    @Import(name="minAllowedRunsPerInterval")
    private @Nullable Output<Integer> minAllowedRunsPerInterval;

    /**
     * @return (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
     * 
     */
    public Optional<Output<Integer>> minAllowedRunsPerInterval() {
        return Optional.ofNullable(this.minAllowedRunsPerInterval);
    }

    private ConfigAvailabilityConfigurationArgs() {}

    private ConfigAvailabilityConfigurationArgs(ConfigAvailabilityConfigurationArgs $) {
        this.maxAllowedFailuresPerInterval = $.maxAllowedFailuresPerInterval;
        this.minAllowedRunsPerInterval = $.minAllowedRunsPerInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigAvailabilityConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigAvailabilityConfigurationArgs $;

        public Builder() {
            $ = new ConfigAvailabilityConfigurationArgs();
        }

        public Builder(ConfigAvailabilityConfigurationArgs defaults) {
            $ = new ConfigAvailabilityConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxAllowedFailuresPerInterval (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedFailuresPerInterval(@Nullable Output<Integer> maxAllowedFailuresPerInterval) {
            $.maxAllowedFailuresPerInterval = maxAllowedFailuresPerInterval;
            return this;
        }

        /**
         * @param maxAllowedFailuresPerInterval (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedFailuresPerInterval(Integer maxAllowedFailuresPerInterval) {
            return maxAllowedFailuresPerInterval(Output.of(maxAllowedFailuresPerInterval));
        }

        /**
         * @param minAllowedRunsPerInterval (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
         * 
         * @return builder
         * 
         */
        public Builder minAllowedRunsPerInterval(@Nullable Output<Integer> minAllowedRunsPerInterval) {
            $.minAllowedRunsPerInterval = minAllowedRunsPerInterval;
            return this;
        }

        /**
         * @param minAllowedRunsPerInterval (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
         * 
         * @return builder
         * 
         */
        public Builder minAllowedRunsPerInterval(Integer minAllowedRunsPerInterval) {
            return minAllowedRunsPerInterval(Output.of(minAllowedRunsPerInterval));
        }

        public ConfigAvailabilityConfigurationArgs build() {
            return $;
        }
    }

}
