// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationClientCertificateDetailsArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationDatabaseAuthenticationDetailsArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationDatabaseWalletDetailsArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationDnsConfigurationArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationFtpBasicAuthenticationDetailsArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationNetworkConfigurationArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationReqAuthenticationDetailsArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationRequestHeaderArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationRequestQueryParamArgs;
import com.pulumi.oci.ApmSynthetics.inputs.ConfigConfigurationVerifyTextArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigConfigurationArgs Empty = new ConfigConfigurationArgs();

    /**
     * (Updatable) Details for client certificate.
     * 
     */
    @Import(name="clientCertificateDetails")
    private @Nullable Output<ConfigConfigurationClientCertificateDetailsArgs> clientCertificateDetails;

    /**
     * @return (Updatable) Details for client certificate.
     * 
     */
    public Optional<Output<ConfigConfigurationClientCertificateDetailsArgs>> clientCertificateDetails() {
        return Optional.ofNullable(this.clientCertificateDetails);
    }

    /**
     * (Updatable) Type of configuration.
     * 
     */
    @Import(name="configType")
    private @Nullable Output<String> configType;

    /**
     * @return (Updatable) Type of configuration.
     * 
     */
    public Optional<Output<String>> configType() {
        return Optional.ofNullable(this.configType);
    }

    /**
     * (Updatable) Database connection string.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return (Updatable) Database connection string.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * (Updatable) Details for basic authentication.
     * 
     */
    @Import(name="databaseAuthenticationDetails")
    private @Nullable Output<ConfigConfigurationDatabaseAuthenticationDetailsArgs> databaseAuthenticationDetails;

    /**
     * @return (Updatable) Details for basic authentication.
     * 
     */
    public Optional<Output<ConfigConfigurationDatabaseAuthenticationDetailsArgs>> databaseAuthenticationDetails() {
        return Optional.ofNullable(this.databaseAuthenticationDetails);
    }

    /**
     * (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
     * 
     */
    @Import(name="databaseConnectionType")
    private @Nullable Output<String> databaseConnectionType;

    /**
     * @return (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
     * 
     */
    public Optional<Output<String>> databaseConnectionType() {
        return Optional.ofNullable(this.databaseConnectionType);
    }

    /**
     * (Updatable) Database role.
     * 
     */
    @Import(name="databaseRole")
    private @Nullable Output<String> databaseRole;

    /**
     * @return (Updatable) Database role.
     * 
     */
    public Optional<Output<String>> databaseRole() {
        return Optional.ofNullable(this.databaseRole);
    }

    /**
     * (Updatable) Database type.
     * 
     */
    @Import(name="databaseType")
    private @Nullable Output<String> databaseType;

    /**
     * @return (Updatable) Database type.
     * 
     */
    public Optional<Output<String>> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    /**
     * (Updatable) Details for database wallet.
     * 
     */
    @Import(name="databaseWalletDetails")
    private @Nullable Output<ConfigConfigurationDatabaseWalletDetailsArgs> databaseWalletDetails;

    /**
     * @return (Updatable) Details for database wallet.
     * 
     */
    public Optional<Output<ConfigConfigurationDatabaseWalletDetailsArgs>> databaseWalletDetails() {
        return Optional.ofNullable(this.databaseWalletDetails);
    }

    /**
     * (Updatable) Information about the DNS settings.
     * 
     */
    @Import(name="dnsConfiguration")
    private @Nullable Output<ConfigConfigurationDnsConfigurationArgs> dnsConfiguration;

    /**
     * @return (Updatable) Information about the DNS settings.
     * 
     */
    public Optional<Output<ConfigConfigurationDnsConfigurationArgs>> dnsConfiguration() {
        return Optional.ofNullable(this.dnsConfiguration);
    }

    /**
     * (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
     * 
     */
    @Import(name="downloadSizeLimitInBytes")
    private @Nullable Output<Integer> downloadSizeLimitInBytes;

    /**
     * @return (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
     * 
     */
    public Optional<Output<Integer>> downloadSizeLimitInBytes() {
        return Optional.ofNullable(this.downloadSizeLimitInBytes);
    }

    /**
     * (Updatable) Details for basic authentication.
     * 
     */
    @Import(name="ftpBasicAuthenticationDetails")
    private @Nullable Output<ConfigConfigurationFtpBasicAuthenticationDetailsArgs> ftpBasicAuthenticationDetails;

    /**
     * @return (Updatable) Details for basic authentication.
     * 
     */
    public Optional<Output<ConfigConfigurationFtpBasicAuthenticationDetailsArgs>> ftpBasicAuthenticationDetails() {
        return Optional.ofNullable(this.ftpBasicAuthenticationDetails);
    }

    /**
     * (Updatable) FTP protocol type.
     * 
     */
    @Import(name="ftpProtocol")
    private @Nullable Output<String> ftpProtocol;

    /**
     * @return (Updatable) FTP protocol type.
     * 
     */
    public Optional<Output<String>> ftpProtocol() {
        return Optional.ofNullable(this.ftpProtocol);
    }

    /**
     * (Updatable) FTP monitor request type.
     * 
     */
    @Import(name="ftpRequestType")
    private @Nullable Output<String> ftpRequestType;

    /**
     * @return (Updatable) FTP monitor request type.
     * 
     */
    public Optional<Output<String>> ftpRequestType() {
        return Optional.ofNullable(this.ftpRequestType);
    }

    /**
     * (Updatable) If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
     * 
     */
    @Import(name="isActiveMode")
    private @Nullable Output<Boolean> isActiveMode;

    /**
     * @return (Updatable) If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
     * 
     */
    public Optional<Output<Boolean>> isActiveMode() {
        return Optional.ofNullable(this.isActiveMode);
    }

    /**
     * (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    @Import(name="isCertificateValidationEnabled")
    private @Nullable Output<Boolean> isCertificateValidationEnabled;

    /**
     * @return (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    public Optional<Output<Boolean>> isCertificateValidationEnabled() {
        return Optional.ofNullable(this.isCertificateValidationEnabled);
    }

    /**
     * (Updatable) If disabled, auto snapshots are not collected.
     * 
     */
    @Import(name="isDefaultSnapshotEnabled")
    private @Nullable Output<Boolean> isDefaultSnapshotEnabled;

    /**
     * @return (Updatable) If disabled, auto snapshots are not collected.
     * 
     */
    public Optional<Output<Boolean>> isDefaultSnapshotEnabled() {
        return Optional.ofNullable(this.isDefaultSnapshotEnabled);
    }

    /**
     * (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    @Import(name="isFailureRetried")
    private @Nullable Output<Boolean> isFailureRetried;

    /**
     * @return (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    public Optional<Output<Boolean>> isFailureRetried() {
        return Optional.ofNullable(this.isFailureRetried);
    }

    /**
     * (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
     * 
     */
    @Import(name="isQueryRecursive")
    private @Nullable Output<Boolean> isQueryRecursive;

    /**
     * @return (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
     * 
     */
    public Optional<Output<Boolean>> isQueryRecursive() {
        return Optional.ofNullable(this.isQueryRecursive);
    }

    /**
     * (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    @Import(name="isRedirectionEnabled")
    private @Nullable Output<Boolean> isRedirectionEnabled;

    /**
     * @return (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    public Optional<Output<Boolean>> isRedirectionEnabled() {
        return Optional.ofNullable(this.isRedirectionEnabled);
    }

    /**
     * (Updatable) Name of the server that will be used to perform DNS lookup.
     * 
     */
    @Import(name="nameServer")
    private @Nullable Output<String> nameServer;

    /**
     * @return (Updatable) Name of the server that will be used to perform DNS lookup.
     * 
     */
    public Optional<Output<String>> nameServer() {
        return Optional.ofNullable(this.nameServer);
    }

    /**
     * (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<ConfigConfigurationNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
     * 
     */
    public Optional<Output<ConfigConfigurationNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * (Updatable) Type of protocol.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return (Updatable) Type of protocol.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * (Updatable) SQL query to be executed.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return (Updatable) SQL query to be executed.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * (Updatable) DNS record type.
     * 
     */
    @Import(name="recordType")
    private @Nullable Output<String> recordType;

    /**
     * @return (Updatable) DNS record type.
     * 
     */
    public Optional<Output<String>> recordType() {
        return Optional.ofNullable(this.recordType);
    }

    /**
     * (Updatable) Details for request HTTP authentication.
     * 
     */
    @Import(name="reqAuthenticationDetails")
    private @Nullable Output<ConfigConfigurationReqAuthenticationDetailsArgs> reqAuthenticationDetails;

    /**
     * @return (Updatable) Details for request HTTP authentication.
     * 
     */
    public Optional<Output<ConfigConfigurationReqAuthenticationDetailsArgs>> reqAuthenticationDetails() {
        return Optional.ofNullable(this.reqAuthenticationDetails);
    }

    /**
     * (Updatable) Request HTTP authentication scheme.
     * 
     */
    @Import(name="reqAuthenticationScheme")
    private @Nullable Output<String> reqAuthenticationScheme;

    /**
     * @return (Updatable) Request HTTP authentication scheme.
     * 
     */
    public Optional<Output<String>> reqAuthenticationScheme() {
        return Optional.ofNullable(this.reqAuthenticationScheme);
    }

    /**
     * (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<List<ConfigConfigurationRequestHeaderArgs>> requestHeaders;

    /**
     * @return (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    public Optional<Output<List<ConfigConfigurationRequestHeaderArgs>>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * (Updatable) Request HTTP method.
     * 
     */
    @Import(name="requestMethod")
    private @Nullable Output<String> requestMethod;

    /**
     * @return (Updatable) Request HTTP method.
     * 
     */
    public Optional<Output<String>> requestMethod() {
        return Optional.ofNullable(this.requestMethod);
    }

    /**
     * (Updatable) Request post body content.
     * 
     */
    @Import(name="requestPostBody")
    private @Nullable Output<String> requestPostBody;

    /**
     * @return (Updatable) Request post body content.
     * 
     */
    public Optional<Output<String>> requestPostBody() {
        return Optional.ofNullable(this.requestPostBody);
    }

    /**
     * (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    @Import(name="requestQueryParams")
    private @Nullable Output<List<ConfigConfigurationRequestQueryParamArgs>> requestQueryParams;

    /**
     * @return (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    public Optional<Output<List<ConfigConfigurationRequestQueryParamArgs>>> requestQueryParams() {
        return Optional.ofNullable(this.requestQueryParams);
    }

    /**
     * (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
     * 
     */
    @Import(name="uploadFileSizeInBytes")
    private @Nullable Output<Integer> uploadFileSizeInBytes;

    /**
     * @return (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
     * 
     */
    public Optional<Output<Integer>> uploadFileSizeInBytes() {
        return Optional.ofNullable(this.uploadFileSizeInBytes);
    }

    /**
     * (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    @Import(name="verifyResponseCodes")
    private @Nullable Output<List<String>> verifyResponseCodes;

    /**
     * @return (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    public Optional<Output<List<String>>> verifyResponseCodes() {
        return Optional.ofNullable(this.verifyResponseCodes);
    }

    /**
     * (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    @Import(name="verifyResponseContent")
    private @Nullable Output<String> verifyResponseContent;

    /**
     * @return (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    public Optional<Output<String>> verifyResponseContent() {
        return Optional.ofNullable(this.verifyResponseContent);
    }

    /**
     * (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    @Import(name="verifyTexts")
    private @Nullable Output<List<ConfigConfigurationVerifyTextArgs>> verifyTexts;

    /**
     * @return (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    public Optional<Output<List<ConfigConfigurationVerifyTextArgs>>> verifyTexts() {
        return Optional.ofNullable(this.verifyTexts);
    }

    private ConfigConfigurationArgs() {}

    private ConfigConfigurationArgs(ConfigConfigurationArgs $) {
        this.clientCertificateDetails = $.clientCertificateDetails;
        this.configType = $.configType;
        this.connectionString = $.connectionString;
        this.databaseAuthenticationDetails = $.databaseAuthenticationDetails;
        this.databaseConnectionType = $.databaseConnectionType;
        this.databaseRole = $.databaseRole;
        this.databaseType = $.databaseType;
        this.databaseWalletDetails = $.databaseWalletDetails;
        this.dnsConfiguration = $.dnsConfiguration;
        this.downloadSizeLimitInBytes = $.downloadSizeLimitInBytes;
        this.ftpBasicAuthenticationDetails = $.ftpBasicAuthenticationDetails;
        this.ftpProtocol = $.ftpProtocol;
        this.ftpRequestType = $.ftpRequestType;
        this.isActiveMode = $.isActiveMode;
        this.isCertificateValidationEnabled = $.isCertificateValidationEnabled;
        this.isDefaultSnapshotEnabled = $.isDefaultSnapshotEnabled;
        this.isFailureRetried = $.isFailureRetried;
        this.isQueryRecursive = $.isQueryRecursive;
        this.isRedirectionEnabled = $.isRedirectionEnabled;
        this.nameServer = $.nameServer;
        this.networkConfiguration = $.networkConfiguration;
        this.protocol = $.protocol;
        this.query = $.query;
        this.recordType = $.recordType;
        this.reqAuthenticationDetails = $.reqAuthenticationDetails;
        this.reqAuthenticationScheme = $.reqAuthenticationScheme;
        this.requestHeaders = $.requestHeaders;
        this.requestMethod = $.requestMethod;
        this.requestPostBody = $.requestPostBody;
        this.requestQueryParams = $.requestQueryParams;
        this.uploadFileSizeInBytes = $.uploadFileSizeInBytes;
        this.verifyResponseCodes = $.verifyResponseCodes;
        this.verifyResponseContent = $.verifyResponseContent;
        this.verifyTexts = $.verifyTexts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigConfigurationArgs $;

        public Builder() {
            $ = new ConfigConfigurationArgs();
        }

        public Builder(ConfigConfigurationArgs defaults) {
            $ = new ConfigConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificateDetails (Updatable) Details for client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateDetails(@Nullable Output<ConfigConfigurationClientCertificateDetailsArgs> clientCertificateDetails) {
            $.clientCertificateDetails = clientCertificateDetails;
            return this;
        }

        /**
         * @param clientCertificateDetails (Updatable) Details for client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateDetails(ConfigConfigurationClientCertificateDetailsArgs clientCertificateDetails) {
            return clientCertificateDetails(Output.of(clientCertificateDetails));
        }

        /**
         * @param configType (Updatable) Type of configuration.
         * 
         * @return builder
         * 
         */
        public Builder configType(@Nullable Output<String> configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param configType (Updatable) Type of configuration.
         * 
         * @return builder
         * 
         */
        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        /**
         * @param connectionString (Updatable) Database connection string.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString (Updatable) Database connection string.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param databaseAuthenticationDetails (Updatable) Details for basic authentication.
         * 
         * @return builder
         * 
         */
        public Builder databaseAuthenticationDetails(@Nullable Output<ConfigConfigurationDatabaseAuthenticationDetailsArgs> databaseAuthenticationDetails) {
            $.databaseAuthenticationDetails = databaseAuthenticationDetails;
            return this;
        }

        /**
         * @param databaseAuthenticationDetails (Updatable) Details for basic authentication.
         * 
         * @return builder
         * 
         */
        public Builder databaseAuthenticationDetails(ConfigConfigurationDatabaseAuthenticationDetailsArgs databaseAuthenticationDetails) {
            return databaseAuthenticationDetails(Output.of(databaseAuthenticationDetails));
        }

        /**
         * @param databaseConnectionType (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseConnectionType(@Nullable Output<String> databaseConnectionType) {
            $.databaseConnectionType = databaseConnectionType;
            return this;
        }

        /**
         * @param databaseConnectionType (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseConnectionType(String databaseConnectionType) {
            return databaseConnectionType(Output.of(databaseConnectionType));
        }

        /**
         * @param databaseRole (Updatable) Database role.
         * 
         * @return builder
         * 
         */
        public Builder databaseRole(@Nullable Output<String> databaseRole) {
            $.databaseRole = databaseRole;
            return this;
        }

        /**
         * @param databaseRole (Updatable) Database role.
         * 
         * @return builder
         * 
         */
        public Builder databaseRole(String databaseRole) {
            return databaseRole(Output.of(databaseRole));
        }

        /**
         * @param databaseType (Updatable) Database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(@Nullable Output<String> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType (Updatable) Database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param databaseWalletDetails (Updatable) Details for database wallet.
         * 
         * @return builder
         * 
         */
        public Builder databaseWalletDetails(@Nullable Output<ConfigConfigurationDatabaseWalletDetailsArgs> databaseWalletDetails) {
            $.databaseWalletDetails = databaseWalletDetails;
            return this;
        }

        /**
         * @param databaseWalletDetails (Updatable) Details for database wallet.
         * 
         * @return builder
         * 
         */
        public Builder databaseWalletDetails(ConfigConfigurationDatabaseWalletDetailsArgs databaseWalletDetails) {
            return databaseWalletDetails(Output.of(databaseWalletDetails));
        }

        /**
         * @param dnsConfiguration (Updatable) Information about the DNS settings.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfiguration(@Nullable Output<ConfigConfigurationDnsConfigurationArgs> dnsConfiguration) {
            $.dnsConfiguration = dnsConfiguration;
            return this;
        }

        /**
         * @param dnsConfiguration (Updatable) Information about the DNS settings.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfiguration(ConfigConfigurationDnsConfigurationArgs dnsConfiguration) {
            return dnsConfiguration(Output.of(dnsConfiguration));
        }

        /**
         * @param downloadSizeLimitInBytes (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
         * 
         * @return builder
         * 
         */
        public Builder downloadSizeLimitInBytes(@Nullable Output<Integer> downloadSizeLimitInBytes) {
            $.downloadSizeLimitInBytes = downloadSizeLimitInBytes;
            return this;
        }

        /**
         * @param downloadSizeLimitInBytes (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
         * 
         * @return builder
         * 
         */
        public Builder downloadSizeLimitInBytes(Integer downloadSizeLimitInBytes) {
            return downloadSizeLimitInBytes(Output.of(downloadSizeLimitInBytes));
        }

        /**
         * @param ftpBasicAuthenticationDetails (Updatable) Details for basic authentication.
         * 
         * @return builder
         * 
         */
        public Builder ftpBasicAuthenticationDetails(@Nullable Output<ConfigConfigurationFtpBasicAuthenticationDetailsArgs> ftpBasicAuthenticationDetails) {
            $.ftpBasicAuthenticationDetails = ftpBasicAuthenticationDetails;
            return this;
        }

        /**
         * @param ftpBasicAuthenticationDetails (Updatable) Details for basic authentication.
         * 
         * @return builder
         * 
         */
        public Builder ftpBasicAuthenticationDetails(ConfigConfigurationFtpBasicAuthenticationDetailsArgs ftpBasicAuthenticationDetails) {
            return ftpBasicAuthenticationDetails(Output.of(ftpBasicAuthenticationDetails));
        }

        /**
         * @param ftpProtocol (Updatable) FTP protocol type.
         * 
         * @return builder
         * 
         */
        public Builder ftpProtocol(@Nullable Output<String> ftpProtocol) {
            $.ftpProtocol = ftpProtocol;
            return this;
        }

        /**
         * @param ftpProtocol (Updatable) FTP protocol type.
         * 
         * @return builder
         * 
         */
        public Builder ftpProtocol(String ftpProtocol) {
            return ftpProtocol(Output.of(ftpProtocol));
        }

        /**
         * @param ftpRequestType (Updatable) FTP monitor request type.
         * 
         * @return builder
         * 
         */
        public Builder ftpRequestType(@Nullable Output<String> ftpRequestType) {
            $.ftpRequestType = ftpRequestType;
            return this;
        }

        /**
         * @param ftpRequestType (Updatable) FTP monitor request type.
         * 
         * @return builder
         * 
         */
        public Builder ftpRequestType(String ftpRequestType) {
            return ftpRequestType(Output.of(ftpRequestType));
        }

        /**
         * @param isActiveMode (Updatable) If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
         * 
         * @return builder
         * 
         */
        public Builder isActiveMode(@Nullable Output<Boolean> isActiveMode) {
            $.isActiveMode = isActiveMode;
            return this;
        }

        /**
         * @param isActiveMode (Updatable) If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
         * 
         * @return builder
         * 
         */
        public Builder isActiveMode(Boolean isActiveMode) {
            return isActiveMode(Output.of(isActiveMode));
        }

        /**
         * @param isCertificateValidationEnabled (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
         * 
         * @return builder
         * 
         */
        public Builder isCertificateValidationEnabled(@Nullable Output<Boolean> isCertificateValidationEnabled) {
            $.isCertificateValidationEnabled = isCertificateValidationEnabled;
            return this;
        }

        /**
         * @param isCertificateValidationEnabled (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
         * 
         * @return builder
         * 
         */
        public Builder isCertificateValidationEnabled(Boolean isCertificateValidationEnabled) {
            return isCertificateValidationEnabled(Output.of(isCertificateValidationEnabled));
        }

        /**
         * @param isDefaultSnapshotEnabled (Updatable) If disabled, auto snapshots are not collected.
         * 
         * @return builder
         * 
         */
        public Builder isDefaultSnapshotEnabled(@Nullable Output<Boolean> isDefaultSnapshotEnabled) {
            $.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            return this;
        }

        /**
         * @param isDefaultSnapshotEnabled (Updatable) If disabled, auto snapshots are not collected.
         * 
         * @return builder
         * 
         */
        public Builder isDefaultSnapshotEnabled(Boolean isDefaultSnapshotEnabled) {
            return isDefaultSnapshotEnabled(Output.of(isDefaultSnapshotEnabled));
        }

        /**
         * @param isFailureRetried (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
         * 
         * @return builder
         * 
         */
        public Builder isFailureRetried(@Nullable Output<Boolean> isFailureRetried) {
            $.isFailureRetried = isFailureRetried;
            return this;
        }

        /**
         * @param isFailureRetried (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
         * 
         * @return builder
         * 
         */
        public Builder isFailureRetried(Boolean isFailureRetried) {
            return isFailureRetried(Output.of(isFailureRetried));
        }

        /**
         * @param isQueryRecursive (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
         * 
         * @return builder
         * 
         */
        public Builder isQueryRecursive(@Nullable Output<Boolean> isQueryRecursive) {
            $.isQueryRecursive = isQueryRecursive;
            return this;
        }

        /**
         * @param isQueryRecursive (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
         * 
         * @return builder
         * 
         */
        public Builder isQueryRecursive(Boolean isQueryRecursive) {
            return isQueryRecursive(Output.of(isQueryRecursive));
        }

        /**
         * @param isRedirectionEnabled (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
         * 
         * @return builder
         * 
         */
        public Builder isRedirectionEnabled(@Nullable Output<Boolean> isRedirectionEnabled) {
            $.isRedirectionEnabled = isRedirectionEnabled;
            return this;
        }

        /**
         * @param isRedirectionEnabled (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
         * 
         * @return builder
         * 
         */
        public Builder isRedirectionEnabled(Boolean isRedirectionEnabled) {
            return isRedirectionEnabled(Output.of(isRedirectionEnabled));
        }

        /**
         * @param nameServer (Updatable) Name of the server that will be used to perform DNS lookup.
         * 
         * @return builder
         * 
         */
        public Builder nameServer(@Nullable Output<String> nameServer) {
            $.nameServer = nameServer;
            return this;
        }

        /**
         * @param nameServer (Updatable) Name of the server that will be used to perform DNS lookup.
         * 
         * @return builder
         * 
         */
        public Builder nameServer(String nameServer) {
            return nameServer(Output.of(nameServer));
        }

        /**
         * @param networkConfiguration (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<ConfigConfigurationNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(ConfigConfigurationNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param protocol (Updatable) Type of protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) Type of protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param query (Updatable) SQL query to be executed.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query (Updatable) SQL query to be executed.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param recordType (Updatable) DNS record type.
         * 
         * @return builder
         * 
         */
        public Builder recordType(@Nullable Output<String> recordType) {
            $.recordType = recordType;
            return this;
        }

        /**
         * @param recordType (Updatable) DNS record type.
         * 
         * @return builder
         * 
         */
        public Builder recordType(String recordType) {
            return recordType(Output.of(recordType));
        }

        /**
         * @param reqAuthenticationDetails (Updatable) Details for request HTTP authentication.
         * 
         * @return builder
         * 
         */
        public Builder reqAuthenticationDetails(@Nullable Output<ConfigConfigurationReqAuthenticationDetailsArgs> reqAuthenticationDetails) {
            $.reqAuthenticationDetails = reqAuthenticationDetails;
            return this;
        }

        /**
         * @param reqAuthenticationDetails (Updatable) Details for request HTTP authentication.
         * 
         * @return builder
         * 
         */
        public Builder reqAuthenticationDetails(ConfigConfigurationReqAuthenticationDetailsArgs reqAuthenticationDetails) {
            return reqAuthenticationDetails(Output.of(reqAuthenticationDetails));
        }

        /**
         * @param reqAuthenticationScheme (Updatable) Request HTTP authentication scheme.
         * 
         * @return builder
         * 
         */
        public Builder reqAuthenticationScheme(@Nullable Output<String> reqAuthenticationScheme) {
            $.reqAuthenticationScheme = reqAuthenticationScheme;
            return this;
        }

        /**
         * @param reqAuthenticationScheme (Updatable) Request HTTP authentication scheme.
         * 
         * @return builder
         * 
         */
        public Builder reqAuthenticationScheme(String reqAuthenticationScheme) {
            return reqAuthenticationScheme(Output.of(reqAuthenticationScheme));
        }

        /**
         * @param requestHeaders (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<List<ConfigConfigurationRequestHeaderArgs>> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(List<ConfigConfigurationRequestHeaderArgs> requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param requestHeaders (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(ConfigConfigurationRequestHeaderArgs... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }

        /**
         * @param requestMethod (Updatable) Request HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder requestMethod(@Nullable Output<String> requestMethod) {
            $.requestMethod = requestMethod;
            return this;
        }

        /**
         * @param requestMethod (Updatable) Request HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder requestMethod(String requestMethod) {
            return requestMethod(Output.of(requestMethod));
        }

        /**
         * @param requestPostBody (Updatable) Request post body content.
         * 
         * @return builder
         * 
         */
        public Builder requestPostBody(@Nullable Output<String> requestPostBody) {
            $.requestPostBody = requestPostBody;
            return this;
        }

        /**
         * @param requestPostBody (Updatable) Request post body content.
         * 
         * @return builder
         * 
         */
        public Builder requestPostBody(String requestPostBody) {
            return requestPostBody(Output.of(requestPostBody));
        }

        /**
         * @param requestQueryParams (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder requestQueryParams(@Nullable Output<List<ConfigConfigurationRequestQueryParamArgs>> requestQueryParams) {
            $.requestQueryParams = requestQueryParams;
            return this;
        }

        /**
         * @param requestQueryParams (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder requestQueryParams(List<ConfigConfigurationRequestQueryParamArgs> requestQueryParams) {
            return requestQueryParams(Output.of(requestQueryParams));
        }

        /**
         * @param requestQueryParams (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
         * 
         * @return builder
         * 
         */
        public Builder requestQueryParams(ConfigConfigurationRequestQueryParamArgs... requestQueryParams) {
            return requestQueryParams(List.of(requestQueryParams));
        }

        /**
         * @param uploadFileSizeInBytes (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
         * 
         * @return builder
         * 
         */
        public Builder uploadFileSizeInBytes(@Nullable Output<Integer> uploadFileSizeInBytes) {
            $.uploadFileSizeInBytes = uploadFileSizeInBytes;
            return this;
        }

        /**
         * @param uploadFileSizeInBytes (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
         * 
         * @return builder
         * 
         */
        public Builder uploadFileSizeInBytes(Integer uploadFileSizeInBytes) {
            return uploadFileSizeInBytes(Output.of(uploadFileSizeInBytes));
        }

        /**
         * @param verifyResponseCodes (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
         * 
         * @return builder
         * 
         */
        public Builder verifyResponseCodes(@Nullable Output<List<String>> verifyResponseCodes) {
            $.verifyResponseCodes = verifyResponseCodes;
            return this;
        }

        /**
         * @param verifyResponseCodes (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
         * 
         * @return builder
         * 
         */
        public Builder verifyResponseCodes(List<String> verifyResponseCodes) {
            return verifyResponseCodes(Output.of(verifyResponseCodes));
        }

        /**
         * @param verifyResponseCodes (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
         * 
         * @return builder
         * 
         */
        public Builder verifyResponseCodes(String... verifyResponseCodes) {
            return verifyResponseCodes(List.of(verifyResponseCodes));
        }

        /**
         * @param verifyResponseContent (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
         * 
         * @return builder
         * 
         */
        public Builder verifyResponseContent(@Nullable Output<String> verifyResponseContent) {
            $.verifyResponseContent = verifyResponseContent;
            return this;
        }

        /**
         * @param verifyResponseContent (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
         * 
         * @return builder
         * 
         */
        public Builder verifyResponseContent(String verifyResponseContent) {
            return verifyResponseContent(Output.of(verifyResponseContent));
        }

        /**
         * @param verifyTexts (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
         * 
         * @return builder
         * 
         */
        public Builder verifyTexts(@Nullable Output<List<ConfigConfigurationVerifyTextArgs>> verifyTexts) {
            $.verifyTexts = verifyTexts;
            return this;
        }

        /**
         * @param verifyTexts (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
         * 
         * @return builder
         * 
         */
        public Builder verifyTexts(List<ConfigConfigurationVerifyTextArgs> verifyTexts) {
            return verifyTexts(Output.of(verifyTexts));
        }

        /**
         * @param verifyTexts (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
         * 
         * @return builder
         * 
         */
        public Builder verifyTexts(ConfigConfigurationVerifyTextArgs... verifyTexts) {
            return verifyTexts(List.of(verifyTexts));
        }

        public ConfigConfigurationArgs build() {
            return $;
        }
    }

}
