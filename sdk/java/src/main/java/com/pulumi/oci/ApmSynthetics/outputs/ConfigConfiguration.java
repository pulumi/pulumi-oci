// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationClientCertificateDetails;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationDatabaseAuthenticationDetails;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationDatabaseWalletDetails;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationDnsConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationFtpBasicAuthenticationDetails;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationNetworkConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationReqAuthenticationDetails;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationRequestHeader;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationRequestQueryParam;
import com.pulumi.oci.ApmSynthetics.outputs.ConfigConfigurationVerifyText;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigConfiguration {
    /**
     * @return (Updatable) Details for client certificate.
     * 
     */
    private @Nullable ConfigConfigurationClientCertificateDetails clientCertificateDetails;
    /**
     * @return (Updatable) Type of configuration.
     * 
     */
    private @Nullable String configType;
    /**
     * @return (Updatable) Database connection string.
     * 
     */
    private @Nullable String connectionString;
    /**
     * @return (Updatable) Details for basic authentication.
     * 
     */
    private @Nullable ConfigConfigurationDatabaseAuthenticationDetails databaseAuthenticationDetails;
    /**
     * @return (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
     * 
     */
    private @Nullable String databaseConnectionType;
    /**
     * @return (Updatable) Database role.
     * 
     */
    private @Nullable String databaseRole;
    /**
     * @return (Updatable) Database type.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return (Updatable) Details for database wallet.
     * 
     */
    private @Nullable ConfigConfigurationDatabaseWalletDetails databaseWalletDetails;
    /**
     * @return (Updatable) Information about the DNS settings.
     * 
     */
    private @Nullable ConfigConfigurationDnsConfiguration dnsConfiguration;
    /**
     * @return (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
     * 
     */
    private @Nullable Integer downloadSizeLimitInBytes;
    /**
     * @return (Updatable) Details for basic authentication.
     * 
     */
    private @Nullable ConfigConfigurationFtpBasicAuthenticationDetails ftpBasicAuthenticationDetails;
    /**
     * @return (Updatable) FTP protocol type.
     * 
     */
    private @Nullable String ftpProtocol;
    /**
     * @return (Updatable) FTP monitor request type.
     * 
     */
    private @Nullable String ftpRequestType;
    /**
     * @return (Updatable) If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
     * 
     */
    private @Nullable Boolean isActiveMode;
    /**
     * @return (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    private @Nullable Boolean isCertificateValidationEnabled;
    /**
     * @return (Updatable) If disabled, auto snapshots are not collected.
     * 
     */
    private @Nullable Boolean isDefaultSnapshotEnabled;
    /**
     * @return (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    private @Nullable Boolean isFailureRetried;
    /**
     * @return (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
     * 
     */
    private @Nullable Boolean isQueryRecursive;
    /**
     * @return (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    private @Nullable Boolean isRedirectionEnabled;
    /**
     * @return (Updatable) Name of the server that will be used to perform DNS lookup.
     * 
     */
    private @Nullable String nameServer;
    /**
     * @return (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
     * 
     */
    private @Nullable ConfigConfigurationNetworkConfiguration networkConfiguration;
    /**
     * @return (Updatable) Type of protocol.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return (Updatable) SQL query to be executed.
     * 
     */
    private @Nullable String query;
    /**
     * @return (Updatable) DNS record type.
     * 
     */
    private @Nullable String recordType;
    /**
     * @return (Updatable) Details for request HTTP authentication.
     * 
     */
    private @Nullable ConfigConfigurationReqAuthenticationDetails reqAuthenticationDetails;
    /**
     * @return (Updatable) Request HTTP authentication scheme.
     * 
     */
    private @Nullable String reqAuthenticationScheme;
    /**
     * @return (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    private @Nullable List<ConfigConfigurationRequestHeader> requestHeaders;
    /**
     * @return (Updatable) Request HTTP method.
     * 
     */
    private @Nullable String requestMethod;
    /**
     * @return (Updatable) Request post body content.
     * 
     */
    private @Nullable String requestPostBody;
    /**
     * @return (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    private @Nullable List<ConfigConfigurationRequestQueryParam> requestQueryParams;
    /**
     * @return (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
     * 
     */
    private @Nullable Integer uploadFileSizeInBytes;
    /**
     * @return (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    private @Nullable List<String> verifyResponseCodes;
    /**
     * @return (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    private @Nullable String verifyResponseContent;
    /**
     * @return (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    private @Nullable List<ConfigConfigurationVerifyText> verifyTexts;

    private ConfigConfiguration() {}
    /**
     * @return (Updatable) Details for client certificate.
     * 
     */
    public Optional<ConfigConfigurationClientCertificateDetails> clientCertificateDetails() {
        return Optional.ofNullable(this.clientCertificateDetails);
    }
    /**
     * @return (Updatable) Type of configuration.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    /**
     * @return (Updatable) Database connection string.
     * 
     */
    public Optional<String> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }
    /**
     * @return (Updatable) Details for basic authentication.
     * 
     */
    public Optional<ConfigConfigurationDatabaseAuthenticationDetails> databaseAuthenticationDetails() {
        return Optional.ofNullable(this.databaseAuthenticationDetails);
    }
    /**
     * @return (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
     * 
     */
    public Optional<String> databaseConnectionType() {
        return Optional.ofNullable(this.databaseConnectionType);
    }
    /**
     * @return (Updatable) Database role.
     * 
     */
    public Optional<String> databaseRole() {
        return Optional.ofNullable(this.databaseRole);
    }
    /**
     * @return (Updatable) Database type.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return (Updatable) Details for database wallet.
     * 
     */
    public Optional<ConfigConfigurationDatabaseWalletDetails> databaseWalletDetails() {
        return Optional.ofNullable(this.databaseWalletDetails);
    }
    /**
     * @return (Updatable) Information about the DNS settings.
     * 
     */
    public Optional<ConfigConfigurationDnsConfiguration> dnsConfiguration() {
        return Optional.ofNullable(this.dnsConfiguration);
    }
    /**
     * @return (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
     * 
     */
    public Optional<Integer> downloadSizeLimitInBytes() {
        return Optional.ofNullable(this.downloadSizeLimitInBytes);
    }
    /**
     * @return (Updatable) Details for basic authentication.
     * 
     */
    public Optional<ConfigConfigurationFtpBasicAuthenticationDetails> ftpBasicAuthenticationDetails() {
        return Optional.ofNullable(this.ftpBasicAuthenticationDetails);
    }
    /**
     * @return (Updatable) FTP protocol type.
     * 
     */
    public Optional<String> ftpProtocol() {
        return Optional.ofNullable(this.ftpProtocol);
    }
    /**
     * @return (Updatable) FTP monitor request type.
     * 
     */
    public Optional<String> ftpRequestType() {
        return Optional.ofNullable(this.ftpRequestType);
    }
    /**
     * @return (Updatable) If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
     * 
     */
    public Optional<Boolean> isActiveMode() {
        return Optional.ofNullable(this.isActiveMode);
    }
    /**
     * @return (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    public Optional<Boolean> isCertificateValidationEnabled() {
        return Optional.ofNullable(this.isCertificateValidationEnabled);
    }
    /**
     * @return (Updatable) If disabled, auto snapshots are not collected.
     * 
     */
    public Optional<Boolean> isDefaultSnapshotEnabled() {
        return Optional.ofNullable(this.isDefaultSnapshotEnabled);
    }
    /**
     * @return (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    public Optional<Boolean> isFailureRetried() {
        return Optional.ofNullable(this.isFailureRetried);
    }
    /**
     * @return (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
     * 
     */
    public Optional<Boolean> isQueryRecursive() {
        return Optional.ofNullable(this.isQueryRecursive);
    }
    /**
     * @return (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    public Optional<Boolean> isRedirectionEnabled() {
        return Optional.ofNullable(this.isRedirectionEnabled);
    }
    /**
     * @return (Updatable) Name of the server that will be used to perform DNS lookup.
     * 
     */
    public Optional<String> nameServer() {
        return Optional.ofNullable(this.nameServer);
    }
    /**
     * @return (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
     * 
     */
    public Optional<ConfigConfigurationNetworkConfiguration> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }
    /**
     * @return (Updatable) Type of protocol.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return (Updatable) SQL query to be executed.
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }
    /**
     * @return (Updatable) DNS record type.
     * 
     */
    public Optional<String> recordType() {
        return Optional.ofNullable(this.recordType);
    }
    /**
     * @return (Updatable) Details for request HTTP authentication.
     * 
     */
    public Optional<ConfigConfigurationReqAuthenticationDetails> reqAuthenticationDetails() {
        return Optional.ofNullable(this.reqAuthenticationDetails);
    }
    /**
     * @return (Updatable) Request HTTP authentication scheme.
     * 
     */
    public Optional<String> reqAuthenticationScheme() {
        return Optional.ofNullable(this.reqAuthenticationScheme);
    }
    /**
     * @return (Updatable) List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    public List<ConfigConfigurationRequestHeader> requestHeaders() {
        return this.requestHeaders == null ? List.of() : this.requestHeaders;
    }
    /**
     * @return (Updatable) Request HTTP method.
     * 
     */
    public Optional<String> requestMethod() {
        return Optional.ofNullable(this.requestMethod);
    }
    /**
     * @return (Updatable) Request post body content.
     * 
     */
    public Optional<String> requestPostBody() {
        return Optional.ofNullable(this.requestPostBody);
    }
    /**
     * @return (Updatable) List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    public List<ConfigConfigurationRequestQueryParam> requestQueryParams() {
        return this.requestQueryParams == null ? List.of() : this.requestQueryParams;
    }
    /**
     * @return (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
     * 
     */
    public Optional<Integer> uploadFileSizeInBytes() {
        return Optional.ofNullable(this.uploadFileSizeInBytes);
    }
    /**
     * @return (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    public List<String> verifyResponseCodes() {
        return this.verifyResponseCodes == null ? List.of() : this.verifyResponseCodes;
    }
    /**
     * @return (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    public Optional<String> verifyResponseContent() {
        return Optional.ofNullable(this.verifyResponseContent);
    }
    /**
     * @return (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    public List<ConfigConfigurationVerifyText> verifyTexts() {
        return this.verifyTexts == null ? List.of() : this.verifyTexts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ConfigConfigurationClientCertificateDetails clientCertificateDetails;
        private @Nullable String configType;
        private @Nullable String connectionString;
        private @Nullable ConfigConfigurationDatabaseAuthenticationDetails databaseAuthenticationDetails;
        private @Nullable String databaseConnectionType;
        private @Nullable String databaseRole;
        private @Nullable String databaseType;
        private @Nullable ConfigConfigurationDatabaseWalletDetails databaseWalletDetails;
        private @Nullable ConfigConfigurationDnsConfiguration dnsConfiguration;
        private @Nullable Integer downloadSizeLimitInBytes;
        private @Nullable ConfigConfigurationFtpBasicAuthenticationDetails ftpBasicAuthenticationDetails;
        private @Nullable String ftpProtocol;
        private @Nullable String ftpRequestType;
        private @Nullable Boolean isActiveMode;
        private @Nullable Boolean isCertificateValidationEnabled;
        private @Nullable Boolean isDefaultSnapshotEnabled;
        private @Nullable Boolean isFailureRetried;
        private @Nullable Boolean isQueryRecursive;
        private @Nullable Boolean isRedirectionEnabled;
        private @Nullable String nameServer;
        private @Nullable ConfigConfigurationNetworkConfiguration networkConfiguration;
        private @Nullable String protocol;
        private @Nullable String query;
        private @Nullable String recordType;
        private @Nullable ConfigConfigurationReqAuthenticationDetails reqAuthenticationDetails;
        private @Nullable String reqAuthenticationScheme;
        private @Nullable List<ConfigConfigurationRequestHeader> requestHeaders;
        private @Nullable String requestMethod;
        private @Nullable String requestPostBody;
        private @Nullable List<ConfigConfigurationRequestQueryParam> requestQueryParams;
        private @Nullable Integer uploadFileSizeInBytes;
        private @Nullable List<String> verifyResponseCodes;
        private @Nullable String verifyResponseContent;
        private @Nullable List<ConfigConfigurationVerifyText> verifyTexts;
        public Builder() {}
        public Builder(ConfigConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificateDetails = defaults.clientCertificateDetails;
    	      this.configType = defaults.configType;
    	      this.connectionString = defaults.connectionString;
    	      this.databaseAuthenticationDetails = defaults.databaseAuthenticationDetails;
    	      this.databaseConnectionType = defaults.databaseConnectionType;
    	      this.databaseRole = defaults.databaseRole;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseWalletDetails = defaults.databaseWalletDetails;
    	      this.dnsConfiguration = defaults.dnsConfiguration;
    	      this.downloadSizeLimitInBytes = defaults.downloadSizeLimitInBytes;
    	      this.ftpBasicAuthenticationDetails = defaults.ftpBasicAuthenticationDetails;
    	      this.ftpProtocol = defaults.ftpProtocol;
    	      this.ftpRequestType = defaults.ftpRequestType;
    	      this.isActiveMode = defaults.isActiveMode;
    	      this.isCertificateValidationEnabled = defaults.isCertificateValidationEnabled;
    	      this.isDefaultSnapshotEnabled = defaults.isDefaultSnapshotEnabled;
    	      this.isFailureRetried = defaults.isFailureRetried;
    	      this.isQueryRecursive = defaults.isQueryRecursive;
    	      this.isRedirectionEnabled = defaults.isRedirectionEnabled;
    	      this.nameServer = defaults.nameServer;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.protocol = defaults.protocol;
    	      this.query = defaults.query;
    	      this.recordType = defaults.recordType;
    	      this.reqAuthenticationDetails = defaults.reqAuthenticationDetails;
    	      this.reqAuthenticationScheme = defaults.reqAuthenticationScheme;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestPostBody = defaults.requestPostBody;
    	      this.requestQueryParams = defaults.requestQueryParams;
    	      this.uploadFileSizeInBytes = defaults.uploadFileSizeInBytes;
    	      this.verifyResponseCodes = defaults.verifyResponseCodes;
    	      this.verifyResponseContent = defaults.verifyResponseContent;
    	      this.verifyTexts = defaults.verifyTexts;
        }

        @CustomType.Setter
        public Builder clientCertificateDetails(@Nullable ConfigConfigurationClientCertificateDetails clientCertificateDetails) {

            this.clientCertificateDetails = clientCertificateDetails;
            return this;
        }
        @CustomType.Setter
        public Builder configType(@Nullable String configType) {

            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(@Nullable String connectionString) {

            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder databaseAuthenticationDetails(@Nullable ConfigConfigurationDatabaseAuthenticationDetails databaseAuthenticationDetails) {

            this.databaseAuthenticationDetails = databaseAuthenticationDetails;
            return this;
        }
        @CustomType.Setter
        public Builder databaseConnectionType(@Nullable String databaseConnectionType) {

            this.databaseConnectionType = databaseConnectionType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseRole(@Nullable String databaseRole) {

            this.databaseRole = databaseRole;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {

            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseWalletDetails(@Nullable ConfigConfigurationDatabaseWalletDetails databaseWalletDetails) {

            this.databaseWalletDetails = databaseWalletDetails;
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfiguration(@Nullable ConfigConfigurationDnsConfiguration dnsConfiguration) {

            this.dnsConfiguration = dnsConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder downloadSizeLimitInBytes(@Nullable Integer downloadSizeLimitInBytes) {

            this.downloadSizeLimitInBytes = downloadSizeLimitInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder ftpBasicAuthenticationDetails(@Nullable ConfigConfigurationFtpBasicAuthenticationDetails ftpBasicAuthenticationDetails) {

            this.ftpBasicAuthenticationDetails = ftpBasicAuthenticationDetails;
            return this;
        }
        @CustomType.Setter
        public Builder ftpProtocol(@Nullable String ftpProtocol) {

            this.ftpProtocol = ftpProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder ftpRequestType(@Nullable String ftpRequestType) {

            this.ftpRequestType = ftpRequestType;
            return this;
        }
        @CustomType.Setter
        public Builder isActiveMode(@Nullable Boolean isActiveMode) {

            this.isActiveMode = isActiveMode;
            return this;
        }
        @CustomType.Setter
        public Builder isCertificateValidationEnabled(@Nullable Boolean isCertificateValidationEnabled) {

            this.isCertificateValidationEnabled = isCertificateValidationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultSnapshotEnabled(@Nullable Boolean isDefaultSnapshotEnabled) {

            this.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isFailureRetried(@Nullable Boolean isFailureRetried) {

            this.isFailureRetried = isFailureRetried;
            return this;
        }
        @CustomType.Setter
        public Builder isQueryRecursive(@Nullable Boolean isQueryRecursive) {

            this.isQueryRecursive = isQueryRecursive;
            return this;
        }
        @CustomType.Setter
        public Builder isRedirectionEnabled(@Nullable Boolean isRedirectionEnabled) {

            this.isRedirectionEnabled = isRedirectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder nameServer(@Nullable String nameServer) {

            this.nameServer = nameServer;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfiguration(@Nullable ConfigConfigurationNetworkConfiguration networkConfiguration) {

            this.networkConfiguration = networkConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {

            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder recordType(@Nullable String recordType) {

            this.recordType = recordType;
            return this;
        }
        @CustomType.Setter
        public Builder reqAuthenticationDetails(@Nullable ConfigConfigurationReqAuthenticationDetails reqAuthenticationDetails) {

            this.reqAuthenticationDetails = reqAuthenticationDetails;
            return this;
        }
        @CustomType.Setter
        public Builder reqAuthenticationScheme(@Nullable String reqAuthenticationScheme) {

            this.reqAuthenticationScheme = reqAuthenticationScheme;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(@Nullable List<ConfigConfigurationRequestHeader> requestHeaders) {

            this.requestHeaders = requestHeaders;
            return this;
        }
        public Builder requestHeaders(ConfigConfigurationRequestHeader... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }
        @CustomType.Setter
        public Builder requestMethod(@Nullable String requestMethod) {

            this.requestMethod = requestMethod;
            return this;
        }
        @CustomType.Setter
        public Builder requestPostBody(@Nullable String requestPostBody) {

            this.requestPostBody = requestPostBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestQueryParams(@Nullable List<ConfigConfigurationRequestQueryParam> requestQueryParams) {

            this.requestQueryParams = requestQueryParams;
            return this;
        }
        public Builder requestQueryParams(ConfigConfigurationRequestQueryParam... requestQueryParams) {
            return requestQueryParams(List.of(requestQueryParams));
        }
        @CustomType.Setter
        public Builder uploadFileSizeInBytes(@Nullable Integer uploadFileSizeInBytes) {

            this.uploadFileSizeInBytes = uploadFileSizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder verifyResponseCodes(@Nullable List<String> verifyResponseCodes) {

            this.verifyResponseCodes = verifyResponseCodes;
            return this;
        }
        public Builder verifyResponseCodes(String... verifyResponseCodes) {
            return verifyResponseCodes(List.of(verifyResponseCodes));
        }
        @CustomType.Setter
        public Builder verifyResponseContent(@Nullable String verifyResponseContent) {

            this.verifyResponseContent = verifyResponseContent;
            return this;
        }
        @CustomType.Setter
        public Builder verifyTexts(@Nullable List<ConfigConfigurationVerifyText> verifyTexts) {

            this.verifyTexts = verifyTexts;
            return this;
        }
        public Builder verifyTexts(ConfigConfigurationVerifyText... verifyTexts) {
            return verifyTexts(List.of(verifyTexts));
        }
        public ConfigConfiguration build() {
            final var _resultValue = new ConfigConfiguration();
            _resultValue.clientCertificateDetails = clientCertificateDetails;
            _resultValue.configType = configType;
            _resultValue.connectionString = connectionString;
            _resultValue.databaseAuthenticationDetails = databaseAuthenticationDetails;
            _resultValue.databaseConnectionType = databaseConnectionType;
            _resultValue.databaseRole = databaseRole;
            _resultValue.databaseType = databaseType;
            _resultValue.databaseWalletDetails = databaseWalletDetails;
            _resultValue.dnsConfiguration = dnsConfiguration;
            _resultValue.downloadSizeLimitInBytes = downloadSizeLimitInBytes;
            _resultValue.ftpBasicAuthenticationDetails = ftpBasicAuthenticationDetails;
            _resultValue.ftpProtocol = ftpProtocol;
            _resultValue.ftpRequestType = ftpRequestType;
            _resultValue.isActiveMode = isActiveMode;
            _resultValue.isCertificateValidationEnabled = isCertificateValidationEnabled;
            _resultValue.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            _resultValue.isFailureRetried = isFailureRetried;
            _resultValue.isQueryRecursive = isQueryRecursive;
            _resultValue.isRedirectionEnabled = isRedirectionEnabled;
            _resultValue.nameServer = nameServer;
            _resultValue.networkConfiguration = networkConfiguration;
            _resultValue.protocol = protocol;
            _resultValue.query = query;
            _resultValue.recordType = recordType;
            _resultValue.reqAuthenticationDetails = reqAuthenticationDetails;
            _resultValue.reqAuthenticationScheme = reqAuthenticationScheme;
            _resultValue.requestHeaders = requestHeaders;
            _resultValue.requestMethod = requestMethod;
            _resultValue.requestPostBody = requestPostBody;
            _resultValue.requestQueryParams = requestQueryParams;
            _resultValue.uploadFileSizeInBytes = uploadFileSizeInBytes;
            _resultValue.verifyResponseCodes = verifyResponseCodes;
            _resultValue.verifyResponseContent = verifyResponseContent;
            _resultValue.verifyTexts = verifyTexts;
            return _resultValue;
        }
    }
}
