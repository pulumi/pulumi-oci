// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigConfigurationNetworkConfiguration {
    /**
     * @return (Updatable) Number of hops.
     * 
     */
    private @Nullable Integer numberOfHops;
    /**
     * @return (Updatable) Type of probe mode when TCP protocol is selected.
     * 
     */
    private @Nullable String probeMode;
    /**
     * @return (Updatable) Number of probes per hop.
     * 
     */
    private @Nullable Integer probePerHop;
    /**
     * @return (Updatable) Type of protocol.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return (Updatable) Number of probe packets sent out simultaneously.
     * 
     */
    private @Nullable Integer transmissionRate;

    private ConfigConfigurationNetworkConfiguration() {}
    /**
     * @return (Updatable) Number of hops.
     * 
     */
    public Optional<Integer> numberOfHops() {
        return Optional.ofNullable(this.numberOfHops);
    }
    /**
     * @return (Updatable) Type of probe mode when TCP protocol is selected.
     * 
     */
    public Optional<String> probeMode() {
        return Optional.ofNullable(this.probeMode);
    }
    /**
     * @return (Updatable) Number of probes per hop.
     * 
     */
    public Optional<Integer> probePerHop() {
        return Optional.ofNullable(this.probePerHop);
    }
    /**
     * @return (Updatable) Type of protocol.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return (Updatable) Number of probe packets sent out simultaneously.
     * 
     */
    public Optional<Integer> transmissionRate() {
        return Optional.ofNullable(this.transmissionRate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigConfigurationNetworkConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer numberOfHops;
        private @Nullable String probeMode;
        private @Nullable Integer probePerHop;
        private @Nullable String protocol;
        private @Nullable Integer transmissionRate;
        public Builder() {}
        public Builder(ConfigConfigurationNetworkConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.numberOfHops = defaults.numberOfHops;
    	      this.probeMode = defaults.probeMode;
    	      this.probePerHop = defaults.probePerHop;
    	      this.protocol = defaults.protocol;
    	      this.transmissionRate = defaults.transmissionRate;
        }

        @CustomType.Setter
        public Builder numberOfHops(@Nullable Integer numberOfHops) {
            this.numberOfHops = numberOfHops;
            return this;
        }
        @CustomType.Setter
        public Builder probeMode(@Nullable String probeMode) {
            this.probeMode = probeMode;
            return this;
        }
        @CustomType.Setter
        public Builder probePerHop(@Nullable Integer probePerHop) {
            this.probePerHop = probePerHop;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder transmissionRate(@Nullable Integer transmissionRate) {
            this.transmissionRate = transmissionRate;
            return this;
        }
        public ConfigConfigurationNetworkConfiguration build() {
            final var o = new ConfigConfigurationNetworkConfiguration();
            o.numberOfHops = numberOfHops;
            o.probeMode = probeMode;
            o.probePerHop = probePerHop;
            o.protocol = protocol;
            o.transmissionRate = transmissionRate;
            return o;
        }
    }
}
