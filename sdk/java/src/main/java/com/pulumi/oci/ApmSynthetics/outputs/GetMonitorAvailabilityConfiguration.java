// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetMonitorAvailabilityConfiguration {
    /**
     * @return Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
     * 
     */
    private Integer maxAllowedFailuresPerInterval;
    /**
     * @return Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
     * 
     */
    private Integer minAllowedRunsPerInterval;

    private GetMonitorAvailabilityConfiguration() {}
    /**
     * @return Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
     * 
     */
    public Integer maxAllowedFailuresPerInterval() {
        return this.maxAllowedFailuresPerInterval;
    }
    /**
     * @return Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
     * 
     */
    public Integer minAllowedRunsPerInterval() {
        return this.minAllowedRunsPerInterval;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorAvailabilityConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxAllowedFailuresPerInterval;
        private Integer minAllowedRunsPerInterval;
        public Builder() {}
        public Builder(GetMonitorAvailabilityConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxAllowedFailuresPerInterval = defaults.maxAllowedFailuresPerInterval;
    	      this.minAllowedRunsPerInterval = defaults.minAllowedRunsPerInterval;
        }

        @CustomType.Setter
        public Builder maxAllowedFailuresPerInterval(Integer maxAllowedFailuresPerInterval) {
            this.maxAllowedFailuresPerInterval = Objects.requireNonNull(maxAllowedFailuresPerInterval);
            return this;
        }
        @CustomType.Setter
        public Builder minAllowedRunsPerInterval(Integer minAllowedRunsPerInterval) {
            this.minAllowedRunsPerInterval = Objects.requireNonNull(minAllowedRunsPerInterval);
            return this;
        }
        public GetMonitorAvailabilityConfiguration build() {
            final var o = new GetMonitorAvailabilityConfiguration();
            o.maxAllowedFailuresPerInterval = maxAllowedFailuresPerInterval;
            o.minAllowedRunsPerInterval = minAllowedRunsPerInterval;
            return o;
        }
    }
}
