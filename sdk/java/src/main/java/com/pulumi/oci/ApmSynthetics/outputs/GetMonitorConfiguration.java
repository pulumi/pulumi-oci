// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationClientCertificateDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationDatabaseAuthenticationDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationDatabaseWalletDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationDnsConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationFtpBasicAuthenticationDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationNetworkConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationReqAuthenticationDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationRequestHeader;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationRequestQueryParam;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationVerifyText;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitorConfiguration {
    /**
     * @return Details for client certificate.
     * 
     */
    private List<GetMonitorConfigurationClientCertificateDetail> clientCertificateDetails;
    /**
     * @return Type of configuration.
     * 
     */
    private String configType;
    /**
     * @return Database connection string.
     * 
     */
    private String connectionString;
    /**
     * @return Details for basic authentication.
     * 
     */
    private List<GetMonitorConfigurationDatabaseAuthenticationDetail> databaseAuthenticationDetails;
    /**
     * @return Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
     * 
     */
    private String databaseConnectionType;
    /**
     * @return Database role.
     * 
     */
    private String databaseRole;
    /**
     * @return Database type.
     * 
     */
    private String databaseType;
    /**
     * @return Details for database wallet.
     * 
     */
    private List<GetMonitorConfigurationDatabaseWalletDetail> databaseWalletDetails;
    /**
     * @return Information about the DNS settings.
     * 
     */
    private List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations;
    /**
     * @return Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
     * 
     */
    private Integer downloadSizeLimitInBytes;
    /**
     * @return Details for basic authentication.
     * 
     */
    private List<GetMonitorConfigurationFtpBasicAuthenticationDetail> ftpBasicAuthenticationDetails;
    /**
     * @return FTP protocol type.
     * 
     */
    private String ftpProtocol;
    /**
     * @return FTP monitor request type.
     * 
     */
    private String ftpRequestType;
    /**
     * @return If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
     * 
     */
    private Boolean isActiveMode;
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    private Boolean isCertificateValidationEnabled;
    /**
     * @return If disabled, auto snapshots are not collected.
     * 
     */
    private Boolean isDefaultSnapshotEnabled;
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    private Boolean isFailureRetried;
    /**
     * @return If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
     * 
     */
    private Boolean isQueryRecursive;
    /**
     * @return If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    private Boolean isRedirectionEnabled;
    /**
     * @return Name of the server that will be used to perform DNS lookup.
     * 
     */
    private String nameServer;
    /**
     * @return Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
     * 
     */
    private List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations;
    /**
     * @return Type of protocol.
     * 
     */
    private String protocol;
    /**
     * @return SQL query to be executed.
     * 
     */
    private String query;
    /**
     * @return DNS record type.
     * 
     */
    private String recordType;
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    private List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
    /**
     * @return Request HTTP authentication scheme.
     * 
     */
    private String reqAuthenticationScheme;
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    private List<GetMonitorConfigurationRequestHeader> requestHeaders;
    /**
     * @return Request HTTP method.
     * 
     */
    private String requestMethod;
    /**
     * @return Request post body content.
     * 
     */
    private String requestPostBody;
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    private List<GetMonitorConfigurationRequestQueryParam> requestQueryParams;
    /**
     * @return File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
     * 
     */
    private Integer uploadFileSizeInBytes;
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    private List<String> verifyResponseCodes;
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    private String verifyResponseContent;
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    private List<GetMonitorConfigurationVerifyText> verifyTexts;

    private GetMonitorConfiguration() {}
    /**
     * @return Details for client certificate.
     * 
     */
    public List<GetMonitorConfigurationClientCertificateDetail> clientCertificateDetails() {
        return this.clientCertificateDetails;
    }
    /**
     * @return Type of configuration.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return Database connection string.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Details for basic authentication.
     * 
     */
    public List<GetMonitorConfigurationDatabaseAuthenticationDetail> databaseAuthenticationDetails() {
        return this.databaseAuthenticationDetails;
    }
    /**
     * @return Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
     * 
     */
    public String databaseConnectionType() {
        return this.databaseConnectionType;
    }
    /**
     * @return Database role.
     * 
     */
    public String databaseRole() {
        return this.databaseRole;
    }
    /**
     * @return Database type.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return Details for database wallet.
     * 
     */
    public List<GetMonitorConfigurationDatabaseWalletDetail> databaseWalletDetails() {
        return this.databaseWalletDetails;
    }
    /**
     * @return Information about the DNS settings.
     * 
     */
    public List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations() {
        return this.dnsConfigurations;
    }
    /**
     * @return Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
     * 
     */
    public Integer downloadSizeLimitInBytes() {
        return this.downloadSizeLimitInBytes;
    }
    /**
     * @return Details for basic authentication.
     * 
     */
    public List<GetMonitorConfigurationFtpBasicAuthenticationDetail> ftpBasicAuthenticationDetails() {
        return this.ftpBasicAuthenticationDetails;
    }
    /**
     * @return FTP protocol type.
     * 
     */
    public String ftpProtocol() {
        return this.ftpProtocol;
    }
    /**
     * @return FTP monitor request type.
     * 
     */
    public String ftpRequestType() {
        return this.ftpRequestType;
    }
    /**
     * @return If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
     * 
     */
    public Boolean isActiveMode() {
        return this.isActiveMode;
    }
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    public Boolean isCertificateValidationEnabled() {
        return this.isCertificateValidationEnabled;
    }
    /**
     * @return If disabled, auto snapshots are not collected.
     * 
     */
    public Boolean isDefaultSnapshotEnabled() {
        return this.isDefaultSnapshotEnabled;
    }
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    public Boolean isFailureRetried() {
        return this.isFailureRetried;
    }
    /**
     * @return If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
     * 
     */
    public Boolean isQueryRecursive() {
        return this.isQueryRecursive;
    }
    /**
     * @return If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    public Boolean isRedirectionEnabled() {
        return this.isRedirectionEnabled;
    }
    /**
     * @return Name of the server that will be used to perform DNS lookup.
     * 
     */
    public String nameServer() {
        return this.nameServer;
    }
    /**
     * @return Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
     * 
     */
    public List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return Type of protocol.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return SQL query to be executed.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return DNS record type.
     * 
     */
    public String recordType() {
        return this.recordType;
    }
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    public List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails() {
        return this.reqAuthenticationDetails;
    }
    /**
     * @return Request HTTP authentication scheme.
     * 
     */
    public String reqAuthenticationScheme() {
        return this.reqAuthenticationScheme;
    }
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    public List<GetMonitorConfigurationRequestHeader> requestHeaders() {
        return this.requestHeaders;
    }
    /**
     * @return Request HTTP method.
     * 
     */
    public String requestMethod() {
        return this.requestMethod;
    }
    /**
     * @return Request post body content.
     * 
     */
    public String requestPostBody() {
        return this.requestPostBody;
    }
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    public List<GetMonitorConfigurationRequestQueryParam> requestQueryParams() {
        return this.requestQueryParams;
    }
    /**
     * @return File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
     * 
     */
    public Integer uploadFileSizeInBytes() {
        return this.uploadFileSizeInBytes;
    }
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    public List<String> verifyResponseCodes() {
        return this.verifyResponseCodes;
    }
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    public String verifyResponseContent() {
        return this.verifyResponseContent;
    }
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    public List<GetMonitorConfigurationVerifyText> verifyTexts() {
        return this.verifyTexts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMonitorConfigurationClientCertificateDetail> clientCertificateDetails;
        private String configType;
        private String connectionString;
        private List<GetMonitorConfigurationDatabaseAuthenticationDetail> databaseAuthenticationDetails;
        private String databaseConnectionType;
        private String databaseRole;
        private String databaseType;
        private List<GetMonitorConfigurationDatabaseWalletDetail> databaseWalletDetails;
        private List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations;
        private Integer downloadSizeLimitInBytes;
        private List<GetMonitorConfigurationFtpBasicAuthenticationDetail> ftpBasicAuthenticationDetails;
        private String ftpProtocol;
        private String ftpRequestType;
        private Boolean isActiveMode;
        private Boolean isCertificateValidationEnabled;
        private Boolean isDefaultSnapshotEnabled;
        private Boolean isFailureRetried;
        private Boolean isQueryRecursive;
        private Boolean isRedirectionEnabled;
        private String nameServer;
        private List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations;
        private String protocol;
        private String query;
        private String recordType;
        private List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
        private String reqAuthenticationScheme;
        private List<GetMonitorConfigurationRequestHeader> requestHeaders;
        private String requestMethod;
        private String requestPostBody;
        private List<GetMonitorConfigurationRequestQueryParam> requestQueryParams;
        private Integer uploadFileSizeInBytes;
        private List<String> verifyResponseCodes;
        private String verifyResponseContent;
        private List<GetMonitorConfigurationVerifyText> verifyTexts;
        public Builder() {}
        public Builder(GetMonitorConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificateDetails = defaults.clientCertificateDetails;
    	      this.configType = defaults.configType;
    	      this.connectionString = defaults.connectionString;
    	      this.databaseAuthenticationDetails = defaults.databaseAuthenticationDetails;
    	      this.databaseConnectionType = defaults.databaseConnectionType;
    	      this.databaseRole = defaults.databaseRole;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseWalletDetails = defaults.databaseWalletDetails;
    	      this.dnsConfigurations = defaults.dnsConfigurations;
    	      this.downloadSizeLimitInBytes = defaults.downloadSizeLimitInBytes;
    	      this.ftpBasicAuthenticationDetails = defaults.ftpBasicAuthenticationDetails;
    	      this.ftpProtocol = defaults.ftpProtocol;
    	      this.ftpRequestType = defaults.ftpRequestType;
    	      this.isActiveMode = defaults.isActiveMode;
    	      this.isCertificateValidationEnabled = defaults.isCertificateValidationEnabled;
    	      this.isDefaultSnapshotEnabled = defaults.isDefaultSnapshotEnabled;
    	      this.isFailureRetried = defaults.isFailureRetried;
    	      this.isQueryRecursive = defaults.isQueryRecursive;
    	      this.isRedirectionEnabled = defaults.isRedirectionEnabled;
    	      this.nameServer = defaults.nameServer;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.protocol = defaults.protocol;
    	      this.query = defaults.query;
    	      this.recordType = defaults.recordType;
    	      this.reqAuthenticationDetails = defaults.reqAuthenticationDetails;
    	      this.reqAuthenticationScheme = defaults.reqAuthenticationScheme;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestPostBody = defaults.requestPostBody;
    	      this.requestQueryParams = defaults.requestQueryParams;
    	      this.uploadFileSizeInBytes = defaults.uploadFileSizeInBytes;
    	      this.verifyResponseCodes = defaults.verifyResponseCodes;
    	      this.verifyResponseContent = defaults.verifyResponseContent;
    	      this.verifyTexts = defaults.verifyTexts;
        }

        @CustomType.Setter
        public Builder clientCertificateDetails(List<GetMonitorConfigurationClientCertificateDetail> clientCertificateDetails) {
            if (clientCertificateDetails == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "clientCertificateDetails");
            }
            this.clientCertificateDetails = clientCertificateDetails;
            return this;
        }
        public Builder clientCertificateDetails(GetMonitorConfigurationClientCertificateDetail... clientCertificateDetails) {
            return clientCertificateDetails(List.of(clientCertificateDetails));
        }
        @CustomType.Setter
        public Builder configType(String configType) {
            if (configType == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "configType");
            }
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder databaseAuthenticationDetails(List<GetMonitorConfigurationDatabaseAuthenticationDetail> databaseAuthenticationDetails) {
            if (databaseAuthenticationDetails == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "databaseAuthenticationDetails");
            }
            this.databaseAuthenticationDetails = databaseAuthenticationDetails;
            return this;
        }
        public Builder databaseAuthenticationDetails(GetMonitorConfigurationDatabaseAuthenticationDetail... databaseAuthenticationDetails) {
            return databaseAuthenticationDetails(List.of(databaseAuthenticationDetails));
        }
        @CustomType.Setter
        public Builder databaseConnectionType(String databaseConnectionType) {
            if (databaseConnectionType == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "databaseConnectionType");
            }
            this.databaseConnectionType = databaseConnectionType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseRole(String databaseRole) {
            if (databaseRole == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "databaseRole");
            }
            this.databaseRole = databaseRole;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseWalletDetails(List<GetMonitorConfigurationDatabaseWalletDetail> databaseWalletDetails) {
            if (databaseWalletDetails == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "databaseWalletDetails");
            }
            this.databaseWalletDetails = databaseWalletDetails;
            return this;
        }
        public Builder databaseWalletDetails(GetMonitorConfigurationDatabaseWalletDetail... databaseWalletDetails) {
            return databaseWalletDetails(List.of(databaseWalletDetails));
        }
        @CustomType.Setter
        public Builder dnsConfigurations(List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations) {
            if (dnsConfigurations == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "dnsConfigurations");
            }
            this.dnsConfigurations = dnsConfigurations;
            return this;
        }
        public Builder dnsConfigurations(GetMonitorConfigurationDnsConfiguration... dnsConfigurations) {
            return dnsConfigurations(List.of(dnsConfigurations));
        }
        @CustomType.Setter
        public Builder downloadSizeLimitInBytes(Integer downloadSizeLimitInBytes) {
            if (downloadSizeLimitInBytes == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "downloadSizeLimitInBytes");
            }
            this.downloadSizeLimitInBytes = downloadSizeLimitInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder ftpBasicAuthenticationDetails(List<GetMonitorConfigurationFtpBasicAuthenticationDetail> ftpBasicAuthenticationDetails) {
            if (ftpBasicAuthenticationDetails == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "ftpBasicAuthenticationDetails");
            }
            this.ftpBasicAuthenticationDetails = ftpBasicAuthenticationDetails;
            return this;
        }
        public Builder ftpBasicAuthenticationDetails(GetMonitorConfigurationFtpBasicAuthenticationDetail... ftpBasicAuthenticationDetails) {
            return ftpBasicAuthenticationDetails(List.of(ftpBasicAuthenticationDetails));
        }
        @CustomType.Setter
        public Builder ftpProtocol(String ftpProtocol) {
            if (ftpProtocol == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "ftpProtocol");
            }
            this.ftpProtocol = ftpProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder ftpRequestType(String ftpRequestType) {
            if (ftpRequestType == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "ftpRequestType");
            }
            this.ftpRequestType = ftpRequestType;
            return this;
        }
        @CustomType.Setter
        public Builder isActiveMode(Boolean isActiveMode) {
            if (isActiveMode == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "isActiveMode");
            }
            this.isActiveMode = isActiveMode;
            return this;
        }
        @CustomType.Setter
        public Builder isCertificateValidationEnabled(Boolean isCertificateValidationEnabled) {
            if (isCertificateValidationEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "isCertificateValidationEnabled");
            }
            this.isCertificateValidationEnabled = isCertificateValidationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultSnapshotEnabled(Boolean isDefaultSnapshotEnabled) {
            if (isDefaultSnapshotEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "isDefaultSnapshotEnabled");
            }
            this.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isFailureRetried(Boolean isFailureRetried) {
            if (isFailureRetried == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "isFailureRetried");
            }
            this.isFailureRetried = isFailureRetried;
            return this;
        }
        @CustomType.Setter
        public Builder isQueryRecursive(Boolean isQueryRecursive) {
            if (isQueryRecursive == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "isQueryRecursive");
            }
            this.isQueryRecursive = isQueryRecursive;
            return this;
        }
        @CustomType.Setter
        public Builder isRedirectionEnabled(Boolean isRedirectionEnabled) {
            if (isRedirectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "isRedirectionEnabled");
            }
            this.isRedirectionEnabled = isRedirectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder nameServer(String nameServer) {
            if (nameServer == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "nameServer");
            }
            this.nameServer = nameServer;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetMonitorConfigurationNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder recordType(String recordType) {
            if (recordType == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "recordType");
            }
            this.recordType = recordType;
            return this;
        }
        @CustomType.Setter
        public Builder reqAuthenticationDetails(List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails) {
            if (reqAuthenticationDetails == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "reqAuthenticationDetails");
            }
            this.reqAuthenticationDetails = reqAuthenticationDetails;
            return this;
        }
        public Builder reqAuthenticationDetails(GetMonitorConfigurationReqAuthenticationDetail... reqAuthenticationDetails) {
            return reqAuthenticationDetails(List.of(reqAuthenticationDetails));
        }
        @CustomType.Setter
        public Builder reqAuthenticationScheme(String reqAuthenticationScheme) {
            if (reqAuthenticationScheme == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "reqAuthenticationScheme");
            }
            this.reqAuthenticationScheme = reqAuthenticationScheme;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(List<GetMonitorConfigurationRequestHeader> requestHeaders) {
            if (requestHeaders == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "requestHeaders");
            }
            this.requestHeaders = requestHeaders;
            return this;
        }
        public Builder requestHeaders(GetMonitorConfigurationRequestHeader... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }
        @CustomType.Setter
        public Builder requestMethod(String requestMethod) {
            if (requestMethod == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "requestMethod");
            }
            this.requestMethod = requestMethod;
            return this;
        }
        @CustomType.Setter
        public Builder requestPostBody(String requestPostBody) {
            if (requestPostBody == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "requestPostBody");
            }
            this.requestPostBody = requestPostBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestQueryParams(List<GetMonitorConfigurationRequestQueryParam> requestQueryParams) {
            if (requestQueryParams == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "requestQueryParams");
            }
            this.requestQueryParams = requestQueryParams;
            return this;
        }
        public Builder requestQueryParams(GetMonitorConfigurationRequestQueryParam... requestQueryParams) {
            return requestQueryParams(List.of(requestQueryParams));
        }
        @CustomType.Setter
        public Builder uploadFileSizeInBytes(Integer uploadFileSizeInBytes) {
            if (uploadFileSizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "uploadFileSizeInBytes");
            }
            this.uploadFileSizeInBytes = uploadFileSizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder verifyResponseCodes(List<String> verifyResponseCodes) {
            if (verifyResponseCodes == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "verifyResponseCodes");
            }
            this.verifyResponseCodes = verifyResponseCodes;
            return this;
        }
        public Builder verifyResponseCodes(String... verifyResponseCodes) {
            return verifyResponseCodes(List.of(verifyResponseCodes));
        }
        @CustomType.Setter
        public Builder verifyResponseContent(String verifyResponseContent) {
            if (verifyResponseContent == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "verifyResponseContent");
            }
            this.verifyResponseContent = verifyResponseContent;
            return this;
        }
        @CustomType.Setter
        public Builder verifyTexts(List<GetMonitorConfigurationVerifyText> verifyTexts) {
            if (verifyTexts == null) {
              throw new MissingRequiredPropertyException("GetMonitorConfiguration", "verifyTexts");
            }
            this.verifyTexts = verifyTexts;
            return this;
        }
        public Builder verifyTexts(GetMonitorConfigurationVerifyText... verifyTexts) {
            return verifyTexts(List.of(verifyTexts));
        }
        public GetMonitorConfiguration build() {
            final var _resultValue = new GetMonitorConfiguration();
            _resultValue.clientCertificateDetails = clientCertificateDetails;
            _resultValue.configType = configType;
            _resultValue.connectionString = connectionString;
            _resultValue.databaseAuthenticationDetails = databaseAuthenticationDetails;
            _resultValue.databaseConnectionType = databaseConnectionType;
            _resultValue.databaseRole = databaseRole;
            _resultValue.databaseType = databaseType;
            _resultValue.databaseWalletDetails = databaseWalletDetails;
            _resultValue.dnsConfigurations = dnsConfigurations;
            _resultValue.downloadSizeLimitInBytes = downloadSizeLimitInBytes;
            _resultValue.ftpBasicAuthenticationDetails = ftpBasicAuthenticationDetails;
            _resultValue.ftpProtocol = ftpProtocol;
            _resultValue.ftpRequestType = ftpRequestType;
            _resultValue.isActiveMode = isActiveMode;
            _resultValue.isCertificateValidationEnabled = isCertificateValidationEnabled;
            _resultValue.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            _resultValue.isFailureRetried = isFailureRetried;
            _resultValue.isQueryRecursive = isQueryRecursive;
            _resultValue.isRedirectionEnabled = isRedirectionEnabled;
            _resultValue.nameServer = nameServer;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.protocol = protocol;
            _resultValue.query = query;
            _resultValue.recordType = recordType;
            _resultValue.reqAuthenticationDetails = reqAuthenticationDetails;
            _resultValue.reqAuthenticationScheme = reqAuthenticationScheme;
            _resultValue.requestHeaders = requestHeaders;
            _resultValue.requestMethod = requestMethod;
            _resultValue.requestPostBody = requestPostBody;
            _resultValue.requestQueryParams = requestQueryParams;
            _resultValue.uploadFileSizeInBytes = uploadFileSizeInBytes;
            _resultValue.verifyResponseCodes = verifyResponseCodes;
            _resultValue.verifyResponseContent = verifyResponseContent;
            _resultValue.verifyTexts = verifyTexts;
            return _resultValue;
        }
    }
}
