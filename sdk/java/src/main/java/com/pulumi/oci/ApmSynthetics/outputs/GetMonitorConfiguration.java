// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationDnsConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationNetworkConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationReqAuthenticationDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationRequestHeader;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationRequestQueryParam;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfigurationVerifyText;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitorConfiguration {
    /**
     * @return Type of configuration.
     * 
     */
    private String configType;
    /**
     * @return Dns settings.
     * 
     */
    private List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations;
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    private Boolean isCertificateValidationEnabled;
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    private Boolean isFailureRetried;
    /**
     * @return If redirection enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    private Boolean isRedirectionEnabled;
    /**
     * @return Details of the network configuration.
     * 
     */
    private List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations;
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    private List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
    /**
     * @return Request http authentication scheme.
     * 
     */
    private String reqAuthenticationScheme;
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    private List<GetMonitorConfigurationRequestHeader> requestHeaders;
    /**
     * @return Request HTTP method.
     * 
     */
    private String requestMethod;
    /**
     * @return Request post body content.
     * 
     */
    private String requestPostBody;
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    private List<GetMonitorConfigurationRequestQueryParam> requestQueryParams;
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    private List<String> verifyResponseCodes;
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    private String verifyResponseContent;
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    private List<GetMonitorConfigurationVerifyText> verifyTexts;

    private GetMonitorConfiguration() {}
    /**
     * @return Type of configuration.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return Dns settings.
     * 
     */
    public List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations() {
        return this.dnsConfigurations;
    }
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    public Boolean isCertificateValidationEnabled() {
        return this.isCertificateValidationEnabled;
    }
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    public Boolean isFailureRetried() {
        return this.isFailureRetried;
    }
    /**
     * @return If redirection enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    public Boolean isRedirectionEnabled() {
        return this.isRedirectionEnabled;
    }
    /**
     * @return Details of the network configuration.
     * 
     */
    public List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    public List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails() {
        return this.reqAuthenticationDetails;
    }
    /**
     * @return Request http authentication scheme.
     * 
     */
    public String reqAuthenticationScheme() {
        return this.reqAuthenticationScheme;
    }
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    public List<GetMonitorConfigurationRequestHeader> requestHeaders() {
        return this.requestHeaders;
    }
    /**
     * @return Request HTTP method.
     * 
     */
    public String requestMethod() {
        return this.requestMethod;
    }
    /**
     * @return Request post body content.
     * 
     */
    public String requestPostBody() {
        return this.requestPostBody;
    }
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    public List<GetMonitorConfigurationRequestQueryParam> requestQueryParams() {
        return this.requestQueryParams;
    }
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    public List<String> verifyResponseCodes() {
        return this.verifyResponseCodes;
    }
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    public String verifyResponseContent() {
        return this.verifyResponseContent;
    }
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    public List<GetMonitorConfigurationVerifyText> verifyTexts() {
        return this.verifyTexts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String configType;
        private List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations;
        private Boolean isCertificateValidationEnabled;
        private Boolean isFailureRetried;
        private Boolean isRedirectionEnabled;
        private List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations;
        private List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
        private String reqAuthenticationScheme;
        private List<GetMonitorConfigurationRequestHeader> requestHeaders;
        private String requestMethod;
        private String requestPostBody;
        private List<GetMonitorConfigurationRequestQueryParam> requestQueryParams;
        private List<String> verifyResponseCodes;
        private String verifyResponseContent;
        private List<GetMonitorConfigurationVerifyText> verifyTexts;
        public Builder() {}
        public Builder(GetMonitorConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configType = defaults.configType;
    	      this.dnsConfigurations = defaults.dnsConfigurations;
    	      this.isCertificateValidationEnabled = defaults.isCertificateValidationEnabled;
    	      this.isFailureRetried = defaults.isFailureRetried;
    	      this.isRedirectionEnabled = defaults.isRedirectionEnabled;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.reqAuthenticationDetails = defaults.reqAuthenticationDetails;
    	      this.reqAuthenticationScheme = defaults.reqAuthenticationScheme;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestPostBody = defaults.requestPostBody;
    	      this.requestQueryParams = defaults.requestQueryParams;
    	      this.verifyResponseCodes = defaults.verifyResponseCodes;
    	      this.verifyResponseContent = defaults.verifyResponseContent;
    	      this.verifyTexts = defaults.verifyTexts;
        }

        @CustomType.Setter
        public Builder configType(String configType) {
            this.configType = Objects.requireNonNull(configType);
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfigurations(List<GetMonitorConfigurationDnsConfiguration> dnsConfigurations) {
            this.dnsConfigurations = Objects.requireNonNull(dnsConfigurations);
            return this;
        }
        public Builder dnsConfigurations(GetMonitorConfigurationDnsConfiguration... dnsConfigurations) {
            return dnsConfigurations(List.of(dnsConfigurations));
        }
        @CustomType.Setter
        public Builder isCertificateValidationEnabled(Boolean isCertificateValidationEnabled) {
            this.isCertificateValidationEnabled = Objects.requireNonNull(isCertificateValidationEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isFailureRetried(Boolean isFailureRetried) {
            this.isFailureRetried = Objects.requireNonNull(isFailureRetried);
            return this;
        }
        @CustomType.Setter
        public Builder isRedirectionEnabled(Boolean isRedirectionEnabled) {
            this.isRedirectionEnabled = Objects.requireNonNull(isRedirectionEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetMonitorConfigurationNetworkConfiguration> networkConfigurations) {
            this.networkConfigurations = Objects.requireNonNull(networkConfigurations);
            return this;
        }
        public Builder networkConfigurations(GetMonitorConfigurationNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder reqAuthenticationDetails(List<GetMonitorConfigurationReqAuthenticationDetail> reqAuthenticationDetails) {
            this.reqAuthenticationDetails = Objects.requireNonNull(reqAuthenticationDetails);
            return this;
        }
        public Builder reqAuthenticationDetails(GetMonitorConfigurationReqAuthenticationDetail... reqAuthenticationDetails) {
            return reqAuthenticationDetails(List.of(reqAuthenticationDetails));
        }
        @CustomType.Setter
        public Builder reqAuthenticationScheme(String reqAuthenticationScheme) {
            this.reqAuthenticationScheme = Objects.requireNonNull(reqAuthenticationScheme);
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(List<GetMonitorConfigurationRequestHeader> requestHeaders) {
            this.requestHeaders = Objects.requireNonNull(requestHeaders);
            return this;
        }
        public Builder requestHeaders(GetMonitorConfigurationRequestHeader... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }
        @CustomType.Setter
        public Builder requestMethod(String requestMethod) {
            this.requestMethod = Objects.requireNonNull(requestMethod);
            return this;
        }
        @CustomType.Setter
        public Builder requestPostBody(String requestPostBody) {
            this.requestPostBody = Objects.requireNonNull(requestPostBody);
            return this;
        }
        @CustomType.Setter
        public Builder requestQueryParams(List<GetMonitorConfigurationRequestQueryParam> requestQueryParams) {
            this.requestQueryParams = Objects.requireNonNull(requestQueryParams);
            return this;
        }
        public Builder requestQueryParams(GetMonitorConfigurationRequestQueryParam... requestQueryParams) {
            return requestQueryParams(List.of(requestQueryParams));
        }
        @CustomType.Setter
        public Builder verifyResponseCodes(List<String> verifyResponseCodes) {
            this.verifyResponseCodes = Objects.requireNonNull(verifyResponseCodes);
            return this;
        }
        public Builder verifyResponseCodes(String... verifyResponseCodes) {
            return verifyResponseCodes(List.of(verifyResponseCodes));
        }
        @CustomType.Setter
        public Builder verifyResponseContent(String verifyResponseContent) {
            this.verifyResponseContent = Objects.requireNonNull(verifyResponseContent);
            return this;
        }
        @CustomType.Setter
        public Builder verifyTexts(List<GetMonitorConfigurationVerifyText> verifyTexts) {
            this.verifyTexts = Objects.requireNonNull(verifyTexts);
            return this;
        }
        public Builder verifyTexts(GetMonitorConfigurationVerifyText... verifyTexts) {
            return verifyTexts(List.of(verifyTexts));
        }
        public GetMonitorConfiguration build() {
            final var o = new GetMonitorConfiguration();
            o.configType = configType;
            o.dnsConfigurations = dnsConfigurations;
            o.isCertificateValidationEnabled = isCertificateValidationEnabled;
            o.isFailureRetried = isFailureRetried;
            o.isRedirectionEnabled = isRedirectionEnabled;
            o.networkConfigurations = networkConfigurations;
            o.reqAuthenticationDetails = reqAuthenticationDetails;
            o.reqAuthenticationScheme = reqAuthenticationScheme;
            o.requestHeaders = requestHeaders;
            o.requestMethod = requestMethod;
            o.requestPostBody = requestPostBody;
            o.requestQueryParams = requestQueryParams;
            o.verifyResponseCodes = verifyResponseCodes;
            o.verifyResponseContent = verifyResponseContent;
            o.verifyTexts = verifyTexts;
            return o;
        }
    }
}
