// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorAvailabilityConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorMaintenanceWindowSchedule;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorScriptParameter;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorVantagePoint;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMonitorResult {
    private String apmDomainId;
    /**
     * @return Monitor availability configuration details.
     * 
     */
    private @Nullable List<GetMonitorAvailabilityConfiguration> availabilityConfigurations;
    /**
     * @return Time interval between two runs in round robin batch mode (SchedulingPolicy - BATCHED_ROUND_ROBIN).
     * 
     */
    private @Nullable Integer batchIntervalInSeconds;
    /**
     * @return Details of monitor configuration.
     * 
     */
    private @Nullable List<GetMonitorConfiguration> configurations;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Unique name that can be edited. The name should not contain any confidential information.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
     * 
     */
    private @Nullable String id;
    /**
     * @return If isRunNow is enabled, then the monitor will run immediately.
     * 
     */
    private @Nullable Boolean isRunNow;
    /**
     * @return If runOnce is enabled, then the monitor will run once.
     * 
     */
    private @Nullable Boolean isRunOnce;
    /**
     * @return Details required to schedule maintenance window.
     * 
     */
    private @Nullable List<GetMonitorMaintenanceWindowSchedule> maintenanceWindowSchedules;
    private String monitorId;
    /**
     * @return Type of monitor.
     * 
     */
    private @Nullable String monitorType;
    /**
     * @return Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
     * 
     */
    private @Nullable Integer repeatIntervalInSeconds;
    /**
     * @return Scheduling policy to decide the distribution of monitor executions on vantage points.
     * 
     */
    private @Nullable String schedulingPolicy;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    private @Nullable String scriptId;
    /**
     * @return Name of the script.
     * 
     */
    private @Nullable String scriptName;
    /**
     * @return List of script parameters. Example: `[{&#34;monitorScriptParameter&#34;: {&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}, &#34;isSecret&#34;: false, &#34;isOverwritten&#34;: false}]`
     * 
     */
    private @Nullable List<GetMonitorScriptParameter> scriptParameters;
    /**
     * @return Enables or disables the monitor.
     * 
     */
    private @Nullable String status;
    /**
     * @return Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80
     * 
     */
    private @Nullable String target;
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     * 
     */
    private @Nullable Integer timeoutInSeconds;
    /**
     * @return Number of vantage points where monitor is running.
     * 
     */
    private @Nullable Integer vantagePointCount;
    /**
     * @return List of public and dedicated vantage points where the monitor is running.
     * 
     */
    private @Nullable List<GetMonitorVantagePoint> vantagePoints;

    private GetMonitorResult() {}
    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return Monitor availability configuration details.
     * 
     */
    public List<GetMonitorAvailabilityConfiguration> availabilityConfigurations() {
        return this.availabilityConfigurations == null ? List.of() : this.availabilityConfigurations;
    }
    /**
     * @return Time interval between two runs in round robin batch mode (SchedulingPolicy - BATCHED_ROUND_ROBIN).
     * 
     */
    public Optional<Integer> batchIntervalInSeconds() {
        return Optional.ofNullable(this.batchIntervalInSeconds);
    }
    /**
     * @return Details of monitor configuration.
     * 
     */
    public List<GetMonitorConfiguration> configurations() {
        return this.configurations == null ? List.of() : this.configurations;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Unique name that can be edited. The name should not contain any confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return If isRunNow is enabled, then the monitor will run immediately.
     * 
     */
    public Optional<Boolean> isRunNow() {
        return Optional.ofNullable(this.isRunNow);
    }
    /**
     * @return If runOnce is enabled, then the monitor will run once.
     * 
     */
    public Optional<Boolean> isRunOnce() {
        return Optional.ofNullable(this.isRunOnce);
    }
    /**
     * @return Details required to schedule maintenance window.
     * 
     */
    public List<GetMonitorMaintenanceWindowSchedule> maintenanceWindowSchedules() {
        return this.maintenanceWindowSchedules == null ? List.of() : this.maintenanceWindowSchedules;
    }
    public String monitorId() {
        return this.monitorId;
    }
    /**
     * @return Type of monitor.
     * 
     */
    public Optional<String> monitorType() {
        return Optional.ofNullable(this.monitorType);
    }
    /**
     * @return Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
     * 
     */
    public Optional<Integer> repeatIntervalInSeconds() {
        return Optional.ofNullable(this.repeatIntervalInSeconds);
    }
    /**
     * @return Scheduling policy to decide the distribution of monitor executions on vantage points.
     * 
     */
    public Optional<String> schedulingPolicy() {
        return Optional.ofNullable(this.schedulingPolicy);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    public Optional<String> scriptId() {
        return Optional.ofNullable(this.scriptId);
    }
    /**
     * @return Name of the script.
     * 
     */
    public Optional<String> scriptName() {
        return Optional.ofNullable(this.scriptName);
    }
    /**
     * @return List of script parameters. Example: `[{&#34;monitorScriptParameter&#34;: {&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;}, &#34;isSecret&#34;: false, &#34;isOverwritten&#34;: false}]`
     * 
     */
    public List<GetMonitorScriptParameter> scriptParameters() {
        return this.scriptParameters == null ? List.of() : this.scriptParameters;
    }
    /**
     * @return Enables or disables the monitor.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }
    /**
     * @return Number of vantage points where monitor is running.
     * 
     */
    public Optional<Integer> vantagePointCount() {
        return Optional.ofNullable(this.vantagePointCount);
    }
    /**
     * @return List of public and dedicated vantage points where the monitor is running.
     * 
     */
    public List<GetMonitorVantagePoint> vantagePoints() {
        return this.vantagePoints == null ? List.of() : this.vantagePoints;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apmDomainId;
        private @Nullable List<GetMonitorAvailabilityConfiguration> availabilityConfigurations;
        private @Nullable Integer batchIntervalInSeconds;
        private @Nullable List<GetMonitorConfiguration> configurations;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable Boolean isRunNow;
        private @Nullable Boolean isRunOnce;
        private @Nullable List<GetMonitorMaintenanceWindowSchedule> maintenanceWindowSchedules;
        private String monitorId;
        private @Nullable String monitorType;
        private @Nullable Integer repeatIntervalInSeconds;
        private @Nullable String schedulingPolicy;
        private @Nullable String scriptId;
        private @Nullable String scriptName;
        private @Nullable List<GetMonitorScriptParameter> scriptParameters;
        private @Nullable String status;
        private @Nullable String target;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable Integer timeoutInSeconds;
        private @Nullable Integer vantagePointCount;
        private @Nullable List<GetMonitorVantagePoint> vantagePoints;
        public Builder() {}
        public Builder(GetMonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.availabilityConfigurations = defaults.availabilityConfigurations;
    	      this.batchIntervalInSeconds = defaults.batchIntervalInSeconds;
    	      this.configurations = defaults.configurations;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isRunNow = defaults.isRunNow;
    	      this.isRunOnce = defaults.isRunOnce;
    	      this.maintenanceWindowSchedules = defaults.maintenanceWindowSchedules;
    	      this.monitorId = defaults.monitorId;
    	      this.monitorType = defaults.monitorType;
    	      this.repeatIntervalInSeconds = defaults.repeatIntervalInSeconds;
    	      this.schedulingPolicy = defaults.schedulingPolicy;
    	      this.scriptId = defaults.scriptId;
    	      this.scriptName = defaults.scriptName;
    	      this.scriptParameters = defaults.scriptParameters;
    	      this.status = defaults.status;
    	      this.target = defaults.target;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.vantagePointCount = defaults.vantagePointCount;
    	      this.vantagePoints = defaults.vantagePoints;
        }

        @CustomType.Setter
        public Builder apmDomainId(String apmDomainId) {
            this.apmDomainId = Objects.requireNonNull(apmDomainId);
            return this;
        }
        @CustomType.Setter
        public Builder availabilityConfigurations(@Nullable List<GetMonitorAvailabilityConfiguration> availabilityConfigurations) {
            this.availabilityConfigurations = availabilityConfigurations;
            return this;
        }
        public Builder availabilityConfigurations(GetMonitorAvailabilityConfiguration... availabilityConfigurations) {
            return availabilityConfigurations(List.of(availabilityConfigurations));
        }
        @CustomType.Setter
        public Builder batchIntervalInSeconds(@Nullable Integer batchIntervalInSeconds) {
            this.batchIntervalInSeconds = batchIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder configurations(@Nullable List<GetMonitorConfiguration> configurations) {
            this.configurations = configurations;
            return this;
        }
        public Builder configurations(GetMonitorConfiguration... configurations) {
            return configurations(List.of(configurations));
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRunNow(@Nullable Boolean isRunNow) {
            this.isRunNow = isRunNow;
            return this;
        }
        @CustomType.Setter
        public Builder isRunOnce(@Nullable Boolean isRunOnce) {
            this.isRunOnce = isRunOnce;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindowSchedules(@Nullable List<GetMonitorMaintenanceWindowSchedule> maintenanceWindowSchedules) {
            this.maintenanceWindowSchedules = maintenanceWindowSchedules;
            return this;
        }
        public Builder maintenanceWindowSchedules(GetMonitorMaintenanceWindowSchedule... maintenanceWindowSchedules) {
            return maintenanceWindowSchedules(List.of(maintenanceWindowSchedules));
        }
        @CustomType.Setter
        public Builder monitorId(String monitorId) {
            this.monitorId = Objects.requireNonNull(monitorId);
            return this;
        }
        @CustomType.Setter
        public Builder monitorType(@Nullable String monitorType) {
            this.monitorType = monitorType;
            return this;
        }
        @CustomType.Setter
        public Builder repeatIntervalInSeconds(@Nullable Integer repeatIntervalInSeconds) {
            this.repeatIntervalInSeconds = repeatIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder schedulingPolicy(@Nullable String schedulingPolicy) {
            this.schedulingPolicy = schedulingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder scriptId(@Nullable String scriptId) {
            this.scriptId = scriptId;
            return this;
        }
        @CustomType.Setter
        public Builder scriptName(@Nullable String scriptName) {
            this.scriptName = scriptName;
            return this;
        }
        @CustomType.Setter
        public Builder scriptParameters(@Nullable List<GetMonitorScriptParameter> scriptParameters) {
            this.scriptParameters = scriptParameters;
            return this;
        }
        public Builder scriptParameters(GetMonitorScriptParameter... scriptParameters) {
            return scriptParameters(List.of(scriptParameters));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder vantagePointCount(@Nullable Integer vantagePointCount) {
            this.vantagePointCount = vantagePointCount;
            return this;
        }
        @CustomType.Setter
        public Builder vantagePoints(@Nullable List<GetMonitorVantagePoint> vantagePoints) {
            this.vantagePoints = vantagePoints;
            return this;
        }
        public Builder vantagePoints(GetMonitorVantagePoint... vantagePoints) {
            return vantagePoints(List.of(vantagePoints));
        }
        public GetMonitorResult build() {
            final var o = new GetMonitorResult();
            o.apmDomainId = apmDomainId;
            o.availabilityConfigurations = availabilityConfigurations;
            o.batchIntervalInSeconds = batchIntervalInSeconds;
            o.configurations = configurations;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isRunNow = isRunNow;
            o.isRunOnce = isRunOnce;
            o.maintenanceWindowSchedules = maintenanceWindowSchedules;
            o.monitorId = monitorId;
            o.monitorType = monitorType;
            o.repeatIntervalInSeconds = repeatIntervalInSeconds;
            o.schedulingPolicy = schedulingPolicy;
            o.scriptId = scriptId;
            o.scriptName = scriptName;
            o.scriptParameters = scriptParameters;
            o.status = status;
            o.target = target;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.timeoutInSeconds = timeoutInSeconds;
            o.vantagePointCount = vantagePointCount;
            o.vantagePoints = vantagePoints;
            return o;
        }
    }
}
