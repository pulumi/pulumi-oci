// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetMonitorsMonitorCollectionItemAvailabilityConfiguration {
    /**
     * @return Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
     * 
     */
    private Integer maxAllowedFailuresPerInterval;
    /**
     * @return Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
     * 
     */
    private Integer minAllowedRunsPerInterval;

    private GetMonitorsMonitorCollectionItemAvailabilityConfiguration() {}
    /**
     * @return Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
     * 
     */
    public Integer maxAllowedFailuresPerInterval() {
        return this.maxAllowedFailuresPerInterval;
    }
    /**
     * @return Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
     * 
     */
    public Integer minAllowedRunsPerInterval() {
        return this.minAllowedRunsPerInterval;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorsMonitorCollectionItemAvailabilityConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxAllowedFailuresPerInterval;
        private Integer minAllowedRunsPerInterval;
        public Builder() {}
        public Builder(GetMonitorsMonitorCollectionItemAvailabilityConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxAllowedFailuresPerInterval = defaults.maxAllowedFailuresPerInterval;
    	      this.minAllowedRunsPerInterval = defaults.minAllowedRunsPerInterval;
        }

        @CustomType.Setter
        public Builder maxAllowedFailuresPerInterval(Integer maxAllowedFailuresPerInterval) {
            if (maxAllowedFailuresPerInterval == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemAvailabilityConfiguration", "maxAllowedFailuresPerInterval");
            }
            this.maxAllowedFailuresPerInterval = maxAllowedFailuresPerInterval;
            return this;
        }
        @CustomType.Setter
        public Builder minAllowedRunsPerInterval(Integer minAllowedRunsPerInterval) {
            if (minAllowedRunsPerInterval == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemAvailabilityConfiguration", "minAllowedRunsPerInterval");
            }
            this.minAllowedRunsPerInterval = minAllowedRunsPerInterval;
            return this;
        }
        public GetMonitorsMonitorCollectionItemAvailabilityConfiguration build() {
            final var _resultValue = new GetMonitorsMonitorCollectionItemAvailabilityConfiguration();
            _resultValue.maxAllowedFailuresPerInterval = maxAllowedFailuresPerInterval;
            _resultValue.minAllowedRunsPerInterval = minAllowedRunsPerInterval;
            return _resultValue;
        }
    }
}
