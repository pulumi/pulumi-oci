// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeader;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyText;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitorsMonitorCollectionItemConfiguration {
    /**
     * @return Details for client certificate.
     * 
     */
    private List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails;
    /**
     * @return Type of configuration.
     * 
     */
    private String configType;
    /**
     * @return Information about the DNS settings.
     * 
     */
    private List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations;
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    private Boolean isCertificateValidationEnabled;
    /**
     * @return If disabled, auto snapshots are not collected.
     * 
     */
    private Boolean isDefaultSnapshotEnabled;
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    private Boolean isFailureRetried;
    /**
     * @return If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    private Boolean isRedirectionEnabled;
    /**
     * @return Details of the network configuration.
     * 
     */
    private List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations;
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    private List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
    /**
     * @return Request HTTP authentication scheme.
     * 
     */
    private String reqAuthenticationScheme;
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    private List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders;
    /**
     * @return Request HTTP method.
     * 
     */
    private String requestMethod;
    /**
     * @return Request post body content.
     * 
     */
    private String requestPostBody;
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    private List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams;
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    private List<String> verifyResponseCodes;
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    private String verifyResponseContent;
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    private List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts;

    private GetMonitorsMonitorCollectionItemConfiguration() {}
    /**
     * @return Details for client certificate.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails() {
        return this.clientCertificateDetails;
    }
    /**
     * @return Type of configuration.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return Information about the DNS settings.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations() {
        return this.dnsConfigurations;
    }
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    public Boolean isCertificateValidationEnabled() {
        return this.isCertificateValidationEnabled;
    }
    /**
     * @return If disabled, auto snapshots are not collected.
     * 
     */
    public Boolean isDefaultSnapshotEnabled() {
        return this.isDefaultSnapshotEnabled;
    }
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    public Boolean isFailureRetried() {
        return this.isFailureRetried;
    }
    /**
     * @return If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    public Boolean isRedirectionEnabled() {
        return this.isRedirectionEnabled;
    }
    /**
     * @return Details of the network configuration.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails() {
        return this.reqAuthenticationDetails;
    }
    /**
     * @return Request HTTP authentication scheme.
     * 
     */
    public String reqAuthenticationScheme() {
        return this.reqAuthenticationScheme;
    }
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders() {
        return this.requestHeaders;
    }
    /**
     * @return Request HTTP method.
     * 
     */
    public String requestMethod() {
        return this.requestMethod;
    }
    /**
     * @return Request post body content.
     * 
     */
    public String requestPostBody() {
        return this.requestPostBody;
    }
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams() {
        return this.requestQueryParams;
    }
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    public List<String> verifyResponseCodes() {
        return this.verifyResponseCodes;
    }
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    public String verifyResponseContent() {
        return this.verifyResponseContent;
    }
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts() {
        return this.verifyTexts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorsMonitorCollectionItemConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails;
        private String configType;
        private List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations;
        private Boolean isCertificateValidationEnabled;
        private Boolean isDefaultSnapshotEnabled;
        private Boolean isFailureRetried;
        private Boolean isRedirectionEnabled;
        private List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations;
        private List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
        private String reqAuthenticationScheme;
        private List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders;
        private String requestMethod;
        private String requestPostBody;
        private List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams;
        private List<String> verifyResponseCodes;
        private String verifyResponseContent;
        private List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts;
        public Builder() {}
        public Builder(GetMonitorsMonitorCollectionItemConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificateDetails = defaults.clientCertificateDetails;
    	      this.configType = defaults.configType;
    	      this.dnsConfigurations = defaults.dnsConfigurations;
    	      this.isCertificateValidationEnabled = defaults.isCertificateValidationEnabled;
    	      this.isDefaultSnapshotEnabled = defaults.isDefaultSnapshotEnabled;
    	      this.isFailureRetried = defaults.isFailureRetried;
    	      this.isRedirectionEnabled = defaults.isRedirectionEnabled;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.reqAuthenticationDetails = defaults.reqAuthenticationDetails;
    	      this.reqAuthenticationScheme = defaults.reqAuthenticationScheme;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestPostBody = defaults.requestPostBody;
    	      this.requestQueryParams = defaults.requestQueryParams;
    	      this.verifyResponseCodes = defaults.verifyResponseCodes;
    	      this.verifyResponseContent = defaults.verifyResponseContent;
    	      this.verifyTexts = defaults.verifyTexts;
        }

        @CustomType.Setter
        public Builder clientCertificateDetails(List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails) {
            if (clientCertificateDetails == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "clientCertificateDetails");
            }
            this.clientCertificateDetails = clientCertificateDetails;
            return this;
        }
        public Builder clientCertificateDetails(GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail... clientCertificateDetails) {
            return clientCertificateDetails(List.of(clientCertificateDetails));
        }
        @CustomType.Setter
        public Builder configType(String configType) {
            if (configType == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "configType");
            }
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfigurations(List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations) {
            if (dnsConfigurations == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "dnsConfigurations");
            }
            this.dnsConfigurations = dnsConfigurations;
            return this;
        }
        public Builder dnsConfigurations(GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration... dnsConfigurations) {
            return dnsConfigurations(List.of(dnsConfigurations));
        }
        @CustomType.Setter
        public Builder isCertificateValidationEnabled(Boolean isCertificateValidationEnabled) {
            if (isCertificateValidationEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "isCertificateValidationEnabled");
            }
            this.isCertificateValidationEnabled = isCertificateValidationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultSnapshotEnabled(Boolean isDefaultSnapshotEnabled) {
            if (isDefaultSnapshotEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "isDefaultSnapshotEnabled");
            }
            this.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isFailureRetried(Boolean isFailureRetried) {
            if (isFailureRetried == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "isFailureRetried");
            }
            this.isFailureRetried = isFailureRetried;
            return this;
        }
        @CustomType.Setter
        public Builder isRedirectionEnabled(Boolean isRedirectionEnabled) {
            if (isRedirectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "isRedirectionEnabled");
            }
            this.isRedirectionEnabled = isRedirectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder reqAuthenticationDetails(List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails) {
            if (reqAuthenticationDetails == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "reqAuthenticationDetails");
            }
            this.reqAuthenticationDetails = reqAuthenticationDetails;
            return this;
        }
        public Builder reqAuthenticationDetails(GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail... reqAuthenticationDetails) {
            return reqAuthenticationDetails(List.of(reqAuthenticationDetails));
        }
        @CustomType.Setter
        public Builder reqAuthenticationScheme(String reqAuthenticationScheme) {
            if (reqAuthenticationScheme == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "reqAuthenticationScheme");
            }
            this.reqAuthenticationScheme = reqAuthenticationScheme;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders) {
            if (requestHeaders == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "requestHeaders");
            }
            this.requestHeaders = requestHeaders;
            return this;
        }
        public Builder requestHeaders(GetMonitorsMonitorCollectionItemConfigurationRequestHeader... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }
        @CustomType.Setter
        public Builder requestMethod(String requestMethod) {
            if (requestMethod == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "requestMethod");
            }
            this.requestMethod = requestMethod;
            return this;
        }
        @CustomType.Setter
        public Builder requestPostBody(String requestPostBody) {
            if (requestPostBody == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "requestPostBody");
            }
            this.requestPostBody = requestPostBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestQueryParams(List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams) {
            if (requestQueryParams == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "requestQueryParams");
            }
            this.requestQueryParams = requestQueryParams;
            return this;
        }
        public Builder requestQueryParams(GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam... requestQueryParams) {
            return requestQueryParams(List.of(requestQueryParams));
        }
        @CustomType.Setter
        public Builder verifyResponseCodes(List<String> verifyResponseCodes) {
            if (verifyResponseCodes == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "verifyResponseCodes");
            }
            this.verifyResponseCodes = verifyResponseCodes;
            return this;
        }
        public Builder verifyResponseCodes(String... verifyResponseCodes) {
            return verifyResponseCodes(List.of(verifyResponseCodes));
        }
        @CustomType.Setter
        public Builder verifyResponseContent(String verifyResponseContent) {
            if (verifyResponseContent == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "verifyResponseContent");
            }
            this.verifyResponseContent = verifyResponseContent;
            return this;
        }
        @CustomType.Setter
        public Builder verifyTexts(List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts) {
            if (verifyTexts == null) {
              throw new MissingRequiredPropertyException("GetMonitorsMonitorCollectionItemConfiguration", "verifyTexts");
            }
            this.verifyTexts = verifyTexts;
            return this;
        }
        public Builder verifyTexts(GetMonitorsMonitorCollectionItemConfigurationVerifyText... verifyTexts) {
            return verifyTexts(List.of(verifyTexts));
        }
        public GetMonitorsMonitorCollectionItemConfiguration build() {
            final var _resultValue = new GetMonitorsMonitorCollectionItemConfiguration();
            _resultValue.clientCertificateDetails = clientCertificateDetails;
            _resultValue.configType = configType;
            _resultValue.dnsConfigurations = dnsConfigurations;
            _resultValue.isCertificateValidationEnabled = isCertificateValidationEnabled;
            _resultValue.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            _resultValue.isFailureRetried = isFailureRetried;
            _resultValue.isRedirectionEnabled = isRedirectionEnabled;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.reqAuthenticationDetails = reqAuthenticationDetails;
            _resultValue.reqAuthenticationScheme = reqAuthenticationScheme;
            _resultValue.requestHeaders = requestHeaders;
            _resultValue.requestMethod = requestMethod;
            _resultValue.requestPostBody = requestPostBody;
            _resultValue.requestQueryParams = requestQueryParams;
            _resultValue.verifyResponseCodes = verifyResponseCodes;
            _resultValue.verifyResponseContent = verifyResponseContent;
            _resultValue.verifyTexts = verifyTexts;
            return _resultValue;
        }
    }
}
