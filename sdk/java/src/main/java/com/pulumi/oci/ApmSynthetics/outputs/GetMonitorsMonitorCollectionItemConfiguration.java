// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeader;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam;
import com.pulumi.oci.ApmSynthetics.outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyText;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMonitorsMonitorCollectionItemConfiguration {
    /**
     * @return Details for client certificate.
     * 
     */
    private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails;
    /**
     * @return Type of configuration.
     * 
     */
    private @Nullable String configType;
    /**
     * @return Information about the DNS settings.
     * 
     */
    private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations;
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    private @Nullable Boolean isCertificateValidationEnabled;
    /**
     * @return If disabled, auto snapshots are not collected.
     * 
     */
    private @Nullable Boolean isDefaultSnapshotEnabled;
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    private @Nullable Boolean isFailureRetried;
    /**
     * @return If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    private @Nullable Boolean isRedirectionEnabled;
    /**
     * @return Details of the network configuration.
     * 
     */
    private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations;
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
    /**
     * @return Request HTTP authentication scheme.
     * 
     */
    private @Nullable String reqAuthenticationScheme;
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders;
    /**
     * @return Request HTTP method.
     * 
     */
    private @Nullable String requestMethod;
    /**
     * @return Request post body content.
     * 
     */
    private @Nullable String requestPostBody;
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams;
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    private @Nullable List<String> verifyResponseCodes;
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    private @Nullable String verifyResponseContent;
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts;

    private GetMonitorsMonitorCollectionItemConfiguration() {}
    /**
     * @return Details for client certificate.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails() {
        return this.clientCertificateDetails == null ? List.of() : this.clientCertificateDetails;
    }
    /**
     * @return Type of configuration.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    /**
     * @return Information about the DNS settings.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations() {
        return this.dnsConfigurations == null ? List.of() : this.dnsConfigurations;
    }
    /**
     * @return If certificate validation is enabled, then the call will fail in case of certification errors.
     * 
     */
    public Optional<Boolean> isCertificateValidationEnabled() {
        return Optional.ofNullable(this.isCertificateValidationEnabled);
    }
    /**
     * @return If disabled, auto snapshots are not collected.
     * 
     */
    public Optional<Boolean> isDefaultSnapshotEnabled() {
        return Optional.ofNullable(this.isDefaultSnapshotEnabled);
    }
    /**
     * @return If isFailureRetried is enabled, then a failed call will be retried.
     * 
     */
    public Optional<Boolean> isFailureRetried() {
        return Optional.ofNullable(this.isFailureRetried);
    }
    /**
     * @return If redirection is enabled, then redirects will be allowed while accessing target URL.
     * 
     */
    public Optional<Boolean> isRedirectionEnabled() {
        return Optional.ofNullable(this.isRedirectionEnabled);
    }
    /**
     * @return Details of the network configuration.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations == null ? List.of() : this.networkConfigurations;
    }
    /**
     * @return Details for request HTTP authentication.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails() {
        return this.reqAuthenticationDetails == null ? List.of() : this.reqAuthenticationDetails;
    }
    /**
     * @return Request HTTP authentication scheme.
     * 
     */
    public Optional<String> reqAuthenticationScheme() {
        return Optional.ofNullable(this.reqAuthenticationScheme);
    }
    /**
     * @return List of request headers. Example: `[{&#34;headerName&#34;: &#34;content-type&#34;, &#34;headerValue&#34;:&#34;json&#34;}]`
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders() {
        return this.requestHeaders == null ? List.of() : this.requestHeaders;
    }
    /**
     * @return Request HTTP method.
     * 
     */
    public Optional<String> requestMethod() {
        return Optional.ofNullable(this.requestMethod);
    }
    /**
     * @return Request post body content.
     * 
     */
    public Optional<String> requestPostBody() {
        return Optional.ofNullable(this.requestPostBody);
    }
    /**
     * @return List of request query params. Example: `[{&#34;paramName&#34;: &#34;sortOrder&#34;, &#34;paramValue&#34;: &#34;asc&#34;}]`
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams() {
        return this.requestQueryParams == null ? List.of() : this.requestQueryParams;
    }
    /**
     * @return Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
     * 
     */
    public List<String> verifyResponseCodes() {
        return this.verifyResponseCodes == null ? List.of() : this.verifyResponseCodes;
    }
    /**
     * @return Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
     * 
     */
    public Optional<String> verifyResponseContent() {
        return Optional.ofNullable(this.verifyResponseContent);
    }
    /**
     * @return Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
     * 
     */
    public List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts() {
        return this.verifyTexts == null ? List.of() : this.verifyTexts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorsMonitorCollectionItemConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails;
        private @Nullable String configType;
        private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations;
        private @Nullable Boolean isCertificateValidationEnabled;
        private @Nullable Boolean isDefaultSnapshotEnabled;
        private @Nullable Boolean isFailureRetried;
        private @Nullable Boolean isRedirectionEnabled;
        private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations;
        private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails;
        private @Nullable String reqAuthenticationScheme;
        private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders;
        private @Nullable String requestMethod;
        private @Nullable String requestPostBody;
        private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams;
        private @Nullable List<String> verifyResponseCodes;
        private @Nullable String verifyResponseContent;
        private @Nullable List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts;
        public Builder() {}
        public Builder(GetMonitorsMonitorCollectionItemConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificateDetails = defaults.clientCertificateDetails;
    	      this.configType = defaults.configType;
    	      this.dnsConfigurations = defaults.dnsConfigurations;
    	      this.isCertificateValidationEnabled = defaults.isCertificateValidationEnabled;
    	      this.isDefaultSnapshotEnabled = defaults.isDefaultSnapshotEnabled;
    	      this.isFailureRetried = defaults.isFailureRetried;
    	      this.isRedirectionEnabled = defaults.isRedirectionEnabled;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.reqAuthenticationDetails = defaults.reqAuthenticationDetails;
    	      this.reqAuthenticationScheme = defaults.reqAuthenticationScheme;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestPostBody = defaults.requestPostBody;
    	      this.requestQueryParams = defaults.requestQueryParams;
    	      this.verifyResponseCodes = defaults.verifyResponseCodes;
    	      this.verifyResponseContent = defaults.verifyResponseContent;
    	      this.verifyTexts = defaults.verifyTexts;
        }

        @CustomType.Setter
        public Builder clientCertificateDetails(@Nullable List<GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail> clientCertificateDetails) {
            this.clientCertificateDetails = clientCertificateDetails;
            return this;
        }
        public Builder clientCertificateDetails(GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetail... clientCertificateDetails) {
            return clientCertificateDetails(List.of(clientCertificateDetails));
        }
        @CustomType.Setter
        public Builder configType(@Nullable String configType) {
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfigurations(@Nullable List<GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration> dnsConfigurations) {
            this.dnsConfigurations = dnsConfigurations;
            return this;
        }
        public Builder dnsConfigurations(GetMonitorsMonitorCollectionItemConfigurationDnsConfiguration... dnsConfigurations) {
            return dnsConfigurations(List.of(dnsConfigurations));
        }
        @CustomType.Setter
        public Builder isCertificateValidationEnabled(@Nullable Boolean isCertificateValidationEnabled) {
            this.isCertificateValidationEnabled = isCertificateValidationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultSnapshotEnabled(@Nullable Boolean isDefaultSnapshotEnabled) {
            this.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isFailureRetried(@Nullable Boolean isFailureRetried) {
            this.isFailureRetried = isFailureRetried;
            return this;
        }
        @CustomType.Setter
        public Builder isRedirectionEnabled(@Nullable Boolean isRedirectionEnabled) {
            this.isRedirectionEnabled = isRedirectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(@Nullable List<GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration> networkConfigurations) {
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetMonitorsMonitorCollectionItemConfigurationNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder reqAuthenticationDetails(@Nullable List<GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail> reqAuthenticationDetails) {
            this.reqAuthenticationDetails = reqAuthenticationDetails;
            return this;
        }
        public Builder reqAuthenticationDetails(GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail... reqAuthenticationDetails) {
            return reqAuthenticationDetails(List.of(reqAuthenticationDetails));
        }
        @CustomType.Setter
        public Builder reqAuthenticationScheme(@Nullable String reqAuthenticationScheme) {
            this.reqAuthenticationScheme = reqAuthenticationScheme;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(@Nullable List<GetMonitorsMonitorCollectionItemConfigurationRequestHeader> requestHeaders) {
            this.requestHeaders = requestHeaders;
            return this;
        }
        public Builder requestHeaders(GetMonitorsMonitorCollectionItemConfigurationRequestHeader... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }
        @CustomType.Setter
        public Builder requestMethod(@Nullable String requestMethod) {
            this.requestMethod = requestMethod;
            return this;
        }
        @CustomType.Setter
        public Builder requestPostBody(@Nullable String requestPostBody) {
            this.requestPostBody = requestPostBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestQueryParams(@Nullable List<GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam> requestQueryParams) {
            this.requestQueryParams = requestQueryParams;
            return this;
        }
        public Builder requestQueryParams(GetMonitorsMonitorCollectionItemConfigurationRequestQueryParam... requestQueryParams) {
            return requestQueryParams(List.of(requestQueryParams));
        }
        @CustomType.Setter
        public Builder verifyResponseCodes(@Nullable List<String> verifyResponseCodes) {
            this.verifyResponseCodes = verifyResponseCodes;
            return this;
        }
        public Builder verifyResponseCodes(String... verifyResponseCodes) {
            return verifyResponseCodes(List.of(verifyResponseCodes));
        }
        @CustomType.Setter
        public Builder verifyResponseContent(@Nullable String verifyResponseContent) {
            this.verifyResponseContent = verifyResponseContent;
            return this;
        }
        @CustomType.Setter
        public Builder verifyTexts(@Nullable List<GetMonitorsMonitorCollectionItemConfigurationVerifyText> verifyTexts) {
            this.verifyTexts = verifyTexts;
            return this;
        }
        public Builder verifyTexts(GetMonitorsMonitorCollectionItemConfigurationVerifyText... verifyTexts) {
            return verifyTexts(List.of(verifyTexts));
        }
        public GetMonitorsMonitorCollectionItemConfiguration build() {
            final var o = new GetMonitorsMonitorCollectionItemConfiguration();
            o.clientCertificateDetails = clientCertificateDetails;
            o.configType = configType;
            o.dnsConfigurations = dnsConfigurations;
            o.isCertificateValidationEnabled = isCertificateValidationEnabled;
            o.isDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            o.isFailureRetried = isFailureRetried;
            o.isRedirectionEnabled = isRedirectionEnabled;
            o.networkConfigurations = networkConfigurations;
            o.reqAuthenticationDetails = reqAuthenticationDetails;
            o.reqAuthenticationScheme = reqAuthenticationScheme;
            o.requestHeaders = requestHeaders;
            o.requestMethod = requestMethod;
            o.requestPostBody = requestPostBody;
            o.requestQueryParams = requestQueryParams;
            o.verifyResponseCodes = verifyResponseCodes;
            o.verifyResponseContent = verifyResponseContent;
            o.verifyTexts = verifyTexts;
            return o;
        }
    }
}
