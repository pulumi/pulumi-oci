// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmSynthetics.outputs.GetScriptParameterScriptParameter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetScriptParameter {
    /**
     * @return If parameter value is default or overwritten.
     * 
     */
    private Boolean isOverwritten;
    /**
     * @return If the parameter value is secret and should be kept confidential, then set isSecret to true.
     * 
     */
    private Boolean isSecret;
    /**
     * @return Name of the parameter.
     * 
     */
    private String paramName;
    /**
     * @return Value of the parameter.
     * 
     */
    private String paramValue;
    /**
     * @return Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
     * 
     */
    private List<GetScriptParameterScriptParameter> scriptParameters;

    private GetScriptParameter() {}
    /**
     * @return If parameter value is default or overwritten.
     * 
     */
    public Boolean isOverwritten() {
        return this.isOverwritten;
    }
    /**
     * @return If the parameter value is secret and should be kept confidential, then set isSecret to true.
     * 
     */
    public Boolean isSecret() {
        return this.isSecret;
    }
    /**
     * @return Name of the parameter.
     * 
     */
    public String paramName() {
        return this.paramName;
    }
    /**
     * @return Value of the parameter.
     * 
     */
    public String paramValue() {
        return this.paramValue;
    }
    /**
     * @return Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
     * 
     */
    public List<GetScriptParameterScriptParameter> scriptParameters() {
        return this.scriptParameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScriptParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isOverwritten;
        private Boolean isSecret;
        private String paramName;
        private String paramValue;
        private List<GetScriptParameterScriptParameter> scriptParameters;
        public Builder() {}
        public Builder(GetScriptParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isOverwritten = defaults.isOverwritten;
    	      this.isSecret = defaults.isSecret;
    	      this.paramName = defaults.paramName;
    	      this.paramValue = defaults.paramValue;
    	      this.scriptParameters = defaults.scriptParameters;
        }

        @CustomType.Setter
        public Builder isOverwritten(Boolean isOverwritten) {
            if (isOverwritten == null) {
              throw new MissingRequiredPropertyException("GetScriptParameter", "isOverwritten");
            }
            this.isOverwritten = isOverwritten;
            return this;
        }
        @CustomType.Setter
        public Builder isSecret(Boolean isSecret) {
            if (isSecret == null) {
              throw new MissingRequiredPropertyException("GetScriptParameter", "isSecret");
            }
            this.isSecret = isSecret;
            return this;
        }
        @CustomType.Setter
        public Builder paramName(String paramName) {
            if (paramName == null) {
              throw new MissingRequiredPropertyException("GetScriptParameter", "paramName");
            }
            this.paramName = paramName;
            return this;
        }
        @CustomType.Setter
        public Builder paramValue(String paramValue) {
            if (paramValue == null) {
              throw new MissingRequiredPropertyException("GetScriptParameter", "paramValue");
            }
            this.paramValue = paramValue;
            return this;
        }
        @CustomType.Setter
        public Builder scriptParameters(List<GetScriptParameterScriptParameter> scriptParameters) {
            if (scriptParameters == null) {
              throw new MissingRequiredPropertyException("GetScriptParameter", "scriptParameters");
            }
            this.scriptParameters = scriptParameters;
            return this;
        }
        public Builder scriptParameters(GetScriptParameterScriptParameter... scriptParameters) {
            return scriptParameters(List.of(scriptParameters));
        }
        public GetScriptParameter build() {
            final var _resultValue = new GetScriptParameter();
            _resultValue.isOverwritten = isOverwritten;
            _resultValue.isSecret = isSecret;
            _resultValue.paramName = paramName;
            _resultValue.paramValue = paramValue;
            _resultValue.scriptParameters = scriptParameters;
            return _resultValue;
        }
    }
}
