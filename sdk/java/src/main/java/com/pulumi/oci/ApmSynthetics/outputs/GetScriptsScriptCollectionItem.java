// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmSynthetics.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmSynthetics.outputs.GetScriptsScriptCollectionItemMonitorStatusCountMap;
import com.pulumi.oci.ApmSynthetics.outputs.GetScriptsScriptCollectionItemParameter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetScriptsScriptCollectionItem {
    /**
     * @return The APM domain ID the request is intended for.
     * 
     */
    private String apmDomainId;
    /**
     * @return The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;OS&gt;isParamValueSecret(true/false)&lt;/OS&gt;&lt;/ORAP&gt;`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;/ORAP&gt;` With parameter name and value : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;/ORAP&gt;` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format. If the content type is PLAYWRIGHT_TS, then the content should be in TypeScript format.
     * 
     */
    private String content;
    /**
     * @return File name of the uploaded script content.
     * 
     */
    private String contentFileName;
    /**
     * @return Size of the script content.
     * 
     */
    private Integer contentSizeInBytes;
    /**
     * @return A filter to return only resources that match the content type given.
     * 
     */
    private String contentType;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only the resources that match the entire display name.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    private String id;
    /**
     * @return Details of the monitor count per state. Example: `{ &#34;total&#34; : 5, &#34;enabled&#34; : 3 , &#34;disabled&#34; : 2, &#34;invalid&#34; : 0 }`
     * 
     */
    private List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps;
    /**
     * @return List of script parameters. Example: `[{&#34;scriptParameter&#34;: {&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;, &#34;isSecret&#34;: false}, &#34;isOverwritten&#34;: false}]`
     * 
     */
    private List<GetScriptsScriptCollectionItemParameter> parameters;
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    private String timeUpdated;
    /**
     * @return The time the script was uploaded.
     * 
     */
    private String timeUploaded;

    private GetScriptsScriptCollectionItem() {}
    /**
     * @return The APM domain ID the request is intended for.
     * 
     */
    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;OS&gt;isParamValueSecret(true/false)&lt;/OS&gt;&lt;/ORAP&gt;`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;/ORAP&gt;` With parameter name and value : `&lt;ORAP&gt;&lt;ON&gt;param name&lt;/ON&gt;&lt;OV&gt;param value&lt;/OV&gt;&lt;/ORAP&gt;` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format. If the content type is PLAYWRIGHT_TS, then the content should be in TypeScript format.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return File name of the uploaded script content.
     * 
     */
    public String contentFileName() {
        return this.contentFileName;
    }
    /**
     * @return Size of the script content.
     * 
     */
    public Integer contentSizeInBytes() {
        return this.contentSizeInBytes;
    }
    /**
     * @return A filter to return only resources that match the content type given.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only the resources that match the entire display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details of the monitor count per state. Example: `{ &#34;total&#34; : 5, &#34;enabled&#34; : 3 , &#34;disabled&#34; : 2, &#34;invalid&#34; : 0 }`
     * 
     */
    public List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps() {
        return this.monitorStatusCountMaps;
    }
    /**
     * @return List of script parameters. Example: `[{&#34;scriptParameter&#34;: {&#34;paramName&#34;: &#34;userid&#34;, &#34;paramValue&#34;:&#34;testuser&#34;, &#34;isSecret&#34;: false}, &#34;isOverwritten&#34;: false}]`
     * 
     */
    public List<GetScriptsScriptCollectionItemParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The time the script was uploaded.
     * 
     */
    public String timeUploaded() {
        return this.timeUploaded;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScriptsScriptCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apmDomainId;
        private String content;
        private String contentFileName;
        private Integer contentSizeInBytes;
        private String contentType;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps;
        private List<GetScriptsScriptCollectionItemParameter> parameters;
        private String timeCreated;
        private String timeUpdated;
        private String timeUploaded;
        public Builder() {}
        public Builder(GetScriptsScriptCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.content = defaults.content;
    	      this.contentFileName = defaults.contentFileName;
    	      this.contentSizeInBytes = defaults.contentSizeInBytes;
    	      this.contentType = defaults.contentType;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.monitorStatusCountMaps = defaults.monitorStatusCountMaps;
    	      this.parameters = defaults.parameters;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeUploaded = defaults.timeUploaded;
        }

        @CustomType.Setter
        public Builder apmDomainId(String apmDomainId) {
            if (apmDomainId == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "apmDomainId");
            }
            this.apmDomainId = apmDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentFileName(String contentFileName) {
            if (contentFileName == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "contentFileName");
            }
            this.contentFileName = contentFileName;
            return this;
        }
        @CustomType.Setter
        public Builder contentSizeInBytes(Integer contentSizeInBytes) {
            if (contentSizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "contentSizeInBytes");
            }
            this.contentSizeInBytes = contentSizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder monitorStatusCountMaps(List<GetScriptsScriptCollectionItemMonitorStatusCountMap> monitorStatusCountMaps) {
            if (monitorStatusCountMaps == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "monitorStatusCountMaps");
            }
            this.monitorStatusCountMaps = monitorStatusCountMaps;
            return this;
        }
        public Builder monitorStatusCountMaps(GetScriptsScriptCollectionItemMonitorStatusCountMap... monitorStatusCountMaps) {
            return monitorStatusCountMaps(List.of(monitorStatusCountMaps));
        }
        @CustomType.Setter
        public Builder parameters(List<GetScriptsScriptCollectionItemParameter> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(GetScriptsScriptCollectionItemParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUploaded(String timeUploaded) {
            if (timeUploaded == null) {
              throw new MissingRequiredPropertyException("GetScriptsScriptCollectionItem", "timeUploaded");
            }
            this.timeUploaded = timeUploaded;
            return this;
        }
        public GetScriptsScriptCollectionItem build() {
            final var _resultValue = new GetScriptsScriptCollectionItem();
            _resultValue.apmDomainId = apmDomainId;
            _resultValue.content = content;
            _resultValue.contentFileName = contentFileName;
            _resultValue.contentSizeInBytes = contentSizeInBytes;
            _resultValue.contentType = contentType;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.monitorStatusCountMaps = monitorStatusCountMaps;
            _resultValue.parameters = parameters;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.timeUploaded = timeUploaded;
            return _resultValue;
        }
    }
}
