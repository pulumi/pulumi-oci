// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTraceAggregatedSnapshotDataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTraceAggregatedSnapshotDataArgs Empty = new GetTraceAggregatedSnapshotDataArgs();

    /**
     * The APM Domain ID for the intended request.
     * 
     */
    @Import(name="apmDomainId", required=true)
    private Output<String> apmDomainId;

    /**
     * @return The APM Domain ID for the intended request.
     * 
     */
    public Output<String> apmDomainId() {
        return this.apmDomainId;
    }

    /**
     * Name of the server.
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return Name of the server.
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * Name associated with the service.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Name associated with the service.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Unique Application Performance Monitoring span identifier (spanId).
     * 
     */
    @Import(name="spanKey")
    private @Nullable Output<String> spanKey;

    /**
     * @return Unique Application Performance Monitoring span identifier (spanId).
     * 
     */
    public Optional<Output<String>> spanKey() {
        return Optional.ofNullable(this.spanKey);
    }

    /**
     * Name of the span associated with the trace.
     * 
     */
    @Import(name="spanName")
    private @Nullable Output<String> spanName;

    /**
     * @return Name of the span associated with the trace.
     * 
     */
    public Optional<Output<String>> spanName() {
        return Optional.ofNullable(this.spanName);
    }

    /**
     * Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    @Import(name="traceKey", required=true)
    private Output<String> traceKey;

    /**
     * @return Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    public Output<String> traceKey() {
        return this.traceKey;
    }

    private GetTraceAggregatedSnapshotDataArgs() {}

    private GetTraceAggregatedSnapshotDataArgs(GetTraceAggregatedSnapshotDataArgs $) {
        this.apmDomainId = $.apmDomainId;
        this.serverName = $.serverName;
        this.serviceName = $.serviceName;
        this.spanKey = $.spanKey;
        this.spanName = $.spanName;
        this.traceKey = $.traceKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTraceAggregatedSnapshotDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTraceAggregatedSnapshotDataArgs $;

        public Builder() {
            $ = new GetTraceAggregatedSnapshotDataArgs();
        }

        public Builder(GetTraceAggregatedSnapshotDataArgs defaults) {
            $ = new GetTraceAggregatedSnapshotDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apmDomainId The APM Domain ID for the intended request.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(Output<String> apmDomainId) {
            $.apmDomainId = apmDomainId;
            return this;
        }

        /**
         * @param apmDomainId The APM Domain ID for the intended request.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(String apmDomainId) {
            return apmDomainId(Output.of(apmDomainId));
        }

        /**
         * @param serverName Name of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName Name of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param serviceName Name associated with the service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Name associated with the service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param spanKey Unique Application Performance Monitoring span identifier (spanId).
         * 
         * @return builder
         * 
         */
        public Builder spanKey(@Nullable Output<String> spanKey) {
            $.spanKey = spanKey;
            return this;
        }

        /**
         * @param spanKey Unique Application Performance Monitoring span identifier (spanId).
         * 
         * @return builder
         * 
         */
        public Builder spanKey(String spanKey) {
            return spanKey(Output.of(spanKey));
        }

        /**
         * @param spanName Name of the span associated with the trace.
         * 
         * @return builder
         * 
         */
        public Builder spanName(@Nullable Output<String> spanName) {
            $.spanName = spanName;
            return this;
        }

        /**
         * @param spanName Name of the span associated with the trace.
         * 
         * @return builder
         * 
         */
        public Builder spanName(String spanName) {
            return spanName(Output.of(spanName));
        }

        /**
         * @param traceKey Unique Application Performance Monitoring trace identifier (traceId).
         * 
         * @return builder
         * 
         */
        public Builder traceKey(Output<String> traceKey) {
            $.traceKey = traceKey;
            return this;
        }

        /**
         * @param traceKey Unique Application Performance Monitoring trace identifier (traceId).
         * 
         * @return builder
         * 
         */
        public Builder traceKey(String traceKey) {
            return traceKey(Output.of(traceKey));
        }

        public GetTraceAggregatedSnapshotDataArgs build() {
            if ($.apmDomainId == null) {
                throw new MissingRequiredPropertyException("GetTraceAggregatedSnapshotDataArgs", "apmDomainId");
            }
            if ($.traceKey == null) {
                throw new MissingRequiredPropertyException("GetTraceAggregatedSnapshotDataArgs", "traceKey");
            }
            return $;
        }
    }

}
