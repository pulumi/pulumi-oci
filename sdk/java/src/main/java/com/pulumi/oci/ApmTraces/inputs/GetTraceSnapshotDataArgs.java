// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTraceSnapshotDataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTraceSnapshotDataArgs Empty = new GetTraceSnapshotDataArgs();

    /**
     * The APM Domain ID for the intended request.
     * 
     */
    @Import(name="apmDomainId", required=true)
    private Output<String> apmDomainId;

    /**
     * @return The APM Domain ID for the intended request.
     * 
     */
    public Output<String> apmDomainId() {
        return this.apmDomainId;
    }

    /**
     * If enabled, only span level details are sent.
     * 
     */
    @Import(name="isSummarized")
    private @Nullable Output<Boolean> isSummarized;

    /**
     * @return If enabled, only span level details are sent.
     * 
     */
    public Optional<Output<Boolean>> isSummarized() {
        return Optional.ofNullable(this.isSummarized);
    }

    /**
     * Epoch time of snapshot.
     * 
     */
    @Import(name="snapshotTime")
    private @Nullable Output<String> snapshotTime;

    /**
     * @return Epoch time of snapshot.
     * 
     */
    public Optional<Output<String>> snapshotTime() {
        return Optional.ofNullable(this.snapshotTime);
    }

    /**
     * Thread ID for which snapshots need to be retrieved. This identifier of a thread is a long positive number generated when a thread is created.
     * 
     */
    @Import(name="threadId")
    private @Nullable Output<String> threadId;

    /**
     * @return Thread ID for which snapshots need to be retrieved. This identifier of a thread is a long positive number generated when a thread is created.
     * 
     */
    public Optional<Output<String>> threadId() {
        return Optional.ofNullable(this.threadId);
    }

    /**
     * Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    @Import(name="traceKey", required=true)
    private Output<String> traceKey;

    /**
     * @return Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    public Output<String> traceKey() {
        return this.traceKey;
    }

    private GetTraceSnapshotDataArgs() {}

    private GetTraceSnapshotDataArgs(GetTraceSnapshotDataArgs $) {
        this.apmDomainId = $.apmDomainId;
        this.isSummarized = $.isSummarized;
        this.snapshotTime = $.snapshotTime;
        this.threadId = $.threadId;
        this.traceKey = $.traceKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTraceSnapshotDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTraceSnapshotDataArgs $;

        public Builder() {
            $ = new GetTraceSnapshotDataArgs();
        }

        public Builder(GetTraceSnapshotDataArgs defaults) {
            $ = new GetTraceSnapshotDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apmDomainId The APM Domain ID for the intended request.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(Output<String> apmDomainId) {
            $.apmDomainId = apmDomainId;
            return this;
        }

        /**
         * @param apmDomainId The APM Domain ID for the intended request.
         * 
         * @return builder
         * 
         */
        public Builder apmDomainId(String apmDomainId) {
            return apmDomainId(Output.of(apmDomainId));
        }

        /**
         * @param isSummarized If enabled, only span level details are sent.
         * 
         * @return builder
         * 
         */
        public Builder isSummarized(@Nullable Output<Boolean> isSummarized) {
            $.isSummarized = isSummarized;
            return this;
        }

        /**
         * @param isSummarized If enabled, only span level details are sent.
         * 
         * @return builder
         * 
         */
        public Builder isSummarized(Boolean isSummarized) {
            return isSummarized(Output.of(isSummarized));
        }

        /**
         * @param snapshotTime Epoch time of snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotTime(@Nullable Output<String> snapshotTime) {
            $.snapshotTime = snapshotTime;
            return this;
        }

        /**
         * @param snapshotTime Epoch time of snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotTime(String snapshotTime) {
            return snapshotTime(Output.of(snapshotTime));
        }

        /**
         * @param threadId Thread ID for which snapshots need to be retrieved. This identifier of a thread is a long positive number generated when a thread is created.
         * 
         * @return builder
         * 
         */
        public Builder threadId(@Nullable Output<String> threadId) {
            $.threadId = threadId;
            return this;
        }

        /**
         * @param threadId Thread ID for which snapshots need to be retrieved. This identifier of a thread is a long positive number generated when a thread is created.
         * 
         * @return builder
         * 
         */
        public Builder threadId(String threadId) {
            return threadId(Output.of(threadId));
        }

        /**
         * @param traceKey Unique Application Performance Monitoring trace identifier (traceId).
         * 
         * @return builder
         * 
         */
        public Builder traceKey(Output<String> traceKey) {
            $.traceKey = traceKey;
            return this;
        }

        /**
         * @param traceKey Unique Application Performance Monitoring trace identifier (traceId).
         * 
         * @return builder
         * 
         */
        public Builder traceKey(String traceKey) {
            return traceKey(Output.of(traceKey));
        }

        public GetTraceSnapshotDataArgs build() {
            if ($.apmDomainId == null) {
                throw new MissingRequiredPropertyException("GetTraceSnapshotDataArgs", "apmDomainId");
            }
            if ($.traceKey == null) {
                throw new MissingRequiredPropertyException("GetTraceSnapshotDataArgs", "traceKey");
            }
            return $;
        }
    }

}
