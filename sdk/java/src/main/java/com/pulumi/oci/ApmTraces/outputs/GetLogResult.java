// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmTraces.outputs.GetLogAttribute;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLogResult {
    private String apmDomainId;
    /**
     * @return Metadata about the attributes in the logs.
     * 
     */
    private Map<String,String> attributeMetadata;
    /**
     * @return List of attributes associated with the logs.
     * 
     */
    private List<GetLogAttribute> attributes;
    /**
     * @return Log body (Body).
     * 
     */
    private String body;
    /**
     * @return Name of the event.
     * 
     */
    private String eventName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier (logId) for the logKey.  Note that this field is defined as logKey in the API and it maps to the logId in Application Performance Monitoring.
     * 
     */
    private String logKey;
    /**
     * @return Full values for attributes that are too long to be stored as a log attribute (Overflow).
     * 
     */
    private String overflowAttributes;
    /**
     * @return Log Severity number (SeverityNumber).
     * 
     */
    private Integer severityNumber;
    /**
     * @return Log Severity text (SeverityText).  Also known as Log level.
     * 
     */
    private String severityText;
    /**
     * @return Unique identifier for the span (spanId) associated with this log.
     * 
     */
    private String spanKey;
    /**
     * @return Time that the log event occurred (CreatedTime).
     * 
     */
    private String timeCreated;
    private String timeLogEndedLessThan;
    private String timeLogStartedGreaterThanOrEqualTo;
    /**
     * @return Time that the log was received by apm (ObservedTime).
     * 
     */
    private String timeObserved;
    /**
     * @return Time used by the time picker (RecordedTime).  Either the timeCreated if present or the timeObserved.
     * 
     */
    private String timestamp;
    /**
     * @return Trace flags.
     * 
     */
    private Integer traceFlags;
    /**
     * @return Unique identifier for the trace (traceId) associated with this log.
     * 
     */
    private String traceKey;

    private GetLogResult() {}
    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return Metadata about the attributes in the logs.
     * 
     */
    public Map<String,String> attributeMetadata() {
        return this.attributeMetadata;
    }
    /**
     * @return List of attributes associated with the logs.
     * 
     */
    public List<GetLogAttribute> attributes() {
        return this.attributes;
    }
    /**
     * @return Log body (Body).
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return Name of the event.
     * 
     */
    public String eventName() {
        return this.eventName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier (logId) for the logKey.  Note that this field is defined as logKey in the API and it maps to the logId in Application Performance Monitoring.
     * 
     */
    public String logKey() {
        return this.logKey;
    }
    /**
     * @return Full values for attributes that are too long to be stored as a log attribute (Overflow).
     * 
     */
    public String overflowAttributes() {
        return this.overflowAttributes;
    }
    /**
     * @return Log Severity number (SeverityNumber).
     * 
     */
    public Integer severityNumber() {
        return this.severityNumber;
    }
    /**
     * @return Log Severity text (SeverityText).  Also known as Log level.
     * 
     */
    public String severityText() {
        return this.severityText;
    }
    /**
     * @return Unique identifier for the span (spanId) associated with this log.
     * 
     */
    public String spanKey() {
        return this.spanKey;
    }
    /**
     * @return Time that the log event occurred (CreatedTime).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public String timeLogEndedLessThan() {
        return this.timeLogEndedLessThan;
    }
    public String timeLogStartedGreaterThanOrEqualTo() {
        return this.timeLogStartedGreaterThanOrEqualTo;
    }
    /**
     * @return Time that the log was received by apm (ObservedTime).
     * 
     */
    public String timeObserved() {
        return this.timeObserved;
    }
    /**
     * @return Time used by the time picker (RecordedTime).  Either the timeCreated if present or the timeObserved.
     * 
     */
    public String timestamp() {
        return this.timestamp;
    }
    /**
     * @return Trace flags.
     * 
     */
    public Integer traceFlags() {
        return this.traceFlags;
    }
    /**
     * @return Unique identifier for the trace (traceId) associated with this log.
     * 
     */
    public String traceKey() {
        return this.traceKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLogResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apmDomainId;
        private Map<String,String> attributeMetadata;
        private List<GetLogAttribute> attributes;
        private String body;
        private String eventName;
        private String id;
        private String logKey;
        private String overflowAttributes;
        private Integer severityNumber;
        private String severityText;
        private String spanKey;
        private String timeCreated;
        private String timeLogEndedLessThan;
        private String timeLogStartedGreaterThanOrEqualTo;
        private String timeObserved;
        private String timestamp;
        private Integer traceFlags;
        private String traceKey;
        public Builder() {}
        public Builder(GetLogResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.attributeMetadata = defaults.attributeMetadata;
    	      this.attributes = defaults.attributes;
    	      this.body = defaults.body;
    	      this.eventName = defaults.eventName;
    	      this.id = defaults.id;
    	      this.logKey = defaults.logKey;
    	      this.overflowAttributes = defaults.overflowAttributes;
    	      this.severityNumber = defaults.severityNumber;
    	      this.severityText = defaults.severityText;
    	      this.spanKey = defaults.spanKey;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLogEndedLessThan = defaults.timeLogEndedLessThan;
    	      this.timeLogStartedGreaterThanOrEqualTo = defaults.timeLogStartedGreaterThanOrEqualTo;
    	      this.timeObserved = defaults.timeObserved;
    	      this.timestamp = defaults.timestamp;
    	      this.traceFlags = defaults.traceFlags;
    	      this.traceKey = defaults.traceKey;
        }

        @CustomType.Setter
        public Builder apmDomainId(String apmDomainId) {
            if (apmDomainId == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "apmDomainId");
            }
            this.apmDomainId = apmDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder attributeMetadata(Map<String,String> attributeMetadata) {
            if (attributeMetadata == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "attributeMetadata");
            }
            this.attributeMetadata = attributeMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder attributes(List<GetLogAttribute> attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        public Builder attributes(GetLogAttribute... attributes) {
            return attributes(List.of(attributes));
        }
        @CustomType.Setter
        public Builder body(String body) {
            if (body == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "body");
            }
            this.body = body;
            return this;
        }
        @CustomType.Setter
        public Builder eventName(String eventName) {
            if (eventName == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "eventName");
            }
            this.eventName = eventName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logKey(String logKey) {
            if (logKey == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "logKey");
            }
            this.logKey = logKey;
            return this;
        }
        @CustomType.Setter
        public Builder overflowAttributes(String overflowAttributes) {
            if (overflowAttributes == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "overflowAttributes");
            }
            this.overflowAttributes = overflowAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder severityNumber(Integer severityNumber) {
            if (severityNumber == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "severityNumber");
            }
            this.severityNumber = severityNumber;
            return this;
        }
        @CustomType.Setter
        public Builder severityText(String severityText) {
            if (severityText == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "severityText");
            }
            this.severityText = severityText;
            return this;
        }
        @CustomType.Setter
        public Builder spanKey(String spanKey) {
            if (spanKey == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "spanKey");
            }
            this.spanKey = spanKey;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLogEndedLessThan(String timeLogEndedLessThan) {
            if (timeLogEndedLessThan == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "timeLogEndedLessThan");
            }
            this.timeLogEndedLessThan = timeLogEndedLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder timeLogStartedGreaterThanOrEqualTo(String timeLogStartedGreaterThanOrEqualTo) {
            if (timeLogStartedGreaterThanOrEqualTo == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "timeLogStartedGreaterThanOrEqualTo");
            }
            this.timeLogStartedGreaterThanOrEqualTo = timeLogStartedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeObserved(String timeObserved) {
            if (timeObserved == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "timeObserved");
            }
            this.timeObserved = timeObserved;
            return this;
        }
        @CustomType.Setter
        public Builder timestamp(String timestamp) {
            if (timestamp == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "timestamp");
            }
            this.timestamp = timestamp;
            return this;
        }
        @CustomType.Setter
        public Builder traceFlags(Integer traceFlags) {
            if (traceFlags == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "traceFlags");
            }
            this.traceFlags = traceFlags;
            return this;
        }
        @CustomType.Setter
        public Builder traceKey(String traceKey) {
            if (traceKey == null) {
              throw new MissingRequiredPropertyException("GetLogResult", "traceKey");
            }
            this.traceKey = traceKey;
            return this;
        }
        public GetLogResult build() {
            final var _resultValue = new GetLogResult();
            _resultValue.apmDomainId = apmDomainId;
            _resultValue.attributeMetadata = attributeMetadata;
            _resultValue.attributes = attributes;
            _resultValue.body = body;
            _resultValue.eventName = eventName;
            _resultValue.id = id;
            _resultValue.logKey = logKey;
            _resultValue.overflowAttributes = overflowAttributes;
            _resultValue.severityNumber = severityNumber;
            _resultValue.severityText = severityText;
            _resultValue.spanKey = spanKey;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLogEndedLessThan = timeLogEndedLessThan;
            _resultValue.timeLogStartedGreaterThanOrEqualTo = timeLogStartedGreaterThanOrEqualTo;
            _resultValue.timeObserved = timeObserved;
            _resultValue.timestamp = timestamp;
            _resultValue.traceFlags = traceFlags;
            _resultValue.traceKey = traceKey;
            return _resultValue;
        }
    }
}
