// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ApmTraces.outputs.GetTraceServiceSummary;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpan;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpanSummary;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTraceResult {
    private String apmDomainId;
    /**
     * @return The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
     * 
     */
    private @Nullable Integer errorSpanCount;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Boolean flag that indicates whether the trace has an error.
     * 
     */
    private @Nullable Boolean isFault;
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    private @Nullable String key;
    /**
     * @return Time taken for the root span operation to complete in milliseconds.
     * 
     */
    private @Nullable Integer rootSpanDurationInMs;
    /**
     * @return Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
     * 
     */
    private @Nullable String rootSpanOperationName;
    /**
     * @return Service associated with the trace.
     * 
     */
    private @Nullable String rootSpanServiceName;
    /**
     * @return A summary of the spans by service.
     * 
     */
    private @Nullable List<GetTraceServiceSummary> serviceSummaries;
    /**
     * @return The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
     * 
     */
    private @Nullable Integer spanCount;
    /**
     * @return Summary of the information pertaining to the spans in the trace window that is being queried.
     * 
     */
    private @Nullable List<GetTraceSpanSummary> spanSummaries;
    /**
     * @return An array of spans in the trace.
     * 
     */
    private @Nullable List<GetTraceSpan> spans;
    /**
     * @return Start time of the earliest span in the span collection.
     * 
     */
    private @Nullable String timeEarliestSpanStarted;
    /**
     * @return End time of the span that most recently ended in the span collection.
     * 
     */
    private @Nullable String timeLatestSpanEnded;
    /**
     * @return End time of the root span for the span collection.
     * 
     */
    private @Nullable String timeRootSpanEnded;
    /**
     * @return Start time of the root span for the span collection.
     * 
     */
    private @Nullable String timeRootSpanStarted;
    /**
     * @return Time between the start of the earliest span and the end of the most recent span in milliseconds.
     * 
     */
    private @Nullable Integer traceDurationInMs;
    /**
     * @return Error code of the trace.
     * 
     */
    private @Nullable String traceErrorCode;
    /**
     * @return Error type of the trace.
     * 
     */
    private @Nullable String traceErrorType;
    /**
     * @return Unique identifier for the trace.
     * 
     */
    private String traceKey;
    /**
     * @return The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
     * 
     */
    private @Nullable String traceStatus;

    private GetTraceResult() {}
    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
     * 
     */
    public Optional<Integer> errorSpanCount() {
        return Optional.ofNullable(this.errorSpanCount);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Boolean flag that indicates whether the trace has an error.
     * 
     */
    public Optional<Boolean> isFault() {
        return Optional.ofNullable(this.isFault);
    }
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Time taken for the root span operation to complete in milliseconds.
     * 
     */
    public Optional<Integer> rootSpanDurationInMs() {
        return Optional.ofNullable(this.rootSpanDurationInMs);
    }
    /**
     * @return Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
     * 
     */
    public Optional<String> rootSpanOperationName() {
        return Optional.ofNullable(this.rootSpanOperationName);
    }
    /**
     * @return Service associated with the trace.
     * 
     */
    public Optional<String> rootSpanServiceName() {
        return Optional.ofNullable(this.rootSpanServiceName);
    }
    /**
     * @return A summary of the spans by service.
     * 
     */
    public List<GetTraceServiceSummary> serviceSummaries() {
        return this.serviceSummaries == null ? List.of() : this.serviceSummaries;
    }
    /**
     * @return The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
     * 
     */
    public Optional<Integer> spanCount() {
        return Optional.ofNullable(this.spanCount);
    }
    /**
     * @return Summary of the information pertaining to the spans in the trace window that is being queried.
     * 
     */
    public List<GetTraceSpanSummary> spanSummaries() {
        return this.spanSummaries == null ? List.of() : this.spanSummaries;
    }
    /**
     * @return An array of spans in the trace.
     * 
     */
    public List<GetTraceSpan> spans() {
        return this.spans == null ? List.of() : this.spans;
    }
    /**
     * @return Start time of the earliest span in the span collection.
     * 
     */
    public Optional<String> timeEarliestSpanStarted() {
        return Optional.ofNullable(this.timeEarliestSpanStarted);
    }
    /**
     * @return End time of the span that most recently ended in the span collection.
     * 
     */
    public Optional<String> timeLatestSpanEnded() {
        return Optional.ofNullable(this.timeLatestSpanEnded);
    }
    /**
     * @return End time of the root span for the span collection.
     * 
     */
    public Optional<String> timeRootSpanEnded() {
        return Optional.ofNullable(this.timeRootSpanEnded);
    }
    /**
     * @return Start time of the root span for the span collection.
     * 
     */
    public Optional<String> timeRootSpanStarted() {
        return Optional.ofNullable(this.timeRootSpanStarted);
    }
    /**
     * @return Time between the start of the earliest span and the end of the most recent span in milliseconds.
     * 
     */
    public Optional<Integer> traceDurationInMs() {
        return Optional.ofNullable(this.traceDurationInMs);
    }
    /**
     * @return Error code of the trace.
     * 
     */
    public Optional<String> traceErrorCode() {
        return Optional.ofNullable(this.traceErrorCode);
    }
    /**
     * @return Error type of the trace.
     * 
     */
    public Optional<String> traceErrorType() {
        return Optional.ofNullable(this.traceErrorType);
    }
    /**
     * @return Unique identifier for the trace.
     * 
     */
    public String traceKey() {
        return this.traceKey;
    }
    /**
     * @return The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
     * 
     */
    public Optional<String> traceStatus() {
        return Optional.ofNullable(this.traceStatus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTraceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apmDomainId;
        private @Nullable Integer errorSpanCount;
        private @Nullable String id;
        private @Nullable Boolean isFault;
        private @Nullable String key;
        private @Nullable Integer rootSpanDurationInMs;
        private @Nullable String rootSpanOperationName;
        private @Nullable String rootSpanServiceName;
        private @Nullable List<GetTraceServiceSummary> serviceSummaries;
        private @Nullable Integer spanCount;
        private @Nullable List<GetTraceSpanSummary> spanSummaries;
        private @Nullable List<GetTraceSpan> spans;
        private @Nullable String timeEarliestSpanStarted;
        private @Nullable String timeLatestSpanEnded;
        private @Nullable String timeRootSpanEnded;
        private @Nullable String timeRootSpanStarted;
        private @Nullable Integer traceDurationInMs;
        private @Nullable String traceErrorCode;
        private @Nullable String traceErrorType;
        private String traceKey;
        private @Nullable String traceStatus;
        public Builder() {}
        public Builder(GetTraceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.errorSpanCount = defaults.errorSpanCount;
    	      this.id = defaults.id;
    	      this.isFault = defaults.isFault;
    	      this.key = defaults.key;
    	      this.rootSpanDurationInMs = defaults.rootSpanDurationInMs;
    	      this.rootSpanOperationName = defaults.rootSpanOperationName;
    	      this.rootSpanServiceName = defaults.rootSpanServiceName;
    	      this.serviceSummaries = defaults.serviceSummaries;
    	      this.spanCount = defaults.spanCount;
    	      this.spanSummaries = defaults.spanSummaries;
    	      this.spans = defaults.spans;
    	      this.timeEarliestSpanStarted = defaults.timeEarliestSpanStarted;
    	      this.timeLatestSpanEnded = defaults.timeLatestSpanEnded;
    	      this.timeRootSpanEnded = defaults.timeRootSpanEnded;
    	      this.timeRootSpanStarted = defaults.timeRootSpanStarted;
    	      this.traceDurationInMs = defaults.traceDurationInMs;
    	      this.traceErrorCode = defaults.traceErrorCode;
    	      this.traceErrorType = defaults.traceErrorType;
    	      this.traceKey = defaults.traceKey;
    	      this.traceStatus = defaults.traceStatus;
        }

        @CustomType.Setter
        public Builder apmDomainId(String apmDomainId) {
            this.apmDomainId = Objects.requireNonNull(apmDomainId);
            return this;
        }
        @CustomType.Setter
        public Builder errorSpanCount(@Nullable Integer errorSpanCount) {
            this.errorSpanCount = errorSpanCount;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isFault(@Nullable Boolean isFault) {
            this.isFault = isFault;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder rootSpanDurationInMs(@Nullable Integer rootSpanDurationInMs) {
            this.rootSpanDurationInMs = rootSpanDurationInMs;
            return this;
        }
        @CustomType.Setter
        public Builder rootSpanOperationName(@Nullable String rootSpanOperationName) {
            this.rootSpanOperationName = rootSpanOperationName;
            return this;
        }
        @CustomType.Setter
        public Builder rootSpanServiceName(@Nullable String rootSpanServiceName) {
            this.rootSpanServiceName = rootSpanServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceSummaries(@Nullable List<GetTraceServiceSummary> serviceSummaries) {
            this.serviceSummaries = serviceSummaries;
            return this;
        }
        public Builder serviceSummaries(GetTraceServiceSummary... serviceSummaries) {
            return serviceSummaries(List.of(serviceSummaries));
        }
        @CustomType.Setter
        public Builder spanCount(@Nullable Integer spanCount) {
            this.spanCount = spanCount;
            return this;
        }
        @CustomType.Setter
        public Builder spanSummaries(@Nullable List<GetTraceSpanSummary> spanSummaries) {
            this.spanSummaries = spanSummaries;
            return this;
        }
        public Builder spanSummaries(GetTraceSpanSummary... spanSummaries) {
            return spanSummaries(List.of(spanSummaries));
        }
        @CustomType.Setter
        public Builder spans(@Nullable List<GetTraceSpan> spans) {
            this.spans = spans;
            return this;
        }
        public Builder spans(GetTraceSpan... spans) {
            return spans(List.of(spans));
        }
        @CustomType.Setter
        public Builder timeEarliestSpanStarted(@Nullable String timeEarliestSpanStarted) {
            this.timeEarliestSpanStarted = timeEarliestSpanStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeLatestSpanEnded(@Nullable String timeLatestSpanEnded) {
            this.timeLatestSpanEnded = timeLatestSpanEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeRootSpanEnded(@Nullable String timeRootSpanEnded) {
            this.timeRootSpanEnded = timeRootSpanEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeRootSpanStarted(@Nullable String timeRootSpanStarted) {
            this.timeRootSpanStarted = timeRootSpanStarted;
            return this;
        }
        @CustomType.Setter
        public Builder traceDurationInMs(@Nullable Integer traceDurationInMs) {
            this.traceDurationInMs = traceDurationInMs;
            return this;
        }
        @CustomType.Setter
        public Builder traceErrorCode(@Nullable String traceErrorCode) {
            this.traceErrorCode = traceErrorCode;
            return this;
        }
        @CustomType.Setter
        public Builder traceErrorType(@Nullable String traceErrorType) {
            this.traceErrorType = traceErrorType;
            return this;
        }
        @CustomType.Setter
        public Builder traceKey(String traceKey) {
            this.traceKey = Objects.requireNonNull(traceKey);
            return this;
        }
        @CustomType.Setter
        public Builder traceStatus(@Nullable String traceStatus) {
            this.traceStatus = traceStatus;
            return this;
        }
        public GetTraceResult build() {
            final var o = new GetTraceResult();
            o.apmDomainId = apmDomainId;
            o.errorSpanCount = errorSpanCount;
            o.id = id;
            o.isFault = isFault;
            o.key = key;
            o.rootSpanDurationInMs = rootSpanDurationInMs;
            o.rootSpanOperationName = rootSpanOperationName;
            o.rootSpanServiceName = rootSpanServiceName;
            o.serviceSummaries = serviceSummaries;
            o.spanCount = spanCount;
            o.spanSummaries = spanSummaries;
            o.spans = spans;
            o.timeEarliestSpanStarted = timeEarliestSpanStarted;
            o.timeLatestSpanEnded = timeLatestSpanEnded;
            o.timeRootSpanEnded = timeRootSpanEnded;
            o.timeRootSpanStarted = timeRootSpanStarted;
            o.traceDurationInMs = traceDurationInMs;
            o.traceErrorCode = traceErrorCode;
            o.traceErrorType = traceErrorType;
            o.traceKey = traceKey;
            o.traceStatus = traceStatus;
            return o;
        }
    }
}
