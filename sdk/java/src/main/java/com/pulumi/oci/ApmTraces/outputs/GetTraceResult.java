// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmTraces.outputs.GetTraceServiceSummary;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpan;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpanSummary;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTraceResult {
    private String apmDomainId;
    /**
     * @return The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
     * 
     */
    private Integer errorSpanCount;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Boolean flag that indicates whether the trace has an error.
     * 
     */
    private Boolean isFault;
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    private String key;
    /**
     * @return Time taken for the root span operation to complete in milliseconds.
     * 
     */
    private Integer rootSpanDurationInMs;
    /**
     * @return Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
     * 
     */
    private String rootSpanOperationName;
    /**
     * @return Service associated with the trace.
     * 
     */
    private String rootSpanServiceName;
    /**
     * @return A summary of the spans by service.
     * 
     */
    private List<GetTraceServiceSummary> serviceSummaries;
    /**
     * @return Source of span (spans, syn_spans).
     * 
     */
    private String sourceName;
    /**
     * @return The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
     * 
     */
    private Integer spanCount;
    /**
     * @return Summary of the information pertaining to the spans in the trace window that is being queried.
     * 
     */
    private List<GetTraceSpanSummary> spanSummaries;
    /**
     * @return An array of spans in the trace.
     * 
     */
    private List<GetTraceSpan> spans;
    /**
     * @return Start time of the earliest span in the span collection.
     * 
     */
    private String timeEarliestSpanStarted;
    /**
     * @return End time of the span that most recently ended in the span collection.
     * 
     */
    private String timeLatestSpanEnded;
    /**
     * @return End time of the root span for the span collection.
     * 
     */
    private String timeRootSpanEnded;
    /**
     * @return Start time of the root span for the span collection.
     * 
     */
    private String timeRootSpanStarted;
    private @Nullable String timeTraceStartedGreaterThanOrEqualTo;
    private @Nullable String timeTraceStartedLessThan;
    /**
     * @return Time between the start of the earliest span and the end of the most recent span in milliseconds.
     * 
     */
    private Integer traceDurationInMs;
    /**
     * @return Error code of the trace.
     * 
     */
    private String traceErrorCode;
    /**
     * @return Error type of the trace.
     * 
     */
    private String traceErrorType;
    /**
     * @return Unique identifier for the trace.
     * 
     */
    private String traceKey;
    private @Nullable String traceNamespace;
    /**
     * @return The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
     * 
     */
    private String traceStatus;

    private GetTraceResult() {}
    public String apmDomainId() {
        return this.apmDomainId;
    }
    /**
     * @return The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
     * 
     */
    public Integer errorSpanCount() {
        return this.errorSpanCount;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Boolean flag that indicates whether the trace has an error.
     * 
     */
    public Boolean isFault() {
        return this.isFault;
    }
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Time taken for the root span operation to complete in milliseconds.
     * 
     */
    public Integer rootSpanDurationInMs() {
        return this.rootSpanDurationInMs;
    }
    /**
     * @return Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
     * 
     */
    public String rootSpanOperationName() {
        return this.rootSpanOperationName;
    }
    /**
     * @return Service associated with the trace.
     * 
     */
    public String rootSpanServiceName() {
        return this.rootSpanServiceName;
    }
    /**
     * @return A summary of the spans by service.
     * 
     */
    public List<GetTraceServiceSummary> serviceSummaries() {
        return this.serviceSummaries;
    }
    /**
     * @return Source of span (spans, syn_spans).
     * 
     */
    public String sourceName() {
        return this.sourceName;
    }
    /**
     * @return The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
     * 
     */
    public Integer spanCount() {
        return this.spanCount;
    }
    /**
     * @return Summary of the information pertaining to the spans in the trace window that is being queried.
     * 
     */
    public List<GetTraceSpanSummary> spanSummaries() {
        return this.spanSummaries;
    }
    /**
     * @return An array of spans in the trace.
     * 
     */
    public List<GetTraceSpan> spans() {
        return this.spans;
    }
    /**
     * @return Start time of the earliest span in the span collection.
     * 
     */
    public String timeEarliestSpanStarted() {
        return this.timeEarliestSpanStarted;
    }
    /**
     * @return End time of the span that most recently ended in the span collection.
     * 
     */
    public String timeLatestSpanEnded() {
        return this.timeLatestSpanEnded;
    }
    /**
     * @return End time of the root span for the span collection.
     * 
     */
    public String timeRootSpanEnded() {
        return this.timeRootSpanEnded;
    }
    /**
     * @return Start time of the root span for the span collection.
     * 
     */
    public String timeRootSpanStarted() {
        return this.timeRootSpanStarted;
    }
    public Optional<String> timeTraceStartedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeTraceStartedGreaterThanOrEqualTo);
    }
    public Optional<String> timeTraceStartedLessThan() {
        return Optional.ofNullable(this.timeTraceStartedLessThan);
    }
    /**
     * @return Time between the start of the earliest span and the end of the most recent span in milliseconds.
     * 
     */
    public Integer traceDurationInMs() {
        return this.traceDurationInMs;
    }
    /**
     * @return Error code of the trace.
     * 
     */
    public String traceErrorCode() {
        return this.traceErrorCode;
    }
    /**
     * @return Error type of the trace.
     * 
     */
    public String traceErrorType() {
        return this.traceErrorType;
    }
    /**
     * @return Unique identifier for the trace.
     * 
     */
    public String traceKey() {
        return this.traceKey;
    }
    public Optional<String> traceNamespace() {
        return Optional.ofNullable(this.traceNamespace);
    }
    /**
     * @return The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
     * 
     */
    public String traceStatus() {
        return this.traceStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTraceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apmDomainId;
        private Integer errorSpanCount;
        private String id;
        private Boolean isFault;
        private String key;
        private Integer rootSpanDurationInMs;
        private String rootSpanOperationName;
        private String rootSpanServiceName;
        private List<GetTraceServiceSummary> serviceSummaries;
        private String sourceName;
        private Integer spanCount;
        private List<GetTraceSpanSummary> spanSummaries;
        private List<GetTraceSpan> spans;
        private String timeEarliestSpanStarted;
        private String timeLatestSpanEnded;
        private String timeRootSpanEnded;
        private String timeRootSpanStarted;
        private @Nullable String timeTraceStartedGreaterThanOrEqualTo;
        private @Nullable String timeTraceStartedLessThan;
        private Integer traceDurationInMs;
        private String traceErrorCode;
        private String traceErrorType;
        private String traceKey;
        private @Nullable String traceNamespace;
        private String traceStatus;
        public Builder() {}
        public Builder(GetTraceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apmDomainId = defaults.apmDomainId;
    	      this.errorSpanCount = defaults.errorSpanCount;
    	      this.id = defaults.id;
    	      this.isFault = defaults.isFault;
    	      this.key = defaults.key;
    	      this.rootSpanDurationInMs = defaults.rootSpanDurationInMs;
    	      this.rootSpanOperationName = defaults.rootSpanOperationName;
    	      this.rootSpanServiceName = defaults.rootSpanServiceName;
    	      this.serviceSummaries = defaults.serviceSummaries;
    	      this.sourceName = defaults.sourceName;
    	      this.spanCount = defaults.spanCount;
    	      this.spanSummaries = defaults.spanSummaries;
    	      this.spans = defaults.spans;
    	      this.timeEarliestSpanStarted = defaults.timeEarliestSpanStarted;
    	      this.timeLatestSpanEnded = defaults.timeLatestSpanEnded;
    	      this.timeRootSpanEnded = defaults.timeRootSpanEnded;
    	      this.timeRootSpanStarted = defaults.timeRootSpanStarted;
    	      this.timeTraceStartedGreaterThanOrEqualTo = defaults.timeTraceStartedGreaterThanOrEqualTo;
    	      this.timeTraceStartedLessThan = defaults.timeTraceStartedLessThan;
    	      this.traceDurationInMs = defaults.traceDurationInMs;
    	      this.traceErrorCode = defaults.traceErrorCode;
    	      this.traceErrorType = defaults.traceErrorType;
    	      this.traceKey = defaults.traceKey;
    	      this.traceNamespace = defaults.traceNamespace;
    	      this.traceStatus = defaults.traceStatus;
        }

        @CustomType.Setter
        public Builder apmDomainId(String apmDomainId) {
            if (apmDomainId == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "apmDomainId");
            }
            this.apmDomainId = apmDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder errorSpanCount(Integer errorSpanCount) {
            if (errorSpanCount == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "errorSpanCount");
            }
            this.errorSpanCount = errorSpanCount;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isFault(Boolean isFault) {
            if (isFault == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "isFault");
            }
            this.isFault = isFault;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder rootSpanDurationInMs(Integer rootSpanDurationInMs) {
            if (rootSpanDurationInMs == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "rootSpanDurationInMs");
            }
            this.rootSpanDurationInMs = rootSpanDurationInMs;
            return this;
        }
        @CustomType.Setter
        public Builder rootSpanOperationName(String rootSpanOperationName) {
            if (rootSpanOperationName == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "rootSpanOperationName");
            }
            this.rootSpanOperationName = rootSpanOperationName;
            return this;
        }
        @CustomType.Setter
        public Builder rootSpanServiceName(String rootSpanServiceName) {
            if (rootSpanServiceName == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "rootSpanServiceName");
            }
            this.rootSpanServiceName = rootSpanServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceSummaries(List<GetTraceServiceSummary> serviceSummaries) {
            if (serviceSummaries == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "serviceSummaries");
            }
            this.serviceSummaries = serviceSummaries;
            return this;
        }
        public Builder serviceSummaries(GetTraceServiceSummary... serviceSummaries) {
            return serviceSummaries(List.of(serviceSummaries));
        }
        @CustomType.Setter
        public Builder sourceName(String sourceName) {
            if (sourceName == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "sourceName");
            }
            this.sourceName = sourceName;
            return this;
        }
        @CustomType.Setter
        public Builder spanCount(Integer spanCount) {
            if (spanCount == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "spanCount");
            }
            this.spanCount = spanCount;
            return this;
        }
        @CustomType.Setter
        public Builder spanSummaries(List<GetTraceSpanSummary> spanSummaries) {
            if (spanSummaries == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "spanSummaries");
            }
            this.spanSummaries = spanSummaries;
            return this;
        }
        public Builder spanSummaries(GetTraceSpanSummary... spanSummaries) {
            return spanSummaries(List.of(spanSummaries));
        }
        @CustomType.Setter
        public Builder spans(List<GetTraceSpan> spans) {
            if (spans == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "spans");
            }
            this.spans = spans;
            return this;
        }
        public Builder spans(GetTraceSpan... spans) {
            return spans(List.of(spans));
        }
        @CustomType.Setter
        public Builder timeEarliestSpanStarted(String timeEarliestSpanStarted) {
            if (timeEarliestSpanStarted == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "timeEarliestSpanStarted");
            }
            this.timeEarliestSpanStarted = timeEarliestSpanStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeLatestSpanEnded(String timeLatestSpanEnded) {
            if (timeLatestSpanEnded == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "timeLatestSpanEnded");
            }
            this.timeLatestSpanEnded = timeLatestSpanEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeRootSpanEnded(String timeRootSpanEnded) {
            if (timeRootSpanEnded == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "timeRootSpanEnded");
            }
            this.timeRootSpanEnded = timeRootSpanEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeRootSpanStarted(String timeRootSpanStarted) {
            if (timeRootSpanStarted == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "timeRootSpanStarted");
            }
            this.timeRootSpanStarted = timeRootSpanStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeTraceStartedGreaterThanOrEqualTo(@Nullable String timeTraceStartedGreaterThanOrEqualTo) {

            this.timeTraceStartedGreaterThanOrEqualTo = timeTraceStartedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeTraceStartedLessThan(@Nullable String timeTraceStartedLessThan) {

            this.timeTraceStartedLessThan = timeTraceStartedLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder traceDurationInMs(Integer traceDurationInMs) {
            if (traceDurationInMs == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "traceDurationInMs");
            }
            this.traceDurationInMs = traceDurationInMs;
            return this;
        }
        @CustomType.Setter
        public Builder traceErrorCode(String traceErrorCode) {
            if (traceErrorCode == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "traceErrorCode");
            }
            this.traceErrorCode = traceErrorCode;
            return this;
        }
        @CustomType.Setter
        public Builder traceErrorType(String traceErrorType) {
            if (traceErrorType == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "traceErrorType");
            }
            this.traceErrorType = traceErrorType;
            return this;
        }
        @CustomType.Setter
        public Builder traceKey(String traceKey) {
            if (traceKey == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "traceKey");
            }
            this.traceKey = traceKey;
            return this;
        }
        @CustomType.Setter
        public Builder traceNamespace(@Nullable String traceNamespace) {

            this.traceNamespace = traceNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder traceStatus(String traceStatus) {
            if (traceStatus == null) {
              throw new MissingRequiredPropertyException("GetTraceResult", "traceStatus");
            }
            this.traceStatus = traceStatus;
            return this;
        }
        public GetTraceResult build() {
            final var _resultValue = new GetTraceResult();
            _resultValue.apmDomainId = apmDomainId;
            _resultValue.errorSpanCount = errorSpanCount;
            _resultValue.id = id;
            _resultValue.isFault = isFault;
            _resultValue.key = key;
            _resultValue.rootSpanDurationInMs = rootSpanDurationInMs;
            _resultValue.rootSpanOperationName = rootSpanOperationName;
            _resultValue.rootSpanServiceName = rootSpanServiceName;
            _resultValue.serviceSummaries = serviceSummaries;
            _resultValue.sourceName = sourceName;
            _resultValue.spanCount = spanCount;
            _resultValue.spanSummaries = spanSummaries;
            _resultValue.spans = spans;
            _resultValue.timeEarliestSpanStarted = timeEarliestSpanStarted;
            _resultValue.timeLatestSpanEnded = timeLatestSpanEnded;
            _resultValue.timeRootSpanEnded = timeRootSpanEnded;
            _resultValue.timeRootSpanStarted = timeRootSpanStarted;
            _resultValue.timeTraceStartedGreaterThanOrEqualTo = timeTraceStartedGreaterThanOrEqualTo;
            _resultValue.timeTraceStartedLessThan = timeTraceStartedLessThan;
            _resultValue.traceDurationInMs = traceDurationInMs;
            _resultValue.traceErrorCode = traceErrorCode;
            _resultValue.traceErrorType = traceErrorType;
            _resultValue.traceKey = traceKey;
            _resultValue.traceNamespace = traceNamespace;
            _resultValue.traceStatus = traceStatus;
            return _resultValue;
        }
    }
}
