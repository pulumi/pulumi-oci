// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ApmTraces.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpanLog;
import com.pulumi.oci.ApmTraces.outputs.GetTraceSpanTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTraceSpan {
    /**
     * @return Total span duration in milliseconds.
     * 
     */
    private String durationInMs;
    /**
     * @return Indicates if the span has an error.
     * 
     */
    private Boolean isError;
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    private String key;
    /**
     * @return Kind associated with the span.
     * 
     */
    private String kind;
    /**
     * @return List of logs associated with the span.
     * 
     */
    private List<GetTraceSpanLog> logs;
    /**
     * @return Span name associated with the trace.  This is usually the method or URI of the request.
     * 
     */
    private String operationName;
    /**
     * @return Unique parent identifier for the span if one exists. For root spans this will be null.
     * 
     */
    private String parentSpanKey;
    /**
     * @return Service name associated with the span.
     * 
     */
    private String serviceName;
    /**
     * @return Source of span (spans, syn_spans).
     * 
     */
    private String sourceName;
    /**
     * @return List of tags associated with the span.
     * 
     */
    private List<GetTraceSpanTag> tags;
    /**
     * @return Span end time.  Timestamp when the span was completed.
     * 
     */
    private String timeEnded;
    /**
     * @return Span start time.  Timestamp when the span was started.
     * 
     */
    private String timeStarted;
    /**
     * @return Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    private String traceKey;

    private GetTraceSpan() {}
    /**
     * @return Total span duration in milliseconds.
     * 
     */
    public String durationInMs() {
        return this.durationInMs;
    }
    /**
     * @return Indicates if the span has an error.
     * 
     */
    public Boolean isError() {
        return this.isError;
    }
    /**
     * @return Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Kind associated with the span.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return List of logs associated with the span.
     * 
     */
    public List<GetTraceSpanLog> logs() {
        return this.logs;
    }
    /**
     * @return Span name associated with the trace.  This is usually the method or URI of the request.
     * 
     */
    public String operationName() {
        return this.operationName;
    }
    /**
     * @return Unique parent identifier for the span if one exists. For root spans this will be null.
     * 
     */
    public String parentSpanKey() {
        return this.parentSpanKey;
    }
    /**
     * @return Service name associated with the span.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Source of span (spans, syn_spans).
     * 
     */
    public String sourceName() {
        return this.sourceName;
    }
    /**
     * @return List of tags associated with the span.
     * 
     */
    public List<GetTraceSpanTag> tags() {
        return this.tags;
    }
    /**
     * @return Span end time.  Timestamp when the span was completed.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return Span start time.  Timestamp when the span was started.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return Unique Application Performance Monitoring trace identifier (traceId).
     * 
     */
    public String traceKey() {
        return this.traceKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTraceSpan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String durationInMs;
        private Boolean isError;
        private String key;
        private String kind;
        private List<GetTraceSpanLog> logs;
        private String operationName;
        private String parentSpanKey;
        private String serviceName;
        private String sourceName;
        private List<GetTraceSpanTag> tags;
        private String timeEnded;
        private String timeStarted;
        private String traceKey;
        public Builder() {}
        public Builder(GetTraceSpan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.durationInMs = defaults.durationInMs;
    	      this.isError = defaults.isError;
    	      this.key = defaults.key;
    	      this.kind = defaults.kind;
    	      this.logs = defaults.logs;
    	      this.operationName = defaults.operationName;
    	      this.parentSpanKey = defaults.parentSpanKey;
    	      this.serviceName = defaults.serviceName;
    	      this.sourceName = defaults.sourceName;
    	      this.tags = defaults.tags;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.traceKey = defaults.traceKey;
        }

        @CustomType.Setter
        public Builder durationInMs(String durationInMs) {
            if (durationInMs == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "durationInMs");
            }
            this.durationInMs = durationInMs;
            return this;
        }
        @CustomType.Setter
        public Builder isError(Boolean isError) {
            if (isError == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "isError");
            }
            this.isError = isError;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder logs(List<GetTraceSpanLog> logs) {
            if (logs == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "logs");
            }
            this.logs = logs;
            return this;
        }
        public Builder logs(GetTraceSpanLog... logs) {
            return logs(List.of(logs));
        }
        @CustomType.Setter
        public Builder operationName(String operationName) {
            if (operationName == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "operationName");
            }
            this.operationName = operationName;
            return this;
        }
        @CustomType.Setter
        public Builder parentSpanKey(String parentSpanKey) {
            if (parentSpanKey == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "parentSpanKey");
            }
            this.parentSpanKey = parentSpanKey;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder sourceName(String sourceName) {
            if (sourceName == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "sourceName");
            }
            this.sourceName = sourceName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetTraceSpanTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetTraceSpanTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            if (timeEnded == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "timeEnded");
            }
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder traceKey(String traceKey) {
            if (traceKey == null) {
              throw new MissingRequiredPropertyException("GetTraceSpan", "traceKey");
            }
            this.traceKey = traceKey;
            return this;
        }
        public GetTraceSpan build() {
            final var _resultValue = new GetTraceSpan();
            _resultValue.durationInMs = durationInMs;
            _resultValue.isError = isError;
            _resultValue.key = key;
            _resultValue.kind = kind;
            _resultValue.logs = logs;
            _resultValue.operationName = operationName;
            _resultValue.parentSpanKey = parentSpanKey;
            _resultValue.serviceName = serviceName;
            _resultValue.sourceName = sourceName;
            _resultValue.tags = tags;
            _resultValue.timeEnded = timeEnded;
            _resultValue.timeStarted = timeStarted;
            _resultValue.traceKey = traceKey;
            return _resultValue;
        }
    }
}
