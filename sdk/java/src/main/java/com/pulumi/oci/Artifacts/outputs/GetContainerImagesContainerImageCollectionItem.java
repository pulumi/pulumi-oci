// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Artifacts.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Artifacts.outputs.GetContainerImagesContainerImageCollectionItemLayer;
import com.pulumi.oci.Artifacts.outputs.GetContainerImagesContainerImageCollectionItemVersion;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetContainerImagesContainerImageCollectionItem {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the user or principal that pushed the version.
     * 
     */
    private String createdBy;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The sha256 digest of the image layer.
     * 
     */
    private String digest;
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
     * 
     */
    private String id;
    /**
     * @return Layers of which the image is composed, ordered by the layer digest.
     * 
     */
    private List<GetContainerImagesContainerImageCollectionItemLayer> layers;
    /**
     * @return The total size of the container image layers in bytes.
     * 
     */
    private String layersSizeInBytes;
    /**
     * @return The size of the container image manifest in bytes.
     * 
     */
    private Integer manifestSizeInBytes;
    /**
     * @return Total number of pulls.
     * 
     */
    private String pullCount;
    /**
     * @return A filter to return container images only for the specified container repository OCID.
     * 
     */
    private String repositoryId;
    /**
     * @return A filter to return container images or container image signatures that match the repository name.  Example: `foo` or `foo*`
     * 
     */
    private String repositoryName;
    /**
     * @return A filter to return only resources that match the given lifecycle state name exactly.
     * 
     */
    private String state;
    /**
     * @return The system tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The creation time of the version.
     * 
     */
    private String timeCreated;
    /**
     * @return An RFC 3339 timestamp indicating when the image was last pulled.
     * 
     */
    private String timeLastPulled;
    /**
     * @return A filter to return container images that match the version.  Example: `foo` or `foo*`
     * 
     */
    private String version;
    /**
     * @return The versions associated with this image.
     * 
     */
    private List<GetContainerImagesContainerImageCollectionItemVersion> versions;

    private GetContainerImagesContainerImageCollectionItem() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the user or principal that pushed the version.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The sha256 digest of the image layer.
     * 
     */
    public String digest() {
        return this.digest;
    }
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Layers of which the image is composed, ordered by the layer digest.
     * 
     */
    public List<GetContainerImagesContainerImageCollectionItemLayer> layers() {
        return this.layers;
    }
    /**
     * @return The total size of the container image layers in bytes.
     * 
     */
    public String layersSizeInBytes() {
        return this.layersSizeInBytes;
    }
    /**
     * @return The size of the container image manifest in bytes.
     * 
     */
    public Integer manifestSizeInBytes() {
        return this.manifestSizeInBytes;
    }
    /**
     * @return Total number of pulls.
     * 
     */
    public String pullCount() {
        return this.pullCount;
    }
    /**
     * @return A filter to return container images only for the specified container repository OCID.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return A filter to return container images or container image signatures that match the repository name.  Example: `foo` or `foo*`
     * 
     */
    public String repositoryName() {
        return this.repositoryName;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state name exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The system tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The creation time of the version.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An RFC 3339 timestamp indicating when the image was last pulled.
     * 
     */
    public String timeLastPulled() {
        return this.timeLastPulled;
    }
    /**
     * @return A filter to return container images that match the version.  Example: `foo` or `foo*`
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The versions associated with this image.
     * 
     */
    public List<GetContainerImagesContainerImageCollectionItemVersion> versions() {
        return this.versions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerImagesContainerImageCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String createdBy;
        private Map<String,Object> definedTags;
        private String digest;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetContainerImagesContainerImageCollectionItemLayer> layers;
        private String layersSizeInBytes;
        private Integer manifestSizeInBytes;
        private String pullCount;
        private String repositoryId;
        private String repositoryName;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeLastPulled;
        private String version;
        private List<GetContainerImagesContainerImageCollectionItemVersion> versions;
        public Builder() {}
        public Builder(GetContainerImagesContainerImageCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.createdBy = defaults.createdBy;
    	      this.definedTags = defaults.definedTags;
    	      this.digest = defaults.digest;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.layers = defaults.layers;
    	      this.layersSizeInBytes = defaults.layersSizeInBytes;
    	      this.manifestSizeInBytes = defaults.manifestSizeInBytes;
    	      this.pullCount = defaults.pullCount;
    	      this.repositoryId = defaults.repositoryId;
    	      this.repositoryName = defaults.repositoryName;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastPulled = defaults.timeLastPulled;
    	      this.version = defaults.version;
    	      this.versions = defaults.versions;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder digest(String digest) {
            if (digest == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "digest");
            }
            this.digest = digest;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder layers(List<GetContainerImagesContainerImageCollectionItemLayer> layers) {
            if (layers == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "layers");
            }
            this.layers = layers;
            return this;
        }
        public Builder layers(GetContainerImagesContainerImageCollectionItemLayer... layers) {
            return layers(List.of(layers));
        }
        @CustomType.Setter
        public Builder layersSizeInBytes(String layersSizeInBytes) {
            if (layersSizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "layersSizeInBytes");
            }
            this.layersSizeInBytes = layersSizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder manifestSizeInBytes(Integer manifestSizeInBytes) {
            if (manifestSizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "manifestSizeInBytes");
            }
            this.manifestSizeInBytes = manifestSizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder pullCount(String pullCount) {
            if (pullCount == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "pullCount");
            }
            this.pullCount = pullCount;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryName(String repositoryName) {
            if (repositoryName == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "repositoryName");
            }
            this.repositoryName = repositoryName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastPulled(String timeLastPulled) {
            if (timeLastPulled == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "timeLastPulled");
            }
            this.timeLastPulled = timeLastPulled;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versions(List<GetContainerImagesContainerImageCollectionItemVersion> versions) {
            if (versions == null) {
              throw new MissingRequiredPropertyException("GetContainerImagesContainerImageCollectionItem", "versions");
            }
            this.versions = versions;
            return this;
        }
        public Builder versions(GetContainerImagesContainerImageCollectionItemVersion... versions) {
            return versions(List.of(versions));
        }
        public GetContainerImagesContainerImageCollectionItem build() {
            final var _resultValue = new GetContainerImagesContainerImageCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.createdBy = createdBy;
            _resultValue.definedTags = definedTags;
            _resultValue.digest = digest;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.layers = layers;
            _resultValue.layersSizeInBytes = layersSizeInBytes;
            _resultValue.manifestSizeInBytes = manifestSizeInBytes;
            _resultValue.pullCount = pullCount;
            _resultValue.repositoryId = repositoryId;
            _resultValue.repositoryName = repositoryName;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastPulled = timeLastPulled;
            _resultValue.version = version;
            _resultValue.versions = versions;
            return _resultValue;
        }
    }
}
