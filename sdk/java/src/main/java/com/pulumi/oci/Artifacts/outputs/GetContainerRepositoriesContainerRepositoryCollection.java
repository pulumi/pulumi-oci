// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Artifacts.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Artifacts.outputs.GetContainerRepositoriesContainerRepositoryCollectionItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetContainerRepositoriesContainerRepositoryCollection {
    /**
     * @return Total number of images.
     * 
     */
    private Integer imageCount;
    private List<GetContainerRepositoriesContainerRepositoryCollectionItem> items;
    /**
     * @return Total number of layers.
     * 
     */
    private Integer layerCount;
    /**
     * @return Total storage in bytes consumed by layers.
     * 
     */
    private String layersSizeInBytes;
    private Integer remainingItemsCount;
    private Integer repositoryCount;

    private GetContainerRepositoriesContainerRepositoryCollection() {}
    /**
     * @return Total number of images.
     * 
     */
    public Integer imageCount() {
        return this.imageCount;
    }
    public List<GetContainerRepositoriesContainerRepositoryCollectionItem> items() {
        return this.items;
    }
    /**
     * @return Total number of layers.
     * 
     */
    public Integer layerCount() {
        return this.layerCount;
    }
    /**
     * @return Total storage in bytes consumed by layers.
     * 
     */
    public String layersSizeInBytes() {
        return this.layersSizeInBytes;
    }
    public Integer remainingItemsCount() {
        return this.remainingItemsCount;
    }
    public Integer repositoryCount() {
        return this.repositoryCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerRepositoriesContainerRepositoryCollection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer imageCount;
        private List<GetContainerRepositoriesContainerRepositoryCollectionItem> items;
        private Integer layerCount;
        private String layersSizeInBytes;
        private Integer remainingItemsCount;
        private Integer repositoryCount;
        public Builder() {}
        public Builder(GetContainerRepositoriesContainerRepositoryCollection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imageCount = defaults.imageCount;
    	      this.items = defaults.items;
    	      this.layerCount = defaults.layerCount;
    	      this.layersSizeInBytes = defaults.layersSizeInBytes;
    	      this.remainingItemsCount = defaults.remainingItemsCount;
    	      this.repositoryCount = defaults.repositoryCount;
        }

        @CustomType.Setter
        public Builder imageCount(Integer imageCount) {
            if (imageCount == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoriesContainerRepositoryCollection", "imageCount");
            }
            this.imageCount = imageCount;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetContainerRepositoriesContainerRepositoryCollectionItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoriesContainerRepositoryCollection", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetContainerRepositoriesContainerRepositoryCollectionItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder layerCount(Integer layerCount) {
            if (layerCount == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoriesContainerRepositoryCollection", "layerCount");
            }
            this.layerCount = layerCount;
            return this;
        }
        @CustomType.Setter
        public Builder layersSizeInBytes(String layersSizeInBytes) {
            if (layersSizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoriesContainerRepositoryCollection", "layersSizeInBytes");
            }
            this.layersSizeInBytes = layersSizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder remainingItemsCount(Integer remainingItemsCount) {
            if (remainingItemsCount == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoriesContainerRepositoryCollection", "remainingItemsCount");
            }
            this.remainingItemsCount = remainingItemsCount;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryCount(Integer repositoryCount) {
            if (repositoryCount == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoriesContainerRepositoryCollection", "repositoryCount");
            }
            this.repositoryCount = repositoryCount;
            return this;
        }
        public GetContainerRepositoriesContainerRepositoryCollection build() {
            final var _resultValue = new GetContainerRepositoriesContainerRepositoryCollection();
            _resultValue.imageCount = imageCount;
            _resultValue.items = items;
            _resultValue.layerCount = layerCount;
            _resultValue.layersSizeInBytes = layersSizeInBytes;
            _resultValue.remainingItemsCount = remainingItemsCount;
            _resultValue.repositoryCount = repositoryCount;
            return _resultValue;
        }
    }
}
