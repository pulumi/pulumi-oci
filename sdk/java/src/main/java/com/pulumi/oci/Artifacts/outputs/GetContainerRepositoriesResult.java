// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Artifacts.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Artifacts.outputs.GetContainerRepositoriesContainerRepositoryCollection;
import com.pulumi.oci.Artifacts.outputs.GetContainerRepositoriesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerRepositoriesResult {
    /**
     * @return The OCID of the compartment in which the container repository exists.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The list of container_repository_collection.
     * 
     */
    private List<GetContainerRepositoriesContainerRepositoryCollection> containerRepositoryCollections;
    /**
     * @return The container repository name.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetContainerRepositoriesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether the repository is public. A public repository allows unauthenticated access.
     * 
     */
    private @Nullable Boolean isPublic;
    private @Nullable String repositoryId;
    /**
     * @return The current state of the container repository.
     * 
     */
    private @Nullable String state;

    private GetContainerRepositoriesResult() {}
    /**
     * @return The OCID of the compartment in which the container repository exists.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The list of container_repository_collection.
     * 
     */
    public List<GetContainerRepositoriesContainerRepositoryCollection> containerRepositoryCollections() {
        return this.containerRepositoryCollections;
    }
    /**
     * @return The container repository name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetContainerRepositoriesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the repository is public. A public repository allows unauthenticated access.
     * 
     */
    public Optional<Boolean> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }
    /**
     * @return The current state of the container repository.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerRepositoriesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private List<GetContainerRepositoriesContainerRepositoryCollection> containerRepositoryCollections;
        private @Nullable String displayName;
        private @Nullable List<GetContainerRepositoriesFilter> filters;
        private String id;
        private @Nullable Boolean isPublic;
        private @Nullable String repositoryId;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetContainerRepositoriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.containerRepositoryCollections = defaults.containerRepositoryCollections;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isPublic = defaults.isPublic;
    	      this.repositoryId = defaults.repositoryId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder containerRepositoryCollections(List<GetContainerRepositoriesContainerRepositoryCollection> containerRepositoryCollections) {
            this.containerRepositoryCollections = Objects.requireNonNull(containerRepositoryCollections);
            return this;
        }
        public Builder containerRepositoryCollections(GetContainerRepositoriesContainerRepositoryCollection... containerRepositoryCollections) {
            return containerRepositoryCollections(List.of(containerRepositoryCollections));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetContainerRepositoriesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetContainerRepositoriesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isPublic(@Nullable Boolean isPublic) {
            this.isPublic = isPublic;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetContainerRepositoriesResult build() {
            final var o = new GetContainerRepositoriesResult();
            o.compartmentId = compartmentId;
            o.compartmentIdInSubtree = compartmentIdInSubtree;
            o.containerRepositoryCollections = containerRepositoryCollections;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.isPublic = isPublic;
            o.repositoryId = repositoryId;
            o.state = state;
            return o;
        }
    }
}
