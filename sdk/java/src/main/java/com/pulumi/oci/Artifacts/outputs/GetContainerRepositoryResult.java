// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Artifacts.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Artifacts.outputs.GetContainerRepositoryReadme;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetContainerRepositoryResult {
    /**
     * @return Total storage size in GBs that will be charged.
     * 
     */
    private String billableSizeInGbs;
    /**
     * @return The OCID of the compartment in which the container repository exists.
     * 
     */
    private String compartmentId;
    /**
     * @return The id of the user or principal that created the resource.
     * 
     */
    private String createdBy;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The container repository name.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
     * 
     */
    private String id;
    /**
     * @return Total number of images.
     * 
     */
    private Integer imageCount;
    /**
     * @return Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
     * 
     */
    private Boolean isImmutable;
    /**
     * @return Whether the repository is public. A public repository allows unauthenticated access.
     * 
     */
    private Boolean isPublic;
    /**
     * @return Total number of layers.
     * 
     */
    private Integer layerCount;
    /**
     * @return Total storage in bytes consumed by layers.
     * 
     */
    private String layersSizeInBytes;
    /**
     * @return The tenancy namespace used in the container repository path.
     * 
     */
    private String namespace;
    /**
     * @return Container repository readme.
     * 
     */
    private List<GetContainerRepositoryReadme> readmes;
    private String repositoryId;
    /**
     * @return The current state of the container repository.
     * 
     */
    private String state;
    /**
     * @return The system tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return An RFC 3339 timestamp indicating when the repository was created.
     * 
     */
    private String timeCreated;
    /**
     * @return An RFC 3339 timestamp indicating when an image was last pushed to the repository.
     * 
     */
    private String timeLastPushed;

    private GetContainerRepositoryResult() {}
    /**
     * @return Total storage size in GBs that will be charged.
     * 
     */
    public String billableSizeInGbs() {
        return this.billableSizeInGbs;
    }
    /**
     * @return The OCID of the compartment in which the container repository exists.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The id of the user or principal that created the resource.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The container repository name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Total number of images.
     * 
     */
    public Integer imageCount() {
        return this.imageCount;
    }
    /**
     * @return Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
     * 
     */
    public Boolean isImmutable() {
        return this.isImmutable;
    }
    /**
     * @return Whether the repository is public. A public repository allows unauthenticated access.
     * 
     */
    public Boolean isPublic() {
        return this.isPublic;
    }
    /**
     * @return Total number of layers.
     * 
     */
    public Integer layerCount() {
        return this.layerCount;
    }
    /**
     * @return Total storage in bytes consumed by layers.
     * 
     */
    public String layersSizeInBytes() {
        return this.layersSizeInBytes;
    }
    /**
     * @return The tenancy namespace used in the container repository path.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Container repository readme.
     * 
     */
    public List<GetContainerRepositoryReadme> readmes() {
        return this.readmes;
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return The current state of the container repository.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The system tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return An RFC 3339 timestamp indicating when the repository was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An RFC 3339 timestamp indicating when an image was last pushed to the repository.
     * 
     */
    public String timeLastPushed() {
        return this.timeLastPushed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerRepositoryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String billableSizeInGbs;
        private String compartmentId;
        private String createdBy;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Integer imageCount;
        private Boolean isImmutable;
        private Boolean isPublic;
        private Integer layerCount;
        private String layersSizeInBytes;
        private String namespace;
        private List<GetContainerRepositoryReadme> readmes;
        private String repositoryId;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeLastPushed;
        public Builder() {}
        public Builder(GetContainerRepositoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billableSizeInGbs = defaults.billableSizeInGbs;
    	      this.compartmentId = defaults.compartmentId;
    	      this.createdBy = defaults.createdBy;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.imageCount = defaults.imageCount;
    	      this.isImmutable = defaults.isImmutable;
    	      this.isPublic = defaults.isPublic;
    	      this.layerCount = defaults.layerCount;
    	      this.layersSizeInBytes = defaults.layersSizeInBytes;
    	      this.namespace = defaults.namespace;
    	      this.readmes = defaults.readmes;
    	      this.repositoryId = defaults.repositoryId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastPushed = defaults.timeLastPushed;
        }

        @CustomType.Setter
        public Builder billableSizeInGbs(String billableSizeInGbs) {
            if (billableSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "billableSizeInGbs");
            }
            this.billableSizeInGbs = billableSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageCount(Integer imageCount) {
            if (imageCount == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "imageCount");
            }
            this.imageCount = imageCount;
            return this;
        }
        @CustomType.Setter
        public Builder isImmutable(Boolean isImmutable) {
            if (isImmutable == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "isImmutable");
            }
            this.isImmutable = isImmutable;
            return this;
        }
        @CustomType.Setter
        public Builder isPublic(Boolean isPublic) {
            if (isPublic == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "isPublic");
            }
            this.isPublic = isPublic;
            return this;
        }
        @CustomType.Setter
        public Builder layerCount(Integer layerCount) {
            if (layerCount == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "layerCount");
            }
            this.layerCount = layerCount;
            return this;
        }
        @CustomType.Setter
        public Builder layersSizeInBytes(String layersSizeInBytes) {
            if (layersSizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "layersSizeInBytes");
            }
            this.layersSizeInBytes = layersSizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder readmes(List<GetContainerRepositoryReadme> readmes) {
            if (readmes == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "readmes");
            }
            this.readmes = readmes;
            return this;
        }
        public Builder readmes(GetContainerRepositoryReadme... readmes) {
            return readmes(List.of(readmes));
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastPushed(String timeLastPushed) {
            if (timeLastPushed == null) {
              throw new MissingRequiredPropertyException("GetContainerRepositoryResult", "timeLastPushed");
            }
            this.timeLastPushed = timeLastPushed;
            return this;
        }
        public GetContainerRepositoryResult build() {
            final var _resultValue = new GetContainerRepositoryResult();
            _resultValue.billableSizeInGbs = billableSizeInGbs;
            _resultValue.compartmentId = compartmentId;
            _resultValue.createdBy = createdBy;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.imageCount = imageCount;
            _resultValue.isImmutable = isImmutable;
            _resultValue.isPublic = isPublic;
            _resultValue.layerCount = layerCount;
            _resultValue.layersSizeInBytes = layersSizeInBytes;
            _resultValue.namespace = namespace;
            _resultValue.readmes = readmes;
            _resultValue.repositoryId = repositoryId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastPushed = timeLastPushed;
            return _resultValue;
        }
    }
}
