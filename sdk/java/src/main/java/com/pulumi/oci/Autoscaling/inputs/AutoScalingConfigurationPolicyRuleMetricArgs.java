// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Autoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Autoscaling.inputs.AutoScalingConfigurationPolicyRuleMetricThresholdArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoScalingConfigurationPolicyRuleMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoScalingConfigurationPolicyRuleMetricArgs Empty = new AutoScalingConfigurationPolicyRuleMetricArgs();

    /**
     * The OCID of the compartment containing the metrics.
     * 
     */
    @Import(name="metricCompartmentId")
    private @Nullable Output<String> metricCompartmentId;

    /**
     * @return The OCID of the compartment containing the metrics.
     * 
     */
    public Optional<Output<String>> metricCompartmentId() {
        return Optional.ofNullable(this.metricCompartmentId);
    }

    /**
     * Source of the metric data for creating the alarm used to trigger autoscaling actions.
     * 
     * The following values are supported:
     * * `COMPUTE_AGENT`: CPU or memory metrics emitted by the Compute Instance Monitoring plugin.
     * * `CUSTOM_QUERY`: A custom Monitoring Query Language (MQL) expression.
     * 
     */
    @Import(name="metricSource")
    private @Nullable Output<String> metricSource;

    /**
     * @return Source of the metric data for creating the alarm used to trigger autoscaling actions.
     * 
     * The following values are supported:
     * * `COMPUTE_AGENT`: CPU or memory metrics emitted by the Compute Instance Monitoring plugin.
     * * `CUSTOM_QUERY`: A custom Monitoring Query Language (MQL) expression.
     * 
     */
    public Optional<Output<String>> metricSource() {
        return Optional.ofNullable(this.metricSource);
    }

    @Import(name="metricType")
    private @Nullable Output<String> metricType;

    public Optional<Output<String>> metricType() {
        return Optional.ofNullable(this.metricType);
    }

    /**
     * The namespace for the query.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace for the query.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
     * 
     * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
     * 
     */
    @Import(name="pendingDuration")
    private @Nullable Output<String> pendingDuration;

    /**
     * @return The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
     * 
     * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
     * 
     */
    public Optional<Output<String>> pendingDuration() {
        return Optional.ofNullable(this.pendingDuration);
    }

    /**
     * The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     * Example of threshold alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
     * 
     * ***
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     * Example of threshold alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
     * 
     * ***
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * The resource group for the query.
     * 
     */
    @Import(name="resourceGroup")
    private @Nullable Output<String> resourceGroup;

    /**
     * @return The resource group for the query.
     * 
     */
    public Optional<Output<String>> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }

    @Import(name="threshold")
    private @Nullable Output<AutoScalingConfigurationPolicyRuleMetricThresholdArgs> threshold;

    public Optional<Output<AutoScalingConfigurationPolicyRuleMetricThresholdArgs>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private AutoScalingConfigurationPolicyRuleMetricArgs() {}

    private AutoScalingConfigurationPolicyRuleMetricArgs(AutoScalingConfigurationPolicyRuleMetricArgs $) {
        this.metricCompartmentId = $.metricCompartmentId;
        this.metricSource = $.metricSource;
        this.metricType = $.metricType;
        this.namespace = $.namespace;
        this.pendingDuration = $.pendingDuration;
        this.query = $.query;
        this.resourceGroup = $.resourceGroup;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoScalingConfigurationPolicyRuleMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoScalingConfigurationPolicyRuleMetricArgs $;

        public Builder() {
            $ = new AutoScalingConfigurationPolicyRuleMetricArgs();
        }

        public Builder(AutoScalingConfigurationPolicyRuleMetricArgs defaults) {
            $ = new AutoScalingConfigurationPolicyRuleMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricCompartmentId The OCID of the compartment containing the metrics.
         * 
         * @return builder
         * 
         */
        public Builder metricCompartmentId(@Nullable Output<String> metricCompartmentId) {
            $.metricCompartmentId = metricCompartmentId;
            return this;
        }

        /**
         * @param metricCompartmentId The OCID of the compartment containing the metrics.
         * 
         * @return builder
         * 
         */
        public Builder metricCompartmentId(String metricCompartmentId) {
            return metricCompartmentId(Output.of(metricCompartmentId));
        }

        /**
         * @param metricSource Source of the metric data for creating the alarm used to trigger autoscaling actions.
         * 
         * The following values are supported:
         * * `COMPUTE_AGENT`: CPU or memory metrics emitted by the Compute Instance Monitoring plugin.
         * * `CUSTOM_QUERY`: A custom Monitoring Query Language (MQL) expression.
         * 
         * @return builder
         * 
         */
        public Builder metricSource(@Nullable Output<String> metricSource) {
            $.metricSource = metricSource;
            return this;
        }

        /**
         * @param metricSource Source of the metric data for creating the alarm used to trigger autoscaling actions.
         * 
         * The following values are supported:
         * * `COMPUTE_AGENT`: CPU or memory metrics emitted by the Compute Instance Monitoring plugin.
         * * `CUSTOM_QUERY`: A custom Monitoring Query Language (MQL) expression.
         * 
         * @return builder
         * 
         */
        public Builder metricSource(String metricSource) {
            return metricSource(Output.of(metricSource));
        }

        public Builder metricType(@Nullable Output<String> metricType) {
            $.metricType = metricType;
            return this;
        }

        public Builder metricType(String metricType) {
            return metricType(Output.of(metricType));
        }

        /**
         * @param namespace The namespace for the query.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace for the query.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param pendingDuration The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
         * 
         * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
         * 
         * @return builder
         * 
         */
        public Builder pendingDuration(@Nullable Output<String> pendingDuration) {
            $.pendingDuration = pendingDuration;
            return this;
        }

        /**
         * @param pendingDuration The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
         * 
         * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
         * 
         * @return builder
         * 
         */
        public Builder pendingDuration(String pendingDuration) {
            return pendingDuration(Output.of(pendingDuration));
        }

        /**
         * @param query The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
         * 
         * Example of threshold alarm:
         * 
         * ***
         * 
         * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
         * 
         * Example of threshold alarm:
         * 
         * ***
         * 
         * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param resourceGroup The resource group for the query.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(@Nullable Output<String> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param resourceGroup The resource group for the query.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(String resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        public Builder threshold(@Nullable Output<AutoScalingConfigurationPolicyRuleMetricThresholdArgs> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(AutoScalingConfigurationPolicyRuleMetricThresholdArgs threshold) {
            return threshold(Output.of(threshold));
        }

        public AutoScalingConfigurationPolicyRuleMetricArgs build() {
            return $;
        }
    }

}
