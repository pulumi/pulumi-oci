// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Autoscaling.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Autoscaling.outputs.AutoScalingConfigurationPolicyRuleMetricThreshold;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AutoScalingConfigurationPolicyRuleMetric {
    /**
     * @return The OCID of the compartment containing the metrics.
     * 
     */
    private @Nullable String metricCompartmentId;
    /**
     * @return Source of the metric data for creating the alarm used to trigger autoscaling actions.
     * 
     * The following values are supported:
     * * `COMPUTE_AGENT`: CPU or memory metrics emitted by the Compute Instance Monitoring plugin.
     * * `CUSTOM_QUERY`: A custom Monitoring Query Language (MQL) expression.
     * 
     */
    private @Nullable String metricSource;
    private @Nullable String metricType;
    /**
     * @return The namespace for the query.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
     * 
     * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
     * 
     */
    private @Nullable String pendingDuration;
    /**
     * @return The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     * Example of threshold alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
     * 
     * ***
     * 
     */
    private @Nullable String query;
    /**
     * @return The resource group for the query.
     * 
     */
    private @Nullable String resourceGroup;
    private @Nullable AutoScalingConfigurationPolicyRuleMetricThreshold threshold;

    private AutoScalingConfigurationPolicyRuleMetric() {}
    /**
     * @return The OCID of the compartment containing the metrics.
     * 
     */
    public Optional<String> metricCompartmentId() {
        return Optional.ofNullable(this.metricCompartmentId);
    }
    /**
     * @return Source of the metric data for creating the alarm used to trigger autoscaling actions.
     * 
     * The following values are supported:
     * * `COMPUTE_AGENT`: CPU or memory metrics emitted by the Compute Instance Monitoring plugin.
     * * `CUSTOM_QUERY`: A custom Monitoring Query Language (MQL) expression.
     * 
     */
    public Optional<String> metricSource() {
        return Optional.ofNullable(this.metricSource);
    }
    public Optional<String> metricType() {
        return Optional.ofNullable(this.metricType);
    }
    /**
     * @return The namespace for the query.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
     * 
     * The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
     * 
     */
    public Optional<String> pendingDuration() {
        return Optional.ofNullable(this.pendingDuration);
    }
    /**
     * @return The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     * Example of threshold alarm:
     * 
     * ***
     * 
     * CpuUtilization[1m]{availabilityDomain=&#34;cumS:PHX-AD-1&#34;}.groupBy(availabilityDomain).percentile(0.9) &gt; 85
     * 
     * ***
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }
    /**
     * @return The resource group for the query.
     * 
     */
    public Optional<String> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }
    public Optional<AutoScalingConfigurationPolicyRuleMetricThreshold> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoScalingConfigurationPolicyRuleMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String metricCompartmentId;
        private @Nullable String metricSource;
        private @Nullable String metricType;
        private @Nullable String namespace;
        private @Nullable String pendingDuration;
        private @Nullable String query;
        private @Nullable String resourceGroup;
        private @Nullable AutoScalingConfigurationPolicyRuleMetricThreshold threshold;
        public Builder() {}
        public Builder(AutoScalingConfigurationPolicyRuleMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricCompartmentId = defaults.metricCompartmentId;
    	      this.metricSource = defaults.metricSource;
    	      this.metricType = defaults.metricType;
    	      this.namespace = defaults.namespace;
    	      this.pendingDuration = defaults.pendingDuration;
    	      this.query = defaults.query;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder metricCompartmentId(@Nullable String metricCompartmentId) {

            this.metricCompartmentId = metricCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder metricSource(@Nullable String metricSource) {

            this.metricSource = metricSource;
            return this;
        }
        @CustomType.Setter
        public Builder metricType(@Nullable String metricType) {

            this.metricType = metricType;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder pendingDuration(@Nullable String pendingDuration) {

            this.pendingDuration = pendingDuration;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {

            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(@Nullable String resourceGroup) {

            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable AutoScalingConfigurationPolicyRuleMetricThreshold threshold) {

            this.threshold = threshold;
            return this;
        }
        public AutoScalingConfigurationPolicyRuleMetric build() {
            final var _resultValue = new AutoScalingConfigurationPolicyRuleMetric();
            _resultValue.metricCompartmentId = metricCompartmentId;
            _resultValue.metricSource = metricSource;
            _resultValue.metricType = metricType;
            _resultValue.namespace = namespace;
            _resultValue.pendingDuration = pendingDuration;
            _resultValue.query = query;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
