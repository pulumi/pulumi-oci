// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Bastion.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Bastion.outputs.GetSessionKeyDetail;
import com.pulumi.oci.Bastion.outputs.GetSessionTargetResourceDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSessionResult {
    /**
     * @return The unique identifier (OCID) of the bastion that is hosting this session.
     * 
     */
    private String bastionId;
    /**
     * @return The name of the bastion that is hosting this session.
     * 
     */
    private String bastionName;
    /**
     * @return The public key of the bastion host. You can use this to verify that you&#39;re connecting to the correct bastion.
     * 
     */
    private String bastionPublicHostKeyInfo;
    /**
     * @return The username that the session uses to connect to the target resource.
     * 
     */
    private String bastionUserName;
    /**
     * @return The name of the session.
     * 
     */
    private String displayName;
    /**
     * @return The unique identifier (OCID) of the session, which can&#39;t be changed after creation.
     * 
     */
    private String id;
    /**
     * @return Public key details for a bastion session.
     * 
     */
    private List<GetSessionKeyDetail> keyDetails;
    /**
     * @return The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
     * 
     */
    private String keyType;
    /**
     * @return A message describing the current session state in more detail.
     * 
     */
    private String lifecycleDetails;
    private String sessionId;
    /**
     * @return The amount of time the session can remain active.
     * 
     */
    private Integer sessionTtlInSeconds;
    /**
     * @return The connection message for the session.
     * 
     */
    private Map<String,String> sshMetadata;
    /**
     * @return The current state of the session.
     * 
     */
    private String state;
    /**
     * @return Details about a bastion session&#39;s target resource.
     * 
     */
    private List<GetSessionTargetResourceDetail> targetResourceDetails;
    /**
     * @return The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     * 
     */
    private String timeUpdated;

    private GetSessionResult() {}
    /**
     * @return The unique identifier (OCID) of the bastion that is hosting this session.
     * 
     */
    public String bastionId() {
        return this.bastionId;
    }
    /**
     * @return The name of the bastion that is hosting this session.
     * 
     */
    public String bastionName() {
        return this.bastionName;
    }
    /**
     * @return The public key of the bastion host. You can use this to verify that you&#39;re connecting to the correct bastion.
     * 
     */
    public String bastionPublicHostKeyInfo() {
        return this.bastionPublicHostKeyInfo;
    }
    /**
     * @return The username that the session uses to connect to the target resource.
     * 
     */
    public String bastionUserName() {
        return this.bastionUserName;
    }
    /**
     * @return The name of the session.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The unique identifier (OCID) of the session, which can&#39;t be changed after creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Public key details for a bastion session.
     * 
     */
    public List<GetSessionKeyDetail> keyDetails() {
        return this.keyDetails;
    }
    /**
     * @return The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    /**
     * @return A message describing the current session state in more detail.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String sessionId() {
        return this.sessionId;
    }
    /**
     * @return The amount of time the session can remain active.
     * 
     */
    public Integer sessionTtlInSeconds() {
        return this.sessionTtlInSeconds;
    }
    /**
     * @return The connection message for the session.
     * 
     */
    public Map<String,String> sshMetadata() {
        return this.sshMetadata;
    }
    /**
     * @return The current state of the session.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Details about a bastion session&#39;s target resource.
     * 
     */
    public List<GetSessionTargetResourceDetail> targetResourceDetails() {
        return this.targetResourceDetails;
    }
    /**
     * @return The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSessionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bastionId;
        private String bastionName;
        private String bastionPublicHostKeyInfo;
        private String bastionUserName;
        private String displayName;
        private String id;
        private List<GetSessionKeyDetail> keyDetails;
        private String keyType;
        private String lifecycleDetails;
        private String sessionId;
        private Integer sessionTtlInSeconds;
        private Map<String,String> sshMetadata;
        private String state;
        private List<GetSessionTargetResourceDetail> targetResourceDetails;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSessionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bastionId = defaults.bastionId;
    	      this.bastionName = defaults.bastionName;
    	      this.bastionPublicHostKeyInfo = defaults.bastionPublicHostKeyInfo;
    	      this.bastionUserName = defaults.bastionUserName;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.keyDetails = defaults.keyDetails;
    	      this.keyType = defaults.keyType;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.sessionId = defaults.sessionId;
    	      this.sessionTtlInSeconds = defaults.sessionTtlInSeconds;
    	      this.sshMetadata = defaults.sshMetadata;
    	      this.state = defaults.state;
    	      this.targetResourceDetails = defaults.targetResourceDetails;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder bastionId(String bastionId) {
            if (bastionId == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "bastionId");
            }
            this.bastionId = bastionId;
            return this;
        }
        @CustomType.Setter
        public Builder bastionName(String bastionName) {
            if (bastionName == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "bastionName");
            }
            this.bastionName = bastionName;
            return this;
        }
        @CustomType.Setter
        public Builder bastionPublicHostKeyInfo(String bastionPublicHostKeyInfo) {
            if (bastionPublicHostKeyInfo == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "bastionPublicHostKeyInfo");
            }
            this.bastionPublicHostKeyInfo = bastionPublicHostKeyInfo;
            return this;
        }
        @CustomType.Setter
        public Builder bastionUserName(String bastionUserName) {
            if (bastionUserName == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "bastionUserName");
            }
            this.bastionUserName = bastionUserName;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyDetails(List<GetSessionKeyDetail> keyDetails) {
            if (keyDetails == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "keyDetails");
            }
            this.keyDetails = keyDetails;
            return this;
        }
        public Builder keyDetails(GetSessionKeyDetail... keyDetails) {
            return keyDetails(List.of(keyDetails));
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            if (keyType == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "keyType");
            }
            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder sessionId(String sessionId) {
            if (sessionId == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "sessionId");
            }
            this.sessionId = sessionId;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTtlInSeconds(Integer sessionTtlInSeconds) {
            if (sessionTtlInSeconds == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "sessionTtlInSeconds");
            }
            this.sessionTtlInSeconds = sessionTtlInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder sshMetadata(Map<String,String> sshMetadata) {
            if (sshMetadata == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "sshMetadata");
            }
            this.sshMetadata = sshMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceDetails(List<GetSessionTargetResourceDetail> targetResourceDetails) {
            if (targetResourceDetails == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "targetResourceDetails");
            }
            this.targetResourceDetails = targetResourceDetails;
            return this;
        }
        public Builder targetResourceDetails(GetSessionTargetResourceDetail... targetResourceDetails) {
            return targetResourceDetails(List.of(targetResourceDetails));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSessionResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSessionResult build() {
            final var _resultValue = new GetSessionResult();
            _resultValue.bastionId = bastionId;
            _resultValue.bastionName = bastionName;
            _resultValue.bastionPublicHostKeyInfo = bastionPublicHostKeyInfo;
            _resultValue.bastionUserName = bastionUserName;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.keyDetails = keyDetails;
            _resultValue.keyType = keyType;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.sessionId = sessionId;
            _resultValue.sessionTtlInSeconds = sessionTtlInSeconds;
            _resultValue.sshMetadata = sshMetadata;
            _resultValue.state = state;
            _resultValue.targetResourceDetails = targetResourceDetails;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
