// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Bastion.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSessionTargetResourceDetail {
    /**
     * @return The Bastion service recognizes three types of sessions, managed SSH sessions, SSH port forwarding sessions, and Dynamic SSH port forwarding sessions. Managed SSH sessions require that the target resource has an OpenSSH server and the Oracle Cloud Agent both running.
     * 
     */
    private String sessionType;
    /**
     * @return The display name of the target Compute instance that the session connects to.
     * 
     */
    private String targetResourceDisplayName;
    /**
     * @return The Fully Qualified Domain Name of the target resource that the session connects to.
     * 
     */
    private String targetResourceFqdn;
    /**
     * @return The unique identifier (OCID) of the target resource (a Compute instance, for example) that the session connects to.
     * 
     */
    private String targetResourceId;
    /**
     * @return The name of the user on the target resource operating system that the session uses for the connection.
     * 
     */
    private String targetResourceOperatingSystemUserName;
    /**
     * @return The port number to connect to on the target resource.
     * 
     */
    private Integer targetResourcePort;
    /**
     * @return The private IP address of the target resource that the session connects to.
     * 
     */
    private String targetResourcePrivateIpAddress;

    private GetSessionTargetResourceDetail() {}
    /**
     * @return The Bastion service recognizes three types of sessions, managed SSH sessions, SSH port forwarding sessions, and Dynamic SSH port forwarding sessions. Managed SSH sessions require that the target resource has an OpenSSH server and the Oracle Cloud Agent both running.
     * 
     */
    public String sessionType() {
        return this.sessionType;
    }
    /**
     * @return The display name of the target Compute instance that the session connects to.
     * 
     */
    public String targetResourceDisplayName() {
        return this.targetResourceDisplayName;
    }
    /**
     * @return The Fully Qualified Domain Name of the target resource that the session connects to.
     * 
     */
    public String targetResourceFqdn() {
        return this.targetResourceFqdn;
    }
    /**
     * @return The unique identifier (OCID) of the target resource (a Compute instance, for example) that the session connects to.
     * 
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }
    /**
     * @return The name of the user on the target resource operating system that the session uses for the connection.
     * 
     */
    public String targetResourceOperatingSystemUserName() {
        return this.targetResourceOperatingSystemUserName;
    }
    /**
     * @return The port number to connect to on the target resource.
     * 
     */
    public Integer targetResourcePort() {
        return this.targetResourcePort;
    }
    /**
     * @return The private IP address of the target resource that the session connects to.
     * 
     */
    public String targetResourcePrivateIpAddress() {
        return this.targetResourcePrivateIpAddress;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSessionTargetResourceDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String sessionType;
        private String targetResourceDisplayName;
        private String targetResourceFqdn;
        private String targetResourceId;
        private String targetResourceOperatingSystemUserName;
        private Integer targetResourcePort;
        private String targetResourcePrivateIpAddress;
        public Builder() {}
        public Builder(GetSessionTargetResourceDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sessionType = defaults.sessionType;
    	      this.targetResourceDisplayName = defaults.targetResourceDisplayName;
    	      this.targetResourceFqdn = defaults.targetResourceFqdn;
    	      this.targetResourceId = defaults.targetResourceId;
    	      this.targetResourceOperatingSystemUserName = defaults.targetResourceOperatingSystemUserName;
    	      this.targetResourcePort = defaults.targetResourcePort;
    	      this.targetResourcePrivateIpAddress = defaults.targetResourcePrivateIpAddress;
        }

        @CustomType.Setter
        public Builder sessionType(String sessionType) {
            if (sessionType == null) {
              throw new MissingRequiredPropertyException("GetSessionTargetResourceDetail", "sessionType");
            }
            this.sessionType = sessionType;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceDisplayName(String targetResourceDisplayName) {
            if (targetResourceDisplayName == null) {
              throw new MissingRequiredPropertyException("GetSessionTargetResourceDetail", "targetResourceDisplayName");
            }
            this.targetResourceDisplayName = targetResourceDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceFqdn(String targetResourceFqdn) {
            if (targetResourceFqdn == null) {
              throw new MissingRequiredPropertyException("GetSessionTargetResourceDetail", "targetResourceFqdn");
            }
            this.targetResourceFqdn = targetResourceFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceId(String targetResourceId) {
            if (targetResourceId == null) {
              throw new MissingRequiredPropertyException("GetSessionTargetResourceDetail", "targetResourceId");
            }
            this.targetResourceId = targetResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceOperatingSystemUserName(String targetResourceOperatingSystemUserName) {
            if (targetResourceOperatingSystemUserName == null) {
              throw new MissingRequiredPropertyException("GetSessionTargetResourceDetail", "targetResourceOperatingSystemUserName");
            }
            this.targetResourceOperatingSystemUserName = targetResourceOperatingSystemUserName;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourcePort(Integer targetResourcePort) {
            if (targetResourcePort == null) {
              throw new MissingRequiredPropertyException("GetSessionTargetResourceDetail", "targetResourcePort");
            }
            this.targetResourcePort = targetResourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourcePrivateIpAddress(String targetResourcePrivateIpAddress) {
            if (targetResourcePrivateIpAddress == null) {
              throw new MissingRequiredPropertyException("GetSessionTargetResourceDetail", "targetResourcePrivateIpAddress");
            }
            this.targetResourcePrivateIpAddress = targetResourcePrivateIpAddress;
            return this;
        }
        public GetSessionTargetResourceDetail build() {
            final var _resultValue = new GetSessionTargetResourceDetail();
            _resultValue.sessionType = sessionType;
            _resultValue.targetResourceDisplayName = targetResourceDisplayName;
            _resultValue.targetResourceFqdn = targetResourceFqdn;
            _resultValue.targetResourceId = targetResourceId;
            _resultValue.targetResourceOperatingSystemUserName = targetResourceOperatingSystemUserName;
            _resultValue.targetResourcePort = targetResourcePort;
            _resultValue.targetResourcePrivateIpAddress = targetResourcePrivateIpAddress;
            return _resultValue;
        }
    }
}
