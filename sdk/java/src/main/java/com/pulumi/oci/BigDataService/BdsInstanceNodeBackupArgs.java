// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceNodeBackupLevelTypeDetailsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceNodeBackupArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceNodeBackupArgs Empty = new BdsInstanceNodeBackupArgs();

    @Import(name="backupConfigId")
    private @Nullable Output<String> backupConfigId;

    public Optional<Output<String>> backupConfigId() {
        return Optional.ofNullable(this.backupConfigId);
    }

    /**
     * Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
     * 
     */
    @Import(name="backupType", required=true)
    private Output<String> backupType;

    /**
     * @return Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
     * 
     */
    public Output<String> backupType() {
        return this.backupType;
    }

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="bdsInstanceId", required=true)
    private Output<String> bdsInstanceId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Output<String> bdsInstanceId() {
        return this.bdsInstanceId;
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Details of the type of level used to trigger the creation of a new node backup.
     * 
     */
    @Import(name="levelTypeDetails", required=true)
    private Output<BdsInstanceNodeBackupLevelTypeDetailsArgs> levelTypeDetails;

    /**
     * @return Details of the type of level used to trigger the creation of a new node backup.
     * 
     */
    public Output<BdsInstanceNodeBackupLevelTypeDetailsArgs> levelTypeDetails() {
        return this.levelTypeDetails;
    }

    @Import(name="nodeInstanceId")
    private @Nullable Output<String> nodeInstanceId;

    public Optional<Output<String>> nodeInstanceId() {
        return Optional.ofNullable(this.nodeInstanceId);
    }

    private BdsInstanceNodeBackupArgs() {}

    private BdsInstanceNodeBackupArgs(BdsInstanceNodeBackupArgs $) {
        this.backupConfigId = $.backupConfigId;
        this.backupType = $.backupType;
        this.bdsInstanceId = $.bdsInstanceId;
        this.displayName = $.displayName;
        this.levelTypeDetails = $.levelTypeDetails;
        this.nodeInstanceId = $.nodeInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceNodeBackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceNodeBackupArgs $;

        public Builder() {
            $ = new BdsInstanceNodeBackupArgs();
        }

        public Builder(BdsInstanceNodeBackupArgs defaults) {
            $ = new BdsInstanceNodeBackupArgs(Objects.requireNonNull(defaults));
        }

        public Builder backupConfigId(@Nullable Output<String> backupConfigId) {
            $.backupConfigId = backupConfigId;
            return this;
        }

        public Builder backupConfigId(String backupConfigId) {
            return backupConfigId(Output.of(backupConfigId));
        }

        /**
         * @param backupType Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
         * 
         * @return builder
         * 
         */
        public Builder backupType(Output<String> backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param backupType Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
         * 
         * @return builder
         * 
         */
        public Builder backupType(String backupType) {
            return backupType(Output.of(backupType));
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(Output<String> bdsInstanceId) {
            $.bdsInstanceId = bdsInstanceId;
            return this;
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(String bdsInstanceId) {
            return bdsInstanceId(Output.of(bdsInstanceId));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param levelTypeDetails Details of the type of level used to trigger the creation of a new node backup.
         * 
         * @return builder
         * 
         */
        public Builder levelTypeDetails(Output<BdsInstanceNodeBackupLevelTypeDetailsArgs> levelTypeDetails) {
            $.levelTypeDetails = levelTypeDetails;
            return this;
        }

        /**
         * @param levelTypeDetails Details of the type of level used to trigger the creation of a new node backup.
         * 
         * @return builder
         * 
         */
        public Builder levelTypeDetails(BdsInstanceNodeBackupLevelTypeDetailsArgs levelTypeDetails) {
            return levelTypeDetails(Output.of(levelTypeDetails));
        }

        public Builder nodeInstanceId(@Nullable Output<String> nodeInstanceId) {
            $.nodeInstanceId = nodeInstanceId;
            return this;
        }

        public Builder nodeInstanceId(String nodeInstanceId) {
            return nodeInstanceId(Output.of(nodeInstanceId));
        }

        public BdsInstanceNodeBackupArgs build() {
            if ($.backupType == null) {
                throw new MissingRequiredPropertyException("BdsInstanceNodeBackupArgs", "backupType");
            }
            if ($.bdsInstanceId == null) {
                throw new MissingRequiredPropertyException("BdsInstanceNodeBackupArgs", "bdsInstanceId");
            }
            if ($.levelTypeDetails == null) {
                throw new MissingRequiredPropertyException("BdsInstanceNodeBackupArgs", "levelTypeDetails");
            }
            return $;
        }
    }

}
