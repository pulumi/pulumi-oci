// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceOperationCertificateManagementsManagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceOperationCertificateManagementsManagementArgs Empty = new BdsInstanceOperationCertificateManagementsManagementArgs();

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="bdsInstanceId", required=true)
    private Output<String> bdsInstanceId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Output<String> bdsInstanceId() {
        return this.bdsInstanceId;
    }

    /**
     * Base-64 encoded password for the cluster admin user.
     * 
     */
    @Import(name="clusterAdminPassword", required=true)
    private Output<String> clusterAdminPassword;

    /**
     * @return Base-64 encoded password for the cluster admin user.
     * 
     */
    public Output<String> clusterAdminPassword() {
        return this.clusterAdminPassword;
    }

    /**
     * (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     */
    @Import(name="enableOperationCertificateManagement", required=true)
    private Output<Boolean> enableOperationCertificateManagement;

    /**
     * @return (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     */
    public Output<Boolean> enableOperationCertificateManagement() {
        return this.enableOperationCertificateManagement;
    }

    /**
     * List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
     * 
     */
    @Import(name="hostCertDetails")
    private @Nullable Output<List<BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs>> hostCertDetails;

    /**
     * @return List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
     * 
     */
    public Optional<Output<List<BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs>>> hostCertDetails() {
        return Optional.ofNullable(this.hostCertDetails);
    }

    /**
     * (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management&#39;s value action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="renewOperationCertificateManagement", required=true)
    private Output<Boolean> renewOperationCertificateManagement;

    /**
     * @return (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management&#39;s value action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Boolean> renewOperationCertificateManagement() {
        return this.renewOperationCertificateManagement;
    }

    /**
     * Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
     * 
     */
    @Import(name="rootCertificate")
    private @Nullable Output<String> rootCertificate;

    /**
     * @return Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
     * 
     */
    public Optional<Output<String>> rootCertificate() {
        return Optional.ofNullable(this.rootCertificate);
    }

    /**
     * Base-64 encoded password for CA certificate&#39;s private key. This value can be empty.
     * 
     */
    @Import(name="serverKeyPassword")
    private @Nullable Output<String> serverKeyPassword;

    /**
     * @return Base-64 encoded password for CA certificate&#39;s private key. This value can be empty.
     * 
     */
    public Optional<Output<String>> serverKeyPassword() {
        return Optional.ofNullable(this.serverKeyPassword);
    }

    /**
     * List of services for which certificate needs to be enabled.
     * 
     */
    @Import(name="services", required=true)
    private Output<List<String>> services;

    /**
     * @return List of services for which certificate needs to be enabled.
     * 
     */
    public Output<List<String>> services() {
        return this.services;
    }

    private BdsInstanceOperationCertificateManagementsManagementArgs() {}

    private BdsInstanceOperationCertificateManagementsManagementArgs(BdsInstanceOperationCertificateManagementsManagementArgs $) {
        this.bdsInstanceId = $.bdsInstanceId;
        this.clusterAdminPassword = $.clusterAdminPassword;
        this.enableOperationCertificateManagement = $.enableOperationCertificateManagement;
        this.hostCertDetails = $.hostCertDetails;
        this.renewOperationCertificateManagement = $.renewOperationCertificateManagement;
        this.rootCertificate = $.rootCertificate;
        this.serverKeyPassword = $.serverKeyPassword;
        this.services = $.services;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceOperationCertificateManagementsManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceOperationCertificateManagementsManagementArgs $;

        public Builder() {
            $ = new BdsInstanceOperationCertificateManagementsManagementArgs();
        }

        public Builder(BdsInstanceOperationCertificateManagementsManagementArgs defaults) {
            $ = new BdsInstanceOperationCertificateManagementsManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(Output<String> bdsInstanceId) {
            $.bdsInstanceId = bdsInstanceId;
            return this;
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(String bdsInstanceId) {
            return bdsInstanceId(Output.of(bdsInstanceId));
        }

        /**
         * @param clusterAdminPassword Base-64 encoded password for the cluster admin user.
         * 
         * @return builder
         * 
         */
        public Builder clusterAdminPassword(Output<String> clusterAdminPassword) {
            $.clusterAdminPassword = clusterAdminPassword;
            return this;
        }

        /**
         * @param clusterAdminPassword Base-64 encoded password for the cluster admin user.
         * 
         * @return builder
         * 
         */
        public Builder clusterAdminPassword(String clusterAdminPassword) {
            return clusterAdminPassword(Output.of(clusterAdminPassword));
        }

        /**
         * @param enableOperationCertificateManagement (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * @return builder
         * 
         */
        public Builder enableOperationCertificateManagement(Output<Boolean> enableOperationCertificateManagement) {
            $.enableOperationCertificateManagement = enableOperationCertificateManagement;
            return this;
        }

        /**
         * @param enableOperationCertificateManagement (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * @return builder
         * 
         */
        public Builder enableOperationCertificateManagement(Boolean enableOperationCertificateManagement) {
            return enableOperationCertificateManagement(Output.of(enableOperationCertificateManagement));
        }

        /**
         * @param hostCertDetails List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
         * 
         * @return builder
         * 
         */
        public Builder hostCertDetails(@Nullable Output<List<BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs>> hostCertDetails) {
            $.hostCertDetails = hostCertDetails;
            return this;
        }

        /**
         * @param hostCertDetails List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
         * 
         * @return builder
         * 
         */
        public Builder hostCertDetails(List<BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs> hostCertDetails) {
            return hostCertDetails(Output.of(hostCertDetails));
        }

        /**
         * @param hostCertDetails List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
         * 
         * @return builder
         * 
         */
        public Builder hostCertDetails(BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs... hostCertDetails) {
            return hostCertDetails(List.of(hostCertDetails));
        }

        /**
         * @param renewOperationCertificateManagement (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management&#39;s value action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder renewOperationCertificateManagement(Output<Boolean> renewOperationCertificateManagement) {
            $.renewOperationCertificateManagement = renewOperationCertificateManagement;
            return this;
        }

        /**
         * @param renewOperationCertificateManagement (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management&#39;s value action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder renewOperationCertificateManagement(Boolean renewOperationCertificateManagement) {
            return renewOperationCertificateManagement(Output.of(renewOperationCertificateManagement));
        }

        /**
         * @param rootCertificate Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
         * 
         * @return builder
         * 
         */
        public Builder rootCertificate(@Nullable Output<String> rootCertificate) {
            $.rootCertificate = rootCertificate;
            return this;
        }

        /**
         * @param rootCertificate Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
         * 
         * @return builder
         * 
         */
        public Builder rootCertificate(String rootCertificate) {
            return rootCertificate(Output.of(rootCertificate));
        }

        /**
         * @param serverKeyPassword Base-64 encoded password for CA certificate&#39;s private key. This value can be empty.
         * 
         * @return builder
         * 
         */
        public Builder serverKeyPassword(@Nullable Output<String> serverKeyPassword) {
            $.serverKeyPassword = serverKeyPassword;
            return this;
        }

        /**
         * @param serverKeyPassword Base-64 encoded password for CA certificate&#39;s private key. This value can be empty.
         * 
         * @return builder
         * 
         */
        public Builder serverKeyPassword(String serverKeyPassword) {
            return serverKeyPassword(Output.of(serverKeyPassword));
        }

        /**
         * @param services List of services for which certificate needs to be enabled.
         * 
         * @return builder
         * 
         */
        public Builder services(Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services List of services for which certificate needs to be enabled.
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services List of services for which certificate needs to be enabled.
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        public BdsInstanceOperationCertificateManagementsManagementArgs build() {
            if ($.bdsInstanceId == null) {
                throw new MissingRequiredPropertyException("BdsInstanceOperationCertificateManagementsManagementArgs", "bdsInstanceId");
            }
            if ($.clusterAdminPassword == null) {
                throw new MissingRequiredPropertyException("BdsInstanceOperationCertificateManagementsManagementArgs", "clusterAdminPassword");
            }
            if ($.enableOperationCertificateManagement == null) {
                throw new MissingRequiredPropertyException("BdsInstanceOperationCertificateManagementsManagementArgs", "enableOperationCertificateManagement");
            }
            if ($.renewOperationCertificateManagement == null) {
                throw new MissingRequiredPropertyException("BdsInstanceOperationCertificateManagementsManagementArgs", "renewOperationCertificateManagement");
            }
            if ($.services == null) {
                throw new MissingRequiredPropertyException("BdsInstanceOperationCertificateManagementsManagementArgs", "services");
            }
            return $;
        }
    }

}
