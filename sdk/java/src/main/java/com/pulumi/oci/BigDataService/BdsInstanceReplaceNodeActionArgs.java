// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceReplaceNodeActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceReplaceNodeActionArgs Empty = new BdsInstanceReplaceNodeActionArgs();

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="bdsInstanceId", required=true)
    private Output<String> bdsInstanceId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Output<String> bdsInstanceId() {
        return this.bdsInstanceId;
    }

    /**
     * Base-64 encoded password for the cluster admin user.
     * 
     */
    @Import(name="clusterAdminPassword", required=true)
    private Output<String> clusterAdminPassword;

    /**
     * @return Base-64 encoded password for the cluster admin user.
     * 
     */
    public Output<String> clusterAdminPassword() {
        return this.clusterAdminPassword;
    }

    /**
     * The id of the nodeBackup to use for replacing the node.
     * 
     */
    @Import(name="nodeBackupId", required=true)
    private Output<String> nodeBackupId;

    /**
     * @return The id of the nodeBackup to use for replacing the node.
     * 
     */
    public Output<String> nodeBackupId() {
        return this.nodeBackupId;
    }

    /**
     * Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
     * 
     */
    @Import(name="nodeHostName", required=true)
    private Output<String> nodeHostName;

    /**
     * @return Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
     * 
     */
    public Output<String> nodeHostName() {
        return this.nodeHostName;
    }

    /**
     * Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    private BdsInstanceReplaceNodeActionArgs() {}

    private BdsInstanceReplaceNodeActionArgs(BdsInstanceReplaceNodeActionArgs $) {
        this.bdsInstanceId = $.bdsInstanceId;
        this.clusterAdminPassword = $.clusterAdminPassword;
        this.nodeBackupId = $.nodeBackupId;
        this.nodeHostName = $.nodeHostName;
        this.shape = $.shape;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceReplaceNodeActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceReplaceNodeActionArgs $;

        public Builder() {
            $ = new BdsInstanceReplaceNodeActionArgs();
        }

        public Builder(BdsInstanceReplaceNodeActionArgs defaults) {
            $ = new BdsInstanceReplaceNodeActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(Output<String> bdsInstanceId) {
            $.bdsInstanceId = bdsInstanceId;
            return this;
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(String bdsInstanceId) {
            return bdsInstanceId(Output.of(bdsInstanceId));
        }

        /**
         * @param clusterAdminPassword Base-64 encoded password for the cluster admin user.
         * 
         * @return builder
         * 
         */
        public Builder clusterAdminPassword(Output<String> clusterAdminPassword) {
            $.clusterAdminPassword = clusterAdminPassword;
            return this;
        }

        /**
         * @param clusterAdminPassword Base-64 encoded password for the cluster admin user.
         * 
         * @return builder
         * 
         */
        public Builder clusterAdminPassword(String clusterAdminPassword) {
            return clusterAdminPassword(Output.of(clusterAdminPassword));
        }

        /**
         * @param nodeBackupId The id of the nodeBackup to use for replacing the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeBackupId(Output<String> nodeBackupId) {
            $.nodeBackupId = nodeBackupId;
            return this;
        }

        /**
         * @param nodeBackupId The id of the nodeBackup to use for replacing the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeBackupId(String nodeBackupId) {
            return nodeBackupId(Output.of(nodeBackupId));
        }

        /**
         * @param nodeHostName Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
         * 
         * @return builder
         * 
         */
        public Builder nodeHostName(Output<String> nodeHostName) {
            $.nodeHostName = nodeHostName;
            return this;
        }

        /**
         * @param nodeHostName Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
         * 
         * @return builder
         * 
         */
        public Builder nodeHostName(String nodeHostName) {
            return nodeHostName(Output.of(nodeHostName));
        }

        /**
         * @param shape Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        public BdsInstanceReplaceNodeActionArgs build() {
            if ($.bdsInstanceId == null) {
                throw new MissingRequiredPropertyException("BdsInstanceReplaceNodeActionArgs", "bdsInstanceId");
            }
            if ($.clusterAdminPassword == null) {
                throw new MissingRequiredPropertyException("BdsInstanceReplaceNodeActionArgs", "clusterAdminPassword");
            }
            if ($.nodeBackupId == null) {
                throw new MissingRequiredPropertyException("BdsInstanceReplaceNodeActionArgs", "nodeBackupId");
            }
            if ($.nodeHostName == null) {
                throw new MissingRequiredPropertyException("BdsInstanceReplaceNodeActionArgs", "nodeHostName");
            }
            return $;
        }
    }

}
