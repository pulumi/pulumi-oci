// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs Empty = new BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs();

    /**
     * A flag denoting whether capacity is available.
     * 
     */
    @Import(name="availabilityStatus")
    private @Nullable Output<String> availabilityStatus;

    /**
     * @return A flag denoting whether capacity is available.
     * 
     */
    public Optional<Output<String>> availabilityStatus() {
        return Optional.ofNullable(this.availabilityStatus);
    }

    /**
     * The total number of new cluster nodes that can be created with the specified shape configuration.
     * 
     */
    @Import(name="availableCount")
    private @Nullable Output<String> availableCount;

    /**
     * @return The total number of new cluster nodes that can be created with the specified shape configuration.
     * 
     */
    public Optional<Output<String>> availableCount() {
        return Optional.ofNullable(this.availableCount);
    }

    private BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs() {}

    private BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs(BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs $) {
        this.availabilityStatus = $.availabilityStatus;
        this.availableCount = $.availableCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs $;

        public Builder() {
            $ = new BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs();
        }

        public Builder(BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs defaults) {
            $ = new BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityStatus A flag denoting whether capacity is available.
         * 
         * @return builder
         * 
         */
        public Builder availabilityStatus(@Nullable Output<String> availabilityStatus) {
            $.availabilityStatus = availabilityStatus;
            return this;
        }

        /**
         * @param availabilityStatus A flag denoting whether capacity is available.
         * 
         * @return builder
         * 
         */
        public Builder availabilityStatus(String availabilityStatus) {
            return availabilityStatus(Output.of(availabilityStatus));
        }

        /**
         * @param availableCount The total number of new cluster nodes that can be created with the specified shape configuration.
         * 
         * @return builder
         * 
         */
        public Builder availableCount(@Nullable Output<String> availableCount) {
            $.availableCount = availableCount;
            return this;
        }

        /**
         * @param availableCount The total number of new cluster nodes that can be created with the specified shape configuration.
         * 
         * @return builder
         * 
         */
        public Builder availableCount(String availableCount) {
            return availableCount(Output.of(availableCount));
        }

        public BdsCapacityReportShapeAvailabilityDomainLevelCapacityReportCapacityAvailabilityArgs build() {
            return $;
        }
    }

}
