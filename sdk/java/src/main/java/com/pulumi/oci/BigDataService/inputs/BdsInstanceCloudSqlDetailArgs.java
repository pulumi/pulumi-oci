// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceCloudSqlDetailKerberosDetailArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceCloudSqlDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceCloudSqlDetailArgs Empty = new BdsInstanceCloudSqlDetailArgs();

    /**
     * The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    @Import(name="blockVolumeSizeInGbs")
    private @Nullable Output<String> blockVolumeSizeInGbs;

    /**
     * @return The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    public Optional<Output<String>> blockVolumeSizeInGbs() {
        return Optional.ofNullable(this.blockVolumeSizeInGbs);
    }

    /**
     * IP address of the node
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address of the node
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Boolean flag specifying whether or not are Kerberos principals mapped to database users.
     * 
     */
    @Import(name="isKerberosMappedToDatabaseUsers")
    private @Nullable Output<Boolean> isKerberosMappedToDatabaseUsers;

    /**
     * @return Boolean flag specifying whether or not are Kerberos principals mapped to database users.
     * 
     */
    public Optional<Output<Boolean>> isKerberosMappedToDatabaseUsers() {
        return Optional.ofNullable(this.isKerberosMappedToDatabaseUsers);
    }

    /**
     * Details about Kerberos principals
     * 
     */
    @Import(name="kerberosDetails")
    private @Nullable Output<List<BdsInstanceCloudSqlDetailKerberosDetailArgs>> kerberosDetails;

    /**
     * @return Details about Kerberos principals
     * 
     */
    public Optional<Output<List<BdsInstanceCloudSqlDetailKerberosDetailArgs>>> kerberosDetails() {
        return Optional.ofNullable(this.kerberosDetails);
    }

    /**
     * The total amount of memory available to the node, in gigabytes.
     * 
     */
    @Import(name="memoryInGbs")
    private @Nullable Output<Integer> memoryInGbs;

    /**
     * @return The total amount of memory available to the node, in gigabytes.
     * 
     */
    public Optional<Output<Integer>> memoryInGbs() {
        return Optional.ofNullable(this.memoryInGbs);
    }

    /**
     * The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    @Import(name="nvmes")
    private @Nullable Output<Integer> nvmes;

    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    public Optional<Output<Integer>> nvmes() {
        return Optional.ofNullable(this.nvmes);
    }

    /**
     * The total number of OCPUs available to the node.
     * 
     */
    @Import(name="ocpus")
    private @Nullable Output<Integer> ocpus;

    /**
     * @return The total number of OCPUs available to the node.
     * 
     */
    public Optional<Output<Integer>> ocpus() {
        return Optional.ofNullable(this.ocpus);
    }

    /**
     * Shape of the node
     * 
     */
    @Import(name="shape", required=true)
    private Output<String> shape;

    /**
     * @return Shape of the node
     * 
     */
    public Output<String> shape() {
        return this.shape;
    }

    private BdsInstanceCloudSqlDetailArgs() {}

    private BdsInstanceCloudSqlDetailArgs(BdsInstanceCloudSqlDetailArgs $) {
        this.blockVolumeSizeInGbs = $.blockVolumeSizeInGbs;
        this.ipAddress = $.ipAddress;
        this.isKerberosMappedToDatabaseUsers = $.isKerberosMappedToDatabaseUsers;
        this.kerberosDetails = $.kerberosDetails;
        this.memoryInGbs = $.memoryInGbs;
        this.nvmes = $.nvmes;
        this.ocpus = $.ocpus;
        this.shape = $.shape;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceCloudSqlDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceCloudSqlDetailArgs $;

        public Builder() {
            $ = new BdsInstanceCloudSqlDetailArgs();
        }

        public Builder(BdsInstanceCloudSqlDetailArgs defaults) {
            $ = new BdsInstanceCloudSqlDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockVolumeSizeInGbs The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeSizeInGbs(@Nullable Output<String> blockVolumeSizeInGbs) {
            $.blockVolumeSizeInGbs = blockVolumeSizeInGbs;
            return this;
        }

        /**
         * @param blockVolumeSizeInGbs The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeSizeInGbs(String blockVolumeSizeInGbs) {
            return blockVolumeSizeInGbs(Output.of(blockVolumeSizeInGbs));
        }

        /**
         * @param ipAddress IP address of the node
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address of the node
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param isKerberosMappedToDatabaseUsers Boolean flag specifying whether or not are Kerberos principals mapped to database users.
         * 
         * @return builder
         * 
         */
        public Builder isKerberosMappedToDatabaseUsers(@Nullable Output<Boolean> isKerberosMappedToDatabaseUsers) {
            $.isKerberosMappedToDatabaseUsers = isKerberosMappedToDatabaseUsers;
            return this;
        }

        /**
         * @param isKerberosMappedToDatabaseUsers Boolean flag specifying whether or not are Kerberos principals mapped to database users.
         * 
         * @return builder
         * 
         */
        public Builder isKerberosMappedToDatabaseUsers(Boolean isKerberosMappedToDatabaseUsers) {
            return isKerberosMappedToDatabaseUsers(Output.of(isKerberosMappedToDatabaseUsers));
        }

        /**
         * @param kerberosDetails Details about Kerberos principals
         * 
         * @return builder
         * 
         */
        public Builder kerberosDetails(@Nullable Output<List<BdsInstanceCloudSqlDetailKerberosDetailArgs>> kerberosDetails) {
            $.kerberosDetails = kerberosDetails;
            return this;
        }

        /**
         * @param kerberosDetails Details about Kerberos principals
         * 
         * @return builder
         * 
         */
        public Builder kerberosDetails(List<BdsInstanceCloudSqlDetailKerberosDetailArgs> kerberosDetails) {
            return kerberosDetails(Output.of(kerberosDetails));
        }

        /**
         * @param kerberosDetails Details about Kerberos principals
         * 
         * @return builder
         * 
         */
        public Builder kerberosDetails(BdsInstanceCloudSqlDetailKerberosDetailArgs... kerberosDetails) {
            return kerberosDetails(List.of(kerberosDetails));
        }

        /**
         * @param memoryInGbs The total amount of memory available to the node, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder memoryInGbs(@Nullable Output<Integer> memoryInGbs) {
            $.memoryInGbs = memoryInGbs;
            return this;
        }

        /**
         * @param memoryInGbs The total amount of memory available to the node, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder memoryInGbs(Integer memoryInGbs) {
            return memoryInGbs(Output.of(memoryInGbs));
        }

        /**
         * @param nvmes The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
         * 
         * @return builder
         * 
         */
        public Builder nvmes(@Nullable Output<Integer> nvmes) {
            $.nvmes = nvmes;
            return this;
        }

        /**
         * @param nvmes The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
         * 
         * @return builder
         * 
         */
        public Builder nvmes(Integer nvmes) {
            return nvmes(Output.of(nvmes));
        }

        /**
         * @param ocpus The total number of OCPUs available to the node.
         * 
         * @return builder
         * 
         */
        public Builder ocpus(@Nullable Output<Integer> ocpus) {
            $.ocpus = ocpus;
            return this;
        }

        /**
         * @param ocpus The total number of OCPUs available to the node.
         * 
         * @return builder
         * 
         */
        public Builder ocpus(Integer ocpus) {
            return ocpus(Output.of(ocpus));
        }

        /**
         * @param shape Shape of the node
         * 
         * @return builder
         * 
         */
        public Builder shape(Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape Shape of the node
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        public BdsInstanceCloudSqlDetailArgs build() {
            if ($.shape == null) {
                throw new MissingRequiredPropertyException("BdsInstanceCloudSqlDetailArgs", "shape");
            }
            return $;
        }
    }

}
