// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceIdentityConfigurationUpstConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceIdentityConfigurationUpstConfigurationArgs Empty = new BdsInstanceIdentityConfigurationUpstConfigurationArgs();

    /**
     * The kerberos keytab content used for creating identity propagation trust config, in base64 format
     * 
     */
    @Import(name="keytabContent")
    private @Nullable Output<String> keytabContent;

    /**
     * @return The kerberos keytab content used for creating identity propagation trust config, in base64 format
     * 
     */
    public Optional<Output<String>> keytabContent() {
        return Optional.ofNullable(this.keytabContent);
    }

    /**
     * Master Encryption key used for encrypting token exchange keytab.
     * 
     */
    @Import(name="masterEncryptionKeyId")
    private @Nullable Output<String> masterEncryptionKeyId;

    /**
     * @return Master Encryption key used for encrypting token exchange keytab.
     * 
     */
    public Optional<Output<String>> masterEncryptionKeyId() {
        return Optional.ofNullable(this.masterEncryptionKeyId);
    }

    /**
     * Secret ID for token exchange keytab
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return Secret ID for token exchange keytab
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * Lifecycle state of the UPST config
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Lifecycle state of the UPST config
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    @Import(name="timeTokenExchangeKeytabLastRefreshed")
    private @Nullable Output<String> timeTokenExchangeKeytabLastRefreshed;

    /**
     * @return Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeTokenExchangeKeytabLastRefreshed() {
        return Optional.ofNullable(this.timeTokenExchangeKeytabLastRefreshed);
    }

    /**
     * Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * Token exchange kerberos Principal name in cluster
     * 
     */
    @Import(name="tokenExchangePrincipalName")
    private @Nullable Output<String> tokenExchangePrincipalName;

    /**
     * @return Token exchange kerberos Principal name in cluster
     * 
     */
    public Optional<Output<String>> tokenExchangePrincipalName() {
        return Optional.ofNullable(this.tokenExchangePrincipalName);
    }

    /**
     * The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private BdsInstanceIdentityConfigurationUpstConfigurationArgs() {}

    private BdsInstanceIdentityConfigurationUpstConfigurationArgs(BdsInstanceIdentityConfigurationUpstConfigurationArgs $) {
        this.keytabContent = $.keytabContent;
        this.masterEncryptionKeyId = $.masterEncryptionKeyId;
        this.secretId = $.secretId;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeTokenExchangeKeytabLastRefreshed = $.timeTokenExchangeKeytabLastRefreshed;
        this.timeUpdated = $.timeUpdated;
        this.tokenExchangePrincipalName = $.tokenExchangePrincipalName;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceIdentityConfigurationUpstConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceIdentityConfigurationUpstConfigurationArgs $;

        public Builder() {
            $ = new BdsInstanceIdentityConfigurationUpstConfigurationArgs();
        }

        public Builder(BdsInstanceIdentityConfigurationUpstConfigurationArgs defaults) {
            $ = new BdsInstanceIdentityConfigurationUpstConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keytabContent The kerberos keytab content used for creating identity propagation trust config, in base64 format
         * 
         * @return builder
         * 
         */
        public Builder keytabContent(@Nullable Output<String> keytabContent) {
            $.keytabContent = keytabContent;
            return this;
        }

        /**
         * @param keytabContent The kerberos keytab content used for creating identity propagation trust config, in base64 format
         * 
         * @return builder
         * 
         */
        public Builder keytabContent(String keytabContent) {
            return keytabContent(Output.of(keytabContent));
        }

        /**
         * @param masterEncryptionKeyId Master Encryption key used for encrypting token exchange keytab.
         * 
         * @return builder
         * 
         */
        public Builder masterEncryptionKeyId(@Nullable Output<String> masterEncryptionKeyId) {
            $.masterEncryptionKeyId = masterEncryptionKeyId;
            return this;
        }

        /**
         * @param masterEncryptionKeyId Master Encryption key used for encrypting token exchange keytab.
         * 
         * @return builder
         * 
         */
        public Builder masterEncryptionKeyId(String masterEncryptionKeyId) {
            return masterEncryptionKeyId(Output.of(masterEncryptionKeyId));
        }

        /**
         * @param secretId Secret ID for token exchange keytab
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId Secret ID for token exchange keytab
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param state Lifecycle state of the UPST config
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Lifecycle state of the UPST config
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeTokenExchangeKeytabLastRefreshed Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeTokenExchangeKeytabLastRefreshed(@Nullable Output<String> timeTokenExchangeKeytabLastRefreshed) {
            $.timeTokenExchangeKeytabLastRefreshed = timeTokenExchangeKeytabLastRefreshed;
            return this;
        }

        /**
         * @param timeTokenExchangeKeytabLastRefreshed Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeTokenExchangeKeytabLastRefreshed(String timeTokenExchangeKeytabLastRefreshed) {
            return timeTokenExchangeKeytabLastRefreshed(Output.of(timeTokenExchangeKeytabLastRefreshed));
        }

        /**
         * @param timeUpdated Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param tokenExchangePrincipalName Token exchange kerberos Principal name in cluster
         * 
         * @return builder
         * 
         */
        public Builder tokenExchangePrincipalName(@Nullable Output<String> tokenExchangePrincipalName) {
            $.tokenExchangePrincipalName = tokenExchangePrincipalName;
            return this;
        }

        /**
         * @param tokenExchangePrincipalName Token exchange kerberos Principal name in cluster
         * 
         * @return builder
         * 
         */
        public Builder tokenExchangePrincipalName(String tokenExchangePrincipalName) {
            return tokenExchangePrincipalName(Output.of(tokenExchangePrincipalName));
        }

        /**
         * @param vaultId The instance OCID of the node, which is the resource from which the node backup was acquired.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The instance OCID of the node, which is the resource from which the node backup was acquired.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public BdsInstanceIdentityConfigurationUpstConfigurationArgs build() {
            return $;
        }
    }

}
