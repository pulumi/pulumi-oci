// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs Empty = new BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs();

    /**
     * (Updatable) OCID of the master encryption key in vault for encrypting token exchange service principal keytab, required for activating UPST config
     * 
     */
    @Import(name="masterEncryptionKeyId")
    private @Nullable Output<String> masterEncryptionKeyId;

    /**
     * @return (Updatable) OCID of the master encryption key in vault for encrypting token exchange service principal keytab, required for activating UPST config
     * 
     */
    public Optional<Output<String>> masterEncryptionKeyId() {
        return Optional.ofNullable(this.masterEncryptionKeyId);
    }

    /**
     * (Updatable) OCID of the vault to store token exchange service principal keyta, required for activating UPST config
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return (Updatable) OCID of the vault to store token exchange service principal keyta, required for activating UPST config
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs() {}

    private BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs(BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs $) {
        this.masterEncryptionKeyId = $.masterEncryptionKeyId;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs $;

        public Builder() {
            $ = new BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs();
        }

        public Builder(BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs defaults) {
            $ = new BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param masterEncryptionKeyId (Updatable) OCID of the master encryption key in vault for encrypting token exchange service principal keytab, required for activating UPST config
         * 
         * @return builder
         * 
         */
        public Builder masterEncryptionKeyId(@Nullable Output<String> masterEncryptionKeyId) {
            $.masterEncryptionKeyId = masterEncryptionKeyId;
            return this;
        }

        /**
         * @param masterEncryptionKeyId (Updatable) OCID of the master encryption key in vault for encrypting token exchange service principal keytab, required for activating UPST config
         * 
         * @return builder
         * 
         */
        public Builder masterEncryptionKeyId(String masterEncryptionKeyId) {
            return masterEncryptionKeyId(Output.of(masterEncryptionKeyId));
        }

        /**
         * @param vaultId (Updatable) OCID of the vault to store token exchange service principal keyta, required for activating UPST config
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId (Updatable) OCID of the vault to store token exchange service principal keyta, required for activating UPST config
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public BdsInstanceIdentityConfigurationUpstConfigurationDetailsArgs build() {
            return $;
        }
    }

}
