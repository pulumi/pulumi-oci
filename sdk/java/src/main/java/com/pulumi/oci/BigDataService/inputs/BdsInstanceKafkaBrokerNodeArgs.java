// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceKafkaBrokerNodeShapeConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceKafkaBrokerNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceKafkaBrokerNodeArgs Empty = new BdsInstanceKafkaBrokerNodeArgs();

    /**
     * The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    @Import(name="blockVolumeSizeInGbs")
    private @Nullable Output<String> blockVolumeSizeInGbs;

    /**
     * @return The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    public Optional<Output<String>> blockVolumeSizeInGbs() {
        return Optional.ofNullable(this.blockVolumeSizeInGbs);
    }

    @Import(name="numberOfKafkaNodes", required=true)
    private Output<Integer> numberOfKafkaNodes;

    public Output<Integer> numberOfKafkaNodes() {
        return this.numberOfKafkaNodes;
    }

    /**
     * Shape of the node
     * 
     */
    @Import(name="shape", required=true)
    private Output<String> shape;

    /**
     * @return Shape of the node
     * 
     */
    public Output<String> shape() {
        return this.shape;
    }

    /**
     * The shape configuration requested for the node.
     * 
     */
    @Import(name="shapeConfig")
    private @Nullable Output<BdsInstanceKafkaBrokerNodeShapeConfigArgs> shapeConfig;

    /**
     * @return The shape configuration requested for the node.
     * 
     */
    public Optional<Output<BdsInstanceKafkaBrokerNodeShapeConfigArgs>> shapeConfig() {
        return Optional.ofNullable(this.shapeConfig);
    }

    /**
     * The OCID of the subnet in which the node should be created
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The OCID of the subnet in which the node should be created
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private BdsInstanceKafkaBrokerNodeArgs() {}

    private BdsInstanceKafkaBrokerNodeArgs(BdsInstanceKafkaBrokerNodeArgs $) {
        this.blockVolumeSizeInGbs = $.blockVolumeSizeInGbs;
        this.numberOfKafkaNodes = $.numberOfKafkaNodes;
        this.shape = $.shape;
        this.shapeConfig = $.shapeConfig;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceKafkaBrokerNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceKafkaBrokerNodeArgs $;

        public Builder() {
            $ = new BdsInstanceKafkaBrokerNodeArgs();
        }

        public Builder(BdsInstanceKafkaBrokerNodeArgs defaults) {
            $ = new BdsInstanceKafkaBrokerNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockVolumeSizeInGbs The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeSizeInGbs(@Nullable Output<String> blockVolumeSizeInGbs) {
            $.blockVolumeSizeInGbs = blockVolumeSizeInGbs;
            return this;
        }

        /**
         * @param blockVolumeSizeInGbs The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
         * 
         * @return builder
         * 
         */
        public Builder blockVolumeSizeInGbs(String blockVolumeSizeInGbs) {
            return blockVolumeSizeInGbs(Output.of(blockVolumeSizeInGbs));
        }

        public Builder numberOfKafkaNodes(Output<Integer> numberOfKafkaNodes) {
            $.numberOfKafkaNodes = numberOfKafkaNodes;
            return this;
        }

        public Builder numberOfKafkaNodes(Integer numberOfKafkaNodes) {
            return numberOfKafkaNodes(Output.of(numberOfKafkaNodes));
        }

        /**
         * @param shape Shape of the node
         * 
         * @return builder
         * 
         */
        public Builder shape(Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape Shape of the node
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param shapeConfig The shape configuration requested for the node.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(@Nullable Output<BdsInstanceKafkaBrokerNodeShapeConfigArgs> shapeConfig) {
            $.shapeConfig = shapeConfig;
            return this;
        }

        /**
         * @param shapeConfig The shape configuration requested for the node.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(BdsInstanceKafkaBrokerNodeShapeConfigArgs shapeConfig) {
            return shapeConfig(Output.of(shapeConfig));
        }

        /**
         * @param subnetId The OCID of the subnet in which the node should be created
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet in which the node should be created
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public BdsInstanceKafkaBrokerNodeArgs build() {
            if ($.numberOfKafkaNodes == null) {
                throw new MissingRequiredPropertyException("BdsInstanceKafkaBrokerNodeArgs", "numberOfKafkaNodes");
            }
            if ($.shape == null) {
                throw new MissingRequiredPropertyException("BdsInstanceKafkaBrokerNodeArgs", "shape");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("BdsInstanceKafkaBrokerNodeArgs", "subnetId");
            }
            return $;
        }
    }

}
