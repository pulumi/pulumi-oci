// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceNodeAttachedBlockVolumeArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceNodeArgs Empty = new BdsInstanceNodeArgs();

    /**
     * The list of block volumes attached to a given node.
     * 
     */
    @Import(name="attachedBlockVolumes")
    private @Nullable Output<List<BdsInstanceNodeAttachedBlockVolumeArgs>> attachedBlockVolumes;

    /**
     * @return The list of block volumes attached to a given node.
     * 
     */
    public Optional<Output<List<BdsInstanceNodeAttachedBlockVolumeArgs>>> attachedBlockVolumes() {
        return Optional.ofNullable(this.attachedBlockVolumes);
    }

    /**
     * The name of the availability domain the node is running in
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return The name of the availability domain the node is running in
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * (Updatable) Name of the BDS instance
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) Name of the BDS instance
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name of the fault domain the node is running in
     * 
     */
    @Import(name="faultDomain")
    private @Nullable Output<String> faultDomain;

    /**
     * @return The name of the fault domain the node is running in
     * 
     */
    public Optional<Output<String>> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }

    /**
     * The fully-qualified hostname (FQDN) of the node
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The fully-qualified hostname (FQDN) of the node
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The OCID of the image from which the node was created
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The OCID of the image from which the node was created
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The OCID of the underlying compute instance
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The OCID of the underlying compute instance
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * IP address of the node
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address of the node
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Indicates if the node requires a reboot to either reflect the latest os kernel or take actions for maintenance reboot.
     * 
     */
    @Import(name="isRebootRequired")
    private @Nullable Output<Boolean> isRebootRequired;

    /**
     * @return Indicates if the node requires a reboot to either reflect the latest os kernel or take actions for maintenance reboot.
     * 
     */
    public Optional<Output<Boolean>> isRebootRequired() {
        return Optional.ofNullable(this.isRebootRequired);
    }

    /**
     * The aggregate size of all local disks, in gigabytes. If the instance does not have any local disks, this field is null.
     * 
     */
    @Import(name="localDisksTotalSizeInGbs")
    private @Nullable Output<Double> localDisksTotalSizeInGbs;

    /**
     * @return The aggregate size of all local disks, in gigabytes. If the instance does not have any local disks, this field is null.
     * 
     */
    public Optional<Output<Double>> localDisksTotalSizeInGbs() {
        return Optional.ofNullable(this.localDisksTotalSizeInGbs);
    }

    /**
     * The total amount of memory available to the node, in gigabytes.
     * 
     */
    @Import(name="memoryInGbs")
    private @Nullable Output<Integer> memoryInGbs;

    /**
     * @return The total amount of memory available to the node, in gigabytes.
     * 
     */
    public Optional<Output<Integer>> memoryInGbs() {
        return Optional.ofNullable(this.memoryInGbs);
    }

    /**
     * The Big Data Service cluster node type.
     * 
     */
    @Import(name="nodeType")
    private @Nullable Output<String> nodeType;

    /**
     * @return The Big Data Service cluster node type.
     * 
     */
    public Optional<Output<String>> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }

    /**
     * The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    @Import(name="nvmes")
    private @Nullable Output<Integer> nvmes;

    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    public Optional<Output<Integer>> nvmes() {
        return Optional.ofNullable(this.nvmes);
    }

    /**
     * The total number of OCPUs available to the node.
     * 
     */
    @Import(name="ocpus")
    private @Nullable Output<Integer> ocpus;

    /**
     * @return The total number of OCPUs available to the node.
     * 
     */
    public Optional<Output<Integer>> ocpus() {
        return Optional.ofNullable(this.ocpus);
    }

    /**
     * BDS-assigned Operating System version for the node.
     * 
     */
    @Import(name="osVersion")
    private @Nullable Output<String> osVersion;

    /**
     * @return BDS-assigned Operating System version for the node.
     * 
     */
    public Optional<Output<String>> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * (Updatable) Shape of the node.
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return (Updatable) Shape of the node.
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * The fingerprint of the SSH key used for node access
     * 
     */
    @Import(name="sshFingerprint")
    private @Nullable Output<String> sshFingerprint;

    /**
     * @return The fingerprint of the SSH key used for node access
     * 
     */
    public Optional<Output<String>> sshFingerprint() {
        return Optional.ofNullable(this.sshFingerprint);
    }

    /**
     * (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The OCID of the subnet in which the node will be created.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The OCID of the subnet in which the node will be created.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The time the BDS instance was created. An RFC3339 formatted datetime string
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the BDS instance was created. An RFC3339 formatted datetime string
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
     * 
     */
    @Import(name="timeMaintenanceRebootDue")
    private @Nullable Output<String> timeMaintenanceRebootDue;

    /**
     * @return The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
     * 
     */
    public Optional<Output<String>> timeMaintenanceRebootDue() {
        return Optional.ofNullable(this.timeMaintenanceRebootDue);
    }

    private BdsInstanceNodeArgs() {}

    private BdsInstanceNodeArgs(BdsInstanceNodeArgs $) {
        this.attachedBlockVolumes = $.attachedBlockVolumes;
        this.availabilityDomain = $.availabilityDomain;
        this.displayName = $.displayName;
        this.faultDomain = $.faultDomain;
        this.hostname = $.hostname;
        this.imageId = $.imageId;
        this.instanceId = $.instanceId;
        this.ipAddress = $.ipAddress;
        this.isRebootRequired = $.isRebootRequired;
        this.localDisksTotalSizeInGbs = $.localDisksTotalSizeInGbs;
        this.memoryInGbs = $.memoryInGbs;
        this.nodeType = $.nodeType;
        this.nvmes = $.nvmes;
        this.ocpus = $.ocpus;
        this.osVersion = $.osVersion;
        this.shape = $.shape;
        this.sshFingerprint = $.sshFingerprint;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.timeCreated = $.timeCreated;
        this.timeMaintenanceRebootDue = $.timeMaintenanceRebootDue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceNodeArgs $;

        public Builder() {
            $ = new BdsInstanceNodeArgs();
        }

        public Builder(BdsInstanceNodeArgs defaults) {
            $ = new BdsInstanceNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedBlockVolumes The list of block volumes attached to a given node.
         * 
         * @return builder
         * 
         */
        public Builder attachedBlockVolumes(@Nullable Output<List<BdsInstanceNodeAttachedBlockVolumeArgs>> attachedBlockVolumes) {
            $.attachedBlockVolumes = attachedBlockVolumes;
            return this;
        }

        /**
         * @param attachedBlockVolumes The list of block volumes attached to a given node.
         * 
         * @return builder
         * 
         */
        public Builder attachedBlockVolumes(List<BdsInstanceNodeAttachedBlockVolumeArgs> attachedBlockVolumes) {
            return attachedBlockVolumes(Output.of(attachedBlockVolumes));
        }

        /**
         * @param attachedBlockVolumes The list of block volumes attached to a given node.
         * 
         * @return builder
         * 
         */
        public Builder attachedBlockVolumes(BdsInstanceNodeAttachedBlockVolumeArgs... attachedBlockVolumes) {
            return attachedBlockVolumes(List.of(attachedBlockVolumes));
        }

        /**
         * @param availabilityDomain The name of the availability domain the node is running in
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain The name of the availability domain the node is running in
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param displayName (Updatable) Name of the BDS instance
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Name of the BDS instance
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param faultDomain The name of the fault domain the node is running in
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(@Nullable Output<String> faultDomain) {
            $.faultDomain = faultDomain;
            return this;
        }

        /**
         * @param faultDomain The name of the fault domain the node is running in
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(String faultDomain) {
            return faultDomain(Output.of(faultDomain));
        }

        /**
         * @param hostname The fully-qualified hostname (FQDN) of the node
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The fully-qualified hostname (FQDN) of the node
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param imageId The OCID of the image from which the node was created
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The OCID of the image from which the node was created
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param instanceId The OCID of the underlying compute instance
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The OCID of the underlying compute instance
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param ipAddress IP address of the node
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address of the node
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param isRebootRequired Indicates if the node requires a reboot to either reflect the latest os kernel or take actions for maintenance reboot.
         * 
         * @return builder
         * 
         */
        public Builder isRebootRequired(@Nullable Output<Boolean> isRebootRequired) {
            $.isRebootRequired = isRebootRequired;
            return this;
        }

        /**
         * @param isRebootRequired Indicates if the node requires a reboot to either reflect the latest os kernel or take actions for maintenance reboot.
         * 
         * @return builder
         * 
         */
        public Builder isRebootRequired(Boolean isRebootRequired) {
            return isRebootRequired(Output.of(isRebootRequired));
        }

        /**
         * @param localDisksTotalSizeInGbs The aggregate size of all local disks, in gigabytes. If the instance does not have any local disks, this field is null.
         * 
         * @return builder
         * 
         */
        public Builder localDisksTotalSizeInGbs(@Nullable Output<Double> localDisksTotalSizeInGbs) {
            $.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            return this;
        }

        /**
         * @param localDisksTotalSizeInGbs The aggregate size of all local disks, in gigabytes. If the instance does not have any local disks, this field is null.
         * 
         * @return builder
         * 
         */
        public Builder localDisksTotalSizeInGbs(Double localDisksTotalSizeInGbs) {
            return localDisksTotalSizeInGbs(Output.of(localDisksTotalSizeInGbs));
        }

        /**
         * @param memoryInGbs The total amount of memory available to the node, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder memoryInGbs(@Nullable Output<Integer> memoryInGbs) {
            $.memoryInGbs = memoryInGbs;
            return this;
        }

        /**
         * @param memoryInGbs The total amount of memory available to the node, in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder memoryInGbs(Integer memoryInGbs) {
            return memoryInGbs(Output.of(memoryInGbs));
        }

        /**
         * @param nodeType The Big Data Service cluster node type.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(@Nullable Output<String> nodeType) {
            $.nodeType = nodeType;
            return this;
        }

        /**
         * @param nodeType The Big Data Service cluster node type.
         * 
         * @return builder
         * 
         */
        public Builder nodeType(String nodeType) {
            return nodeType(Output.of(nodeType));
        }

        /**
         * @param nvmes The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
         * 
         * @return builder
         * 
         */
        public Builder nvmes(@Nullable Output<Integer> nvmes) {
            $.nvmes = nvmes;
            return this;
        }

        /**
         * @param nvmes The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
         * 
         * @return builder
         * 
         */
        public Builder nvmes(Integer nvmes) {
            return nvmes(Output.of(nvmes));
        }

        /**
         * @param ocpus The total number of OCPUs available to the node.
         * 
         * @return builder
         * 
         */
        public Builder ocpus(@Nullable Output<Integer> ocpus) {
            $.ocpus = ocpus;
            return this;
        }

        /**
         * @param ocpus The total number of OCPUs available to the node.
         * 
         * @return builder
         * 
         */
        public Builder ocpus(Integer ocpus) {
            return ocpus(Output.of(ocpus));
        }

        /**
         * @param osVersion BDS-assigned Operating System version for the node.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(@Nullable Output<String> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        /**
         * @param osVersion BDS-assigned Operating System version for the node.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(String osVersion) {
            return osVersion(Output.of(osVersion));
        }

        /**
         * @param shape (Updatable) Shape of the node.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape (Updatable) Shape of the node.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param sshFingerprint The fingerprint of the SSH key used for node access
         * 
         * @return builder
         * 
         */
        public Builder sshFingerprint(@Nullable Output<String> sshFingerprint) {
            $.sshFingerprint = sshFingerprint;
            return this;
        }

        /**
         * @param sshFingerprint The fingerprint of the SSH key used for node access
         * 
         * @return builder
         * 
         */
        public Builder sshFingerprint(String sshFingerprint) {
            return sshFingerprint(Output.of(sshFingerprint));
        }

        /**
         * @param state (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetId The OCID of the subnet in which the node will be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet in which the node will be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param timeCreated The time the BDS instance was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the BDS instance was created. An RFC3339 formatted datetime string
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeMaintenanceRebootDue The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeMaintenanceRebootDue(@Nullable Output<String> timeMaintenanceRebootDue) {
            $.timeMaintenanceRebootDue = timeMaintenanceRebootDue;
            return this;
        }

        /**
         * @param timeMaintenanceRebootDue The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
         * 
         * @return builder
         * 
         */
        public Builder timeMaintenanceRebootDue(String timeMaintenanceRebootDue) {
            return timeMaintenanceRebootDue(Output.of(timeMaintenanceRebootDue));
        }

        public BdsInstanceNodeArgs build() {
            return $;
        }
    }

}
