// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.BigDataService.inputs.BdsInstanceNodeReplaceConfigurationLevelTypeDetailsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceNodeReplaceConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceNodeReplaceConfigurationState Empty = new BdsInstanceNodeReplaceConfigurationState();

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="bdsInstanceId")
    private @Nullable Output<String> bdsInstanceId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Optional<Output<String>> bdsInstanceId() {
        return Optional.ofNullable(this.bdsInstanceId);
    }

    /**
     * Base-64 encoded password for the cluster admin user.
     * 
     */
    @Import(name="clusterAdminPassword")
    private @Nullable Output<String> clusterAdminPassword;

    /**
     * @return Base-64 encoded password for the cluster admin user.
     * 
     */
    public Optional<Output<String>> clusterAdminPassword() {
        return Optional.ofNullable(this.clusterAdminPassword);
    }

    /**
     * (Updatable) A user-friendly name. Only ASCII alphanumeric characters with no spaces allowed. The name does not have to be unique, and it may be changed. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Only ASCII alphanumeric characters with no spaces allowed. The name does not have to be unique, and it may be changed. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) This value is the minimum period of time to wait before triggering node replacement. The value is in minutes.
     * 
     */
    @Import(name="durationInMinutes")
    private @Nullable Output<Integer> durationInMinutes;

    /**
     * @return (Updatable) This value is the minimum period of time to wait before triggering node replacement. The value is in minutes.
     * 
     */
    public Optional<Output<Integer>> durationInMinutes() {
        return Optional.ofNullable(this.durationInMinutes);
    }

    /**
     * (Updatable) Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
     * 
     */
    @Import(name="levelTypeDetails")
    private @Nullable Output<BdsInstanceNodeReplaceConfigurationLevelTypeDetailsArgs> levelTypeDetails;

    /**
     * @return (Updatable) Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
     * 
     */
    public Optional<Output<BdsInstanceNodeReplaceConfigurationLevelTypeDetailsArgs>> levelTypeDetails() {
        return Optional.ofNullable(this.levelTypeDetails);
    }

    /**
     * (Updatable) Type of compute instance health metric to use for node replacement
     * 
     */
    @Import(name="metricType")
    private @Nullable Output<String> metricType;

    /**
     * @return (Updatable) Type of compute instance health metric to use for node replacement
     * 
     */
    public Optional<Output<String>> metricType() {
        return Optional.ofNullable(this.metricType);
    }

    /**
     * The state of the NodeReplaceConfiguration.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the NodeReplaceConfiguration.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The time the NodeReplaceConfiguration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the NodeReplaceConfiguration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the NodeReplaceConfiguration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the NodeReplaceConfiguration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private BdsInstanceNodeReplaceConfigurationState() {}

    private BdsInstanceNodeReplaceConfigurationState(BdsInstanceNodeReplaceConfigurationState $) {
        this.bdsInstanceId = $.bdsInstanceId;
        this.clusterAdminPassword = $.clusterAdminPassword;
        this.displayName = $.displayName;
        this.durationInMinutes = $.durationInMinutes;
        this.levelTypeDetails = $.levelTypeDetails;
        this.metricType = $.metricType;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceNodeReplaceConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceNodeReplaceConfigurationState $;

        public Builder() {
            $ = new BdsInstanceNodeReplaceConfigurationState();
        }

        public Builder(BdsInstanceNodeReplaceConfigurationState defaults) {
            $ = new BdsInstanceNodeReplaceConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(@Nullable Output<String> bdsInstanceId) {
            $.bdsInstanceId = bdsInstanceId;
            return this;
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(String bdsInstanceId) {
            return bdsInstanceId(Output.of(bdsInstanceId));
        }

        /**
         * @param clusterAdminPassword Base-64 encoded password for the cluster admin user.
         * 
         * @return builder
         * 
         */
        public Builder clusterAdminPassword(@Nullable Output<String> clusterAdminPassword) {
            $.clusterAdminPassword = clusterAdminPassword;
            return this;
        }

        /**
         * @param clusterAdminPassword Base-64 encoded password for the cluster admin user.
         * 
         * @return builder
         * 
         */
        public Builder clusterAdminPassword(String clusterAdminPassword) {
            return clusterAdminPassword(Output.of(clusterAdminPassword));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Only ASCII alphanumeric characters with no spaces allowed. The name does not have to be unique, and it may be changed. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Only ASCII alphanumeric characters with no spaces allowed. The name does not have to be unique, and it may be changed. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param durationInMinutes (Updatable) This value is the minimum period of time to wait before triggering node replacement. The value is in minutes.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(@Nullable Output<Integer> durationInMinutes) {
            $.durationInMinutes = durationInMinutes;
            return this;
        }

        /**
         * @param durationInMinutes (Updatable) This value is the minimum period of time to wait before triggering node replacement. The value is in minutes.
         * 
         * @return builder
         * 
         */
        public Builder durationInMinutes(Integer durationInMinutes) {
            return durationInMinutes(Output.of(durationInMinutes));
        }

        /**
         * @param levelTypeDetails (Updatable) Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
         * 
         * @return builder
         * 
         */
        public Builder levelTypeDetails(@Nullable Output<BdsInstanceNodeReplaceConfigurationLevelTypeDetailsArgs> levelTypeDetails) {
            $.levelTypeDetails = levelTypeDetails;
            return this;
        }

        /**
         * @param levelTypeDetails (Updatable) Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
         * 
         * @return builder
         * 
         */
        public Builder levelTypeDetails(BdsInstanceNodeReplaceConfigurationLevelTypeDetailsArgs levelTypeDetails) {
            return levelTypeDetails(Output.of(levelTypeDetails));
        }

        /**
         * @param metricType (Updatable) Type of compute instance health metric to use for node replacement
         * 
         * @return builder
         * 
         */
        public Builder metricType(@Nullable Output<String> metricType) {
            $.metricType = metricType;
            return this;
        }

        /**
         * @param metricType (Updatable) Type of compute instance health metric to use for node replacement
         * 
         * @return builder
         * 
         */
        public Builder metricType(String metricType) {
            return metricType(Output.of(metricType));
        }

        /**
         * @param state The state of the NodeReplaceConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the NodeReplaceConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The time the NodeReplaceConfiguration was created, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the NodeReplaceConfiguration was created, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the NodeReplaceConfiguration was updated, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the NodeReplaceConfiguration was updated, shown as an RFC 3339 formatted datetime string.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public BdsInstanceNodeReplaceConfigurationState build() {
            return $;
        }
    }

}
