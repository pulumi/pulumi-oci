// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs Empty = new BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs();

    /**
     * Certificate value in string format
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return Certificate value in string format
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Fully qualified domain name (FQDN) of the host
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return Fully qualified domain name (FQDN) of the host
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Private key of the provided certificate
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return Private key of the provided certificate
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    private BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs() {}

    private BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs(BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs $) {
        this.certificate = $.certificate;
        this.hostName = $.hostName;
        this.privateKey = $.privateKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs $;

        public Builder() {
            $ = new BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs();
        }

        public Builder(BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs defaults) {
            $ = new BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate value in string format
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate value in string format
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param hostName Fully qualified domain name (FQDN) of the host
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName Fully qualified domain name (FQDN) of the host
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param privateKey Private key of the provided certificate
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private key of the provided certificate
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs build() {
            return $;
        }
    }

}
