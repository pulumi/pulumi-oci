// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BdsInstancePatchActionPatchingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BdsInstancePatchActionPatchingConfigArgs Empty = new BdsInstancePatchActionPatchingConfigArgs();

    /**
     * How many nodes to be patched in each iteration.
     * 
     */
    @Import(name="batchSize")
    private @Nullable Output<Integer> batchSize;

    /**
     * @return How many nodes to be patched in each iteration.
     * 
     */
    public Optional<Output<Integer>> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }

    /**
     * Type of strategy used for detailed patching configuration
     * 
     */
    @Import(name="patchingConfigStrategy", required=true)
    private Output<String> patchingConfigStrategy;

    /**
     * @return Type of strategy used for detailed patching configuration
     * 
     */
    public Output<String> patchingConfigStrategy() {
        return this.patchingConfigStrategy;
    }

    /**
     * The wait time between batches in seconds.
     * 
     */
    @Import(name="waitTimeBetweenBatchInSeconds")
    private @Nullable Output<Integer> waitTimeBetweenBatchInSeconds;

    /**
     * @return The wait time between batches in seconds.
     * 
     */
    public Optional<Output<Integer>> waitTimeBetweenBatchInSeconds() {
        return Optional.ofNullable(this.waitTimeBetweenBatchInSeconds);
    }

    /**
     * The wait time between AD/FD in seconds.
     * 
     */
    @Import(name="waitTimeBetweenDomainInSeconds")
    private @Nullable Output<Integer> waitTimeBetweenDomainInSeconds;

    /**
     * @return The wait time between AD/FD in seconds.
     * 
     */
    public Optional<Output<Integer>> waitTimeBetweenDomainInSeconds() {
        return Optional.ofNullable(this.waitTimeBetweenDomainInSeconds);
    }

    private BdsInstancePatchActionPatchingConfigArgs() {}

    private BdsInstancePatchActionPatchingConfigArgs(BdsInstancePatchActionPatchingConfigArgs $) {
        this.batchSize = $.batchSize;
        this.patchingConfigStrategy = $.patchingConfigStrategy;
        this.waitTimeBetweenBatchInSeconds = $.waitTimeBetweenBatchInSeconds;
        this.waitTimeBetweenDomainInSeconds = $.waitTimeBetweenDomainInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BdsInstancePatchActionPatchingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BdsInstancePatchActionPatchingConfigArgs $;

        public Builder() {
            $ = new BdsInstancePatchActionPatchingConfigArgs();
        }

        public Builder(BdsInstancePatchActionPatchingConfigArgs defaults) {
            $ = new BdsInstancePatchActionPatchingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchSize How many nodes to be patched in each iteration.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(@Nullable Output<Integer> batchSize) {
            $.batchSize = batchSize;
            return this;
        }

        /**
         * @param batchSize How many nodes to be patched in each iteration.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(Integer batchSize) {
            return batchSize(Output.of(batchSize));
        }

        /**
         * @param patchingConfigStrategy Type of strategy used for detailed patching configuration
         * 
         * @return builder
         * 
         */
        public Builder patchingConfigStrategy(Output<String> patchingConfigStrategy) {
            $.patchingConfigStrategy = patchingConfigStrategy;
            return this;
        }

        /**
         * @param patchingConfigStrategy Type of strategy used for detailed patching configuration
         * 
         * @return builder
         * 
         */
        public Builder patchingConfigStrategy(String patchingConfigStrategy) {
            return patchingConfigStrategy(Output.of(patchingConfigStrategy));
        }

        /**
         * @param waitTimeBetweenBatchInSeconds The wait time between batches in seconds.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeBetweenBatchInSeconds(@Nullable Output<Integer> waitTimeBetweenBatchInSeconds) {
            $.waitTimeBetweenBatchInSeconds = waitTimeBetweenBatchInSeconds;
            return this;
        }

        /**
         * @param waitTimeBetweenBatchInSeconds The wait time between batches in seconds.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeBetweenBatchInSeconds(Integer waitTimeBetweenBatchInSeconds) {
            return waitTimeBetweenBatchInSeconds(Output.of(waitTimeBetweenBatchInSeconds));
        }

        /**
         * @param waitTimeBetweenDomainInSeconds The wait time between AD/FD in seconds.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeBetweenDomainInSeconds(@Nullable Output<Integer> waitTimeBetweenDomainInSeconds) {
            $.waitTimeBetweenDomainInSeconds = waitTimeBetweenDomainInSeconds;
            return this;
        }

        /**
         * @param waitTimeBetweenDomainInSeconds The wait time between AD/FD in seconds.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeBetweenDomainInSeconds(Integer waitTimeBetweenDomainInSeconds) {
            return waitTimeBetweenDomainInSeconds(Output.of(waitTimeBetweenDomainInSeconds));
        }

        public BdsInstancePatchActionPatchingConfigArgs build() {
            if ($.patchingConfigStrategy == null) {
                throw new MissingRequiredPropertyException("BdsInstancePatchActionPatchingConfigArgs", "patchingConfigStrategy");
            }
            return $;
        }
    }

}
