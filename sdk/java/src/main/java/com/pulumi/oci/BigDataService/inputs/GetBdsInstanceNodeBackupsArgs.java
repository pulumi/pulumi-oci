// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.inputs.GetBdsInstanceNodeBackupsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBdsInstanceNodeBackupsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBdsInstanceNodeBackupsArgs Empty = new GetBdsInstanceNodeBackupsArgs();

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="bdsInstanceId", required=true)
    private Output<String> bdsInstanceId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Output<String> bdsInstanceId() {
        return this.bdsInstanceId;
    }

    /**
     * The display name belonged to the node backup.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name belonged to the node backup.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetBdsInstanceNodeBackupsFilterArgs>> filters;

    public Optional<Output<List<GetBdsInstanceNodeBackupsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The node host name belonged to a node that has a node backup.
     * 
     */
    @Import(name="nodeHostName")
    private @Nullable Output<String> nodeHostName;

    /**
     * @return The node host name belonged to a node that has a node backup.
     * 
     */
    public Optional<Output<String>> nodeHostName() {
        return Optional.ofNullable(this.nodeHostName);
    }

    /**
     * The state of the Node&#39;s Backup.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the Node&#39;s Backup.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetBdsInstanceNodeBackupsArgs() {}

    private GetBdsInstanceNodeBackupsArgs(GetBdsInstanceNodeBackupsArgs $) {
        this.bdsInstanceId = $.bdsInstanceId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.nodeHostName = $.nodeHostName;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBdsInstanceNodeBackupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBdsInstanceNodeBackupsArgs $;

        public Builder() {
            $ = new GetBdsInstanceNodeBackupsArgs();
        }

        public Builder(GetBdsInstanceNodeBackupsArgs defaults) {
            $ = new GetBdsInstanceNodeBackupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(Output<String> bdsInstanceId) {
            $.bdsInstanceId = bdsInstanceId;
            return this;
        }

        /**
         * @param bdsInstanceId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder bdsInstanceId(String bdsInstanceId) {
            return bdsInstanceId(Output.of(bdsInstanceId));
        }

        /**
         * @param displayName The display name belonged to the node backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name belonged to the node backup.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetBdsInstanceNodeBackupsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetBdsInstanceNodeBackupsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetBdsInstanceNodeBackupsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param nodeHostName The node host name belonged to a node that has a node backup.
         * 
         * @return builder
         * 
         */
        public Builder nodeHostName(@Nullable Output<String> nodeHostName) {
            $.nodeHostName = nodeHostName;
            return this;
        }

        /**
         * @param nodeHostName The node host name belonged to a node that has a node backup.
         * 
         * @return builder
         * 
         */
        public Builder nodeHostName(String nodeHostName) {
            return nodeHostName(Output.of(nodeHostName));
        }

        /**
         * @param state The state of the Node&#39;s Backup.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the Node&#39;s Backup.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetBdsInstanceNodeBackupsArgs build() {
            if ($.bdsInstanceId == null) {
                throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsArgs", "bdsInstanceId");
            }
            return $;
        }
    }

}
