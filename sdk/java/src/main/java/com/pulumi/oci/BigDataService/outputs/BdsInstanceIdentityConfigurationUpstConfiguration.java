// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BdsInstanceIdentityConfigurationUpstConfiguration {
    /**
     * @return The kerberos keytab content used for creating identity propagation trust config, in base64 format
     * 
     */
    private @Nullable String keytabContent;
    /**
     * @return Master Encryption key used for encrypting token exchange keytab.
     * 
     */
    private @Nullable String masterEncryptionKeyId;
    /**
     * @return Secret ID for token exchange keytab
     * 
     */
    private @Nullable String secretId;
    /**
     * @return Lifecycle state of the UPST config
     * 
     */
    private @Nullable String state;
    /**
     * @return Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private @Nullable String timeTokenExchangeKeytabLastRefreshed;
    /**
     * @return Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return Token exchange kerberos Principal name in cluster
     * 
     */
    private @Nullable String tokenExchangePrincipalName;
    /**
     * @return The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    private @Nullable String vaultId;

    private BdsInstanceIdentityConfigurationUpstConfiguration() {}
    /**
     * @return The kerberos keytab content used for creating identity propagation trust config, in base64 format
     * 
     */
    public Optional<String> keytabContent() {
        return Optional.ofNullable(this.keytabContent);
    }
    /**
     * @return Master Encryption key used for encrypting token exchange keytab.
     * 
     */
    public Optional<String> masterEncryptionKeyId() {
        return Optional.ofNullable(this.masterEncryptionKeyId);
    }
    /**
     * @return Secret ID for token exchange keytab
     * 
     */
    public Optional<String> secretId() {
        return Optional.ofNullable(this.secretId);
    }
    /**
     * @return Lifecycle state of the UPST config
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<String> timeTokenExchangeKeytabLastRefreshed() {
        return Optional.ofNullable(this.timeTokenExchangeKeytabLastRefreshed);
    }
    /**
     * @return Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return Token exchange kerberos Principal name in cluster
     * 
     */
    public Optional<String> tokenExchangePrincipalName() {
        return Optional.ofNullable(this.tokenExchangePrincipalName);
    }
    /**
     * @return The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BdsInstanceIdentityConfigurationUpstConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String keytabContent;
        private @Nullable String masterEncryptionKeyId;
        private @Nullable String secretId;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeTokenExchangeKeytabLastRefreshed;
        private @Nullable String timeUpdated;
        private @Nullable String tokenExchangePrincipalName;
        private @Nullable String vaultId;
        public Builder() {}
        public Builder(BdsInstanceIdentityConfigurationUpstConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keytabContent = defaults.keytabContent;
    	      this.masterEncryptionKeyId = defaults.masterEncryptionKeyId;
    	      this.secretId = defaults.secretId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeTokenExchangeKeytabLastRefreshed = defaults.timeTokenExchangeKeytabLastRefreshed;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.tokenExchangePrincipalName = defaults.tokenExchangePrincipalName;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder keytabContent(@Nullable String keytabContent) {

            this.keytabContent = keytabContent;
            return this;
        }
        @CustomType.Setter
        public Builder masterEncryptionKeyId(@Nullable String masterEncryptionKeyId) {

            this.masterEncryptionKeyId = masterEncryptionKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(@Nullable String secretId) {

            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {

            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeTokenExchangeKeytabLastRefreshed(@Nullable String timeTokenExchangeKeytabLastRefreshed) {

            this.timeTokenExchangeKeytabLastRefreshed = timeTokenExchangeKeytabLastRefreshed;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {

            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder tokenExchangePrincipalName(@Nullable String tokenExchangePrincipalName) {

            this.tokenExchangePrincipalName = tokenExchangePrincipalName;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {

            this.vaultId = vaultId;
            return this;
        }
        public BdsInstanceIdentityConfigurationUpstConfiguration build() {
            final var _resultValue = new BdsInstanceIdentityConfigurationUpstConfiguration();
            _resultValue.keytabContent = keytabContent;
            _resultValue.masterEncryptionKeyId = masterEncryptionKeyId;
            _resultValue.secretId = secretId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeTokenExchangeKeytabLastRefreshed = timeTokenExchangeKeytabLastRefreshed;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.tokenExchangePrincipalName = tokenExchangePrincipalName;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
