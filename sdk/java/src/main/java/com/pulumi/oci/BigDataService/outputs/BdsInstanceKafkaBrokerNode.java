// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.BigDataService.outputs.BdsInstanceKafkaBrokerNodeShapeConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BdsInstanceKafkaBrokerNode {
    /**
     * @return The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    private @Nullable String blockVolumeSizeInGbs;
    private Integer numberOfKafkaNodes;
    /**
     * @return Shape of the node
     * 
     */
    private String shape;
    /**
     * @return The shape configuration requested for the node.
     * 
     */
    private @Nullable BdsInstanceKafkaBrokerNodeShapeConfig shapeConfig;
    /**
     * @return The OCID of the subnet in which the node should be created
     * 
     */
    private String subnetId;

    private BdsInstanceKafkaBrokerNode() {}
    /**
     * @return The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    public Optional<String> blockVolumeSizeInGbs() {
        return Optional.ofNullable(this.blockVolumeSizeInGbs);
    }
    public Integer numberOfKafkaNodes() {
        return this.numberOfKafkaNodes;
    }
    /**
     * @return Shape of the node
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The shape configuration requested for the node.
     * 
     */
    public Optional<BdsInstanceKafkaBrokerNodeShapeConfig> shapeConfig() {
        return Optional.ofNullable(this.shapeConfig);
    }
    /**
     * @return The OCID of the subnet in which the node should be created
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BdsInstanceKafkaBrokerNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String blockVolumeSizeInGbs;
        private Integer numberOfKafkaNodes;
        private String shape;
        private @Nullable BdsInstanceKafkaBrokerNodeShapeConfig shapeConfig;
        private String subnetId;
        public Builder() {}
        public Builder(BdsInstanceKafkaBrokerNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockVolumeSizeInGbs = defaults.blockVolumeSizeInGbs;
    	      this.numberOfKafkaNodes = defaults.numberOfKafkaNodes;
    	      this.shape = defaults.shape;
    	      this.shapeConfig = defaults.shapeConfig;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder blockVolumeSizeInGbs(@Nullable String blockVolumeSizeInGbs) {
            this.blockVolumeSizeInGbs = blockVolumeSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfKafkaNodes(Integer numberOfKafkaNodes) {
            this.numberOfKafkaNodes = Objects.requireNonNull(numberOfKafkaNodes);
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        @CustomType.Setter
        public Builder shapeConfig(@Nullable BdsInstanceKafkaBrokerNodeShapeConfig shapeConfig) {
            this.shapeConfig = shapeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public BdsInstanceKafkaBrokerNode build() {
            final var _resultValue = new BdsInstanceKafkaBrokerNode();
            _resultValue.blockVolumeSizeInGbs = blockVolumeSizeInGbs;
            _resultValue.numberOfKafkaNodes = numberOfKafkaNodes;
            _resultValue.shape = shape;
            _resultValue.shapeConfig = shapeConfig;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
