// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.BigDataService.outputs.BdsInstanceNodeAttachedBlockVolume;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BdsInstanceNode {
    /**
     * @return The list of block volumes attached to a given node.
     * 
     */
    private @Nullable List<BdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes;
    /**
     * @return The name of the availability domain the node is running in
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return (Updatable) Name of the BDS instance
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The name of the fault domain the node is running in
     * 
     */
    private @Nullable String faultDomain;
    /**
     * @return The fully-qualified hostname (FQDN) of the node
     * 
     */
    private @Nullable String hostname;
    /**
     * @return The OCID of the image from which the node was created
     * 
     */
    private @Nullable String imageId;
    /**
     * @return The OCID of the underlying compute instance
     * 
     */
    private @Nullable String instanceId;
    /**
     * @return IP address of the node
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return The total amount of memory available to the node, in gigabytes
     * 
     */
    private @Nullable Integer memoryInGbs;
    /**
     * @return The Big Data Service cluster node type.
     * 
     */
    private @Nullable String nodeType;
    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    private @Nullable Integer nvmes;
    /**
     * @return The total number of OCPUs available to the node.
     * 
     */
    private @Nullable Integer ocpus;
    /**
     * @return Shape of the node
     * 
     */
    private @Nullable String shape;
    /**
     * @return The fingerprint of the SSH key used for node access
     * 
     */
    private @Nullable String sshFingerprint;
    /**
     * @return (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
     * 
     */
    private @Nullable String state;
    /**
     * @return The OCID of the subnet in which the node should be created
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return The time the BDS instance was created. An RFC3339 formatted datetime string
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
     * 
     */
    private @Nullable String timeMaintenanceRebootDue;

    private BdsInstanceNode() {}
    /**
     * @return The list of block volumes attached to a given node.
     * 
     */
    public List<BdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes() {
        return this.attachedBlockVolumes == null ? List.of() : this.attachedBlockVolumes;
    }
    /**
     * @return The name of the availability domain the node is running in
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return (Updatable) Name of the BDS instance
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The name of the fault domain the node is running in
     * 
     */
    public Optional<String> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }
    /**
     * @return The fully-qualified hostname (FQDN) of the node
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return The OCID of the image from which the node was created
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return The OCID of the underlying compute instance
     * 
     */
    public Optional<String> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }
    /**
     * @return IP address of the node
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return The total amount of memory available to the node, in gigabytes
     * 
     */
    public Optional<Integer> memoryInGbs() {
        return Optional.ofNullable(this.memoryInGbs);
    }
    /**
     * @return The Big Data Service cluster node type.
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    public Optional<Integer> nvmes() {
        return Optional.ofNullable(this.nvmes);
    }
    /**
     * @return The total number of OCPUs available to the node.
     * 
     */
    public Optional<Integer> ocpus() {
        return Optional.ofNullable(this.ocpus);
    }
    /**
     * @return Shape of the node
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return The fingerprint of the SSH key used for node access
     * 
     */
    public Optional<String> sshFingerprint() {
        return Optional.ofNullable(this.sshFingerprint);
    }
    /**
     * @return (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The OCID of the subnet in which the node should be created
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return The time the BDS instance was created. An RFC3339 formatted datetime string
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
     * 
     */
    public Optional<String> timeMaintenanceRebootDue() {
        return Optional.ofNullable(this.timeMaintenanceRebootDue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BdsInstanceNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<BdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes;
        private @Nullable String availabilityDomain;
        private @Nullable String displayName;
        private @Nullable String faultDomain;
        private @Nullable String hostname;
        private @Nullable String imageId;
        private @Nullable String instanceId;
        private @Nullable String ipAddress;
        private @Nullable Integer memoryInGbs;
        private @Nullable String nodeType;
        private @Nullable Integer nvmes;
        private @Nullable Integer ocpus;
        private @Nullable String shape;
        private @Nullable String sshFingerprint;
        private @Nullable String state;
        private @Nullable String subnetId;
        private @Nullable String timeCreated;
        private @Nullable String timeMaintenanceRebootDue;
        public Builder() {}
        public Builder(BdsInstanceNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedBlockVolumes = defaults.attachedBlockVolumes;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.displayName = defaults.displayName;
    	      this.faultDomain = defaults.faultDomain;
    	      this.hostname = defaults.hostname;
    	      this.imageId = defaults.imageId;
    	      this.instanceId = defaults.instanceId;
    	      this.ipAddress = defaults.ipAddress;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.nodeType = defaults.nodeType;
    	      this.nvmes = defaults.nvmes;
    	      this.ocpus = defaults.ocpus;
    	      this.shape = defaults.shape;
    	      this.sshFingerprint = defaults.sshFingerprint;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeMaintenanceRebootDue = defaults.timeMaintenanceRebootDue;
        }

        @CustomType.Setter
        public Builder attachedBlockVolumes(@Nullable List<BdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes) {

            this.attachedBlockVolumes = attachedBlockVolumes;
            return this;
        }
        public Builder attachedBlockVolumes(BdsInstanceNodeAttachedBlockVolume... attachedBlockVolumes) {
            return attachedBlockVolumes(List.of(attachedBlockVolumes));
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(@Nullable String faultDomain) {

            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {

            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {

            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(@Nullable String instanceId) {

            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {

            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(@Nullable Integer memoryInGbs) {

            this.memoryInGbs = memoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(@Nullable String nodeType) {

            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder nvmes(@Nullable Integer nvmes) {

            this.nvmes = nvmes;
            return this;
        }
        @CustomType.Setter
        public Builder ocpus(@Nullable Integer ocpus) {

            this.ocpus = ocpus;
            return this;
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {

            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sshFingerprint(@Nullable String sshFingerprint) {

            this.sshFingerprint = sshFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {

            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {

            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceRebootDue(@Nullable String timeMaintenanceRebootDue) {

            this.timeMaintenanceRebootDue = timeMaintenanceRebootDue;
            return this;
        }
        public BdsInstanceNode build() {
            final var _resultValue = new BdsInstanceNode();
            _resultValue.attachedBlockVolumes = attachedBlockVolumes;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.displayName = displayName;
            _resultValue.faultDomain = faultDomain;
            _resultValue.hostname = hostname;
            _resultValue.imageId = imageId;
            _resultValue.instanceId = instanceId;
            _resultValue.ipAddress = ipAddress;
            _resultValue.memoryInGbs = memoryInGbs;
            _resultValue.nodeType = nodeType;
            _resultValue.nvmes = nvmes;
            _resultValue.ocpus = ocpus;
            _resultValue.shape = shape;
            _resultValue.sshFingerprint = sshFingerprint;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeMaintenanceRebootDue = timeMaintenanceRebootDue;
            return _resultValue;
        }
    }
}
