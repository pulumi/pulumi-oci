// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BdsInstanceOsPatchActionPatchingConfigs {
    /**
     * @return How many nodes to be patched in each iteration.
     * 
     */
    private @Nullable Integer batchSize;
    /**
     * @return Type of strategy used for detailed patching configuration
     * 
     */
    private String patchingConfigStrategy;
    /**
     * @return Acceptable number of failed-to-be-patched nodes in each batch. The maximum number of failed-to-patch nodes cannot exceed 20% of the number of nodes.
     * 
     */
    private @Nullable Integer toleranceThresholdPerBatch;
    /**
     * @return Acceptable number of failed-to-be-patched nodes in each domain. The maximum number of failed-to-patch nodes cannot exceed 20% of the number of nodes.
     * 
     */
    private @Nullable Integer toleranceThresholdPerDomain;
    /**
     * @return The wait time between batches in seconds.
     * 
     */
    private @Nullable Integer waitTimeBetweenBatchInSeconds;
    /**
     * @return The wait time between AD/FD in seconds.
     * 
     */
    private @Nullable Integer waitTimeBetweenDomainInSeconds;

    private BdsInstanceOsPatchActionPatchingConfigs() {}
    /**
     * @return How many nodes to be patched in each iteration.
     * 
     */
    public Optional<Integer> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }
    /**
     * @return Type of strategy used for detailed patching configuration
     * 
     */
    public String patchingConfigStrategy() {
        return this.patchingConfigStrategy;
    }
    /**
     * @return Acceptable number of failed-to-be-patched nodes in each batch. The maximum number of failed-to-patch nodes cannot exceed 20% of the number of nodes.
     * 
     */
    public Optional<Integer> toleranceThresholdPerBatch() {
        return Optional.ofNullable(this.toleranceThresholdPerBatch);
    }
    /**
     * @return Acceptable number of failed-to-be-patched nodes in each domain. The maximum number of failed-to-patch nodes cannot exceed 20% of the number of nodes.
     * 
     */
    public Optional<Integer> toleranceThresholdPerDomain() {
        return Optional.ofNullable(this.toleranceThresholdPerDomain);
    }
    /**
     * @return The wait time between batches in seconds.
     * 
     */
    public Optional<Integer> waitTimeBetweenBatchInSeconds() {
        return Optional.ofNullable(this.waitTimeBetweenBatchInSeconds);
    }
    /**
     * @return The wait time between AD/FD in seconds.
     * 
     */
    public Optional<Integer> waitTimeBetweenDomainInSeconds() {
        return Optional.ofNullable(this.waitTimeBetweenDomainInSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BdsInstanceOsPatchActionPatchingConfigs defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer batchSize;
        private String patchingConfigStrategy;
        private @Nullable Integer toleranceThresholdPerBatch;
        private @Nullable Integer toleranceThresholdPerDomain;
        private @Nullable Integer waitTimeBetweenBatchInSeconds;
        private @Nullable Integer waitTimeBetweenDomainInSeconds;
        public Builder() {}
        public Builder(BdsInstanceOsPatchActionPatchingConfigs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.patchingConfigStrategy = defaults.patchingConfigStrategy;
    	      this.toleranceThresholdPerBatch = defaults.toleranceThresholdPerBatch;
    	      this.toleranceThresholdPerDomain = defaults.toleranceThresholdPerDomain;
    	      this.waitTimeBetweenBatchInSeconds = defaults.waitTimeBetweenBatchInSeconds;
    	      this.waitTimeBetweenDomainInSeconds = defaults.waitTimeBetweenDomainInSeconds;
        }

        @CustomType.Setter
        public Builder batchSize(@Nullable Integer batchSize) {

            this.batchSize = batchSize;
            return this;
        }
        @CustomType.Setter
        public Builder patchingConfigStrategy(String patchingConfigStrategy) {
            if (patchingConfigStrategy == null) {
              throw new MissingRequiredPropertyException("BdsInstanceOsPatchActionPatchingConfigs", "patchingConfigStrategy");
            }
            this.patchingConfigStrategy = patchingConfigStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder toleranceThresholdPerBatch(@Nullable Integer toleranceThresholdPerBatch) {

            this.toleranceThresholdPerBatch = toleranceThresholdPerBatch;
            return this;
        }
        @CustomType.Setter
        public Builder toleranceThresholdPerDomain(@Nullable Integer toleranceThresholdPerDomain) {

            this.toleranceThresholdPerDomain = toleranceThresholdPerDomain;
            return this;
        }
        @CustomType.Setter
        public Builder waitTimeBetweenBatchInSeconds(@Nullable Integer waitTimeBetweenBatchInSeconds) {

            this.waitTimeBetweenBatchInSeconds = waitTimeBetweenBatchInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder waitTimeBetweenDomainInSeconds(@Nullable Integer waitTimeBetweenDomainInSeconds) {

            this.waitTimeBetweenDomainInSeconds = waitTimeBetweenDomainInSeconds;
            return this;
        }
        public BdsInstanceOsPatchActionPatchingConfigs build() {
            final var _resultValue = new BdsInstanceOsPatchActionPatchingConfigs();
            _resultValue.batchSize = batchSize;
            _resultValue.patchingConfigStrategy = patchingConfigStrategy;
            _resultValue.toleranceThresholdPerBatch = toleranceThresholdPerBatch;
            _resultValue.toleranceThresholdPerDomain = toleranceThresholdPerDomain;
            _resultValue.waitTimeBetweenBatchInSeconds = waitTimeBetweenBatchInSeconds;
            _resultValue.waitTimeBetweenDomainInSeconds = waitTimeBetweenDomainInSeconds;
            return _resultValue;
        }
    }
}
