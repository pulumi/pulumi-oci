// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig {
    private Integer targetMemoryPerNode;
    private Integer targetOcpusPerNode;
    private String targetShape;
    private String timeRecurrence;

    private GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig() {}
    public Integer targetMemoryPerNode() {
        return this.targetMemoryPerNode;
    }
    public Integer targetOcpusPerNode() {
        return this.targetOcpusPerNode;
    }
    public String targetShape() {
        return this.targetShape;
    }
    public String timeRecurrence() {
        return this.timeRecurrence;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer targetMemoryPerNode;
        private Integer targetOcpusPerNode;
        private String targetShape;
        private String timeRecurrence;
        public Builder() {}
        public Builder(GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.targetMemoryPerNode = defaults.targetMemoryPerNode;
    	      this.targetOcpusPerNode = defaults.targetOcpusPerNode;
    	      this.targetShape = defaults.targetShape;
    	      this.timeRecurrence = defaults.timeRecurrence;
        }

        @CustomType.Setter
        public Builder targetMemoryPerNode(Integer targetMemoryPerNode) {
            if (targetMemoryPerNode == null) {
              throw new MissingRequiredPropertyException("GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig", "targetMemoryPerNode");
            }
            this.targetMemoryPerNode = targetMemoryPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder targetOcpusPerNode(Integer targetOcpusPerNode) {
            if (targetOcpusPerNode == null) {
              throw new MissingRequiredPropertyException("GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig", "targetOcpusPerNode");
            }
            this.targetOcpusPerNode = targetOcpusPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder targetShape(String targetShape) {
            if (targetShape == null) {
              throw new MissingRequiredPropertyException("GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig", "targetShape");
            }
            this.targetShape = targetShape;
            return this;
        }
        @CustomType.Setter
        public Builder timeRecurrence(String timeRecurrence) {
            if (timeRecurrence == null) {
              throw new MissingRequiredPropertyException("GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig", "timeRecurrence");
            }
            this.timeRecurrence = timeRecurrence;
            return this;
        }
        public GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig build() {
            final var _resultValue = new GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig();
            _resultValue.targetMemoryPerNode = targetMemoryPerNode;
            _resultValue.targetOcpusPerNode = targetOcpusPerNode;
            _resultValue.targetShape = targetShape;
            _resultValue.timeRecurrence = timeRecurrence;
            return _resultValue;
        }
    }
}
