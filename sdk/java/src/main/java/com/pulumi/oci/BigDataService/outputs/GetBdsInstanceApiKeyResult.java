// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceApiKeyResult {
    private String apiKeyId;
    private String bdsInstanceId;
    /**
     * @return The name of the region to establish the Object Storage endpoint which was set as part of key creation operation. If no region was provided this will be set to be the same region where the cluster lives. Example us-phoenix-1 .
     * 
     */
    private String defaultRegion;
    /**
     * @return Identity domain OCID ,where user is present. For default domain ,this field will be optional.
     * 
     */
    private String domainOcid;
    /**
     * @return The fingerprint that corresponds to the public API key requested.
     * 
     */
    private String fingerprint;
    /**
     * @return Identifier of the user&#39;s API key.
     * 
     */
    private String id;
    /**
     * @return User friendly identifier used to uniquely differentiate between different API keys. Only ASCII alphanumeric characters with no spaces allowed.
     * 
     */
    private String keyAlias;
    private String passphrase;
    /**
     * @return The full path and file name of the private key used for authentication. This location will be automatically selected on the BDS local file system.
     * 
     */
    private String pemfilepath;
    /**
     * @return The current status of the API key.
     * 
     */
    private String state;
    /**
     * @return The OCID of your tenancy.
     * 
     */
    private String tenantId;
    /**
     * @return The time the API key was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The user OCID for which this API key was created.
     * 
     */
    private String userId;

    private GetBdsInstanceApiKeyResult() {}
    public String apiKeyId() {
        return this.apiKeyId;
    }
    public String bdsInstanceId() {
        return this.bdsInstanceId;
    }
    /**
     * @return The name of the region to establish the Object Storage endpoint which was set as part of key creation operation. If no region was provided this will be set to be the same region where the cluster lives. Example us-phoenix-1 .
     * 
     */
    public String defaultRegion() {
        return this.defaultRegion;
    }
    /**
     * @return Identity domain OCID ,where user is present. For default domain ,this field will be optional.
     * 
     */
    public String domainOcid() {
        return this.domainOcid;
    }
    /**
     * @return The fingerprint that corresponds to the public API key requested.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return Identifier of the user&#39;s API key.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return User friendly identifier used to uniquely differentiate between different API keys. Only ASCII alphanumeric characters with no spaces allowed.
     * 
     */
    public String keyAlias() {
        return this.keyAlias;
    }
    public String passphrase() {
        return this.passphrase;
    }
    /**
     * @return The full path and file name of the private key used for authentication. This location will be automatically selected on the BDS local file system.
     * 
     */
    public String pemfilepath() {
        return this.pemfilepath;
    }
    /**
     * @return The current status of the API key.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of your tenancy.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The time the API key was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The user OCID for which this API key was created.
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceApiKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKeyId;
        private String bdsInstanceId;
        private String defaultRegion;
        private String domainOcid;
        private String fingerprint;
        private String id;
        private String keyAlias;
        private String passphrase;
        private String pemfilepath;
        private String state;
        private String tenantId;
        private String timeCreated;
        private String userId;
        public Builder() {}
        public Builder(GetBdsInstanceApiKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKeyId = defaults.apiKeyId;
    	      this.bdsInstanceId = defaults.bdsInstanceId;
    	      this.defaultRegion = defaults.defaultRegion;
    	      this.domainOcid = defaults.domainOcid;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.keyAlias = defaults.keyAlias;
    	      this.passphrase = defaults.passphrase;
    	      this.pemfilepath = defaults.pemfilepath;
    	      this.state = defaults.state;
    	      this.tenantId = defaults.tenantId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder apiKeyId(String apiKeyId) {
            if (apiKeyId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "apiKeyId");
            }
            this.apiKeyId = apiKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder bdsInstanceId(String bdsInstanceId) {
            if (bdsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "bdsInstanceId");
            }
            this.bdsInstanceId = bdsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRegion(String defaultRegion) {
            if (defaultRegion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "defaultRegion");
            }
            this.defaultRegion = defaultRegion;
            return this;
        }
        @CustomType.Setter
        public Builder domainOcid(String domainOcid) {
            if (domainOcid == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "domainOcid");
            }
            this.domainOcid = domainOcid;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlias(String keyAlias) {
            if (keyAlias == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "keyAlias");
            }
            this.keyAlias = keyAlias;
            return this;
        }
        @CustomType.Setter
        public Builder passphrase(String passphrase) {
            if (passphrase == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "passphrase");
            }
            this.passphrase = passphrase;
            return this;
        }
        @CustomType.Setter
        public Builder pemfilepath(String pemfilepath) {
            if (pemfilepath == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "pemfilepath");
            }
            this.pemfilepath = pemfilepath;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceApiKeyResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetBdsInstanceApiKeyResult build() {
            final var _resultValue = new GetBdsInstanceApiKeyResult();
            _resultValue.apiKeyId = apiKeyId;
            _resultValue.bdsInstanceId = bdsInstanceId;
            _resultValue.defaultRegion = defaultRegion;
            _resultValue.domainOcid = domainOcid;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.keyAlias = keyAlias;
            _resultValue.passphrase = passphrase;
            _resultValue.pemfilepath = pemfilepath;
            _resultValue.state = state;
            _resultValue.tenantId = tenantId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
