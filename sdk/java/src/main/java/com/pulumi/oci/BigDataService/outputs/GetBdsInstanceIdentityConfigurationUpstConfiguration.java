// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceIdentityConfigurationUpstConfiguration {
    /**
     * @return The kerberos keytab content used for creating identity propagation trust config, in base64 format
     * 
     */
    private String keytabContent;
    /**
     * @return Master Encryption key used for encrypting token exchange keytab.
     * 
     */
    private String masterEncryptionKeyId;
    /**
     * @return Secret ID for token exchange keytab
     * 
     */
    private String secretId;
    /**
     * @return Lifecycle state of the UPST config
     * 
     */
    private String state;
    /**
     * @return Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeTokenExchangeKeytabLastRefreshed;
    /**
     * @return Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return Token exchange kerberos Principal name in cluster
     * 
     */
    private String tokenExchangePrincipalName;
    /**
     * @return The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    private String vaultId;

    private GetBdsInstanceIdentityConfigurationUpstConfiguration() {}
    /**
     * @return The kerberos keytab content used for creating identity propagation trust config, in base64 format
     * 
     */
    public String keytabContent() {
        return this.keytabContent;
    }
    /**
     * @return Master Encryption key used for encrypting token exchange keytab.
     * 
     */
    public String masterEncryptionKeyId() {
        return this.masterEncryptionKeyId;
    }
    /**
     * @return Secret ID for token exchange keytab
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return Lifecycle state of the UPST config
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeTokenExchangeKeytabLastRefreshed() {
        return this.timeTokenExchangeKeytabLastRefreshed;
    }
    /**
     * @return Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Token exchange kerberos Principal name in cluster
     * 
     */
    public String tokenExchangePrincipalName() {
        return this.tokenExchangePrincipalName;
    }
    /**
     * @return The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceIdentityConfigurationUpstConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String keytabContent;
        private String masterEncryptionKeyId;
        private String secretId;
        private String state;
        private String timeCreated;
        private String timeTokenExchangeKeytabLastRefreshed;
        private String timeUpdated;
        private String tokenExchangePrincipalName;
        private String vaultId;
        public Builder() {}
        public Builder(GetBdsInstanceIdentityConfigurationUpstConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.keytabContent = defaults.keytabContent;
    	      this.masterEncryptionKeyId = defaults.masterEncryptionKeyId;
    	      this.secretId = defaults.secretId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeTokenExchangeKeytabLastRefreshed = defaults.timeTokenExchangeKeytabLastRefreshed;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.tokenExchangePrincipalName = defaults.tokenExchangePrincipalName;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder keytabContent(String keytabContent) {
            if (keytabContent == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "keytabContent");
            }
            this.keytabContent = keytabContent;
            return this;
        }
        @CustomType.Setter
        public Builder masterEncryptionKeyId(String masterEncryptionKeyId) {
            if (masterEncryptionKeyId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "masterEncryptionKeyId");
            }
            this.masterEncryptionKeyId = masterEncryptionKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeTokenExchangeKeytabLastRefreshed(String timeTokenExchangeKeytabLastRefreshed) {
            if (timeTokenExchangeKeytabLastRefreshed == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "timeTokenExchangeKeytabLastRefreshed");
            }
            this.timeTokenExchangeKeytabLastRefreshed = timeTokenExchangeKeytabLastRefreshed;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder tokenExchangePrincipalName(String tokenExchangePrincipalName) {
            if (tokenExchangePrincipalName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "tokenExchangePrincipalName");
            }
            this.tokenExchangePrincipalName = tokenExchangePrincipalName;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            if (vaultId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationUpstConfiguration", "vaultId");
            }
            this.vaultId = vaultId;
            return this;
        }
        public GetBdsInstanceIdentityConfigurationUpstConfiguration build() {
            final var _resultValue = new GetBdsInstanceIdentityConfigurationUpstConfiguration();
            _resultValue.keytabContent = keytabContent;
            _resultValue.masterEncryptionKeyId = masterEncryptionKeyId;
            _resultValue.secretId = secretId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeTokenExchangeKeytabLastRefreshed = timeTokenExchangeKeytabLastRefreshed;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.tokenExchangePrincipalName = tokenExchangePrincipalName;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
