// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfiguration;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfigurationDetail;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfiguration;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfigurationDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceIdentityConfigurationsIdentityConfiguration {
    private String activateIamUserSyncConfigurationTrigger;
    private String activateUpstConfigurationTrigger;
    /**
     * @return The OCID of the cluster.
     * 
     */
    private String bdsInstanceId;
    private String clusterAdminPassword;
    /**
     * @return identity domain confidential application ID for the identity config
     * 
     */
    private String confidentialApplicationId;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfigurationDetail> iamUserSyncConfigurationDetails;
    /**
     * @return Information about the IAM user sync configuration.
     * 
     */
    private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfiguration> iamUserSyncConfigurations;
    /**
     * @return The id of the identity config
     * 
     */
    private String id;
    /**
     * @return Identity domain to use for identity config
     * 
     */
    private String identityDomainId;
    private String refreshConfidentialApplicationTrigger;
    private String refreshUpstTokenExchangeKeytabTrigger;
    /**
     * @return The state of the identity config
     * 
     */
    private String state;
    /**
     * @return Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfigurationDetail> upstConfigurationDetails;
    /**
     * @return Information about the UPST configuration.
     * 
     */
    private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfiguration> upstConfigurations;

    private GetBdsInstanceIdentityConfigurationsIdentityConfiguration() {}
    public String activateIamUserSyncConfigurationTrigger() {
        return this.activateIamUserSyncConfigurationTrigger;
    }
    public String activateUpstConfigurationTrigger() {
        return this.activateUpstConfigurationTrigger;
    }
    /**
     * @return The OCID of the cluster.
     * 
     */
    public String bdsInstanceId() {
        return this.bdsInstanceId;
    }
    public String clusterAdminPassword() {
        return this.clusterAdminPassword;
    }
    /**
     * @return identity domain confidential application ID for the identity config
     * 
     */
    public String confidentialApplicationId() {
        return this.confidentialApplicationId;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfigurationDetail> iamUserSyncConfigurationDetails() {
        return this.iamUserSyncConfigurationDetails;
    }
    /**
     * @return Information about the IAM user sync configuration.
     * 
     */
    public List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfiguration> iamUserSyncConfigurations() {
        return this.iamUserSyncConfigurations;
    }
    /**
     * @return The id of the identity config
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identity domain to use for identity config
     * 
     */
    public String identityDomainId() {
        return this.identityDomainId;
    }
    public String refreshConfidentialApplicationTrigger() {
        return this.refreshConfidentialApplicationTrigger;
    }
    public String refreshUpstTokenExchangeKeytabTrigger() {
        return this.refreshUpstTokenExchangeKeytabTrigger;
    }
    /**
     * @return The state of the identity config
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfigurationDetail> upstConfigurationDetails() {
        return this.upstConfigurationDetails;
    }
    /**
     * @return Information about the UPST configuration.
     * 
     */
    public List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfiguration> upstConfigurations() {
        return this.upstConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceIdentityConfigurationsIdentityConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activateIamUserSyncConfigurationTrigger;
        private String activateUpstConfigurationTrigger;
        private String bdsInstanceId;
        private String clusterAdminPassword;
        private String confidentialApplicationId;
        private String displayName;
        private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfigurationDetail> iamUserSyncConfigurationDetails;
        private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfiguration> iamUserSyncConfigurations;
        private String id;
        private String identityDomainId;
        private String refreshConfidentialApplicationTrigger;
        private String refreshUpstTokenExchangeKeytabTrigger;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfigurationDetail> upstConfigurationDetails;
        private List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfiguration> upstConfigurations;
        public Builder() {}
        public Builder(GetBdsInstanceIdentityConfigurationsIdentityConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activateIamUserSyncConfigurationTrigger = defaults.activateIamUserSyncConfigurationTrigger;
    	      this.activateUpstConfigurationTrigger = defaults.activateUpstConfigurationTrigger;
    	      this.bdsInstanceId = defaults.bdsInstanceId;
    	      this.clusterAdminPassword = defaults.clusterAdminPassword;
    	      this.confidentialApplicationId = defaults.confidentialApplicationId;
    	      this.displayName = defaults.displayName;
    	      this.iamUserSyncConfigurationDetails = defaults.iamUserSyncConfigurationDetails;
    	      this.iamUserSyncConfigurations = defaults.iamUserSyncConfigurations;
    	      this.id = defaults.id;
    	      this.identityDomainId = defaults.identityDomainId;
    	      this.refreshConfidentialApplicationTrigger = defaults.refreshConfidentialApplicationTrigger;
    	      this.refreshUpstTokenExchangeKeytabTrigger = defaults.refreshUpstTokenExchangeKeytabTrigger;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.upstConfigurationDetails = defaults.upstConfigurationDetails;
    	      this.upstConfigurations = defaults.upstConfigurations;
        }

        @CustomType.Setter
        public Builder activateIamUserSyncConfigurationTrigger(String activateIamUserSyncConfigurationTrigger) {
            if (activateIamUserSyncConfigurationTrigger == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "activateIamUserSyncConfigurationTrigger");
            }
            this.activateIamUserSyncConfigurationTrigger = activateIamUserSyncConfigurationTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder activateUpstConfigurationTrigger(String activateUpstConfigurationTrigger) {
            if (activateUpstConfigurationTrigger == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "activateUpstConfigurationTrigger");
            }
            this.activateUpstConfigurationTrigger = activateUpstConfigurationTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder bdsInstanceId(String bdsInstanceId) {
            if (bdsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "bdsInstanceId");
            }
            this.bdsInstanceId = bdsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterAdminPassword(String clusterAdminPassword) {
            if (clusterAdminPassword == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "clusterAdminPassword");
            }
            this.clusterAdminPassword = clusterAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder confidentialApplicationId(String confidentialApplicationId) {
            if (confidentialApplicationId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "confidentialApplicationId");
            }
            this.confidentialApplicationId = confidentialApplicationId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder iamUserSyncConfigurationDetails(List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfigurationDetail> iamUserSyncConfigurationDetails) {
            if (iamUserSyncConfigurationDetails == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "iamUserSyncConfigurationDetails");
            }
            this.iamUserSyncConfigurationDetails = iamUserSyncConfigurationDetails;
            return this;
        }
        public Builder iamUserSyncConfigurationDetails(GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfigurationDetail... iamUserSyncConfigurationDetails) {
            return iamUserSyncConfigurationDetails(List.of(iamUserSyncConfigurationDetails));
        }
        @CustomType.Setter
        public Builder iamUserSyncConfigurations(List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfiguration> iamUserSyncConfigurations) {
            if (iamUserSyncConfigurations == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "iamUserSyncConfigurations");
            }
            this.iamUserSyncConfigurations = iamUserSyncConfigurations;
            return this;
        }
        public Builder iamUserSyncConfigurations(GetBdsInstanceIdentityConfigurationsIdentityConfigurationIamUserSyncConfiguration... iamUserSyncConfigurations) {
            return iamUserSyncConfigurations(List.of(iamUserSyncConfigurations));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityDomainId(String identityDomainId) {
            if (identityDomainId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "identityDomainId");
            }
            this.identityDomainId = identityDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder refreshConfidentialApplicationTrigger(String refreshConfidentialApplicationTrigger) {
            if (refreshConfidentialApplicationTrigger == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "refreshConfidentialApplicationTrigger");
            }
            this.refreshConfidentialApplicationTrigger = refreshConfidentialApplicationTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder refreshUpstTokenExchangeKeytabTrigger(String refreshUpstTokenExchangeKeytabTrigger) {
            if (refreshUpstTokenExchangeKeytabTrigger == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "refreshUpstTokenExchangeKeytabTrigger");
            }
            this.refreshUpstTokenExchangeKeytabTrigger = refreshUpstTokenExchangeKeytabTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder upstConfigurationDetails(List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfigurationDetail> upstConfigurationDetails) {
            if (upstConfigurationDetails == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "upstConfigurationDetails");
            }
            this.upstConfigurationDetails = upstConfigurationDetails;
            return this;
        }
        public Builder upstConfigurationDetails(GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfigurationDetail... upstConfigurationDetails) {
            return upstConfigurationDetails(List.of(upstConfigurationDetails));
        }
        @CustomType.Setter
        public Builder upstConfigurations(List<GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfiguration> upstConfigurations) {
            if (upstConfigurations == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceIdentityConfigurationsIdentityConfiguration", "upstConfigurations");
            }
            this.upstConfigurations = upstConfigurations;
            return this;
        }
        public Builder upstConfigurations(GetBdsInstanceIdentityConfigurationsIdentityConfigurationUpstConfiguration... upstConfigurations) {
            return upstConfigurations(List.of(upstConfigurations));
        }
        public GetBdsInstanceIdentityConfigurationsIdentityConfiguration build() {
            final var _resultValue = new GetBdsInstanceIdentityConfigurationsIdentityConfiguration();
            _resultValue.activateIamUserSyncConfigurationTrigger = activateIamUserSyncConfigurationTrigger;
            _resultValue.activateUpstConfigurationTrigger = activateUpstConfigurationTrigger;
            _resultValue.bdsInstanceId = bdsInstanceId;
            _resultValue.clusterAdminPassword = clusterAdminPassword;
            _resultValue.confidentialApplicationId = confidentialApplicationId;
            _resultValue.displayName = displayName;
            _resultValue.iamUserSyncConfigurationDetails = iamUserSyncConfigurationDetails;
            _resultValue.iamUserSyncConfigurations = iamUserSyncConfigurations;
            _resultValue.id = id;
            _resultValue.identityDomainId = identityDomainId;
            _resultValue.refreshConfidentialApplicationTrigger = refreshConfidentialApplicationTrigger;
            _resultValue.refreshUpstTokenExchangeKeytabTrigger = refreshUpstTokenExchangeKeytabTrigger;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.upstConfigurationDetails = upstConfigurationDetails;
            _resultValue.upstConfigurations = upstConfigurations;
            return _resultValue;
        }
    }
}
