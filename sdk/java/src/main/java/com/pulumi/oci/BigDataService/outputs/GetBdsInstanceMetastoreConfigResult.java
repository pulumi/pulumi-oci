// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceMetastoreConfigResult {
    private Integer activateTrigger;
    /**
     * @return The ID of BDS API Key used for metastore configuration. Set only if metastore&#39;s type is EXTERNAL.
     * 
     */
    private String bdsApiKeyId;
    private String bdsApiKeyPassphrase;
    private String bdsInstanceId;
    private String clusterAdminPassword;
    /**
     * @return The display name of metastore configuration
     * 
     */
    private String displayName;
    /**
     * @return The ID of the metastore configuration
     * 
     */
    private String id;
    private String metastoreConfigId;
    /**
     * @return The OCID of the Data Catalog metastore. Set only if metastore&#39;s type is EXTERNAL.
     * 
     */
    private String metastoreId;
    /**
     * @return The type of the metastore in the metastore configuration.
     * 
     */
    private String metastoreType;
    /**
     * @return the lifecycle state of the metastore configuration.
     * 
     */
    private String state;
    /**
     * @return The time when the configuration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the configuration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetBdsInstanceMetastoreConfigResult() {}
    public Integer activateTrigger() {
        return this.activateTrigger;
    }
    /**
     * @return The ID of BDS API Key used for metastore configuration. Set only if metastore&#39;s type is EXTERNAL.
     * 
     */
    public String bdsApiKeyId() {
        return this.bdsApiKeyId;
    }
    public String bdsApiKeyPassphrase() {
        return this.bdsApiKeyPassphrase;
    }
    public String bdsInstanceId() {
        return this.bdsInstanceId;
    }
    public String clusterAdminPassword() {
        return this.clusterAdminPassword;
    }
    /**
     * @return The display name of metastore configuration
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The ID of the metastore configuration
     * 
     */
    public String id() {
        return this.id;
    }
    public String metastoreConfigId() {
        return this.metastoreConfigId;
    }
    /**
     * @return The OCID of the Data Catalog metastore. Set only if metastore&#39;s type is EXTERNAL.
     * 
     */
    public String metastoreId() {
        return this.metastoreId;
    }
    /**
     * @return The type of the metastore in the metastore configuration.
     * 
     */
    public String metastoreType() {
        return this.metastoreType;
    }
    /**
     * @return the lifecycle state of the metastore configuration.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time when the configuration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the configuration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceMetastoreConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activateTrigger;
        private String bdsApiKeyId;
        private String bdsApiKeyPassphrase;
        private String bdsInstanceId;
        private String clusterAdminPassword;
        private String displayName;
        private String id;
        private String metastoreConfigId;
        private String metastoreId;
        private String metastoreType;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetBdsInstanceMetastoreConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activateTrigger = defaults.activateTrigger;
    	      this.bdsApiKeyId = defaults.bdsApiKeyId;
    	      this.bdsApiKeyPassphrase = defaults.bdsApiKeyPassphrase;
    	      this.bdsInstanceId = defaults.bdsInstanceId;
    	      this.clusterAdminPassword = defaults.clusterAdminPassword;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.metastoreConfigId = defaults.metastoreConfigId;
    	      this.metastoreId = defaults.metastoreId;
    	      this.metastoreType = defaults.metastoreType;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder activateTrigger(Integer activateTrigger) {
            if (activateTrigger == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "activateTrigger");
            }
            this.activateTrigger = activateTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder bdsApiKeyId(String bdsApiKeyId) {
            if (bdsApiKeyId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "bdsApiKeyId");
            }
            this.bdsApiKeyId = bdsApiKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder bdsApiKeyPassphrase(String bdsApiKeyPassphrase) {
            if (bdsApiKeyPassphrase == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "bdsApiKeyPassphrase");
            }
            this.bdsApiKeyPassphrase = bdsApiKeyPassphrase;
            return this;
        }
        @CustomType.Setter
        public Builder bdsInstanceId(String bdsInstanceId) {
            if (bdsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "bdsInstanceId");
            }
            this.bdsInstanceId = bdsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterAdminPassword(String clusterAdminPassword) {
            if (clusterAdminPassword == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "clusterAdminPassword");
            }
            this.clusterAdminPassword = clusterAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metastoreConfigId(String metastoreConfigId) {
            if (metastoreConfigId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "metastoreConfigId");
            }
            this.metastoreConfigId = metastoreConfigId;
            return this;
        }
        @CustomType.Setter
        public Builder metastoreId(String metastoreId) {
            if (metastoreId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "metastoreId");
            }
            this.metastoreId = metastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder metastoreType(String metastoreType) {
            if (metastoreType == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "metastoreType");
            }
            this.metastoreType = metastoreType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceMetastoreConfigResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetBdsInstanceMetastoreConfigResult build() {
            final var _resultValue = new GetBdsInstanceMetastoreConfigResult();
            _resultValue.activateTrigger = activateTrigger;
            _resultValue.bdsApiKeyId = bdsApiKeyId;
            _resultValue.bdsApiKeyPassphrase = bdsApiKeyPassphrase;
            _resultValue.bdsInstanceId = bdsInstanceId;
            _resultValue.clusterAdminPassword = clusterAdminPassword;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.metastoreConfigId = metastoreConfigId;
            _resultValue.metastoreId = metastoreId;
            _resultValue.metastoreType = metastoreType;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
