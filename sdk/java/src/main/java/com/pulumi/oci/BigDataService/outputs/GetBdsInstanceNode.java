// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceNodeAttachedBlockVolume;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceNode {
    /**
     * @return The list of block volumes attached to a given node.
     * 
     */
    private List<GetBdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes;
    /**
     * @return The name of the availability domain in which the node is running.
     * 
     */
    private String availabilityDomain;
    /**
     * @return The name of the node.
     * 
     */
    private String displayName;
    /**
     * @return The name of the fault domain in which the node is running.
     * 
     */
    private String faultDomain;
    /**
     * @return The fully-qualified hostname (FQDN) of the node.
     * 
     */
    private String hostname;
    /**
     * @return The OCID of the image from which the node was created.
     * 
     */
    private String imageId;
    /**
     * @return The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
     * 
     */
    private String instanceId;
    /**
     * @return IP address of the node.
     * 
     */
    private String ipAddress;
    /**
     * @return Indicates if the node requires a reboot to either reflect the latest os kernel or take actions for maintenance reboot.
     * 
     */
    private Boolean isRebootRequired;
    /**
     * @return The aggregate size of all local disks, in gigabytes. If the instance does not have any local disks, this field is null.
     * 
     */
    private Double localDisksTotalSizeInGbs;
    /**
     * @return The total amount of memory available to the node, in gigabytes.
     * 
     */
    private Integer memoryInGbs;
    /**
     * @return Cluster node type.
     * 
     */
    private String nodeType;
    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    private Integer nvmes;
    /**
     * @return The total number of OCPUs available to the node.
     * 
     */
    private Integer ocpus;
    /**
     * @return BDS-assigned Operating System version for the node.
     * 
     */
    private String osVersion;
    /**
     * @return Shape of the node.
     * 
     */
    private String shape;
    /**
     * @return The fingerprint of the SSH key used for node access.
     * 
     */
    private String sshFingerprint;
    /**
     * @return The state of the cluster.
     * 
     */
    private String state;
    /**
     * @return The OCID of the subnet in which the node is to be created.
     * 
     */
    private String subnetId;
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
     * 
     */
    private String timeMaintenanceRebootDue;

    private GetBdsInstanceNode() {}
    /**
     * @return The list of block volumes attached to a given node.
     * 
     */
    public List<GetBdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes() {
        return this.attachedBlockVolumes;
    }
    /**
     * @return The name of the availability domain in which the node is running.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The name of the node.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The name of the fault domain in which the node is running.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return The fully-qualified hostname (FQDN) of the node.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The OCID of the image from which the node was created.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return IP address of the node.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Indicates if the node requires a reboot to either reflect the latest os kernel or take actions for maintenance reboot.
     * 
     */
    public Boolean isRebootRequired() {
        return this.isRebootRequired;
    }
    /**
     * @return The aggregate size of all local disks, in gigabytes. If the instance does not have any local disks, this field is null.
     * 
     */
    public Double localDisksTotalSizeInGbs() {
        return this.localDisksTotalSizeInGbs;
    }
    /**
     * @return The total amount of memory available to the node, in gigabytes.
     * 
     */
    public Integer memoryInGbs() {
        return this.memoryInGbs;
    }
    /**
     * @return Cluster node type.
     * 
     */
    public String nodeType() {
        return this.nodeType;
    }
    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    public Integer nvmes() {
        return this.nvmes;
    }
    /**
     * @return The total number of OCPUs available to the node.
     * 
     */
    public Integer ocpus() {
        return this.ocpus;
    }
    /**
     * @return BDS-assigned Operating System version for the node.
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return Shape of the node.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The fingerprint of the SSH key used for node access.
     * 
     */
    public String sshFingerprint() {
        return this.sshFingerprint;
    }
    /**
     * @return The state of the cluster.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the subnet in which the node is to be created.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
     * 
     */
    public String timeMaintenanceRebootDue() {
        return this.timeMaintenanceRebootDue;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes;
        private String availabilityDomain;
        private String displayName;
        private String faultDomain;
        private String hostname;
        private String imageId;
        private String instanceId;
        private String ipAddress;
        private Boolean isRebootRequired;
        private Double localDisksTotalSizeInGbs;
        private Integer memoryInGbs;
        private String nodeType;
        private Integer nvmes;
        private Integer ocpus;
        private String osVersion;
        private String shape;
        private String sshFingerprint;
        private String state;
        private String subnetId;
        private String timeCreated;
        private String timeMaintenanceRebootDue;
        public Builder() {}
        public Builder(GetBdsInstanceNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedBlockVolumes = defaults.attachedBlockVolumes;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.displayName = defaults.displayName;
    	      this.faultDomain = defaults.faultDomain;
    	      this.hostname = defaults.hostname;
    	      this.imageId = defaults.imageId;
    	      this.instanceId = defaults.instanceId;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isRebootRequired = defaults.isRebootRequired;
    	      this.localDisksTotalSizeInGbs = defaults.localDisksTotalSizeInGbs;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.nodeType = defaults.nodeType;
    	      this.nvmes = defaults.nvmes;
    	      this.ocpus = defaults.ocpus;
    	      this.osVersion = defaults.osVersion;
    	      this.shape = defaults.shape;
    	      this.sshFingerprint = defaults.sshFingerprint;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeMaintenanceRebootDue = defaults.timeMaintenanceRebootDue;
        }

        @CustomType.Setter
        public Builder attachedBlockVolumes(List<GetBdsInstanceNodeAttachedBlockVolume> attachedBlockVolumes) {
            if (attachedBlockVolumes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "attachedBlockVolumes");
            }
            this.attachedBlockVolumes = attachedBlockVolumes;
            return this;
        }
        public Builder attachedBlockVolumes(GetBdsInstanceNodeAttachedBlockVolume... attachedBlockVolumes) {
            return attachedBlockVolumes(List.of(attachedBlockVolumes));
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            if (faultDomain == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "faultDomain");
            }
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isRebootRequired(Boolean isRebootRequired) {
            if (isRebootRequired == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "isRebootRequired");
            }
            this.isRebootRequired = isRebootRequired;
            return this;
        }
        @CustomType.Setter
        public Builder localDisksTotalSizeInGbs(Double localDisksTotalSizeInGbs) {
            if (localDisksTotalSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "localDisksTotalSizeInGbs");
            }
            this.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(Integer memoryInGbs) {
            if (memoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "memoryInGbs");
            }
            this.memoryInGbs = memoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(String nodeType) {
            if (nodeType == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "nodeType");
            }
            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder nvmes(Integer nvmes) {
            if (nvmes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "nvmes");
            }
            this.nvmes = nvmes;
            return this;
        }
        @CustomType.Setter
        public Builder ocpus(Integer ocpus) {
            if (ocpus == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "ocpus");
            }
            this.ocpus = ocpus;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sshFingerprint(String sshFingerprint) {
            if (sshFingerprint == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "sshFingerprint");
            }
            this.sshFingerprint = sshFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceRebootDue(String timeMaintenanceRebootDue) {
            if (timeMaintenanceRebootDue == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNode", "timeMaintenanceRebootDue");
            }
            this.timeMaintenanceRebootDue = timeMaintenanceRebootDue;
            return this;
        }
        public GetBdsInstanceNode build() {
            final var _resultValue = new GetBdsInstanceNode();
            _resultValue.attachedBlockVolumes = attachedBlockVolumes;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.displayName = displayName;
            _resultValue.faultDomain = faultDomain;
            _resultValue.hostname = hostname;
            _resultValue.imageId = imageId;
            _resultValue.instanceId = instanceId;
            _resultValue.ipAddress = ipAddress;
            _resultValue.isRebootRequired = isRebootRequired;
            _resultValue.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            _resultValue.memoryInGbs = memoryInGbs;
            _resultValue.nodeType = nodeType;
            _resultValue.nvmes = nvmes;
            _resultValue.ocpus = ocpus;
            _resultValue.osVersion = osVersion;
            _resultValue.shape = shape;
            _resultValue.sshFingerprint = sshFingerprint;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeMaintenanceRebootDue = timeMaintenanceRebootDue;
            return _resultValue;
        }
    }
}
