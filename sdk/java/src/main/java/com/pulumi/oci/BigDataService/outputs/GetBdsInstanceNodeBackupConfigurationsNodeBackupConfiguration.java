// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceNodeBackupConfigurationsNodeBackupConfigurationLevelTypeDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration {
    /**
     * @return Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
     * 
     */
    private String backupType;
    /**
     * @return The OCID of the cluster.
     * 
     */
    private String bdsInstanceId;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return The unique identifier for the NodeBackupConfiguration.
     * 
     */
    private String id;
    /**
     * @return Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
     * 
     */
    private List<GetBdsInstanceNodeBackupConfigurationsNodeBackupConfigurationLevelTypeDetail> levelTypeDetails;
    /**
     * @return Number of backup copies to retain.
     * 
     */
    private Integer numberOfBackupsToRetain;
    /**
     * @return Day/time recurrence (specified following RFC 5545) at which to trigger the backup process. Currently only DAILY, WEEKLY and MONTHLY frequency is supported. Days of the week are specified using BYDAY field. Time of the day is specified using BYHOUR. Other fields are not supported.
     * 
     */
    private String schedule;
    /**
     * @return The state of the NodeBackupConfiguration configuration.
     * 
     */
    private String state;
    /**
     * @return The time the NodeBackupConfiguration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the NodeBackupConfiguration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The time zone of the execution schedule, in IANA time zone database name format
     * 
     */
    private String timezone;

    private GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration() {}
    /**
     * @return Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The OCID of the cluster.
     * 
     */
    public String bdsInstanceId() {
        return this.bdsInstanceId;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The unique identifier for the NodeBackupConfiguration.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
     * 
     */
    public List<GetBdsInstanceNodeBackupConfigurationsNodeBackupConfigurationLevelTypeDetail> levelTypeDetails() {
        return this.levelTypeDetails;
    }
    /**
     * @return Number of backup copies to retain.
     * 
     */
    public Integer numberOfBackupsToRetain() {
        return this.numberOfBackupsToRetain;
    }
    /**
     * @return Day/time recurrence (specified following RFC 5545) at which to trigger the backup process. Currently only DAILY, WEEKLY and MONTHLY frequency is supported. Days of the week are specified using BYDAY field. Time of the day is specified using BYHOUR. Other fields are not supported.
     * 
     */
    public String schedule() {
        return this.schedule;
    }
    /**
     * @return The state of the NodeBackupConfiguration configuration.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the NodeBackupConfiguration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the NodeBackupConfiguration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The time zone of the execution schedule, in IANA time zone database name format
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupType;
        private String bdsInstanceId;
        private String displayName;
        private String id;
        private List<GetBdsInstanceNodeBackupConfigurationsNodeBackupConfigurationLevelTypeDetail> levelTypeDetails;
        private Integer numberOfBackupsToRetain;
        private String schedule;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private String timezone;
        public Builder() {}
        public Builder(GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupType = defaults.backupType;
    	      this.bdsInstanceId = defaults.bdsInstanceId;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.levelTypeDetails = defaults.levelTypeDetails;
    	      this.numberOfBackupsToRetain = defaults.numberOfBackupsToRetain;
    	      this.schedule = defaults.schedule;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder backupType(String backupType) {
            if (backupType == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "backupType");
            }
            this.backupType = backupType;
            return this;
        }
        @CustomType.Setter
        public Builder bdsInstanceId(String bdsInstanceId) {
            if (bdsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "bdsInstanceId");
            }
            this.bdsInstanceId = bdsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder levelTypeDetails(List<GetBdsInstanceNodeBackupConfigurationsNodeBackupConfigurationLevelTypeDetail> levelTypeDetails) {
            if (levelTypeDetails == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "levelTypeDetails");
            }
            this.levelTypeDetails = levelTypeDetails;
            return this;
        }
        public Builder levelTypeDetails(GetBdsInstanceNodeBackupConfigurationsNodeBackupConfigurationLevelTypeDetail... levelTypeDetails) {
            return levelTypeDetails(List.of(levelTypeDetails));
        }
        @CustomType.Setter
        public Builder numberOfBackupsToRetain(Integer numberOfBackupsToRetain) {
            if (numberOfBackupsToRetain == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "numberOfBackupsToRetain");
            }
            this.numberOfBackupsToRetain = numberOfBackupsToRetain;
            return this;
        }
        @CustomType.Setter
        public Builder schedule(String schedule) {
            if (schedule == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "schedule");
            }
            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        public GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration build() {
            final var _resultValue = new GetBdsInstanceNodeBackupConfigurationsNodeBackupConfiguration();
            _resultValue.backupType = backupType;
            _resultValue.bdsInstanceId = bdsInstanceId;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.levelTypeDetails = levelTypeDetails;
            _resultValue.numberOfBackupsToRetain = numberOfBackupsToRetain;
            _resultValue.schedule = schedule;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
