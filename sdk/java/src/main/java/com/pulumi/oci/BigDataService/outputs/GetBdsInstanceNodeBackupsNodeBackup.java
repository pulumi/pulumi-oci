// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceNodeBackupsNodeBackup {
    /**
     * @return type based on how backup action was initiated.
     * 
     */
    private String backupTriggerType;
    /**
     * @return Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
     * 
     */
    private String backupType;
    /**
     * @return The display name belonged to the node backup.
     * 
     */
    private String displayName;
    /**
     * @return The id of the node backup.
     * 
     */
    private String id;
    /**
     * @return The ID of the nodeBackupConfiguration if the NodeBackup is automatically created by applying the configuration.
     * 
     */
    private String nodeBackupConfigId;
    /**
     * @return The node host name belonged to a node that has a node backup.
     * 
     */
    private String nodeHostName;
    /**
     * @return The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    private String nodeInstanceId;
    /**
     * @return The state of the Node&#39;s Backup.
     * 
     */
    private String state;
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;

    private GetBdsInstanceNodeBackupsNodeBackup() {}
    /**
     * @return type based on how backup action was initiated.
     * 
     */
    public String backupTriggerType() {
        return this.backupTriggerType;
    }
    /**
     * @return Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The display name belonged to the node backup.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The id of the node backup.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the nodeBackupConfiguration if the NodeBackup is automatically created by applying the configuration.
     * 
     */
    public String nodeBackupConfigId() {
        return this.nodeBackupConfigId;
    }
    /**
     * @return The node host name belonged to a node that has a node backup.
     * 
     */
    public String nodeHostName() {
        return this.nodeHostName;
    }
    /**
     * @return The instance OCID of the node, which is the resource from which the node backup was acquired.
     * 
     */
    public String nodeInstanceId() {
        return this.nodeInstanceId;
    }
    /**
     * @return The state of the Node&#39;s Backup.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceNodeBackupsNodeBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupTriggerType;
        private String backupType;
        private String displayName;
        private String id;
        private String nodeBackupConfigId;
        private String nodeHostName;
        private String nodeInstanceId;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetBdsInstanceNodeBackupsNodeBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupTriggerType = defaults.backupTriggerType;
    	      this.backupType = defaults.backupType;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.nodeBackupConfigId = defaults.nodeBackupConfigId;
    	      this.nodeHostName = defaults.nodeHostName;
    	      this.nodeInstanceId = defaults.nodeInstanceId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder backupTriggerType(String backupTriggerType) {
            if (backupTriggerType == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "backupTriggerType");
            }
            this.backupTriggerType = backupTriggerType;
            return this;
        }
        @CustomType.Setter
        public Builder backupType(String backupType) {
            if (backupType == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "backupType");
            }
            this.backupType = backupType;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nodeBackupConfigId(String nodeBackupConfigId) {
            if (nodeBackupConfigId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "nodeBackupConfigId");
            }
            this.nodeBackupConfigId = nodeBackupConfigId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeHostName(String nodeHostName) {
            if (nodeHostName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "nodeHostName");
            }
            this.nodeHostName = nodeHostName;
            return this;
        }
        @CustomType.Setter
        public Builder nodeInstanceId(String nodeInstanceId) {
            if (nodeInstanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "nodeInstanceId");
            }
            this.nodeInstanceId = nodeInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsNodeBackup", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetBdsInstanceNodeBackupsNodeBackup build() {
            final var _resultValue = new GetBdsInstanceNodeBackupsNodeBackup();
            _resultValue.backupTriggerType = backupTriggerType;
            _resultValue.backupType = backupType;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.nodeBackupConfigId = nodeBackupConfigId;
            _resultValue.nodeHostName = nodeHostName;
            _resultValue.nodeInstanceId = nodeInstanceId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
