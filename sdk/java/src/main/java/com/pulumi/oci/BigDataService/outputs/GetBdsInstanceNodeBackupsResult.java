// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceNodeBackupsFilter;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceNodeBackupsNodeBackup;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBdsInstanceNodeBackupsResult {
    private String bdsInstanceId;
    /**
     * @return BDS generated name for the backup. Format is nodeHostName_timeCreated.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetBdsInstanceNodeBackupsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of node_backups.
     * 
     */
    private List<GetBdsInstanceNodeBackupsNodeBackup> nodeBackups;
    /**
     * @return Host name of the node to which this backup belongs.
     * 
     */
    private @Nullable String nodeHostName;
    /**
     * @return The state of the NodeBackup.
     * 
     */
    private @Nullable String state;

    private GetBdsInstanceNodeBackupsResult() {}
    public String bdsInstanceId() {
        return this.bdsInstanceId;
    }
    /**
     * @return BDS generated name for the backup. Format is nodeHostName_timeCreated.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetBdsInstanceNodeBackupsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of node_backups.
     * 
     */
    public List<GetBdsInstanceNodeBackupsNodeBackup> nodeBackups() {
        return this.nodeBackups;
    }
    /**
     * @return Host name of the node to which this backup belongs.
     * 
     */
    public Optional<String> nodeHostName() {
        return Optional.ofNullable(this.nodeHostName);
    }
    /**
     * @return The state of the NodeBackup.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceNodeBackupsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bdsInstanceId;
        private @Nullable String displayName;
        private @Nullable List<GetBdsInstanceNodeBackupsFilter> filters;
        private String id;
        private List<GetBdsInstanceNodeBackupsNodeBackup> nodeBackups;
        private @Nullable String nodeHostName;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetBdsInstanceNodeBackupsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bdsInstanceId = defaults.bdsInstanceId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.nodeBackups = defaults.nodeBackups;
    	      this.nodeHostName = defaults.nodeHostName;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder bdsInstanceId(String bdsInstanceId) {
            if (bdsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsResult", "bdsInstanceId");
            }
            this.bdsInstanceId = bdsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetBdsInstanceNodeBackupsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetBdsInstanceNodeBackupsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nodeBackups(List<GetBdsInstanceNodeBackupsNodeBackup> nodeBackups) {
            if (nodeBackups == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeBackupsResult", "nodeBackups");
            }
            this.nodeBackups = nodeBackups;
            return this;
        }
        public Builder nodeBackups(GetBdsInstanceNodeBackupsNodeBackup... nodeBackups) {
            return nodeBackups(List.of(nodeBackups));
        }
        @CustomType.Setter
        public Builder nodeHostName(@Nullable String nodeHostName) {

            this.nodeHostName = nodeHostName;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetBdsInstanceNodeBackupsResult build() {
            final var _resultValue = new GetBdsInstanceNodeBackupsResult();
            _resultValue.bdsInstanceId = bdsInstanceId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.nodeBackups = nodeBackups;
            _resultValue.nodeHostName = nodeHostName;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
