// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstanceNodeReplaceConfigurationLevelTypeDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBdsInstanceNodeReplaceConfigurationResult {
    /**
     * @return The OCID of the bdsInstance which is the parent resource id.
     * 
     */
    private String bdsInstanceId;
    private String clusterAdminPassword;
    /**
     * @return A user-friendly name. Only ASCII alphanumeric characters with no spaces allowed. The name does not have to be unique, and it may be changed. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return This value is the minimum period of time to wait for metric emission before triggering node replacement. The value is in minutes.
     * 
     */
    private Integer durationInMinutes;
    /**
     * @return The unique identifier for the NodeReplaceConfiguration.
     * 
     */
    private String id;
    /**
     * @return Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
     * 
     */
    private List<GetBdsInstanceNodeReplaceConfigurationLevelTypeDetail> levelTypeDetails;
    /**
     * @return Type of compute instance health metric to use for node replacement
     * 
     */
    private String metricType;
    private String nodeReplaceConfigurationId;
    /**
     * @return The state of the NodeReplaceConfiguration.
     * 
     */
    private String state;
    /**
     * @return The time the NodeReplaceConfiguration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the NodeReplaceConfiguration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetBdsInstanceNodeReplaceConfigurationResult() {}
    /**
     * @return The OCID of the bdsInstance which is the parent resource id.
     * 
     */
    public String bdsInstanceId() {
        return this.bdsInstanceId;
    }
    public String clusterAdminPassword() {
        return this.clusterAdminPassword;
    }
    /**
     * @return A user-friendly name. Only ASCII alphanumeric characters with no spaces allowed. The name does not have to be unique, and it may be changed. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return This value is the minimum period of time to wait for metric emission before triggering node replacement. The value is in minutes.
     * 
     */
    public Integer durationInMinutes() {
        return this.durationInMinutes;
    }
    /**
     * @return The unique identifier for the NodeReplaceConfiguration.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details of the type of level used to trigger the creation of a new node backup configuration or node replacement configuration.
     * 
     */
    public List<GetBdsInstanceNodeReplaceConfigurationLevelTypeDetail> levelTypeDetails() {
        return this.levelTypeDetails;
    }
    /**
     * @return Type of compute instance health metric to use for node replacement
     * 
     */
    public String metricType() {
        return this.metricType;
    }
    public String nodeReplaceConfigurationId() {
        return this.nodeReplaceConfigurationId;
    }
    /**
     * @return The state of the NodeReplaceConfiguration.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the NodeReplaceConfiguration was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the NodeReplaceConfiguration was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstanceNodeReplaceConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bdsInstanceId;
        private String clusterAdminPassword;
        private String displayName;
        private Integer durationInMinutes;
        private String id;
        private List<GetBdsInstanceNodeReplaceConfigurationLevelTypeDetail> levelTypeDetails;
        private String metricType;
        private String nodeReplaceConfigurationId;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetBdsInstanceNodeReplaceConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bdsInstanceId = defaults.bdsInstanceId;
    	      this.clusterAdminPassword = defaults.clusterAdminPassword;
    	      this.displayName = defaults.displayName;
    	      this.durationInMinutes = defaults.durationInMinutes;
    	      this.id = defaults.id;
    	      this.levelTypeDetails = defaults.levelTypeDetails;
    	      this.metricType = defaults.metricType;
    	      this.nodeReplaceConfigurationId = defaults.nodeReplaceConfigurationId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder bdsInstanceId(String bdsInstanceId) {
            if (bdsInstanceId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "bdsInstanceId");
            }
            this.bdsInstanceId = bdsInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterAdminPassword(String clusterAdminPassword) {
            if (clusterAdminPassword == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "clusterAdminPassword");
            }
            this.clusterAdminPassword = clusterAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder durationInMinutes(Integer durationInMinutes) {
            if (durationInMinutes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "durationInMinutes");
            }
            this.durationInMinutes = durationInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder levelTypeDetails(List<GetBdsInstanceNodeReplaceConfigurationLevelTypeDetail> levelTypeDetails) {
            if (levelTypeDetails == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "levelTypeDetails");
            }
            this.levelTypeDetails = levelTypeDetails;
            return this;
        }
        public Builder levelTypeDetails(GetBdsInstanceNodeReplaceConfigurationLevelTypeDetail... levelTypeDetails) {
            return levelTypeDetails(List.of(levelTypeDetails));
        }
        @CustomType.Setter
        public Builder metricType(String metricType) {
            if (metricType == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "metricType");
            }
            this.metricType = metricType;
            return this;
        }
        @CustomType.Setter
        public Builder nodeReplaceConfigurationId(String nodeReplaceConfigurationId) {
            if (nodeReplaceConfigurationId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "nodeReplaceConfigurationId");
            }
            this.nodeReplaceConfigurationId = nodeReplaceConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstanceNodeReplaceConfigurationResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetBdsInstanceNodeReplaceConfigurationResult build() {
            final var _resultValue = new GetBdsInstanceNodeReplaceConfigurationResult();
            _resultValue.bdsInstanceId = bdsInstanceId;
            _resultValue.clusterAdminPassword = clusterAdminPassword;
            _resultValue.displayName = displayName;
            _resultValue.durationInMinutes = durationInMinutes;
            _resultValue.id = id;
            _resultValue.levelTypeDetails = levelTypeDetails;
            _resultValue.metricType = metricType;
            _resultValue.nodeReplaceConfigurationId = nodeReplaceConfigurationId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
