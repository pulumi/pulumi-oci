// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceBdsClusterVersionSummary;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceCloudSqlDetail;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceClusterDetail;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceComputeOnlyWorkerNode;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceEdgeNode;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceKafkaBrokerNode;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceMasterNode;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceNetworkConfig;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceNode;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceStartClusterShapeConfig;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceUtilNode;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceWorkerNode;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBdsInstancesBdsInstance {
    /**
     * @return Cluster version details including bds and odh version information.
     * 
     */
    private List<GetBdsInstancesBdsInstanceBdsClusterVersionSummary> bdsClusterVersionSummaries;
    /**
     * @return pre-authenticated URL of the bootstrap script in Object Store that can be downloaded and executed.
     * 
     */
    private String bootstrapScriptUrl;
    /**
     * @return The information about added Cloud SQL capability
     * 
     */
    private List<GetBdsInstancesBdsInstanceCloudSqlDetail> cloudSqlDetails;
    private String clusterAdminPassword;
    /**
     * @return Specific info about a Hadoop cluster
     * 
     */
    private List<GetBdsInstancesBdsInstanceClusterDetail> clusterDetails;
    /**
     * @return Profile of the Big Data Service cluster.
     * 
     */
    private String clusterProfile;
    private String clusterPublicKey;
    /**
     * @return Version of the Hadoop distribution.
     * 
     */
    private String clusterVersion;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    private List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNode> computeOnlyWorkerNodes;
    /**
     * @return The user who created the cluster.
     * 
     */
    private String createdBy;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    private List<GetBdsInstancesBdsInstanceEdgeNode> edgeNodes;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the Big Data Service resource.
     * 
     */
    private String id;
    private List<String> ignoreExistingNodesShapes;
    /**
     * @return Boolean flag specifying whether or not Cloud SQL should be configured.
     * 
     */
    private Boolean isCloudSqlConfigured;
    private Boolean isForceRemoveEnabled;
    private Boolean isForceStopJobs;
    /**
     * @return Boolean flag specifying whether or not the cluster is highly available (HA)
     * 
     */
    private Boolean isHighAvailability;
    /**
     * @return Boolean flag specifying whether or not Kafka should be configured.
     * 
     */
    private Boolean isKafkaConfigured;
    /**
     * @return Boolean flag specifying whether or not the cluster should be set up as secure.
     * 
     */
    private Boolean isSecure;
    private List<GetBdsInstancesBdsInstanceKafkaBrokerNode> kafkaBrokerNodes;
    private String kerberosRealmName;
    /**
     * @return The OCID of the Key Management master encryption key.
     * 
     */
    private String kmsKeyId;
    private List<GetBdsInstancesBdsInstanceMasterNode> masterNodes;
    /**
     * @return Additional configuration of the user&#39;s network.
     * 
     */
    private List<GetBdsInstancesBdsInstanceNetworkConfig> networkConfigs;
    /**
     * @return The list of nodes in the cluster.
     * 
     */
    private List<GetBdsInstancesBdsInstanceNode> nodes;
    /**
     * @return The number of nodes that form the cluster.
     * 
     */
    private Integer numberOfNodes;
    /**
     * @return Number of nodes that require a maintenance reboot
     * 
     */
    private Integer numberOfNodesRequiringMaintenanceReboot;
    private String osPatchVersion;
    private String removeNode;
    private List<GetBdsInstancesBdsInstanceStartClusterShapeConfig> startClusterShapeConfigs;
    /**
     * @return The state of the cluster.
     * 
     */
    private String state;
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    private List<GetBdsInstancesBdsInstanceUtilNode> utilNodes;
    private List<GetBdsInstancesBdsInstanceWorkerNode> workerNodes;

    private GetBdsInstancesBdsInstance() {}
    /**
     * @return Cluster version details including bds and odh version information.
     * 
     */
    public List<GetBdsInstancesBdsInstanceBdsClusterVersionSummary> bdsClusterVersionSummaries() {
        return this.bdsClusterVersionSummaries;
    }
    /**
     * @return pre-authenticated URL of the bootstrap script in Object Store that can be downloaded and executed.
     * 
     */
    public String bootstrapScriptUrl() {
        return this.bootstrapScriptUrl;
    }
    /**
     * @return The information about added Cloud SQL capability
     * 
     */
    public List<GetBdsInstancesBdsInstanceCloudSqlDetail> cloudSqlDetails() {
        return this.cloudSqlDetails;
    }
    public String clusterAdminPassword() {
        return this.clusterAdminPassword;
    }
    /**
     * @return Specific info about a Hadoop cluster
     * 
     */
    public List<GetBdsInstancesBdsInstanceClusterDetail> clusterDetails() {
        return this.clusterDetails;
    }
    /**
     * @return Profile of the Big Data Service cluster.
     * 
     */
    public String clusterProfile() {
        return this.clusterProfile;
    }
    public String clusterPublicKey() {
        return this.clusterPublicKey;
    }
    /**
     * @return Version of the Hadoop distribution.
     * 
     */
    public String clusterVersion() {
        return this.clusterVersion;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNode> computeOnlyWorkerNodes() {
        return this.computeOnlyWorkerNodes;
    }
    /**
     * @return The user who created the cluster.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{&#34;foo-namespace&#34;: {&#34;bar-key&#34;: &#34;value&#34;}}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public List<GetBdsInstancesBdsInstanceEdgeNode> edgeNodes() {
        return this.edgeNodes;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the Big Data Service resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ignoreExistingNodesShapes() {
        return this.ignoreExistingNodesShapes;
    }
    /**
     * @return Boolean flag specifying whether or not Cloud SQL should be configured.
     * 
     */
    public Boolean isCloudSqlConfigured() {
        return this.isCloudSqlConfigured;
    }
    public Boolean isForceRemoveEnabled() {
        return this.isForceRemoveEnabled;
    }
    public Boolean isForceStopJobs() {
        return this.isForceStopJobs;
    }
    /**
     * @return Boolean flag specifying whether or not the cluster is highly available (HA)
     * 
     */
    public Boolean isHighAvailability() {
        return this.isHighAvailability;
    }
    /**
     * @return Boolean flag specifying whether or not Kafka should be configured.
     * 
     */
    public Boolean isKafkaConfigured() {
        return this.isKafkaConfigured;
    }
    /**
     * @return Boolean flag specifying whether or not the cluster should be set up as secure.
     * 
     */
    public Boolean isSecure() {
        return this.isSecure;
    }
    public List<GetBdsInstancesBdsInstanceKafkaBrokerNode> kafkaBrokerNodes() {
        return this.kafkaBrokerNodes;
    }
    public String kerberosRealmName() {
        return this.kerberosRealmName;
    }
    /**
     * @return The OCID of the Key Management master encryption key.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public List<GetBdsInstancesBdsInstanceMasterNode> masterNodes() {
        return this.masterNodes;
    }
    /**
     * @return Additional configuration of the user&#39;s network.
     * 
     */
    public List<GetBdsInstancesBdsInstanceNetworkConfig> networkConfigs() {
        return this.networkConfigs;
    }
    /**
     * @return The list of nodes in the cluster.
     * 
     */
    public List<GetBdsInstancesBdsInstanceNode> nodes() {
        return this.nodes;
    }
    /**
     * @return The number of nodes that form the cluster.
     * 
     */
    public Integer numberOfNodes() {
        return this.numberOfNodes;
    }
    /**
     * @return Number of nodes that require a maintenance reboot
     * 
     */
    public Integer numberOfNodesRequiringMaintenanceReboot() {
        return this.numberOfNodesRequiringMaintenanceReboot;
    }
    public String osPatchVersion() {
        return this.osPatchVersion;
    }
    public String removeNode() {
        return this.removeNode;
    }
    public List<GetBdsInstancesBdsInstanceStartClusterShapeConfig> startClusterShapeConfigs() {
        return this.startClusterShapeConfigs;
    }
    /**
     * @return The state of the cluster.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public List<GetBdsInstancesBdsInstanceUtilNode> utilNodes() {
        return this.utilNodes;
    }
    public List<GetBdsInstancesBdsInstanceWorkerNode> workerNodes() {
        return this.workerNodes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstancesBdsInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBdsInstancesBdsInstanceBdsClusterVersionSummary> bdsClusterVersionSummaries;
        private String bootstrapScriptUrl;
        private List<GetBdsInstancesBdsInstanceCloudSqlDetail> cloudSqlDetails;
        private String clusterAdminPassword;
        private List<GetBdsInstancesBdsInstanceClusterDetail> clusterDetails;
        private String clusterProfile;
        private String clusterPublicKey;
        private String clusterVersion;
        private String compartmentId;
        private List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNode> computeOnlyWorkerNodes;
        private String createdBy;
        private Map<String,String> definedTags;
        private String displayName;
        private List<GetBdsInstancesBdsInstanceEdgeNode> edgeNodes;
        private Map<String,String> freeformTags;
        private String id;
        private List<String> ignoreExistingNodesShapes;
        private Boolean isCloudSqlConfigured;
        private Boolean isForceRemoveEnabled;
        private Boolean isForceStopJobs;
        private Boolean isHighAvailability;
        private Boolean isKafkaConfigured;
        private Boolean isSecure;
        private List<GetBdsInstancesBdsInstanceKafkaBrokerNode> kafkaBrokerNodes;
        private String kerberosRealmName;
        private String kmsKeyId;
        private List<GetBdsInstancesBdsInstanceMasterNode> masterNodes;
        private List<GetBdsInstancesBdsInstanceNetworkConfig> networkConfigs;
        private List<GetBdsInstancesBdsInstanceNode> nodes;
        private Integer numberOfNodes;
        private Integer numberOfNodesRequiringMaintenanceReboot;
        private String osPatchVersion;
        private String removeNode;
        private List<GetBdsInstancesBdsInstanceStartClusterShapeConfig> startClusterShapeConfigs;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private List<GetBdsInstancesBdsInstanceUtilNode> utilNodes;
        private List<GetBdsInstancesBdsInstanceWorkerNode> workerNodes;
        public Builder() {}
        public Builder(GetBdsInstancesBdsInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bdsClusterVersionSummaries = defaults.bdsClusterVersionSummaries;
    	      this.bootstrapScriptUrl = defaults.bootstrapScriptUrl;
    	      this.cloudSqlDetails = defaults.cloudSqlDetails;
    	      this.clusterAdminPassword = defaults.clusterAdminPassword;
    	      this.clusterDetails = defaults.clusterDetails;
    	      this.clusterProfile = defaults.clusterProfile;
    	      this.clusterPublicKey = defaults.clusterPublicKey;
    	      this.clusterVersion = defaults.clusterVersion;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeOnlyWorkerNodes = defaults.computeOnlyWorkerNodes;
    	      this.createdBy = defaults.createdBy;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.edgeNodes = defaults.edgeNodes;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.ignoreExistingNodesShapes = defaults.ignoreExistingNodesShapes;
    	      this.isCloudSqlConfigured = defaults.isCloudSqlConfigured;
    	      this.isForceRemoveEnabled = defaults.isForceRemoveEnabled;
    	      this.isForceStopJobs = defaults.isForceStopJobs;
    	      this.isHighAvailability = defaults.isHighAvailability;
    	      this.isKafkaConfigured = defaults.isKafkaConfigured;
    	      this.isSecure = defaults.isSecure;
    	      this.kafkaBrokerNodes = defaults.kafkaBrokerNodes;
    	      this.kerberosRealmName = defaults.kerberosRealmName;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.masterNodes = defaults.masterNodes;
    	      this.networkConfigs = defaults.networkConfigs;
    	      this.nodes = defaults.nodes;
    	      this.numberOfNodes = defaults.numberOfNodes;
    	      this.numberOfNodesRequiringMaintenanceReboot = defaults.numberOfNodesRequiringMaintenanceReboot;
    	      this.osPatchVersion = defaults.osPatchVersion;
    	      this.removeNode = defaults.removeNode;
    	      this.startClusterShapeConfigs = defaults.startClusterShapeConfigs;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.utilNodes = defaults.utilNodes;
    	      this.workerNodes = defaults.workerNodes;
        }

        @CustomType.Setter
        public Builder bdsClusterVersionSummaries(List<GetBdsInstancesBdsInstanceBdsClusterVersionSummary> bdsClusterVersionSummaries) {
            if (bdsClusterVersionSummaries == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "bdsClusterVersionSummaries");
            }
            this.bdsClusterVersionSummaries = bdsClusterVersionSummaries;
            return this;
        }
        public Builder bdsClusterVersionSummaries(GetBdsInstancesBdsInstanceBdsClusterVersionSummary... bdsClusterVersionSummaries) {
            return bdsClusterVersionSummaries(List.of(bdsClusterVersionSummaries));
        }
        @CustomType.Setter
        public Builder bootstrapScriptUrl(String bootstrapScriptUrl) {
            if (bootstrapScriptUrl == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "bootstrapScriptUrl");
            }
            this.bootstrapScriptUrl = bootstrapScriptUrl;
            return this;
        }
        @CustomType.Setter
        public Builder cloudSqlDetails(List<GetBdsInstancesBdsInstanceCloudSqlDetail> cloudSqlDetails) {
            if (cloudSqlDetails == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "cloudSqlDetails");
            }
            this.cloudSqlDetails = cloudSqlDetails;
            return this;
        }
        public Builder cloudSqlDetails(GetBdsInstancesBdsInstanceCloudSqlDetail... cloudSqlDetails) {
            return cloudSqlDetails(List.of(cloudSqlDetails));
        }
        @CustomType.Setter
        public Builder clusterAdminPassword(String clusterAdminPassword) {
            if (clusterAdminPassword == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "clusterAdminPassword");
            }
            this.clusterAdminPassword = clusterAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder clusterDetails(List<GetBdsInstancesBdsInstanceClusterDetail> clusterDetails) {
            if (clusterDetails == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "clusterDetails");
            }
            this.clusterDetails = clusterDetails;
            return this;
        }
        public Builder clusterDetails(GetBdsInstancesBdsInstanceClusterDetail... clusterDetails) {
            return clusterDetails(List.of(clusterDetails));
        }
        @CustomType.Setter
        public Builder clusterProfile(String clusterProfile) {
            if (clusterProfile == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "clusterProfile");
            }
            this.clusterProfile = clusterProfile;
            return this;
        }
        @CustomType.Setter
        public Builder clusterPublicKey(String clusterPublicKey) {
            if (clusterPublicKey == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "clusterPublicKey");
            }
            this.clusterPublicKey = clusterPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder clusterVersion(String clusterVersion) {
            if (clusterVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "clusterVersion");
            }
            this.clusterVersion = clusterVersion;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder computeOnlyWorkerNodes(List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNode> computeOnlyWorkerNodes) {
            if (computeOnlyWorkerNodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "computeOnlyWorkerNodes");
            }
            this.computeOnlyWorkerNodes = computeOnlyWorkerNodes;
            return this;
        }
        public Builder computeOnlyWorkerNodes(GetBdsInstancesBdsInstanceComputeOnlyWorkerNode... computeOnlyWorkerNodes) {
            return computeOnlyWorkerNodes(List.of(computeOnlyWorkerNodes));
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder edgeNodes(List<GetBdsInstancesBdsInstanceEdgeNode> edgeNodes) {
            if (edgeNodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "edgeNodes");
            }
            this.edgeNodes = edgeNodes;
            return this;
        }
        public Builder edgeNodes(GetBdsInstancesBdsInstanceEdgeNode... edgeNodes) {
            return edgeNodes(List.of(edgeNodes));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreExistingNodesShapes(List<String> ignoreExistingNodesShapes) {
            if (ignoreExistingNodesShapes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "ignoreExistingNodesShapes");
            }
            this.ignoreExistingNodesShapes = ignoreExistingNodesShapes;
            return this;
        }
        public Builder ignoreExistingNodesShapes(String... ignoreExistingNodesShapes) {
            return ignoreExistingNodesShapes(List.of(ignoreExistingNodesShapes));
        }
        @CustomType.Setter
        public Builder isCloudSqlConfigured(Boolean isCloudSqlConfigured) {
            if (isCloudSqlConfigured == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "isCloudSqlConfigured");
            }
            this.isCloudSqlConfigured = isCloudSqlConfigured;
            return this;
        }
        @CustomType.Setter
        public Builder isForceRemoveEnabled(Boolean isForceRemoveEnabled) {
            if (isForceRemoveEnabled == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "isForceRemoveEnabled");
            }
            this.isForceRemoveEnabled = isForceRemoveEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isForceStopJobs(Boolean isForceStopJobs) {
            if (isForceStopJobs == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "isForceStopJobs");
            }
            this.isForceStopJobs = isForceStopJobs;
            return this;
        }
        @CustomType.Setter
        public Builder isHighAvailability(Boolean isHighAvailability) {
            if (isHighAvailability == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "isHighAvailability");
            }
            this.isHighAvailability = isHighAvailability;
            return this;
        }
        @CustomType.Setter
        public Builder isKafkaConfigured(Boolean isKafkaConfigured) {
            if (isKafkaConfigured == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "isKafkaConfigured");
            }
            this.isKafkaConfigured = isKafkaConfigured;
            return this;
        }
        @CustomType.Setter
        public Builder isSecure(Boolean isSecure) {
            if (isSecure == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "isSecure");
            }
            this.isSecure = isSecure;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaBrokerNodes(List<GetBdsInstancesBdsInstanceKafkaBrokerNode> kafkaBrokerNodes) {
            if (kafkaBrokerNodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "kafkaBrokerNodes");
            }
            this.kafkaBrokerNodes = kafkaBrokerNodes;
            return this;
        }
        public Builder kafkaBrokerNodes(GetBdsInstancesBdsInstanceKafkaBrokerNode... kafkaBrokerNodes) {
            return kafkaBrokerNodes(List.of(kafkaBrokerNodes));
        }
        @CustomType.Setter
        public Builder kerberosRealmName(String kerberosRealmName) {
            if (kerberosRealmName == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "kerberosRealmName");
            }
            this.kerberosRealmName = kerberosRealmName;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder masterNodes(List<GetBdsInstancesBdsInstanceMasterNode> masterNodes) {
            if (masterNodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "masterNodes");
            }
            this.masterNodes = masterNodes;
            return this;
        }
        public Builder masterNodes(GetBdsInstancesBdsInstanceMasterNode... masterNodes) {
            return masterNodes(List.of(masterNodes));
        }
        @CustomType.Setter
        public Builder networkConfigs(List<GetBdsInstancesBdsInstanceNetworkConfig> networkConfigs) {
            if (networkConfigs == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "networkConfigs");
            }
            this.networkConfigs = networkConfigs;
            return this;
        }
        public Builder networkConfigs(GetBdsInstancesBdsInstanceNetworkConfig... networkConfigs) {
            return networkConfigs(List.of(networkConfigs));
        }
        @CustomType.Setter
        public Builder nodes(List<GetBdsInstancesBdsInstanceNode> nodes) {
            if (nodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "nodes");
            }
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(GetBdsInstancesBdsInstanceNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder numberOfNodes(Integer numberOfNodes) {
            if (numberOfNodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "numberOfNodes");
            }
            this.numberOfNodes = numberOfNodes;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfNodesRequiringMaintenanceReboot(Integer numberOfNodesRequiringMaintenanceReboot) {
            if (numberOfNodesRequiringMaintenanceReboot == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "numberOfNodesRequiringMaintenanceReboot");
            }
            this.numberOfNodesRequiringMaintenanceReboot = numberOfNodesRequiringMaintenanceReboot;
            return this;
        }
        @CustomType.Setter
        public Builder osPatchVersion(String osPatchVersion) {
            if (osPatchVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "osPatchVersion");
            }
            this.osPatchVersion = osPatchVersion;
            return this;
        }
        @CustomType.Setter
        public Builder removeNode(String removeNode) {
            if (removeNode == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "removeNode");
            }
            this.removeNode = removeNode;
            return this;
        }
        @CustomType.Setter
        public Builder startClusterShapeConfigs(List<GetBdsInstancesBdsInstanceStartClusterShapeConfig> startClusterShapeConfigs) {
            if (startClusterShapeConfigs == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "startClusterShapeConfigs");
            }
            this.startClusterShapeConfigs = startClusterShapeConfigs;
            return this;
        }
        public Builder startClusterShapeConfigs(GetBdsInstancesBdsInstanceStartClusterShapeConfig... startClusterShapeConfigs) {
            return startClusterShapeConfigs(List.of(startClusterShapeConfigs));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder utilNodes(List<GetBdsInstancesBdsInstanceUtilNode> utilNodes) {
            if (utilNodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "utilNodes");
            }
            this.utilNodes = utilNodes;
            return this;
        }
        public Builder utilNodes(GetBdsInstancesBdsInstanceUtilNode... utilNodes) {
            return utilNodes(List.of(utilNodes));
        }
        @CustomType.Setter
        public Builder workerNodes(List<GetBdsInstancesBdsInstanceWorkerNode> workerNodes) {
            if (workerNodes == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstance", "workerNodes");
            }
            this.workerNodes = workerNodes;
            return this;
        }
        public Builder workerNodes(GetBdsInstancesBdsInstanceWorkerNode... workerNodes) {
            return workerNodes(List.of(workerNodes));
        }
        public GetBdsInstancesBdsInstance build() {
            final var _resultValue = new GetBdsInstancesBdsInstance();
            _resultValue.bdsClusterVersionSummaries = bdsClusterVersionSummaries;
            _resultValue.bootstrapScriptUrl = bootstrapScriptUrl;
            _resultValue.cloudSqlDetails = cloudSqlDetails;
            _resultValue.clusterAdminPassword = clusterAdminPassword;
            _resultValue.clusterDetails = clusterDetails;
            _resultValue.clusterProfile = clusterProfile;
            _resultValue.clusterPublicKey = clusterPublicKey;
            _resultValue.clusterVersion = clusterVersion;
            _resultValue.compartmentId = compartmentId;
            _resultValue.computeOnlyWorkerNodes = computeOnlyWorkerNodes;
            _resultValue.createdBy = createdBy;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.edgeNodes = edgeNodes;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.ignoreExistingNodesShapes = ignoreExistingNodesShapes;
            _resultValue.isCloudSqlConfigured = isCloudSqlConfigured;
            _resultValue.isForceRemoveEnabled = isForceRemoveEnabled;
            _resultValue.isForceStopJobs = isForceStopJobs;
            _resultValue.isHighAvailability = isHighAvailability;
            _resultValue.isKafkaConfigured = isKafkaConfigured;
            _resultValue.isSecure = isSecure;
            _resultValue.kafkaBrokerNodes = kafkaBrokerNodes;
            _resultValue.kerberosRealmName = kerberosRealmName;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.masterNodes = masterNodes;
            _resultValue.networkConfigs = networkConfigs;
            _resultValue.nodes = nodes;
            _resultValue.numberOfNodes = numberOfNodes;
            _resultValue.numberOfNodesRequiringMaintenanceReboot = numberOfNodesRequiringMaintenanceReboot;
            _resultValue.osPatchVersion = osPatchVersion;
            _resultValue.removeNode = removeNode;
            _resultValue.startClusterShapeConfigs = startClusterShapeConfigs;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.utilNodes = utilNodes;
            _resultValue.workerNodes = workerNodes;
            return _resultValue;
        }
    }
}
