// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBdsInstancesBdsInstanceClusterDetail {
    /**
     * @return The URL of Ambari
     * 
     */
    private String ambariUrl;
    /**
     * @return Cloud SQL cell version.
     * 
     */
    private String bdCellVersion;
    /**
     * @return BDA version installed in the cluster
     * 
     */
    private String bdaVersion;
    /**
     * @return Big Data Manager version installed in the cluster.
     * 
     */
    private String bdmVersion;
    /**
     * @return Big Data Service version installed in the cluster.
     * 
     */
    private String bdsVersion;
    /**
     * @return The URL of Big Data Manager.
     * 
     */
    private String bigDataManagerUrl;
    /**
     * @return The URL of Cloudera Manager
     * 
     */
    private String clouderaManagerUrl;
    /**
     * @return Big Data SQL version.
     * 
     */
    private String csqlCellVersion;
    /**
     * @return Cloud SQL query server database version.
     * 
     */
    private String dbVersion;
    /**
     * @return The URL of the Hue server.
     * 
     */
    private String hueServerUrl;
    /**
     * @return The URL of the Jupyterhub.
     * 
     */
    private String jupyterHubUrl;
    /**
     * @return Version of the ODH (Oracle Distribution including Apache Hadoop) installed on the cluster.
     * 
     */
    private String odhVersion;
    /**
     * @return BDS-assigned Operating System version for the node.
     * 
     */
    private String osVersion;
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    private String timeRefreshed;

    private GetBdsInstancesBdsInstanceClusterDetail() {}
    /**
     * @return The URL of Ambari
     * 
     */
    public String ambariUrl() {
        return this.ambariUrl;
    }
    /**
     * @return Cloud SQL cell version.
     * 
     */
    public String bdCellVersion() {
        return this.bdCellVersion;
    }
    /**
     * @return BDA version installed in the cluster
     * 
     */
    public String bdaVersion() {
        return this.bdaVersion;
    }
    /**
     * @return Big Data Manager version installed in the cluster.
     * 
     */
    public String bdmVersion() {
        return this.bdmVersion;
    }
    /**
     * @return Big Data Service version installed in the cluster.
     * 
     */
    public String bdsVersion() {
        return this.bdsVersion;
    }
    /**
     * @return The URL of Big Data Manager.
     * 
     */
    public String bigDataManagerUrl() {
        return this.bigDataManagerUrl;
    }
    /**
     * @return The URL of Cloudera Manager
     * 
     */
    public String clouderaManagerUrl() {
        return this.clouderaManagerUrl;
    }
    /**
     * @return Big Data SQL version.
     * 
     */
    public String csqlCellVersion() {
        return this.csqlCellVersion;
    }
    /**
     * @return Cloud SQL query server database version.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return The URL of the Hue server.
     * 
     */
    public String hueServerUrl() {
        return this.hueServerUrl;
    }
    /**
     * @return The URL of the Jupyterhub.
     * 
     */
    public String jupyterHubUrl() {
        return this.jupyterHubUrl;
    }
    /**
     * @return Version of the ODH (Oracle Distribution including Apache Hadoop) installed on the cluster.
     * 
     */
    public String odhVersion() {
        return this.odhVersion;
    }
    /**
     * @return BDS-assigned Operating System version for the node.
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return The time the cluster was created, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the cluster was automatically or manually refreshed, shown as an RFC 3339 formatted datetime string.
     * 
     */
    public String timeRefreshed() {
        return this.timeRefreshed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstancesBdsInstanceClusterDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ambariUrl;
        private String bdCellVersion;
        private String bdaVersion;
        private String bdmVersion;
        private String bdsVersion;
        private String bigDataManagerUrl;
        private String clouderaManagerUrl;
        private String csqlCellVersion;
        private String dbVersion;
        private String hueServerUrl;
        private String jupyterHubUrl;
        private String odhVersion;
        private String osVersion;
        private String timeCreated;
        private String timeRefreshed;
        public Builder() {}
        public Builder(GetBdsInstancesBdsInstanceClusterDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ambariUrl = defaults.ambariUrl;
    	      this.bdCellVersion = defaults.bdCellVersion;
    	      this.bdaVersion = defaults.bdaVersion;
    	      this.bdmVersion = defaults.bdmVersion;
    	      this.bdsVersion = defaults.bdsVersion;
    	      this.bigDataManagerUrl = defaults.bigDataManagerUrl;
    	      this.clouderaManagerUrl = defaults.clouderaManagerUrl;
    	      this.csqlCellVersion = defaults.csqlCellVersion;
    	      this.dbVersion = defaults.dbVersion;
    	      this.hueServerUrl = defaults.hueServerUrl;
    	      this.jupyterHubUrl = defaults.jupyterHubUrl;
    	      this.odhVersion = defaults.odhVersion;
    	      this.osVersion = defaults.osVersion;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeRefreshed = defaults.timeRefreshed;
        }

        @CustomType.Setter
        public Builder ambariUrl(String ambariUrl) {
            if (ambariUrl == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "ambariUrl");
            }
            this.ambariUrl = ambariUrl;
            return this;
        }
        @CustomType.Setter
        public Builder bdCellVersion(String bdCellVersion) {
            if (bdCellVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "bdCellVersion");
            }
            this.bdCellVersion = bdCellVersion;
            return this;
        }
        @CustomType.Setter
        public Builder bdaVersion(String bdaVersion) {
            if (bdaVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "bdaVersion");
            }
            this.bdaVersion = bdaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder bdmVersion(String bdmVersion) {
            if (bdmVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "bdmVersion");
            }
            this.bdmVersion = bdmVersion;
            return this;
        }
        @CustomType.Setter
        public Builder bdsVersion(String bdsVersion) {
            if (bdsVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "bdsVersion");
            }
            this.bdsVersion = bdsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder bigDataManagerUrl(String bigDataManagerUrl) {
            if (bigDataManagerUrl == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "bigDataManagerUrl");
            }
            this.bigDataManagerUrl = bigDataManagerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder clouderaManagerUrl(String clouderaManagerUrl) {
            if (clouderaManagerUrl == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "clouderaManagerUrl");
            }
            this.clouderaManagerUrl = clouderaManagerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder csqlCellVersion(String csqlCellVersion) {
            if (csqlCellVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "csqlCellVersion");
            }
            this.csqlCellVersion = csqlCellVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            if (dbVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "dbVersion");
            }
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hueServerUrl(String hueServerUrl) {
            if (hueServerUrl == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "hueServerUrl");
            }
            this.hueServerUrl = hueServerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder jupyterHubUrl(String jupyterHubUrl) {
            if (jupyterHubUrl == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "jupyterHubUrl");
            }
            this.jupyterHubUrl = jupyterHubUrl;
            return this;
        }
        @CustomType.Setter
        public Builder odhVersion(String odhVersion) {
            if (odhVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "odhVersion");
            }
            this.odhVersion = odhVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeRefreshed(String timeRefreshed) {
            if (timeRefreshed == null) {
              throw new MissingRequiredPropertyException("GetBdsInstancesBdsInstanceClusterDetail", "timeRefreshed");
            }
            this.timeRefreshed = timeRefreshed;
            return this;
        }
        public GetBdsInstancesBdsInstanceClusterDetail build() {
            final var _resultValue = new GetBdsInstancesBdsInstanceClusterDetail();
            _resultValue.ambariUrl = ambariUrl;
            _resultValue.bdCellVersion = bdCellVersion;
            _resultValue.bdaVersion = bdaVersion;
            _resultValue.bdmVersion = bdmVersion;
            _resultValue.bdsVersion = bdsVersion;
            _resultValue.bigDataManagerUrl = bigDataManagerUrl;
            _resultValue.clouderaManagerUrl = clouderaManagerUrl;
            _resultValue.csqlCellVersion = csqlCellVersion;
            _resultValue.dbVersion = dbVersion;
            _resultValue.hueServerUrl = hueServerUrl;
            _resultValue.jupyterHubUrl = jupyterHubUrl;
            _resultValue.odhVersion = odhVersion;
            _resultValue.osVersion = osVersion;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeRefreshed = timeRefreshed;
            return _resultValue;
        }
    }
}
