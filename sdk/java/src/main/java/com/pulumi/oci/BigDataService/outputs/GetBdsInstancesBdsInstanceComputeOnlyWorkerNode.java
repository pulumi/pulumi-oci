// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.BigDataService.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.BigDataService.outputs.GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBdsInstancesBdsInstanceComputeOnlyWorkerNode {
    /**
     * @return The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    private final String blockVolumeSizeInGbs;
    /**
     * @return The number of nodes that form the cluster.
     * 
     */
    private final Integer numberOfNodes;
    /**
     * @return Shape of the node.
     * 
     */
    private final String shape;
    private final List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig> shapeConfigs;
    /**
     * @return The OCID of the subnet in which the node is to be created.
     * 
     */
    private final String subnetId;

    @CustomType.Constructor
    private GetBdsInstancesBdsInstanceComputeOnlyWorkerNode(
        @CustomType.Parameter("blockVolumeSizeInGbs") String blockVolumeSizeInGbs,
        @CustomType.Parameter("numberOfNodes") Integer numberOfNodes,
        @CustomType.Parameter("shape") String shape,
        @CustomType.Parameter("shapeConfigs") List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig> shapeConfigs,
        @CustomType.Parameter("subnetId") String subnetId) {
        this.blockVolumeSizeInGbs = blockVolumeSizeInGbs;
        this.numberOfNodes = numberOfNodes;
        this.shape = shape;
        this.shapeConfigs = shapeConfigs;
        this.subnetId = subnetId;
    }

    /**
     * @return The size of block volume in GB that needs to be attached to a given node. All the necessary details needed for attachment are managed by service itself.
     * 
     */
    public String blockVolumeSizeInGbs() {
        return this.blockVolumeSizeInGbs;
    }
    /**
     * @return The number of nodes that form the cluster.
     * 
     */
    public Integer numberOfNodes() {
        return this.numberOfNodes;
    }
    /**
     * @return Shape of the node.
     * 
     */
    public String shape() {
        return this.shape;
    }
    public List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig> shapeConfigs() {
        return this.shapeConfigs;
    }
    /**
     * @return The OCID of the subnet in which the node is to be created.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBdsInstancesBdsInstanceComputeOnlyWorkerNode defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String blockVolumeSizeInGbs;
        private Integer numberOfNodes;
        private String shape;
        private List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig> shapeConfigs;
        private String subnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBdsInstancesBdsInstanceComputeOnlyWorkerNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockVolumeSizeInGbs = defaults.blockVolumeSizeInGbs;
    	      this.numberOfNodes = defaults.numberOfNodes;
    	      this.shape = defaults.shape;
    	      this.shapeConfigs = defaults.shapeConfigs;
    	      this.subnetId = defaults.subnetId;
        }

        public Builder blockVolumeSizeInGbs(String blockVolumeSizeInGbs) {
            this.blockVolumeSizeInGbs = Objects.requireNonNull(blockVolumeSizeInGbs);
            return this;
        }
        public Builder numberOfNodes(Integer numberOfNodes) {
            this.numberOfNodes = Objects.requireNonNull(numberOfNodes);
            return this;
        }
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        public Builder shapeConfigs(List<GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig> shapeConfigs) {
            this.shapeConfigs = Objects.requireNonNull(shapeConfigs);
            return this;
        }
        public Builder shapeConfigs(GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig... shapeConfigs) {
            return shapeConfigs(List.of(shapeConfigs));
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }        public GetBdsInstancesBdsInstanceComputeOnlyWorkerNode build() {
            return new GetBdsInstancesBdsInstanceComputeOnlyWorkerNode(blockVolumeSizeInGbs, numberOfNodes, shape, shapeConfigs, subnetId);
        }
    }
}
