// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Blockchain.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Blockchain.outputs.GetPeerOcpuAllocationParam;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPeerResult {
    /**
     * @return Availability Domain of peer
     * 
     */
    private String ad;
    /**
     * @return peer alias
     * 
     */
    private String alias;
    private String blockchainPlatformId;
    /**
     * @return Host on which the Peer exists
     * 
     */
    private String host;
    private String id;
    /**
     * @return OCPU allocation parameter
     * 
     */
    private List<GetPeerOcpuAllocationParam> ocpuAllocationParams;
    private String peerId;
    /**
     * @return peer identifier
     * 
     */
    private String peerKey;
    /**
     * @return Peer role
     * 
     */
    private String role;
    /**
     * @return The current state of the peer.
     * 
     */
    private String state;

    private GetPeerResult() {}
    /**
     * @return Availability Domain of peer
     * 
     */
    public String ad() {
        return this.ad;
    }
    /**
     * @return peer alias
     * 
     */
    public String alias() {
        return this.alias;
    }
    public String blockchainPlatformId() {
        return this.blockchainPlatformId;
    }
    /**
     * @return Host on which the Peer exists
     * 
     */
    public String host() {
        return this.host;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return OCPU allocation parameter
     * 
     */
    public List<GetPeerOcpuAllocationParam> ocpuAllocationParams() {
        return this.ocpuAllocationParams;
    }
    public String peerId() {
        return this.peerId;
    }
    /**
     * @return peer identifier
     * 
     */
    public String peerKey() {
        return this.peerKey;
    }
    /**
     * @return Peer role
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The current state of the peer.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPeerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ad;
        private String alias;
        private String blockchainPlatformId;
        private String host;
        private String id;
        private List<GetPeerOcpuAllocationParam> ocpuAllocationParams;
        private String peerId;
        private String peerKey;
        private String role;
        private String state;
        public Builder() {}
        public Builder(GetPeerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ad = defaults.ad;
    	      this.alias = defaults.alias;
    	      this.blockchainPlatformId = defaults.blockchainPlatformId;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.ocpuAllocationParams = defaults.ocpuAllocationParams;
    	      this.peerId = defaults.peerId;
    	      this.peerKey = defaults.peerKey;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder ad(String ad) {
            this.ad = Objects.requireNonNull(ad);
            return this;
        }
        @CustomType.Setter
        public Builder alias(String alias) {
            this.alias = Objects.requireNonNull(alias);
            return this;
        }
        @CustomType.Setter
        public Builder blockchainPlatformId(String blockchainPlatformId) {
            this.blockchainPlatformId = Objects.requireNonNull(blockchainPlatformId);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ocpuAllocationParams(List<GetPeerOcpuAllocationParam> ocpuAllocationParams) {
            this.ocpuAllocationParams = Objects.requireNonNull(ocpuAllocationParams);
            return this;
        }
        public Builder ocpuAllocationParams(GetPeerOcpuAllocationParam... ocpuAllocationParams) {
            return ocpuAllocationParams(List.of(ocpuAllocationParams));
        }
        @CustomType.Setter
        public Builder peerId(String peerId) {
            this.peerId = Objects.requireNonNull(peerId);
            return this;
        }
        @CustomType.Setter
        public Builder peerKey(String peerKey) {
            this.peerKey = Objects.requireNonNull(peerKey);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public GetPeerResult build() {
            final var o = new GetPeerResult();
            o.ad = ad;
            o.alias = alias;
            o.blockchainPlatformId = blockchainPlatformId;
            o.host = host;
            o.id = id;
            o.ocpuAllocationParams = ocpuAllocationParams;
            o.peerId = peerId;
            o.peerKey = peerKey;
            o.role = role;
            o.state = state;
            return o;
        }
    }
}
