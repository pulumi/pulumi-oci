// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Budget.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBudgetResult {
    /**
     * @return The actual spend in currency for the current budget cycle.
     * 
     */
    private Double actualSpend;
    /**
     * @return The total number of alert rules in the budget.
     * 
     */
    private Integer alertRuleCount;
    /**
     * @return The amount of the budget, expressed in the currency of the customer&#39;s rate card.
     * 
     */
    private Integer amount;
    private String budgetId;
    /**
     * @return The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    private Integer budgetProcessingPeriodStartOffset;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The description of the budget.
     * 
     */
    private String description;
    /**
     * @return The display name of the budget. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return The time when the one-time budget concludes. For example, - `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    private String endDate;
    /**
     * @return The forecasted spend in currency by the end of the current budget cycle.
     * 
     */
    private Double forecastedSpend;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the budget.
     * 
     */
    private String id;
    /**
     * @return The type of the budget processing period. Valid values are INVOICE, MONTH, and SINGLE_USE.
     * 
     */
    private String processingPeriodType;
    /**
     * @return The reset period for the budget.
     * 
     */
    private String resetPeriod;
    /**
     * @return The date when the one-time budget begins. For example, `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    private String startDate;
    /**
     * @return The current state of the budget.
     * 
     */
    private String state;
    /**
     * @return This is DEPRECATED. For backwards compatability, the property is populated when the targetType is &#34;COMPARTMENT&#34;, and targets contain the specific target compartment OCID. For all other scenarios, this property will be left empty.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;targets&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'targets' instead. */
    private String targetCompartmentId;
    /**
     * @return The type of target on which the budget is applied.
     * 
     */
    private String targetType;
    /**
     * @return The list of targets on which the budget is applied. If the targetType is &#34;COMPARTMENT&#34;, the targets contain the list of compartment OCIDs. If the targetType is &#34;TAG&#34;, the targets contain the list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;.
     * 
     */
    private List<String> targets;
    /**
     * @return The time that the budget was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time that the budget spend was last computed.
     * 
     */
    private String timeSpendComputed;
    /**
     * @return The time that the budget was updated.
     * 
     */
    private String timeUpdated;
    /**
     * @return The version of the budget. Starts from 1 and increments by 1.
     * 
     */
    private Integer version;

    private GetBudgetResult() {}
    /**
     * @return The actual spend in currency for the current budget cycle.
     * 
     */
    public Double actualSpend() {
        return this.actualSpend;
    }
    /**
     * @return The total number of alert rules in the budget.
     * 
     */
    public Integer alertRuleCount() {
        return this.alertRuleCount;
    }
    /**
     * @return The amount of the budget, expressed in the currency of the customer&#39;s rate card.
     * 
     */
    public Integer amount() {
        return this.amount;
    }
    public String budgetId() {
        return this.budgetId;
    }
    /**
     * @return The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    public Integer budgetProcessingPeriodStartOffset() {
        return this.budgetProcessingPeriodStartOffset;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the budget.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the budget. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The time when the one-time budget concludes. For example, - `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    public String endDate() {
        return this.endDate;
    }
    /**
     * @return The forecasted spend in currency by the end of the current budget cycle.
     * 
     */
    public Double forecastedSpend() {
        return this.forecastedSpend;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the budget.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The type of the budget processing period. Valid values are INVOICE, MONTH, and SINGLE_USE.
     * 
     */
    public String processingPeriodType() {
        return this.processingPeriodType;
    }
    /**
     * @return The reset period for the budget.
     * 
     */
    public String resetPeriod() {
        return this.resetPeriod;
    }
    /**
     * @return The date when the one-time budget begins. For example, `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    public String startDate() {
        return this.startDate;
    }
    /**
     * @return The current state of the budget.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return This is DEPRECATED. For backwards compatability, the property is populated when the targetType is &#34;COMPARTMENT&#34;, and targets contain the specific target compartment OCID. For all other scenarios, this property will be left empty.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;targets&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'targets' instead. */
    public String targetCompartmentId() {
        return this.targetCompartmentId;
    }
    /**
     * @return The type of target on which the budget is applied.
     * 
     */
    public String targetType() {
        return this.targetType;
    }
    /**
     * @return The list of targets on which the budget is applied. If the targetType is &#34;COMPARTMENT&#34;, the targets contain the list of compartment OCIDs. If the targetType is &#34;TAG&#34;, the targets contain the list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;.
     * 
     */
    public List<String> targets() {
        return this.targets;
    }
    /**
     * @return The time that the budget was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time that the budget spend was last computed.
     * 
     */
    public String timeSpendComputed() {
        return this.timeSpendComputed;
    }
    /**
     * @return The time that the budget was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The version of the budget. Starts from 1 and increments by 1.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBudgetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double actualSpend;
        private Integer alertRuleCount;
        private Integer amount;
        private String budgetId;
        private Integer budgetProcessingPeriodStartOffset;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private String endDate;
        private Double forecastedSpend;
        private Map<String,Object> freeformTags;
        private String id;
        private String processingPeriodType;
        private String resetPeriod;
        private String startDate;
        private String state;
        private String targetCompartmentId;
        private String targetType;
        private List<String> targets;
        private String timeCreated;
        private String timeSpendComputed;
        private String timeUpdated;
        private Integer version;
        public Builder() {}
        public Builder(GetBudgetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actualSpend = defaults.actualSpend;
    	      this.alertRuleCount = defaults.alertRuleCount;
    	      this.amount = defaults.amount;
    	      this.budgetId = defaults.budgetId;
    	      this.budgetProcessingPeriodStartOffset = defaults.budgetProcessingPeriodStartOffset;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endDate = defaults.endDate;
    	      this.forecastedSpend = defaults.forecastedSpend;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.processingPeriodType = defaults.processingPeriodType;
    	      this.resetPeriod = defaults.resetPeriod;
    	      this.startDate = defaults.startDate;
    	      this.state = defaults.state;
    	      this.targetCompartmentId = defaults.targetCompartmentId;
    	      this.targetType = defaults.targetType;
    	      this.targets = defaults.targets;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeSpendComputed = defaults.timeSpendComputed;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder actualSpend(Double actualSpend) {
            if (actualSpend == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "actualSpend");
            }
            this.actualSpend = actualSpend;
            return this;
        }
        @CustomType.Setter
        public Builder alertRuleCount(Integer alertRuleCount) {
            if (alertRuleCount == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "alertRuleCount");
            }
            this.alertRuleCount = alertRuleCount;
            return this;
        }
        @CustomType.Setter
        public Builder amount(Integer amount) {
            if (amount == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "amount");
            }
            this.amount = amount;
            return this;
        }
        @CustomType.Setter
        public Builder budgetId(String budgetId) {
            if (budgetId == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "budgetId");
            }
            this.budgetId = budgetId;
            return this;
        }
        @CustomType.Setter
        public Builder budgetProcessingPeriodStartOffset(Integer budgetProcessingPeriodStartOffset) {
            if (budgetProcessingPeriodStartOffset == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "budgetProcessingPeriodStartOffset");
            }
            this.budgetProcessingPeriodStartOffset = budgetProcessingPeriodStartOffset;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endDate(String endDate) {
            if (endDate == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "endDate");
            }
            this.endDate = endDate;
            return this;
        }
        @CustomType.Setter
        public Builder forecastedSpend(Double forecastedSpend) {
            if (forecastedSpend == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "forecastedSpend");
            }
            this.forecastedSpend = forecastedSpend;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder processingPeriodType(String processingPeriodType) {
            if (processingPeriodType == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "processingPeriodType");
            }
            this.processingPeriodType = processingPeriodType;
            return this;
        }
        @CustomType.Setter
        public Builder resetPeriod(String resetPeriod) {
            if (resetPeriod == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "resetPeriod");
            }
            this.resetPeriod = resetPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder startDate(String startDate) {
            if (startDate == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "startDate");
            }
            this.startDate = startDate;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetCompartmentId(String targetCompartmentId) {
            if (targetCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "targetCompartmentId");
            }
            this.targetCompartmentId = targetCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder targetType(String targetType) {
            if (targetType == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "targetType");
            }
            this.targetType = targetType;
            return this;
        }
        @CustomType.Setter
        public Builder targets(List<String> targets) {
            if (targets == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "targets");
            }
            this.targets = targets;
            return this;
        }
        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeSpendComputed(String timeSpendComputed) {
            if (timeSpendComputed == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "timeSpendComputed");
            }
            this.timeSpendComputed = timeSpendComputed;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetBudgetResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetBudgetResult build() {
            final var _resultValue = new GetBudgetResult();
            _resultValue.actualSpend = actualSpend;
            _resultValue.alertRuleCount = alertRuleCount;
            _resultValue.amount = amount;
            _resultValue.budgetId = budgetId;
            _resultValue.budgetProcessingPeriodStartOffset = budgetProcessingPeriodStartOffset;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.endDate = endDate;
            _resultValue.forecastedSpend = forecastedSpend;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.processingPeriodType = processingPeriodType;
            _resultValue.resetPeriod = resetPeriod;
            _resultValue.startDate = startDate;
            _resultValue.state = state;
            _resultValue.targetCompartmentId = targetCompartmentId;
            _resultValue.targetType = targetType;
            _resultValue.targets = targets;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeSpendComputed = timeSpendComputed;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
