// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Budget.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBudgetsBudget {
    /**
     * @return The actual spend in currency for the current budget cycle.
     * 
     */
    private @Nullable Double actualSpend;
    /**
     * @return The total number of alert rules in the budget.
     * 
     */
    private @Nullable Integer alertRuleCount;
    /**
     * @return The amount of the budget, expressed in the currency of the customer&#39;s rate card.
     * 
     */
    private @Nullable Integer amount;
    /**
     * @return The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    private @Nullable Integer budgetProcessingPeriodStartOffset;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return The description of the budget.
     * 
     */
    private @Nullable String description;
    /**
     * @return A user-friendly name. This does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The time when the one-time budget concludes. For example, - `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    private @Nullable String endDate;
    /**
     * @return The forecasted spend in currency by the end of the current budget cycle.
     * 
     */
    private @Nullable Double forecastedSpend;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The OCID of the budget.
     * 
     */
    private @Nullable String id;
    /**
     * @return The type of the budget processing period. Valid values are INVOICE, MONTH, and SINGLE_USE.
     * 
     */
    private @Nullable String processingPeriodType;
    /**
     * @return The reset period for the budget.
     * 
     */
    private @Nullable String resetPeriod;
    /**
     * @return The date when the one-time budget begins. For example, `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    private @Nullable String startDate;
    /**
     * @return The current state of the resource to filter by.
     * 
     */
    private @Nullable String state;
    /**
     * @return This is DEPRECATED. For backwards compatability, the property is populated when the targetType is &#34;COMPARTMENT&#34;, and targets contain the specific target compartment OCID. For all other scenarios, this property will be left empty.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;targets&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'targets' instead. */
    private @Nullable String targetCompartmentId;
    /**
     * @return The type of target to filter by:
     * * ALL - List all budgets
     * * COMPARTMENT - List all budgets with targetType == &#34;COMPARTMENT&#34;
     * * TAG - List all budgets with targetType == &#34;TAG&#34;
     * 
     */
    private @Nullable String targetType;
    /**
     * @return The list of targets on which the budget is applied. If the targetType is &#34;COMPARTMENT&#34;, the targets contain the list of compartment OCIDs. If the targetType is &#34;TAG&#34;, the targets contain the list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;.
     * 
     */
    private @Nullable List<String> targets;
    /**
     * @return The time that the budget was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time that the budget spend was last computed.
     * 
     */
    private @Nullable String timeSpendComputed;
    /**
     * @return The time that the budget was updated.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return The version of the budget. Starts from 1 and increments by 1.
     * 
     */
    private @Nullable Integer version;

    private GetBudgetsBudget() {}
    /**
     * @return The actual spend in currency for the current budget cycle.
     * 
     */
    public Optional<Double> actualSpend() {
        return Optional.ofNullable(this.actualSpend);
    }
    /**
     * @return The total number of alert rules in the budget.
     * 
     */
    public Optional<Integer> alertRuleCount() {
        return Optional.ofNullable(this.alertRuleCount);
    }
    /**
     * @return The amount of the budget, expressed in the currency of the customer&#39;s rate card.
     * 
     */
    public Optional<Integer> amount() {
        return Optional.ofNullable(this.amount);
    }
    /**
     * @return The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
     * 
     */
    public Optional<Integer> budgetProcessingPeriodStartOffset() {
        return Optional.ofNullable(this.budgetProcessingPeriodStartOffset);
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return The description of the budget.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A user-friendly name. This does not have to be unique, and it&#39;s changeable.  Example: `My new resource`
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The time when the one-time budget concludes. For example, - `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    public Optional<String> endDate() {
        return Optional.ofNullable(this.endDate);
    }
    /**
     * @return The forecasted spend in currency by the end of the current budget cycle.
     * 
     */
    public Optional<Double> forecastedSpend() {
        return Optional.ofNullable(this.forecastedSpend);
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The OCID of the budget.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The type of the budget processing period. Valid values are INVOICE, MONTH, and SINGLE_USE.
     * 
     */
    public Optional<String> processingPeriodType() {
        return Optional.ofNullable(this.processingPeriodType);
    }
    /**
     * @return The reset period for the budget.
     * 
     */
    public Optional<String> resetPeriod() {
        return Optional.ofNullable(this.resetPeriod);
    }
    /**
     * @return The date when the one-time budget begins. For example, `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
     * 
     */
    public Optional<String> startDate() {
        return Optional.ofNullable(this.startDate);
    }
    /**
     * @return The current state of the resource to filter by.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return This is DEPRECATED. For backwards compatability, the property is populated when the targetType is &#34;COMPARTMENT&#34;, and targets contain the specific target compartment OCID. For all other scenarios, this property will be left empty.
     * 
     * @deprecated
     * The &#39;target_compartment_id&#39; field has been deprecated. Please use &#39;targets&#39; instead.
     * 
     */
    @Deprecated /* The 'target_compartment_id' field has been deprecated. Please use 'targets' instead. */
    public Optional<String> targetCompartmentId() {
        return Optional.ofNullable(this.targetCompartmentId);
    }
    /**
     * @return The type of target to filter by:
     * * ALL - List all budgets
     * * COMPARTMENT - List all budgets with targetType == &#34;COMPARTMENT&#34;
     * * TAG - List all budgets with targetType == &#34;TAG&#34;
     * 
     */
    public Optional<String> targetType() {
        return Optional.ofNullable(this.targetType);
    }
    /**
     * @return The list of targets on which the budget is applied. If the targetType is &#34;COMPARTMENT&#34;, the targets contain the list of compartment OCIDs. If the targetType is &#34;TAG&#34;, the targets contain the list of cost tracking tag identifiers in the form of &#34;{tagNamespace}.{tagKey}.{tagValue}&#34;.
     * 
     */
    public List<String> targets() {
        return this.targets == null ? List.of() : this.targets;
    }
    /**
     * @return The time that the budget was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time that the budget spend was last computed.
     * 
     */
    public Optional<String> timeSpendComputed() {
        return Optional.ofNullable(this.timeSpendComputed);
    }
    /**
     * @return The time that the budget was updated.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return The version of the budget. Starts from 1 and increments by 1.
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBudgetsBudget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double actualSpend;
        private @Nullable Integer alertRuleCount;
        private @Nullable Integer amount;
        private @Nullable Integer budgetProcessingPeriodStartOffset;
        private @Nullable String compartmentId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable String endDate;
        private @Nullable Double forecastedSpend;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String processingPeriodType;
        private @Nullable String resetPeriod;
        private @Nullable String startDate;
        private @Nullable String state;
        private @Nullable String targetCompartmentId;
        private @Nullable String targetType;
        private @Nullable List<String> targets;
        private @Nullable String timeCreated;
        private @Nullable String timeSpendComputed;
        private @Nullable String timeUpdated;
        private @Nullable Integer version;
        public Builder() {}
        public Builder(GetBudgetsBudget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actualSpend = defaults.actualSpend;
    	      this.alertRuleCount = defaults.alertRuleCount;
    	      this.amount = defaults.amount;
    	      this.budgetProcessingPeriodStartOffset = defaults.budgetProcessingPeriodStartOffset;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.endDate = defaults.endDate;
    	      this.forecastedSpend = defaults.forecastedSpend;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.processingPeriodType = defaults.processingPeriodType;
    	      this.resetPeriod = defaults.resetPeriod;
    	      this.startDate = defaults.startDate;
    	      this.state = defaults.state;
    	      this.targetCompartmentId = defaults.targetCompartmentId;
    	      this.targetType = defaults.targetType;
    	      this.targets = defaults.targets;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeSpendComputed = defaults.timeSpendComputed;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder actualSpend(@Nullable Double actualSpend) {
            this.actualSpend = actualSpend;
            return this;
        }
        @CustomType.Setter
        public Builder alertRuleCount(@Nullable Integer alertRuleCount) {
            this.alertRuleCount = alertRuleCount;
            return this;
        }
        @CustomType.Setter
        public Builder amount(@Nullable Integer amount) {
            this.amount = amount;
            return this;
        }
        @CustomType.Setter
        public Builder budgetProcessingPeriodStartOffset(@Nullable Integer budgetProcessingPeriodStartOffset) {
            this.budgetProcessingPeriodStartOffset = budgetProcessingPeriodStartOffset;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endDate(@Nullable String endDate) {
            this.endDate = endDate;
            return this;
        }
        @CustomType.Setter
        public Builder forecastedSpend(@Nullable Double forecastedSpend) {
            this.forecastedSpend = forecastedSpend;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder processingPeriodType(@Nullable String processingPeriodType) {
            this.processingPeriodType = processingPeriodType;
            return this;
        }
        @CustomType.Setter
        public Builder resetPeriod(@Nullable String resetPeriod) {
            this.resetPeriod = resetPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetCompartmentId(@Nullable String targetCompartmentId) {
            this.targetCompartmentId = targetCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder targetType(@Nullable String targetType) {
            this.targetType = targetType;
            return this;
        }
        @CustomType.Setter
        public Builder targets(@Nullable List<String> targets) {
            this.targets = targets;
            return this;
        }
        public Builder targets(String... targets) {
            return targets(List.of(targets));
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeSpendComputed(@Nullable String timeSpendComputed) {
            this.timeSpendComputed = timeSpendComputed;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {
            this.version = version;
            return this;
        }
        public GetBudgetsBudget build() {
            final var o = new GetBudgetsBudget();
            o.actualSpend = actualSpend;
            o.alertRuleCount = alertRuleCount;
            o.amount = amount;
            o.budgetProcessingPeriodStartOffset = budgetProcessingPeriodStartOffset;
            o.compartmentId = compartmentId;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.endDate = endDate;
            o.forecastedSpend = forecastedSpend;
            o.freeformTags = freeformTags;
            o.id = id;
            o.processingPeriodType = processingPeriodType;
            o.resetPeriod = resetPeriod;
            o.startDate = startDate;
            o.state = state;
            o.targetCompartmentId = targetCompartmentId;
            o.targetType = targetType;
            o.targets = targets;
            o.timeCreated = timeCreated;
            o.timeSpendComputed = timeSpendComputed;
            o.timeUpdated = timeUpdated;
            o.version = version;
            return o;
        }
    }
}
