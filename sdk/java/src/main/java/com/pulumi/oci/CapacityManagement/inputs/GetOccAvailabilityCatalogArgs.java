// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetOccAvailabilityCatalogArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOccAvailabilityCatalogArgs Empty = new GetOccAvailabilityCatalogArgs();

    /**
     * The OCID of the availability catalog.
     * 
     */
    @Import(name="occAvailabilityCatalogId", required=true)
    private Output<String> occAvailabilityCatalogId;

    /**
     * @return The OCID of the availability catalog.
     * 
     */
    public Output<String> occAvailabilityCatalogId() {
        return this.occAvailabilityCatalogId;
    }

    private GetOccAvailabilityCatalogArgs() {}

    private GetOccAvailabilityCatalogArgs(GetOccAvailabilityCatalogArgs $) {
        this.occAvailabilityCatalogId = $.occAvailabilityCatalogId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOccAvailabilityCatalogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOccAvailabilityCatalogArgs $;

        public Builder() {
            $ = new GetOccAvailabilityCatalogArgs();
        }

        public Builder(GetOccAvailabilityCatalogArgs defaults) {
            $ = new GetOccAvailabilityCatalogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param occAvailabilityCatalogId The OCID of the availability catalog.
         * 
         * @return builder
         * 
         */
        public Builder occAvailabilityCatalogId(Output<String> occAvailabilityCatalogId) {
            $.occAvailabilityCatalogId = occAvailabilityCatalogId;
            return this;
        }

        /**
         * @param occAvailabilityCatalogId The OCID of the availability catalog.
         * 
         * @return builder
         * 
         */
        public Builder occAvailabilityCatalogId(String occAvailabilityCatalogId) {
            return occAvailabilityCatalogId(Output.of(occAvailabilityCatalogId));
        }

        public GetOccAvailabilityCatalogArgs build() {
            if ($.occAvailabilityCatalogId == null) {
                throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogArgs", "occAvailabilityCatalogId");
            }
            return $;
        }
    }

}
