// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CapacityManagement.inputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOccAvailabilityCatalogOccAvailabilitiesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOccAvailabilityCatalogOccAvailabilitiesArgs Empty = new GetOccAvailabilityCatalogOccAvailabilitiesArgs();

    /**
     * The capacity handover date of the capacity constraint to filter the list of capacity constraints.
     * 
     */
    @Import(name="dateExpectedCapacityHandover")
    private @Nullable Output<String> dateExpectedCapacityHandover;

    /**
     * @return The capacity handover date of the capacity constraint to filter the list of capacity constraints.
     * 
     */
    public Optional<Output<String>> dateExpectedCapacityHandover() {
        return Optional.ofNullable(this.dateExpectedCapacityHandover);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs>> filters;

    public Optional<Output<List<GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the availability catalog.
     * 
     */
    @Import(name="occAvailabilityCatalogId", required=true)
    private Output<String> occAvailabilityCatalogId;

    /**
     * @return The OCID of the availability catalog.
     * 
     */
    public Output<String> occAvailabilityCatalogId() {
        return this.occAvailabilityCatalogId;
    }

    /**
     * The name of the resource to filter the list of capacity constraints.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return The name of the resource to filter the list of capacity constraints.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * Resource type using which the capacity constraints of an availability catalog can be filtered.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return Resource type using which the capacity constraints of an availability catalog can be filtered.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * Workload type using the resources in an availability catalog can be filtered.
     * 
     */
    @Import(name="workloadType")
    private @Nullable Output<String> workloadType;

    /**
     * @return Workload type using the resources in an availability catalog can be filtered.
     * 
     */
    public Optional<Output<String>> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    private GetOccAvailabilityCatalogOccAvailabilitiesArgs() {}

    private GetOccAvailabilityCatalogOccAvailabilitiesArgs(GetOccAvailabilityCatalogOccAvailabilitiesArgs $) {
        this.dateExpectedCapacityHandover = $.dateExpectedCapacityHandover;
        this.filters = $.filters;
        this.occAvailabilityCatalogId = $.occAvailabilityCatalogId;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
        this.workloadType = $.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOccAvailabilityCatalogOccAvailabilitiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOccAvailabilityCatalogOccAvailabilitiesArgs $;

        public Builder() {
            $ = new GetOccAvailabilityCatalogOccAvailabilitiesArgs();
        }

        public Builder(GetOccAvailabilityCatalogOccAvailabilitiesArgs defaults) {
            $ = new GetOccAvailabilityCatalogOccAvailabilitiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dateExpectedCapacityHandover The capacity handover date of the capacity constraint to filter the list of capacity constraints.
         * 
         * @return builder
         * 
         */
        public Builder dateExpectedCapacityHandover(@Nullable Output<String> dateExpectedCapacityHandover) {
            $.dateExpectedCapacityHandover = dateExpectedCapacityHandover;
            return this;
        }

        /**
         * @param dateExpectedCapacityHandover The capacity handover date of the capacity constraint to filter the list of capacity constraints.
         * 
         * @return builder
         * 
         */
        public Builder dateExpectedCapacityHandover(String dateExpectedCapacityHandover) {
            return dateExpectedCapacityHandover(Output.of(dateExpectedCapacityHandover));
        }

        public Builder filters(@Nullable Output<List<GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param occAvailabilityCatalogId The OCID of the availability catalog.
         * 
         * @return builder
         * 
         */
        public Builder occAvailabilityCatalogId(Output<String> occAvailabilityCatalogId) {
            $.occAvailabilityCatalogId = occAvailabilityCatalogId;
            return this;
        }

        /**
         * @param occAvailabilityCatalogId The OCID of the availability catalog.
         * 
         * @return builder
         * 
         */
        public Builder occAvailabilityCatalogId(String occAvailabilityCatalogId) {
            return occAvailabilityCatalogId(Output.of(occAvailabilityCatalogId));
        }

        /**
         * @param resourceName The name of the resource to filter the list of capacity constraints.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The name of the resource to filter the list of capacity constraints.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType Resource type using which the capacity constraints of an availability catalog can be filtered.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Resource type using which the capacity constraints of an availability catalog can be filtered.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param workloadType Workload type using the resources in an availability catalog can be filtered.
         * 
         * @return builder
         * 
         */
        public Builder workloadType(@Nullable Output<String> workloadType) {
            $.workloadType = workloadType;
            return this;
        }

        /**
         * @param workloadType Workload type using the resources in an availability catalog can be filtered.
         * 
         * @return builder
         * 
         */
        public Builder workloadType(String workloadType) {
            return workloadType(Output.of(workloadType));
        }

        public GetOccAvailabilityCatalogOccAvailabilitiesArgs build() {
            if ($.occAvailabilityCatalogId == null) {
                throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogOccAvailabilitiesArgs", "occAvailabilityCatalogId");
            }
            return $;
        }
    }

}
