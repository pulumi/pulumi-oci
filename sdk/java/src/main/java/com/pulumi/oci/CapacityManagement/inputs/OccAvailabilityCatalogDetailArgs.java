// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OccAvailabilityCatalogDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final OccAvailabilityCatalogDetailArgs Empty = new OccAvailabilityCatalogDetailArgs();

    /**
     * The quantity of resource currently available that the customer can request.
     * 
     */
    @Import(name="availableQuantity")
    private @Nullable Output<String> availableQuantity;

    /**
     * @return The quantity of resource currently available that the customer can request.
     * 
     */
    public Optional<Output<String>> availableQuantity() {
        return Optional.ofNullable(this.availableQuantity);
    }

    /**
     * The OCID of the availability catalog.
     * 
     */
    @Import(name="catalogId")
    private @Nullable Output<String> catalogId;

    /**
     * @return The OCID of the availability catalog.
     * 
     */
    public Optional<Output<String>> catalogId() {
        return Optional.ofNullable(this.catalogId);
    }

    /**
     * The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
     * 
     */
    @Import(name="dateExpectedCapacityHandover")
    private @Nullable Output<String> dateExpectedCapacityHandover;

    /**
     * @return The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
     * 
     */
    public Optional<Output<String>> dateExpectedCapacityHandover() {
        return Optional.ofNullable(this.dateExpectedCapacityHandover);
    }

    /**
     * The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
     * 
     */
    @Import(name="dateFinalCustomerOrder")
    private @Nullable Output<String> dateFinalCustomerOrder;

    /**
     * @return The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
     * 
     */
    public Optional<Output<String>> dateFinalCustomerOrder() {
        return Optional.ofNullable(this.dateFinalCustomerOrder);
    }

    /**
     * The quantity of resource currently demanded by the customer.
     * 
     */
    @Import(name="demandedQuantity")
    private @Nullable Output<String> demandedQuantity;

    /**
     * @return The quantity of resource currently demanded by the customer.
     * 
     */
    public Optional<Output<String>> demandedQuantity() {
        return Optional.ofNullable(this.demandedQuantity);
    }

    /**
     * The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The name of the resource that the customer can request.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return The name of the resource that the customer can request.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The different types of resources against which customers can place capacity requests.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The different types of resources against which customers can place capacity requests.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The total quantity of resource that the customer can request.
     * 
     */
    @Import(name="totalAvailableQuantity")
    private @Nullable Output<String> totalAvailableQuantity;

    /**
     * @return The total quantity of resource that the customer can request.
     * 
     */
    public Optional<Output<String>> totalAvailableQuantity() {
        return Optional.ofNullable(this.totalAvailableQuantity);
    }

    /**
     * The unit in which the resource available is measured.
     * 
     */
    @Import(name="unit")
    private @Nullable Output<String> unit;

    /**
     * @return The unit in which the resource available is measured.
     * 
     */
    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    /**
     * The type of workload (Generic/ROW).
     * 
     */
    @Import(name="workloadType")
    private @Nullable Output<String> workloadType;

    /**
     * @return The type of workload (Generic/ROW).
     * 
     */
    public Optional<Output<String>> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    private OccAvailabilityCatalogDetailArgs() {}

    private OccAvailabilityCatalogDetailArgs(OccAvailabilityCatalogDetailArgs $) {
        this.availableQuantity = $.availableQuantity;
        this.catalogId = $.catalogId;
        this.dateExpectedCapacityHandover = $.dateExpectedCapacityHandover;
        this.dateFinalCustomerOrder = $.dateFinalCustomerOrder;
        this.demandedQuantity = $.demandedQuantity;
        this.namespace = $.namespace;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
        this.systemTags = $.systemTags;
        this.totalAvailableQuantity = $.totalAvailableQuantity;
        this.unit = $.unit;
        this.workloadType = $.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OccAvailabilityCatalogDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OccAvailabilityCatalogDetailArgs $;

        public Builder() {
            $ = new OccAvailabilityCatalogDetailArgs();
        }

        public Builder(OccAvailabilityCatalogDetailArgs defaults) {
            $ = new OccAvailabilityCatalogDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availableQuantity The quantity of resource currently available that the customer can request.
         * 
         * @return builder
         * 
         */
        public Builder availableQuantity(@Nullable Output<String> availableQuantity) {
            $.availableQuantity = availableQuantity;
            return this;
        }

        /**
         * @param availableQuantity The quantity of resource currently available that the customer can request.
         * 
         * @return builder
         * 
         */
        public Builder availableQuantity(String availableQuantity) {
            return availableQuantity(Output.of(availableQuantity));
        }

        /**
         * @param catalogId The OCID of the availability catalog.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(@Nullable Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId The OCID of the availability catalog.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param dateExpectedCapacityHandover The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
         * 
         * @return builder
         * 
         */
        public Builder dateExpectedCapacityHandover(@Nullable Output<String> dateExpectedCapacityHandover) {
            $.dateExpectedCapacityHandover = dateExpectedCapacityHandover;
            return this;
        }

        /**
         * @param dateExpectedCapacityHandover The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
         * 
         * @return builder
         * 
         */
        public Builder dateExpectedCapacityHandover(String dateExpectedCapacityHandover) {
            return dateExpectedCapacityHandover(Output.of(dateExpectedCapacityHandover));
        }

        /**
         * @param dateFinalCustomerOrder The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
         * 
         * @return builder
         * 
         */
        public Builder dateFinalCustomerOrder(@Nullable Output<String> dateFinalCustomerOrder) {
            $.dateFinalCustomerOrder = dateFinalCustomerOrder;
            return this;
        }

        /**
         * @param dateFinalCustomerOrder The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
         * 
         * @return builder
         * 
         */
        public Builder dateFinalCustomerOrder(String dateFinalCustomerOrder) {
            return dateFinalCustomerOrder(Output.of(dateFinalCustomerOrder));
        }

        /**
         * @param demandedQuantity The quantity of resource currently demanded by the customer.
         * 
         * @return builder
         * 
         */
        public Builder demandedQuantity(@Nullable Output<String> demandedQuantity) {
            $.demandedQuantity = demandedQuantity;
            return this;
        }

        /**
         * @param demandedQuantity The quantity of resource currently demanded by the customer.
         * 
         * @return builder
         * 
         */
        public Builder demandedQuantity(String demandedQuantity) {
            return demandedQuantity(Output.of(demandedQuantity));
        }

        /**
         * @param namespace The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourceName The name of the resource that the customer can request.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The name of the resource that the customer can request.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType The different types of resources against which customers can place capacity requests.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The different types of resources against which customers can place capacity requests.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param totalAvailableQuantity The total quantity of resource that the customer can request.
         * 
         * @return builder
         * 
         */
        public Builder totalAvailableQuantity(@Nullable Output<String> totalAvailableQuantity) {
            $.totalAvailableQuantity = totalAvailableQuantity;
            return this;
        }

        /**
         * @param totalAvailableQuantity The total quantity of resource that the customer can request.
         * 
         * @return builder
         * 
         */
        public Builder totalAvailableQuantity(String totalAvailableQuantity) {
            return totalAvailableQuantity(Output.of(totalAvailableQuantity));
        }

        /**
         * @param unit The unit in which the resource available is measured.
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit The unit in which the resource available is measured.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        /**
         * @param workloadType The type of workload (Generic/ROW).
         * 
         * @return builder
         * 
         */
        public Builder workloadType(@Nullable Output<String> workloadType) {
            $.workloadType = workloadType;
            return this;
        }

        /**
         * @param workloadType The type of workload (Generic/ROW).
         * 
         * @return builder
         * 
         */
        public Builder workloadType(String workloadType) {
            return workloadType(Output.of(workloadType));
        }

        public OccAvailabilityCatalogDetailArgs build() {
            return $;
        }
    }

}
