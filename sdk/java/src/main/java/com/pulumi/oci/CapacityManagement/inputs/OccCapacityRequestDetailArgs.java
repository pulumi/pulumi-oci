// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OccCapacityRequestDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final OccCapacityRequestDetailArgs Empty = new OccCapacityRequestDetailArgs();

    /**
     * The actual handed over quantity of resources at the time of request resolution.
     * 
     */
    @Import(name="actualHandoverQuantity")
    private @Nullable Output<String> actualHandoverQuantity;

    /**
     * @return The actual handed over quantity of resources at the time of request resolution.
     * 
     */
    public Optional<Output<String>> actualHandoverQuantity() {
        return Optional.ofNullable(this.actualHandoverQuantity);
    }

    /**
     * The date on which the actual handover quantity of resources is delivered.
     * 
     */
    @Import(name="dateActualHandover")
    private @Nullable Output<String> dateActualHandover;

    /**
     * @return The date on which the actual handover quantity of resources is delivered.
     * 
     */
    public Optional<Output<String>> dateActualHandover() {
        return Optional.ofNullable(this.dateActualHandover);
    }

    /**
     * The date on which the latest increment to supplied quantity of resources was delivered.
     * 
     */
    @Import(name="dateExpectedHandover")
    private @Nullable Output<String> dateExpectedHandover;

    /**
     * @return The date on which the latest increment to supplied quantity of resources was delivered.
     * 
     */
    public Optional<Output<String>> dateExpectedHandover() {
        return Optional.ofNullable(this.dateExpectedHandover);
    }

    /**
     * The number of compute server&#39;s with name &lt;resourceName&gt; required by the user.
     * 
     */
    @Import(name="demandQuantity", required=true)
    private Output<String> demandQuantity;

    /**
     * @return The number of compute server&#39;s with name &lt;resourceName&gt; required by the user.
     * 
     */
    public Output<String> demandQuantity() {
        return this.demandQuantity;
    }

    /**
     * The incremental quantity of resources supplied as the provisioning is underway.
     * 
     */
    @Import(name="expectedHandoverQuantity")
    private @Nullable Output<String> expectedHandoverQuantity;

    /**
     * @return The incremental quantity of resources supplied as the provisioning is underway.
     * 
     */
    public Optional<Output<String>> expectedHandoverQuantity() {
        return Optional.ofNullable(this.expectedHandoverQuantity);
    }

    /**
     * The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * The type of the resource against which the user wants to place a capacity request.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The type of the resource against which the user wants to place a capacity request.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     * The type of the workload (Generic/ROW).
     * 
     */
    @Import(name="workloadType", required=true)
    private Output<String> workloadType;

    /**
     * @return The type of the workload (Generic/ROW).
     * 
     */
    public Output<String> workloadType() {
        return this.workloadType;
    }

    private OccCapacityRequestDetailArgs() {}

    private OccCapacityRequestDetailArgs(OccCapacityRequestDetailArgs $) {
        this.actualHandoverQuantity = $.actualHandoverQuantity;
        this.dateActualHandover = $.dateActualHandover;
        this.dateExpectedHandover = $.dateExpectedHandover;
        this.demandQuantity = $.demandQuantity;
        this.expectedHandoverQuantity = $.expectedHandoverQuantity;
        this.resourceName = $.resourceName;
        this.resourceType = $.resourceType;
        this.workloadType = $.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OccCapacityRequestDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OccCapacityRequestDetailArgs $;

        public Builder() {
            $ = new OccCapacityRequestDetailArgs();
        }

        public Builder(OccCapacityRequestDetailArgs defaults) {
            $ = new OccCapacityRequestDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actualHandoverQuantity The actual handed over quantity of resources at the time of request resolution.
         * 
         * @return builder
         * 
         */
        public Builder actualHandoverQuantity(@Nullable Output<String> actualHandoverQuantity) {
            $.actualHandoverQuantity = actualHandoverQuantity;
            return this;
        }

        /**
         * @param actualHandoverQuantity The actual handed over quantity of resources at the time of request resolution.
         * 
         * @return builder
         * 
         */
        public Builder actualHandoverQuantity(String actualHandoverQuantity) {
            return actualHandoverQuantity(Output.of(actualHandoverQuantity));
        }

        /**
         * @param dateActualHandover The date on which the actual handover quantity of resources is delivered.
         * 
         * @return builder
         * 
         */
        public Builder dateActualHandover(@Nullable Output<String> dateActualHandover) {
            $.dateActualHandover = dateActualHandover;
            return this;
        }

        /**
         * @param dateActualHandover The date on which the actual handover quantity of resources is delivered.
         * 
         * @return builder
         * 
         */
        public Builder dateActualHandover(String dateActualHandover) {
            return dateActualHandover(Output.of(dateActualHandover));
        }

        /**
         * @param dateExpectedHandover The date on which the latest increment to supplied quantity of resources was delivered.
         * 
         * @return builder
         * 
         */
        public Builder dateExpectedHandover(@Nullable Output<String> dateExpectedHandover) {
            $.dateExpectedHandover = dateExpectedHandover;
            return this;
        }

        /**
         * @param dateExpectedHandover The date on which the latest increment to supplied quantity of resources was delivered.
         * 
         * @return builder
         * 
         */
        public Builder dateExpectedHandover(String dateExpectedHandover) {
            return dateExpectedHandover(Output.of(dateExpectedHandover));
        }

        /**
         * @param demandQuantity The number of compute server&#39;s with name &lt;resourceName&gt; required by the user.
         * 
         * @return builder
         * 
         */
        public Builder demandQuantity(Output<String> demandQuantity) {
            $.demandQuantity = demandQuantity;
            return this;
        }

        /**
         * @param demandQuantity The number of compute server&#39;s with name &lt;resourceName&gt; required by the user.
         * 
         * @return builder
         * 
         */
        public Builder demandQuantity(String demandQuantity) {
            return demandQuantity(Output.of(demandQuantity));
        }

        /**
         * @param expectedHandoverQuantity The incremental quantity of resources supplied as the provisioning is underway.
         * 
         * @return builder
         * 
         */
        public Builder expectedHandoverQuantity(@Nullable Output<String> expectedHandoverQuantity) {
            $.expectedHandoverQuantity = expectedHandoverQuantity;
            return this;
        }

        /**
         * @param expectedHandoverQuantity The incremental quantity of resources supplied as the provisioning is underway.
         * 
         * @return builder
         * 
         */
        public Builder expectedHandoverQuantity(String expectedHandoverQuantity) {
            return expectedHandoverQuantity(Output.of(expectedHandoverQuantity));
        }

        /**
         * @param resourceName The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceType The type of the resource against which the user wants to place a capacity request.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The type of the resource against which the user wants to place a capacity request.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param workloadType The type of the workload (Generic/ROW).
         * 
         * @return builder
         * 
         */
        public Builder workloadType(Output<String> workloadType) {
            $.workloadType = workloadType;
            return this;
        }

        /**
         * @param workloadType The type of the workload (Generic/ROW).
         * 
         * @return builder
         * 
         */
        public Builder workloadType(String workloadType) {
            return workloadType(Output.of(workloadType));
        }

        public OccCapacityRequestDetailArgs build() {
            if ($.demandQuantity == null) {
                throw new MissingRequiredPropertyException("OccCapacityRequestDetailArgs", "demandQuantity");
            }
            if ($.resourceName == null) {
                throw new MissingRequiredPropertyException("OccCapacityRequestDetailArgs", "resourceName");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("OccCapacityRequestDetailArgs", "resourceType");
            }
            if ($.workloadType == null) {
                throw new MissingRequiredPropertyException("OccCapacityRequestDetailArgs", "workloadType");
            }
            return $;
        }
    }

}
