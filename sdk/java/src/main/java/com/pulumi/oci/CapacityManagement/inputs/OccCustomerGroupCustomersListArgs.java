// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OccCustomerGroupCustomersListArgs extends com.pulumi.resources.ResourceArgs {

    public static final OccCustomerGroupCustomersListArgs Empty = new OccCustomerGroupCustomersListArgs();

    /**
     * The description about the customer group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description about the customer group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name for the customer.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name for the customer.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The OCID of the customer group.
     * 
     */
    @Import(name="occCustomerGroupId")
    private @Nullable Output<String> occCustomerGroupId;

    /**
     * @return The OCID of the customer group.
     * 
     */
    public Optional<Output<String>> occCustomerGroupId() {
        return Optional.ofNullable(this.occCustomerGroupId);
    }

    /**
     * To determine whether the customer is enabled/disabled.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return To determine whether the customer is enabled/disabled.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The OCID of the tenancy belonging to the customer.
     * 
     */
    @Import(name="tenancyId", required=true)
    private Output<String> tenancyId;

    /**
     * @return The OCID of the tenancy belonging to the customer.
     * 
     */
    public Output<String> tenancyId() {
        return this.tenancyId;
    }

    private OccCustomerGroupCustomersListArgs() {}

    private OccCustomerGroupCustomersListArgs(OccCustomerGroupCustomersListArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.occCustomerGroupId = $.occCustomerGroupId;
        this.status = $.status;
        this.tenancyId = $.tenancyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OccCustomerGroupCustomersListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OccCustomerGroupCustomersListArgs $;

        public Builder() {
            $ = new OccCustomerGroupCustomersListArgs();
        }

        public Builder(OccCustomerGroupCustomersListArgs defaults) {
            $ = new OccCustomerGroupCustomersListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description about the customer group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description about the customer group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name for the customer.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for the customer.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param occCustomerGroupId The OCID of the customer group.
         * 
         * @return builder
         * 
         */
        public Builder occCustomerGroupId(@Nullable Output<String> occCustomerGroupId) {
            $.occCustomerGroupId = occCustomerGroupId;
            return this;
        }

        /**
         * @param occCustomerGroupId The OCID of the customer group.
         * 
         * @return builder
         * 
         */
        public Builder occCustomerGroupId(String occCustomerGroupId) {
            return occCustomerGroupId(Output.of(occCustomerGroupId));
        }

        /**
         * @param status To determine whether the customer is enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status To determine whether the customer is enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tenancyId The OCID of the tenancy belonging to the customer.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(Output<String> tenancyId) {
            $.tenancyId = tenancyId;
            return this;
        }

        /**
         * @param tenancyId The OCID of the tenancy belonging to the customer.
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(String tenancyId) {
            return tenancyId(Output.of(tenancyId));
        }

        public OccCustomerGroupCustomersListArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("OccCustomerGroupCustomersListArgs", "displayName");
            }
            if ($.tenancyId == null) {
                throw new MissingRequiredPropertyException("OccCustomerGroupCustomersListArgs", "tenancyId");
            }
            return $;
        }
    }

}
