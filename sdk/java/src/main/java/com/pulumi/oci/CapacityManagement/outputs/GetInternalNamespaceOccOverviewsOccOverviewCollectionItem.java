// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInternalNamespaceOccOverviewsOccOverviewCollectionItem {
    /**
     * @return A raw json blob containing all the capacity requests corresponding to the resource name
     * 
     */
    private String capacityRequestsBlob;
    /**
     * @return The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
     * 
     */
    private String compartmentId;
    /**
     * @return The name of the month along with year for which this summary corresponds to.
     * 
     */
    private String periodValue;
    /**
     * @return The name of the resource for which we have aggregated the value.
     * 
     */
    private String resourceName;
    /**
     * @return The quantity of the resource which is available at the end of the period of aggregationDetails model in consideration.
     * 
     */
    private String totalAvailable;
    /**
     * @return The quantity of the resource which is cancelled by the customer. Once the capacity request was submitted, the customer can still cancel it. This field sums up those values.
     * 
     */
    private String totalCancelled;
    /**
     * @return The quantity of the resource which is demanded by customers via capacity requests against the resource name at the end of the time period in consideration for overview.
     * 
     */
    private String totalDemanded;
    /**
     * @return The quantity of the resource which is rejected by Oracle.
     * 
     */
    private String totalRejected;
    /**
     * @return The quantity of the resource which is supplied by Oracle to the customer against the resource name at the end of the time period in consideration.
     * 
     */
    private String totalSupplied;
    /**
     * @return The quantity of the resource which Oracle was unable to supply. For a given capacity request, Oracle sometimes cannot supply the entire value demanded by the customer. In such cases a partial value is provided, thereby leaving behind a portion of unfulfilled values. This field sums that up.
     * 
     */
    private String totalUnfulfilled;
    /**
     * @return The unit e.g SERVER in which the above values like totalAvailable, totalSupplied etc is measured.
     * 
     */
    private String unit;
    /**
     * @return A raw json blob containing breakdown of totalAvailable, totalDemanded, totalSupplied, totalRejected, totalCancelled and totalUnfulfilled by workload types
     * 
     */
    private String workloadTypeBreakdownBlob;

    private GetInternalNamespaceOccOverviewsOccOverviewCollectionItem() {}
    /**
     * @return A raw json blob containing all the capacity requests corresponding to the resource name
     * 
     */
    public String capacityRequestsBlob() {
        return this.capacityRequestsBlob;
    }
    /**
     * @return The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the month along with year for which this summary corresponds to.
     * 
     */
    public String periodValue() {
        return this.periodValue;
    }
    /**
     * @return The name of the resource for which we have aggregated the value.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return The quantity of the resource which is available at the end of the period of aggregationDetails model in consideration.
     * 
     */
    public String totalAvailable() {
        return this.totalAvailable;
    }
    /**
     * @return The quantity of the resource which is cancelled by the customer. Once the capacity request was submitted, the customer can still cancel it. This field sums up those values.
     * 
     */
    public String totalCancelled() {
        return this.totalCancelled;
    }
    /**
     * @return The quantity of the resource which is demanded by customers via capacity requests against the resource name at the end of the time period in consideration for overview.
     * 
     */
    public String totalDemanded() {
        return this.totalDemanded;
    }
    /**
     * @return The quantity of the resource which is rejected by Oracle.
     * 
     */
    public String totalRejected() {
        return this.totalRejected;
    }
    /**
     * @return The quantity of the resource which is supplied by Oracle to the customer against the resource name at the end of the time period in consideration.
     * 
     */
    public String totalSupplied() {
        return this.totalSupplied;
    }
    /**
     * @return The quantity of the resource which Oracle was unable to supply. For a given capacity request, Oracle sometimes cannot supply the entire value demanded by the customer. In such cases a partial value is provided, thereby leaving behind a portion of unfulfilled values. This field sums that up.
     * 
     */
    public String totalUnfulfilled() {
        return this.totalUnfulfilled;
    }
    /**
     * @return The unit e.g SERVER in which the above values like totalAvailable, totalSupplied etc is measured.
     * 
     */
    public String unit() {
        return this.unit;
    }
    /**
     * @return A raw json blob containing breakdown of totalAvailable, totalDemanded, totalSupplied, totalRejected, totalCancelled and totalUnfulfilled by workload types
     * 
     */
    public String workloadTypeBreakdownBlob() {
        return this.workloadTypeBreakdownBlob;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInternalNamespaceOccOverviewsOccOverviewCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String capacityRequestsBlob;
        private String compartmentId;
        private String periodValue;
        private String resourceName;
        private String totalAvailable;
        private String totalCancelled;
        private String totalDemanded;
        private String totalRejected;
        private String totalSupplied;
        private String totalUnfulfilled;
        private String unit;
        private String workloadTypeBreakdownBlob;
        public Builder() {}
        public Builder(GetInternalNamespaceOccOverviewsOccOverviewCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityRequestsBlob = defaults.capacityRequestsBlob;
    	      this.compartmentId = defaults.compartmentId;
    	      this.periodValue = defaults.periodValue;
    	      this.resourceName = defaults.resourceName;
    	      this.totalAvailable = defaults.totalAvailable;
    	      this.totalCancelled = defaults.totalCancelled;
    	      this.totalDemanded = defaults.totalDemanded;
    	      this.totalRejected = defaults.totalRejected;
    	      this.totalSupplied = defaults.totalSupplied;
    	      this.totalUnfulfilled = defaults.totalUnfulfilled;
    	      this.unit = defaults.unit;
    	      this.workloadTypeBreakdownBlob = defaults.workloadTypeBreakdownBlob;
        }

        @CustomType.Setter
        public Builder capacityRequestsBlob(String capacityRequestsBlob) {
            if (capacityRequestsBlob == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "capacityRequestsBlob");
            }
            this.capacityRequestsBlob = capacityRequestsBlob;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder periodValue(String periodValue) {
            if (periodValue == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "periodValue");
            }
            this.periodValue = periodValue;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            if (resourceName == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "resourceName");
            }
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder totalAvailable(String totalAvailable) {
            if (totalAvailable == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "totalAvailable");
            }
            this.totalAvailable = totalAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder totalCancelled(String totalCancelled) {
            if (totalCancelled == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "totalCancelled");
            }
            this.totalCancelled = totalCancelled;
            return this;
        }
        @CustomType.Setter
        public Builder totalDemanded(String totalDemanded) {
            if (totalDemanded == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "totalDemanded");
            }
            this.totalDemanded = totalDemanded;
            return this;
        }
        @CustomType.Setter
        public Builder totalRejected(String totalRejected) {
            if (totalRejected == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "totalRejected");
            }
            this.totalRejected = totalRejected;
            return this;
        }
        @CustomType.Setter
        public Builder totalSupplied(String totalSupplied) {
            if (totalSupplied == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "totalSupplied");
            }
            this.totalSupplied = totalSupplied;
            return this;
        }
        @CustomType.Setter
        public Builder totalUnfulfilled(String totalUnfulfilled) {
            if (totalUnfulfilled == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "totalUnfulfilled");
            }
            this.totalUnfulfilled = totalUnfulfilled;
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            if (unit == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "unit");
            }
            this.unit = unit;
            return this;
        }
        @CustomType.Setter
        public Builder workloadTypeBreakdownBlob(String workloadTypeBreakdownBlob) {
            if (workloadTypeBreakdownBlob == null) {
              throw new MissingRequiredPropertyException("GetInternalNamespaceOccOverviewsOccOverviewCollectionItem", "workloadTypeBreakdownBlob");
            }
            this.workloadTypeBreakdownBlob = workloadTypeBreakdownBlob;
            return this;
        }
        public GetInternalNamespaceOccOverviewsOccOverviewCollectionItem build() {
            final var _resultValue = new GetInternalNamespaceOccOverviewsOccOverviewCollectionItem();
            _resultValue.capacityRequestsBlob = capacityRequestsBlob;
            _resultValue.compartmentId = compartmentId;
            _resultValue.periodValue = periodValue;
            _resultValue.resourceName = resourceName;
            _resultValue.totalAvailable = totalAvailable;
            _resultValue.totalCancelled = totalCancelled;
            _resultValue.totalDemanded = totalDemanded;
            _resultValue.totalRejected = totalRejected;
            _resultValue.totalSupplied = totalSupplied;
            _resultValue.totalUnfulfilled = totalUnfulfilled;
            _resultValue.unit = unit;
            _resultValue.workloadTypeBreakdownBlob = workloadTypeBreakdownBlob;
            return _resultValue;
        }
    }
}
