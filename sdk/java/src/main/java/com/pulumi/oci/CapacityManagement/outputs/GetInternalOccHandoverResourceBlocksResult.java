// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CapacityManagement.outputs.GetInternalOccHandoverResourceBlocksFilter;
import com.pulumi.oci.CapacityManagement.outputs.GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInternalOccHandoverResourceBlocksResult {
    /**
     * @return The OCID of the compartment where the resource block&#39;s are placed.
     * 
     */
    private String compartmentId;
    private @Nullable List<GetInternalOccHandoverResourceBlocksFilter> filters;
    private @Nullable String handoverDateGreaterThanOrEqualTo;
    private @Nullable String handoverDateLessThanOrEqualTo;
    /**
     * @return The name of the resource handed over by oracle.  For instance for compute namespace this will be the name of the bare metal hardware resource.
     * 
     */
    private @Nullable String handoverResourceName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the Oracle Cloud Infrastructure service in consideration.  For example Compute, Exadata and so on.
     * 
     */
    private String namespace;
    /**
     * @return The OCID of the customer group for which the resources were provisioned.
     * 
     */
    private String occCustomerGroupId;
    /**
     * @return The list of occ_handover_resource_block_collection.
     * 
     */
    private List<GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollection> occHandoverResourceBlockCollections;
    private @Nullable String occHandoverResourceBlockId;

    private GetInternalOccHandoverResourceBlocksResult() {}
    /**
     * @return The OCID of the compartment where the resource block&#39;s are placed.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetInternalOccHandoverResourceBlocksFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> handoverDateGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.handoverDateGreaterThanOrEqualTo);
    }
    public Optional<String> handoverDateLessThanOrEqualTo() {
        return Optional.ofNullable(this.handoverDateLessThanOrEqualTo);
    }
    /**
     * @return The name of the resource handed over by oracle.  For instance for compute namespace this will be the name of the bare metal hardware resource.
     * 
     */
    public Optional<String> handoverResourceName() {
        return Optional.ofNullable(this.handoverResourceName);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the Oracle Cloud Infrastructure service in consideration.  For example Compute, Exadata and so on.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The OCID of the customer group for which the resources were provisioned.
     * 
     */
    public String occCustomerGroupId() {
        return this.occCustomerGroupId;
    }
    /**
     * @return The list of occ_handover_resource_block_collection.
     * 
     */
    public List<GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollection> occHandoverResourceBlockCollections() {
        return this.occHandoverResourceBlockCollections;
    }
    public Optional<String> occHandoverResourceBlockId() {
        return Optional.ofNullable(this.occHandoverResourceBlockId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInternalOccHandoverResourceBlocksResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetInternalOccHandoverResourceBlocksFilter> filters;
        private @Nullable String handoverDateGreaterThanOrEqualTo;
        private @Nullable String handoverDateLessThanOrEqualTo;
        private @Nullable String handoverResourceName;
        private String id;
        private String namespace;
        private String occCustomerGroupId;
        private List<GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollection> occHandoverResourceBlockCollections;
        private @Nullable String occHandoverResourceBlockId;
        public Builder() {}
        public Builder(GetInternalOccHandoverResourceBlocksResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.handoverDateGreaterThanOrEqualTo = defaults.handoverDateGreaterThanOrEqualTo;
    	      this.handoverDateLessThanOrEqualTo = defaults.handoverDateLessThanOrEqualTo;
    	      this.handoverResourceName = defaults.handoverResourceName;
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.occCustomerGroupId = defaults.occCustomerGroupId;
    	      this.occHandoverResourceBlockCollections = defaults.occHandoverResourceBlockCollections;
    	      this.occHandoverResourceBlockId = defaults.occHandoverResourceBlockId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetInternalOccHandoverResourceBlocksResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetInternalOccHandoverResourceBlocksFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetInternalOccHandoverResourceBlocksFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder handoverDateGreaterThanOrEqualTo(@Nullable String handoverDateGreaterThanOrEqualTo) {

            this.handoverDateGreaterThanOrEqualTo = handoverDateGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder handoverDateLessThanOrEqualTo(@Nullable String handoverDateLessThanOrEqualTo) {

            this.handoverDateLessThanOrEqualTo = handoverDateLessThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder handoverResourceName(@Nullable String handoverResourceName) {

            this.handoverResourceName = handoverResourceName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInternalOccHandoverResourceBlocksResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetInternalOccHandoverResourceBlocksResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder occCustomerGroupId(String occCustomerGroupId) {
            if (occCustomerGroupId == null) {
              throw new MissingRequiredPropertyException("GetInternalOccHandoverResourceBlocksResult", "occCustomerGroupId");
            }
            this.occCustomerGroupId = occCustomerGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder occHandoverResourceBlockCollections(List<GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollection> occHandoverResourceBlockCollections) {
            if (occHandoverResourceBlockCollections == null) {
              throw new MissingRequiredPropertyException("GetInternalOccHandoverResourceBlocksResult", "occHandoverResourceBlockCollections");
            }
            this.occHandoverResourceBlockCollections = occHandoverResourceBlockCollections;
            return this;
        }
        public Builder occHandoverResourceBlockCollections(GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollection... occHandoverResourceBlockCollections) {
            return occHandoverResourceBlockCollections(List.of(occHandoverResourceBlockCollections));
        }
        @CustomType.Setter
        public Builder occHandoverResourceBlockId(@Nullable String occHandoverResourceBlockId) {

            this.occHandoverResourceBlockId = occHandoverResourceBlockId;
            return this;
        }
        public GetInternalOccHandoverResourceBlocksResult build() {
            final var _resultValue = new GetInternalOccHandoverResourceBlocksResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.handoverDateGreaterThanOrEqualTo = handoverDateGreaterThanOrEqualTo;
            _resultValue.handoverDateLessThanOrEqualTo = handoverDateLessThanOrEqualTo;
            _resultValue.handoverResourceName = handoverResourceName;
            _resultValue.id = id;
            _resultValue.namespace = namespace;
            _resultValue.occCustomerGroupId = occCustomerGroupId;
            _resultValue.occHandoverResourceBlockCollections = occHandoverResourceBlockCollections;
            _resultValue.occHandoverResourceBlockId = occHandoverResourceBlockId;
            return _resultValue;
        }
    }
}
