// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CapacityManagement.outputs.GetNamespaceOccOverviewsFilter;
import com.pulumi.oci.CapacityManagement.outputs.GetNamespaceOccOverviewsOccOverviewCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNamespaceOccOverviewsResult {
    /**
     * @return The OCID of the compartment from which the api call is made. This will be used for authorizing the request.
     * 
     */
    private String compartmentId;
    private @Nullable List<GetNamespaceOccOverviewsFilter> filters;
    private @Nullable String from;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String namespace;
    /**
     * @return The list of occ_overview_collection.
     * 
     */
    private List<GetNamespaceOccOverviewsOccOverviewCollection> occOverviewCollections;
    private @Nullable String to;
    private @Nullable String workloadType;

    private GetNamespaceOccOverviewsResult() {}
    /**
     * @return The OCID of the compartment from which the api call is made. This will be used for authorizing the request.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetNamespaceOccOverviewsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> from() {
        return Optional.ofNullable(this.from);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The list of occ_overview_collection.
     * 
     */
    public List<GetNamespaceOccOverviewsOccOverviewCollection> occOverviewCollections() {
        return this.occOverviewCollections;
    }
    public Optional<String> to() {
        return Optional.ofNullable(this.to);
    }
    public Optional<String> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceOccOverviewsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetNamespaceOccOverviewsFilter> filters;
        private @Nullable String from;
        private String id;
        private String namespace;
        private List<GetNamespaceOccOverviewsOccOverviewCollection> occOverviewCollections;
        private @Nullable String to;
        private @Nullable String workloadType;
        public Builder() {}
        public Builder(GetNamespaceOccOverviewsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.from = defaults.from;
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.occOverviewCollections = defaults.occOverviewCollections;
    	      this.to = defaults.to;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceOccOverviewsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetNamespaceOccOverviewsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetNamespaceOccOverviewsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder from(@Nullable String from) {

            this.from = from;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceOccOverviewsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetNamespaceOccOverviewsResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder occOverviewCollections(List<GetNamespaceOccOverviewsOccOverviewCollection> occOverviewCollections) {
            if (occOverviewCollections == null) {
              throw new MissingRequiredPropertyException("GetNamespaceOccOverviewsResult", "occOverviewCollections");
            }
            this.occOverviewCollections = occOverviewCollections;
            return this;
        }
        public Builder occOverviewCollections(GetNamespaceOccOverviewsOccOverviewCollection... occOverviewCollections) {
            return occOverviewCollections(List.of(occOverviewCollections));
        }
        @CustomType.Setter
        public Builder to(@Nullable String to) {

            this.to = to;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(@Nullable String workloadType) {

            this.workloadType = workloadType;
            return this;
        }
        public GetNamespaceOccOverviewsResult build() {
            final var _resultValue = new GetNamespaceOccOverviewsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.from = from;
            _resultValue.id = id;
            _resultValue.namespace = namespace;
            _resultValue.occOverviewCollections = occOverviewCollections;
            _resultValue.to = to;
            _resultValue.workloadType = workloadType;
            return _resultValue;
        }
    }
}
