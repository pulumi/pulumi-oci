// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetOccAvailabilityCatalogDetail {
    /**
     * @return The quantity of resource currently available that the customer can request.
     * 
     */
    private String availableQuantity;
    /**
     * @return The OCID of the availability catalog.
     * 
     */
    private String catalogId;
    /**
     * @return The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
     * 
     */
    private String dateExpectedCapacityHandover;
    /**
     * @return The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
     * 
     */
    private String dateFinalCustomerOrder;
    /**
     * @return The quantity of resource currently demanded by the customer.
     * 
     */
    private String demandedQuantity;
    /**
     * @return The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
     * 
     */
    private String namespace;
    /**
     * @return The name of the resource that the customer can request.
     * 
     */
    private String resourceName;
    /**
     * @return The different types of resources against which customers can place capacity requests.
     * 
     */
    private String resourceType;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The total quantity of resource that the customer can request.
     * 
     */
    private String totalAvailableQuantity;
    /**
     * @return The unit in which the resource available is measured.
     * 
     */
    private String unit;
    /**
     * @return The type of workload (Generic/ROW).
     * 
     */
    private String workloadType;

    private GetOccAvailabilityCatalogDetail() {}
    /**
     * @return The quantity of resource currently available that the customer can request.
     * 
     */
    public String availableQuantity() {
        return this.availableQuantity;
    }
    /**
     * @return The OCID of the availability catalog.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
     * 
     */
    public String dateExpectedCapacityHandover() {
        return this.dateExpectedCapacityHandover;
    }
    /**
     * @return The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
     * 
     */
    public String dateFinalCustomerOrder() {
        return this.dateFinalCustomerOrder;
    }
    /**
     * @return The quantity of resource currently demanded by the customer.
     * 
     */
    public String demandedQuantity() {
        return this.demandedQuantity;
    }
    /**
     * @return The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The name of the resource that the customer can request.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return The different types of resources against which customers can place capacity requests.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The total quantity of resource that the customer can request.
     * 
     */
    public String totalAvailableQuantity() {
        return this.totalAvailableQuantity;
    }
    /**
     * @return The unit in which the resource available is measured.
     * 
     */
    public String unit() {
        return this.unit;
    }
    /**
     * @return The type of workload (Generic/ROW).
     * 
     */
    public String workloadType() {
        return this.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOccAvailabilityCatalogDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availableQuantity;
        private String catalogId;
        private String dateExpectedCapacityHandover;
        private String dateFinalCustomerOrder;
        private String demandedQuantity;
        private String namespace;
        private String resourceName;
        private String resourceType;
        private Map<String,String> systemTags;
        private String totalAvailableQuantity;
        private String unit;
        private String workloadType;
        public Builder() {}
        public Builder(GetOccAvailabilityCatalogDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableQuantity = defaults.availableQuantity;
    	      this.catalogId = defaults.catalogId;
    	      this.dateExpectedCapacityHandover = defaults.dateExpectedCapacityHandover;
    	      this.dateFinalCustomerOrder = defaults.dateFinalCustomerOrder;
    	      this.demandedQuantity = defaults.demandedQuantity;
    	      this.namespace = defaults.namespace;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
    	      this.systemTags = defaults.systemTags;
    	      this.totalAvailableQuantity = defaults.totalAvailableQuantity;
    	      this.unit = defaults.unit;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder availableQuantity(String availableQuantity) {
            if (availableQuantity == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "availableQuantity");
            }
            this.availableQuantity = availableQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder catalogId(String catalogId) {
            if (catalogId == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "catalogId");
            }
            this.catalogId = catalogId;
            return this;
        }
        @CustomType.Setter
        public Builder dateExpectedCapacityHandover(String dateExpectedCapacityHandover) {
            if (dateExpectedCapacityHandover == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "dateExpectedCapacityHandover");
            }
            this.dateExpectedCapacityHandover = dateExpectedCapacityHandover;
            return this;
        }
        @CustomType.Setter
        public Builder dateFinalCustomerOrder(String dateFinalCustomerOrder) {
            if (dateFinalCustomerOrder == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "dateFinalCustomerOrder");
            }
            this.dateFinalCustomerOrder = dateFinalCustomerOrder;
            return this;
        }
        @CustomType.Setter
        public Builder demandedQuantity(String demandedQuantity) {
            if (demandedQuantity == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "demandedQuantity");
            }
            this.demandedQuantity = demandedQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            if (resourceName == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "resourceName");
            }
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder totalAvailableQuantity(String totalAvailableQuantity) {
            if (totalAvailableQuantity == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "totalAvailableQuantity");
            }
            this.totalAvailableQuantity = totalAvailableQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            if (unit == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "unit");
            }
            this.unit = unit;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(String workloadType) {
            if (workloadType == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogDetail", "workloadType");
            }
            this.workloadType = workloadType;
            return this;
        }
        public GetOccAvailabilityCatalogDetail build() {
            final var _resultValue = new GetOccAvailabilityCatalogDetail();
            _resultValue.availableQuantity = availableQuantity;
            _resultValue.catalogId = catalogId;
            _resultValue.dateExpectedCapacityHandover = dateExpectedCapacityHandover;
            _resultValue.dateFinalCustomerOrder = dateFinalCustomerOrder;
            _resultValue.demandedQuantity = demandedQuantity;
            _resultValue.namespace = namespace;
            _resultValue.resourceName = resourceName;
            _resultValue.resourceType = resourceType;
            _resultValue.systemTags = systemTags;
            _resultValue.totalAvailableQuantity = totalAvailableQuantity;
            _resultValue.unit = unit;
            _resultValue.workloadType = workloadType;
            return _resultValue;
        }
    }
}
