// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CapacityManagement.outputs.GetOccAvailabilityCatalogOccAvailabilitiesFilter;
import com.pulumi.oci.CapacityManagement.outputs.GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOccAvailabilityCatalogOccAvailabilitiesResult {
    /**
     * @return The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
     * 
     */
    private @Nullable String dateExpectedCapacityHandover;
    private @Nullable List<GetOccAvailabilityCatalogOccAvailabilitiesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String occAvailabilityCatalogId;
    /**
     * @return The list of occ_availability_collection.
     * 
     */
    private List<GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollection> occAvailabilityCollections;
    /**
     * @return The name of the resource that the customer can request.
     * 
     */
    private @Nullable String resourceName;
    /**
     * @return The different types of resources against which customers can place capacity requests.
     * 
     */
    private @Nullable String resourceType;
    /**
     * @return The type of workload (Generic/ROW).
     * 
     */
    private @Nullable String workloadType;

    private GetOccAvailabilityCatalogOccAvailabilitiesResult() {}
    /**
     * @return The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
     * 
     */
    public Optional<String> dateExpectedCapacityHandover() {
        return Optional.ofNullable(this.dateExpectedCapacityHandover);
    }
    public List<GetOccAvailabilityCatalogOccAvailabilitiesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String occAvailabilityCatalogId() {
        return this.occAvailabilityCatalogId;
    }
    /**
     * @return The list of occ_availability_collection.
     * 
     */
    public List<GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollection> occAvailabilityCollections() {
        return this.occAvailabilityCollections;
    }
    /**
     * @return The name of the resource that the customer can request.
     * 
     */
    public Optional<String> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }
    /**
     * @return The different types of resources against which customers can place capacity requests.
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }
    /**
     * @return The type of workload (Generic/ROW).
     * 
     */
    public Optional<String> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOccAvailabilityCatalogOccAvailabilitiesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dateExpectedCapacityHandover;
        private @Nullable List<GetOccAvailabilityCatalogOccAvailabilitiesFilter> filters;
        private String id;
        private String occAvailabilityCatalogId;
        private List<GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollection> occAvailabilityCollections;
        private @Nullable String resourceName;
        private @Nullable String resourceType;
        private @Nullable String workloadType;
        public Builder() {}
        public Builder(GetOccAvailabilityCatalogOccAvailabilitiesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dateExpectedCapacityHandover = defaults.dateExpectedCapacityHandover;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.occAvailabilityCatalogId = defaults.occAvailabilityCatalogId;
    	      this.occAvailabilityCollections = defaults.occAvailabilityCollections;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder dateExpectedCapacityHandover(@Nullable String dateExpectedCapacityHandover) {

            this.dateExpectedCapacityHandover = dateExpectedCapacityHandover;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetOccAvailabilityCatalogOccAvailabilitiesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetOccAvailabilityCatalogOccAvailabilitiesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogOccAvailabilitiesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder occAvailabilityCatalogId(String occAvailabilityCatalogId) {
            if (occAvailabilityCatalogId == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogOccAvailabilitiesResult", "occAvailabilityCatalogId");
            }
            this.occAvailabilityCatalogId = occAvailabilityCatalogId;
            return this;
        }
        @CustomType.Setter
        public Builder occAvailabilityCollections(List<GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollection> occAvailabilityCollections) {
            if (occAvailabilityCollections == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogOccAvailabilitiesResult", "occAvailabilityCollections");
            }
            this.occAvailabilityCollections = occAvailabilityCollections;
            return this;
        }
        public Builder occAvailabilityCollections(GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollection... occAvailabilityCollections) {
            return occAvailabilityCollections(List.of(occAvailabilityCollections));
        }
        @CustomType.Setter
        public Builder resourceName(@Nullable String resourceName) {

            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(@Nullable String resourceType) {

            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(@Nullable String workloadType) {

            this.workloadType = workloadType;
            return this;
        }
        public GetOccAvailabilityCatalogOccAvailabilitiesResult build() {
            final var _resultValue = new GetOccAvailabilityCatalogOccAvailabilitiesResult();
            _resultValue.dateExpectedCapacityHandover = dateExpectedCapacityHandover;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.occAvailabilityCatalogId = occAvailabilityCatalogId;
            _resultValue.occAvailabilityCollections = occAvailabilityCollections;
            _resultValue.resourceName = resourceName;
            _resultValue.resourceType = resourceType;
            _resultValue.workloadType = workloadType;
            return _resultValue;
        }
    }
}
