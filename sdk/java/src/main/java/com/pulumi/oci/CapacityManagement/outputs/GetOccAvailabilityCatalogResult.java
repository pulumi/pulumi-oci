// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CapacityManagement.outputs.GetOccAvailabilityCatalogDetail;
import com.pulumi.oci.CapacityManagement.outputs.GetOccAvailabilityCatalogMetadataDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetOccAvailabilityCatalogResult {
    private String base64encodedCatalogDetails;
    /**
     * @return The different states associated with the availability catalog.
     * 
     */
    private String catalogState;
    /**
     * @return The OCID of the tenancy where the availability catalog resides.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Text information about the availability catalog.
     * 
     */
    private String description;
    /**
     * @return Details about capacity available for  different resources in catalog.
     * 
     */
    private List<GetOccAvailabilityCatalogDetail> details;
    /**
     * @return A user-friendly name for the availability catalog.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the availability catalog.
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Used for representing the metadata of the catalog. This denotes the version and format of the CSV file for parsing.
     * 
     */
    private List<GetOccAvailabilityCatalogMetadataDetail> metadataDetails;
    /**
     * @return The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
     * 
     */
    private String namespace;
    private String occAvailabilityCatalogId;
    /**
     * @return The customer group OCID to which the availability catalog belongs.
     * 
     */
    private String occCustomerGroupId;
    /**
     * @return The current lifecycle state of the resource.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time when the availability catalog was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the availability catalog was last updated.
     * 
     */
    private String timeUpdated;

    private GetOccAvailabilityCatalogResult() {}
    public String base64encodedCatalogDetails() {
        return this.base64encodedCatalogDetails;
    }
    /**
     * @return The different states associated with the availability catalog.
     * 
     */
    public String catalogState() {
        return this.catalogState;
    }
    /**
     * @return The OCID of the tenancy where the availability catalog resides.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Text information about the availability catalog.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Details about capacity available for  different resources in catalog.
     * 
     */
    public List<GetOccAvailabilityCatalogDetail> details() {
        return this.details;
    }
    /**
     * @return A user-friendly name for the availability catalog.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the availability catalog.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Used for representing the metadata of the catalog. This denotes the version and format of the CSV file for parsing.
     * 
     */
    public List<GetOccAvailabilityCatalogMetadataDetail> metadataDetails() {
        return this.metadataDetails;
    }
    /**
     * @return The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    public String occAvailabilityCatalogId() {
        return this.occAvailabilityCatalogId;
    }
    /**
     * @return The customer group OCID to which the availability catalog belongs.
     * 
     */
    public String occCustomerGroupId() {
        return this.occCustomerGroupId;
    }
    /**
     * @return The current lifecycle state of the resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time when the availability catalog was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the availability catalog was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOccAvailabilityCatalogResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String base64encodedCatalogDetails;
        private String catalogState;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private List<GetOccAvailabilityCatalogDetail> details;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleDetails;
        private List<GetOccAvailabilityCatalogMetadataDetail> metadataDetails;
        private String namespace;
        private String occAvailabilityCatalogId;
        private String occCustomerGroupId;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetOccAvailabilityCatalogResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64encodedCatalogDetails = defaults.base64encodedCatalogDetails;
    	      this.catalogState = defaults.catalogState;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.details = defaults.details;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.metadataDetails = defaults.metadataDetails;
    	      this.namespace = defaults.namespace;
    	      this.occAvailabilityCatalogId = defaults.occAvailabilityCatalogId;
    	      this.occCustomerGroupId = defaults.occCustomerGroupId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder base64encodedCatalogDetails(String base64encodedCatalogDetails) {
            if (base64encodedCatalogDetails == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "base64encodedCatalogDetails");
            }
            this.base64encodedCatalogDetails = base64encodedCatalogDetails;
            return this;
        }
        @CustomType.Setter
        public Builder catalogState(String catalogState) {
            if (catalogState == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "catalogState");
            }
            this.catalogState = catalogState;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder details(List<GetOccAvailabilityCatalogDetail> details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "details");
            }
            this.details = details;
            return this;
        }
        public Builder details(GetOccAvailabilityCatalogDetail... details) {
            return details(List.of(details));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder metadataDetails(List<GetOccAvailabilityCatalogMetadataDetail> metadataDetails) {
            if (metadataDetails == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "metadataDetails");
            }
            this.metadataDetails = metadataDetails;
            return this;
        }
        public Builder metadataDetails(GetOccAvailabilityCatalogMetadataDetail... metadataDetails) {
            return metadataDetails(List.of(metadataDetails));
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder occAvailabilityCatalogId(String occAvailabilityCatalogId) {
            if (occAvailabilityCatalogId == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "occAvailabilityCatalogId");
            }
            this.occAvailabilityCatalogId = occAvailabilityCatalogId;
            return this;
        }
        @CustomType.Setter
        public Builder occCustomerGroupId(String occCustomerGroupId) {
            if (occCustomerGroupId == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "occCustomerGroupId");
            }
            this.occCustomerGroupId = occCustomerGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetOccAvailabilityCatalogResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetOccAvailabilityCatalogResult build() {
            final var _resultValue = new GetOccAvailabilityCatalogResult();
            _resultValue.base64encodedCatalogDetails = base64encodedCatalogDetails;
            _resultValue.catalogState = catalogState;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.details = details;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.metadataDetails = metadataDetails;
            _resultValue.namespace = namespace;
            _resultValue.occAvailabilityCatalogId = occAvailabilityCatalogId;
            _resultValue.occCustomerGroupId = occCustomerGroupId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
