// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CapacityManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CapacityManagement.outputs.OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OccCapacityRequestDetail {
    /**
     * @return The actual handed over quantity of resources at the time of request resolution.
     * 
     */
    private @Nullable String actualHandoverQuantity;
    /**
     * @return A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
     * 
     */
    private @Nullable List<OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList> associatedOccHandoverResourceBlockLists;
    /**
     * @return The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return The date on which the actual handover quantity of resources is delivered.
     * 
     */
    private @Nullable String dateActualHandover;
    /**
     * @return The date on which the latest increment to supplied quantity of resources was delivered.
     * 
     */
    private @Nullable String dateExpectedHandover;
    /**
     * @return The number of compute server&#39;s with name &lt;resourceName&gt; required by the user.
     * 
     */
    private String demandQuantity;
    /**
     * @return The incremental quantity of resources supplied as the provisioning is underway.
     * 
     */
    private @Nullable String expectedHandoverQuantity;
    /**
     * @return The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
     * 
     */
    private String resourceName;
    /**
     * @return The type of the resource against which the user wants to place a capacity request.
     * 
     */
    private String resourceType;
    /**
     * @return The WorkloadType from where capacity request are to be transferred.
     * 
     */
    private @Nullable String sourceWorkloadType;
    /**
     * @return The type of the workload (Generic/ROW).
     * 
     */
    private String workloadType;

    private OccCapacityRequestDetail() {}
    /**
     * @return The actual handed over quantity of resources at the time of request resolution.
     * 
     */
    public Optional<String> actualHandoverQuantity() {
        return Optional.ofNullable(this.actualHandoverQuantity);
    }
    /**
     * @return A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
     * 
     */
    public List<OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList> associatedOccHandoverResourceBlockLists() {
        return this.associatedOccHandoverResourceBlockLists == null ? List.of() : this.associatedOccHandoverResourceBlockLists;
    }
    /**
     * @return The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The date on which the actual handover quantity of resources is delivered.
     * 
     */
    public Optional<String> dateActualHandover() {
        return Optional.ofNullable(this.dateActualHandover);
    }
    /**
     * @return The date on which the latest increment to supplied quantity of resources was delivered.
     * 
     */
    public Optional<String> dateExpectedHandover() {
        return Optional.ofNullable(this.dateExpectedHandover);
    }
    /**
     * @return The number of compute server&#39;s with name &lt;resourceName&gt; required by the user.
     * 
     */
    public String demandQuantity() {
        return this.demandQuantity;
    }
    /**
     * @return The incremental quantity of resources supplied as the provisioning is underway.
     * 
     */
    public Optional<String> expectedHandoverQuantity() {
        return Optional.ofNullable(this.expectedHandoverQuantity);
    }
    /**
     * @return The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return The type of the resource against which the user wants to place a capacity request.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return The WorkloadType from where capacity request are to be transferred.
     * 
     */
    public Optional<String> sourceWorkloadType() {
        return Optional.ofNullable(this.sourceWorkloadType);
    }
    /**
     * @return The type of the workload (Generic/ROW).
     * 
     */
    public String workloadType() {
        return this.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OccCapacityRequestDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String actualHandoverQuantity;
        private @Nullable List<OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList> associatedOccHandoverResourceBlockLists;
        private @Nullable String availabilityDomain;
        private @Nullable String dateActualHandover;
        private @Nullable String dateExpectedHandover;
        private String demandQuantity;
        private @Nullable String expectedHandoverQuantity;
        private String resourceName;
        private String resourceType;
        private @Nullable String sourceWorkloadType;
        private String workloadType;
        public Builder() {}
        public Builder(OccCapacityRequestDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actualHandoverQuantity = defaults.actualHandoverQuantity;
    	      this.associatedOccHandoverResourceBlockLists = defaults.associatedOccHandoverResourceBlockLists;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.dateActualHandover = defaults.dateActualHandover;
    	      this.dateExpectedHandover = defaults.dateExpectedHandover;
    	      this.demandQuantity = defaults.demandQuantity;
    	      this.expectedHandoverQuantity = defaults.expectedHandoverQuantity;
    	      this.resourceName = defaults.resourceName;
    	      this.resourceType = defaults.resourceType;
    	      this.sourceWorkloadType = defaults.sourceWorkloadType;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder actualHandoverQuantity(@Nullable String actualHandoverQuantity) {

            this.actualHandoverQuantity = actualHandoverQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder associatedOccHandoverResourceBlockLists(@Nullable List<OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList> associatedOccHandoverResourceBlockLists) {

            this.associatedOccHandoverResourceBlockLists = associatedOccHandoverResourceBlockLists;
            return this;
        }
        public Builder associatedOccHandoverResourceBlockLists(OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList... associatedOccHandoverResourceBlockLists) {
            return associatedOccHandoverResourceBlockLists(List.of(associatedOccHandoverResourceBlockLists));
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder dateActualHandover(@Nullable String dateActualHandover) {

            this.dateActualHandover = dateActualHandover;
            return this;
        }
        @CustomType.Setter
        public Builder dateExpectedHandover(@Nullable String dateExpectedHandover) {

            this.dateExpectedHandover = dateExpectedHandover;
            return this;
        }
        @CustomType.Setter
        public Builder demandQuantity(String demandQuantity) {
            if (demandQuantity == null) {
              throw new MissingRequiredPropertyException("OccCapacityRequestDetail", "demandQuantity");
            }
            this.demandQuantity = demandQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder expectedHandoverQuantity(@Nullable String expectedHandoverQuantity) {

            this.expectedHandoverQuantity = expectedHandoverQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            if (resourceName == null) {
              throw new MissingRequiredPropertyException("OccCapacityRequestDetail", "resourceName");
            }
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("OccCapacityRequestDetail", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceWorkloadType(@Nullable String sourceWorkloadType) {

            this.sourceWorkloadType = sourceWorkloadType;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(String workloadType) {
            if (workloadType == null) {
              throw new MissingRequiredPropertyException("OccCapacityRequestDetail", "workloadType");
            }
            this.workloadType = workloadType;
            return this;
        }
        public OccCapacityRequestDetail build() {
            final var _resultValue = new OccCapacityRequestDetail();
            _resultValue.actualHandoverQuantity = actualHandoverQuantity;
            _resultValue.associatedOccHandoverResourceBlockLists = associatedOccHandoverResourceBlockLists;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.dateActualHandover = dateActualHandover;
            _resultValue.dateExpectedHandover = dateExpectedHandover;
            _resultValue.demandQuantity = demandQuantity;
            _resultValue.expectedHandoverQuantity = expectedHandoverQuantity;
            _resultValue.resourceName = resourceName;
            _resultValue.resourceType = resourceType;
            _resultValue.sourceWorkloadType = sourceWorkloadType;
            _resultValue.workloadType = workloadType;
            return _resultValue;
        }
    }
}
