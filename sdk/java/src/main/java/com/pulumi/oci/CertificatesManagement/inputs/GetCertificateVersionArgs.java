// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetCertificateVersionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCertificateVersionArgs Empty = new GetCertificateVersionArgs();

    /**
     * The OCID of the certificate.
     * 
     */
    @Import(name="certificateId", required=true)
    private Output<String> certificateId;

    /**
     * @return The OCID of the certificate.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }

    /**
     * The version number of the certificate.
     * 
     */
    @Import(name="certificateVersionNumber", required=true)
    private Output<String> certificateVersionNumber;

    /**
     * @return The version number of the certificate.
     * 
     */
    public Output<String> certificateVersionNumber() {
        return this.certificateVersionNumber;
    }

    private GetCertificateVersionArgs() {}

    private GetCertificateVersionArgs(GetCertificateVersionArgs $) {
        this.certificateId = $.certificateId;
        this.certificateVersionNumber = $.certificateVersionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCertificateVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCertificateVersionArgs $;

        public Builder() {
            $ = new GetCertificateVersionArgs();
        }

        public Builder(GetCertificateVersionArgs defaults) {
            $ = new GetCertificateVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId The OCID of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId The OCID of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateVersionNumber The version number of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateVersionNumber(Output<String> certificateVersionNumber) {
            $.certificateVersionNumber = certificateVersionNumber;
            return this;
        }

        /**
         * @param certificateVersionNumber The version number of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateVersionNumber(String certificateVersionNumber) {
            return certificateVersionNumber(Output.of(certificateVersionNumber));
        }

        public GetCertificateVersionArgs build() {
            if ($.certificateId == null) {
                throw new MissingRequiredPropertyException("GetCertificateVersionArgs", "certificateId");
            }
            if ($.certificateVersionNumber == null) {
                throw new MissingRequiredPropertyException("GetCertificateVersionArgs", "certificateVersionNumber");
            }
            return $;
        }
    }

}
