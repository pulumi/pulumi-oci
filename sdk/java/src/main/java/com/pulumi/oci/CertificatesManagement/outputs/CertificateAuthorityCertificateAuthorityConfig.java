// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CertificatesManagement.outputs.CertificateAuthorityCertificateAuthorityConfigSubject;
import com.pulumi.oci.CertificatesManagement.outputs.CertificateAuthorityCertificateAuthorityConfigValidity;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CertificateAuthorityCertificateAuthorityConfig {
    /**
     * @return (Updatable) The origin of the CA.
     * 
     */
    private String configType;
    /**
     * @return The OCID of the private CA.
     * 
     */
    private @Nullable String issuerCertificateAuthorityId;
    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    private @Nullable String signingAlgorithm;
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    private CertificateAuthorityCertificateAuthorityConfigSubject subject;
    /**
     * @return (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    private @Nullable CertificateAuthorityCertificateAuthorityConfigValidity validity;
    /**
     * @return (Updatable) The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
     * 
     */
    private @Nullable String versionName;

    private CertificateAuthorityCertificateAuthorityConfig() {}
    /**
     * @return (Updatable) The origin of the CA.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return The OCID of the private CA.
     * 
     */
    public Optional<String> issuerCertificateAuthorityId() {
        return Optional.ofNullable(this.issuerCertificateAuthorityId);
    }
    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    public Optional<String> signingAlgorithm() {
        return Optional.ofNullable(this.signingAlgorithm);
    }
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public CertificateAuthorityCertificateAuthorityConfigSubject subject() {
        return this.subject;
    }
    /**
     * @return (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    public Optional<CertificateAuthorityCertificateAuthorityConfigValidity> validity() {
        return Optional.ofNullable(this.validity);
    }
    /**
     * @return (Updatable) The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
     * 
     */
    public Optional<String> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateAuthorityCertificateAuthorityConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String configType;
        private @Nullable String issuerCertificateAuthorityId;
        private @Nullable String signingAlgorithm;
        private CertificateAuthorityCertificateAuthorityConfigSubject subject;
        private @Nullable CertificateAuthorityCertificateAuthorityConfigValidity validity;
        private @Nullable String versionName;
        public Builder() {}
        public Builder(CertificateAuthorityCertificateAuthorityConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configType = defaults.configType;
    	      this.issuerCertificateAuthorityId = defaults.issuerCertificateAuthorityId;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
    	      this.subject = defaults.subject;
    	      this.validity = defaults.validity;
    	      this.versionName = defaults.versionName;
        }

        @CustomType.Setter
        public Builder configType(String configType) {
            this.configType = Objects.requireNonNull(configType);
            return this;
        }
        @CustomType.Setter
        public Builder issuerCertificateAuthorityId(@Nullable String issuerCertificateAuthorityId) {
            this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }
        @CustomType.Setter
        public Builder signingAlgorithm(@Nullable String signingAlgorithm) {
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder subject(CertificateAuthorityCertificateAuthorityConfigSubject subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        @CustomType.Setter
        public Builder validity(@Nullable CertificateAuthorityCertificateAuthorityConfigValidity validity) {
            this.validity = validity;
            return this;
        }
        @CustomType.Setter
        public Builder versionName(@Nullable String versionName) {
            this.versionName = versionName;
            return this;
        }
        public CertificateAuthorityCertificateAuthorityConfig build() {
            final var _resultValue = new CertificateAuthorityCertificateAuthorityConfig();
            _resultValue.configType = configType;
            _resultValue.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            _resultValue.signingAlgorithm = signingAlgorithm;
            _resultValue.subject = subject;
            _resultValue.validity = validity;
            _resultValue.versionName = versionName;
            return _resultValue;
        }
    }
}
