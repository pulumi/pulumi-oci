// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateAuthorityCertificateAuthorityConfigSubject;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateAuthorityCertificateAuthorityConfigValidity;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateAuthorityCertificateAuthorityConfig {
    /**
     * @return The origin of the CA.
     * 
     */
    private @Nullable String configType;
    /**
     * @return The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
     * 
     */
    private @Nullable String issuerCertificateAuthorityId;
    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    private @Nullable String signingAlgorithm;
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    private @Nullable List<GetCertificateAuthorityCertificateAuthorityConfigSubject> subjects;
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    private @Nullable List<GetCertificateAuthorityCertificateAuthorityConfigValidity> validities;
    /**
     * @return The name of the CA version. When this value is not null, the name is unique across CA versions for a given CA.
     * 
     */
    private @Nullable String versionName;

    private GetCertificateAuthorityCertificateAuthorityConfig() {}
    /**
     * @return The origin of the CA.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    /**
     * @return The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
     * 
     */
    public Optional<String> issuerCertificateAuthorityId() {
        return Optional.ofNullable(this.issuerCertificateAuthorityId);
    }
    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    public Optional<String> signingAlgorithm() {
        return Optional.ofNullable(this.signingAlgorithm);
    }
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public List<GetCertificateAuthorityCertificateAuthorityConfigSubject> subjects() {
        return this.subjects == null ? List.of() : this.subjects;
    }
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    public List<GetCertificateAuthorityCertificateAuthorityConfigValidity> validities() {
        return this.validities == null ? List.of() : this.validities;
    }
    /**
     * @return The name of the CA version. When this value is not null, the name is unique across CA versions for a given CA.
     * 
     */
    public Optional<String> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateAuthorityCertificateAuthorityConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String configType;
        private @Nullable String issuerCertificateAuthorityId;
        private @Nullable String signingAlgorithm;
        private @Nullable List<GetCertificateAuthorityCertificateAuthorityConfigSubject> subjects;
        private @Nullable List<GetCertificateAuthorityCertificateAuthorityConfigValidity> validities;
        private @Nullable String versionName;
        public Builder() {}
        public Builder(GetCertificateAuthorityCertificateAuthorityConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configType = defaults.configType;
    	      this.issuerCertificateAuthorityId = defaults.issuerCertificateAuthorityId;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
    	      this.subjects = defaults.subjects;
    	      this.validities = defaults.validities;
    	      this.versionName = defaults.versionName;
        }

        @CustomType.Setter
        public Builder configType(@Nullable String configType) {
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder issuerCertificateAuthorityId(@Nullable String issuerCertificateAuthorityId) {
            this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }
        @CustomType.Setter
        public Builder signingAlgorithm(@Nullable String signingAlgorithm) {
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder subjects(@Nullable List<GetCertificateAuthorityCertificateAuthorityConfigSubject> subjects) {
            this.subjects = subjects;
            return this;
        }
        public Builder subjects(GetCertificateAuthorityCertificateAuthorityConfigSubject... subjects) {
            return subjects(List.of(subjects));
        }
        @CustomType.Setter
        public Builder validities(@Nullable List<GetCertificateAuthorityCertificateAuthorityConfigValidity> validities) {
            this.validities = validities;
            return this;
        }
        public Builder validities(GetCertificateAuthorityCertificateAuthorityConfigValidity... validities) {
            return validities(List.of(validities));
        }
        @CustomType.Setter
        public Builder versionName(@Nullable String versionName) {
            this.versionName = versionName;
            return this;
        }
        public GetCertificateAuthorityCertificateAuthorityConfig build() {
            final var o = new GetCertificateAuthorityCertificateAuthorityConfig();
            o.configType = configType;
            o.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            o.signingAlgorithm = signingAlgorithm;
            o.subjects = subjects;
            o.validities = validities;
            o.versionName = versionName;
            return o;
        }
    }
}
