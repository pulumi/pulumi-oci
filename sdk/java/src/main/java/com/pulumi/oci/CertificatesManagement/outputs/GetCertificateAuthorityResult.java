// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateAuthorityCertificateAuthorityConfig;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateAuthorityCertificateAuthorityRule;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateAuthorityCertificateRevocationListDetail;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateAuthorityCurrentVersion;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateAuthoritySubject;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificateAuthorityResult {
    private List<GetCertificateAuthorityCertificateAuthorityConfig> certificateAuthorityConfigs;
    /**
     * @return The OCID of the CA.
     * 
     */
    private String certificateAuthorityId;
    /**
     * @return An optional list of rules that control how the CA is used and managed.
     * 
     */
    private List<GetCertificateAuthorityCertificateAuthorityRule> certificateAuthorityRules;
    /**
     * @return The details of the certificate revocation list (CRL).
     * 
     */
    private List<GetCertificateAuthorityCertificateRevocationListDetail> certificateRevocationListDetails;
    /**
     * @return The OCID of the compartment under which the CA is created.
     * 
     */
    private String compartmentId;
    /**
     * @return The origin of the CA.
     * 
     */
    private String configType;
    /**
     * @return The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
     * 
     */
    private List<GetCertificateAuthorityCurrentVersion> currentVersions;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A brief description of the CA.
     * 
     */
    private String description;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the CA.
     * 
     */
    private String id;
    /**
     * @return The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
     * 
     */
    private String issuerCertificateAuthorityId;
    /**
     * @return The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
     * 
     */
    private String kmsKeyId;
    /**
     * @return Additional information about the current CA lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    private String name;
    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    private String signingAlgorithm;
    /**
     * @return The current lifecycle state of the certificate authority.
     * 
     */
    private String state;
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    private List<GetCertificateAuthoritySubject> subjects;
    /**
     * @return A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfDeletion;

    private GetCertificateAuthorityResult() {}
    public List<GetCertificateAuthorityCertificateAuthorityConfig> certificateAuthorityConfigs() {
        return this.certificateAuthorityConfigs;
    }
    /**
     * @return The OCID of the CA.
     * 
     */
    public String certificateAuthorityId() {
        return this.certificateAuthorityId;
    }
    /**
     * @return An optional list of rules that control how the CA is used and managed.
     * 
     */
    public List<GetCertificateAuthorityCertificateAuthorityRule> certificateAuthorityRules() {
        return this.certificateAuthorityRules;
    }
    /**
     * @return The details of the certificate revocation list (CRL).
     * 
     */
    public List<GetCertificateAuthorityCertificateRevocationListDetail> certificateRevocationListDetails() {
        return this.certificateRevocationListDetails;
    }
    /**
     * @return The OCID of the compartment under which the CA is created.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The origin of the CA.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
     * 
     */
    public List<GetCertificateAuthorityCurrentVersion> currentVersions() {
        return this.currentVersions;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A brief description of the CA.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the CA.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
     * 
     */
    public String issuerCertificateAuthorityId() {
        return this.issuerCertificateAuthorityId;
    }
    /**
     * @return The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return Additional information about the current CA lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The algorithm used to sign public key certificates that the CA issues.
     * 
     */
    public String signingAlgorithm() {
        return this.signingAlgorithm;
    }
    /**
     * @return The current lifecycle state of the certificate authority.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public List<GetCertificateAuthoritySubject> subjects() {
        return this.subjects;
    }
    /**
     * @return A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateAuthorityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCertificateAuthorityCertificateAuthorityConfig> certificateAuthorityConfigs;
        private String certificateAuthorityId;
        private List<GetCertificateAuthorityCertificateAuthorityRule> certificateAuthorityRules;
        private List<GetCertificateAuthorityCertificateRevocationListDetail> certificateRevocationListDetails;
        private String compartmentId;
        private String configType;
        private List<GetCertificateAuthorityCurrentVersion> currentVersions;
        private Map<String,String> definedTags;
        private String description;
        private Map<String,String> freeformTags;
        private String id;
        private String issuerCertificateAuthorityId;
        private String kmsKeyId;
        private String lifecycleDetails;
        private String name;
        private String signingAlgorithm;
        private String state;
        private List<GetCertificateAuthoritySubject> subjects;
        private String timeCreated;
        private String timeOfDeletion;
        public Builder() {}
        public Builder(GetCertificateAuthorityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthorityConfigs = defaults.certificateAuthorityConfigs;
    	      this.certificateAuthorityId = defaults.certificateAuthorityId;
    	      this.certificateAuthorityRules = defaults.certificateAuthorityRules;
    	      this.certificateRevocationListDetails = defaults.certificateRevocationListDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configType = defaults.configType;
    	      this.currentVersions = defaults.currentVersions;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.issuerCertificateAuthorityId = defaults.issuerCertificateAuthorityId;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
    	      this.state = defaults.state;
    	      this.subjects = defaults.subjects;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
        }

        @CustomType.Setter
        public Builder certificateAuthorityConfigs(List<GetCertificateAuthorityCertificateAuthorityConfig> certificateAuthorityConfigs) {
            if (certificateAuthorityConfigs == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "certificateAuthorityConfigs");
            }
            this.certificateAuthorityConfigs = certificateAuthorityConfigs;
            return this;
        }
        public Builder certificateAuthorityConfigs(GetCertificateAuthorityCertificateAuthorityConfig... certificateAuthorityConfigs) {
            return certificateAuthorityConfigs(List.of(certificateAuthorityConfigs));
        }
        @CustomType.Setter
        public Builder certificateAuthorityId(String certificateAuthorityId) {
            if (certificateAuthorityId == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "certificateAuthorityId");
            }
            this.certificateAuthorityId = certificateAuthorityId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateAuthorityRules(List<GetCertificateAuthorityCertificateAuthorityRule> certificateAuthorityRules) {
            if (certificateAuthorityRules == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "certificateAuthorityRules");
            }
            this.certificateAuthorityRules = certificateAuthorityRules;
            return this;
        }
        public Builder certificateAuthorityRules(GetCertificateAuthorityCertificateAuthorityRule... certificateAuthorityRules) {
            return certificateAuthorityRules(List.of(certificateAuthorityRules));
        }
        @CustomType.Setter
        public Builder certificateRevocationListDetails(List<GetCertificateAuthorityCertificateRevocationListDetail> certificateRevocationListDetails) {
            if (certificateRevocationListDetails == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "certificateRevocationListDetails");
            }
            this.certificateRevocationListDetails = certificateRevocationListDetails;
            return this;
        }
        public Builder certificateRevocationListDetails(GetCertificateAuthorityCertificateRevocationListDetail... certificateRevocationListDetails) {
            return certificateRevocationListDetails(List.of(certificateRevocationListDetails));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configType(String configType) {
            if (configType == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "configType");
            }
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder currentVersions(List<GetCertificateAuthorityCurrentVersion> currentVersions) {
            if (currentVersions == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "currentVersions");
            }
            this.currentVersions = currentVersions;
            return this;
        }
        public Builder currentVersions(GetCertificateAuthorityCurrentVersion... currentVersions) {
            return currentVersions(List.of(currentVersions));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuerCertificateAuthorityId(String issuerCertificateAuthorityId) {
            if (issuerCertificateAuthorityId == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "issuerCertificateAuthorityId");
            }
            this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder signingAlgorithm(String signingAlgorithm) {
            if (signingAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "signingAlgorithm");
            }
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subjects(List<GetCertificateAuthoritySubject> subjects) {
            if (subjects == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "subjects");
            }
            this.subjects = subjects;
            return this;
        }
        public Builder subjects(GetCertificateAuthoritySubject... subjects) {
            return subjects(List.of(subjects));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            if (timeOfDeletion == null) {
              throw new MissingRequiredPropertyException("GetCertificateAuthorityResult", "timeOfDeletion");
            }
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        public GetCertificateAuthorityResult build() {
            final var _resultValue = new GetCertificateAuthorityResult();
            _resultValue.certificateAuthorityConfigs = certificateAuthorityConfigs;
            _resultValue.certificateAuthorityId = certificateAuthorityId;
            _resultValue.certificateAuthorityRules = certificateAuthorityRules;
            _resultValue.certificateRevocationListDetails = certificateRevocationListDetails;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configType = configType;
            _resultValue.currentVersions = currentVersions;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.name = name;
            _resultValue.signingAlgorithm = signingAlgorithm;
            _resultValue.state = state;
            _resultValue.subjects = subjects;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeOfDeletion = timeOfDeletion;
            return _resultValue;
        }
    }
}
