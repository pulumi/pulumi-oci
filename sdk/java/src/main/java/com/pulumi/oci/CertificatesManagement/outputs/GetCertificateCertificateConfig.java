// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCertificateConfigSubject;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCertificateConfigSubjectAlternativeName;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCertificateConfigValidity;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateCertificateConfig {
    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    private @Nullable String certificateProfileType;
    /**
     * @return The origin of the certificate.
     * 
     */
    private @Nullable String configType;
    private @Nullable String csrPem;
    /**
     * @return The OCID of the certificate authority (CA) that issued the certificate.
     * 
     */
    private @Nullable String issuerCertificateAuthorityId;
    /**
     * @return The algorithm used to create key pairs.
     * 
     */
    private @Nullable String keyAlgorithm;
    /**
     * @return The algorithm used to sign the public key certificate.
     * 
     */
    private @Nullable String signatureAlgorithm;
    /**
     * @return A list of subject alternative names.
     * 
     */
    private @Nullable List<GetCertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames;
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    private @Nullable List<GetCertificateCertificateConfigSubject> subjects;
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    private @Nullable List<GetCertificateCertificateConfigValidity> validities;
    /**
     * @return The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    private @Nullable String versionName;

    private GetCertificateCertificateConfig() {}
    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    public Optional<String> certificateProfileType() {
        return Optional.ofNullable(this.certificateProfileType);
    }
    /**
     * @return The origin of the certificate.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    public Optional<String> csrPem() {
        return Optional.ofNullable(this.csrPem);
    }
    /**
     * @return The OCID of the certificate authority (CA) that issued the certificate.
     * 
     */
    public Optional<String> issuerCertificateAuthorityId() {
        return Optional.ofNullable(this.issuerCertificateAuthorityId);
    }
    /**
     * @return The algorithm used to create key pairs.
     * 
     */
    public Optional<String> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }
    /**
     * @return The algorithm used to sign the public key certificate.
     * 
     */
    public Optional<String> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }
    /**
     * @return A list of subject alternative names.
     * 
     */
    public List<GetCertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames() {
        return this.subjectAlternativeNames == null ? List.of() : this.subjectAlternativeNames;
    }
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public List<GetCertificateCertificateConfigSubject> subjects() {
        return this.subjects == null ? List.of() : this.subjects;
    }
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    public List<GetCertificateCertificateConfigValidity> validities() {
        return this.validities == null ? List.of() : this.validities;
    }
    /**
     * @return The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    public Optional<String> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateCertificateConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateProfileType;
        private @Nullable String configType;
        private @Nullable String csrPem;
        private @Nullable String issuerCertificateAuthorityId;
        private @Nullable String keyAlgorithm;
        private @Nullable String signatureAlgorithm;
        private @Nullable List<GetCertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames;
        private @Nullable List<GetCertificateCertificateConfigSubject> subjects;
        private @Nullable List<GetCertificateCertificateConfigValidity> validities;
        private @Nullable String versionName;
        public Builder() {}
        public Builder(GetCertificateCertificateConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateProfileType = defaults.certificateProfileType;
    	      this.configType = defaults.configType;
    	      this.csrPem = defaults.csrPem;
    	      this.issuerCertificateAuthorityId = defaults.issuerCertificateAuthorityId;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.subjects = defaults.subjects;
    	      this.validities = defaults.validities;
    	      this.versionName = defaults.versionName;
        }

        @CustomType.Setter
        public Builder certificateProfileType(@Nullable String certificateProfileType) {
            this.certificateProfileType = certificateProfileType;
            return this;
        }
        @CustomType.Setter
        public Builder configType(@Nullable String configType) {
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder csrPem(@Nullable String csrPem) {
            this.csrPem = csrPem;
            return this;
        }
        @CustomType.Setter
        public Builder issuerCertificateAuthorityId(@Nullable String issuerCertificateAuthorityId) {
            this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(@Nullable String keyAlgorithm) {
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(@Nullable String signatureAlgorithm) {
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder subjectAlternativeNames(@Nullable List<GetCertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames) {
            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }
        public Builder subjectAlternativeNames(GetCertificateCertificateConfigSubjectAlternativeName... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }
        @CustomType.Setter
        public Builder subjects(@Nullable List<GetCertificateCertificateConfigSubject> subjects) {
            this.subjects = subjects;
            return this;
        }
        public Builder subjects(GetCertificateCertificateConfigSubject... subjects) {
            return subjects(List.of(subjects));
        }
        @CustomType.Setter
        public Builder validities(@Nullable List<GetCertificateCertificateConfigValidity> validities) {
            this.validities = validities;
            return this;
        }
        public Builder validities(GetCertificateCertificateConfigValidity... validities) {
            return validities(List.of(validities));
        }
        @CustomType.Setter
        public Builder versionName(@Nullable String versionName) {
            this.versionName = versionName;
            return this;
        }
        public GetCertificateCertificateConfig build() {
            final var o = new GetCertificateCertificateConfig();
            o.certificateProfileType = certificateProfileType;
            o.configType = configType;
            o.csrPem = csrPem;
            o.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            o.keyAlgorithm = keyAlgorithm;
            o.signatureAlgorithm = signatureAlgorithm;
            o.subjectAlternativeNames = subjectAlternativeNames;
            o.subjects = subjects;
            o.validities = validities;
            o.versionName = versionName;
            return o;
        }
    }
}
