// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCertificateCertificateConfigSubject {
    /**
     * @return Common name or fully-qualified domain name (RDN CN).
     * 
     */
    private String commonName;
    /**
     * @return Country name (RDN C).
     * 
     */
    private String country;
    /**
     * @return Distinguished name qualifier(RDN DNQ).
     * 
     */
    private String distinguishedNameQualifier;
    /**
     * @return Domain component (RDN DC).
     * 
     */
    private String domainComponent;
    /**
     * @return Personal generational qualifier (for example, Sr., Jr. 3rd, or IV).
     * 
     */
    private String generationQualifier;
    /**
     * @return Personal given name (RDN G or GN).
     * 
     */
    private String givenName;
    /**
     * @return Personal initials.
     * 
     */
    private String initials;
    /**
     * @return Locality (RDN L).
     * 
     */
    private String localityName;
    /**
     * @return Organization (RDN O).
     * 
     */
    private String organization;
    /**
     * @return Organizational unit (RDN OU).
     * 
     */
    private String organizationalUnit;
    /**
     * @return Subject pseudonym.
     * 
     */
    private String pseudonym;
    /**
     * @return Unique subject identifier, which is not the same as the certificate serial number (RDN SERIALNUMBER).
     * 
     */
    private String serialNumber;
    /**
     * @return State or province name (RDN ST or S).
     * 
     */
    private String stateOrProvinceName;
    /**
     * @return Street address (RDN STREET).
     * 
     */
    private String street;
    /**
     * @return Personal surname (RDN SN).
     * 
     */
    private String surname;
    /**
     * @return Title (RDN T or TITLE).
     * 
     */
    private String title;
    /**
     * @return User ID (RDN UID).
     * 
     */
    private String userId;

    private GetCertificateCertificateConfigSubject() {}
    /**
     * @return Common name or fully-qualified domain name (RDN CN).
     * 
     */
    public String commonName() {
        return this.commonName;
    }
    /**
     * @return Country name (RDN C).
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return Distinguished name qualifier(RDN DNQ).
     * 
     */
    public String distinguishedNameQualifier() {
        return this.distinguishedNameQualifier;
    }
    /**
     * @return Domain component (RDN DC).
     * 
     */
    public String domainComponent() {
        return this.domainComponent;
    }
    /**
     * @return Personal generational qualifier (for example, Sr., Jr. 3rd, or IV).
     * 
     */
    public String generationQualifier() {
        return this.generationQualifier;
    }
    /**
     * @return Personal given name (RDN G or GN).
     * 
     */
    public String givenName() {
        return this.givenName;
    }
    /**
     * @return Personal initials.
     * 
     */
    public String initials() {
        return this.initials;
    }
    /**
     * @return Locality (RDN L).
     * 
     */
    public String localityName() {
        return this.localityName;
    }
    /**
     * @return Organization (RDN O).
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return Organizational unit (RDN OU).
     * 
     */
    public String organizationalUnit() {
        return this.organizationalUnit;
    }
    /**
     * @return Subject pseudonym.
     * 
     */
    public String pseudonym() {
        return this.pseudonym;
    }
    /**
     * @return Unique subject identifier, which is not the same as the certificate serial number (RDN SERIALNUMBER).
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }
    /**
     * @return State or province name (RDN ST or S).
     * 
     */
    public String stateOrProvinceName() {
        return this.stateOrProvinceName;
    }
    /**
     * @return Street address (RDN STREET).
     * 
     */
    public String street() {
        return this.street;
    }
    /**
     * @return Personal surname (RDN SN).
     * 
     */
    public String surname() {
        return this.surname;
    }
    /**
     * @return Title (RDN T or TITLE).
     * 
     */
    public String title() {
        return this.title;
    }
    /**
     * @return User ID (RDN UID).
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateCertificateConfigSubject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commonName;
        private String country;
        private String distinguishedNameQualifier;
        private String domainComponent;
        private String generationQualifier;
        private String givenName;
        private String initials;
        private String localityName;
        private String organization;
        private String organizationalUnit;
        private String pseudonym;
        private String serialNumber;
        private String stateOrProvinceName;
        private String street;
        private String surname;
        private String title;
        private String userId;
        public Builder() {}
        public Builder(GetCertificateCertificateConfigSubject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commonName = defaults.commonName;
    	      this.country = defaults.country;
    	      this.distinguishedNameQualifier = defaults.distinguishedNameQualifier;
    	      this.domainComponent = defaults.domainComponent;
    	      this.generationQualifier = defaults.generationQualifier;
    	      this.givenName = defaults.givenName;
    	      this.initials = defaults.initials;
    	      this.localityName = defaults.localityName;
    	      this.organization = defaults.organization;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.pseudonym = defaults.pseudonym;
    	      this.serialNumber = defaults.serialNumber;
    	      this.stateOrProvinceName = defaults.stateOrProvinceName;
    	      this.street = defaults.street;
    	      this.surname = defaults.surname;
    	      this.title = defaults.title;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder commonName(String commonName) {
            if (commonName == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "commonName");
            }
            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder distinguishedNameQualifier(String distinguishedNameQualifier) {
            if (distinguishedNameQualifier == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "distinguishedNameQualifier");
            }
            this.distinguishedNameQualifier = distinguishedNameQualifier;
            return this;
        }
        @CustomType.Setter
        public Builder domainComponent(String domainComponent) {
            if (domainComponent == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "domainComponent");
            }
            this.domainComponent = domainComponent;
            return this;
        }
        @CustomType.Setter
        public Builder generationQualifier(String generationQualifier) {
            if (generationQualifier == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "generationQualifier");
            }
            this.generationQualifier = generationQualifier;
            return this;
        }
        @CustomType.Setter
        public Builder givenName(String givenName) {
            if (givenName == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "givenName");
            }
            this.givenName = givenName;
            return this;
        }
        @CustomType.Setter
        public Builder initials(String initials) {
            if (initials == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "initials");
            }
            this.initials = initials;
            return this;
        }
        @CustomType.Setter
        public Builder localityName(String localityName) {
            if (localityName == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "localityName");
            }
            this.localityName = localityName;
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnit(String organizationalUnit) {
            if (organizationalUnit == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "organizationalUnit");
            }
            this.organizationalUnit = organizationalUnit;
            return this;
        }
        @CustomType.Setter
        public Builder pseudonym(String pseudonym) {
            if (pseudonym == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "pseudonym");
            }
            this.pseudonym = pseudonym;
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(String serialNumber) {
            if (serialNumber == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "serialNumber");
            }
            this.serialNumber = serialNumber;
            return this;
        }
        @CustomType.Setter
        public Builder stateOrProvinceName(String stateOrProvinceName) {
            if (stateOrProvinceName == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "stateOrProvinceName");
            }
            this.stateOrProvinceName = stateOrProvinceName;
            return this;
        }
        @CustomType.Setter
        public Builder street(String street) {
            if (street == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "street");
            }
            this.street = street;
            return this;
        }
        @CustomType.Setter
        public Builder surname(String surname) {
            if (surname == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "surname");
            }
            this.surname = surname;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetCertificateCertificateConfigSubject", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetCertificateCertificateConfigSubject build() {
            final var _resultValue = new GetCertificateCertificateConfigSubject();
            _resultValue.commonName = commonName;
            _resultValue.country = country;
            _resultValue.distinguishedNameQualifier = distinguishedNameQualifier;
            _resultValue.domainComponent = domainComponent;
            _resultValue.generationQualifier = generationQualifier;
            _resultValue.givenName = givenName;
            _resultValue.initials = initials;
            _resultValue.localityName = localityName;
            _resultValue.organization = organization;
            _resultValue.organizationalUnit = organizationalUnit;
            _resultValue.pseudonym = pseudonym;
            _resultValue.serialNumber = serialNumber;
            _resultValue.stateOrProvinceName = stateOrProvinceName;
            _resultValue.street = street;
            _resultValue.surname = surname;
            _resultValue.title = title;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
