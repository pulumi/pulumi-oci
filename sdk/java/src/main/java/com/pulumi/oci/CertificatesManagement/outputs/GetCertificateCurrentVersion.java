// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCurrentVersionRevocationStatus;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCurrentVersionSubjectAlternativeName;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateCurrentVersionValidity;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCertificateCurrentVersion {
    /**
     * @return The OCID of the certificate.
     * 
     */
    private String certificateId;
    /**
     * @return The version number of the issuing certificate authority (CA).
     * 
     */
    private String issuerCaVersionNumber;
    /**
     * @return The current revocation status of the entity.
     * 
     */
    private List<GetCertificateCurrentVersionRevocationStatus> revocationStatuses;
    /**
     * @return Unique subject identifier, which is not the same as the certificate serial number (RDN SERIALNUMBER).
     * 
     */
    private String serialNumber;
    /**
     * @return A list of rotation states for this certificate version.
     * 
     */
    private List<String> stages;
    /**
     * @return A list of subject alternative names.
     * 
     */
    private List<GetCertificateCurrentVersionSubjectAlternativeName> subjectAlternativeNames;
    /**
     * @return A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfDeletion;
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    private List<GetCertificateCurrentVersionValidity> validities;
    /**
     * @return The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    private String versionName;
    /**
     * @return The version number of the certificate.
     * 
     */
    private String versionNumber;

    private GetCertificateCurrentVersion() {}
    /**
     * @return The OCID of the certificate.
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return The version number of the issuing certificate authority (CA).
     * 
     */
    public String issuerCaVersionNumber() {
        return this.issuerCaVersionNumber;
    }
    /**
     * @return The current revocation status of the entity.
     * 
     */
    public List<GetCertificateCurrentVersionRevocationStatus> revocationStatuses() {
        return this.revocationStatuses;
    }
    /**
     * @return Unique subject identifier, which is not the same as the certificate serial number (RDN SERIALNUMBER).
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }
    /**
     * @return A list of rotation states for this certificate version.
     * 
     */
    public List<String> stages() {
        return this.stages;
    }
    /**
     * @return A list of subject alternative names.
     * 
     */
    public List<GetCertificateCurrentVersionSubjectAlternativeName> subjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }
    /**
     * @return A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    public List<GetCertificateCurrentVersionValidity> validities() {
        return this.validities;
    }
    /**
     * @return The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    public String versionName() {
        return this.versionName;
    }
    /**
     * @return The version number of the certificate.
     * 
     */
    public String versionNumber() {
        return this.versionNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateCurrentVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateId;
        private String issuerCaVersionNumber;
        private List<GetCertificateCurrentVersionRevocationStatus> revocationStatuses;
        private String serialNumber;
        private List<String> stages;
        private List<GetCertificateCurrentVersionSubjectAlternativeName> subjectAlternativeNames;
        private String timeCreated;
        private String timeOfDeletion;
        private List<GetCertificateCurrentVersionValidity> validities;
        private String versionName;
        private String versionNumber;
        public Builder() {}
        public Builder(GetCertificateCurrentVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.issuerCaVersionNumber = defaults.issuerCaVersionNumber;
    	      this.revocationStatuses = defaults.revocationStatuses;
    	      this.serialNumber = defaults.serialNumber;
    	      this.stages = defaults.stages;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.validities = defaults.validities;
    	      this.versionName = defaults.versionName;
    	      this.versionNumber = defaults.versionNumber;
        }

        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            this.certificateId = Objects.requireNonNull(certificateId);
            return this;
        }
        @CustomType.Setter
        public Builder issuerCaVersionNumber(String issuerCaVersionNumber) {
            this.issuerCaVersionNumber = Objects.requireNonNull(issuerCaVersionNumber);
            return this;
        }
        @CustomType.Setter
        public Builder revocationStatuses(List<GetCertificateCurrentVersionRevocationStatus> revocationStatuses) {
            this.revocationStatuses = Objects.requireNonNull(revocationStatuses);
            return this;
        }
        public Builder revocationStatuses(GetCertificateCurrentVersionRevocationStatus... revocationStatuses) {
            return revocationStatuses(List.of(revocationStatuses));
        }
        @CustomType.Setter
        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Objects.requireNonNull(serialNumber);
            return this;
        }
        @CustomType.Setter
        public Builder stages(List<String> stages) {
            this.stages = Objects.requireNonNull(stages);
            return this;
        }
        public Builder stages(String... stages) {
            return stages(List.of(stages));
        }
        @CustomType.Setter
        public Builder subjectAlternativeNames(List<GetCertificateCurrentVersionSubjectAlternativeName> subjectAlternativeNames) {
            this.subjectAlternativeNames = Objects.requireNonNull(subjectAlternativeNames);
            return this;
        }
        public Builder subjectAlternativeNames(GetCertificateCurrentVersionSubjectAlternativeName... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            this.timeOfDeletion = Objects.requireNonNull(timeOfDeletion);
            return this;
        }
        @CustomType.Setter
        public Builder validities(List<GetCertificateCurrentVersionValidity> validities) {
            this.validities = Objects.requireNonNull(validities);
            return this;
        }
        public Builder validities(GetCertificateCurrentVersionValidity... validities) {
            return validities(List.of(validities));
        }
        @CustomType.Setter
        public Builder versionName(String versionName) {
            this.versionName = Objects.requireNonNull(versionName);
            return this;
        }
        @CustomType.Setter
        public Builder versionNumber(String versionNumber) {
            this.versionNumber = Objects.requireNonNull(versionNumber);
            return this;
        }
        public GetCertificateCurrentVersion build() {
            final var _resultValue = new GetCertificateCurrentVersion();
            _resultValue.certificateId = certificateId;
            _resultValue.issuerCaVersionNumber = issuerCaVersionNumber;
            _resultValue.revocationStatuses = revocationStatuses;
            _resultValue.serialNumber = serialNumber;
            _resultValue.stages = stages;
            _resultValue.subjectAlternativeNames = subjectAlternativeNames;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeOfDeletion = timeOfDeletion;
            _resultValue.validities = validities;
            _resultValue.versionName = versionName;
            _resultValue.versionNumber = versionNumber;
            return _resultValue;
        }
    }
}
