// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateVersionsCertificateVersionCollectionItemRevocationStatus;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificateVersionsCertificateVersionCollectionItemValidity;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateVersionsCertificateVersionCollectionItem {
    /**
     * @return The OCID of the certificate.
     * 
     */
    private @Nullable String certificateId;
    /**
     * @return The version number of the issuing certificate authority (CA).
     * 
     */
    private @Nullable String issuerCaVersionNumber;
    /**
     * @return The current revocation status of the entity.
     * 
     */
    private @Nullable List<GetCertificateVersionsCertificateVersionCollectionItemRevocationStatus> revocationStatuses;
    /**
     * @return A unique certificate identifier used in certificate revocation tracking, formatted as octets. Example: `03 AC FC FA CC B3 CB 02 B8 F8 DE F5 85 E7 7B FF`
     * 
     */
    private @Nullable String serialNumber;
    /**
     * @return A list of rotation states for this certificate version.
     * 
     */
    private @Nullable List<String> stages;
    /**
     * @return A list of subject alternative names.
     * 
     */
    private @Nullable List<GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName> subjectAlternativeNames;
    /**
     * @return A optional property indicating the time when the certificate version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private @Nullable String timeOfDeletion;
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    private @Nullable List<GetCertificateVersionsCertificateVersionCollectionItemValidity> validities;
    /**
     * @return The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    private @Nullable String versionName;
    /**
     * @return A filter that returns only resources that match the specified version number. The default value is 0, which means that this filter is not applied.
     * 
     */
    private @Nullable String versionNumber;

    private GetCertificateVersionsCertificateVersionCollectionItem() {}
    /**
     * @return The OCID of the certificate.
     * 
     */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    /**
     * @return The version number of the issuing certificate authority (CA).
     * 
     */
    public Optional<String> issuerCaVersionNumber() {
        return Optional.ofNullable(this.issuerCaVersionNumber);
    }
    /**
     * @return The current revocation status of the entity.
     * 
     */
    public List<GetCertificateVersionsCertificateVersionCollectionItemRevocationStatus> revocationStatuses() {
        return this.revocationStatuses == null ? List.of() : this.revocationStatuses;
    }
    /**
     * @return A unique certificate identifier used in certificate revocation tracking, formatted as octets. Example: `03 AC FC FA CC B3 CB 02 B8 F8 DE F5 85 E7 7B FF`
     * 
     */
    public Optional<String> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }
    /**
     * @return A list of rotation states for this certificate version.
     * 
     */
    public List<String> stages() {
        return this.stages == null ? List.of() : this.stages;
    }
    /**
     * @return A list of subject alternative names.
     * 
     */
    public List<GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName> subjectAlternativeNames() {
        return this.subjectAlternativeNames == null ? List.of() : this.subjectAlternativeNames;
    }
    /**
     * @return A optional property indicating the time when the certificate version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<String> timeOfDeletion() {
        return Optional.ofNullable(this.timeOfDeletion);
    }
    /**
     * @return An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     * 
     */
    public List<GetCertificateVersionsCertificateVersionCollectionItemValidity> validities() {
        return this.validities == null ? List.of() : this.validities;
    }
    /**
     * @return The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
     * 
     */
    public Optional<String> versionName() {
        return Optional.ofNullable(this.versionName);
    }
    /**
     * @return A filter that returns only resources that match the specified version number. The default value is 0, which means that this filter is not applied.
     * 
     */
    public Optional<String> versionNumber() {
        return Optional.ofNullable(this.versionNumber);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateVersionsCertificateVersionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateId;
        private @Nullable String issuerCaVersionNumber;
        private @Nullable List<GetCertificateVersionsCertificateVersionCollectionItemRevocationStatus> revocationStatuses;
        private @Nullable String serialNumber;
        private @Nullable List<String> stages;
        private @Nullable List<GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName> subjectAlternativeNames;
        private @Nullable String timeCreated;
        private @Nullable String timeOfDeletion;
        private @Nullable List<GetCertificateVersionsCertificateVersionCollectionItemValidity> validities;
        private @Nullable String versionName;
        private @Nullable String versionNumber;
        public Builder() {}
        public Builder(GetCertificateVersionsCertificateVersionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.issuerCaVersionNumber = defaults.issuerCaVersionNumber;
    	      this.revocationStatuses = defaults.revocationStatuses;
    	      this.serialNumber = defaults.serialNumber;
    	      this.stages = defaults.stages;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.validities = defaults.validities;
    	      this.versionName = defaults.versionName;
    	      this.versionNumber = defaults.versionNumber;
        }

        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder issuerCaVersionNumber(@Nullable String issuerCaVersionNumber) {
            this.issuerCaVersionNumber = issuerCaVersionNumber;
            return this;
        }
        @CustomType.Setter
        public Builder revocationStatuses(@Nullable List<GetCertificateVersionsCertificateVersionCollectionItemRevocationStatus> revocationStatuses) {
            this.revocationStatuses = revocationStatuses;
            return this;
        }
        public Builder revocationStatuses(GetCertificateVersionsCertificateVersionCollectionItemRevocationStatus... revocationStatuses) {
            return revocationStatuses(List.of(revocationStatuses));
        }
        @CustomType.Setter
        public Builder serialNumber(@Nullable String serialNumber) {
            this.serialNumber = serialNumber;
            return this;
        }
        @CustomType.Setter
        public Builder stages(@Nullable List<String> stages) {
            this.stages = stages;
            return this;
        }
        public Builder stages(String... stages) {
            return stages(List.of(stages));
        }
        @CustomType.Setter
        public Builder subjectAlternativeNames(@Nullable List<GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName> subjectAlternativeNames) {
            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }
        public Builder subjectAlternativeNames(GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(@Nullable String timeOfDeletion) {
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder validities(@Nullable List<GetCertificateVersionsCertificateVersionCollectionItemValidity> validities) {
            this.validities = validities;
            return this;
        }
        public Builder validities(GetCertificateVersionsCertificateVersionCollectionItemValidity... validities) {
            return validities(List.of(validities));
        }
        @CustomType.Setter
        public Builder versionName(@Nullable String versionName) {
            this.versionName = versionName;
            return this;
        }
        @CustomType.Setter
        public Builder versionNumber(@Nullable String versionNumber) {
            this.versionNumber = versionNumber;
            return this;
        }
        public GetCertificateVersionsCertificateVersionCollectionItem build() {
            final var o = new GetCertificateVersionsCertificateVersionCollectionItem();
            o.certificateId = certificateId;
            o.issuerCaVersionNumber = issuerCaVersionNumber;
            o.revocationStatuses = revocationStatuses;
            o.serialNumber = serialNumber;
            o.stages = stages;
            o.subjectAlternativeNames = subjectAlternativeNames;
            o.timeCreated = timeCreated;
            o.timeOfDeletion = timeOfDeletion;
            o.validities = validities;
            o.versionName = versionName;
            o.versionNumber = versionNumber;
            return o;
        }
    }
}
