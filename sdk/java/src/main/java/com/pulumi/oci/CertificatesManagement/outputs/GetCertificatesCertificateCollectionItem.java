// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CertificatesManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificatesCertificateCollectionItemCertificateConfig;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificatesCertificateCollectionItemCertificateRevocationListDetail;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificatesCertificateCollectionItemCertificateRule;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificatesCertificateCollectionItemCurrentVersion;
import com.pulumi.oci.CertificatesManagement.outputs.GetCertificatesCertificateCollectionItemSubject;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificatesCertificateCollectionItem {
    private List<GetCertificatesCertificateCollectionItemCertificateConfig> certificateConfigs;
    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    private String certificateProfileType;
    /**
     * @return The details of the certificate revocation list (CRL).
     * 
     */
    private List<GetCertificatesCertificateCollectionItemCertificateRevocationListDetail> certificateRevocationListDetails;
    /**
     * @return A list of rules that control how the certificate is used and managed.
     * 
     */
    private List<GetCertificatesCertificateCollectionItemCertificateRule> certificateRules;
    /**
     * @return A filter that returns only resources that match the given compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return The origin of the certificate.
     * 
     */
    private String configType;
    /**
     * @return The details of the certificate version. This object does not contain the certificate contents.
     * 
     */
    private List<GetCertificatesCertificateCollectionItemCurrentVersion> currentVersions;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A brief description of the certificate. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the certificate.
     * 
     */
    private String id;
    /**
     * @return The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
     * 
     */
    private String issuerCertificateAuthorityId;
    /**
     * @return The algorithm used to create key pairs.
     * 
     */
    private String keyAlgorithm;
    /**
     * @return Additional information about the current lifecycle state of the certificate.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A filter that returns only resources that match the specified name.
     * 
     */
    private String name;
    /**
     * @return The algorithm used to sign the public key certificate.
     * 
     */
    private String signatureAlgorithm;
    /**
     * @return A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    private String state;
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    private List<GetCertificatesCertificateCollectionItemSubject> subjects;
    /**
     * @return A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfDeletion;

    private GetCertificatesCertificateCollectionItem() {}
    public List<GetCertificatesCertificateCollectionItemCertificateConfig> certificateConfigs() {
        return this.certificateConfigs;
    }
    /**
     * @return The name of the profile used to create the certificate, which depends on the type of certificate you need.
     * 
     */
    public String certificateProfileType() {
        return this.certificateProfileType;
    }
    /**
     * @return The details of the certificate revocation list (CRL).
     * 
     */
    public List<GetCertificatesCertificateCollectionItemCertificateRevocationListDetail> certificateRevocationListDetails() {
        return this.certificateRevocationListDetails;
    }
    /**
     * @return A list of rules that control how the certificate is used and managed.
     * 
     */
    public List<GetCertificatesCertificateCollectionItemCertificateRule> certificateRules() {
        return this.certificateRules;
    }
    /**
     * @return A filter that returns only resources that match the given compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The origin of the certificate.
     * 
     */
    public String configType() {
        return this.configType;
    }
    /**
     * @return The details of the certificate version. This object does not contain the certificate contents.
     * 
     */
    public List<GetCertificatesCertificateCollectionItemCurrentVersion> currentVersions() {
        return this.currentVersions;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A brief description of the certificate. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the certificate.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
     * 
     */
    public String issuerCertificateAuthorityId() {
        return this.issuerCertificateAuthorityId;
    }
    /**
     * @return The algorithm used to create key pairs.
     * 
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }
    /**
     * @return Additional information about the current lifecycle state of the certificate.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A filter that returns only resources that match the specified name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The algorithm used to sign the public key certificate.
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
     * 
     */
    public List<GetCertificatesCertificateCollectionItemSubject> subjects() {
        return this.subjects;
    }
    /**
     * @return A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificatesCertificateCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCertificatesCertificateCollectionItemCertificateConfig> certificateConfigs;
        private String certificateProfileType;
        private List<GetCertificatesCertificateCollectionItemCertificateRevocationListDetail> certificateRevocationListDetails;
        private List<GetCertificatesCertificateCollectionItemCertificateRule> certificateRules;
        private String compartmentId;
        private String configType;
        private List<GetCertificatesCertificateCollectionItemCurrentVersion> currentVersions;
        private Map<String,String> definedTags;
        private String description;
        private Map<String,String> freeformTags;
        private String id;
        private String issuerCertificateAuthorityId;
        private String keyAlgorithm;
        private String lifecycleDetails;
        private String name;
        private String signatureAlgorithm;
        private String state;
        private List<GetCertificatesCertificateCollectionItemSubject> subjects;
        private String timeCreated;
        private String timeOfDeletion;
        public Builder() {}
        public Builder(GetCertificatesCertificateCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateConfigs = defaults.certificateConfigs;
    	      this.certificateProfileType = defaults.certificateProfileType;
    	      this.certificateRevocationListDetails = defaults.certificateRevocationListDetails;
    	      this.certificateRules = defaults.certificateRules;
    	      this.compartmentId = defaults.compartmentId;
    	      this.configType = defaults.configType;
    	      this.currentVersions = defaults.currentVersions;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.issuerCertificateAuthorityId = defaults.issuerCertificateAuthorityId;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.state = defaults.state;
    	      this.subjects = defaults.subjects;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
        }

        @CustomType.Setter
        public Builder certificateConfigs(List<GetCertificatesCertificateCollectionItemCertificateConfig> certificateConfigs) {
            if (certificateConfigs == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "certificateConfigs");
            }
            this.certificateConfigs = certificateConfigs;
            return this;
        }
        public Builder certificateConfigs(GetCertificatesCertificateCollectionItemCertificateConfig... certificateConfigs) {
            return certificateConfigs(List.of(certificateConfigs));
        }
        @CustomType.Setter
        public Builder certificateProfileType(String certificateProfileType) {
            if (certificateProfileType == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "certificateProfileType");
            }
            this.certificateProfileType = certificateProfileType;
            return this;
        }
        @CustomType.Setter
        public Builder certificateRevocationListDetails(List<GetCertificatesCertificateCollectionItemCertificateRevocationListDetail> certificateRevocationListDetails) {
            if (certificateRevocationListDetails == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "certificateRevocationListDetails");
            }
            this.certificateRevocationListDetails = certificateRevocationListDetails;
            return this;
        }
        public Builder certificateRevocationListDetails(GetCertificatesCertificateCollectionItemCertificateRevocationListDetail... certificateRevocationListDetails) {
            return certificateRevocationListDetails(List.of(certificateRevocationListDetails));
        }
        @CustomType.Setter
        public Builder certificateRules(List<GetCertificatesCertificateCollectionItemCertificateRule> certificateRules) {
            if (certificateRules == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "certificateRules");
            }
            this.certificateRules = certificateRules;
            return this;
        }
        public Builder certificateRules(GetCertificatesCertificateCollectionItemCertificateRule... certificateRules) {
            return certificateRules(List.of(certificateRules));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder configType(String configType) {
            if (configType == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "configType");
            }
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder currentVersions(List<GetCertificatesCertificateCollectionItemCurrentVersion> currentVersions) {
            if (currentVersions == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "currentVersions");
            }
            this.currentVersions = currentVersions;
            return this;
        }
        public Builder currentVersions(GetCertificatesCertificateCollectionItemCurrentVersion... currentVersions) {
            return currentVersions(List.of(currentVersions));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuerCertificateAuthorityId(String issuerCertificateAuthorityId) {
            if (issuerCertificateAuthorityId == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "issuerCertificateAuthorityId");
            }
            this.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(String keyAlgorithm) {
            if (keyAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "keyAlgorithm");
            }
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            if (signatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "signatureAlgorithm");
            }
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subjects(List<GetCertificatesCertificateCollectionItemSubject> subjects) {
            if (subjects == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "subjects");
            }
            this.subjects = subjects;
            return this;
        }
        public Builder subjects(GetCertificatesCertificateCollectionItemSubject... subjects) {
            return subjects(List.of(subjects));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            if (timeOfDeletion == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateCollectionItem", "timeOfDeletion");
            }
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        public GetCertificatesCertificateCollectionItem build() {
            final var _resultValue = new GetCertificatesCertificateCollectionItem();
            _resultValue.certificateConfigs = certificateConfigs;
            _resultValue.certificateProfileType = certificateProfileType;
            _resultValue.certificateRevocationListDetails = certificateRevocationListDetails;
            _resultValue.certificateRules = certificateRules;
            _resultValue.compartmentId = compartmentId;
            _resultValue.configType = configType;
            _resultValue.currentVersions = currentVersions;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.issuerCertificateAuthorityId = issuerCertificateAuthorityId;
            _resultValue.keyAlgorithm = keyAlgorithm;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.name = name;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.state = state;
            _resultValue.subjects = subjects;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeOfDeletion = timeOfDeletion;
            return _resultValue;
        }
    }
}
