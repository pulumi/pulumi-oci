// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AgentPluginArgs extends com.pulumi.resources.ResourceArgs {

    public static final AgentPluginArgs Empty = new AgentPluginArgs();

    /**
     * Unique Agent identifier path parameter.
     * 
     */
    @Import(name="agentId", required=true)
    private Output<String> agentId;

    /**
     * @return Unique Agent identifier path parameter.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * (Updatable) State to which the customer wants the plugin to move to.
     * 
     */
    @Import(name="desiredState")
    private @Nullable Output<String> desiredState;

    /**
     * @return (Updatable) State to which the customer wants the plugin to move to.
     * 
     */
    public Optional<Output<String>> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }

    /**
     * Unique plugin identifier path parameter.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="pluginName", required=true)
    private Output<String> pluginName;

    /**
     * @return Unique plugin identifier path parameter.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> pluginName() {
        return this.pluginName;
    }

    private AgentPluginArgs() {}

    private AgentPluginArgs(AgentPluginArgs $) {
        this.agentId = $.agentId;
        this.desiredState = $.desiredState;
        this.pluginName = $.pluginName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AgentPluginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AgentPluginArgs $;

        public Builder() {
            $ = new AgentPluginArgs();
        }

        public Builder(AgentPluginArgs defaults) {
            $ = new AgentPluginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentId Unique Agent identifier path parameter.
         * 
         * @return builder
         * 
         */
        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Unique Agent identifier path parameter.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param desiredState (Updatable) State to which the customer wants the plugin to move to.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(@Nullable Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState (Updatable) State to which the customer wants the plugin to move to.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param pluginName Unique plugin identifier path parameter.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder pluginName(Output<String> pluginName) {
            $.pluginName = pluginName;
            return this;
        }

        /**
         * @param pluginName Unique plugin identifier path parameter.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder pluginName(String pluginName) {
            return pluginName(Output.of(pluginName));
        }

        public AgentPluginArgs build() {
            $.agentId = Objects.requireNonNull($.agentId, "expected parameter 'agentId' to be non-null");
            $.pluginName = Objects.requireNonNull($.pluginName, "expected parameter 'pluginName' to be non-null");
            return $;
        }
    }

}
