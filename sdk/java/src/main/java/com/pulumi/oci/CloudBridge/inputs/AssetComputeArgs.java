// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudBridge.inputs.AssetComputeDiskArgs;
import com.pulumi.oci.CloudBridge.inputs.AssetComputeGpuDeviceArgs;
import com.pulumi.oci.CloudBridge.inputs.AssetComputeNicArgs;
import com.pulumi.oci.CloudBridge.inputs.AssetComputeNvdimmArgs;
import com.pulumi.oci.CloudBridge.inputs.AssetComputeNvdimmControllerArgs;
import com.pulumi.oci.CloudBridge.inputs.AssetComputeScsiControllerArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssetComputeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssetComputeArgs Empty = new AssetComputeArgs();

    /**
     * (Updatable) Number of connected networks.
     * 
     */
    @Import(name="connectedNetworks")
    private @Nullable Output<Integer> connectedNetworks;

    /**
     * @return (Updatable) Number of connected networks.
     * 
     */
    public Optional<Output<Integer>> connectedNetworks() {
        return Optional.ofNullable(this.connectedNetworks);
    }

    /**
     * (Updatable) Number of CPUs.
     * 
     */
    @Import(name="coresCount")
    private @Nullable Output<Integer> coresCount;

    /**
     * @return (Updatable) Number of CPUs.
     * 
     */
    public Optional<Output<Integer>> coresCount() {
        return Optional.ofNullable(this.coresCount);
    }

    /**
     * (Updatable) CPU model name.
     * 
     */
    @Import(name="cpuModel")
    private @Nullable Output<String> cpuModel;

    /**
     * @return (Updatable) CPU model name.
     * 
     */
    public Optional<Output<String>> cpuModel() {
        return Optional.ofNullable(this.cpuModel);
    }

    /**
     * (Updatable) Information about the asset.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Information about the asset.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<AssetComputeDiskArgs>> disks;

    /**
     * @return (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    public Optional<Output<List<AssetComputeDiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * (Updatable) Number of disks.
     * 
     */
    @Import(name="disksCount")
    private @Nullable Output<Integer> disksCount;

    /**
     * @return (Updatable) Number of disks.
     * 
     */
    public Optional<Output<Integer>> disksCount() {
        return Optional.ofNullable(this.disksCount);
    }

    /**
     * (Updatable) Fully Qualified DNS Name.
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return (Updatable) Fully Qualified DNS Name.
     * 
     */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * (Updatable) Information about firmware type for this virtual machine.
     * 
     */
    @Import(name="firmware")
    private @Nullable Output<String> firmware;

    /**
     * @return (Updatable) Information about firmware type for this virtual machine.
     * 
     */
    public Optional<Output<String>> firmware() {
        return Optional.ofNullable(this.firmware);
    }

    /**
     * (Updatable) List of GPU devices attached to a virtual machine.
     * 
     */
    @Import(name="gpuDevices")
    private @Nullable Output<List<AssetComputeGpuDeviceArgs>> gpuDevices;

    /**
     * @return (Updatable) List of GPU devices attached to a virtual machine.
     * 
     */
    public Optional<Output<List<AssetComputeGpuDeviceArgs>>> gpuDevices() {
        return Optional.ofNullable(this.gpuDevices);
    }

    /**
     * (Updatable) Number of GPU devices.
     * 
     */
    @Import(name="gpuDevicesCount")
    private @Nullable Output<Integer> gpuDevicesCount;

    /**
     * @return (Updatable) Number of GPU devices.
     * 
     */
    public Optional<Output<Integer>> gpuDevicesCount() {
        return Optional.ofNullable(this.gpuDevicesCount);
    }

    /**
     * (Updatable) Guest state.
     * 
     */
    @Import(name="guestState")
    private @Nullable Output<String> guestState;

    /**
     * @return (Updatable) Guest state.
     * 
     */
    public Optional<Output<String>> guestState() {
        return Optional.ofNullable(this.guestState);
    }

    /**
     * (Updatable) Hardware version.
     * 
     */
    @Import(name="hardwareVersion")
    private @Nullable Output<String> hardwareVersion;

    /**
     * @return (Updatable) Hardware version.
     * 
     */
    public Optional<Output<String>> hardwareVersion() {
        return Optional.ofNullable(this.hardwareVersion);
    }

    /**
     * (Updatable) Host name of the VM.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return (Updatable) Host name of the VM.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * (Updatable) Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    @Import(name="isPmemEnabled")
    private @Nullable Output<Boolean> isPmemEnabled;

    /**
     * @return (Updatable) Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    public Optional<Output<Boolean>> isPmemEnabled() {
        return Optional.ofNullable(this.isPmemEnabled);
    }

    /**
     * (Updatable) Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    @Import(name="isTpmEnabled")
    private @Nullable Output<Boolean> isTpmEnabled;

    /**
     * @return (Updatable) Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    public Optional<Output<Boolean>> isTpmEnabled() {
        return Optional.ofNullable(this.isTpmEnabled);
    }

    /**
     * (Updatable) Latency sensitivity.
     * 
     */
    @Import(name="latencySensitivity")
    private @Nullable Output<String> latencySensitivity;

    /**
     * @return (Updatable) Latency sensitivity.
     * 
     */
    public Optional<Output<String>> latencySensitivity() {
        return Optional.ofNullable(this.latencySensitivity);
    }

    /**
     * (Updatable) Memory size in MBs.
     * 
     */
    @Import(name="memoryInMbs")
    private @Nullable Output<String> memoryInMbs;

    /**
     * @return (Updatable) Memory size in MBs.
     * 
     */
    public Optional<Output<String>> memoryInMbs() {
        return Optional.ofNullable(this.memoryInMbs);
    }

    /**
     * (Updatable) List of network ethernet cards attached to a virtual machine.
     * 
     */
    @Import(name="nics")
    private @Nullable Output<List<AssetComputeNicArgs>> nics;

    /**
     * @return (Updatable) List of network ethernet cards attached to a virtual machine.
     * 
     */
    public Optional<Output<List<AssetComputeNicArgs>>> nics() {
        return Optional.ofNullable(this.nics);
    }

    /**
     * (Updatable) Number of network ethernet cards.
     * 
     */
    @Import(name="nicsCount")
    private @Nullable Output<Integer> nicsCount;

    /**
     * @return (Updatable) Number of network ethernet cards.
     * 
     */
    public Optional<Output<Integer>> nicsCount() {
        return Optional.ofNullable(this.nicsCount);
    }

    /**
     * (Updatable) The asset&#39;s NVDIMM configuration.
     * 
     */
    @Import(name="nvdimmController")
    private @Nullable Output<AssetComputeNvdimmControllerArgs> nvdimmController;

    /**
     * @return (Updatable) The asset&#39;s NVDIMM configuration.
     * 
     */
    public Optional<Output<AssetComputeNvdimmControllerArgs>> nvdimmController() {
        return Optional.ofNullable(this.nvdimmController);
    }

    /**
     * (Updatable) The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    @Import(name="nvdimms")
    private @Nullable Output<List<AssetComputeNvdimmArgs>> nvdimms;

    /**
     * @return (Updatable) The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    public Optional<Output<List<AssetComputeNvdimmArgs>>> nvdimms() {
        return Optional.ofNullable(this.nvdimms);
    }

    /**
     * (Updatable) Operating system.
     * 
     */
    @Import(name="operatingSystem")
    private @Nullable Output<String> operatingSystem;

    /**
     * @return (Updatable) Operating system.
     * 
     */
    public Optional<Output<String>> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }

    /**
     * (Updatable) Operating system version.
     * 
     */
    @Import(name="operatingSystemVersion")
    private @Nullable Output<String> operatingSystemVersion;

    /**
     * @return (Updatable) Operating system version.
     * 
     */
    public Optional<Output<String>> operatingSystemVersion() {
        return Optional.ofNullable(this.operatingSystemVersion);
    }

    /**
     * (Updatable) Pmem size in MBs.
     * 
     */
    @Import(name="pmemInMbs")
    private @Nullable Output<String> pmemInMbs;

    /**
     * @return (Updatable) Pmem size in MBs.
     * 
     */
    public Optional<Output<String>> pmemInMbs() {
        return Optional.ofNullable(this.pmemInMbs);
    }

    /**
     * (Updatable) The current power state of the virtual machine.
     * 
     */
    @Import(name="powerState")
    private @Nullable Output<String> powerState;

    /**
     * @return (Updatable) The current power state of the virtual machine.
     * 
     */
    public Optional<Output<String>> powerState() {
        return Optional.ofNullable(this.powerState);
    }

    /**
     * (Updatable) Primary IP address of the compute instance.
     * 
     */
    @Import(name="primaryIp")
    private @Nullable Output<String> primaryIp;

    /**
     * @return (Updatable) Primary IP address of the compute instance.
     * 
     */
    public Optional<Output<String>> primaryIp() {
        return Optional.ofNullable(this.primaryIp);
    }

    /**
     * (Updatable) The assets SCSI controller.
     * 
     */
    @Import(name="scsiController")
    private @Nullable Output<AssetComputeScsiControllerArgs> scsiController;

    /**
     * @return (Updatable) The assets SCSI controller.
     * 
     */
    public Optional<Output<AssetComputeScsiControllerArgs>> scsiController() {
        return Optional.ofNullable(this.scsiController);
    }

    /**
     * (Updatable) Provision storage size in MBs.
     * 
     */
    @Import(name="storageProvisionedInMbs")
    private @Nullable Output<String> storageProvisionedInMbs;

    /**
     * @return (Updatable) Provision storage size in MBs.
     * 
     */
    public Optional<Output<String>> storageProvisionedInMbs() {
        return Optional.ofNullable(this.storageProvisionedInMbs);
    }

    /**
     * (Updatable) Number of threads per core.
     * 
     */
    @Import(name="threadsPerCoreCount")
    private @Nullable Output<Integer> threadsPerCoreCount;

    /**
     * @return (Updatable) Number of threads per core.
     * 
     */
    public Optional<Output<Integer>> threadsPerCoreCount() {
        return Optional.ofNullable(this.threadsPerCoreCount);
    }

    private AssetComputeArgs() {}

    private AssetComputeArgs(AssetComputeArgs $) {
        this.connectedNetworks = $.connectedNetworks;
        this.coresCount = $.coresCount;
        this.cpuModel = $.cpuModel;
        this.description = $.description;
        this.disks = $.disks;
        this.disksCount = $.disksCount;
        this.dnsName = $.dnsName;
        this.firmware = $.firmware;
        this.gpuDevices = $.gpuDevices;
        this.gpuDevicesCount = $.gpuDevicesCount;
        this.guestState = $.guestState;
        this.hardwareVersion = $.hardwareVersion;
        this.hostName = $.hostName;
        this.isPmemEnabled = $.isPmemEnabled;
        this.isTpmEnabled = $.isTpmEnabled;
        this.latencySensitivity = $.latencySensitivity;
        this.memoryInMbs = $.memoryInMbs;
        this.nics = $.nics;
        this.nicsCount = $.nicsCount;
        this.nvdimmController = $.nvdimmController;
        this.nvdimms = $.nvdimms;
        this.operatingSystem = $.operatingSystem;
        this.operatingSystemVersion = $.operatingSystemVersion;
        this.pmemInMbs = $.pmemInMbs;
        this.powerState = $.powerState;
        this.primaryIp = $.primaryIp;
        this.scsiController = $.scsiController;
        this.storageProvisionedInMbs = $.storageProvisionedInMbs;
        this.threadsPerCoreCount = $.threadsPerCoreCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetComputeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetComputeArgs $;

        public Builder() {
            $ = new AssetComputeArgs();
        }

        public Builder(AssetComputeArgs defaults) {
            $ = new AssetComputeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectedNetworks (Updatable) Number of connected networks.
         * 
         * @return builder
         * 
         */
        public Builder connectedNetworks(@Nullable Output<Integer> connectedNetworks) {
            $.connectedNetworks = connectedNetworks;
            return this;
        }

        /**
         * @param connectedNetworks (Updatable) Number of connected networks.
         * 
         * @return builder
         * 
         */
        public Builder connectedNetworks(Integer connectedNetworks) {
            return connectedNetworks(Output.of(connectedNetworks));
        }

        /**
         * @param coresCount (Updatable) Number of CPUs.
         * 
         * @return builder
         * 
         */
        public Builder coresCount(@Nullable Output<Integer> coresCount) {
            $.coresCount = coresCount;
            return this;
        }

        /**
         * @param coresCount (Updatable) Number of CPUs.
         * 
         * @return builder
         * 
         */
        public Builder coresCount(Integer coresCount) {
            return coresCount(Output.of(coresCount));
        }

        /**
         * @param cpuModel (Updatable) CPU model name.
         * 
         * @return builder
         * 
         */
        public Builder cpuModel(@Nullable Output<String> cpuModel) {
            $.cpuModel = cpuModel;
            return this;
        }

        /**
         * @param cpuModel (Updatable) CPU model name.
         * 
         * @return builder
         * 
         */
        public Builder cpuModel(String cpuModel) {
            return cpuModel(Output.of(cpuModel));
        }

        /**
         * @param description (Updatable) Information about the asset.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Information about the asset.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disks (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<AssetComputeDiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
         * 
         * @return builder
         * 
         */
        public Builder disks(List<AssetComputeDiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
         * 
         * @return builder
         * 
         */
        public Builder disks(AssetComputeDiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param disksCount (Updatable) Number of disks.
         * 
         * @return builder
         * 
         */
        public Builder disksCount(@Nullable Output<Integer> disksCount) {
            $.disksCount = disksCount;
            return this;
        }

        /**
         * @param disksCount (Updatable) Number of disks.
         * 
         * @return builder
         * 
         */
        public Builder disksCount(Integer disksCount) {
            return disksCount(Output.of(disksCount));
        }

        /**
         * @param dnsName (Updatable) Fully Qualified DNS Name.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName (Updatable) Fully Qualified DNS Name.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param firmware (Updatable) Information about firmware type for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder firmware(@Nullable Output<String> firmware) {
            $.firmware = firmware;
            return this;
        }

        /**
         * @param firmware (Updatable) Information about firmware type for this virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder firmware(String firmware) {
            return firmware(Output.of(firmware));
        }

        /**
         * @param gpuDevices (Updatable) List of GPU devices attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder gpuDevices(@Nullable Output<List<AssetComputeGpuDeviceArgs>> gpuDevices) {
            $.gpuDevices = gpuDevices;
            return this;
        }

        /**
         * @param gpuDevices (Updatable) List of GPU devices attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder gpuDevices(List<AssetComputeGpuDeviceArgs> gpuDevices) {
            return gpuDevices(Output.of(gpuDevices));
        }

        /**
         * @param gpuDevices (Updatable) List of GPU devices attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder gpuDevices(AssetComputeGpuDeviceArgs... gpuDevices) {
            return gpuDevices(List.of(gpuDevices));
        }

        /**
         * @param gpuDevicesCount (Updatable) Number of GPU devices.
         * 
         * @return builder
         * 
         */
        public Builder gpuDevicesCount(@Nullable Output<Integer> gpuDevicesCount) {
            $.gpuDevicesCount = gpuDevicesCount;
            return this;
        }

        /**
         * @param gpuDevicesCount (Updatable) Number of GPU devices.
         * 
         * @return builder
         * 
         */
        public Builder gpuDevicesCount(Integer gpuDevicesCount) {
            return gpuDevicesCount(Output.of(gpuDevicesCount));
        }

        /**
         * @param guestState (Updatable) Guest state.
         * 
         * @return builder
         * 
         */
        public Builder guestState(@Nullable Output<String> guestState) {
            $.guestState = guestState;
            return this;
        }

        /**
         * @param guestState (Updatable) Guest state.
         * 
         * @return builder
         * 
         */
        public Builder guestState(String guestState) {
            return guestState(Output.of(guestState));
        }

        /**
         * @param hardwareVersion (Updatable) Hardware version.
         * 
         * @return builder
         * 
         */
        public Builder hardwareVersion(@Nullable Output<String> hardwareVersion) {
            $.hardwareVersion = hardwareVersion;
            return this;
        }

        /**
         * @param hardwareVersion (Updatable) Hardware version.
         * 
         * @return builder
         * 
         */
        public Builder hardwareVersion(String hardwareVersion) {
            return hardwareVersion(Output.of(hardwareVersion));
        }

        /**
         * @param hostName (Updatable) Host name of the VM.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName (Updatable) Host name of the VM.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param isPmemEnabled (Updatable) Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
         * 
         * @return builder
         * 
         */
        public Builder isPmemEnabled(@Nullable Output<Boolean> isPmemEnabled) {
            $.isPmemEnabled = isPmemEnabled;
            return this;
        }

        /**
         * @param isPmemEnabled (Updatable) Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
         * 
         * @return builder
         * 
         */
        public Builder isPmemEnabled(Boolean isPmemEnabled) {
            return isPmemEnabled(Output.of(isPmemEnabled));
        }

        /**
         * @param isTpmEnabled (Updatable) Whether Trusted Platform Module (TPM) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isTpmEnabled(@Nullable Output<Boolean> isTpmEnabled) {
            $.isTpmEnabled = isTpmEnabled;
            return this;
        }

        /**
         * @param isTpmEnabled (Updatable) Whether Trusted Platform Module (TPM) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isTpmEnabled(Boolean isTpmEnabled) {
            return isTpmEnabled(Output.of(isTpmEnabled));
        }

        /**
         * @param latencySensitivity (Updatable) Latency sensitivity.
         * 
         * @return builder
         * 
         */
        public Builder latencySensitivity(@Nullable Output<String> latencySensitivity) {
            $.latencySensitivity = latencySensitivity;
            return this;
        }

        /**
         * @param latencySensitivity (Updatable) Latency sensitivity.
         * 
         * @return builder
         * 
         */
        public Builder latencySensitivity(String latencySensitivity) {
            return latencySensitivity(Output.of(latencySensitivity));
        }

        /**
         * @param memoryInMbs (Updatable) Memory size in MBs.
         * 
         * @return builder
         * 
         */
        public Builder memoryInMbs(@Nullable Output<String> memoryInMbs) {
            $.memoryInMbs = memoryInMbs;
            return this;
        }

        /**
         * @param memoryInMbs (Updatable) Memory size in MBs.
         * 
         * @return builder
         * 
         */
        public Builder memoryInMbs(String memoryInMbs) {
            return memoryInMbs(Output.of(memoryInMbs));
        }

        /**
         * @param nics (Updatable) List of network ethernet cards attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder nics(@Nullable Output<List<AssetComputeNicArgs>> nics) {
            $.nics = nics;
            return this;
        }

        /**
         * @param nics (Updatable) List of network ethernet cards attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder nics(List<AssetComputeNicArgs> nics) {
            return nics(Output.of(nics));
        }

        /**
         * @param nics (Updatable) List of network ethernet cards attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder nics(AssetComputeNicArgs... nics) {
            return nics(List.of(nics));
        }

        /**
         * @param nicsCount (Updatable) Number of network ethernet cards.
         * 
         * @return builder
         * 
         */
        public Builder nicsCount(@Nullable Output<Integer> nicsCount) {
            $.nicsCount = nicsCount;
            return this;
        }

        /**
         * @param nicsCount (Updatable) Number of network ethernet cards.
         * 
         * @return builder
         * 
         */
        public Builder nicsCount(Integer nicsCount) {
            return nicsCount(Output.of(nicsCount));
        }

        /**
         * @param nvdimmController (Updatable) The asset&#39;s NVDIMM configuration.
         * 
         * @return builder
         * 
         */
        public Builder nvdimmController(@Nullable Output<AssetComputeNvdimmControllerArgs> nvdimmController) {
            $.nvdimmController = nvdimmController;
            return this;
        }

        /**
         * @param nvdimmController (Updatable) The asset&#39;s NVDIMM configuration.
         * 
         * @return builder
         * 
         */
        public Builder nvdimmController(AssetComputeNvdimmControllerArgs nvdimmController) {
            return nvdimmController(Output.of(nvdimmController));
        }

        /**
         * @param nvdimms (Updatable) The properties of the NVDIMMs attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder nvdimms(@Nullable Output<List<AssetComputeNvdimmArgs>> nvdimms) {
            $.nvdimms = nvdimms;
            return this;
        }

        /**
         * @param nvdimms (Updatable) The properties of the NVDIMMs attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder nvdimms(List<AssetComputeNvdimmArgs> nvdimms) {
            return nvdimms(Output.of(nvdimms));
        }

        /**
         * @param nvdimms (Updatable) The properties of the NVDIMMs attached to a virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder nvdimms(AssetComputeNvdimmArgs... nvdimms) {
            return nvdimms(List.of(nvdimms));
        }

        /**
         * @param operatingSystem (Updatable) Operating system.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(@Nullable Output<String> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        /**
         * @param operatingSystem (Updatable) Operating system.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(String operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        /**
         * @param operatingSystemVersion (Updatable) Operating system version.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemVersion(@Nullable Output<String> operatingSystemVersion) {
            $.operatingSystemVersion = operatingSystemVersion;
            return this;
        }

        /**
         * @param operatingSystemVersion (Updatable) Operating system version.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystemVersion(String operatingSystemVersion) {
            return operatingSystemVersion(Output.of(operatingSystemVersion));
        }

        /**
         * @param pmemInMbs (Updatable) Pmem size in MBs.
         * 
         * @return builder
         * 
         */
        public Builder pmemInMbs(@Nullable Output<String> pmemInMbs) {
            $.pmemInMbs = pmemInMbs;
            return this;
        }

        /**
         * @param pmemInMbs (Updatable) Pmem size in MBs.
         * 
         * @return builder
         * 
         */
        public Builder pmemInMbs(String pmemInMbs) {
            return pmemInMbs(Output.of(pmemInMbs));
        }

        /**
         * @param powerState (Updatable) The current power state of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder powerState(@Nullable Output<String> powerState) {
            $.powerState = powerState;
            return this;
        }

        /**
         * @param powerState (Updatable) The current power state of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder powerState(String powerState) {
            return powerState(Output.of(powerState));
        }

        /**
         * @param primaryIp (Updatable) Primary IP address of the compute instance.
         * 
         * @return builder
         * 
         */
        public Builder primaryIp(@Nullable Output<String> primaryIp) {
            $.primaryIp = primaryIp;
            return this;
        }

        /**
         * @param primaryIp (Updatable) Primary IP address of the compute instance.
         * 
         * @return builder
         * 
         */
        public Builder primaryIp(String primaryIp) {
            return primaryIp(Output.of(primaryIp));
        }

        /**
         * @param scsiController (Updatable) The assets SCSI controller.
         * 
         * @return builder
         * 
         */
        public Builder scsiController(@Nullable Output<AssetComputeScsiControllerArgs> scsiController) {
            $.scsiController = scsiController;
            return this;
        }

        /**
         * @param scsiController (Updatable) The assets SCSI controller.
         * 
         * @return builder
         * 
         */
        public Builder scsiController(AssetComputeScsiControllerArgs scsiController) {
            return scsiController(Output.of(scsiController));
        }

        /**
         * @param storageProvisionedInMbs (Updatable) Provision storage size in MBs.
         * 
         * @return builder
         * 
         */
        public Builder storageProvisionedInMbs(@Nullable Output<String> storageProvisionedInMbs) {
            $.storageProvisionedInMbs = storageProvisionedInMbs;
            return this;
        }

        /**
         * @param storageProvisionedInMbs (Updatable) Provision storage size in MBs.
         * 
         * @return builder
         * 
         */
        public Builder storageProvisionedInMbs(String storageProvisionedInMbs) {
            return storageProvisionedInMbs(Output.of(storageProvisionedInMbs));
        }

        /**
         * @param threadsPerCoreCount (Updatable) Number of threads per core.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCoreCount(@Nullable Output<Integer> threadsPerCoreCount) {
            $.threadsPerCoreCount = threadsPerCoreCount;
            return this;
        }

        /**
         * @param threadsPerCoreCount (Updatable) Number of threads per core.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCoreCount(Integer threadsPerCoreCount) {
            return threadsPerCoreCount(Output.of(threadsPerCoreCount));
        }

        public AssetComputeArgs build() {
            return $;
        }
    }

}
