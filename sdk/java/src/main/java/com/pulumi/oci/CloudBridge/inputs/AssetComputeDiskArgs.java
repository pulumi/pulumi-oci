// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssetComputeDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssetComputeDiskArgs Empty = new AssetComputeDiskArgs();

    /**
     * (Updatable) Order of boot volumes.
     * 
     */
    @Import(name="bootOrder")
    private @Nullable Output<Integer> bootOrder;

    /**
     * @return (Updatable) Order of boot volumes.
     * 
     */
    public Optional<Output<Integer>> bootOrder() {
        return Optional.ofNullable(this.bootOrder);
    }

    /**
     * (Updatable) Location of the boot/data volume.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return (Updatable) Location of the boot/data volume.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * (Updatable) The tag name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) The tag name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The disk persistent mode.
     * 
     */
    @Import(name="persistentMode")
    private @Nullable Output<String> persistentMode;

    /**
     * @return (Updatable) The disk persistent mode.
     * 
     */
    public Optional<Output<String>> persistentMode() {
        return Optional.ofNullable(this.persistentMode);
    }

    /**
     * (Updatable) The size of the volume in MBs.
     * 
     */
    @Import(name="sizeInMbs")
    private @Nullable Output<String> sizeInMbs;

    /**
     * @return (Updatable) The size of the volume in MBs.
     * 
     */
    public Optional<Output<String>> sizeInMbs() {
        return Optional.ofNullable(this.sizeInMbs);
    }

    /**
     * (Updatable) Disk UUID for the virtual disk, if available.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return (Updatable) Disk UUID for the virtual disk, if available.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * (Updatable) Disk UUID LUN for the virtual disk, if available.
     * 
     */
    @Import(name="uuidLun")
    private @Nullable Output<String> uuidLun;

    /**
     * @return (Updatable) Disk UUID LUN for the virtual disk, if available.
     * 
     */
    public Optional<Output<String>> uuidLun() {
        return Optional.ofNullable(this.uuidLun);
    }

    private AssetComputeDiskArgs() {}

    private AssetComputeDiskArgs(AssetComputeDiskArgs $) {
        this.bootOrder = $.bootOrder;
        this.location = $.location;
        this.name = $.name;
        this.persistentMode = $.persistentMode;
        this.sizeInMbs = $.sizeInMbs;
        this.uuid = $.uuid;
        this.uuidLun = $.uuidLun;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetComputeDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetComputeDiskArgs $;

        public Builder() {
            $ = new AssetComputeDiskArgs();
        }

        public Builder(AssetComputeDiskArgs defaults) {
            $ = new AssetComputeDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootOrder (Updatable) Order of boot volumes.
         * 
         * @return builder
         * 
         */
        public Builder bootOrder(@Nullable Output<Integer> bootOrder) {
            $.bootOrder = bootOrder;
            return this;
        }

        /**
         * @param bootOrder (Updatable) Order of boot volumes.
         * 
         * @return builder
         * 
         */
        public Builder bootOrder(Integer bootOrder) {
            return bootOrder(Output.of(bootOrder));
        }

        /**
         * @param location (Updatable) Location of the boot/data volume.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location (Updatable) Location of the boot/data volume.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name (Updatable) The tag name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) The tag name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param persistentMode (Updatable) The disk persistent mode.
         * 
         * @return builder
         * 
         */
        public Builder persistentMode(@Nullable Output<String> persistentMode) {
            $.persistentMode = persistentMode;
            return this;
        }

        /**
         * @param persistentMode (Updatable) The disk persistent mode.
         * 
         * @return builder
         * 
         */
        public Builder persistentMode(String persistentMode) {
            return persistentMode(Output.of(persistentMode));
        }

        /**
         * @param sizeInMbs (Updatable) The size of the volume in MBs.
         * 
         * @return builder
         * 
         */
        public Builder sizeInMbs(@Nullable Output<String> sizeInMbs) {
            $.sizeInMbs = sizeInMbs;
            return this;
        }

        /**
         * @param sizeInMbs (Updatable) The size of the volume in MBs.
         * 
         * @return builder
         * 
         */
        public Builder sizeInMbs(String sizeInMbs) {
            return sizeInMbs(Output.of(sizeInMbs));
        }

        /**
         * @param uuid (Updatable) Disk UUID for the virtual disk, if available.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid (Updatable) Disk UUID for the virtual disk, if available.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param uuidLun (Updatable) Disk UUID LUN for the virtual disk, if available.
         * 
         * @return builder
         * 
         */
        public Builder uuidLun(@Nullable Output<String> uuidLun) {
            $.uuidLun = uuidLun;
            return this;
        }

        /**
         * @param uuidLun (Updatable) Disk UUID LUN for the virtual disk, if available.
         * 
         * @return builder
         * 
         */
        public Builder uuidLun(String uuidLun) {
            return uuidLun(Output.of(uuidLun));
        }

        public AssetComputeDiskArgs build() {
            return $;
        }
    }

}
