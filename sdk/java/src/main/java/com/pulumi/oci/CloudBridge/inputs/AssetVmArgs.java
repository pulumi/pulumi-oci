// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssetVmArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssetVmArgs Empty = new AssetVmArgs();

    /**
     * (Updatable) Host name/IP address of VM on which the host is running.
     * 
     */
    @Import(name="hypervisorHost")
    private @Nullable Output<String> hypervisorHost;

    /**
     * @return (Updatable) Host name/IP address of VM on which the host is running.
     * 
     */
    public Optional<Output<String>> hypervisorHost() {
        return Optional.ofNullable(this.hypervisorHost);
    }

    /**
     * (Updatable) Hypervisor vendor.
     * 
     */
    @Import(name="hypervisorVendor")
    private @Nullable Output<String> hypervisorVendor;

    /**
     * @return (Updatable) Hypervisor vendor.
     * 
     */
    public Optional<Output<String>> hypervisorVendor() {
        return Optional.ofNullable(this.hypervisorVendor);
    }

    /**
     * (Updatable) Hypervisor version.
     * 
     */
    @Import(name="hypervisorVersion")
    private @Nullable Output<String> hypervisorVersion;

    /**
     * @return (Updatable) Hypervisor version.
     * 
     */
    public Optional<Output<String>> hypervisorVersion() {
        return Optional.ofNullable(this.hypervisorVersion);
    }

    private AssetVmArgs() {}

    private AssetVmArgs(AssetVmArgs $) {
        this.hypervisorHost = $.hypervisorHost;
        this.hypervisorVendor = $.hypervisorVendor;
        this.hypervisorVersion = $.hypervisorVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetVmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetVmArgs $;

        public Builder() {
            $ = new AssetVmArgs();
        }

        public Builder(AssetVmArgs defaults) {
            $ = new AssetVmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hypervisorHost (Updatable) Host name/IP address of VM on which the host is running.
         * 
         * @return builder
         * 
         */
        public Builder hypervisorHost(@Nullable Output<String> hypervisorHost) {
            $.hypervisorHost = hypervisorHost;
            return this;
        }

        /**
         * @param hypervisorHost (Updatable) Host name/IP address of VM on which the host is running.
         * 
         * @return builder
         * 
         */
        public Builder hypervisorHost(String hypervisorHost) {
            return hypervisorHost(Output.of(hypervisorHost));
        }

        /**
         * @param hypervisorVendor (Updatable) Hypervisor vendor.
         * 
         * @return builder
         * 
         */
        public Builder hypervisorVendor(@Nullable Output<String> hypervisorVendor) {
            $.hypervisorVendor = hypervisorVendor;
            return this;
        }

        /**
         * @param hypervisorVendor (Updatable) Hypervisor vendor.
         * 
         * @return builder
         * 
         */
        public Builder hypervisorVendor(String hypervisorVendor) {
            return hypervisorVendor(Output.of(hypervisorVendor));
        }

        /**
         * @param hypervisorVersion (Updatable) Hypervisor version.
         * 
         * @return builder
         * 
         */
        public Builder hypervisorVersion(@Nullable Output<String> hypervisorVersion) {
            $.hypervisorVersion = hypervisorVersion;
            return this;
        }

        /**
         * @param hypervisorVersion (Updatable) Hypervisor version.
         * 
         * @return builder
         * 
         */
        public Builder hypervisorVersion(String hypervisorVersion) {
            return hypervisorVersion(Output.of(hypervisorVersion));
        }

        public AssetVmArgs build() {
            return $;
        }
    }

}
