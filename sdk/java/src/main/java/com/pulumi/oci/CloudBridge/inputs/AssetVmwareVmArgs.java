// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudBridge.inputs.AssetVmwareVmCustomerTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssetVmwareVmArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssetVmwareVmArgs Empty = new AssetVmwareVmArgs();

    /**
     * (Updatable) Cluster name.
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    /**
     * @return (Updatable) Cluster name.
     * 
     */
    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * (Updatable) Customer fields.
     * 
     */
    @Import(name="customerFields")
    private @Nullable Output<List<String>> customerFields;

    /**
     * @return (Updatable) Customer fields.
     * 
     */
    public Optional<Output<List<String>>> customerFields() {
        return Optional.ofNullable(this.customerFields);
    }

    /**
     * (Updatable) Customer defined tags.
     * 
     */
    @Import(name="customerTags")
    private @Nullable Output<List<AssetVmwareVmCustomerTagArgs>> customerTags;

    /**
     * @return (Updatable) Customer defined tags.
     * 
     */
    public Optional<Output<List<AssetVmwareVmCustomerTagArgs>>> customerTags() {
        return Optional.ofNullable(this.customerTags);
    }

    /**
     * (Updatable) Fault tolerance bandwidth.
     * 
     */
    @Import(name="faultToleranceBandwidth")
    private @Nullable Output<Integer> faultToleranceBandwidth;

    /**
     * @return (Updatable) Fault tolerance bandwidth.
     * 
     */
    public Optional<Output<Integer>> faultToleranceBandwidth() {
        return Optional.ofNullable(this.faultToleranceBandwidth);
    }

    /**
     * (Updatable) Fault tolerance to secondary latency.
     * 
     */
    @Import(name="faultToleranceSecondaryLatency")
    private @Nullable Output<Integer> faultToleranceSecondaryLatency;

    /**
     * @return (Updatable) Fault tolerance to secondary latency.
     * 
     */
    public Optional<Output<Integer>> faultToleranceSecondaryLatency() {
        return Optional.ofNullable(this.faultToleranceSecondaryLatency);
    }

    /**
     * (Updatable) Fault tolerance state.
     * 
     */
    @Import(name="faultToleranceState")
    private @Nullable Output<String> faultToleranceState;

    /**
     * @return (Updatable) Fault tolerance state.
     * 
     */
    public Optional<Output<String>> faultToleranceState() {
        return Optional.ofNullable(this.faultToleranceState);
    }

    /**
     * (Updatable) vCenter-specific identifier of the virtual machine.
     * 
     */
    @Import(name="instanceUuid")
    private @Nullable Output<String> instanceUuid;

    /**
     * @return (Updatable) vCenter-specific identifier of the virtual machine.
     * 
     */
    public Optional<Output<String>> instanceUuid() {
        return Optional.ofNullable(this.instanceUuid);
    }

    /**
     * (Updatable) Indicates that change tracking is supported for virtual disks of this virtual machine. However, even if change tracking is supported, it might not be available for all disks of the virtual machine.
     * 
     */
    @Import(name="isDisksCbtEnabled")
    private @Nullable Output<Boolean> isDisksCbtEnabled;

    /**
     * @return (Updatable) Indicates that change tracking is supported for virtual disks of this virtual machine. However, even if change tracking is supported, it might not be available for all disks of the virtual machine.
     * 
     */
    public Optional<Output<Boolean>> isDisksCbtEnabled() {
        return Optional.ofNullable(this.isDisksCbtEnabled);
    }

    /**
     * (Updatable) Whether changed block tracking for this VM&#39;s disk is active.
     * 
     */
    @Import(name="isDisksUuidEnabled")
    private @Nullable Output<Boolean> isDisksUuidEnabled;

    /**
     * @return (Updatable) Whether changed block tracking for this VM&#39;s disk is active.
     * 
     */
    public Optional<Output<Boolean>> isDisksUuidEnabled() {
        return Optional.ofNullable(this.isDisksUuidEnabled);
    }

    /**
     * (Updatable) Path directory of the asset.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return (Updatable) Path directory of the asset.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * (Updatable) VMware tools status.
     * 
     */
    @Import(name="vmwareToolsStatus")
    private @Nullable Output<String> vmwareToolsStatus;

    /**
     * @return (Updatable) VMware tools status.
     * 
     */
    public Optional<Output<String>> vmwareToolsStatus() {
        return Optional.ofNullable(this.vmwareToolsStatus);
    }

    private AssetVmwareVmArgs() {}

    private AssetVmwareVmArgs(AssetVmwareVmArgs $) {
        this.cluster = $.cluster;
        this.customerFields = $.customerFields;
        this.customerTags = $.customerTags;
        this.faultToleranceBandwidth = $.faultToleranceBandwidth;
        this.faultToleranceSecondaryLatency = $.faultToleranceSecondaryLatency;
        this.faultToleranceState = $.faultToleranceState;
        this.instanceUuid = $.instanceUuid;
        this.isDisksCbtEnabled = $.isDisksCbtEnabled;
        this.isDisksUuidEnabled = $.isDisksUuidEnabled;
        this.path = $.path;
        this.vmwareToolsStatus = $.vmwareToolsStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetVmwareVmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetVmwareVmArgs $;

        public Builder() {
            $ = new AssetVmwareVmArgs();
        }

        public Builder(AssetVmwareVmArgs defaults) {
            $ = new AssetVmwareVmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster (Updatable) Cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster (Updatable) Cluster name.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param customerFields (Updatable) Customer fields.
         * 
         * @return builder
         * 
         */
        public Builder customerFields(@Nullable Output<List<String>> customerFields) {
            $.customerFields = customerFields;
            return this;
        }

        /**
         * @param customerFields (Updatable) Customer fields.
         * 
         * @return builder
         * 
         */
        public Builder customerFields(List<String> customerFields) {
            return customerFields(Output.of(customerFields));
        }

        /**
         * @param customerFields (Updatable) Customer fields.
         * 
         * @return builder
         * 
         */
        public Builder customerFields(String... customerFields) {
            return customerFields(List.of(customerFields));
        }

        /**
         * @param customerTags (Updatable) Customer defined tags.
         * 
         * @return builder
         * 
         */
        public Builder customerTags(@Nullable Output<List<AssetVmwareVmCustomerTagArgs>> customerTags) {
            $.customerTags = customerTags;
            return this;
        }

        /**
         * @param customerTags (Updatable) Customer defined tags.
         * 
         * @return builder
         * 
         */
        public Builder customerTags(List<AssetVmwareVmCustomerTagArgs> customerTags) {
            return customerTags(Output.of(customerTags));
        }

        /**
         * @param customerTags (Updatable) Customer defined tags.
         * 
         * @return builder
         * 
         */
        public Builder customerTags(AssetVmwareVmCustomerTagArgs... customerTags) {
            return customerTags(List.of(customerTags));
        }

        /**
         * @param faultToleranceBandwidth (Updatable) Fault tolerance bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder faultToleranceBandwidth(@Nullable Output<Integer> faultToleranceBandwidth) {
            $.faultToleranceBandwidth = faultToleranceBandwidth;
            return this;
        }

        /**
         * @param faultToleranceBandwidth (Updatable) Fault tolerance bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder faultToleranceBandwidth(Integer faultToleranceBandwidth) {
            return faultToleranceBandwidth(Output.of(faultToleranceBandwidth));
        }

        /**
         * @param faultToleranceSecondaryLatency (Updatable) Fault tolerance to secondary latency.
         * 
         * @return builder
         * 
         */
        public Builder faultToleranceSecondaryLatency(@Nullable Output<Integer> faultToleranceSecondaryLatency) {
            $.faultToleranceSecondaryLatency = faultToleranceSecondaryLatency;
            return this;
        }

        /**
         * @param faultToleranceSecondaryLatency (Updatable) Fault tolerance to secondary latency.
         * 
         * @return builder
         * 
         */
        public Builder faultToleranceSecondaryLatency(Integer faultToleranceSecondaryLatency) {
            return faultToleranceSecondaryLatency(Output.of(faultToleranceSecondaryLatency));
        }

        /**
         * @param faultToleranceState (Updatable) Fault tolerance state.
         * 
         * @return builder
         * 
         */
        public Builder faultToleranceState(@Nullable Output<String> faultToleranceState) {
            $.faultToleranceState = faultToleranceState;
            return this;
        }

        /**
         * @param faultToleranceState (Updatable) Fault tolerance state.
         * 
         * @return builder
         * 
         */
        public Builder faultToleranceState(String faultToleranceState) {
            return faultToleranceState(Output.of(faultToleranceState));
        }

        /**
         * @param instanceUuid (Updatable) vCenter-specific identifier of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder instanceUuid(@Nullable Output<String> instanceUuid) {
            $.instanceUuid = instanceUuid;
            return this;
        }

        /**
         * @param instanceUuid (Updatable) vCenter-specific identifier of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder instanceUuid(String instanceUuid) {
            return instanceUuid(Output.of(instanceUuid));
        }

        /**
         * @param isDisksCbtEnabled (Updatable) Indicates that change tracking is supported for virtual disks of this virtual machine. However, even if change tracking is supported, it might not be available for all disks of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder isDisksCbtEnabled(@Nullable Output<Boolean> isDisksCbtEnabled) {
            $.isDisksCbtEnabled = isDisksCbtEnabled;
            return this;
        }

        /**
         * @param isDisksCbtEnabled (Updatable) Indicates that change tracking is supported for virtual disks of this virtual machine. However, even if change tracking is supported, it might not be available for all disks of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder isDisksCbtEnabled(Boolean isDisksCbtEnabled) {
            return isDisksCbtEnabled(Output.of(isDisksCbtEnabled));
        }

        /**
         * @param isDisksUuidEnabled (Updatable) Whether changed block tracking for this VM&#39;s disk is active.
         * 
         * @return builder
         * 
         */
        public Builder isDisksUuidEnabled(@Nullable Output<Boolean> isDisksUuidEnabled) {
            $.isDisksUuidEnabled = isDisksUuidEnabled;
            return this;
        }

        /**
         * @param isDisksUuidEnabled (Updatable) Whether changed block tracking for this VM&#39;s disk is active.
         * 
         * @return builder
         * 
         */
        public Builder isDisksUuidEnabled(Boolean isDisksUuidEnabled) {
            return isDisksUuidEnabled(Output.of(isDisksUuidEnabled));
        }

        /**
         * @param path (Updatable) Path directory of the asset.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (Updatable) Path directory of the asset.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param vmwareToolsStatus (Updatable) VMware tools status.
         * 
         * @return builder
         * 
         */
        public Builder vmwareToolsStatus(@Nullable Output<String> vmwareToolsStatus) {
            $.vmwareToolsStatus = vmwareToolsStatus;
            return this;
        }

        /**
         * @param vmwareToolsStatus (Updatable) VMware tools status.
         * 
         * @return builder
         * 
         */
        public Builder vmwareToolsStatus(String vmwareToolsStatus) {
            return vmwareToolsStatus(Output.of(vmwareToolsStatus));
        }

        public AssetVmwareVmArgs build() {
            return $;
        }
    }

}
