// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudBridge.inputs.GetAssetsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAssetsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAssetsArgs Empty = new GetAssetsArgs();

    /**
     * Unique asset identifier.
     * 
     */
    @Import(name="assetId")
    private @Nullable Output<String> assetId;

    /**
     * @return Unique asset identifier.
     * 
     */
    public Optional<Output<String>> assetId() {
        return Optional.ofNullable(this.assetId);
    }

    /**
     * The type of asset.
     * 
     */
    @Import(name="assetType")
    private @Nullable Output<String> assetType;

    /**
     * @return The type of asset.
     * 
     */
    public Optional<Output<String>> assetType() {
        return Optional.ofNullable(this.assetType);
    }

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * External asset key.
     * 
     */
    @Import(name="externalAssetKey")
    private @Nullable Output<String> externalAssetKey;

    /**
     * @return External asset key.
     * 
     */
    public Optional<Output<String>> externalAssetKey() {
        return Optional.ofNullable(this.externalAssetKey);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetAssetsFilterArgs>> filters;

    public Optional<Output<List<GetAssetsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique Inventory identifier.
     * 
     */
    @Import(name="inventoryId")
    private @Nullable Output<String> inventoryId;

    /**
     * @return Unique Inventory identifier.
     * 
     */
    public Optional<Output<String>> inventoryId() {
        return Optional.ofNullable(this.inventoryId);
    }

    /**
     * Source key from where the assets originate.
     * 
     */
    @Import(name="sourceKey")
    private @Nullable Output<String> sourceKey;

    /**
     * @return Source key from where the assets originate.
     * 
     */
    public Optional<Output<String>> sourceKey() {
        return Optional.ofNullable(this.sourceKey);
    }

    /**
     * A filter to return only assets whose lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only assets whose lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetAssetsArgs() {}

    private GetAssetsArgs(GetAssetsArgs $) {
        this.assetId = $.assetId;
        this.assetType = $.assetType;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.externalAssetKey = $.externalAssetKey;
        this.filters = $.filters;
        this.inventoryId = $.inventoryId;
        this.sourceKey = $.sourceKey;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAssetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAssetsArgs $;

        public Builder() {
            $ = new GetAssetsArgs();
        }

        public Builder(GetAssetsArgs defaults) {
            $ = new GetAssetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetId Unique asset identifier.
         * 
         * @return builder
         * 
         */
        public Builder assetId(@Nullable Output<String> assetId) {
            $.assetId = assetId;
            return this;
        }

        /**
         * @param assetId Unique asset identifier.
         * 
         * @return builder
         * 
         */
        public Builder assetId(String assetId) {
            return assetId(Output.of(assetId));
        }

        /**
         * @param assetType The type of asset.
         * 
         * @return builder
         * 
         */
        public Builder assetType(@Nullable Output<String> assetType) {
            $.assetType = assetType;
            return this;
        }

        /**
         * @param assetType The type of asset.
         * 
         * @return builder
         * 
         */
        public Builder assetType(String assetType) {
            return assetType(Output.of(assetType));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param externalAssetKey External asset key.
         * 
         * @return builder
         * 
         */
        public Builder externalAssetKey(@Nullable Output<String> externalAssetKey) {
            $.externalAssetKey = externalAssetKey;
            return this;
        }

        /**
         * @param externalAssetKey External asset key.
         * 
         * @return builder
         * 
         */
        public Builder externalAssetKey(String externalAssetKey) {
            return externalAssetKey(Output.of(externalAssetKey));
        }

        public Builder filters(@Nullable Output<List<GetAssetsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetAssetsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetAssetsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param inventoryId Unique Inventory identifier.
         * 
         * @return builder
         * 
         */
        public Builder inventoryId(@Nullable Output<String> inventoryId) {
            $.inventoryId = inventoryId;
            return this;
        }

        /**
         * @param inventoryId Unique Inventory identifier.
         * 
         * @return builder
         * 
         */
        public Builder inventoryId(String inventoryId) {
            return inventoryId(Output.of(inventoryId));
        }

        /**
         * @param sourceKey Source key from where the assets originate.
         * 
         * @return builder
         * 
         */
        public Builder sourceKey(@Nullable Output<String> sourceKey) {
            $.sourceKey = sourceKey;
            return this;
        }

        /**
         * @param sourceKey Source key from where the assets originate.
         * 
         * @return builder
         * 
         */
        public Builder sourceKey(String sourceKey) {
            return sourceKey(Output.of(sourceKey));
        }

        /**
         * @param state A filter to return only assets whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only assets whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetAssetsArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
