// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudBridge.inputs.GetAssetsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAssetsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAssetsPlainArgs Empty = new GetAssetsPlainArgs();

    /**
     * Unique asset identifier.
     * 
     */
    @Import(name="assetId")
    private @Nullable String assetId;

    /**
     * @return Unique asset identifier.
     * 
     */
    public Optional<String> assetId() {
        return Optional.ofNullable(this.assetId);
    }

    /**
     * The type of asset.
     * 
     */
    @Import(name="assetType")
    private @Nullable String assetType;

    /**
     * @return The type of asset.
     * 
     */
    public Optional<String> assetType() {
        return Optional.ofNullable(this.assetType);
    }

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * External asset key.
     * 
     */
    @Import(name="externalAssetKey")
    private @Nullable String externalAssetKey;

    /**
     * @return External asset key.
     * 
     */
    public Optional<String> externalAssetKey() {
        return Optional.ofNullable(this.externalAssetKey);
    }

    @Import(name="filters")
    private @Nullable List<GetAssetsFilter> filters;

    public Optional<List<GetAssetsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique Inventory identifier.
     * 
     */
    @Import(name="inventoryId")
    private @Nullable String inventoryId;

    /**
     * @return Unique Inventory identifier.
     * 
     */
    public Optional<String> inventoryId() {
        return Optional.ofNullable(this.inventoryId);
    }

    /**
     * Source key from where the assets originate.
     * 
     */
    @Import(name="sourceKey")
    private @Nullable String sourceKey;

    /**
     * @return Source key from where the assets originate.
     * 
     */
    public Optional<String> sourceKey() {
        return Optional.ofNullable(this.sourceKey);
    }

    /**
     * A filter to return only assets whose lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only assets whose lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetAssetsPlainArgs() {}

    private GetAssetsPlainArgs(GetAssetsPlainArgs $) {
        this.assetId = $.assetId;
        this.assetType = $.assetType;
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.externalAssetKey = $.externalAssetKey;
        this.filters = $.filters;
        this.inventoryId = $.inventoryId;
        this.sourceKey = $.sourceKey;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAssetsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAssetsPlainArgs $;

        public Builder() {
            $ = new GetAssetsPlainArgs();
        }

        public Builder(GetAssetsPlainArgs defaults) {
            $ = new GetAssetsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetId Unique asset identifier.
         * 
         * @return builder
         * 
         */
        public Builder assetId(@Nullable String assetId) {
            $.assetId = assetId;
            return this;
        }

        /**
         * @param assetType The type of asset.
         * 
         * @return builder
         * 
         */
        public Builder assetType(@Nullable String assetType) {
            $.assetType = assetType;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param externalAssetKey External asset key.
         * 
         * @return builder
         * 
         */
        public Builder externalAssetKey(@Nullable String externalAssetKey) {
            $.externalAssetKey = externalAssetKey;
            return this;
        }

        public Builder filters(@Nullable List<GetAssetsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetAssetsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param inventoryId Unique Inventory identifier.
         * 
         * @return builder
         * 
         */
        public Builder inventoryId(@Nullable String inventoryId) {
            $.inventoryId = inventoryId;
            return this;
        }

        /**
         * @param sourceKey Source key from where the assets originate.
         * 
         * @return builder
         * 
         */
        public Builder sourceKey(@Nullable String sourceKey) {
            $.sourceKey = sourceKey;
            return this;
        }

        /**
         * @param state A filter to return only assets whose lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetAssetsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetAssetsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
