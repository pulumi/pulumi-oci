// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudBridge.outputs.AssetComputeDisk;
import com.pulumi.oci.CloudBridge.outputs.AssetComputeGpuDevice;
import com.pulumi.oci.CloudBridge.outputs.AssetComputeNic;
import com.pulumi.oci.CloudBridge.outputs.AssetComputeNvdimm;
import com.pulumi.oci.CloudBridge.outputs.AssetComputeNvdimmController;
import com.pulumi.oci.CloudBridge.outputs.AssetComputeScsiController;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AssetCompute {
    /**
     * @return (Updatable) Number of connected networks.
     * 
     */
    private @Nullable Integer connectedNetworks;
    /**
     * @return (Updatable) Number of CPUs.
     * 
     */
    private @Nullable Integer coresCount;
    /**
     * @return (Updatable) CPU model name.
     * 
     */
    private @Nullable String cpuModel;
    /**
     * @return (Updatable) Information about the asset.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    private @Nullable List<AssetComputeDisk> disks;
    /**
     * @return (Updatable) Number of disks.
     * 
     */
    private @Nullable Integer disksCount;
    /**
     * @return (Updatable) Fully Qualified DNS Name.
     * 
     */
    private @Nullable String dnsName;
    /**
     * @return (Updatable) Information about firmware type for this virtual machine.
     * 
     */
    private @Nullable String firmware;
    /**
     * @return (Updatable) List of GPU devices attached to a virtual machine.
     * 
     */
    private @Nullable List<AssetComputeGpuDevice> gpuDevices;
    /**
     * @return (Updatable) Number of GPU devices.
     * 
     */
    private @Nullable Integer gpuDevicesCount;
    /**
     * @return (Updatable) Guest state.
     * 
     */
    private @Nullable String guestState;
    /**
     * @return (Updatable) Hardware version.
     * 
     */
    private @Nullable String hardwareVersion;
    /**
     * @return (Updatable) Host name of the VM.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return (Updatable) Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    private @Nullable Boolean isPmemEnabled;
    /**
     * @return (Updatable) Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    private @Nullable Boolean isTpmEnabled;
    /**
     * @return (Updatable) Latency sensitivity.
     * 
     */
    private @Nullable String latencySensitivity;
    /**
     * @return (Updatable) Memory size in MBs.
     * 
     */
    private @Nullable String memoryInMbs;
    /**
     * @return (Updatable) List of network ethernet cards attached to a virtual machine.
     * 
     */
    private @Nullable List<AssetComputeNic> nics;
    /**
     * @return (Updatable) Number of network ethernet cards.
     * 
     */
    private @Nullable Integer nicsCount;
    /**
     * @return (Updatable) The asset&#39;s NVDIMM configuration.
     * 
     */
    private @Nullable AssetComputeNvdimmController nvdimmController;
    /**
     * @return (Updatable) The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    private @Nullable List<AssetComputeNvdimm> nvdimms;
    /**
     * @return (Updatable) Operating system.
     * 
     */
    private @Nullable String operatingSystem;
    /**
     * @return (Updatable) Operating system version.
     * 
     */
    private @Nullable String operatingSystemVersion;
    /**
     * @return (Updatable) Pmem size in MBs.
     * 
     */
    private @Nullable String pmemInMbs;
    /**
     * @return (Updatable) The current power state of the virtual machine.
     * 
     */
    private @Nullable String powerState;
    /**
     * @return (Updatable) Primary IP address of the compute instance.
     * 
     */
    private @Nullable String primaryIp;
    /**
     * @return (Updatable) The assets SCSI controller.
     * 
     */
    private @Nullable AssetComputeScsiController scsiController;
    /**
     * @return (Updatable) Provision storage size in MBs.
     * 
     */
    private @Nullable String storageProvisionedInMbs;
    /**
     * @return (Updatable) Number of threads per core.
     * 
     */
    private @Nullable Integer threadsPerCoreCount;

    private AssetCompute() {}
    /**
     * @return (Updatable) Number of connected networks.
     * 
     */
    public Optional<Integer> connectedNetworks() {
        return Optional.ofNullable(this.connectedNetworks);
    }
    /**
     * @return (Updatable) Number of CPUs.
     * 
     */
    public Optional<Integer> coresCount() {
        return Optional.ofNullable(this.coresCount);
    }
    /**
     * @return (Updatable) CPU model name.
     * 
     */
    public Optional<String> cpuModel() {
        return Optional.ofNullable(this.cpuModel);
    }
    /**
     * @return (Updatable) Information about the asset.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    public List<AssetComputeDisk> disks() {
        return this.disks == null ? List.of() : this.disks;
    }
    /**
     * @return (Updatable) Number of disks.
     * 
     */
    public Optional<Integer> disksCount() {
        return Optional.ofNullable(this.disksCount);
    }
    /**
     * @return (Updatable) Fully Qualified DNS Name.
     * 
     */
    public Optional<String> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }
    /**
     * @return (Updatable) Information about firmware type for this virtual machine.
     * 
     */
    public Optional<String> firmware() {
        return Optional.ofNullable(this.firmware);
    }
    /**
     * @return (Updatable) List of GPU devices attached to a virtual machine.
     * 
     */
    public List<AssetComputeGpuDevice> gpuDevices() {
        return this.gpuDevices == null ? List.of() : this.gpuDevices;
    }
    /**
     * @return (Updatable) Number of GPU devices.
     * 
     */
    public Optional<Integer> gpuDevicesCount() {
        return Optional.ofNullable(this.gpuDevicesCount);
    }
    /**
     * @return (Updatable) Guest state.
     * 
     */
    public Optional<String> guestState() {
        return Optional.ofNullable(this.guestState);
    }
    /**
     * @return (Updatable) Hardware version.
     * 
     */
    public Optional<String> hardwareVersion() {
        return Optional.ofNullable(this.hardwareVersion);
    }
    /**
     * @return (Updatable) Host name of the VM.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return (Updatable) Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    public Optional<Boolean> isPmemEnabled() {
        return Optional.ofNullable(this.isPmemEnabled);
    }
    /**
     * @return (Updatable) Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    public Optional<Boolean> isTpmEnabled() {
        return Optional.ofNullable(this.isTpmEnabled);
    }
    /**
     * @return (Updatable) Latency sensitivity.
     * 
     */
    public Optional<String> latencySensitivity() {
        return Optional.ofNullable(this.latencySensitivity);
    }
    /**
     * @return (Updatable) Memory size in MBs.
     * 
     */
    public Optional<String> memoryInMbs() {
        return Optional.ofNullable(this.memoryInMbs);
    }
    /**
     * @return (Updatable) List of network ethernet cards attached to a virtual machine.
     * 
     */
    public List<AssetComputeNic> nics() {
        return this.nics == null ? List.of() : this.nics;
    }
    /**
     * @return (Updatable) Number of network ethernet cards.
     * 
     */
    public Optional<Integer> nicsCount() {
        return Optional.ofNullable(this.nicsCount);
    }
    /**
     * @return (Updatable) The asset&#39;s NVDIMM configuration.
     * 
     */
    public Optional<AssetComputeNvdimmController> nvdimmController() {
        return Optional.ofNullable(this.nvdimmController);
    }
    /**
     * @return (Updatable) The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    public List<AssetComputeNvdimm> nvdimms() {
        return this.nvdimms == null ? List.of() : this.nvdimms;
    }
    /**
     * @return (Updatable) Operating system.
     * 
     */
    public Optional<String> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }
    /**
     * @return (Updatable) Operating system version.
     * 
     */
    public Optional<String> operatingSystemVersion() {
        return Optional.ofNullable(this.operatingSystemVersion);
    }
    /**
     * @return (Updatable) Pmem size in MBs.
     * 
     */
    public Optional<String> pmemInMbs() {
        return Optional.ofNullable(this.pmemInMbs);
    }
    /**
     * @return (Updatable) The current power state of the virtual machine.
     * 
     */
    public Optional<String> powerState() {
        return Optional.ofNullable(this.powerState);
    }
    /**
     * @return (Updatable) Primary IP address of the compute instance.
     * 
     */
    public Optional<String> primaryIp() {
        return Optional.ofNullable(this.primaryIp);
    }
    /**
     * @return (Updatable) The assets SCSI controller.
     * 
     */
    public Optional<AssetComputeScsiController> scsiController() {
        return Optional.ofNullable(this.scsiController);
    }
    /**
     * @return (Updatable) Provision storage size in MBs.
     * 
     */
    public Optional<String> storageProvisionedInMbs() {
        return Optional.ofNullable(this.storageProvisionedInMbs);
    }
    /**
     * @return (Updatable) Number of threads per core.
     * 
     */
    public Optional<Integer> threadsPerCoreCount() {
        return Optional.ofNullable(this.threadsPerCoreCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssetCompute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer connectedNetworks;
        private @Nullable Integer coresCount;
        private @Nullable String cpuModel;
        private @Nullable String description;
        private @Nullable List<AssetComputeDisk> disks;
        private @Nullable Integer disksCount;
        private @Nullable String dnsName;
        private @Nullable String firmware;
        private @Nullable List<AssetComputeGpuDevice> gpuDevices;
        private @Nullable Integer gpuDevicesCount;
        private @Nullable String guestState;
        private @Nullable String hardwareVersion;
        private @Nullable String hostName;
        private @Nullable Boolean isPmemEnabled;
        private @Nullable Boolean isTpmEnabled;
        private @Nullable String latencySensitivity;
        private @Nullable String memoryInMbs;
        private @Nullable List<AssetComputeNic> nics;
        private @Nullable Integer nicsCount;
        private @Nullable AssetComputeNvdimmController nvdimmController;
        private @Nullable List<AssetComputeNvdimm> nvdimms;
        private @Nullable String operatingSystem;
        private @Nullable String operatingSystemVersion;
        private @Nullable String pmemInMbs;
        private @Nullable String powerState;
        private @Nullable String primaryIp;
        private @Nullable AssetComputeScsiController scsiController;
        private @Nullable String storageProvisionedInMbs;
        private @Nullable Integer threadsPerCoreCount;
        public Builder() {}
        public Builder(AssetCompute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectedNetworks = defaults.connectedNetworks;
    	      this.coresCount = defaults.coresCount;
    	      this.cpuModel = defaults.cpuModel;
    	      this.description = defaults.description;
    	      this.disks = defaults.disks;
    	      this.disksCount = defaults.disksCount;
    	      this.dnsName = defaults.dnsName;
    	      this.firmware = defaults.firmware;
    	      this.gpuDevices = defaults.gpuDevices;
    	      this.gpuDevicesCount = defaults.gpuDevicesCount;
    	      this.guestState = defaults.guestState;
    	      this.hardwareVersion = defaults.hardwareVersion;
    	      this.hostName = defaults.hostName;
    	      this.isPmemEnabled = defaults.isPmemEnabled;
    	      this.isTpmEnabled = defaults.isTpmEnabled;
    	      this.latencySensitivity = defaults.latencySensitivity;
    	      this.memoryInMbs = defaults.memoryInMbs;
    	      this.nics = defaults.nics;
    	      this.nicsCount = defaults.nicsCount;
    	      this.nvdimmController = defaults.nvdimmController;
    	      this.nvdimms = defaults.nvdimms;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.operatingSystemVersion = defaults.operatingSystemVersion;
    	      this.pmemInMbs = defaults.pmemInMbs;
    	      this.powerState = defaults.powerState;
    	      this.primaryIp = defaults.primaryIp;
    	      this.scsiController = defaults.scsiController;
    	      this.storageProvisionedInMbs = defaults.storageProvisionedInMbs;
    	      this.threadsPerCoreCount = defaults.threadsPerCoreCount;
        }

        @CustomType.Setter
        public Builder connectedNetworks(@Nullable Integer connectedNetworks) {

            this.connectedNetworks = connectedNetworks;
            return this;
        }
        @CustomType.Setter
        public Builder coresCount(@Nullable Integer coresCount) {

            this.coresCount = coresCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuModel(@Nullable String cpuModel) {

            this.cpuModel = cpuModel;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disks(@Nullable List<AssetComputeDisk> disks) {

            this.disks = disks;
            return this;
        }
        public Builder disks(AssetComputeDisk... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder disksCount(@Nullable Integer disksCount) {

            this.disksCount = disksCount;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(@Nullable String dnsName) {

            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder firmware(@Nullable String firmware) {

            this.firmware = firmware;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDevices(@Nullable List<AssetComputeGpuDevice> gpuDevices) {

            this.gpuDevices = gpuDevices;
            return this;
        }
        public Builder gpuDevices(AssetComputeGpuDevice... gpuDevices) {
            return gpuDevices(List.of(gpuDevices));
        }
        @CustomType.Setter
        public Builder gpuDevicesCount(@Nullable Integer gpuDevicesCount) {

            this.gpuDevicesCount = gpuDevicesCount;
            return this;
        }
        @CustomType.Setter
        public Builder guestState(@Nullable String guestState) {

            this.guestState = guestState;
            return this;
        }
        @CustomType.Setter
        public Builder hardwareVersion(@Nullable String hardwareVersion) {

            this.hardwareVersion = hardwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {

            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder isPmemEnabled(@Nullable Boolean isPmemEnabled) {

            this.isPmemEnabled = isPmemEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isTpmEnabled(@Nullable Boolean isTpmEnabled) {

            this.isTpmEnabled = isTpmEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder latencySensitivity(@Nullable String latencySensitivity) {

            this.latencySensitivity = latencySensitivity;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInMbs(@Nullable String memoryInMbs) {

            this.memoryInMbs = memoryInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder nics(@Nullable List<AssetComputeNic> nics) {

            this.nics = nics;
            return this;
        }
        public Builder nics(AssetComputeNic... nics) {
            return nics(List.of(nics));
        }
        @CustomType.Setter
        public Builder nicsCount(@Nullable Integer nicsCount) {

            this.nicsCount = nicsCount;
            return this;
        }
        @CustomType.Setter
        public Builder nvdimmController(@Nullable AssetComputeNvdimmController nvdimmController) {

            this.nvdimmController = nvdimmController;
            return this;
        }
        @CustomType.Setter
        public Builder nvdimms(@Nullable List<AssetComputeNvdimm> nvdimms) {

            this.nvdimms = nvdimms;
            return this;
        }
        public Builder nvdimms(AssetComputeNvdimm... nvdimms) {
            return nvdimms(List.of(nvdimms));
        }
        @CustomType.Setter
        public Builder operatingSystem(@Nullable String operatingSystem) {

            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystemVersion(@Nullable String operatingSystemVersion) {

            this.operatingSystemVersion = operatingSystemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pmemInMbs(@Nullable String pmemInMbs) {

            this.pmemInMbs = pmemInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder powerState(@Nullable String powerState) {

            this.powerState = powerState;
            return this;
        }
        @CustomType.Setter
        public Builder primaryIp(@Nullable String primaryIp) {

            this.primaryIp = primaryIp;
            return this;
        }
        @CustomType.Setter
        public Builder scsiController(@Nullable AssetComputeScsiController scsiController) {

            this.scsiController = scsiController;
            return this;
        }
        @CustomType.Setter
        public Builder storageProvisionedInMbs(@Nullable String storageProvisionedInMbs) {

            this.storageProvisionedInMbs = storageProvisionedInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCoreCount(@Nullable Integer threadsPerCoreCount) {

            this.threadsPerCoreCount = threadsPerCoreCount;
            return this;
        }
        public AssetCompute build() {
            final var _resultValue = new AssetCompute();
            _resultValue.connectedNetworks = connectedNetworks;
            _resultValue.coresCount = coresCount;
            _resultValue.cpuModel = cpuModel;
            _resultValue.description = description;
            _resultValue.disks = disks;
            _resultValue.disksCount = disksCount;
            _resultValue.dnsName = dnsName;
            _resultValue.firmware = firmware;
            _resultValue.gpuDevices = gpuDevices;
            _resultValue.gpuDevicesCount = gpuDevicesCount;
            _resultValue.guestState = guestState;
            _resultValue.hardwareVersion = hardwareVersion;
            _resultValue.hostName = hostName;
            _resultValue.isPmemEnabled = isPmemEnabled;
            _resultValue.isTpmEnabled = isTpmEnabled;
            _resultValue.latencySensitivity = latencySensitivity;
            _resultValue.memoryInMbs = memoryInMbs;
            _resultValue.nics = nics;
            _resultValue.nicsCount = nicsCount;
            _resultValue.nvdimmController = nvdimmController;
            _resultValue.nvdimms = nvdimms;
            _resultValue.operatingSystem = operatingSystem;
            _resultValue.operatingSystemVersion = operatingSystemVersion;
            _resultValue.pmemInMbs = pmemInMbs;
            _resultValue.powerState = powerState;
            _resultValue.primaryIp = primaryIp;
            _resultValue.scsiController = scsiController;
            _resultValue.storageProvisionedInMbs = storageProvisionedInMbs;
            _resultValue.threadsPerCoreCount = threadsPerCoreCount;
            return _resultValue;
        }
    }
}
