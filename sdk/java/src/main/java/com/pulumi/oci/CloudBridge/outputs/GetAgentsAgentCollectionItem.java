// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudBridge.outputs.GetAgentsAgentCollectionItemPluginList;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAgentsAgentCollectionItem {
    /**
     * @return Resource principal public key.
     * 
     */
    private String agentPubKey;
    /**
     * @return Type of the Agent.
     * 
     */
    private String agentType;
    /**
     * @return Agent identifier.
     * 
     */
    private String agentVersion;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return A filter to return only resources that match the given environment ID.
     * 
     */
    private String environmentId;
    /**
     * @return The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace/scope. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The current heartbeat status of the Agent based on its timeLastSyncReceived value.
     * 
     */
    private String heartBeatStatus;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return OS version.
     * 
     */
    private String osVersion;
    /**
     * @return List of plugins associated with the agent.
     * 
     */
    private List<GetAgentsAgentCollectionItemPluginList> pluginLists;
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle cloud infrastructure services. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time when the Agent was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time since epoch for when the public key will expire. An RFC3339 formatted datetime string.
     * 
     */
    private String timeExpireAgentKeyInMs;
    /**
     * @return The time when the last heartbeat of the Agent was noted. An RFC3339 formatted datetime string.
     * 
     */
    private String timeLastSyncReceived;
    /**
     * @return The time when the Agent was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;

    private GetAgentsAgentCollectionItem() {}
    /**
     * @return Resource principal public key.
     * 
     */
    public String agentPubKey() {
        return this.agentPubKey;
    }
    /**
     * @return Type of the Agent.
     * 
     */
    public String agentType() {
        return this.agentType;
    }
    /**
     * @return Agent identifier.
     * 
     */
    public String agentVersion() {
        return this.agentVersion;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A filter to return only resources that match the given environment ID.
     * 
     */
    public String environmentId() {
        return this.environmentId;
    }
    /**
     * @return The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace/scope. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The current heartbeat status of the Agent based on its timeLastSyncReceived value.
     * 
     */
    public String heartBeatStatus() {
        return this.heartBeatStatus;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return OS version.
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return List of plugins associated with the agent.
     * 
     */
    public List<GetAgentsAgentCollectionItemPluginList> pluginLists() {
        return this.pluginLists;
    }
    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The system tags associated with this resource, if any. The system tags are set by Oracle cloud infrastructure services. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{orcl-cloud: {free-tier-retain: true}}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time when the Agent was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time since epoch for when the public key will expire. An RFC3339 formatted datetime string.
     * 
     */
    public String timeExpireAgentKeyInMs() {
        return this.timeExpireAgentKeyInMs;
    }
    /**
     * @return The time when the last heartbeat of the Agent was noted. An RFC3339 formatted datetime string.
     * 
     */
    public String timeLastSyncReceived() {
        return this.timeLastSyncReceived;
    }
    /**
     * @return The time when the Agent was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAgentsAgentCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String agentPubKey;
        private String agentType;
        private String agentVersion;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private String environmentId;
        private Map<String,Object> freeformTags;
        private String heartBeatStatus;
        private String id;
        private String lifecycleDetails;
        private String osVersion;
        private List<GetAgentsAgentCollectionItemPluginList> pluginLists;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeExpireAgentKeyInMs;
        private String timeLastSyncReceived;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetAgentsAgentCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentPubKey = defaults.agentPubKey;
    	      this.agentType = defaults.agentType;
    	      this.agentVersion = defaults.agentVersion;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.environmentId = defaults.environmentId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.heartBeatStatus = defaults.heartBeatStatus;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.osVersion = defaults.osVersion;
    	      this.pluginLists = defaults.pluginLists;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpireAgentKeyInMs = defaults.timeExpireAgentKeyInMs;
    	      this.timeLastSyncReceived = defaults.timeLastSyncReceived;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder agentPubKey(String agentPubKey) {
            if (agentPubKey == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "agentPubKey");
            }
            this.agentPubKey = agentPubKey;
            return this;
        }
        @CustomType.Setter
        public Builder agentType(String agentType) {
            if (agentType == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "agentType");
            }
            this.agentType = agentType;
            return this;
        }
        @CustomType.Setter
        public Builder agentVersion(String agentVersion) {
            if (agentVersion == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "agentVersion");
            }
            this.agentVersion = agentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(String environmentId) {
            if (environmentId == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "environmentId");
            }
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder heartBeatStatus(String heartBeatStatus) {
            if (heartBeatStatus == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "heartBeatStatus");
            }
            this.heartBeatStatus = heartBeatStatus;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pluginLists(List<GetAgentsAgentCollectionItemPluginList> pluginLists) {
            if (pluginLists == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "pluginLists");
            }
            this.pluginLists = pluginLists;
            return this;
        }
        public Builder pluginLists(GetAgentsAgentCollectionItemPluginList... pluginLists) {
            return pluginLists(List.of(pluginLists));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpireAgentKeyInMs(String timeExpireAgentKeyInMs) {
            if (timeExpireAgentKeyInMs == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "timeExpireAgentKeyInMs");
            }
            this.timeExpireAgentKeyInMs = timeExpireAgentKeyInMs;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastSyncReceived(String timeLastSyncReceived) {
            if (timeLastSyncReceived == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "timeLastSyncReceived");
            }
            this.timeLastSyncReceived = timeLastSyncReceived;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetAgentsAgentCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetAgentsAgentCollectionItem build() {
            final var _resultValue = new GetAgentsAgentCollectionItem();
            _resultValue.agentPubKey = agentPubKey;
            _resultValue.agentType = agentType;
            _resultValue.agentVersion = agentVersion;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.environmentId = environmentId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.heartBeatStatus = heartBeatStatus;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.osVersion = osVersion;
            _resultValue.pluginLists = pluginLists;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeExpireAgentKeyInMs = timeExpireAgentKeyInMs;
            _resultValue.timeLastSyncReceived = timeLastSyncReceived;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
