// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudBridge.outputs.GetAssetComputeDisk;
import com.pulumi.oci.CloudBridge.outputs.GetAssetComputeGpuDevice;
import com.pulumi.oci.CloudBridge.outputs.GetAssetComputeNic;
import com.pulumi.oci.CloudBridge.outputs.GetAssetComputeNvdimm;
import com.pulumi.oci.CloudBridge.outputs.GetAssetComputeNvdimmController;
import com.pulumi.oci.CloudBridge.outputs.GetAssetComputeScsiController;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAssetCompute {
    /**
     * @return Number of connected networks.
     * 
     */
    private Integer connectedNetworks;
    /**
     * @return Number of GPU cores.
     * 
     */
    private Integer coresCount;
    /**
     * @return CPU model name.
     * 
     */
    private String cpuModel;
    /**
     * @return The tag description.
     * 
     */
    private String description;
    /**
     * @return Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    private List<GetAssetComputeDisk> disks;
    /**
     * @return Number of disks.
     * 
     */
    private Integer disksCount;
    /**
     * @return Fully Qualified DNS Name.
     * 
     */
    private String dnsName;
    /**
     * @return Information about firmware type for this virtual machine.
     * 
     */
    private String firmware;
    /**
     * @return List of GPU devices attached to a virtual machine.
     * 
     */
    private List<GetAssetComputeGpuDevice> gpuDevices;
    /**
     * @return Number of GPU devices.
     * 
     */
    private Integer gpuDevicesCount;
    /**
     * @return Guest state.
     * 
     */
    private String guestState;
    /**
     * @return Hardware version.
     * 
     */
    private String hardwareVersion;
    /**
     * @return Host name of the VM.
     * 
     */
    private String hostName;
    /**
     * @return Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    private Boolean isPmemEnabled;
    /**
     * @return Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    private Boolean isTpmEnabled;
    /**
     * @return Latency sensitivity.
     * 
     */
    private String latencySensitivity;
    /**
     * @return Memory size in MBs.
     * 
     */
    private String memoryInMbs;
    /**
     * @return List of network ethernet cards attached to a virtual machine.
     * 
     */
    private List<GetAssetComputeNic> nics;
    /**
     * @return Number of network ethernet cards.
     * 
     */
    private Integer nicsCount;
    /**
     * @return The asset&#39;s NVDIMM configuration.
     * 
     */
    private List<GetAssetComputeNvdimmController> nvdimmControllers;
    /**
     * @return The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    private List<GetAssetComputeNvdimm> nvdimms;
    /**
     * @return Operating system.
     * 
     */
    private String operatingSystem;
    /**
     * @return Operating system version.
     * 
     */
    private String operatingSystemVersion;
    /**
     * @return Pmem size in MBs.
     * 
     */
    private String pmemInMbs;
    /**
     * @return The current power state of the virtual machine.
     * 
     */
    private String powerState;
    /**
     * @return Primary IP address of the compute instance.
     * 
     */
    private String primaryIp;
    /**
     * @return The assets SCSI controller.
     * 
     */
    private List<GetAssetComputeScsiController> scsiControllers;
    /**
     * @return Provision storage size in MBs.
     * 
     */
    private String storageProvisionedInMbs;
    /**
     * @return Number of threads per core.
     * 
     */
    private Integer threadsPerCoreCount;

    private GetAssetCompute() {}
    /**
     * @return Number of connected networks.
     * 
     */
    public Integer connectedNetworks() {
        return this.connectedNetworks;
    }
    /**
     * @return Number of GPU cores.
     * 
     */
    public Integer coresCount() {
        return this.coresCount;
    }
    /**
     * @return CPU model name.
     * 
     */
    public String cpuModel() {
        return this.cpuModel;
    }
    /**
     * @return The tag description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    public List<GetAssetComputeDisk> disks() {
        return this.disks;
    }
    /**
     * @return Number of disks.
     * 
     */
    public Integer disksCount() {
        return this.disksCount;
    }
    /**
     * @return Fully Qualified DNS Name.
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    /**
     * @return Information about firmware type for this virtual machine.
     * 
     */
    public String firmware() {
        return this.firmware;
    }
    /**
     * @return List of GPU devices attached to a virtual machine.
     * 
     */
    public List<GetAssetComputeGpuDevice> gpuDevices() {
        return this.gpuDevices;
    }
    /**
     * @return Number of GPU devices.
     * 
     */
    public Integer gpuDevicesCount() {
        return this.gpuDevicesCount;
    }
    /**
     * @return Guest state.
     * 
     */
    public String guestState() {
        return this.guestState;
    }
    /**
     * @return Hardware version.
     * 
     */
    public String hardwareVersion() {
        return this.hardwareVersion;
    }
    /**
     * @return Host name of the VM.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    public Boolean isPmemEnabled() {
        return this.isPmemEnabled;
    }
    /**
     * @return Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    public Boolean isTpmEnabled() {
        return this.isTpmEnabled;
    }
    /**
     * @return Latency sensitivity.
     * 
     */
    public String latencySensitivity() {
        return this.latencySensitivity;
    }
    /**
     * @return Memory size in MBs.
     * 
     */
    public String memoryInMbs() {
        return this.memoryInMbs;
    }
    /**
     * @return List of network ethernet cards attached to a virtual machine.
     * 
     */
    public List<GetAssetComputeNic> nics() {
        return this.nics;
    }
    /**
     * @return Number of network ethernet cards.
     * 
     */
    public Integer nicsCount() {
        return this.nicsCount;
    }
    /**
     * @return The asset&#39;s NVDIMM configuration.
     * 
     */
    public List<GetAssetComputeNvdimmController> nvdimmControllers() {
        return this.nvdimmControllers;
    }
    /**
     * @return The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    public List<GetAssetComputeNvdimm> nvdimms() {
        return this.nvdimms;
    }
    /**
     * @return Operating system.
     * 
     */
    public String operatingSystem() {
        return this.operatingSystem;
    }
    /**
     * @return Operating system version.
     * 
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }
    /**
     * @return Pmem size in MBs.
     * 
     */
    public String pmemInMbs() {
        return this.pmemInMbs;
    }
    /**
     * @return The current power state of the virtual machine.
     * 
     */
    public String powerState() {
        return this.powerState;
    }
    /**
     * @return Primary IP address of the compute instance.
     * 
     */
    public String primaryIp() {
        return this.primaryIp;
    }
    /**
     * @return The assets SCSI controller.
     * 
     */
    public List<GetAssetComputeScsiController> scsiControllers() {
        return this.scsiControllers;
    }
    /**
     * @return Provision storage size in MBs.
     * 
     */
    public String storageProvisionedInMbs() {
        return this.storageProvisionedInMbs;
    }
    /**
     * @return Number of threads per core.
     * 
     */
    public Integer threadsPerCoreCount() {
        return this.threadsPerCoreCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAssetCompute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer connectedNetworks;
        private Integer coresCount;
        private String cpuModel;
        private String description;
        private List<GetAssetComputeDisk> disks;
        private Integer disksCount;
        private String dnsName;
        private String firmware;
        private List<GetAssetComputeGpuDevice> gpuDevices;
        private Integer gpuDevicesCount;
        private String guestState;
        private String hardwareVersion;
        private String hostName;
        private Boolean isPmemEnabled;
        private Boolean isTpmEnabled;
        private String latencySensitivity;
        private String memoryInMbs;
        private List<GetAssetComputeNic> nics;
        private Integer nicsCount;
        private List<GetAssetComputeNvdimmController> nvdimmControllers;
        private List<GetAssetComputeNvdimm> nvdimms;
        private String operatingSystem;
        private String operatingSystemVersion;
        private String pmemInMbs;
        private String powerState;
        private String primaryIp;
        private List<GetAssetComputeScsiController> scsiControllers;
        private String storageProvisionedInMbs;
        private Integer threadsPerCoreCount;
        public Builder() {}
        public Builder(GetAssetCompute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectedNetworks = defaults.connectedNetworks;
    	      this.coresCount = defaults.coresCount;
    	      this.cpuModel = defaults.cpuModel;
    	      this.description = defaults.description;
    	      this.disks = defaults.disks;
    	      this.disksCount = defaults.disksCount;
    	      this.dnsName = defaults.dnsName;
    	      this.firmware = defaults.firmware;
    	      this.gpuDevices = defaults.gpuDevices;
    	      this.gpuDevicesCount = defaults.gpuDevicesCount;
    	      this.guestState = defaults.guestState;
    	      this.hardwareVersion = defaults.hardwareVersion;
    	      this.hostName = defaults.hostName;
    	      this.isPmemEnabled = defaults.isPmemEnabled;
    	      this.isTpmEnabled = defaults.isTpmEnabled;
    	      this.latencySensitivity = defaults.latencySensitivity;
    	      this.memoryInMbs = defaults.memoryInMbs;
    	      this.nics = defaults.nics;
    	      this.nicsCount = defaults.nicsCount;
    	      this.nvdimmControllers = defaults.nvdimmControllers;
    	      this.nvdimms = defaults.nvdimms;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.operatingSystemVersion = defaults.operatingSystemVersion;
    	      this.pmemInMbs = defaults.pmemInMbs;
    	      this.powerState = defaults.powerState;
    	      this.primaryIp = defaults.primaryIp;
    	      this.scsiControllers = defaults.scsiControllers;
    	      this.storageProvisionedInMbs = defaults.storageProvisionedInMbs;
    	      this.threadsPerCoreCount = defaults.threadsPerCoreCount;
        }

        @CustomType.Setter
        public Builder connectedNetworks(Integer connectedNetworks) {
            if (connectedNetworks == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "connectedNetworks");
            }
            this.connectedNetworks = connectedNetworks;
            return this;
        }
        @CustomType.Setter
        public Builder coresCount(Integer coresCount) {
            if (coresCount == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "coresCount");
            }
            this.coresCount = coresCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuModel(String cpuModel) {
            if (cpuModel == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "cpuModel");
            }
            this.cpuModel = cpuModel;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disks(List<GetAssetComputeDisk> disks) {
            if (disks == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "disks");
            }
            this.disks = disks;
            return this;
        }
        public Builder disks(GetAssetComputeDisk... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder disksCount(Integer disksCount) {
            if (disksCount == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "disksCount");
            }
            this.disksCount = disksCount;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            if (dnsName == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "dnsName");
            }
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder firmware(String firmware) {
            if (firmware == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "firmware");
            }
            this.firmware = firmware;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDevices(List<GetAssetComputeGpuDevice> gpuDevices) {
            if (gpuDevices == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "gpuDevices");
            }
            this.gpuDevices = gpuDevices;
            return this;
        }
        public Builder gpuDevices(GetAssetComputeGpuDevice... gpuDevices) {
            return gpuDevices(List.of(gpuDevices));
        }
        @CustomType.Setter
        public Builder gpuDevicesCount(Integer gpuDevicesCount) {
            if (gpuDevicesCount == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "gpuDevicesCount");
            }
            this.gpuDevicesCount = gpuDevicesCount;
            return this;
        }
        @CustomType.Setter
        public Builder guestState(String guestState) {
            if (guestState == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "guestState");
            }
            this.guestState = guestState;
            return this;
        }
        @CustomType.Setter
        public Builder hardwareVersion(String hardwareVersion) {
            if (hardwareVersion == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "hardwareVersion");
            }
            this.hardwareVersion = hardwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder isPmemEnabled(Boolean isPmemEnabled) {
            if (isPmemEnabled == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "isPmemEnabled");
            }
            this.isPmemEnabled = isPmemEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isTpmEnabled(Boolean isTpmEnabled) {
            if (isTpmEnabled == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "isTpmEnabled");
            }
            this.isTpmEnabled = isTpmEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder latencySensitivity(String latencySensitivity) {
            if (latencySensitivity == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "latencySensitivity");
            }
            this.latencySensitivity = latencySensitivity;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInMbs(String memoryInMbs) {
            if (memoryInMbs == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "memoryInMbs");
            }
            this.memoryInMbs = memoryInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder nics(List<GetAssetComputeNic> nics) {
            if (nics == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "nics");
            }
            this.nics = nics;
            return this;
        }
        public Builder nics(GetAssetComputeNic... nics) {
            return nics(List.of(nics));
        }
        @CustomType.Setter
        public Builder nicsCount(Integer nicsCount) {
            if (nicsCount == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "nicsCount");
            }
            this.nicsCount = nicsCount;
            return this;
        }
        @CustomType.Setter
        public Builder nvdimmControllers(List<GetAssetComputeNvdimmController> nvdimmControllers) {
            if (nvdimmControllers == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "nvdimmControllers");
            }
            this.nvdimmControllers = nvdimmControllers;
            return this;
        }
        public Builder nvdimmControllers(GetAssetComputeNvdimmController... nvdimmControllers) {
            return nvdimmControllers(List.of(nvdimmControllers));
        }
        @CustomType.Setter
        public Builder nvdimms(List<GetAssetComputeNvdimm> nvdimms) {
            if (nvdimms == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "nvdimms");
            }
            this.nvdimms = nvdimms;
            return this;
        }
        public Builder nvdimms(GetAssetComputeNvdimm... nvdimms) {
            return nvdimms(List.of(nvdimms));
        }
        @CustomType.Setter
        public Builder operatingSystem(String operatingSystem) {
            if (operatingSystem == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "operatingSystem");
            }
            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystemVersion(String operatingSystemVersion) {
            if (operatingSystemVersion == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "operatingSystemVersion");
            }
            this.operatingSystemVersion = operatingSystemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pmemInMbs(String pmemInMbs) {
            if (pmemInMbs == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "pmemInMbs");
            }
            this.pmemInMbs = pmemInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder powerState(String powerState) {
            if (powerState == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "powerState");
            }
            this.powerState = powerState;
            return this;
        }
        @CustomType.Setter
        public Builder primaryIp(String primaryIp) {
            if (primaryIp == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "primaryIp");
            }
            this.primaryIp = primaryIp;
            return this;
        }
        @CustomType.Setter
        public Builder scsiControllers(List<GetAssetComputeScsiController> scsiControllers) {
            if (scsiControllers == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "scsiControllers");
            }
            this.scsiControllers = scsiControllers;
            return this;
        }
        public Builder scsiControllers(GetAssetComputeScsiController... scsiControllers) {
            return scsiControllers(List.of(scsiControllers));
        }
        @CustomType.Setter
        public Builder storageProvisionedInMbs(String storageProvisionedInMbs) {
            if (storageProvisionedInMbs == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "storageProvisionedInMbs");
            }
            this.storageProvisionedInMbs = storageProvisionedInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCoreCount(Integer threadsPerCoreCount) {
            if (threadsPerCoreCount == null) {
              throw new MissingRequiredPropertyException("GetAssetCompute", "threadsPerCoreCount");
            }
            this.threadsPerCoreCount = threadsPerCoreCount;
            return this;
        }
        public GetAssetCompute build() {
            final var _resultValue = new GetAssetCompute();
            _resultValue.connectedNetworks = connectedNetworks;
            _resultValue.coresCount = coresCount;
            _resultValue.cpuModel = cpuModel;
            _resultValue.description = description;
            _resultValue.disks = disks;
            _resultValue.disksCount = disksCount;
            _resultValue.dnsName = dnsName;
            _resultValue.firmware = firmware;
            _resultValue.gpuDevices = gpuDevices;
            _resultValue.gpuDevicesCount = gpuDevicesCount;
            _resultValue.guestState = guestState;
            _resultValue.hardwareVersion = hardwareVersion;
            _resultValue.hostName = hostName;
            _resultValue.isPmemEnabled = isPmemEnabled;
            _resultValue.isTpmEnabled = isTpmEnabled;
            _resultValue.latencySensitivity = latencySensitivity;
            _resultValue.memoryInMbs = memoryInMbs;
            _resultValue.nics = nics;
            _resultValue.nicsCount = nicsCount;
            _resultValue.nvdimmControllers = nvdimmControllers;
            _resultValue.nvdimms = nvdimms;
            _resultValue.operatingSystem = operatingSystem;
            _resultValue.operatingSystemVersion = operatingSystemVersion;
            _resultValue.pmemInMbs = pmemInMbs;
            _resultValue.powerState = powerState;
            _resultValue.primaryIp = primaryIp;
            _resultValue.scsiControllers = scsiControllers;
            _resultValue.storageProvisionedInMbs = storageProvisionedInMbs;
            _resultValue.threadsPerCoreCount = threadsPerCoreCount;
            return _resultValue;
        }
    }
}
