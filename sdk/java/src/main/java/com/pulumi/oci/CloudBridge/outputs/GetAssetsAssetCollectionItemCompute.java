// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudBridge.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudBridge.outputs.GetAssetsAssetCollectionItemComputeDisk;
import com.pulumi.oci.CloudBridge.outputs.GetAssetsAssetCollectionItemComputeGpuDevice;
import com.pulumi.oci.CloudBridge.outputs.GetAssetsAssetCollectionItemComputeNic;
import com.pulumi.oci.CloudBridge.outputs.GetAssetsAssetCollectionItemComputeNvdimm;
import com.pulumi.oci.CloudBridge.outputs.GetAssetsAssetCollectionItemComputeNvdimmController;
import com.pulumi.oci.CloudBridge.outputs.GetAssetsAssetCollectionItemComputeScsiController;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAssetsAssetCollectionItemCompute {
    /**
     * @return Number of connected networks.
     * 
     */
    private @Nullable Integer connectedNetworks;
    /**
     * @return Number of GPU cores.
     * 
     */
    private @Nullable Integer coresCount;
    /**
     * @return CPU model name.
     * 
     */
    private @Nullable String cpuModel;
    /**
     * @return The tag description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    private @Nullable List<GetAssetsAssetCollectionItemComputeDisk> disks;
    /**
     * @return Number of disks.
     * 
     */
    private @Nullable Integer disksCount;
    /**
     * @return Fully Qualified DNS Name.
     * 
     */
    private @Nullable String dnsName;
    /**
     * @return Information about firmware type for this virtual machine.
     * 
     */
    private @Nullable String firmware;
    /**
     * @return List of GPU devices attached to a virtual machine.
     * 
     */
    private @Nullable List<GetAssetsAssetCollectionItemComputeGpuDevice> gpuDevices;
    /**
     * @return Number of GPU devices.
     * 
     */
    private @Nullable Integer gpuDevicesCount;
    /**
     * @return Guest state.
     * 
     */
    private @Nullable String guestState;
    /**
     * @return Hardware version.
     * 
     */
    private @Nullable String hardwareVersion;
    /**
     * @return Host name of the VM.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    private @Nullable Boolean isPmemEnabled;
    /**
     * @return Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    private @Nullable Boolean isTpmEnabled;
    /**
     * @return Latency sensitivity.
     * 
     */
    private @Nullable String latencySensitivity;
    /**
     * @return Memory size in MBs.
     * 
     */
    private @Nullable String memoryInMbs;
    /**
     * @return List of network ethernet cards attached to a virtual machine.
     * 
     */
    private @Nullable List<GetAssetsAssetCollectionItemComputeNic> nics;
    /**
     * @return Number of network ethernet cards.
     * 
     */
    private @Nullable Integer nicsCount;
    /**
     * @return The asset&#39;s NVDIMM configuration.
     * 
     */
    private @Nullable List<GetAssetsAssetCollectionItemComputeNvdimmController> nvdimmControllers;
    /**
     * @return The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    private @Nullable List<GetAssetsAssetCollectionItemComputeNvdimm> nvdimms;
    /**
     * @return Operating system.
     * 
     */
    private @Nullable String operatingSystem;
    /**
     * @return Operating system version.
     * 
     */
    private @Nullable String operatingSystemVersion;
    /**
     * @return Pmem size in MBs.
     * 
     */
    private @Nullable String pmemInMbs;
    /**
     * @return The current power state of the virtual machine.
     * 
     */
    private @Nullable String powerState;
    /**
     * @return Primary IP address of the compute instance.
     * 
     */
    private @Nullable String primaryIp;
    /**
     * @return The assets SCSI controller.
     * 
     */
    private @Nullable List<GetAssetsAssetCollectionItemComputeScsiController> scsiControllers;
    /**
     * @return Provision storage size in MBs.
     * 
     */
    private @Nullable String storageProvisionedInMbs;
    /**
     * @return Number of threads per core.
     * 
     */
    private @Nullable Integer threadsPerCoreCount;

    private GetAssetsAssetCollectionItemCompute() {}
    /**
     * @return Number of connected networks.
     * 
     */
    public Optional<Integer> connectedNetworks() {
        return Optional.ofNullable(this.connectedNetworks);
    }
    /**
     * @return Number of GPU cores.
     * 
     */
    public Optional<Integer> coresCount() {
        return Optional.ofNullable(this.coresCount);
    }
    /**
     * @return CPU model name.
     * 
     */
    public Optional<String> cpuModel() {
        return Optional.ofNullable(this.cpuModel);
    }
    /**
     * @return The tag description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Lists the set of disks belonging to the virtual machine. This list is unordered.
     * 
     */
    public List<GetAssetsAssetCollectionItemComputeDisk> disks() {
        return this.disks == null ? List.of() : this.disks;
    }
    /**
     * @return Number of disks.
     * 
     */
    public Optional<Integer> disksCount() {
        return Optional.ofNullable(this.disksCount);
    }
    /**
     * @return Fully Qualified DNS Name.
     * 
     */
    public Optional<String> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }
    /**
     * @return Information about firmware type for this virtual machine.
     * 
     */
    public Optional<String> firmware() {
        return Optional.ofNullable(this.firmware);
    }
    /**
     * @return List of GPU devices attached to a virtual machine.
     * 
     */
    public List<GetAssetsAssetCollectionItemComputeGpuDevice> gpuDevices() {
        return this.gpuDevices == null ? List.of() : this.gpuDevices;
    }
    /**
     * @return Number of GPU devices.
     * 
     */
    public Optional<Integer> gpuDevicesCount() {
        return Optional.ofNullable(this.gpuDevicesCount);
    }
    /**
     * @return Guest state.
     * 
     */
    public Optional<String> guestState() {
        return Optional.ofNullable(this.guestState);
    }
    /**
     * @return Hardware version.
     * 
     */
    public Optional<String> hardwareVersion() {
        return Optional.ofNullable(this.hardwareVersion);
    }
    /**
     * @return Host name of the VM.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
     * 
     */
    public Optional<Boolean> isPmemEnabled() {
        return Optional.ofNullable(this.isPmemEnabled);
    }
    /**
     * @return Whether Trusted Platform Module (TPM) is enabled.
     * 
     */
    public Optional<Boolean> isTpmEnabled() {
        return Optional.ofNullable(this.isTpmEnabled);
    }
    /**
     * @return Latency sensitivity.
     * 
     */
    public Optional<String> latencySensitivity() {
        return Optional.ofNullable(this.latencySensitivity);
    }
    /**
     * @return Memory size in MBs.
     * 
     */
    public Optional<String> memoryInMbs() {
        return Optional.ofNullable(this.memoryInMbs);
    }
    /**
     * @return List of network ethernet cards attached to a virtual machine.
     * 
     */
    public List<GetAssetsAssetCollectionItemComputeNic> nics() {
        return this.nics == null ? List.of() : this.nics;
    }
    /**
     * @return Number of network ethernet cards.
     * 
     */
    public Optional<Integer> nicsCount() {
        return Optional.ofNullable(this.nicsCount);
    }
    /**
     * @return The asset&#39;s NVDIMM configuration.
     * 
     */
    public List<GetAssetsAssetCollectionItemComputeNvdimmController> nvdimmControllers() {
        return this.nvdimmControllers == null ? List.of() : this.nvdimmControllers;
    }
    /**
     * @return The properties of the NVDIMMs attached to a virtual machine.
     * 
     */
    public List<GetAssetsAssetCollectionItemComputeNvdimm> nvdimms() {
        return this.nvdimms == null ? List.of() : this.nvdimms;
    }
    /**
     * @return Operating system.
     * 
     */
    public Optional<String> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }
    /**
     * @return Operating system version.
     * 
     */
    public Optional<String> operatingSystemVersion() {
        return Optional.ofNullable(this.operatingSystemVersion);
    }
    /**
     * @return Pmem size in MBs.
     * 
     */
    public Optional<String> pmemInMbs() {
        return Optional.ofNullable(this.pmemInMbs);
    }
    /**
     * @return The current power state of the virtual machine.
     * 
     */
    public Optional<String> powerState() {
        return Optional.ofNullable(this.powerState);
    }
    /**
     * @return Primary IP address of the compute instance.
     * 
     */
    public Optional<String> primaryIp() {
        return Optional.ofNullable(this.primaryIp);
    }
    /**
     * @return The assets SCSI controller.
     * 
     */
    public List<GetAssetsAssetCollectionItemComputeScsiController> scsiControllers() {
        return this.scsiControllers == null ? List.of() : this.scsiControllers;
    }
    /**
     * @return Provision storage size in MBs.
     * 
     */
    public Optional<String> storageProvisionedInMbs() {
        return Optional.ofNullable(this.storageProvisionedInMbs);
    }
    /**
     * @return Number of threads per core.
     * 
     */
    public Optional<Integer> threadsPerCoreCount() {
        return Optional.ofNullable(this.threadsPerCoreCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAssetsAssetCollectionItemCompute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer connectedNetworks;
        private @Nullable Integer coresCount;
        private @Nullable String cpuModel;
        private @Nullable String description;
        private @Nullable List<GetAssetsAssetCollectionItemComputeDisk> disks;
        private @Nullable Integer disksCount;
        private @Nullable String dnsName;
        private @Nullable String firmware;
        private @Nullable List<GetAssetsAssetCollectionItemComputeGpuDevice> gpuDevices;
        private @Nullable Integer gpuDevicesCount;
        private @Nullable String guestState;
        private @Nullable String hardwareVersion;
        private @Nullable String hostName;
        private @Nullable Boolean isPmemEnabled;
        private @Nullable Boolean isTpmEnabled;
        private @Nullable String latencySensitivity;
        private @Nullable String memoryInMbs;
        private @Nullable List<GetAssetsAssetCollectionItemComputeNic> nics;
        private @Nullable Integer nicsCount;
        private @Nullable List<GetAssetsAssetCollectionItemComputeNvdimmController> nvdimmControllers;
        private @Nullable List<GetAssetsAssetCollectionItemComputeNvdimm> nvdimms;
        private @Nullable String operatingSystem;
        private @Nullable String operatingSystemVersion;
        private @Nullable String pmemInMbs;
        private @Nullable String powerState;
        private @Nullable String primaryIp;
        private @Nullable List<GetAssetsAssetCollectionItemComputeScsiController> scsiControllers;
        private @Nullable String storageProvisionedInMbs;
        private @Nullable Integer threadsPerCoreCount;
        public Builder() {}
        public Builder(GetAssetsAssetCollectionItemCompute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectedNetworks = defaults.connectedNetworks;
    	      this.coresCount = defaults.coresCount;
    	      this.cpuModel = defaults.cpuModel;
    	      this.description = defaults.description;
    	      this.disks = defaults.disks;
    	      this.disksCount = defaults.disksCount;
    	      this.dnsName = defaults.dnsName;
    	      this.firmware = defaults.firmware;
    	      this.gpuDevices = defaults.gpuDevices;
    	      this.gpuDevicesCount = defaults.gpuDevicesCount;
    	      this.guestState = defaults.guestState;
    	      this.hardwareVersion = defaults.hardwareVersion;
    	      this.hostName = defaults.hostName;
    	      this.isPmemEnabled = defaults.isPmemEnabled;
    	      this.isTpmEnabled = defaults.isTpmEnabled;
    	      this.latencySensitivity = defaults.latencySensitivity;
    	      this.memoryInMbs = defaults.memoryInMbs;
    	      this.nics = defaults.nics;
    	      this.nicsCount = defaults.nicsCount;
    	      this.nvdimmControllers = defaults.nvdimmControllers;
    	      this.nvdimms = defaults.nvdimms;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.operatingSystemVersion = defaults.operatingSystemVersion;
    	      this.pmemInMbs = defaults.pmemInMbs;
    	      this.powerState = defaults.powerState;
    	      this.primaryIp = defaults.primaryIp;
    	      this.scsiControllers = defaults.scsiControllers;
    	      this.storageProvisionedInMbs = defaults.storageProvisionedInMbs;
    	      this.threadsPerCoreCount = defaults.threadsPerCoreCount;
        }

        @CustomType.Setter
        public Builder connectedNetworks(@Nullable Integer connectedNetworks) {
            this.connectedNetworks = connectedNetworks;
            return this;
        }
        @CustomType.Setter
        public Builder coresCount(@Nullable Integer coresCount) {
            this.coresCount = coresCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuModel(@Nullable String cpuModel) {
            this.cpuModel = cpuModel;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disks(@Nullable List<GetAssetsAssetCollectionItemComputeDisk> disks) {
            this.disks = disks;
            return this;
        }
        public Builder disks(GetAssetsAssetCollectionItemComputeDisk... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder disksCount(@Nullable Integer disksCount) {
            this.disksCount = disksCount;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(@Nullable String dnsName) {
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder firmware(@Nullable String firmware) {
            this.firmware = firmware;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDevices(@Nullable List<GetAssetsAssetCollectionItemComputeGpuDevice> gpuDevices) {
            this.gpuDevices = gpuDevices;
            return this;
        }
        public Builder gpuDevices(GetAssetsAssetCollectionItemComputeGpuDevice... gpuDevices) {
            return gpuDevices(List.of(gpuDevices));
        }
        @CustomType.Setter
        public Builder gpuDevicesCount(@Nullable Integer gpuDevicesCount) {
            this.gpuDevicesCount = gpuDevicesCount;
            return this;
        }
        @CustomType.Setter
        public Builder guestState(@Nullable String guestState) {
            this.guestState = guestState;
            return this;
        }
        @CustomType.Setter
        public Builder hardwareVersion(@Nullable String hardwareVersion) {
            this.hardwareVersion = hardwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder isPmemEnabled(@Nullable Boolean isPmemEnabled) {
            this.isPmemEnabled = isPmemEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isTpmEnabled(@Nullable Boolean isTpmEnabled) {
            this.isTpmEnabled = isTpmEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder latencySensitivity(@Nullable String latencySensitivity) {
            this.latencySensitivity = latencySensitivity;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInMbs(@Nullable String memoryInMbs) {
            this.memoryInMbs = memoryInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder nics(@Nullable List<GetAssetsAssetCollectionItemComputeNic> nics) {
            this.nics = nics;
            return this;
        }
        public Builder nics(GetAssetsAssetCollectionItemComputeNic... nics) {
            return nics(List.of(nics));
        }
        @CustomType.Setter
        public Builder nicsCount(@Nullable Integer nicsCount) {
            this.nicsCount = nicsCount;
            return this;
        }
        @CustomType.Setter
        public Builder nvdimmControllers(@Nullable List<GetAssetsAssetCollectionItemComputeNvdimmController> nvdimmControllers) {
            this.nvdimmControllers = nvdimmControllers;
            return this;
        }
        public Builder nvdimmControllers(GetAssetsAssetCollectionItemComputeNvdimmController... nvdimmControllers) {
            return nvdimmControllers(List.of(nvdimmControllers));
        }
        @CustomType.Setter
        public Builder nvdimms(@Nullable List<GetAssetsAssetCollectionItemComputeNvdimm> nvdimms) {
            this.nvdimms = nvdimms;
            return this;
        }
        public Builder nvdimms(GetAssetsAssetCollectionItemComputeNvdimm... nvdimms) {
            return nvdimms(List.of(nvdimms));
        }
        @CustomType.Setter
        public Builder operatingSystem(@Nullable String operatingSystem) {
            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystemVersion(@Nullable String operatingSystemVersion) {
            this.operatingSystemVersion = operatingSystemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pmemInMbs(@Nullable String pmemInMbs) {
            this.pmemInMbs = pmemInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder powerState(@Nullable String powerState) {
            this.powerState = powerState;
            return this;
        }
        @CustomType.Setter
        public Builder primaryIp(@Nullable String primaryIp) {
            this.primaryIp = primaryIp;
            return this;
        }
        @CustomType.Setter
        public Builder scsiControllers(@Nullable List<GetAssetsAssetCollectionItemComputeScsiController> scsiControllers) {
            this.scsiControllers = scsiControllers;
            return this;
        }
        public Builder scsiControllers(GetAssetsAssetCollectionItemComputeScsiController... scsiControllers) {
            return scsiControllers(List.of(scsiControllers));
        }
        @CustomType.Setter
        public Builder storageProvisionedInMbs(@Nullable String storageProvisionedInMbs) {
            this.storageProvisionedInMbs = storageProvisionedInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCoreCount(@Nullable Integer threadsPerCoreCount) {
            this.threadsPerCoreCount = threadsPerCoreCount;
            return this;
        }
        public GetAssetsAssetCollectionItemCompute build() {
            final var o = new GetAssetsAssetCollectionItemCompute();
            o.connectedNetworks = connectedNetworks;
            o.coresCount = coresCount;
            o.cpuModel = cpuModel;
            o.description = description;
            o.disks = disks;
            o.disksCount = disksCount;
            o.dnsName = dnsName;
            o.firmware = firmware;
            o.gpuDevices = gpuDevices;
            o.gpuDevicesCount = gpuDevicesCount;
            o.guestState = guestState;
            o.hardwareVersion = hardwareVersion;
            o.hostName = hostName;
            o.isPmemEnabled = isPmemEnabled;
            o.isTpmEnabled = isTpmEnabled;
            o.latencySensitivity = latencySensitivity;
            o.memoryInMbs = memoryInMbs;
            o.nics = nics;
            o.nicsCount = nicsCount;
            o.nvdimmControllers = nvdimmControllers;
            o.nvdimms = nvdimms;
            o.operatingSystem = operatingSystem;
            o.operatingSystemVersion = operatingSystemVersion;
            o.pmemInMbs = pmemInMbs;
            o.powerState = powerState;
            o.primaryIp = primaryIp;
            o.scsiControllers = scsiControllers;
            o.storageProvisionedInMbs = storageProvisionedInMbs;
            o.threadsPerCoreCount = threadsPerCoreCount;
            return o;
        }
    }
}
