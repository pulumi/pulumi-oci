// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.CloudGuardDataSourceDataSourceDetailsArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudGuardDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudGuardDataSourceArgs Empty = new CloudGuardDataSourceArgs();

    /**
     * (Updatable) Compartment OCID of the data source
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment OCID of the data source
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Details specific to the data source type.
     * 
     */
    @Import(name="dataSourceDetails")
    private @Nullable Output<CloudGuardDataSourceDataSourceDetailsArgs> dataSourceDetails;

    /**
     * @return (Updatable) Details specific to the data source type.
     * 
     */
    public Optional<Output<CloudGuardDataSourceDataSourceDetailsArgs>> dataSourceDetails() {
        return Optional.ofNullable(this.dataSourceDetails);
    }

    /**
     * Type of data source feed provider (LoggingQuery)
     * 
     */
    @Import(name="dataSourceFeedProvider", required=true)
    private Output<String> dataSourceFeedProvider;

    /**
     * @return Type of data source feed provider (LoggingQuery)
     * 
     */
    public Output<String> dataSourceFeedProvider() {
        return this.dataSourceFeedProvider;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Data source display name
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Data source display name
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     * Avoid entering confidential information.
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     * Avoid entering confidential information.
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Enablement status of data source.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Updatable) Enablement status of data source.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private CloudGuardDataSourceArgs() {}

    private CloudGuardDataSourceArgs(CloudGuardDataSourceArgs $) {
        this.compartmentId = $.compartmentId;
        this.dataSourceDetails = $.dataSourceDetails;
        this.dataSourceFeedProvider = $.dataSourceFeedProvider;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudGuardDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudGuardDataSourceArgs $;

        public Builder() {
            $ = new CloudGuardDataSourceArgs();
        }

        public Builder(CloudGuardDataSourceArgs defaults) {
            $ = new CloudGuardDataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) Compartment OCID of the data source
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment OCID of the data source
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dataSourceDetails (Updatable) Details specific to the data source type.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceDetails(@Nullable Output<CloudGuardDataSourceDataSourceDetailsArgs> dataSourceDetails) {
            $.dataSourceDetails = dataSourceDetails;
            return this;
        }

        /**
         * @param dataSourceDetails (Updatable) Details specific to the data source type.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceDetails(CloudGuardDataSourceDataSourceDetailsArgs dataSourceDetails) {
            return dataSourceDetails(Output.of(dataSourceDetails));
        }

        /**
         * @param dataSourceFeedProvider Type of data source feed provider (LoggingQuery)
         * 
         * @return builder
         * 
         */
        public Builder dataSourceFeedProvider(Output<String> dataSourceFeedProvider) {
            $.dataSourceFeedProvider = dataSourceFeedProvider;
            return this;
        }

        /**
         * @param dataSourceFeedProvider Type of data source feed provider (LoggingQuery)
         * 
         * @return builder
         * 
         */
        public Builder dataSourceFeedProvider(String dataSourceFeedProvider) {
            return dataSourceFeedProvider(Output.of(dataSourceFeedProvider));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) Data source display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Data source display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param status (Updatable) Enablement status of data source.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Updatable) Enablement status of data source.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public CloudGuardDataSourceArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("CloudGuardDataSourceArgs", "compartmentId");
            }
            if ($.dataSourceFeedProvider == null) {
                throw new MissingRequiredPropertyException("CloudGuardDataSourceArgs", "dataSourceFeedProvider");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("CloudGuardDataSourceArgs", "displayName");
            }
            return $;
        }
    }

}
