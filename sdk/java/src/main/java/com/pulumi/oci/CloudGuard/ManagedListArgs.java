// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedListArgs Empty = new ManagedListArgs();

    /**
     * (Updatable) Compartment OCID
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) Compartment OCID
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Managed list description
     * 
     * Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Managed list description
     * 
     * Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Managed list display name.
     * 
     * Avoid entering confidential information.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Managed list display name.
     * 
     * Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     * Avoid entering confidential information.
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     * Avoid entering confidential information.
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) List of items in the managed list
     * 
     */
    @Import(name="listItems")
    private @Nullable Output<List<String>> listItems;

    /**
     * @return (Updatable) List of items in the managed list
     * 
     */
    public Optional<Output<List<String>>> listItems() {
        return Optional.ofNullable(this.listItems);
    }

    /**
     * Type of information stored in the list
     * 
     */
    @Import(name="listType")
    private @Nullable Output<String> listType;

    /**
     * @return Type of information stored in the list
     * 
     */
    public Optional<Output<String>> listType() {
        return Optional.ofNullable(this.listType);
    }

    /**
     * OCID of the source managed list
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="sourceManagedListId")
    private @Nullable Output<String> sourceManagedListId;

    /**
     * @return OCID of the source managed list
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> sourceManagedListId() {
        return Optional.ofNullable(this.sourceManagedListId);
    }

    private ManagedListArgs() {}

    private ManagedListArgs(ManagedListArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.listItems = $.listItems;
        this.listType = $.listType;
        this.sourceManagedListId = $.sourceManagedListId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedListArgs $;

        public Builder() {
            $ = new ManagedListArgs();
        }

        public Builder(ManagedListArgs defaults) {
            $ = new ManagedListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) Compartment OCID
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) Compartment OCID
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) Managed list description
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Managed list description
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) Managed list display name.
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Managed list display name.
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param listItems (Updatable) List of items in the managed list
         * 
         * @return builder
         * 
         */
        public Builder listItems(@Nullable Output<List<String>> listItems) {
            $.listItems = listItems;
            return this;
        }

        /**
         * @param listItems (Updatable) List of items in the managed list
         * 
         * @return builder
         * 
         */
        public Builder listItems(List<String> listItems) {
            return listItems(Output.of(listItems));
        }

        /**
         * @param listItems (Updatable) List of items in the managed list
         * 
         * @return builder
         * 
         */
        public Builder listItems(String... listItems) {
            return listItems(List.of(listItems));
        }

        /**
         * @param listType Type of information stored in the list
         * 
         * @return builder
         * 
         */
        public Builder listType(@Nullable Output<String> listType) {
            $.listType = listType;
            return this;
        }

        /**
         * @param listType Type of information stored in the list
         * 
         * @return builder
         * 
         */
        public Builder listType(String listType) {
            return listType(Output.of(listType));
        }

        /**
         * @param sourceManagedListId OCID of the source managed list
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder sourceManagedListId(@Nullable Output<String> sourceManagedListId) {
            $.sourceManagedListId = sourceManagedListId;
            return this;
        }

        /**
         * @param sourceManagedListId OCID of the source managed list
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder sourceManagedListId(String sourceManagedListId) {
            return sourceManagedListId(Output.of(sourceManagedListId));
        }

        public ManagedListArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("ManagedListArgs", "compartmentId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ManagedListArgs", "displayName");
            }
            return $;
        }
    }

}
