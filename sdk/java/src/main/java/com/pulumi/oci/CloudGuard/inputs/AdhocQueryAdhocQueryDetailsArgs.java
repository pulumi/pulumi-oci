// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.AdhocQueryAdhocQueryDetailsAdhocQueryResourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AdhocQueryAdhocQueryDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdhocQueryAdhocQueryDetailsArgs Empty = new AdhocQueryAdhocQueryDetailsArgs();

    /**
     * Target information in which adhoc query will be run
     * 
     */
    @Import(name="adhocQueryResources", required=true)
    private Output<List<AdhocQueryAdhocQueryDetailsAdhocQueryResourceArgs>> adhocQueryResources;

    /**
     * @return Target information in which adhoc query will be run
     * 
     */
    public Output<List<AdhocQueryAdhocQueryDetailsAdhocQueryResourceArgs>> adhocQueryResources() {
        return this.adhocQueryResources;
    }

    /**
     * The adhoc query expression that is run
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return The adhoc query expression that is run
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    private AdhocQueryAdhocQueryDetailsArgs() {}

    private AdhocQueryAdhocQueryDetailsArgs(AdhocQueryAdhocQueryDetailsArgs $) {
        this.adhocQueryResources = $.adhocQueryResources;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdhocQueryAdhocQueryDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdhocQueryAdhocQueryDetailsArgs $;

        public Builder() {
            $ = new AdhocQueryAdhocQueryDetailsArgs();
        }

        public Builder(AdhocQueryAdhocQueryDetailsArgs defaults) {
            $ = new AdhocQueryAdhocQueryDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adhocQueryResources Target information in which adhoc query will be run
         * 
         * @return builder
         * 
         */
        public Builder adhocQueryResources(Output<List<AdhocQueryAdhocQueryDetailsAdhocQueryResourceArgs>> adhocQueryResources) {
            $.adhocQueryResources = adhocQueryResources;
            return this;
        }

        /**
         * @param adhocQueryResources Target information in which adhoc query will be run
         * 
         * @return builder
         * 
         */
        public Builder adhocQueryResources(List<AdhocQueryAdhocQueryDetailsAdhocQueryResourceArgs> adhocQueryResources) {
            return adhocQueryResources(Output.of(adhocQueryResources));
        }

        /**
         * @param adhocQueryResources Target information in which adhoc query will be run
         * 
         * @return builder
         * 
         */
        public Builder adhocQueryResources(AdhocQueryAdhocQueryDetailsAdhocQueryResourceArgs... adhocQueryResources) {
            return adhocQueryResources(List.of(adhocQueryResources));
        }

        /**
         * @param query The adhoc query expression that is run
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The adhoc query expression that is run
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public AdhocQueryAdhocQueryDetailsArgs build() {
            if ($.adhocQueryResources == null) {
                throw new MissingRequiredPropertyException("AdhocQueryAdhocQueryDetailsArgs", "adhocQueryResources");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("AdhocQueryAdhocQueryDetailsArgs", "query");
            }
            return $;
        }
    }

}
