// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdhocQueryAdhocQueryRegionalDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdhocQueryAdhocQueryRegionalDetailArgs Empty = new AdhocQueryAdhocQueryRegionalDetailArgs();

    /**
     * Expected number of instances on which query should run
     * 
     */
    @Import(name="expectedCount")
    private @Nullable Output<String> expectedCount;

    /**
     * @return Expected number of instances on which query should run
     * 
     */
    public Optional<Output<String>> expectedCount() {
        return Optional.ofNullable(this.expectedCount);
    }

    /**
     * Number of instances on which query expired
     * 
     */
    @Import(name="expiredCount")
    private @Nullable Output<String> expiredCount;

    /**
     * @return Number of instances on which query expired
     * 
     */
    public Optional<Output<String>> expiredCount() {
        return Optional.ofNullable(this.expiredCount);
    }

    /**
     * Number of instances on which query failed
     * 
     */
    @Import(name="failedCount")
    private @Nullable Output<String> failedCount;

    /**
     * @return Number of instances on which query failed
     * 
     */
    public Optional<Output<String>> failedCount() {
        return Optional.ofNullable(this.failedCount);
    }

    /**
     * Region name
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region name
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * error message to show if adhoc query fails in a region
     * 
     */
    @Import(name="regionalError")
    private @Nullable Output<String> regionalError;

    /**
     * @return error message to show if adhoc query fails in a region
     * 
     */
    public Optional<Output<String>> regionalError() {
        return Optional.ofNullable(this.regionalError);
    }

    /**
     * adhoc query status of the region
     * 
     */
    @Import(name="regionalStatus")
    private @Nullable Output<String> regionalStatus;

    /**
     * @return adhoc query status of the region
     * 
     */
    public Optional<Output<String>> regionalStatus() {
        return Optional.ofNullable(this.regionalStatus);
    }

    /**
     * Number of instances on which query succeeded
     * 
     */
    @Import(name="succeededCount")
    private @Nullable Output<String> succeededCount;

    /**
     * @return Number of instances on which query succeeded
     * 
     */
    public Optional<Output<String>> succeededCount() {
        return Optional.ofNullable(this.succeededCount);
    }

    private AdhocQueryAdhocQueryRegionalDetailArgs() {}

    private AdhocQueryAdhocQueryRegionalDetailArgs(AdhocQueryAdhocQueryRegionalDetailArgs $) {
        this.expectedCount = $.expectedCount;
        this.expiredCount = $.expiredCount;
        this.failedCount = $.failedCount;
        this.region = $.region;
        this.regionalError = $.regionalError;
        this.regionalStatus = $.regionalStatus;
        this.succeededCount = $.succeededCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdhocQueryAdhocQueryRegionalDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdhocQueryAdhocQueryRegionalDetailArgs $;

        public Builder() {
            $ = new AdhocQueryAdhocQueryRegionalDetailArgs();
        }

        public Builder(AdhocQueryAdhocQueryRegionalDetailArgs defaults) {
            $ = new AdhocQueryAdhocQueryRegionalDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expectedCount Expected number of instances on which query should run
         * 
         * @return builder
         * 
         */
        public Builder expectedCount(@Nullable Output<String> expectedCount) {
            $.expectedCount = expectedCount;
            return this;
        }

        /**
         * @param expectedCount Expected number of instances on which query should run
         * 
         * @return builder
         * 
         */
        public Builder expectedCount(String expectedCount) {
            return expectedCount(Output.of(expectedCount));
        }

        /**
         * @param expiredCount Number of instances on which query expired
         * 
         * @return builder
         * 
         */
        public Builder expiredCount(@Nullable Output<String> expiredCount) {
            $.expiredCount = expiredCount;
            return this;
        }

        /**
         * @param expiredCount Number of instances on which query expired
         * 
         * @return builder
         * 
         */
        public Builder expiredCount(String expiredCount) {
            return expiredCount(Output.of(expiredCount));
        }

        /**
         * @param failedCount Number of instances on which query failed
         * 
         * @return builder
         * 
         */
        public Builder failedCount(@Nullable Output<String> failedCount) {
            $.failedCount = failedCount;
            return this;
        }

        /**
         * @param failedCount Number of instances on which query failed
         * 
         * @return builder
         * 
         */
        public Builder failedCount(String failedCount) {
            return failedCount(Output.of(failedCount));
        }

        /**
         * @param region Region name
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region name
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param regionalError error message to show if adhoc query fails in a region
         * 
         * @return builder
         * 
         */
        public Builder regionalError(@Nullable Output<String> regionalError) {
            $.regionalError = regionalError;
            return this;
        }

        /**
         * @param regionalError error message to show if adhoc query fails in a region
         * 
         * @return builder
         * 
         */
        public Builder regionalError(String regionalError) {
            return regionalError(Output.of(regionalError));
        }

        /**
         * @param regionalStatus adhoc query status of the region
         * 
         * @return builder
         * 
         */
        public Builder regionalStatus(@Nullable Output<String> regionalStatus) {
            $.regionalStatus = regionalStatus;
            return this;
        }

        /**
         * @param regionalStatus adhoc query status of the region
         * 
         * @return builder
         * 
         */
        public Builder regionalStatus(String regionalStatus) {
            return regionalStatus(Output.of(regionalStatus));
        }

        /**
         * @param succeededCount Number of instances on which query succeeded
         * 
         * @return builder
         * 
         */
        public Builder succeededCount(@Nullable Output<String> succeededCount) {
            $.succeededCount = succeededCount;
            return this;
        }

        /**
         * @param succeededCount Number of instances on which query succeeded
         * 
         * @return builder
         * 
         */
        public Builder succeededCount(String succeededCount) {
            return succeededCount(Output.of(succeededCount));
        }

        public AdhocQueryAdhocQueryRegionalDetailArgs build() {
            return $;
        }
    }

}
