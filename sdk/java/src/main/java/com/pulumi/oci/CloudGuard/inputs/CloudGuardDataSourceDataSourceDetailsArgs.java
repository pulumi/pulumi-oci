// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs;
import com.pulumi.oci.CloudGuard.inputs.CloudGuardDataSourceDataSourceDetailsQueryStartTimeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudGuardDataSourceDataSourceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudGuardDataSourceDataSourceDetailsArgs Empty = new CloudGuardDataSourceDataSourceDetailsArgs();

    /**
     * (Updatable) The additional entities count used for data source query.
     * 
     */
    @Import(name="additionalEntitiesCount")
    private @Nullable Output<Integer> additionalEntitiesCount;

    /**
     * @return (Updatable) The additional entities count used for data source query.
     * 
     */
    public Optional<Output<Integer>> additionalEntitiesCount() {
        return Optional.ofNullable(this.additionalEntitiesCount);
    }

    /**
     * Possible type of dataSourceFeed Provider(LoggingQuery)
     * 
     */
    @Import(name="dataSourceFeedProvider", required=true)
    private Output<String> dataSourceFeedProvider;

    /**
     * @return Possible type of dataSourceFeed Provider(LoggingQuery)
     * 
     */
    public Output<String> dataSourceFeedProvider() {
        return this.dataSourceFeedProvider;
    }

    /**
     * (Updatable) Interval in minutes that query is run periodically.
     * 
     */
    @Import(name="intervalInMinutes")
    private @Nullable Output<Integer> intervalInMinutes;

    /**
     * @return (Updatable) Interval in minutes that query is run periodically.
     * 
     */
    public Optional<Output<Integer>> intervalInMinutes() {
        return Optional.ofNullable(this.intervalInMinutes);
    }

    /**
     * (Updatable) Additional details specific to the data source type (Sighting/Insight).
     * 
     */
    @Import(name="loggingQueryDetails")
    private @Nullable Output<CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs> loggingQueryDetails;

    /**
     * @return (Updatable) Additional details specific to the data source type (Sighting/Insight).
     * 
     */
    public Optional<Output<CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs>> loggingQueryDetails() {
        return Optional.ofNullable(this.loggingQueryDetails);
    }

    /**
     * (Updatable) Logging query type for data source (Sighting/Insight)
     * 
     */
    @Import(name="loggingQueryType")
    private @Nullable Output<String> loggingQueryType;

    /**
     * @return (Updatable) Logging query type for data source (Sighting/Insight)
     * 
     */
    public Optional<Output<String>> loggingQueryType() {
        return Optional.ofNullable(this.loggingQueryType);
    }

    /**
     * (Updatable) Operator used in Data Soruce
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return (Updatable) Operator used in Data Soruce
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * (Updatable) The continuous query expression that is run periodically.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return (Updatable) The continuous query expression that is run periodically.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * (Updatable) Time when the query can start, if not specified it can start immediately.
     * 
     */
    @Import(name="queryStartTime")
    private @Nullable Output<CloudGuardDataSourceDataSourceDetailsQueryStartTimeArgs> queryStartTime;

    /**
     * @return (Updatable) Time when the query can start, if not specified it can start immediately.
     * 
     */
    public Optional<Output<CloudGuardDataSourceDataSourceDetailsQueryStartTimeArgs>> queryStartTime() {
        return Optional.ofNullable(this.queryStartTime);
    }

    /**
     * (Updatable) Logging Query regions
     * 
     */
    @Import(name="regions")
    private @Nullable Output<List<String>> regions;

    /**
     * @return (Updatable) Logging Query regions
     * 
     */
    public Optional<Output<List<String>>> regions() {
        return Optional.ofNullable(this.regions);
    }

    /**
     * (Updatable) The integer value that must be exceeded, fall below or equal to (depending on the operator), the query result to trigger an event.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Integer> threshold;

    /**
     * @return (Updatable) The integer value that must be exceeded, fall below or equal to (depending on the operator), the query result to trigger an event.
     * 
     */
    public Optional<Output<Integer>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private CloudGuardDataSourceDataSourceDetailsArgs() {}

    private CloudGuardDataSourceDataSourceDetailsArgs(CloudGuardDataSourceDataSourceDetailsArgs $) {
        this.additionalEntitiesCount = $.additionalEntitiesCount;
        this.dataSourceFeedProvider = $.dataSourceFeedProvider;
        this.intervalInMinutes = $.intervalInMinutes;
        this.loggingQueryDetails = $.loggingQueryDetails;
        this.loggingQueryType = $.loggingQueryType;
        this.operator = $.operator;
        this.query = $.query;
        this.queryStartTime = $.queryStartTime;
        this.regions = $.regions;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudGuardDataSourceDataSourceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudGuardDataSourceDataSourceDetailsArgs $;

        public Builder() {
            $ = new CloudGuardDataSourceDataSourceDetailsArgs();
        }

        public Builder(CloudGuardDataSourceDataSourceDetailsArgs defaults) {
            $ = new CloudGuardDataSourceDataSourceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalEntitiesCount (Updatable) The additional entities count used for data source query.
         * 
         * @return builder
         * 
         */
        public Builder additionalEntitiesCount(@Nullable Output<Integer> additionalEntitiesCount) {
            $.additionalEntitiesCount = additionalEntitiesCount;
            return this;
        }

        /**
         * @param additionalEntitiesCount (Updatable) The additional entities count used for data source query.
         * 
         * @return builder
         * 
         */
        public Builder additionalEntitiesCount(Integer additionalEntitiesCount) {
            return additionalEntitiesCount(Output.of(additionalEntitiesCount));
        }

        /**
         * @param dataSourceFeedProvider Possible type of dataSourceFeed Provider(LoggingQuery)
         * 
         * @return builder
         * 
         */
        public Builder dataSourceFeedProvider(Output<String> dataSourceFeedProvider) {
            $.dataSourceFeedProvider = dataSourceFeedProvider;
            return this;
        }

        /**
         * @param dataSourceFeedProvider Possible type of dataSourceFeed Provider(LoggingQuery)
         * 
         * @return builder
         * 
         */
        public Builder dataSourceFeedProvider(String dataSourceFeedProvider) {
            return dataSourceFeedProvider(Output.of(dataSourceFeedProvider));
        }

        /**
         * @param intervalInMinutes (Updatable) Interval in minutes that query is run periodically.
         * 
         * @return builder
         * 
         */
        public Builder intervalInMinutes(@Nullable Output<Integer> intervalInMinutes) {
            $.intervalInMinutes = intervalInMinutes;
            return this;
        }

        /**
         * @param intervalInMinutes (Updatable) Interval in minutes that query is run periodically.
         * 
         * @return builder
         * 
         */
        public Builder intervalInMinutes(Integer intervalInMinutes) {
            return intervalInMinutes(Output.of(intervalInMinutes));
        }

        /**
         * @param loggingQueryDetails (Updatable) Additional details specific to the data source type (Sighting/Insight).
         * 
         * @return builder
         * 
         */
        public Builder loggingQueryDetails(@Nullable Output<CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs> loggingQueryDetails) {
            $.loggingQueryDetails = loggingQueryDetails;
            return this;
        }

        /**
         * @param loggingQueryDetails (Updatable) Additional details specific to the data source type (Sighting/Insight).
         * 
         * @return builder
         * 
         */
        public Builder loggingQueryDetails(CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs loggingQueryDetails) {
            return loggingQueryDetails(Output.of(loggingQueryDetails));
        }

        /**
         * @param loggingQueryType (Updatable) Logging query type for data source (Sighting/Insight)
         * 
         * @return builder
         * 
         */
        public Builder loggingQueryType(@Nullable Output<String> loggingQueryType) {
            $.loggingQueryType = loggingQueryType;
            return this;
        }

        /**
         * @param loggingQueryType (Updatable) Logging query type for data source (Sighting/Insight)
         * 
         * @return builder
         * 
         */
        public Builder loggingQueryType(String loggingQueryType) {
            return loggingQueryType(Output.of(loggingQueryType));
        }

        /**
         * @param operator (Updatable) Operator used in Data Soruce
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator (Updatable) Operator used in Data Soruce
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param query (Updatable) The continuous query expression that is run periodically.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query (Updatable) The continuous query expression that is run periodically.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param queryStartTime (Updatable) Time when the query can start, if not specified it can start immediately.
         * 
         * @return builder
         * 
         */
        public Builder queryStartTime(@Nullable Output<CloudGuardDataSourceDataSourceDetailsQueryStartTimeArgs> queryStartTime) {
            $.queryStartTime = queryStartTime;
            return this;
        }

        /**
         * @param queryStartTime (Updatable) Time when the query can start, if not specified it can start immediately.
         * 
         * @return builder
         * 
         */
        public Builder queryStartTime(CloudGuardDataSourceDataSourceDetailsQueryStartTimeArgs queryStartTime) {
            return queryStartTime(Output.of(queryStartTime));
        }

        /**
         * @param regions (Updatable) Logging Query regions
         * 
         * @return builder
         * 
         */
        public Builder regions(@Nullable Output<List<String>> regions) {
            $.regions = regions;
            return this;
        }

        /**
         * @param regions (Updatable) Logging Query regions
         * 
         * @return builder
         * 
         */
        public Builder regions(List<String> regions) {
            return regions(Output.of(regions));
        }

        /**
         * @param regions (Updatable) Logging Query regions
         * 
         * @return builder
         * 
         */
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        /**
         * @param threshold (Updatable) The integer value that must be exceeded, fall below or equal to (depending on the operator), the query result to trigger an event.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold (Updatable) The integer value that must be exceeded, fall below or equal to (depending on the operator), the query result to trigger an event.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        public CloudGuardDataSourceDataSourceDetailsArgs build() {
            if ($.dataSourceFeedProvider == null) {
                throw new MissingRequiredPropertyException("CloudGuardDataSourceDataSourceDetailsArgs", "dataSourceFeedProvider");
            }
            return $;
        }
    }

}
