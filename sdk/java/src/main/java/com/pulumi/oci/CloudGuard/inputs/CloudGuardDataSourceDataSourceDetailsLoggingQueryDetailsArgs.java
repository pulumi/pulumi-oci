// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs Empty = new CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs();

    /**
     * (Updatable) The key entities count used for data source query
     * 
     */
    @Import(name="keyEntitiesCount")
    private @Nullable Output<Integer> keyEntitiesCount;

    /**
     * @return (Updatable) The key entities count used for data source query
     * 
     */
    public Optional<Output<Integer>> keyEntitiesCount() {
        return Optional.ofNullable(this.keyEntitiesCount);
    }

    /**
     * (Updatable) Logging query type for data source
     * 
     */
    @Import(name="loggingQueryType", required=true)
    private Output<String> loggingQueryType;

    /**
     * @return (Updatable) Logging query type for data source
     * 
     */
    public Output<String> loggingQueryType() {
        return this.loggingQueryType;
    }

    private CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs() {}

    private CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs(CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs $) {
        this.keyEntitiesCount = $.keyEntitiesCount;
        this.loggingQueryType = $.loggingQueryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs $;

        public Builder() {
            $ = new CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs();
        }

        public Builder(CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs defaults) {
            $ = new CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyEntitiesCount (Updatable) The key entities count used for data source query
         * 
         * @return builder
         * 
         */
        public Builder keyEntitiesCount(@Nullable Output<Integer> keyEntitiesCount) {
            $.keyEntitiesCount = keyEntitiesCount;
            return this;
        }

        /**
         * @param keyEntitiesCount (Updatable) The key entities count used for data source query
         * 
         * @return builder
         * 
         */
        public Builder keyEntitiesCount(Integer keyEntitiesCount) {
            return keyEntitiesCount(Output.of(keyEntitiesCount));
        }

        /**
         * @param loggingQueryType (Updatable) Logging query type for data source
         * 
         * @return builder
         * 
         */
        public Builder loggingQueryType(Output<String> loggingQueryType) {
            $.loggingQueryType = loggingQueryType;
            return this;
        }

        /**
         * @param loggingQueryType (Updatable) Logging query type for data source
         * 
         * @return builder
         * 
         */
        public Builder loggingQueryType(String loggingQueryType) {
            return loggingQueryType(Output.of(loggingQueryType));
        }

        public CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs build() {
            if ($.loggingQueryType == null) {
                throw new MissingRequiredPropertyException("CloudGuardDataSourceDataSourceDetailsLoggingQueryDetailsArgs", "loggingQueryType");
            }
            return $;
        }
    }

}
