// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.DetectorRecipeDetectorRuleDetailsConfigurationArgs;
import com.pulumi.oci.CloudGuard.inputs.DetectorRecipeDetectorRuleDetailsEntitiesMappingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DetectorRecipeDetectorRuleDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetectorRecipeDetectorRuleDetailsArgs Empty = new DetectorRecipeDetectorRuleDetailsArgs();

    /**
     * (Updatable) The base condition resource.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return (Updatable) The base condition resource.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * (Updatable) List of detector rule configurations
     * 
     */
    @Import(name="configurations")
    private @Nullable Output<List<DetectorRecipeDetectorRuleDetailsConfigurationArgs>> configurations;

    /**
     * @return (Updatable) List of detector rule configurations
     * 
     */
    public Optional<Output<List<DetectorRecipeDetectorRuleDetailsConfigurationArgs>>> configurations() {
        return Optional.ofNullable(this.configurations);
    }

    /**
     * (Updatable) The unique identifier of the attached data source
     * 
     */
    @Import(name="dataSourceId")
    private @Nullable Output<String> dataSourceId;

    /**
     * @return (Updatable) The unique identifier of the attached data source
     * 
     */
    public Optional<Output<String>> dataSourceId() {
        return Optional.ofNullable(this.dataSourceId);
    }

    /**
     * (Updatable) Description for the detector rule
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Description for the detector rule
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Data source entities mapping for a detector rule
     * 
     */
    @Import(name="entitiesMappings")
    private @Nullable Output<List<DetectorRecipeDetectorRuleDetailsEntitiesMappingArgs>> entitiesMappings;

    /**
     * @return (Updatable) Data source entities mapping for a detector rule
     * 
     */
    public Optional<Output<List<DetectorRecipeDetectorRuleDetailsEntitiesMappingArgs>>> entitiesMappings() {
        return Optional.ofNullable(this.entitiesMappings);
    }

    /**
     * Can the rule be configured?
     * 
     */
    @Import(name="isConfigurationAllowed")
    private @Nullable Output<Boolean> isConfigurationAllowed;

    /**
     * @return Can the rule be configured?
     * 
     */
    public Optional<Output<Boolean>> isConfigurationAllowed() {
        return Optional.ofNullable(this.isConfigurationAllowed);
    }

    /**
     * (Updatable) Enablement status of the detector rule
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Enablement status of the detector rule
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    /**
     * (Updatable) User-defined labels for a detector rule
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return (Updatable) User-defined labels for a detector rule
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * (Updatable) Recommendation for the detector rule
     * 
     */
    @Import(name="recommendation")
    private @Nullable Output<String> recommendation;

    /**
     * @return (Updatable) Recommendation for the detector rule
     * 
     */
    public Optional<Output<String>> recommendation() {
        return Optional.ofNullable(this.recommendation);
    }

    /**
     * (Updatable) The risk level of the detector rule
     * 
     */
    @Import(name="riskLevel", required=true)
    private Output<String> riskLevel;

    /**
     * @return (Updatable) The risk level of the detector rule
     * 
     */
    public Output<String> riskLevel() {
        return this.riskLevel;
    }

    private DetectorRecipeDetectorRuleDetailsArgs() {}

    private DetectorRecipeDetectorRuleDetailsArgs(DetectorRecipeDetectorRuleDetailsArgs $) {
        this.condition = $.condition;
        this.configurations = $.configurations;
        this.dataSourceId = $.dataSourceId;
        this.description = $.description;
        this.entitiesMappings = $.entitiesMappings;
        this.isConfigurationAllowed = $.isConfigurationAllowed;
        this.isEnabled = $.isEnabled;
        this.labels = $.labels;
        this.recommendation = $.recommendation;
        this.riskLevel = $.riskLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorRecipeDetectorRuleDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorRecipeDetectorRuleDetailsArgs $;

        public Builder() {
            $ = new DetectorRecipeDetectorRuleDetailsArgs();
        }

        public Builder(DetectorRecipeDetectorRuleDetailsArgs defaults) {
            $ = new DetectorRecipeDetectorRuleDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition (Updatable) The base condition resource.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Updatable) The base condition resource.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param configurations (Updatable) List of detector rule configurations
         * 
         * @return builder
         * 
         */
        public Builder configurations(@Nullable Output<List<DetectorRecipeDetectorRuleDetailsConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations (Updatable) List of detector rule configurations
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<DetectorRecipeDetectorRuleDetailsConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations (Updatable) List of detector rule configurations
         * 
         * @return builder
         * 
         */
        public Builder configurations(DetectorRecipeDetectorRuleDetailsConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param dataSourceId (Updatable) The unique identifier of the attached data source
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(@Nullable Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param dataSourceId (Updatable) The unique identifier of the attached data source
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        /**
         * @param description (Updatable) Description for the detector rule
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Description for the detector rule
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param entitiesMappings (Updatable) Data source entities mapping for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder entitiesMappings(@Nullable Output<List<DetectorRecipeDetectorRuleDetailsEntitiesMappingArgs>> entitiesMappings) {
            $.entitiesMappings = entitiesMappings;
            return this;
        }

        /**
         * @param entitiesMappings (Updatable) Data source entities mapping for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder entitiesMappings(List<DetectorRecipeDetectorRuleDetailsEntitiesMappingArgs> entitiesMappings) {
            return entitiesMappings(Output.of(entitiesMappings));
        }

        /**
         * @param entitiesMappings (Updatable) Data source entities mapping for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder entitiesMappings(DetectorRecipeDetectorRuleDetailsEntitiesMappingArgs... entitiesMappings) {
            return entitiesMappings(List.of(entitiesMappings));
        }

        /**
         * @param isConfigurationAllowed Can the rule be configured?
         * 
         * @return builder
         * 
         */
        public Builder isConfigurationAllowed(@Nullable Output<Boolean> isConfigurationAllowed) {
            $.isConfigurationAllowed = isConfigurationAllowed;
            return this;
        }

        /**
         * @param isConfigurationAllowed Can the rule be configured?
         * 
         * @return builder
         * 
         */
        public Builder isConfigurationAllowed(Boolean isConfigurationAllowed) {
            return isConfigurationAllowed(Output.of(isConfigurationAllowed));
        }

        /**
         * @param isEnabled (Updatable) Enablement status of the detector rule
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Enablement status of the detector rule
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param labels (Updatable) User-defined labels for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels (Updatable) User-defined labels for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels (Updatable) User-defined labels for a detector rule
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param recommendation (Updatable) Recommendation for the detector rule
         * 
         * @return builder
         * 
         */
        public Builder recommendation(@Nullable Output<String> recommendation) {
            $.recommendation = recommendation;
            return this;
        }

        /**
         * @param recommendation (Updatable) Recommendation for the detector rule
         * 
         * @return builder
         * 
         */
        public Builder recommendation(String recommendation) {
            return recommendation(Output.of(recommendation));
        }

        /**
         * @param riskLevel (Updatable) The risk level of the detector rule
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(Output<String> riskLevel) {
            $.riskLevel = riskLevel;
            return this;
        }

        /**
         * @param riskLevel (Updatable) The risk level of the detector rule
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(String riskLevel) {
            return riskLevel(Output.of(riskLevel));
        }

        public DetectorRecipeDetectorRuleDetailsArgs build() {
            if ($.isEnabled == null) {
                throw new MissingRequiredPropertyException("DetectorRecipeDetectorRuleDetailsArgs", "isEnabled");
            }
            if ($.riskLevel == null) {
                throw new MissingRequiredPropertyException("DetectorRecipeDetectorRuleDetailsArgs", "riskLevel");
            }
            return $;
        }
    }

}
