// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.GetDataSourceEventsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDataSourceEventsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataSourceEventsArgs Empty = new GetDataSourceEventsArgs();

    /**
     * DataSource OCID
     * 
     */
    @Import(name="dataSourceId", required=true)
    private Output<String> dataSourceId;

    /**
     * @return DataSource OCID
     * 
     */
    public Output<String> dataSourceId() {
        return this.dataSourceId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDataSourceEventsFilterArgs>> filters;

    public Optional<Output<List<GetDataSourceEventsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resource their region matches the given region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return A filter to return only resource their region matches the given region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private GetDataSourceEventsArgs() {}

    private GetDataSourceEventsArgs(GetDataSourceEventsArgs $) {
        this.dataSourceId = $.dataSourceId;
        this.filters = $.filters;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataSourceEventsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataSourceEventsArgs $;

        public Builder() {
            $ = new GetDataSourceEventsArgs();
        }

        public Builder(GetDataSourceEventsArgs defaults) {
            $ = new GetDataSourceEventsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSourceId DataSource OCID
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param dataSourceId DataSource OCID
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        public Builder filters(@Nullable Output<List<GetDataSourceEventsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDataSourceEventsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDataSourceEventsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param region A filter to return only resource their region matches the given region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A filter to return only resource their region matches the given region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public GetDataSourceEventsArgs build() {
            if ($.dataSourceId == null) {
                throw new MissingRequiredPropertyException("GetDataSourceEventsArgs", "dataSourceId");
            }
            return $;
        }
    }

}
