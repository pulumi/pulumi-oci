// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.GetDataSourceEventsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDataSourceEventsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataSourceEventsPlainArgs Empty = new GetDataSourceEventsPlainArgs();

    /**
     * Data source OCID.
     * 
     */
    @Import(name="dataSourceId", required=true)
    private String dataSourceId;

    /**
     * @return Data source OCID.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }

    @Import(name="filters")
    private @Nullable List<GetDataSourceEventsFilter> filters;

    public Optional<List<GetDataSourceEventsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resource where their region matches the given region.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return A filter to return only resource where their region matches the given region.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    private GetDataSourceEventsPlainArgs() {}

    private GetDataSourceEventsPlainArgs(GetDataSourceEventsPlainArgs $) {
        this.dataSourceId = $.dataSourceId;
        this.filters = $.filters;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataSourceEventsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataSourceEventsPlainArgs $;

        public Builder() {
            $ = new GetDataSourceEventsPlainArgs();
        }

        public Builder(GetDataSourceEventsPlainArgs defaults) {
            $ = new GetDataSourceEventsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSourceId Data source OCID.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(String dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        public Builder filters(@Nullable List<GetDataSourceEventsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDataSourceEventsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param region A filter to return only resource where their region matches the given region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        public GetDataSourceEventsPlainArgs build() {
            if ($.dataSourceId == null) {
                throw new MissingRequiredPropertyException("GetDataSourceEventsPlainArgs", "dataSourceId");
            }
            return $;
        }
    }

}
