// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.GetDataSourcesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDataSourcesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataSourcesPlainArgs Empty = new GetDataSourcesPlainArgs();

    /**
     * Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * The OCID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
     * 
     */
    @Import(name="dataSourceFeedProvider")
    private @Nullable String dataSourceFeedProvider;

    /**
     * @return A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
     * 
     */
    public Optional<String> dataSourceFeedProvider() {
        return Optional.ofNullable(this.dataSourceFeedProvider);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetDataSourcesFilter> filters;

    public Optional<List<GetDataSourcesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources where their query type matches the given LoggingQueryType.
     * 
     */
    @Import(name="loggingQueryType")
    private @Nullable String loggingQueryType;

    /**
     * @return A filter to return only resources where their query type matches the given LoggingQueryType.
     * 
     */
    public Optional<String> loggingQueryType() {
        return Optional.ofNullable(this.loggingQueryType);
    }

    /**
     * The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetDataSourcesPlainArgs() {}

    private GetDataSourcesPlainArgs(GetDataSourcesPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.dataSourceFeedProvider = $.dataSourceFeedProvider;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.loggingQueryType = $.loggingQueryType;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataSourcesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataSourcesPlainArgs $;

        public Builder() {
            $ = new GetDataSourcesPlainArgs();
        }

        public Builder(GetDataSourcesPlainArgs defaults) {
            $ = new GetDataSourcesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param dataSourceFeedProvider A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
         * 
         * @return builder
         * 
         */
        public Builder dataSourceFeedProvider(@Nullable String dataSourceFeedProvider) {
            $.dataSourceFeedProvider = dataSourceFeedProvider;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetDataSourcesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDataSourcesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param loggingQueryType A filter to return only resources where their query type matches the given LoggingQueryType.
         * 
         * @return builder
         * 
         */
        public Builder loggingQueryType(@Nullable String loggingQueryType) {
            $.loggingQueryType = loggingQueryType;
            return this;
        }

        /**
         * @param state The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetDataSourcesPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDataSourcesPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
