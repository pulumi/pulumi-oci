// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.inputs.GetProblemEntitiesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProblemEntitiesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProblemEntitiesPlainArgs Empty = new GetProblemEntitiesPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetProblemEntitiesFilter> filters;

    public Optional<List<GetProblemEntitiesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * OCID of the problem.
     * 
     */
    @Import(name="problemId", required=true)
    private String problemId;

    /**
     * @return OCID of the problem.
     * 
     */
    public String problemId() {
        return this.problemId;
    }

    private GetProblemEntitiesPlainArgs() {}

    private GetProblemEntitiesPlainArgs(GetProblemEntitiesPlainArgs $) {
        this.filters = $.filters;
        this.problemId = $.problemId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProblemEntitiesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProblemEntitiesPlainArgs $;

        public Builder() {
            $ = new GetProblemEntitiesPlainArgs();
        }

        public Builder(GetProblemEntitiesPlainArgs defaults) {
            $ = new GetProblemEntitiesPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetProblemEntitiesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetProblemEntitiesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param problemId OCID of the problem.
         * 
         * @return builder
         * 
         */
        public Builder problemId(String problemId) {
            $.problemId = problemId;
            return this;
        }

        public GetProblemEntitiesPlainArgs build() {
            if ($.problemId == null) {
                throw new MissingRequiredPropertyException("GetProblemEntitiesPlainArgs", "problemId");
            }
            return $;
        }
    }

}
