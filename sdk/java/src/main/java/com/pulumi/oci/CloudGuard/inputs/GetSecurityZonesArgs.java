// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudGuard.inputs.GetSecurityZonesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityZonesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityZonesArgs Empty = new GetSecurityZonesArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSecurityZonesFilterArgs>> filters;

    public Optional<Output<List<GetSecurityZonesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The unique identifier of the security zone (`SecurityZone`)
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The unique identifier of the security zone (`SecurityZone`)
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * security zones in the subtree
     * 
     */
    @Import(name="isRequiredSecurityZonesInSubtree")
    private @Nullable Output<Boolean> isRequiredSecurityZonesInSubtree;

    /**
     * @return security zones in the subtree
     * 
     */
    public Optional<Output<Boolean>> isRequiredSecurityZonesInSubtree() {
        return Optional.ofNullable(this.isRequiredSecurityZonesInSubtree);
    }

    /**
     * The unique identifier of the security zone recipe (`SecurityRecipe`)
     * 
     */
    @Import(name="securityRecipeId")
    private @Nullable Output<String> securityRecipeId;

    /**
     * @return The unique identifier of the security zone recipe (`SecurityRecipe`)
     * 
     */
    public Optional<Output<String>> securityRecipeId() {
        return Optional.ofNullable(this.securityRecipeId);
    }

    /**
     * The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetSecurityZonesArgs() {}

    private GetSecurityZonesArgs(GetSecurityZonesArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.id = $.id;
        this.isRequiredSecurityZonesInSubtree = $.isRequiredSecurityZonesInSubtree;
        this.securityRecipeId = $.securityRecipeId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityZonesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityZonesArgs $;

        public Builder() {
            $ = new GetSecurityZonesArgs();
        }

        public Builder(GetSecurityZonesArgs defaults) {
            $ = new GetSecurityZonesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetSecurityZonesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSecurityZonesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSecurityZonesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id The unique identifier of the security zone (`SecurityZone`)
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier of the security zone (`SecurityZone`)
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isRequiredSecurityZonesInSubtree security zones in the subtree
         * 
         * @return builder
         * 
         */
        public Builder isRequiredSecurityZonesInSubtree(@Nullable Output<Boolean> isRequiredSecurityZonesInSubtree) {
            $.isRequiredSecurityZonesInSubtree = isRequiredSecurityZonesInSubtree;
            return this;
        }

        /**
         * @param isRequiredSecurityZonesInSubtree security zones in the subtree
         * 
         * @return builder
         * 
         */
        public Builder isRequiredSecurityZonesInSubtree(Boolean isRequiredSecurityZonesInSubtree) {
            return isRequiredSecurityZonesInSubtree(Output.of(isRequiredSecurityZonesInSubtree));
        }

        /**
         * @param securityRecipeId The unique identifier of the security zone recipe (`SecurityRecipe`)
         * 
         * @return builder
         * 
         */
        public Builder securityRecipeId(@Nullable Output<String> securityRecipeId) {
            $.securityRecipeId = securityRecipeId;
            return this;
        }

        /**
         * @param securityRecipeId The unique identifier of the security zone recipe (`SecurityRecipe`)
         * 
         * @return builder
         * 
         */
        public Builder securityRecipeId(String securityRecipeId) {
            return securityRecipeId(Output.of(securityRecipeId));
        }

        /**
         * @param state The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetSecurityZonesArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            return $;
        }
    }

}
