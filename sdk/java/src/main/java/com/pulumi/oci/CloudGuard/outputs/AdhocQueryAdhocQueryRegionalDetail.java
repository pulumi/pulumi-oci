// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AdhocQueryAdhocQueryRegionalDetail {
    /**
     * @return Expected number of instances on which query should run
     * 
     */
    private @Nullable String expectedCount;
    /**
     * @return Number of instances on which query expired
     * 
     */
    private @Nullable String expiredCount;
    /**
     * @return Number of instances on which query failed
     * 
     */
    private @Nullable String failedCount;
    /**
     * @return Region name
     * 
     */
    private @Nullable String region;
    /**
     * @return error message to show if adhoc query fails in a region
     * 
     */
    private @Nullable String regionalError;
    /**
     * @return adhoc query status of the region
     * 
     */
    private @Nullable String regionalStatus;
    /**
     * @return Number of instances on which query succeeded
     * 
     */
    private @Nullable String succeededCount;

    private AdhocQueryAdhocQueryRegionalDetail() {}
    /**
     * @return Expected number of instances on which query should run
     * 
     */
    public Optional<String> expectedCount() {
        return Optional.ofNullable(this.expectedCount);
    }
    /**
     * @return Number of instances on which query expired
     * 
     */
    public Optional<String> expiredCount() {
        return Optional.ofNullable(this.expiredCount);
    }
    /**
     * @return Number of instances on which query failed
     * 
     */
    public Optional<String> failedCount() {
        return Optional.ofNullable(this.failedCount);
    }
    /**
     * @return Region name
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return error message to show if adhoc query fails in a region
     * 
     */
    public Optional<String> regionalError() {
        return Optional.ofNullable(this.regionalError);
    }
    /**
     * @return adhoc query status of the region
     * 
     */
    public Optional<String> regionalStatus() {
        return Optional.ofNullable(this.regionalStatus);
    }
    /**
     * @return Number of instances on which query succeeded
     * 
     */
    public Optional<String> succeededCount() {
        return Optional.ofNullable(this.succeededCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AdhocQueryAdhocQueryRegionalDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String expectedCount;
        private @Nullable String expiredCount;
        private @Nullable String failedCount;
        private @Nullable String region;
        private @Nullable String regionalError;
        private @Nullable String regionalStatus;
        private @Nullable String succeededCount;
        public Builder() {}
        public Builder(AdhocQueryAdhocQueryRegionalDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expectedCount = defaults.expectedCount;
    	      this.expiredCount = defaults.expiredCount;
    	      this.failedCount = defaults.failedCount;
    	      this.region = defaults.region;
    	      this.regionalError = defaults.regionalError;
    	      this.regionalStatus = defaults.regionalStatus;
    	      this.succeededCount = defaults.succeededCount;
        }

        @CustomType.Setter
        public Builder expectedCount(@Nullable String expectedCount) {

            this.expectedCount = expectedCount;
            return this;
        }
        @CustomType.Setter
        public Builder expiredCount(@Nullable String expiredCount) {

            this.expiredCount = expiredCount;
            return this;
        }
        @CustomType.Setter
        public Builder failedCount(@Nullable String failedCount) {

            this.failedCount = failedCount;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder regionalError(@Nullable String regionalError) {

            this.regionalError = regionalError;
            return this;
        }
        @CustomType.Setter
        public Builder regionalStatus(@Nullable String regionalStatus) {

            this.regionalStatus = regionalStatus;
            return this;
        }
        @CustomType.Setter
        public Builder succeededCount(@Nullable String succeededCount) {

            this.succeededCount = succeededCount;
            return this;
        }
        public AdhocQueryAdhocQueryRegionalDetail build() {
            final var _resultValue = new AdhocQueryAdhocQueryRegionalDetail();
            _resultValue.expectedCount = expectedCount;
            _resultValue.expiredCount = expiredCount;
            _resultValue.failedCount = failedCount;
            _resultValue.region = region;
            _resultValue.regionalError = regionalError;
            _resultValue.regionalStatus = regionalStatus;
            _resultValue.succeededCount = succeededCount;
            return _resultValue;
        }
    }
}
