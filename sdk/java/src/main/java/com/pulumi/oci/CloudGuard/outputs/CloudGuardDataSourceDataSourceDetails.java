// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails;
import com.pulumi.oci.CloudGuard.outputs.CloudGuardDataSourceDataSourceDetailsQueryStartTime;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CloudGuardDataSourceDataSourceDetails {
    /**
     * @return (Updatable) The additional entities count used for data source query.
     * 
     */
    private @Nullable Integer additionalEntitiesCount;
    /**
     * @return (Updatable) Possible type of dataSourceFeed Provider(LoggingQuery)
     * 
     */
    private String dataSourceFeedProvider;
    /**
     * @return (Updatable) Interval in minutes that query is run periodically.
     * 
     */
    private @Nullable Integer intervalInMinutes;
    /**
     * @return (Updatable) Additional details specific to the data source type (Sighting/Insight).
     * 
     */
    private @Nullable CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails loggingQueryDetails;
    /**
     * @return (Updatable) Logging query type for data source (Sighting/Insight)
     * 
     */
    private @Nullable String loggingQueryType;
    /**
     * @return (Updatable) Operator used in Data Soruce
     * 
     */
    private @Nullable String operator;
    /**
     * @return (Updatable) The continuous query expression that is run periodically.
     * 
     */
    private @Nullable String query;
    /**
     * @return (Updatable) Continuous query start policy object
     * 
     */
    private @Nullable CloudGuardDataSourceDataSourceDetailsQueryStartTime queryStartTime;
    /**
     * @return (Updatable) Logging Query regions
     * 
     */
    private @Nullable List<String> regions;
    /**
     * @return (Updatable) The integer value that must be exceeded, fall below or equal to (depending on the operator), the query result to trigger an event.
     * 
     */
    private @Nullable Integer threshold;

    private CloudGuardDataSourceDataSourceDetails() {}
    /**
     * @return (Updatable) The additional entities count used for data source query.
     * 
     */
    public Optional<Integer> additionalEntitiesCount() {
        return Optional.ofNullable(this.additionalEntitiesCount);
    }
    /**
     * @return (Updatable) Possible type of dataSourceFeed Provider(LoggingQuery)
     * 
     */
    public String dataSourceFeedProvider() {
        return this.dataSourceFeedProvider;
    }
    /**
     * @return (Updatable) Interval in minutes that query is run periodically.
     * 
     */
    public Optional<Integer> intervalInMinutes() {
        return Optional.ofNullable(this.intervalInMinutes);
    }
    /**
     * @return (Updatable) Additional details specific to the data source type (Sighting/Insight).
     * 
     */
    public Optional<CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails> loggingQueryDetails() {
        return Optional.ofNullable(this.loggingQueryDetails);
    }
    /**
     * @return (Updatable) Logging query type for data source (Sighting/Insight)
     * 
     */
    public Optional<String> loggingQueryType() {
        return Optional.ofNullable(this.loggingQueryType);
    }
    /**
     * @return (Updatable) Operator used in Data Soruce
     * 
     */
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }
    /**
     * @return (Updatable) The continuous query expression that is run periodically.
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }
    /**
     * @return (Updatable) Continuous query start policy object
     * 
     */
    public Optional<CloudGuardDataSourceDataSourceDetailsQueryStartTime> queryStartTime() {
        return Optional.ofNullable(this.queryStartTime);
    }
    /**
     * @return (Updatable) Logging Query regions
     * 
     */
    public List<String> regions() {
        return this.regions == null ? List.of() : this.regions;
    }
    /**
     * @return (Updatable) The integer value that must be exceeded, fall below or equal to (depending on the operator), the query result to trigger an event.
     * 
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudGuardDataSourceDataSourceDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer additionalEntitiesCount;
        private String dataSourceFeedProvider;
        private @Nullable Integer intervalInMinutes;
        private @Nullable CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails loggingQueryDetails;
        private @Nullable String loggingQueryType;
        private @Nullable String operator;
        private @Nullable String query;
        private @Nullable CloudGuardDataSourceDataSourceDetailsQueryStartTime queryStartTime;
        private @Nullable List<String> regions;
        private @Nullable Integer threshold;
        public Builder() {}
        public Builder(CloudGuardDataSourceDataSourceDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalEntitiesCount = defaults.additionalEntitiesCount;
    	      this.dataSourceFeedProvider = defaults.dataSourceFeedProvider;
    	      this.intervalInMinutes = defaults.intervalInMinutes;
    	      this.loggingQueryDetails = defaults.loggingQueryDetails;
    	      this.loggingQueryType = defaults.loggingQueryType;
    	      this.operator = defaults.operator;
    	      this.query = defaults.query;
    	      this.queryStartTime = defaults.queryStartTime;
    	      this.regions = defaults.regions;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder additionalEntitiesCount(@Nullable Integer additionalEntitiesCount) {

            this.additionalEntitiesCount = additionalEntitiesCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceFeedProvider(String dataSourceFeedProvider) {
            if (dataSourceFeedProvider == null) {
              throw new MissingRequiredPropertyException("CloudGuardDataSourceDataSourceDetails", "dataSourceFeedProvider");
            }
            this.dataSourceFeedProvider = dataSourceFeedProvider;
            return this;
        }
        @CustomType.Setter
        public Builder intervalInMinutes(@Nullable Integer intervalInMinutes) {

            this.intervalInMinutes = intervalInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder loggingQueryDetails(@Nullable CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails loggingQueryDetails) {

            this.loggingQueryDetails = loggingQueryDetails;
            return this;
        }
        @CustomType.Setter
        public Builder loggingQueryType(@Nullable String loggingQueryType) {

            this.loggingQueryType = loggingQueryType;
            return this;
        }
        @CustomType.Setter
        public Builder operator(@Nullable String operator) {

            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {

            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder queryStartTime(@Nullable CloudGuardDataSourceDataSourceDetailsQueryStartTime queryStartTime) {

            this.queryStartTime = queryStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder regions(@Nullable List<String> regions) {

            this.regions = regions;
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Integer threshold) {

            this.threshold = threshold;
            return this;
        }
        public CloudGuardDataSourceDataSourceDetails build() {
            final var _resultValue = new CloudGuardDataSourceDataSourceDetails();
            _resultValue.additionalEntitiesCount = additionalEntitiesCount;
            _resultValue.dataSourceFeedProvider = dataSourceFeedProvider;
            _resultValue.intervalInMinutes = intervalInMinutes;
            _resultValue.loggingQueryDetails = loggingQueryDetails;
            _resultValue.loggingQueryType = loggingQueryType;
            _resultValue.operator = operator;
            _resultValue.query = query;
            _resultValue.queryStartTime = queryStartTime;
            _resultValue.regions = regions;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
