// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail {
    /**
     * @return Expected number of instances on which query should run
     * 
     */
    private String expectedCount;
    /**
     * @return Number of instances on which query expired
     * 
     */
    private String expiredCount;
    /**
     * @return Number of instances on which query failed
     * 
     */
    private String failedCount;
    /**
     * @return Region name
     * 
     */
    private String region;
    /**
     * @return error message to show if adhoc query fails in a region
     * 
     */
    private String regionalError;
    /**
     * @return adhoc query status of the region
     * 
     */
    private String regionalStatus;
    /**
     * @return Number of instances on which query succeeded
     * 
     */
    private String succeededCount;

    private GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail() {}
    /**
     * @return Expected number of instances on which query should run
     * 
     */
    public String expectedCount() {
        return this.expectedCount;
    }
    /**
     * @return Number of instances on which query expired
     * 
     */
    public String expiredCount() {
        return this.expiredCount;
    }
    /**
     * @return Number of instances on which query failed
     * 
     */
    public String failedCount() {
        return this.failedCount;
    }
    /**
     * @return Region name
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return error message to show if adhoc query fails in a region
     * 
     */
    public String regionalError() {
        return this.regionalError;
    }
    /**
     * @return adhoc query status of the region
     * 
     */
    public String regionalStatus() {
        return this.regionalStatus;
    }
    /**
     * @return Number of instances on which query succeeded
     * 
     */
    public String succeededCount() {
        return this.succeededCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String expectedCount;
        private String expiredCount;
        private String failedCount;
        private String region;
        private String regionalError;
        private String regionalStatus;
        private String succeededCount;
        public Builder() {}
        public Builder(GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expectedCount = defaults.expectedCount;
    	      this.expiredCount = defaults.expiredCount;
    	      this.failedCount = defaults.failedCount;
    	      this.region = defaults.region;
    	      this.regionalError = defaults.regionalError;
    	      this.regionalStatus = defaults.regionalStatus;
    	      this.succeededCount = defaults.succeededCount;
        }

        @CustomType.Setter
        public Builder expectedCount(String expectedCount) {
            if (expectedCount == null) {
              throw new MissingRequiredPropertyException("GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail", "expectedCount");
            }
            this.expectedCount = expectedCount;
            return this;
        }
        @CustomType.Setter
        public Builder expiredCount(String expiredCount) {
            if (expiredCount == null) {
              throw new MissingRequiredPropertyException("GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail", "expiredCount");
            }
            this.expiredCount = expiredCount;
            return this;
        }
        @CustomType.Setter
        public Builder failedCount(String failedCount) {
            if (failedCount == null) {
              throw new MissingRequiredPropertyException("GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail", "failedCount");
            }
            this.failedCount = failedCount;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder regionalError(String regionalError) {
            if (regionalError == null) {
              throw new MissingRequiredPropertyException("GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail", "regionalError");
            }
            this.regionalError = regionalError;
            return this;
        }
        @CustomType.Setter
        public Builder regionalStatus(String regionalStatus) {
            if (regionalStatus == null) {
              throw new MissingRequiredPropertyException("GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail", "regionalStatus");
            }
            this.regionalStatus = regionalStatus;
            return this;
        }
        @CustomType.Setter
        public Builder succeededCount(String succeededCount) {
            if (succeededCount == null) {
              throw new MissingRequiredPropertyException("GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail", "succeededCount");
            }
            this.succeededCount = succeededCount;
            return this;
        }
        public GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail build() {
            final var _resultValue = new GetAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail();
            _resultValue.expectedCount = expectedCount;
            _resultValue.expiredCount = expiredCount;
            _resultValue.failedCount = failedCount;
            _resultValue.region = region;
            _resultValue.regionalError = regionalError;
            _resultValue.regionalStatus = regionalStatus;
            _resultValue.succeededCount = succeededCount;
            return _resultValue;
        }
    }
}
