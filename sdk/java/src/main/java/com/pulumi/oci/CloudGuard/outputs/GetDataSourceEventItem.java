// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourceEventItemEventInfo;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataSourceEventItem {
    /**
     * @return Data source event comments
     * 
     */
    private String comments;
    /**
     * @return DataSource OCID
     * 
     */
    private String dataSourceId;
    /**
     * @return Data source event date time
     * 
     */
    private String eventDate;
    /**
     * @return Event info of a data source.
     * 
     */
    private List<GetDataSourceEventItemEventInfo> eventInfos;
    /**
     * @return A filter to return only resource their region matches the given region.
     * 
     */
    private String region;
    /**
     * @return Current data source event info status
     * 
     */
    private String status;
    /**
     * @return Data source event created time
     * 
     */
    private String timeCreated;

    private GetDataSourceEventItem() {}
    /**
     * @return Data source event comments
     * 
     */
    public String comments() {
        return this.comments;
    }
    /**
     * @return DataSource OCID
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return Data source event date time
     * 
     */
    public String eventDate() {
        return this.eventDate;
    }
    /**
     * @return Event info of a data source.
     * 
     */
    public List<GetDataSourceEventItemEventInfo> eventInfos() {
        return this.eventInfos;
    }
    /**
     * @return A filter to return only resource their region matches the given region.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Current data source event info status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Data source event created time
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourceEventItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comments;
        private String dataSourceId;
        private String eventDate;
        private List<GetDataSourceEventItemEventInfo> eventInfos;
        private String region;
        private String status;
        private String timeCreated;
        public Builder() {}
        public Builder(GetDataSourceEventItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comments = defaults.comments;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.eventDate = defaults.eventDate;
    	      this.eventInfos = defaults.eventInfos;
    	      this.region = defaults.region;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder comments(String comments) {
            if (comments == null) {
              throw new MissingRequiredPropertyException("GetDataSourceEventItem", "comments");
            }
            this.comments = comments;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceId(String dataSourceId) {
            if (dataSourceId == null) {
              throw new MissingRequiredPropertyException("GetDataSourceEventItem", "dataSourceId");
            }
            this.dataSourceId = dataSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder eventDate(String eventDate) {
            if (eventDate == null) {
              throw new MissingRequiredPropertyException("GetDataSourceEventItem", "eventDate");
            }
            this.eventDate = eventDate;
            return this;
        }
        @CustomType.Setter
        public Builder eventInfos(List<GetDataSourceEventItemEventInfo> eventInfos) {
            if (eventInfos == null) {
              throw new MissingRequiredPropertyException("GetDataSourceEventItem", "eventInfos");
            }
            this.eventInfos = eventInfos;
            return this;
        }
        public Builder eventInfos(GetDataSourceEventItemEventInfo... eventInfos) {
            return eventInfos(List.of(eventInfos));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetDataSourceEventItem", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDataSourceEventItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDataSourceEventItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetDataSourceEventItem build() {
            final var _resultValue = new GetDataSourceEventItem();
            _resultValue.comments = comments;
            _resultValue.dataSourceId = dataSourceId;
            _resultValue.eventDate = eventDate;
            _resultValue.eventInfos = eventInfos;
            _resultValue.region = region;
            _resultValue.status = status;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
