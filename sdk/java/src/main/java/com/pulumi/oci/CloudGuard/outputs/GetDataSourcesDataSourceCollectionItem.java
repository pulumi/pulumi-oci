// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetail;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesDataSourceCollectionItemRegionStatusDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDataSourcesDataSourceCollectionItem {
    /**
     * @return The OCID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Details specific to the data source type.
     * 
     */
    private List<GetDataSourcesDataSourceCollectionItemDataSourceDetail> dataSourceDetails;
    /**
     * @return Information about the detector recipe and rule attached
     * 
     */
    private List<GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo> dataSourceDetectorMappingInfos;
    /**
     * @return A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
     * 
     */
    private String dataSourceFeedProvider;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return OCID for the data source
     * 
     */
    private String id;
    /**
     * @return Information about the region and status of query replication
     * 
     */
    private List<GetDataSourcesDataSourceCollectionItemRegionStatusDetail> regionStatusDetails;
    /**
     * @return The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    private String state;
    /**
     * @return Enablement status of the data source
     * 
     */
    private String status;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the Data source was created. Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the data source was updated. Format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetDataSourcesDataSourceCollectionItem() {}
    /**
     * @return The OCID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Details specific to the data source type.
     * 
     */
    public List<GetDataSourcesDataSourceCollectionItemDataSourceDetail> dataSourceDetails() {
        return this.dataSourceDetails;
    }
    /**
     * @return Information about the detector recipe and rule attached
     * 
     */
    public List<GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo> dataSourceDetectorMappingInfos() {
        return this.dataSourceDetectorMappingInfos;
    }
    /**
     * @return A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
     * 
     */
    public String dataSourceFeedProvider() {
        return this.dataSourceFeedProvider;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return OCID for the data source
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Information about the region and status of query replication
     * 
     */
    public List<GetDataSourcesDataSourceCollectionItemRegionStatusDetail> regionStatusDetails() {
        return this.regionStatusDetails;
    }
    /**
     * @return The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Enablement status of the data source
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the Data source was created. Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the data source was updated. Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourcesDataSourceCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetDataSourcesDataSourceCollectionItemDataSourceDetail> dataSourceDetails;
        private List<GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo> dataSourceDetectorMappingInfos;
        private String dataSourceFeedProvider;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetDataSourcesDataSourceCollectionItemRegionStatusDetail> regionStatusDetails;
        private String state;
        private String status;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDataSourcesDataSourceCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dataSourceDetails = defaults.dataSourceDetails;
    	      this.dataSourceDetectorMappingInfos = defaults.dataSourceDetectorMappingInfos;
    	      this.dataSourceFeedProvider = defaults.dataSourceFeedProvider;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.regionStatusDetails = defaults.regionStatusDetails;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceDetails(List<GetDataSourcesDataSourceCollectionItemDataSourceDetail> dataSourceDetails) {
            if (dataSourceDetails == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "dataSourceDetails");
            }
            this.dataSourceDetails = dataSourceDetails;
            return this;
        }
        public Builder dataSourceDetails(GetDataSourcesDataSourceCollectionItemDataSourceDetail... dataSourceDetails) {
            return dataSourceDetails(List.of(dataSourceDetails));
        }
        @CustomType.Setter
        public Builder dataSourceDetectorMappingInfos(List<GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo> dataSourceDetectorMappingInfos) {
            if (dataSourceDetectorMappingInfos == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "dataSourceDetectorMappingInfos");
            }
            this.dataSourceDetectorMappingInfos = dataSourceDetectorMappingInfos;
            return this;
        }
        public Builder dataSourceDetectorMappingInfos(GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo... dataSourceDetectorMappingInfos) {
            return dataSourceDetectorMappingInfos(List.of(dataSourceDetectorMappingInfos));
        }
        @CustomType.Setter
        public Builder dataSourceFeedProvider(String dataSourceFeedProvider) {
            if (dataSourceFeedProvider == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "dataSourceFeedProvider");
            }
            this.dataSourceFeedProvider = dataSourceFeedProvider;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder regionStatusDetails(List<GetDataSourcesDataSourceCollectionItemRegionStatusDetail> regionStatusDetails) {
            if (regionStatusDetails == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "regionStatusDetails");
            }
            this.regionStatusDetails = regionStatusDetails;
            return this;
        }
        public Builder regionStatusDetails(GetDataSourcesDataSourceCollectionItemRegionStatusDetail... regionStatusDetails) {
            return regionStatusDetails(List.of(regionStatusDetails));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetDataSourcesDataSourceCollectionItem build() {
            final var _resultValue = new GetDataSourcesDataSourceCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.dataSourceDetails = dataSourceDetails;
            _resultValue.dataSourceDetectorMappingInfos = dataSourceDetectorMappingInfos;
            _resultValue.dataSourceFeedProvider = dataSourceFeedProvider;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.regionStatusDetails = regionStatusDetails;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
