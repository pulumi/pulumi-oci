// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataSourcesDataSourceCollectionItemDataSourceDetail {
    /**
     * @return The additional entities count used for data source query
     * 
     */
    private Integer additionalEntitiesCount;
    /**
     * @return A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
     * 
     */
    private String dataSourceFeedProvider;
    /**
     * @return Description text for the query
     * 
     */
    private String description;
    /**
     * @return Interval in minutes that query is run periodically.
     * 
     */
    private Integer intervalInMinutes;
    /**
     * @return Interval in minutes which query is run periodically.
     * 
     */
    private Integer intervalInSeconds;
    /**
     * @return Details for a logging query for a data source.
     * 
     */
    private List<GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail> loggingQueryDetails;
    /**
     * @return A filter to return only resources where their query type matches the given LoggingQueryType.
     * 
     */
    private String loggingQueryType;
    /**
     * @return Operator used in data source
     * 
     */
    private String operator;
    /**
     * @return The continuous query expression that is run periodically.
     * 
     */
    private String query;
    /**
     * @return Time when the query can start. If not specified it can start immediately
     * 
     */
    private List<GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime> queryStartTimes;
    /**
     * @return List of logging query regions
     * 
     */
    private List<String> regions;
    /**
     * @return Target information in which scheduled query will be run
     * 
     */
    private List<GetDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail> scheduledQueryScopeDetails;
    /**
     * @return The integer value that must be exceeded, fall below or equal to (depending on the operator), for the query result to trigger an event
     * 
     */
    private Integer threshold;

    private GetDataSourcesDataSourceCollectionItemDataSourceDetail() {}
    /**
     * @return The additional entities count used for data source query
     * 
     */
    public Integer additionalEntitiesCount() {
        return this.additionalEntitiesCount;
    }
    /**
     * @return A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
     * 
     */
    public String dataSourceFeedProvider() {
        return this.dataSourceFeedProvider;
    }
    /**
     * @return Description text for the query
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Interval in minutes that query is run periodically.
     * 
     */
    public Integer intervalInMinutes() {
        return this.intervalInMinutes;
    }
    /**
     * @return Interval in minutes which query is run periodically.
     * 
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }
    /**
     * @return Details for a logging query for a data source.
     * 
     */
    public List<GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail> loggingQueryDetails() {
        return this.loggingQueryDetails;
    }
    /**
     * @return A filter to return only resources where their query type matches the given LoggingQueryType.
     * 
     */
    public String loggingQueryType() {
        return this.loggingQueryType;
    }
    /**
     * @return Operator used in data source
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return The continuous query expression that is run periodically.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return Time when the query can start. If not specified it can start immediately
     * 
     */
    public List<GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime> queryStartTimes() {
        return this.queryStartTimes;
    }
    /**
     * @return List of logging query regions
     * 
     */
    public List<String> regions() {
        return this.regions;
    }
    /**
     * @return Target information in which scheduled query will be run
     * 
     */
    public List<GetDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail> scheduledQueryScopeDetails() {
        return this.scheduledQueryScopeDetails;
    }
    /**
     * @return The integer value that must be exceeded, fall below or equal to (depending on the operator), for the query result to trigger an event
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourcesDataSourceCollectionItemDataSourceDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer additionalEntitiesCount;
        private String dataSourceFeedProvider;
        private String description;
        private Integer intervalInMinutes;
        private Integer intervalInSeconds;
        private List<GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail> loggingQueryDetails;
        private String loggingQueryType;
        private String operator;
        private String query;
        private List<GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime> queryStartTimes;
        private List<String> regions;
        private List<GetDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail> scheduledQueryScopeDetails;
        private Integer threshold;
        public Builder() {}
        public Builder(GetDataSourcesDataSourceCollectionItemDataSourceDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalEntitiesCount = defaults.additionalEntitiesCount;
    	      this.dataSourceFeedProvider = defaults.dataSourceFeedProvider;
    	      this.description = defaults.description;
    	      this.intervalInMinutes = defaults.intervalInMinutes;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.loggingQueryDetails = defaults.loggingQueryDetails;
    	      this.loggingQueryType = defaults.loggingQueryType;
    	      this.operator = defaults.operator;
    	      this.query = defaults.query;
    	      this.queryStartTimes = defaults.queryStartTimes;
    	      this.regions = defaults.regions;
    	      this.scheduledQueryScopeDetails = defaults.scheduledQueryScopeDetails;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder additionalEntitiesCount(Integer additionalEntitiesCount) {
            if (additionalEntitiesCount == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "additionalEntitiesCount");
            }
            this.additionalEntitiesCount = additionalEntitiesCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceFeedProvider(String dataSourceFeedProvider) {
            if (dataSourceFeedProvider == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "dataSourceFeedProvider");
            }
            this.dataSourceFeedProvider = dataSourceFeedProvider;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder intervalInMinutes(Integer intervalInMinutes) {
            if (intervalInMinutes == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "intervalInMinutes");
            }
            this.intervalInMinutes = intervalInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            if (intervalInSeconds == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "intervalInSeconds");
            }
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder loggingQueryDetails(List<GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail> loggingQueryDetails) {
            if (loggingQueryDetails == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "loggingQueryDetails");
            }
            this.loggingQueryDetails = loggingQueryDetails;
            return this;
        }
        public Builder loggingQueryDetails(GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail... loggingQueryDetails) {
            return loggingQueryDetails(List.of(loggingQueryDetails));
        }
        @CustomType.Setter
        public Builder loggingQueryType(String loggingQueryType) {
            if (loggingQueryType == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "loggingQueryType");
            }
            this.loggingQueryType = loggingQueryType;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder queryStartTimes(List<GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime> queryStartTimes) {
            if (queryStartTimes == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "queryStartTimes");
            }
            this.queryStartTimes = queryStartTimes;
            return this;
        }
        public Builder queryStartTimes(GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime... queryStartTimes) {
            return queryStartTimes(List.of(queryStartTimes));
        }
        @CustomType.Setter
        public Builder regions(List<String> regions) {
            if (regions == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "regions");
            }
            this.regions = regions;
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder scheduledQueryScopeDetails(List<GetDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail> scheduledQueryScopeDetails) {
            if (scheduledQueryScopeDetails == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "scheduledQueryScopeDetails");
            }
            this.scheduledQueryScopeDetails = scheduledQueryScopeDetails;
            return this;
        }
        public Builder scheduledQueryScopeDetails(GetDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail... scheduledQueryScopeDetails) {
            return scheduledQueryScopeDetails(List.of(scheduledQueryScopeDetails));
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetDataSourcesDataSourceCollectionItemDataSourceDetail", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public GetDataSourcesDataSourceCollectionItemDataSourceDetail build() {
            final var _resultValue = new GetDataSourcesDataSourceCollectionItemDataSourceDetail();
            _resultValue.additionalEntitiesCount = additionalEntitiesCount;
            _resultValue.dataSourceFeedProvider = dataSourceFeedProvider;
            _resultValue.description = description;
            _resultValue.intervalInMinutes = intervalInMinutes;
            _resultValue.intervalInSeconds = intervalInSeconds;
            _resultValue.loggingQueryDetails = loggingQueryDetails;
            _resultValue.loggingQueryType = loggingQueryType;
            _resultValue.operator = operator;
            _resultValue.query = query;
            _resultValue.queryStartTimes = queryStartTimes;
            _resultValue.regions = regions;
            _resultValue.scheduledQueryScopeDetails = scheduledQueryScopeDetails;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
