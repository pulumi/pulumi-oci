// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesDataSourceCollection;
import com.pulumi.oci.CloudGuard.outputs.GetDataSourcesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataSourcesResult {
    private @Nullable String accessLevel;
    /**
     * @return CompartmentId of Data source.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The list of data_source_collection.
     * 
     */
    private List<GetDataSourcesDataSourceCollection> dataSourceCollections;
    /**
     * @return Possible type of dataSourceFeed Provider(LoggingQuery)
     * 
     */
    private @Nullable String dataSourceFeedProvider;
    /**
     * @return DisplayName of Data source.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetDataSourcesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Logging query type for data source (Sighting/Insight)
     * 
     */
    private @Nullable String loggingQueryType;
    /**
     * @return The current state of the resource.
     * 
     */
    private @Nullable String state;

    private GetDataSourcesResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return CompartmentId of Data source.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The list of data_source_collection.
     * 
     */
    public List<GetDataSourcesDataSourceCollection> dataSourceCollections() {
        return this.dataSourceCollections;
    }
    /**
     * @return Possible type of dataSourceFeed Provider(LoggingQuery)
     * 
     */
    public Optional<String> dataSourceFeedProvider() {
        return Optional.ofNullable(this.dataSourceFeedProvider);
    }
    /**
     * @return DisplayName of Data source.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetDataSourcesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Logging query type for data source (Sighting/Insight)
     * 
     */
    public Optional<String> loggingQueryType() {
        return Optional.ofNullable(this.loggingQueryType);
    }
    /**
     * @return The current state of the resource.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourcesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private List<GetDataSourcesDataSourceCollection> dataSourceCollections;
        private @Nullable String dataSourceFeedProvider;
        private @Nullable String displayName;
        private @Nullable List<GetDataSourcesFilter> filters;
        private String id;
        private @Nullable String loggingQueryType;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetDataSourcesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.dataSourceCollections = defaults.dataSourceCollections;
    	      this.dataSourceFeedProvider = defaults.dataSourceFeedProvider;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.loggingQueryType = defaults.loggingQueryType;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceCollections(List<GetDataSourcesDataSourceCollection> dataSourceCollections) {
            this.dataSourceCollections = Objects.requireNonNull(dataSourceCollections);
            return this;
        }
        public Builder dataSourceCollections(GetDataSourcesDataSourceCollection... dataSourceCollections) {
            return dataSourceCollections(List.of(dataSourceCollections));
        }
        @CustomType.Setter
        public Builder dataSourceFeedProvider(@Nullable String dataSourceFeedProvider) {
            this.dataSourceFeedProvider = dataSourceFeedProvider;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDataSourcesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetDataSourcesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder loggingQueryType(@Nullable String loggingQueryType) {
            this.loggingQueryType = loggingQueryType;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetDataSourcesResult build() {
            final var o = new GetDataSourcesResult();
            o.accessLevel = accessLevel;
            o.compartmentId = compartmentId;
            o.compartmentIdInSubtree = compartmentIdInSubtree;
            o.dataSourceCollections = dataSourceCollections;
            o.dataSourceFeedProvider = dataSourceFeedProvider;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.loggingQueryType = loggingQueryType;
            o.state = state;
            return o;
        }
    }
}
