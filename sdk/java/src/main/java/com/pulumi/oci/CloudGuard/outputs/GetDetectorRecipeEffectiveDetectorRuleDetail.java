// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudGuard.outputs.GetDetectorRecipeEffectiveDetectorRuleDetailConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDetectorRecipeEffectiveDetectorRuleDetail {
    /**
     * @return Base condition object
     * 
     */
    private String condition;
    /**
     * @return Configuration details
     * 
     */
    private List<GetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations;
    /**
     * @return configuration allowed or not
     * 
     */
    private Boolean isConfigurationAllowed;
    /**
     * @return Enables the control
     * 
     */
    private Boolean isEnabled;
    /**
     * @return user defined labels for a detector rule
     * 
     */
    private List<String> labels;
    /**
     * @return The Risk Level
     * 
     */
    private String riskLevel;

    private GetDetectorRecipeEffectiveDetectorRuleDetail() {}
    /**
     * @return Base condition object
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return Configuration details
     * 
     */
    public List<GetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations() {
        return this.configurations;
    }
    /**
     * @return configuration allowed or not
     * 
     */
    public Boolean isConfigurationAllowed() {
        return this.isConfigurationAllowed;
    }
    /**
     * @return Enables the control
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return user defined labels for a detector rule
     * 
     */
    public List<String> labels() {
        return this.labels;
    }
    /**
     * @return The Risk Level
     * 
     */
    public String riskLevel() {
        return this.riskLevel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDetectorRecipeEffectiveDetectorRuleDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String condition;
        private List<GetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations;
        private Boolean isConfigurationAllowed;
        private Boolean isEnabled;
        private List<String> labels;
        private String riskLevel;
        public Builder() {}
        public Builder(GetDetectorRecipeEffectiveDetectorRuleDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.configurations = defaults.configurations;
    	      this.isConfigurationAllowed = defaults.isConfigurationAllowed;
    	      this.isEnabled = defaults.isEnabled;
    	      this.labels = defaults.labels;
    	      this.riskLevel = defaults.riskLevel;
        }

        @CustomType.Setter
        public Builder condition(String condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }
        @CustomType.Setter
        public Builder configurations(List<GetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations) {
            this.configurations = Objects.requireNonNull(configurations);
            return this;
        }
        public Builder configurations(GetDetectorRecipeEffectiveDetectorRuleDetailConfiguration... configurations) {
            return configurations(List.of(configurations));
        }
        @CustomType.Setter
        public Builder isConfigurationAllowed(Boolean isConfigurationAllowed) {
            this.isConfigurationAllowed = Objects.requireNonNull(isConfigurationAllowed);
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            this.isEnabled = Objects.requireNonNull(isEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder riskLevel(String riskLevel) {
            this.riskLevel = Objects.requireNonNull(riskLevel);
            return this;
        }
        public GetDetectorRecipeEffectiveDetectorRuleDetail build() {
            final var o = new GetDetectorRecipeEffectiveDetectorRuleDetail();
            o.condition = condition;
            o.configurations = configurations;
            o.isConfigurationAllowed = isConfigurationAllowed;
            o.isEnabled = isEnabled;
            o.labels = labels;
            o.riskLevel = riskLevel;
            return o;
        }
    }
}
