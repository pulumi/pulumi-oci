// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetDetectorRecipeDetectorRule;
import com.pulumi.oci.CloudGuard.outputs.GetDetectorRecipeEffectiveDetectorRule;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDetectorRecipeResult {
    /**
     * @return Compartment OCID of detector recipe
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Description for detector recipe detector rule
     * 
     */
    private String description;
    /**
     * @return Detector recipe for the rule
     * 
     */
    private String detector;
    private String detectorRecipeId;
    /**
     * @return Recipe type ( STANDARD, ENTERPRISE )
     * 
     */
    private String detectorRecipeType;
    /**
     * @return List of detector rules for the detector type for recipe - user input
     * 
     */
    private List<GetDetectorRecipeDetectorRule> detectorRules;
    /**
     * @return Display name of the entity
     * 
     */
    private String displayName;
    /**
     * @return List of effective detector rules for the detector type for recipe after applying defaults
     * 
     */
    private List<GetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return OCID for detector recipe
     * 
     */
    private String id;
    /**
     * @return Owner of detector recipe
     * 
     */
    private String owner;
    /**
     * @return Recipe OCID of the source recipe to be cloned
     * 
     */
    private String sourceDetectorRecipeId;
    /**
     * @return The current lifecycle state of the resource
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return List of target IDs to which the recipe is attached
     * 
     */
    private List<String> targetIds;
    /**
     * @return The date and time the detector recipe was created Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the detector recipe was last updated Format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetDetectorRecipeResult() {}
    /**
     * @return Compartment OCID of detector recipe
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description for detector recipe detector rule
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Detector recipe for the rule
     * 
     */
    public String detector() {
        return this.detector;
    }
    public String detectorRecipeId() {
        return this.detectorRecipeId;
    }
    /**
     * @return Recipe type ( STANDARD, ENTERPRISE )
     * 
     */
    public String detectorRecipeType() {
        return this.detectorRecipeType;
    }
    /**
     * @return List of detector rules for the detector type for recipe - user input
     * 
     */
    public List<GetDetectorRecipeDetectorRule> detectorRules() {
        return this.detectorRules;
    }
    /**
     * @return Display name of the entity
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return List of effective detector rules for the detector type for recipe after applying defaults
     * 
     */
    public List<GetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules() {
        return this.effectiveDetectorRules;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return OCID for detector recipe
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Owner of detector recipe
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return Recipe OCID of the source recipe to be cloned
     * 
     */
    public String sourceDetectorRecipeId() {
        return this.sourceDetectorRecipeId;
    }
    /**
     * @return The current lifecycle state of the resource
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return List of target IDs to which the recipe is attached
     * 
     */
    public List<String> targetIds() {
        return this.targetIds;
    }
    /**
     * @return The date and time the detector recipe was created Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the detector recipe was last updated Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDetectorRecipeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String detector;
        private String detectorRecipeId;
        private String detectorRecipeType;
        private List<GetDetectorRecipeDetectorRule> detectorRules;
        private String displayName;
        private List<GetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules;
        private Map<String,Object> freeformTags;
        private String id;
        private String owner;
        private String sourceDetectorRecipeId;
        private String state;
        private Map<String,Object> systemTags;
        private List<String> targetIds;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDetectorRecipeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.detector = defaults.detector;
    	      this.detectorRecipeId = defaults.detectorRecipeId;
    	      this.detectorRecipeType = defaults.detectorRecipeType;
    	      this.detectorRules = defaults.detectorRules;
    	      this.displayName = defaults.displayName;
    	      this.effectiveDetectorRules = defaults.effectiveDetectorRules;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.owner = defaults.owner;
    	      this.sourceDetectorRecipeId = defaults.sourceDetectorRecipeId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetIds = defaults.targetIds;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder detector(String detector) {
            if (detector == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "detector");
            }
            this.detector = detector;
            return this;
        }
        @CustomType.Setter
        public Builder detectorRecipeId(String detectorRecipeId) {
            if (detectorRecipeId == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "detectorRecipeId");
            }
            this.detectorRecipeId = detectorRecipeId;
            return this;
        }
        @CustomType.Setter
        public Builder detectorRecipeType(String detectorRecipeType) {
            if (detectorRecipeType == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "detectorRecipeType");
            }
            this.detectorRecipeType = detectorRecipeType;
            return this;
        }
        @CustomType.Setter
        public Builder detectorRules(List<GetDetectorRecipeDetectorRule> detectorRules) {
            if (detectorRules == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "detectorRules");
            }
            this.detectorRules = detectorRules;
            return this;
        }
        public Builder detectorRules(GetDetectorRecipeDetectorRule... detectorRules) {
            return detectorRules(List.of(detectorRules));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveDetectorRules(List<GetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules) {
            if (effectiveDetectorRules == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "effectiveDetectorRules");
            }
            this.effectiveDetectorRules = effectiveDetectorRules;
            return this;
        }
        public Builder effectiveDetectorRules(GetDetectorRecipeEffectiveDetectorRule... effectiveDetectorRules) {
            return effectiveDetectorRules(List.of(effectiveDetectorRules));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDetectorRecipeId(String sourceDetectorRecipeId) {
            if (sourceDetectorRecipeId == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "sourceDetectorRecipeId");
            }
            this.sourceDetectorRecipeId = sourceDetectorRecipeId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder targetIds(List<String> targetIds) {
            if (targetIds == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "targetIds");
            }
            this.targetIds = targetIds;
            return this;
        }
        public Builder targetIds(String... targetIds) {
            return targetIds(List.of(targetIds));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipeResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetDetectorRecipeResult build() {
            final var _resultValue = new GetDetectorRecipeResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.detector = detector;
            _resultValue.detectorRecipeId = detectorRecipeId;
            _resultValue.detectorRecipeType = detectorRecipeType;
            _resultValue.detectorRules = detectorRules;
            _resultValue.displayName = displayName;
            _resultValue.effectiveDetectorRules = effectiveDetectorRules;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.owner = owner;
            _resultValue.sourceDetectorRecipeId = sourceDetectorRecipeId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.targetIds = targetIds;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
