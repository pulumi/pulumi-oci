// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule;
import com.pulumi.oci.CloudGuard.outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail;
import com.pulumi.oci.CloudGuard.outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping;
import com.pulumi.oci.CloudGuard.outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleRuleType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule {
    /**
     * @return List of responder rules that can be used to remediate this detector rule
     * 
     */
    private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule> candidateResponderRules;
    /**
     * @return The ID of the attached data source
     * 
     */
    private String dataSourceId;
    /**
     * @return Description for detector recipe detector rule
     * 
     */
    private String description;
    /**
     * @return Detailed information for a detector.
     * 
     */
    private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail> details;
    /**
     * @return Detector recipe for the rule
     * 
     */
    private String detector;
    /**
     * @return The unique identifier of the detector rule.
     * 
     */
    private String detectorRuleId;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Data source entities mapping for the detector rule
     * 
     */
    private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping> entitiesMappings;
    /**
     * @return Is the rule cloneable?
     * 
     */
    private Boolean isCloneable;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return List of managed list types related to this rule
     * 
     */
    private List<String> managedListTypes;
    /**
     * @return Recommendation for DetectorRecipeDetectorRule resource
     * 
     */
    private String recommendation;
    /**
     * @return Resource type of the configuration to which the rule is applied
     * 
     */
    private String resourceType;
    /**
     * @return Detector rule type
     * 
     */
    private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleRuleType> ruleTypes;
    /**
     * @return Service type of the configuration to which the rule is applied
     * 
     */
    private String serviceType;
    /**
     * @return The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    private String state;
    /**
     * @return The date and time the detector recipe was created Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the detector recipe was last updated Format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule() {}
    /**
     * @return List of responder rules that can be used to remediate this detector rule
     * 
     */
    public List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule> candidateResponderRules() {
        return this.candidateResponderRules;
    }
    /**
     * @return The ID of the attached data source
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return Description for detector recipe detector rule
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Detailed information for a detector.
     * 
     */
    public List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail> details() {
        return this.details;
    }
    /**
     * @return Detector recipe for the rule
     * 
     */
    public String detector() {
        return this.detector;
    }
    /**
     * @return The unique identifier of the detector rule.
     * 
     */
    public String detectorRuleId() {
        return this.detectorRuleId;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Data source entities mapping for the detector rule
     * 
     */
    public List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping> entitiesMappings() {
        return this.entitiesMappings;
    }
    /**
     * @return Is the rule cloneable?
     * 
     */
    public Boolean isCloneable() {
        return this.isCloneable;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return List of managed list types related to this rule
     * 
     */
    public List<String> managedListTypes() {
        return this.managedListTypes;
    }
    /**
     * @return Recommendation for DetectorRecipeDetectorRule resource
     * 
     */
    public String recommendation() {
        return this.recommendation;
    }
    /**
     * @return Resource type of the configuration to which the rule is applied
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return Detector rule type
     * 
     */
    public List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleRuleType> ruleTypes() {
        return this.ruleTypes;
    }
    /**
     * @return Service type of the configuration to which the rule is applied
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the detector recipe was created Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the detector recipe was last updated Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule> candidateResponderRules;
        private String dataSourceId;
        private String description;
        private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail> details;
        private String detector;
        private String detectorRuleId;
        private String displayName;
        private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping> entitiesMappings;
        private Boolean isCloneable;
        private String lifecycleDetails;
        private List<String> managedListTypes;
        private String recommendation;
        private String resourceType;
        private List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleRuleType> ruleTypes;
        private String serviceType;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.candidateResponderRules = defaults.candidateResponderRules;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.description = defaults.description;
    	      this.details = defaults.details;
    	      this.detector = defaults.detector;
    	      this.detectorRuleId = defaults.detectorRuleId;
    	      this.displayName = defaults.displayName;
    	      this.entitiesMappings = defaults.entitiesMappings;
    	      this.isCloneable = defaults.isCloneable;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.managedListTypes = defaults.managedListTypes;
    	      this.recommendation = defaults.recommendation;
    	      this.resourceType = defaults.resourceType;
    	      this.ruleTypes = defaults.ruleTypes;
    	      this.serviceType = defaults.serviceType;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder candidateResponderRules(List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule> candidateResponderRules) {
            if (candidateResponderRules == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "candidateResponderRules");
            }
            this.candidateResponderRules = candidateResponderRules;
            return this;
        }
        public Builder candidateResponderRules(GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule... candidateResponderRules) {
            return candidateResponderRules(List.of(candidateResponderRules));
        }
        @CustomType.Setter
        public Builder dataSourceId(String dataSourceId) {
            if (dataSourceId == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "dataSourceId");
            }
            this.dataSourceId = dataSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder details(List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail> details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "details");
            }
            this.details = details;
            return this;
        }
        public Builder details(GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail... details) {
            return details(List.of(details));
        }
        @CustomType.Setter
        public Builder detector(String detector) {
            if (detector == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "detector");
            }
            this.detector = detector;
            return this;
        }
        @CustomType.Setter
        public Builder detectorRuleId(String detectorRuleId) {
            if (detectorRuleId == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "detectorRuleId");
            }
            this.detectorRuleId = detectorRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder entitiesMappings(List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping> entitiesMappings) {
            if (entitiesMappings == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "entitiesMappings");
            }
            this.entitiesMappings = entitiesMappings;
            return this;
        }
        public Builder entitiesMappings(GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping... entitiesMappings) {
            return entitiesMappings(List.of(entitiesMappings));
        }
        @CustomType.Setter
        public Builder isCloneable(Boolean isCloneable) {
            if (isCloneable == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "isCloneable");
            }
            this.isCloneable = isCloneable;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder managedListTypes(List<String> managedListTypes) {
            if (managedListTypes == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "managedListTypes");
            }
            this.managedListTypes = managedListTypes;
            return this;
        }
        public Builder managedListTypes(String... managedListTypes) {
            return managedListTypes(List.of(managedListTypes));
        }
        @CustomType.Setter
        public Builder recommendation(String recommendation) {
            if (recommendation == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "recommendation");
            }
            this.recommendation = recommendation;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder ruleTypes(List<GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleRuleType> ruleTypes) {
            if (ruleTypes == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "ruleTypes");
            }
            this.ruleTypes = ruleTypes;
            return this;
        }
        public Builder ruleTypes(GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleRuleType... ruleTypes) {
            return ruleTypes(List.of(ruleTypes));
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule build() {
            final var _resultValue = new GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule();
            _resultValue.candidateResponderRules = candidateResponderRules;
            _resultValue.dataSourceId = dataSourceId;
            _resultValue.description = description;
            _resultValue.details = details;
            _resultValue.detector = detector;
            _resultValue.detectorRuleId = detectorRuleId;
            _resultValue.displayName = displayName;
            _resultValue.entitiesMappings = entitiesMappings;
            _resultValue.isCloneable = isCloneable;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.managedListTypes = managedListTypes;
            _resultValue.recommendation = recommendation;
            _resultValue.resourceType = resourceType;
            _resultValue.ruleTypes = ruleTypes;
            _resultValue.serviceType = serviceType;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
