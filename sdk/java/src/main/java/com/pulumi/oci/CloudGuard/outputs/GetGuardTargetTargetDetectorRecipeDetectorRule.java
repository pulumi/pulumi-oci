// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetail;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGuardTargetTargetDetectorRecipeDetectorRule {
    /**
     * @return The id of the attached DataSource.
     * 
     */
    private String dataSourceId;
    /**
     * @return ResponderRule description.
     * 
     */
    private String description;
    /**
     * @return Details of ResponderRule.
     * 
     */
    private List<GetGuardTargetTargetDetectorRecipeDetectorRuleDetail> details;
    /**
     * @return detector for the rule
     * 
     */
    private String detector;
    /**
     * @return The unique identifier of the detector rule.
     * 
     */
    private String detectorRuleId;
    /**
     * @return ResponderRule display name.
     * 
     */
    private String displayName;
    /**
     * @return Data Source entities mapping for a Detector Rule
     * 
     */
    private List<GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping> entitiesMappings;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return List of cloudguard managed list types related to this rule
     * 
     */
    private List<String> managedListTypes;
    /**
     * @return Recommendation for TargetDetectorRecipeDetectorRule
     * 
     */
    private String recommendation;
    /**
     * @return resource type of the configuration to which the rule is applied
     * 
     */
    private String resourceType;
    /**
     * @return service type of the configuration to which the rule is applied
     * 
     */
    private String serviceType;
    /**
     * @return The current state of the ResponderRule.
     * 
     */
    private String state;
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetGuardTargetTargetDetectorRecipeDetectorRule() {}
    /**
     * @return The id of the attached DataSource.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return ResponderRule description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Details of ResponderRule.
     * 
     */
    public List<GetGuardTargetTargetDetectorRecipeDetectorRuleDetail> details() {
        return this.details;
    }
    /**
     * @return detector for the rule
     * 
     */
    public String detector() {
        return this.detector;
    }
    /**
     * @return The unique identifier of the detector rule.
     * 
     */
    public String detectorRuleId() {
        return this.detectorRuleId;
    }
    /**
     * @return ResponderRule display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Data Source entities mapping for a Detector Rule
     * 
     */
    public List<GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping> entitiesMappings() {
        return this.entitiesMappings;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return List of cloudguard managed list types related to this rule
     * 
     */
    public List<String> managedListTypes() {
        return this.managedListTypes;
    }
    /**
     * @return Recommendation for TargetDetectorRecipeDetectorRule
     * 
     */
    public String recommendation() {
        return this.recommendation;
    }
    /**
     * @return resource type of the configuration to which the rule is applied
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return service type of the configuration to which the rule is applied
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return The current state of the ResponderRule.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGuardTargetTargetDetectorRecipeDetectorRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataSourceId;
        private String description;
        private List<GetGuardTargetTargetDetectorRecipeDetectorRuleDetail> details;
        private String detector;
        private String detectorRuleId;
        private String displayName;
        private List<GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping> entitiesMappings;
        private String lifecycleDetails;
        private List<String> managedListTypes;
        private String recommendation;
        private String resourceType;
        private String serviceType;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetGuardTargetTargetDetectorRecipeDetectorRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.description = defaults.description;
    	      this.details = defaults.details;
    	      this.detector = defaults.detector;
    	      this.detectorRuleId = defaults.detectorRuleId;
    	      this.displayName = defaults.displayName;
    	      this.entitiesMappings = defaults.entitiesMappings;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.managedListTypes = defaults.managedListTypes;
    	      this.recommendation = defaults.recommendation;
    	      this.resourceType = defaults.resourceType;
    	      this.serviceType = defaults.serviceType;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder dataSourceId(String dataSourceId) {
            this.dataSourceId = Objects.requireNonNull(dataSourceId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder details(List<GetGuardTargetTargetDetectorRecipeDetectorRuleDetail> details) {
            this.details = Objects.requireNonNull(details);
            return this;
        }
        public Builder details(GetGuardTargetTargetDetectorRecipeDetectorRuleDetail... details) {
            return details(List.of(details));
        }
        @CustomType.Setter
        public Builder detector(String detector) {
            this.detector = Objects.requireNonNull(detector);
            return this;
        }
        @CustomType.Setter
        public Builder detectorRuleId(String detectorRuleId) {
            this.detectorRuleId = Objects.requireNonNull(detectorRuleId);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder entitiesMappings(List<GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping> entitiesMappings) {
            this.entitiesMappings = Objects.requireNonNull(entitiesMappings);
            return this;
        }
        public Builder entitiesMappings(GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping... entitiesMappings) {
            return entitiesMappings(List.of(entitiesMappings));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder managedListTypes(List<String> managedListTypes) {
            this.managedListTypes = Objects.requireNonNull(managedListTypes);
            return this;
        }
        public Builder managedListTypes(String... managedListTypes) {
            return managedListTypes(List.of(managedListTypes));
        }
        @CustomType.Setter
        public Builder recommendation(String recommendation) {
            this.recommendation = Objects.requireNonNull(recommendation);
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            this.serviceType = Objects.requireNonNull(serviceType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetGuardTargetTargetDetectorRecipeDetectorRule build() {
            final var o = new GetGuardTargetTargetDetectorRecipeDetectorRule();
            o.dataSourceId = dataSourceId;
            o.description = description;
            o.details = details;
            o.detector = detector;
            o.detectorRuleId = detectorRuleId;
            o.displayName = displayName;
            o.entitiesMappings = entitiesMappings;
            o.lifecycleDetails = lifecycleDetails;
            o.managedListTypes = managedListTypes;
            o.recommendation = recommendation;
            o.resourceType = resourceType;
            o.serviceType = serviceType;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
