// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail {
    /**
     * @return Condition group corresponding to each compartment
     * 
     */
    private List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup> conditionGroups;
    /**
     * @return List of responder rule configurations
     * 
     */
    private List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations;
    /**
     * @return Configuration allowed or not
     * 
     */
    private Boolean isConfigurationAllowed;
    /**
     * @return Enabled state for the responder rule
     * 
     */
    private Boolean isEnabled;
    /**
     * @return User-defined labels for a detector rule
     * 
     */
    private List<String> labels;
    /**
     * @return The risk level of the detector rule
     * 
     */
    private String riskLevel;

    private GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail() {}
    /**
     * @return Condition group corresponding to each compartment
     * 
     */
    public List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup> conditionGroups() {
        return this.conditionGroups;
    }
    /**
     * @return List of responder rule configurations
     * 
     */
    public List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations() {
        return this.configurations;
    }
    /**
     * @return Configuration allowed or not
     * 
     */
    public Boolean isConfigurationAllowed() {
        return this.isConfigurationAllowed;
    }
    /**
     * @return Enabled state for the responder rule
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return User-defined labels for a detector rule
     * 
     */
    public List<String> labels() {
        return this.labels;
    }
    /**
     * @return The risk level of the detector rule
     * 
     */
    public String riskLevel() {
        return this.riskLevel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup> conditionGroups;
        private List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations;
        private Boolean isConfigurationAllowed;
        private Boolean isEnabled;
        private List<String> labels;
        private String riskLevel;
        public Builder() {}
        public Builder(GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionGroups = defaults.conditionGroups;
    	      this.configurations = defaults.configurations;
    	      this.isConfigurationAllowed = defaults.isConfigurationAllowed;
    	      this.isEnabled = defaults.isEnabled;
    	      this.labels = defaults.labels;
    	      this.riskLevel = defaults.riskLevel;
        }

        @CustomType.Setter
        public Builder conditionGroups(List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup> conditionGroups) {
            if (conditionGroups == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail", "conditionGroups");
            }
            this.conditionGroups = conditionGroups;
            return this;
        }
        public Builder conditionGroups(GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup... conditionGroups) {
            return conditionGroups(List.of(conditionGroups));
        }
        @CustomType.Setter
        public Builder configurations(List<GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration> configurations) {
            if (configurations == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail", "configurations");
            }
            this.configurations = configurations;
            return this;
        }
        public Builder configurations(GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration... configurations) {
            return configurations(List.of(configurations));
        }
        @CustomType.Setter
        public Builder isConfigurationAllowed(Boolean isConfigurationAllowed) {
            if (isConfigurationAllowed == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail", "isConfigurationAllowed");
            }
            this.isConfigurationAllowed = isConfigurationAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail", "labels");
            }
            this.labels = labels;
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder riskLevel(String riskLevel) {
            if (riskLevel == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail", "riskLevel");
            }
            this.riskLevel = riskLevel;
            return this;
        }
        public GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail build() {
            final var _resultValue = new GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail();
            _resultValue.conditionGroups = conditionGroups;
            _resultValue.configurations = configurations;
            _resultValue.isConfigurationAllowed = isConfigurationAllowed;
            _resultValue.isEnabled = isEnabled;
            _resultValue.labels = labels;
            _resultValue.riskLevel = riskLevel;
            return _resultValue;
        }
    }
}
