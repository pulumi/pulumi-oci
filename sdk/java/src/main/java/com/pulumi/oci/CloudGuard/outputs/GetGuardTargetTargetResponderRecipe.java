// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRule;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetTargetResponderRecipeResponderRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGuardTargetTargetResponderRecipe {
    /**
     * @return Compartment Identifier
     * 
     */
    private String compartmentId;
    /**
     * @return ResponderRule description.
     * 
     */
    private String description;
    /**
     * @return ResponderRule display name.
     * 
     */
    private String displayName;
    /**
     * @return List of responder rules associated with the recipe after applying all defaults
     * 
     */
    private List<GetGuardTargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules;
    /**
     * @return Unique identifier of TargetResponderRecipe that can&#39;t be changed after creation.
     * 
     */
    private String id;
    /**
     * @return Owner of ResponderRecipe
     * 
     */
    private String owner;
    /**
     * @return Unique identifier for Responder Recipe of which this is an extension.
     * 
     */
    private String responderRecipeId;
    /**
     * @return List of responder rules associated with the recipe - user input
     * 
     */
    private List<GetGuardTargetTargetResponderRecipeResponderRule> responderRules;
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetGuardTargetTargetResponderRecipe() {}
    /**
     * @return Compartment Identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return ResponderRule description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return ResponderRule display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return List of responder rules associated with the recipe after applying all defaults
     * 
     */
    public List<GetGuardTargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules() {
        return this.effectiveResponderRules;
    }
    /**
     * @return Unique identifier of TargetResponderRecipe that can&#39;t be changed after creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Owner of ResponderRecipe
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return Unique identifier for Responder Recipe of which this is an extension.
     * 
     */
    public String responderRecipeId() {
        return this.responderRecipeId;
    }
    /**
     * @return List of responder rules associated with the recipe - user input
     * 
     */
    public List<GetGuardTargetTargetResponderRecipeResponderRule> responderRules() {
        return this.responderRules;
    }
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGuardTargetTargetResponderRecipe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String description;
        private String displayName;
        private List<GetGuardTargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules;
        private String id;
        private String owner;
        private String responderRecipeId;
        private List<GetGuardTargetTargetResponderRecipeResponderRule> responderRules;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetGuardTargetTargetResponderRecipe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.effectiveResponderRules = defaults.effectiveResponderRules;
    	      this.id = defaults.id;
    	      this.owner = defaults.owner;
    	      this.responderRecipeId = defaults.responderRecipeId;
    	      this.responderRules = defaults.responderRules;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveResponderRules(List<GetGuardTargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules) {
            if (effectiveResponderRules == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "effectiveResponderRules");
            }
            this.effectiveResponderRules = effectiveResponderRules;
            return this;
        }
        public Builder effectiveResponderRules(GetGuardTargetTargetResponderRecipeEffectiveResponderRule... effectiveResponderRules) {
            return effectiveResponderRules(List.of(effectiveResponderRules));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder responderRecipeId(String responderRecipeId) {
            if (responderRecipeId == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "responderRecipeId");
            }
            this.responderRecipeId = responderRecipeId;
            return this;
        }
        @CustomType.Setter
        public Builder responderRules(List<GetGuardTargetTargetResponderRecipeResponderRule> responderRules) {
            if (responderRules == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "responderRules");
            }
            this.responderRules = responderRules;
            return this;
        }
        public Builder responderRules(GetGuardTargetTargetResponderRecipeResponderRule... responderRules) {
            return responderRules(List.of(responderRules));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipe", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetGuardTargetTargetResponderRecipe build() {
            final var _resultValue = new GetGuardTargetTargetResponderRecipe();
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.effectiveResponderRules = effectiveResponderRules;
            _resultValue.id = id;
            _resultValue.owner = owner;
            _resultValue.responderRecipeId = responderRecipeId;
            _resultValue.responderRules = responderRules;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
