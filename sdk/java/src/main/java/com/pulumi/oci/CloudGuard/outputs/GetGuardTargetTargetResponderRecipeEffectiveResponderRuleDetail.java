// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail {
    /**
     * @return Base condition object
     * 
     */
    private String condition;
    /**
     * @return ResponderRule configurations
     * 
     */
    private List<GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations;
    /**
     * @return Identifies state for ResponderRule
     * 
     */
    private Boolean isEnabled;
    /**
     * @return Execution Mode for ResponderRule
     * 
     */
    private String mode;

    private GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail() {}
    /**
     * @return Base condition object
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return ResponderRule configurations
     * 
     */
    public List<GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations() {
        return this.configurations;
    }
    /**
     * @return Identifies state for ResponderRule
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return Execution Mode for ResponderRule
     * 
     */
    public String mode() {
        return this.mode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String condition;
        private List<GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations;
        private Boolean isEnabled;
        private String mode;
        public Builder() {}
        public Builder(GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.configurations = defaults.configurations;
    	      this.isEnabled = defaults.isEnabled;
    	      this.mode = defaults.mode;
        }

        @CustomType.Setter
        public Builder condition(String condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder configurations(List<GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations) {
            if (configurations == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail", "configurations");
            }
            this.configurations = configurations;
            return this;
        }
        public Builder configurations(GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration... configurations) {
            return configurations(List.of(configurations));
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail", "mode");
            }
            this.mode = mode;
            return this;
        }
        public GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail build() {
            final var _resultValue = new GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail();
            _resultValue.condition = condition;
            _resultValue.configurations = configurations;
            _resultValue.isEnabled = isEnabled;
            _resultValue.mode = mode;
            return _resultValue;
        }
    }
}
