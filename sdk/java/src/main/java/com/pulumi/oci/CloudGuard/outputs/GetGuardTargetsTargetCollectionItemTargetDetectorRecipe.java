// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule;
import com.pulumi.oci.CloudGuard.outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGuardTargetsTargetCollectionItemTargetDetectorRecipe {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return ResponderRule description.
     * 
     */
    private String description;
    /**
     * @return detector for the rule
     * 
     */
    private String detector;
    /**
     * @return Unique identifier for Detector Recipe of which this is an extension
     * 
     */
    private String detectorRecipeId;
    /**
     * @return List of detector rules for the detector type for recipe - user input
     * 
     */
    private List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule> detectorRules;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return List of effective detector rules for the detector type for recipe after applying defaults
     * 
     */
    private List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules;
    /**
     * @return Unique identifier of TargetResponderRecipe that can&#39;t be changed after creation.
     * 
     */
    private String id;
    /**
     * @return Owner of ResponderRecipe
     * 
     */
    private String owner;
    /**
     * @return The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    private String state;
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetGuardTargetsTargetCollectionItemTargetDetectorRecipe() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return ResponderRule description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return detector for the rule
     * 
     */
    public String detector() {
        return this.detector;
    }
    /**
     * @return Unique identifier for Detector Recipe of which this is an extension
     * 
     */
    public String detectorRecipeId() {
        return this.detectorRecipeId;
    }
    /**
     * @return List of detector rules for the detector type for recipe - user input
     * 
     */
    public List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule> detectorRules() {
        return this.detectorRules;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return List of effective detector rules for the detector type for recipe after applying defaults
     * 
     */
    public List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules() {
        return this.effectiveDetectorRules;
    }
    /**
     * @return Unique identifier of TargetResponderRecipe that can&#39;t be changed after creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Owner of ResponderRecipe
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGuardTargetsTargetCollectionItemTargetDetectorRecipe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String description;
        private String detector;
        private String detectorRecipeId;
        private List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule> detectorRules;
        private String displayName;
        private List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules;
        private String id;
        private String owner;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetGuardTargetsTargetCollectionItemTargetDetectorRecipe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.detector = defaults.detector;
    	      this.detectorRecipeId = defaults.detectorRecipeId;
    	      this.detectorRules = defaults.detectorRules;
    	      this.displayName = defaults.displayName;
    	      this.effectiveDetectorRules = defaults.effectiveDetectorRules;
    	      this.id = defaults.id;
    	      this.owner = defaults.owner;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder detector(String detector) {
            if (detector == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "detector");
            }
            this.detector = detector;
            return this;
        }
        @CustomType.Setter
        public Builder detectorRecipeId(String detectorRecipeId) {
            if (detectorRecipeId == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "detectorRecipeId");
            }
            this.detectorRecipeId = detectorRecipeId;
            return this;
        }
        @CustomType.Setter
        public Builder detectorRules(List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule> detectorRules) {
            if (detectorRules == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "detectorRules");
            }
            this.detectorRules = detectorRules;
            return this;
        }
        public Builder detectorRules(GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule... detectorRules) {
            return detectorRules(List.of(detectorRules));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveDetectorRules(List<GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule> effectiveDetectorRules) {
            if (effectiveDetectorRules == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "effectiveDetectorRules");
            }
            this.effectiveDetectorRules = effectiveDetectorRules;
            return this;
        }
        public Builder effectiveDetectorRules(GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule... effectiveDetectorRules) {
            return effectiveDetectorRules(List.of(effectiveDetectorRules));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetGuardTargetsTargetCollectionItemTargetDetectorRecipe", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetGuardTargetsTargetCollectionItemTargetDetectorRecipe build() {
            final var _resultValue = new GetGuardTargetsTargetCollectionItemTargetDetectorRecipe();
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.detector = detector;
            _resultValue.detectorRecipeId = detectorRecipeId;
            _resultValue.detectorRules = detectorRules;
            _resultValue.displayName = displayName;
            _resultValue.effectiveDetectorRules = effectiveDetectorRules;
            _resultValue.id = id;
            _resultValue.owner = owner;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
