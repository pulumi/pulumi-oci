// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.CloudGuard.outputs.GetResponderRecipeEffectiveResponderRuleDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetResponderRecipeEffectiveResponderRule {
    /**
     * @return Compartment OCID
     * 
     */
    private String compartmentId;
    /**
     * @return Responder rule description
     * 
     */
    private String description;
    /**
     * @return Detailed information for a responder rule
     * 
     */
    private List<GetResponderRecipeEffectiveResponderRuleDetail> details;
    /**
     * @return Responder rule display name
     * 
     */
    private String displayName;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return List of policies
     * 
     */
    private List<String> policies;
    /**
     * @return Unique identifier for the responder rule
     * 
     */
    private String responderRuleId;
    /**
     * @return The current lifecycle state of the example
     * 
     */
    private String state;
    /**
     * @return Supported execution modes for the responder rule
     * 
     */
    private List<String> supportedModes;
    /**
     * @return The date and time the responder recipe was created. Format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the responder recipe was last updated. Format defined by RFC3339.
     * 
     */
    private String timeUpdated;
    /**
     * @return Type of responder
     * 
     */
    private String type;

    private GetResponderRecipeEffectiveResponderRule() {}
    /**
     * @return Compartment OCID
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Responder rule description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Detailed information for a responder rule
     * 
     */
    public List<GetResponderRecipeEffectiveResponderRuleDetail> details() {
        return this.details;
    }
    /**
     * @return Responder rule display name
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return List of policies
     * 
     */
    public List<String> policies() {
        return this.policies;
    }
    /**
     * @return Unique identifier for the responder rule
     * 
     */
    public String responderRuleId() {
        return this.responderRuleId;
    }
    /**
     * @return The current lifecycle state of the example
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Supported execution modes for the responder rule
     * 
     */
    public List<String> supportedModes() {
        return this.supportedModes;
    }
    /**
     * @return The date and time the responder recipe was created. Format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the responder recipe was last updated. Format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Type of responder
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResponderRecipeEffectiveResponderRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String description;
        private List<GetResponderRecipeEffectiveResponderRuleDetail> details;
        private String displayName;
        private String lifecycleDetails;
        private List<String> policies;
        private String responderRuleId;
        private String state;
        private List<String> supportedModes;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetResponderRecipeEffectiveResponderRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.details = defaults.details;
    	      this.displayName = defaults.displayName;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.policies = defaults.policies;
    	      this.responderRuleId = defaults.responderRuleId;
    	      this.state = defaults.state;
    	      this.supportedModes = defaults.supportedModes;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder details(List<GetResponderRecipeEffectiveResponderRuleDetail> details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "details");
            }
            this.details = details;
            return this;
        }
        public Builder details(GetResponderRecipeEffectiveResponderRuleDetail... details) {
            return details(List.of(details));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<String> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder responderRuleId(String responderRuleId) {
            if (responderRuleId == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "responderRuleId");
            }
            this.responderRuleId = responderRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder supportedModes(List<String> supportedModes) {
            if (supportedModes == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "supportedModes");
            }
            this.supportedModes = supportedModes;
            return this;
        }
        public Builder supportedModes(String... supportedModes) {
            return supportedModes(List.of(supportedModes));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetResponderRecipeEffectiveResponderRule", "type");
            }
            this.type = type;
            return this;
        }
        public GetResponderRecipeEffectiveResponderRule build() {
            final var _resultValue = new GetResponderRecipeEffectiveResponderRule();
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.details = details;
            _resultValue.displayName = displayName;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.policies = policies;
            _resultValue.responderRuleId = responderRuleId;
            _resultValue.state = state;
            _resultValue.supportedModes = supportedModes;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
