// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudGuard.outputs.TargetTargetResponderRecipeEffectiveResponderRule;
import com.pulumi.oci.CloudGuard.outputs.TargetTargetResponderRecipeResponderRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TargetTargetResponderRecipe {
    /**
     * @return (Updatable) compartment associated with condition
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The target description.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) DetectorTemplate identifier.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return List of responder rules associated with the recipe after applying all defaults
     * 
     */
    private @Nullable List<TargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules;
    /**
     * @return Unique identifier of TargetResponderRecipe that can&#39;t be changed after creation.
     * 
     */
    private @Nullable String id;
    /**
     * @return Owner of ResponderRecipe
     * 
     */
    private @Nullable String owner;
    /**
     * @return Identifier for ResponderRecipe.
     * 
     */
    private String responderRecipeId;
    /**
     * @return (Updatable) Override responder rules associated with reponder recipe in a target.
     * 
     */
    private @Nullable List<TargetTargetResponderRecipeResponderRule> responderRules;
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    private @Nullable String timeUpdated;

    private TargetTargetResponderRecipe() {}
    /**
     * @return (Updatable) compartment associated with condition
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The target description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) DetectorTemplate identifier.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return List of responder rules associated with the recipe after applying all defaults
     * 
     */
    public List<TargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules() {
        return this.effectiveResponderRules == null ? List.of() : this.effectiveResponderRules;
    }
    /**
     * @return Unique identifier of TargetResponderRecipe that can&#39;t be changed after creation.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Owner of ResponderRecipe
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return Identifier for ResponderRecipe.
     * 
     */
    public String responderRecipeId() {
        return this.responderRecipeId;
    }
    /**
     * @return (Updatable) Override responder rules associated with reponder recipe in a target.
     * 
     */
    public List<TargetTargetResponderRecipeResponderRule> responderRules() {
        return this.responderRules == null ? List.of() : this.responderRules;
    }
    /**
     * @return The date and time the target was created. Format defined by RFC3339.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time the target was updated. Format defined by RFC3339.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetTargetResponderRecipe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable List<TargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules;
        private @Nullable String id;
        private @Nullable String owner;
        private String responderRecipeId;
        private @Nullable List<TargetTargetResponderRecipeResponderRule> responderRules;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(TargetTargetResponderRecipe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.effectiveResponderRules = defaults.effectiveResponderRules;
    	      this.id = defaults.id;
    	      this.owner = defaults.owner;
    	      this.responderRecipeId = defaults.responderRecipeId;
    	      this.responderRules = defaults.responderRules;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveResponderRules(@Nullable List<TargetTargetResponderRecipeEffectiveResponderRule> effectiveResponderRules) {
            this.effectiveResponderRules = effectiveResponderRules;
            return this;
        }
        public Builder effectiveResponderRules(TargetTargetResponderRecipeEffectiveResponderRule... effectiveResponderRules) {
            return effectiveResponderRules(List.of(effectiveResponderRules));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder responderRecipeId(String responderRecipeId) {
            this.responderRecipeId = Objects.requireNonNull(responderRecipeId);
            return this;
        }
        @CustomType.Setter
        public Builder responderRules(@Nullable List<TargetTargetResponderRecipeResponderRule> responderRules) {
            this.responderRules = responderRules;
            return this;
        }
        public Builder responderRules(TargetTargetResponderRecipeResponderRule... responderRules) {
            return responderRules(List.of(responderRules));
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public TargetTargetResponderRecipe build() {
            final var o = new TargetTargetResponderRecipe();
            o.compartmentId = compartmentId;
            o.description = description;
            o.displayName = displayName;
            o.effectiveResponderRules = effectiveResponderRules;
            o.id = id;
            o.owner = owner;
            o.responderRecipeId = responderRecipeId;
            o.responderRules = responderRules;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
