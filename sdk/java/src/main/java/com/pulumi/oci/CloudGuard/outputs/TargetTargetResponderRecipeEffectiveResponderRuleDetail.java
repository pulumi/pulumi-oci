// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudGuard.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudGuard.outputs.TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TargetTargetResponderRecipeEffectiveResponderRuleDetail {
    /**
     * @return The base condition resource.
     * 
     */
    private @Nullable String condition;
    /**
     * @return List of responder rule configurations
     * 
     */
    private @Nullable List<TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations;
    /**
     * @return Enabled state for the responder rule
     * 
     */
    private @Nullable Boolean isEnabled;
    /**
     * @return Execution mode for the responder rule
     * 
     */
    private @Nullable String mode;

    private TargetTargetResponderRecipeEffectiveResponderRuleDetail() {}
    /**
     * @return The base condition resource.
     * 
     */
    public Optional<String> condition() {
        return Optional.ofNullable(this.condition);
    }
    /**
     * @return List of responder rule configurations
     * 
     */
    public List<TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations() {
        return this.configurations == null ? List.of() : this.configurations;
    }
    /**
     * @return Enabled state for the responder rule
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return Execution mode for the responder rule
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetTargetResponderRecipeEffectiveResponderRuleDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String condition;
        private @Nullable List<TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations;
        private @Nullable Boolean isEnabled;
        private @Nullable String mode;
        public Builder() {}
        public Builder(TargetTargetResponderRecipeEffectiveResponderRuleDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.configurations = defaults.configurations;
    	      this.isEnabled = defaults.isEnabled;
    	      this.mode = defaults.mode;
        }

        @CustomType.Setter
        public Builder condition(@Nullable String condition) {

            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder configurations(@Nullable List<TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration> configurations) {

            this.configurations = configurations;
            return this;
        }
        public Builder configurations(TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration... configurations) {
            return configurations(List.of(configurations));
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {

            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        public TargetTargetResponderRecipeEffectiveResponderRuleDetail build() {
            final var _resultValue = new TargetTargetResponderRecipeEffectiveResponderRuleDetail();
            _resultValue.condition = condition;
            _resultValue.configurations = configurations;
            _resultValue.isEnabled = isEnabled;
            _resultValue.mode = mode;
            return _resultValue;
        }
    }
}
