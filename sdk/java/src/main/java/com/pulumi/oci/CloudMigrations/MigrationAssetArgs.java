// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationAssetArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationAssetArgs Empty = new MigrationAssetArgs();

    /**
     * Availability domain
     * 
     */
    @Import(name="availabilityDomain", required=true)
    private Output<String> availabilityDomain;

    /**
     * @return Availability domain
     * 
     */
    public Output<String> availabilityDomain() {
        return this.availabilityDomain;
    }

    /**
     * (Updatable) A user-friendly name. If empty, then source asset name will be used. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. If empty, then source asset name will be used. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * OCID of an asset for an inventory.
     * 
     */
    @Import(name="inventoryAssetId", required=true)
    private Output<String> inventoryAssetId;

    /**
     * @return OCID of an asset for an inventory.
     * 
     */
    public Output<String> inventoryAssetId() {
        return this.inventoryAssetId;
    }

    @Import(name="migrationAssetDependsOns")
    private @Nullable Output<List<String>> migrationAssetDependsOns;

    public Optional<Output<List<String>>> migrationAssetDependsOns() {
        return Optional.ofNullable(this.migrationAssetDependsOns);
    }

    /**
     * OCID of the associated migration.
     * 
     */
    @Import(name="migrationId", required=true)
    private Output<String> migrationId;

    /**
     * @return OCID of the associated migration.
     * 
     */
    public Output<String> migrationId() {
        return this.migrationId;
    }

    /**
     * Replication compartment identifier
     * 
     */
    @Import(name="replicationCompartmentId", required=true)
    private Output<String> replicationCompartmentId;

    /**
     * @return Replication compartment identifier
     * 
     */
    public Output<String> replicationCompartmentId() {
        return this.replicationCompartmentId;
    }

    /**
     * (Updatable) Replication schedule identifier
     * 
     */
    @Import(name="replicationScheduleId")
    private @Nullable Output<String> replicationScheduleId;

    /**
     * @return (Updatable) Replication schedule identifier
     * 
     */
    public Optional<Output<String>> replicationScheduleId() {
        return Optional.ofNullable(this.replicationScheduleId);
    }

    /**
     * Name of snapshot bucket
     * 
     */
    @Import(name="snapShotBucketName", required=true)
    private Output<String> snapShotBucketName;

    /**
     * @return Name of snapshot bucket
     * 
     */
    public Output<String> snapShotBucketName() {
        return this.snapShotBucketName;
    }

    private MigrationAssetArgs() {}

    private MigrationAssetArgs(MigrationAssetArgs $) {
        this.availabilityDomain = $.availabilityDomain;
        this.displayName = $.displayName;
        this.inventoryAssetId = $.inventoryAssetId;
        this.migrationAssetDependsOns = $.migrationAssetDependsOns;
        this.migrationId = $.migrationId;
        this.replicationCompartmentId = $.replicationCompartmentId;
        this.replicationScheduleId = $.replicationScheduleId;
        this.snapShotBucketName = $.snapShotBucketName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationAssetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationAssetArgs $;

        public Builder() {
            $ = new MigrationAssetArgs();
        }

        public Builder(MigrationAssetArgs defaults) {
            $ = new MigrationAssetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityDomain Availability domain
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain Availability domain
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. If empty, then source asset name will be used. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. If empty, then source asset name will be used. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param inventoryAssetId OCID of an asset for an inventory.
         * 
         * @return builder
         * 
         */
        public Builder inventoryAssetId(Output<String> inventoryAssetId) {
            $.inventoryAssetId = inventoryAssetId;
            return this;
        }

        /**
         * @param inventoryAssetId OCID of an asset for an inventory.
         * 
         * @return builder
         * 
         */
        public Builder inventoryAssetId(String inventoryAssetId) {
            return inventoryAssetId(Output.of(inventoryAssetId));
        }

        public Builder migrationAssetDependsOns(@Nullable Output<List<String>> migrationAssetDependsOns) {
            $.migrationAssetDependsOns = migrationAssetDependsOns;
            return this;
        }

        public Builder migrationAssetDependsOns(List<String> migrationAssetDependsOns) {
            return migrationAssetDependsOns(Output.of(migrationAssetDependsOns));
        }

        public Builder migrationAssetDependsOns(String... migrationAssetDependsOns) {
            return migrationAssetDependsOns(List.of(migrationAssetDependsOns));
        }

        /**
         * @param migrationId OCID of the associated migration.
         * 
         * @return builder
         * 
         */
        public Builder migrationId(Output<String> migrationId) {
            $.migrationId = migrationId;
            return this;
        }

        /**
         * @param migrationId OCID of the associated migration.
         * 
         * @return builder
         * 
         */
        public Builder migrationId(String migrationId) {
            return migrationId(Output.of(migrationId));
        }

        /**
         * @param replicationCompartmentId Replication compartment identifier
         * 
         * @return builder
         * 
         */
        public Builder replicationCompartmentId(Output<String> replicationCompartmentId) {
            $.replicationCompartmentId = replicationCompartmentId;
            return this;
        }

        /**
         * @param replicationCompartmentId Replication compartment identifier
         * 
         * @return builder
         * 
         */
        public Builder replicationCompartmentId(String replicationCompartmentId) {
            return replicationCompartmentId(Output.of(replicationCompartmentId));
        }

        /**
         * @param replicationScheduleId (Updatable) Replication schedule identifier
         * 
         * @return builder
         * 
         */
        public Builder replicationScheduleId(@Nullable Output<String> replicationScheduleId) {
            $.replicationScheduleId = replicationScheduleId;
            return this;
        }

        /**
         * @param replicationScheduleId (Updatable) Replication schedule identifier
         * 
         * @return builder
         * 
         */
        public Builder replicationScheduleId(String replicationScheduleId) {
            return replicationScheduleId(Output.of(replicationScheduleId));
        }

        /**
         * @param snapShotBucketName Name of snapshot bucket
         * 
         * @return builder
         * 
         */
        public Builder snapShotBucketName(Output<String> snapShotBucketName) {
            $.snapShotBucketName = snapShotBucketName;
            return this;
        }

        /**
         * @param snapShotBucketName Name of snapshot bucket
         * 
         * @return builder
         * 
         */
        public Builder snapShotBucketName(String snapShotBucketName) {
            return snapShotBucketName(Output.of(snapShotBucketName));
        }

        public MigrationAssetArgs build() {
            $.availabilityDomain = Objects.requireNonNull($.availabilityDomain, "expected parameter 'availabilityDomain' to be non-null");
            $.inventoryAssetId = Objects.requireNonNull($.inventoryAssetId, "expected parameter 'inventoryAssetId' to be non-null");
            $.migrationId = Objects.requireNonNull($.migrationId, "expected parameter 'migrationId' to be non-null");
            $.replicationCompartmentId = Objects.requireNonNull($.replicationCompartmentId, "expected parameter 'replicationCompartmentId' to be non-null");
            $.snapShotBucketName = Objects.requireNonNull($.snapShotBucketName, "expected parameter 'snapShotBucketName' to be non-null");
            return $;
        }
    }

}
