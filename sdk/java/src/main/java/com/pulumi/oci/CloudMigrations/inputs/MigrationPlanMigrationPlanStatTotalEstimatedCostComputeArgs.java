// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs Empty = new MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs();

    /**
     * Total number of GPU
     * 
     */
    @Import(name="gpuCount")
    private @Nullable Output<Double> gpuCount;

    /**
     * @return Total number of GPU
     * 
     */
    public Optional<Output<Double>> gpuCount() {
        return Optional.ofNullable(this.gpuCount);
    }

    /**
     * GPU per hour
     * 
     */
    @Import(name="gpuPerHour")
    private @Nullable Output<Double> gpuPerHour;

    /**
     * @return GPU per hour
     * 
     */
    public Optional<Output<Double>> gpuPerHour() {
        return Optional.ofNullable(this.gpuPerHour);
    }

    /**
     * GPU per hour by subscription
     * 
     */
    @Import(name="gpuPerHourBySubscription")
    private @Nullable Output<Double> gpuPerHourBySubscription;

    /**
     * @return GPU per hour by subscription
     * 
     */
    public Optional<Output<Double>> gpuPerHourBySubscription() {
        return Optional.ofNullable(this.gpuPerHourBySubscription);
    }

    /**
     * Total usage of memory
     * 
     */
    @Import(name="memoryAmountGb")
    private @Nullable Output<Double> memoryAmountGb;

    /**
     * @return Total usage of memory
     * 
     */
    public Optional<Output<Double>> memoryAmountGb() {
        return Optional.ofNullable(this.memoryAmountGb);
    }

    /**
     * Gigabyte per hour
     * 
     */
    @Import(name="memoryGbPerHour")
    private @Nullable Output<Double> memoryGbPerHour;

    /**
     * @return Gigabyte per hour
     * 
     */
    public Optional<Output<Double>> memoryGbPerHour() {
        return Optional.ofNullable(this.memoryGbPerHour);
    }

    /**
     * Gigabyte per hour by subscription
     * 
     */
    @Import(name="memoryGbPerHourBySubscription")
    private @Nullable Output<Double> memoryGbPerHourBySubscription;

    /**
     * @return Gigabyte per hour by subscription
     * 
     */
    public Optional<Output<Double>> memoryGbPerHourBySubscription() {
        return Optional.ofNullable(this.memoryGbPerHourBySubscription);
    }

    /**
     * Total number of OCPUs
     * 
     */
    @Import(name="ocpuCount")
    private @Nullable Output<Double> ocpuCount;

    /**
     * @return Total number of OCPUs
     * 
     */
    public Optional<Output<Double>> ocpuCount() {
        return Optional.ofNullable(this.ocpuCount);
    }

    /**
     * OCPU per hour
     * 
     */
    @Import(name="ocpuPerHour")
    private @Nullable Output<Double> ocpuPerHour;

    /**
     * @return OCPU per hour
     * 
     */
    public Optional<Output<Double>> ocpuPerHour() {
        return Optional.ofNullable(this.ocpuPerHour);
    }

    /**
     * OCPU per hour by subscription
     * 
     */
    @Import(name="ocpuPerHourBySubscription")
    private @Nullable Output<Double> ocpuPerHourBySubscription;

    /**
     * @return OCPU per hour by subscription
     * 
     */
    public Optional<Output<Double>> ocpuPerHourBySubscription() {
        return Optional.ofNullable(this.ocpuPerHourBySubscription);
    }

    /**
     * Total price per hour
     * 
     */
    @Import(name="totalPerHour")
    private @Nullable Output<Double> totalPerHour;

    /**
     * @return Total price per hour
     * 
     */
    public Optional<Output<Double>> totalPerHour() {
        return Optional.ofNullable(this.totalPerHour);
    }

    /**
     * Total price per hour by subscription
     * 
     */
    @Import(name="totalPerHourBySubscription")
    private @Nullable Output<Double> totalPerHourBySubscription;

    /**
     * @return Total price per hour by subscription
     * 
     */
    public Optional<Output<Double>> totalPerHourBySubscription() {
        return Optional.ofNullable(this.totalPerHourBySubscription);
    }

    private MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs() {}

    private MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs(MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs $) {
        this.gpuCount = $.gpuCount;
        this.gpuPerHour = $.gpuPerHour;
        this.gpuPerHourBySubscription = $.gpuPerHourBySubscription;
        this.memoryAmountGb = $.memoryAmountGb;
        this.memoryGbPerHour = $.memoryGbPerHour;
        this.memoryGbPerHourBySubscription = $.memoryGbPerHourBySubscription;
        this.ocpuCount = $.ocpuCount;
        this.ocpuPerHour = $.ocpuPerHour;
        this.ocpuPerHourBySubscription = $.ocpuPerHourBySubscription;
        this.totalPerHour = $.totalPerHour;
        this.totalPerHourBySubscription = $.totalPerHourBySubscription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs $;

        public Builder() {
            $ = new MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs();
        }

        public Builder(MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs defaults) {
            $ = new MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gpuCount Total number of GPU
         * 
         * @return builder
         * 
         */
        public Builder gpuCount(@Nullable Output<Double> gpuCount) {
            $.gpuCount = gpuCount;
            return this;
        }

        /**
         * @param gpuCount Total number of GPU
         * 
         * @return builder
         * 
         */
        public Builder gpuCount(Double gpuCount) {
            return gpuCount(Output.of(gpuCount));
        }

        /**
         * @param gpuPerHour GPU per hour
         * 
         * @return builder
         * 
         */
        public Builder gpuPerHour(@Nullable Output<Double> gpuPerHour) {
            $.gpuPerHour = gpuPerHour;
            return this;
        }

        /**
         * @param gpuPerHour GPU per hour
         * 
         * @return builder
         * 
         */
        public Builder gpuPerHour(Double gpuPerHour) {
            return gpuPerHour(Output.of(gpuPerHour));
        }

        /**
         * @param gpuPerHourBySubscription GPU per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder gpuPerHourBySubscription(@Nullable Output<Double> gpuPerHourBySubscription) {
            $.gpuPerHourBySubscription = gpuPerHourBySubscription;
            return this;
        }

        /**
         * @param gpuPerHourBySubscription GPU per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder gpuPerHourBySubscription(Double gpuPerHourBySubscription) {
            return gpuPerHourBySubscription(Output.of(gpuPerHourBySubscription));
        }

        /**
         * @param memoryAmountGb Total usage of memory
         * 
         * @return builder
         * 
         */
        public Builder memoryAmountGb(@Nullable Output<Double> memoryAmountGb) {
            $.memoryAmountGb = memoryAmountGb;
            return this;
        }

        /**
         * @param memoryAmountGb Total usage of memory
         * 
         * @return builder
         * 
         */
        public Builder memoryAmountGb(Double memoryAmountGb) {
            return memoryAmountGb(Output.of(memoryAmountGb));
        }

        /**
         * @param memoryGbPerHour Gigabyte per hour
         * 
         * @return builder
         * 
         */
        public Builder memoryGbPerHour(@Nullable Output<Double> memoryGbPerHour) {
            $.memoryGbPerHour = memoryGbPerHour;
            return this;
        }

        /**
         * @param memoryGbPerHour Gigabyte per hour
         * 
         * @return builder
         * 
         */
        public Builder memoryGbPerHour(Double memoryGbPerHour) {
            return memoryGbPerHour(Output.of(memoryGbPerHour));
        }

        /**
         * @param memoryGbPerHourBySubscription Gigabyte per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder memoryGbPerHourBySubscription(@Nullable Output<Double> memoryGbPerHourBySubscription) {
            $.memoryGbPerHourBySubscription = memoryGbPerHourBySubscription;
            return this;
        }

        /**
         * @param memoryGbPerHourBySubscription Gigabyte per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder memoryGbPerHourBySubscription(Double memoryGbPerHourBySubscription) {
            return memoryGbPerHourBySubscription(Output.of(memoryGbPerHourBySubscription));
        }

        /**
         * @param ocpuCount Total number of OCPUs
         * 
         * @return builder
         * 
         */
        public Builder ocpuCount(@Nullable Output<Double> ocpuCount) {
            $.ocpuCount = ocpuCount;
            return this;
        }

        /**
         * @param ocpuCount Total number of OCPUs
         * 
         * @return builder
         * 
         */
        public Builder ocpuCount(Double ocpuCount) {
            return ocpuCount(Output.of(ocpuCount));
        }

        /**
         * @param ocpuPerHour OCPU per hour
         * 
         * @return builder
         * 
         */
        public Builder ocpuPerHour(@Nullable Output<Double> ocpuPerHour) {
            $.ocpuPerHour = ocpuPerHour;
            return this;
        }

        /**
         * @param ocpuPerHour OCPU per hour
         * 
         * @return builder
         * 
         */
        public Builder ocpuPerHour(Double ocpuPerHour) {
            return ocpuPerHour(Output.of(ocpuPerHour));
        }

        /**
         * @param ocpuPerHourBySubscription OCPU per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder ocpuPerHourBySubscription(@Nullable Output<Double> ocpuPerHourBySubscription) {
            $.ocpuPerHourBySubscription = ocpuPerHourBySubscription;
            return this;
        }

        /**
         * @param ocpuPerHourBySubscription OCPU per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder ocpuPerHourBySubscription(Double ocpuPerHourBySubscription) {
            return ocpuPerHourBySubscription(Output.of(ocpuPerHourBySubscription));
        }

        /**
         * @param totalPerHour Total price per hour
         * 
         * @return builder
         * 
         */
        public Builder totalPerHour(@Nullable Output<Double> totalPerHour) {
            $.totalPerHour = totalPerHour;
            return this;
        }

        /**
         * @param totalPerHour Total price per hour
         * 
         * @return builder
         * 
         */
        public Builder totalPerHour(Double totalPerHour) {
            return totalPerHour(Output.of(totalPerHour));
        }

        /**
         * @param totalPerHourBySubscription Total price per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder totalPerHourBySubscription(@Nullable Output<Double> totalPerHourBySubscription) {
            $.totalPerHourBySubscription = totalPerHourBySubscription;
            return this;
        }

        /**
         * @param totalPerHourBySubscription Total price per hour by subscription
         * 
         * @return builder
         * 
         */
        public Builder totalPerHourBySubscription(Double totalPerHourBySubscription) {
            return totalPerHourBySubscription(Output.of(totalPerHourBySubscription));
        }

        public MigrationPlanMigrationPlanStatTotalEstimatedCostComputeArgs build() {
            return $;
        }
    }

}
