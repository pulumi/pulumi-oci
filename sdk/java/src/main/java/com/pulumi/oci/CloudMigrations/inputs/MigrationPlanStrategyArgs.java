// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationPlanStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationPlanStrategyArgs Empty = new MigrationPlanStrategyArgs();

    /**
     * (Updatable) The real resource usage is multiplied to this number before making any recommendation.
     * 
     */
    @Import(name="adjustmentMultiplier")
    private @Nullable Output<Double> adjustmentMultiplier;

    /**
     * @return (Updatable) The real resource usage is multiplied to this number before making any recommendation.
     * 
     */
    public Optional<Output<Double>> adjustmentMultiplier() {
        return Optional.ofNullable(this.adjustmentMultiplier);
    }

    /**
     * (Updatable) The current state of the migration plan.
     * 
     */
    @Import(name="metricTimeWindow")
    private @Nullable Output<String> metricTimeWindow;

    /**
     * @return (Updatable) The current state of the migration plan.
     * 
     */
    public Optional<Output<String>> metricTimeWindow() {
        return Optional.ofNullable(this.metricTimeWindow);
    }

    /**
     * (Updatable) The current state of the migration plan.
     * 
     */
    @Import(name="metricType")
    private @Nullable Output<String> metricType;

    /**
     * @return (Updatable) The current state of the migration plan.
     * 
     */
    public Optional<Output<String>> metricType() {
        return Optional.ofNullable(this.metricType);
    }

    /**
     * (Updatable) Percentile value
     * 
     */
    @Import(name="percentile")
    private @Nullable Output<String> percentile;

    /**
     * @return (Updatable) Percentile value
     * 
     */
    public Optional<Output<String>> percentile() {
        return Optional.ofNullable(this.percentile);
    }

    /**
     * (Updatable) The type of resource.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return (Updatable) The type of resource.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     * (Updatable) The type of strategy used for migration.
     * 
     */
    @Import(name="strategyType", required=true)
    private Output<String> strategyType;

    /**
     * @return (Updatable) The type of strategy used for migration.
     * 
     */
    public Output<String> strategyType() {
        return this.strategyType;
    }

    private MigrationPlanStrategyArgs() {}

    private MigrationPlanStrategyArgs(MigrationPlanStrategyArgs $) {
        this.adjustmentMultiplier = $.adjustmentMultiplier;
        this.metricTimeWindow = $.metricTimeWindow;
        this.metricType = $.metricType;
        this.percentile = $.percentile;
        this.resourceType = $.resourceType;
        this.strategyType = $.strategyType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationPlanStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationPlanStrategyArgs $;

        public Builder() {
            $ = new MigrationPlanStrategyArgs();
        }

        public Builder(MigrationPlanStrategyArgs defaults) {
            $ = new MigrationPlanStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adjustmentMultiplier (Updatable) The real resource usage is multiplied to this number before making any recommendation.
         * 
         * @return builder
         * 
         */
        public Builder adjustmentMultiplier(@Nullable Output<Double> adjustmentMultiplier) {
            $.adjustmentMultiplier = adjustmentMultiplier;
            return this;
        }

        /**
         * @param adjustmentMultiplier (Updatable) The real resource usage is multiplied to this number before making any recommendation.
         * 
         * @return builder
         * 
         */
        public Builder adjustmentMultiplier(Double adjustmentMultiplier) {
            return adjustmentMultiplier(Output.of(adjustmentMultiplier));
        }

        /**
         * @param metricTimeWindow (Updatable) The current state of the migration plan.
         * 
         * @return builder
         * 
         */
        public Builder metricTimeWindow(@Nullable Output<String> metricTimeWindow) {
            $.metricTimeWindow = metricTimeWindow;
            return this;
        }

        /**
         * @param metricTimeWindow (Updatable) The current state of the migration plan.
         * 
         * @return builder
         * 
         */
        public Builder metricTimeWindow(String metricTimeWindow) {
            return metricTimeWindow(Output.of(metricTimeWindow));
        }

        /**
         * @param metricType (Updatable) The current state of the migration plan.
         * 
         * @return builder
         * 
         */
        public Builder metricType(@Nullable Output<String> metricType) {
            $.metricType = metricType;
            return this;
        }

        /**
         * @param metricType (Updatable) The current state of the migration plan.
         * 
         * @return builder
         * 
         */
        public Builder metricType(String metricType) {
            return metricType(Output.of(metricType));
        }

        /**
         * @param percentile (Updatable) Percentile value
         * 
         * @return builder
         * 
         */
        public Builder percentile(@Nullable Output<String> percentile) {
            $.percentile = percentile;
            return this;
        }

        /**
         * @param percentile (Updatable) Percentile value
         * 
         * @return builder
         * 
         */
        public Builder percentile(String percentile) {
            return percentile(Output.of(percentile));
        }

        /**
         * @param resourceType (Updatable) The type of resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType (Updatable) The type of resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param strategyType (Updatable) The type of strategy used for migration.
         * 
         * @return builder
         * 
         */
        public Builder strategyType(Output<String> strategyType) {
            $.strategyType = strategyType;
            return this;
        }

        /**
         * @param strategyType (Updatable) The type of strategy used for migration.
         * 
         * @return builder
         * 
         */
        public Builder strategyType(String strategyType) {
            return strategyType(Output.of(strategyType));
        }

        public MigrationPlanStrategyArgs build() {
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("MigrationPlanStrategyArgs", "resourceType");
            }
            if ($.strategyType == null) {
                throw new MissingRequiredPropertyException("MigrationPlanStrategyArgs", "strategyType");
            }
            return $;
        }
    }

}
