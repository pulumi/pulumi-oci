// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationPlanTargetEnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationPlanTargetEnvironmentArgs Empty = new MigrationPlanTargetEnvironmentArgs();

    /**
     * (Updatable) Availability Domain of the VM configuration.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return (Updatable) Availability Domain of the VM configuration.
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * (Updatable) OCID of the dedicated VM configuration host.
     * 
     */
    @Import(name="dedicatedVmHost")
    private @Nullable Output<String> dedicatedVmHost;

    /**
     * @return (Updatable) OCID of the dedicated VM configuration host.
     * 
     */
    public Optional<Output<String>> dedicatedVmHost() {
        return Optional.ofNullable(this.dedicatedVmHost);
    }

    /**
     * (Updatable) Fault domain of the VM configuration.
     * 
     */
    @Import(name="faultDomain")
    private @Nullable Output<String> faultDomain;

    /**
     * @return (Updatable) Fault domain of the VM configuration.
     * 
     */
    public Optional<Output<String>> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }

    /**
     * (Updatable) Microsoft license for the VM configuration.
     * 
     */
    @Import(name="msLicense")
    private @Nullable Output<String> msLicense;

    /**
     * @return (Updatable) Microsoft license for the VM configuration.
     * 
     */
    public Optional<Output<String>> msLicense() {
        return Optional.ofNullable(this.msLicense);
    }

    /**
     * (Updatable) Preferred VM shape type provided by the customer.
     * 
     */
    @Import(name="preferredShapeType")
    private @Nullable Output<String> preferredShapeType;

    /**
     * @return (Updatable) Preferred VM shape type provided by the customer.
     * 
     */
    public Optional<Output<String>> preferredShapeType() {
        return Optional.ofNullable(this.preferredShapeType);
    }

    /**
     * (Updatable) OCID of the VM configuration subnet.
     * 
     */
    @Import(name="subnet", required=true)
    private Output<String> subnet;

    /**
     * @return (Updatable) OCID of the VM configuration subnet.
     * 
     */
    public Output<String> subnet() {
        return this.subnet;
    }

    /**
     * (Updatable) Target compartment identifier
     * 
     */
    @Import(name="targetCompartmentId")
    private @Nullable Output<String> targetCompartmentId;

    /**
     * @return (Updatable) Target compartment identifier
     * 
     */
    public Optional<Output<String>> targetCompartmentId() {
        return Optional.ofNullable(this.targetCompartmentId);
    }

    /**
     * (Updatable) The type of target environment.
     * 
     */
    @Import(name="targetEnvironmentType", required=true)
    private Output<String> targetEnvironmentType;

    /**
     * @return (Updatable) The type of target environment.
     * 
     */
    public Output<String> targetEnvironmentType() {
        return this.targetEnvironmentType;
    }

    /**
     * (Updatable) OCID of the VM configuration VCN.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="vcn", required=true)
    private Output<String> vcn;

    /**
     * @return (Updatable) OCID of the VM configuration VCN.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> vcn() {
        return this.vcn;
    }

    private MigrationPlanTargetEnvironmentArgs() {}

    private MigrationPlanTargetEnvironmentArgs(MigrationPlanTargetEnvironmentArgs $) {
        this.availabilityDomain = $.availabilityDomain;
        this.dedicatedVmHost = $.dedicatedVmHost;
        this.faultDomain = $.faultDomain;
        this.msLicense = $.msLicense;
        this.preferredShapeType = $.preferredShapeType;
        this.subnet = $.subnet;
        this.targetCompartmentId = $.targetCompartmentId;
        this.targetEnvironmentType = $.targetEnvironmentType;
        this.vcn = $.vcn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationPlanTargetEnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationPlanTargetEnvironmentArgs $;

        public Builder() {
            $ = new MigrationPlanTargetEnvironmentArgs();
        }

        public Builder(MigrationPlanTargetEnvironmentArgs defaults) {
            $ = new MigrationPlanTargetEnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityDomain (Updatable) Availability Domain of the VM configuration.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain (Updatable) Availability Domain of the VM configuration.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param dedicatedVmHost (Updatable) OCID of the dedicated VM configuration host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedVmHost(@Nullable Output<String> dedicatedVmHost) {
            $.dedicatedVmHost = dedicatedVmHost;
            return this;
        }

        /**
         * @param dedicatedVmHost (Updatable) OCID of the dedicated VM configuration host.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedVmHost(String dedicatedVmHost) {
            return dedicatedVmHost(Output.of(dedicatedVmHost));
        }

        /**
         * @param faultDomain (Updatable) Fault domain of the VM configuration.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(@Nullable Output<String> faultDomain) {
            $.faultDomain = faultDomain;
            return this;
        }

        /**
         * @param faultDomain (Updatable) Fault domain of the VM configuration.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(String faultDomain) {
            return faultDomain(Output.of(faultDomain));
        }

        /**
         * @param msLicense (Updatable) Microsoft license for the VM configuration.
         * 
         * @return builder
         * 
         */
        public Builder msLicense(@Nullable Output<String> msLicense) {
            $.msLicense = msLicense;
            return this;
        }

        /**
         * @param msLicense (Updatable) Microsoft license for the VM configuration.
         * 
         * @return builder
         * 
         */
        public Builder msLicense(String msLicense) {
            return msLicense(Output.of(msLicense));
        }

        /**
         * @param preferredShapeType (Updatable) Preferred VM shape type provided by the customer.
         * 
         * @return builder
         * 
         */
        public Builder preferredShapeType(@Nullable Output<String> preferredShapeType) {
            $.preferredShapeType = preferredShapeType;
            return this;
        }

        /**
         * @param preferredShapeType (Updatable) Preferred VM shape type provided by the customer.
         * 
         * @return builder
         * 
         */
        public Builder preferredShapeType(String preferredShapeType) {
            return preferredShapeType(Output.of(preferredShapeType));
        }

        /**
         * @param subnet (Updatable) OCID of the VM configuration subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnet(Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet (Updatable) OCID of the VM configuration subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param targetCompartmentId (Updatable) Target compartment identifier
         * 
         * @return builder
         * 
         */
        public Builder targetCompartmentId(@Nullable Output<String> targetCompartmentId) {
            $.targetCompartmentId = targetCompartmentId;
            return this;
        }

        /**
         * @param targetCompartmentId (Updatable) Target compartment identifier
         * 
         * @return builder
         * 
         */
        public Builder targetCompartmentId(String targetCompartmentId) {
            return targetCompartmentId(Output.of(targetCompartmentId));
        }

        /**
         * @param targetEnvironmentType (Updatable) The type of target environment.
         * 
         * @return builder
         * 
         */
        public Builder targetEnvironmentType(Output<String> targetEnvironmentType) {
            $.targetEnvironmentType = targetEnvironmentType;
            return this;
        }

        /**
         * @param targetEnvironmentType (Updatable) The type of target environment.
         * 
         * @return builder
         * 
         */
        public Builder targetEnvironmentType(String targetEnvironmentType) {
            return targetEnvironmentType(Output.of(targetEnvironmentType));
        }

        /**
         * @param vcn (Updatable) OCID of the VM configuration VCN.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder vcn(Output<String> vcn) {
            $.vcn = vcn;
            return this;
        }

        /**
         * @param vcn (Updatable) OCID of the VM configuration VCN.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder vcn(String vcn) {
            return vcn(Output.of(vcn));
        }

        public MigrationPlanTargetEnvironmentArgs build() {
            if ($.subnet == null) {
                throw new MissingRequiredPropertyException("MigrationPlanTargetEnvironmentArgs", "subnet");
            }
            if ($.targetEnvironmentType == null) {
                throw new MissingRequiredPropertyException("MigrationPlanTargetEnvironmentArgs", "targetEnvironmentType");
            }
            if ($.vcn == null) {
                throw new MissingRequiredPropertyException("MigrationPlanTargetEnvironmentArgs", "vcn");
            }
            return $;
        }
    }

}
