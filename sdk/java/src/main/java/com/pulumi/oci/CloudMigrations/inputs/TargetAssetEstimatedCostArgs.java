// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.CloudMigrations.inputs.TargetAssetEstimatedCostComputeArgs;
import com.pulumi.oci.CloudMigrations.inputs.TargetAssetEstimatedCostOsImageArgs;
import com.pulumi.oci.CloudMigrations.inputs.TargetAssetEstimatedCostStorageArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetAssetEstimatedCostArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetAssetEstimatedCostArgs Empty = new TargetAssetEstimatedCostArgs();

    /**
     * Cost estimation for compute
     * 
     */
    @Import(name="computes")
    private @Nullable Output<List<TargetAssetEstimatedCostComputeArgs>> computes;

    /**
     * @return Cost estimation for compute
     * 
     */
    public Optional<Output<List<TargetAssetEstimatedCostComputeArgs>>> computes() {
        return Optional.ofNullable(this.computes);
    }

    /**
     * Currency code in the ISO format.
     * 
     */
    @Import(name="currencyCode")
    private @Nullable Output<String> currencyCode;

    /**
     * @return Currency code in the ISO format.
     * 
     */
    public Optional<Output<String>> currencyCode() {
        return Optional.ofNullable(this.currencyCode);
    }

    /**
     * Cost estimation for the OS image.
     * 
     */
    @Import(name="osImages")
    private @Nullable Output<List<TargetAssetEstimatedCostOsImageArgs>> osImages;

    /**
     * @return Cost estimation for the OS image.
     * 
     */
    public Optional<Output<List<TargetAssetEstimatedCostOsImageArgs>>> osImages() {
        return Optional.ofNullable(this.osImages);
    }

    /**
     * Cost estimation for storage
     * 
     */
    @Import(name="storages")
    private @Nullable Output<List<TargetAssetEstimatedCostStorageArgs>> storages;

    /**
     * @return Cost estimation for storage
     * 
     */
    public Optional<Output<List<TargetAssetEstimatedCostStorageArgs>>> storages() {
        return Optional.ofNullable(this.storages);
    }

    /**
     * Subscription ID
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return Subscription ID
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * Total estimation per month
     * 
     */
    @Import(name="totalEstimationPerMonth")
    private @Nullable Output<Double> totalEstimationPerMonth;

    /**
     * @return Total estimation per month
     * 
     */
    public Optional<Output<Double>> totalEstimationPerMonth() {
        return Optional.ofNullable(this.totalEstimationPerMonth);
    }

    /**
     * Total estimation per month by subscription.
     * 
     */
    @Import(name="totalEstimationPerMonthBySubscription")
    private @Nullable Output<Double> totalEstimationPerMonthBySubscription;

    /**
     * @return Total estimation per month by subscription.
     * 
     */
    public Optional<Output<Double>> totalEstimationPerMonthBySubscription() {
        return Optional.ofNullable(this.totalEstimationPerMonthBySubscription);
    }

    private TargetAssetEstimatedCostArgs() {}

    private TargetAssetEstimatedCostArgs(TargetAssetEstimatedCostArgs $) {
        this.computes = $.computes;
        this.currencyCode = $.currencyCode;
        this.osImages = $.osImages;
        this.storages = $.storages;
        this.subscriptionId = $.subscriptionId;
        this.totalEstimationPerMonth = $.totalEstimationPerMonth;
        this.totalEstimationPerMonthBySubscription = $.totalEstimationPerMonthBySubscription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetAssetEstimatedCostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetAssetEstimatedCostArgs $;

        public Builder() {
            $ = new TargetAssetEstimatedCostArgs();
        }

        public Builder(TargetAssetEstimatedCostArgs defaults) {
            $ = new TargetAssetEstimatedCostArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computes Cost estimation for compute
         * 
         * @return builder
         * 
         */
        public Builder computes(@Nullable Output<List<TargetAssetEstimatedCostComputeArgs>> computes) {
            $.computes = computes;
            return this;
        }

        /**
         * @param computes Cost estimation for compute
         * 
         * @return builder
         * 
         */
        public Builder computes(List<TargetAssetEstimatedCostComputeArgs> computes) {
            return computes(Output.of(computes));
        }

        /**
         * @param computes Cost estimation for compute
         * 
         * @return builder
         * 
         */
        public Builder computes(TargetAssetEstimatedCostComputeArgs... computes) {
            return computes(List.of(computes));
        }

        /**
         * @param currencyCode Currency code in the ISO format.
         * 
         * @return builder
         * 
         */
        public Builder currencyCode(@Nullable Output<String> currencyCode) {
            $.currencyCode = currencyCode;
            return this;
        }

        /**
         * @param currencyCode Currency code in the ISO format.
         * 
         * @return builder
         * 
         */
        public Builder currencyCode(String currencyCode) {
            return currencyCode(Output.of(currencyCode));
        }

        /**
         * @param osImages Cost estimation for the OS image.
         * 
         * @return builder
         * 
         */
        public Builder osImages(@Nullable Output<List<TargetAssetEstimatedCostOsImageArgs>> osImages) {
            $.osImages = osImages;
            return this;
        }

        /**
         * @param osImages Cost estimation for the OS image.
         * 
         * @return builder
         * 
         */
        public Builder osImages(List<TargetAssetEstimatedCostOsImageArgs> osImages) {
            return osImages(Output.of(osImages));
        }

        /**
         * @param osImages Cost estimation for the OS image.
         * 
         * @return builder
         * 
         */
        public Builder osImages(TargetAssetEstimatedCostOsImageArgs... osImages) {
            return osImages(List.of(osImages));
        }

        /**
         * @param storages Cost estimation for storage
         * 
         * @return builder
         * 
         */
        public Builder storages(@Nullable Output<List<TargetAssetEstimatedCostStorageArgs>> storages) {
            $.storages = storages;
            return this;
        }

        /**
         * @param storages Cost estimation for storage
         * 
         * @return builder
         * 
         */
        public Builder storages(List<TargetAssetEstimatedCostStorageArgs> storages) {
            return storages(Output.of(storages));
        }

        /**
         * @param storages Cost estimation for storage
         * 
         * @return builder
         * 
         */
        public Builder storages(TargetAssetEstimatedCostStorageArgs... storages) {
            return storages(List.of(storages));
        }

        /**
         * @param subscriptionId Subscription ID
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Subscription ID
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param totalEstimationPerMonth Total estimation per month
         * 
         * @return builder
         * 
         */
        public Builder totalEstimationPerMonth(@Nullable Output<Double> totalEstimationPerMonth) {
            $.totalEstimationPerMonth = totalEstimationPerMonth;
            return this;
        }

        /**
         * @param totalEstimationPerMonth Total estimation per month
         * 
         * @return builder
         * 
         */
        public Builder totalEstimationPerMonth(Double totalEstimationPerMonth) {
            return totalEstimationPerMonth(Output.of(totalEstimationPerMonth));
        }

        /**
         * @param totalEstimationPerMonthBySubscription Total estimation per month by subscription.
         * 
         * @return builder
         * 
         */
        public Builder totalEstimationPerMonthBySubscription(@Nullable Output<Double> totalEstimationPerMonthBySubscription) {
            $.totalEstimationPerMonthBySubscription = totalEstimationPerMonthBySubscription;
            return this;
        }

        /**
         * @param totalEstimationPerMonthBySubscription Total estimation per month by subscription.
         * 
         * @return builder
         * 
         */
        public Builder totalEstimationPerMonthBySubscription(Double totalEstimationPerMonthBySubscription) {
            return totalEstimationPerMonthBySubscription(Output.of(totalEstimationPerMonthBySubscription));
        }

        public TargetAssetEstimatedCostArgs build() {
            return $;
        }
    }

}
