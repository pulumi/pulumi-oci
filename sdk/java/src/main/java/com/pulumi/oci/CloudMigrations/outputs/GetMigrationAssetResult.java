// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMigrationAssetResult {
    /**
     * @return Availability domain
     * 
     */
    private String availabilityDomain;
    /**
     * @return Compartment Identifier
     * 
     */
    private String compartmentId;
    /**
     * @return List of migration assets that depend on the asset.
     * 
     */
    private List<String> dependedOnBies;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    private String id;
    private String inventoryAssetId;
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    private List<String> migrationAssetDependsOns;
    private String migrationAssetId;
    /**
     * @return OCID of the associated migration.
     * 
     */
    private String migrationId;
    /**
     * @return List of notifications
     * 
     */
    private List<String> notifications;
    /**
     * @return The parent snapshot of the migration asset to be used by the replication task.
     * 
     */
    private String parentSnapshot;
    /**
     * @return Replication compartment identifier
     * 
     */
    private String replicationCompartmentId;
    /**
     * @return Replication schedule identifier
     * 
     */
    private String replicationScheduleId;
    /**
     * @return Name of snapshot bucket
     * 
     */
    private String snapShotBucketName;
    /**
     * @return Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> snapshots;
    /**
     * @return OCID that is referenced to an asset for an inventory.
     * 
     */
    private String sourceAssetId;
    /**
     * @return The current state of the migration asset.
     * 
     */
    private String state;
    /**
     * @return Tenancy identifier
     * 
     */
    private String tenancyId;
    /**
     * @return The time when the migration asset was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the migration asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The type of asset referenced for inventory.
     * 
     */
    private String type;

    private GetMigrationAssetResult() {}
    /**
     * @return Availability domain
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return Compartment Identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return List of migration assets that depend on the asset.
     * 
     */
    public List<String> dependedOnBies() {
        return this.dependedOnBies;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    public String id() {
        return this.id;
    }
    public String inventoryAssetId() {
        return this.inventoryAssetId;
    }
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public List<String> migrationAssetDependsOns() {
        return this.migrationAssetDependsOns;
    }
    public String migrationAssetId() {
        return this.migrationAssetId;
    }
    /**
     * @return OCID of the associated migration.
     * 
     */
    public String migrationId() {
        return this.migrationId;
    }
    /**
     * @return List of notifications
     * 
     */
    public List<String> notifications() {
        return this.notifications;
    }
    /**
     * @return The parent snapshot of the migration asset to be used by the replication task.
     * 
     */
    public String parentSnapshot() {
        return this.parentSnapshot;
    }
    /**
     * @return Replication compartment identifier
     * 
     */
    public String replicationCompartmentId() {
        return this.replicationCompartmentId;
    }
    /**
     * @return Replication schedule identifier
     * 
     */
    public String replicationScheduleId() {
        return this.replicationScheduleId;
    }
    /**
     * @return Name of snapshot bucket
     * 
     */
    public String snapShotBucketName() {
        return this.snapShotBucketName;
    }
    /**
     * @return Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> snapshots() {
        return this.snapshots;
    }
    /**
     * @return OCID that is referenced to an asset for an inventory.
     * 
     */
    public String sourceAssetId() {
        return this.sourceAssetId;
    }
    /**
     * @return The current state of the migration asset.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Tenancy identifier
     * 
     */
    public String tenancyId() {
        return this.tenancyId;
    }
    /**
     * @return The time when the migration asset was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the migration asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The type of asset referenced for inventory.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationAssetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private String compartmentId;
        private List<String> dependedOnBies;
        private String displayName;
        private String id;
        private String inventoryAssetId;
        private String lifecycleDetails;
        private List<String> migrationAssetDependsOns;
        private String migrationAssetId;
        private String migrationId;
        private List<String> notifications;
        private String parentSnapshot;
        private String replicationCompartmentId;
        private String replicationScheduleId;
        private String snapShotBucketName;
        private Map<String,String> snapshots;
        private String sourceAssetId;
        private String state;
        private String tenancyId;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetMigrationAssetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dependedOnBies = defaults.dependedOnBies;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.inventoryAssetId = defaults.inventoryAssetId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationAssetDependsOns = defaults.migrationAssetDependsOns;
    	      this.migrationAssetId = defaults.migrationAssetId;
    	      this.migrationId = defaults.migrationId;
    	      this.notifications = defaults.notifications;
    	      this.parentSnapshot = defaults.parentSnapshot;
    	      this.replicationCompartmentId = defaults.replicationCompartmentId;
    	      this.replicationScheduleId = defaults.replicationScheduleId;
    	      this.snapShotBucketName = defaults.snapShotBucketName;
    	      this.snapshots = defaults.snapshots;
    	      this.sourceAssetId = defaults.sourceAssetId;
    	      this.state = defaults.state;
    	      this.tenancyId = defaults.tenancyId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dependedOnBies(List<String> dependedOnBies) {
            if (dependedOnBies == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "dependedOnBies");
            }
            this.dependedOnBies = dependedOnBies;
            return this;
        }
        public Builder dependedOnBies(String... dependedOnBies) {
            return dependedOnBies(List.of(dependedOnBies));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inventoryAssetId(String inventoryAssetId) {
            if (inventoryAssetId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "inventoryAssetId");
            }
            this.inventoryAssetId = inventoryAssetId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder migrationAssetDependsOns(List<String> migrationAssetDependsOns) {
            if (migrationAssetDependsOns == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "migrationAssetDependsOns");
            }
            this.migrationAssetDependsOns = migrationAssetDependsOns;
            return this;
        }
        public Builder migrationAssetDependsOns(String... migrationAssetDependsOns) {
            return migrationAssetDependsOns(List.of(migrationAssetDependsOns));
        }
        @CustomType.Setter
        public Builder migrationAssetId(String migrationAssetId) {
            if (migrationAssetId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "migrationAssetId");
            }
            this.migrationAssetId = migrationAssetId;
            return this;
        }
        @CustomType.Setter
        public Builder migrationId(String migrationId) {
            if (migrationId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "migrationId");
            }
            this.migrationId = migrationId;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<String> notifications) {
            if (notifications == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "notifications");
            }
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder parentSnapshot(String parentSnapshot) {
            if (parentSnapshot == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "parentSnapshot");
            }
            this.parentSnapshot = parentSnapshot;
            return this;
        }
        @CustomType.Setter
        public Builder replicationCompartmentId(String replicationCompartmentId) {
            if (replicationCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "replicationCompartmentId");
            }
            this.replicationCompartmentId = replicationCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder replicationScheduleId(String replicationScheduleId) {
            if (replicationScheduleId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "replicationScheduleId");
            }
            this.replicationScheduleId = replicationScheduleId;
            return this;
        }
        @CustomType.Setter
        public Builder snapShotBucketName(String snapShotBucketName) {
            if (snapShotBucketName == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "snapShotBucketName");
            }
            this.snapShotBucketName = snapShotBucketName;
            return this;
        }
        @CustomType.Setter
        public Builder snapshots(Map<String,String> snapshots) {
            if (snapshots == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "snapshots");
            }
            this.snapshots = snapshots;
            return this;
        }
        @CustomType.Setter
        public Builder sourceAssetId(String sourceAssetId) {
            if (sourceAssetId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "sourceAssetId");
            }
            this.sourceAssetId = sourceAssetId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(String tenancyId) {
            if (tenancyId == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "tenancyId");
            }
            this.tenancyId = tenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMigrationAssetResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetMigrationAssetResult build() {
            final var _resultValue = new GetMigrationAssetResult();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.compartmentId = compartmentId;
            _resultValue.dependedOnBies = dependedOnBies;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.inventoryAssetId = inventoryAssetId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.migrationAssetDependsOns = migrationAssetDependsOns;
            _resultValue.migrationAssetId = migrationAssetId;
            _resultValue.migrationId = migrationId;
            _resultValue.notifications = notifications;
            _resultValue.parentSnapshot = parentSnapshot;
            _resultValue.replicationCompartmentId = replicationCompartmentId;
            _resultValue.replicationScheduleId = replicationScheduleId;
            _resultValue.snapShotBucketName = snapShotBucketName;
            _resultValue.snapshots = snapshots;
            _resultValue.sourceAssetId = sourceAssetId;
            _resultValue.state = state;
            _resultValue.tenancyId = tenancyId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
