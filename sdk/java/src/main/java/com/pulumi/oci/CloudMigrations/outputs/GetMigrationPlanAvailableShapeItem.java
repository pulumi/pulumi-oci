// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMigrationPlanAvailableShapeItem {
    /**
     * @return The availability domain in which to list resources.
     * 
     */
    private String availabilityDomain;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. It exists only for cross-compatibility. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Description of the GPUs.
     * 
     */
    private String gpuDescription;
    /**
     * @return Number of GPUs.
     * 
     */
    private Integer gpus;
    /**
     * @return Description of local disks.
     * 
     */
    private String localDiskDescription;
    /**
     * @return Number of local disks.
     * 
     */
    private Integer localDisks;
    /**
     * @return Total size of local disks for shape.
     * 
     */
    private Double localDisksTotalSizeInGbs;
    /**
     * @return Maximum number of virtual network interfaces that can be attached.
     * 
     */
    private Integer maxVnicAttachments;
    /**
     * @return Amount of memory for the shape.
     * 
     */
    private Double memoryInGbs;
    /**
     * @return Minimum CPUs required.
     * 
     */
    private Double minTotalBaselineOcpusRequired;
    /**
     * @return Shape bandwidth.
     * 
     */
    private Double networkingBandwidthInGbps;
    /**
     * @return Number of CPUs.
     * 
     */
    private Double ocpus;
    /**
     * @return Shape name and availability domain.  Used for pagination.
     * 
     */
    private String paginationToken;
    /**
     * @return Description of the processor.
     * 
     */
    private String processorDescription;
    /**
     * @return Name of the shape.
     * 
     */
    private String shape;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;

    private GetMigrationPlanAvailableShapeItem() {}
    /**
     * @return The availability domain in which to list resources.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. It exists only for cross-compatibility. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Description of the GPUs.
     * 
     */
    public String gpuDescription() {
        return this.gpuDescription;
    }
    /**
     * @return Number of GPUs.
     * 
     */
    public Integer gpus() {
        return this.gpus;
    }
    /**
     * @return Description of local disks.
     * 
     */
    public String localDiskDescription() {
        return this.localDiskDescription;
    }
    /**
     * @return Number of local disks.
     * 
     */
    public Integer localDisks() {
        return this.localDisks;
    }
    /**
     * @return Total size of local disks for shape.
     * 
     */
    public Double localDisksTotalSizeInGbs() {
        return this.localDisksTotalSizeInGbs;
    }
    /**
     * @return Maximum number of virtual network interfaces that can be attached.
     * 
     */
    public Integer maxVnicAttachments() {
        return this.maxVnicAttachments;
    }
    /**
     * @return Amount of memory for the shape.
     * 
     */
    public Double memoryInGbs() {
        return this.memoryInGbs;
    }
    /**
     * @return Minimum CPUs required.
     * 
     */
    public Double minTotalBaselineOcpusRequired() {
        return this.minTotalBaselineOcpusRequired;
    }
    /**
     * @return Shape bandwidth.
     * 
     */
    public Double networkingBandwidthInGbps() {
        return this.networkingBandwidthInGbps;
    }
    /**
     * @return Number of CPUs.
     * 
     */
    public Double ocpus() {
        return this.ocpus;
    }
    /**
     * @return Shape name and availability domain.  Used for pagination.
     * 
     */
    public String paginationToken() {
        return this.paginationToken;
    }
    /**
     * @return Description of the processor.
     * 
     */
    public String processorDescription() {
        return this.processorDescription;
    }
    /**
     * @return Name of the shape.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationPlanAvailableShapeItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private Map<String,String> definedTags;
        private Map<String,String> freeformTags;
        private String gpuDescription;
        private Integer gpus;
        private String localDiskDescription;
        private Integer localDisks;
        private Double localDisksTotalSizeInGbs;
        private Integer maxVnicAttachments;
        private Double memoryInGbs;
        private Double minTotalBaselineOcpusRequired;
        private Double networkingBandwidthInGbps;
        private Double ocpus;
        private String paginationToken;
        private String processorDescription;
        private String shape;
        private Map<String,String> systemTags;
        public Builder() {}
        public Builder(GetMigrationPlanAvailableShapeItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gpuDescription = defaults.gpuDescription;
    	      this.gpus = defaults.gpus;
    	      this.localDiskDescription = defaults.localDiskDescription;
    	      this.localDisks = defaults.localDisks;
    	      this.localDisksTotalSizeInGbs = defaults.localDisksTotalSizeInGbs;
    	      this.maxVnicAttachments = defaults.maxVnicAttachments;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.minTotalBaselineOcpusRequired = defaults.minTotalBaselineOcpusRequired;
    	      this.networkingBandwidthInGbps = defaults.networkingBandwidthInGbps;
    	      this.ocpus = defaults.ocpus;
    	      this.paginationToken = defaults.paginationToken;
    	      this.processorDescription = defaults.processorDescription;
    	      this.shape = defaults.shape;
    	      this.systemTags = defaults.systemTags;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDescription(String gpuDescription) {
            if (gpuDescription == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "gpuDescription");
            }
            this.gpuDescription = gpuDescription;
            return this;
        }
        @CustomType.Setter
        public Builder gpus(Integer gpus) {
            if (gpus == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "gpus");
            }
            this.gpus = gpus;
            return this;
        }
        @CustomType.Setter
        public Builder localDiskDescription(String localDiskDescription) {
            if (localDiskDescription == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "localDiskDescription");
            }
            this.localDiskDescription = localDiskDescription;
            return this;
        }
        @CustomType.Setter
        public Builder localDisks(Integer localDisks) {
            if (localDisks == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "localDisks");
            }
            this.localDisks = localDisks;
            return this;
        }
        @CustomType.Setter
        public Builder localDisksTotalSizeInGbs(Double localDisksTotalSizeInGbs) {
            if (localDisksTotalSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "localDisksTotalSizeInGbs");
            }
            this.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxVnicAttachments(Integer maxVnicAttachments) {
            if (maxVnicAttachments == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "maxVnicAttachments");
            }
            this.maxVnicAttachments = maxVnicAttachments;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(Double memoryInGbs) {
            if (memoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "memoryInGbs");
            }
            this.memoryInGbs = memoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder minTotalBaselineOcpusRequired(Double minTotalBaselineOcpusRequired) {
            if (minTotalBaselineOcpusRequired == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "minTotalBaselineOcpusRequired");
            }
            this.minTotalBaselineOcpusRequired = minTotalBaselineOcpusRequired;
            return this;
        }
        @CustomType.Setter
        public Builder networkingBandwidthInGbps(Double networkingBandwidthInGbps) {
            if (networkingBandwidthInGbps == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "networkingBandwidthInGbps");
            }
            this.networkingBandwidthInGbps = networkingBandwidthInGbps;
            return this;
        }
        @CustomType.Setter
        public Builder ocpus(Double ocpus) {
            if (ocpus == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "ocpus");
            }
            this.ocpus = ocpus;
            return this;
        }
        @CustomType.Setter
        public Builder paginationToken(String paginationToken) {
            if (paginationToken == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "paginationToken");
            }
            this.paginationToken = paginationToken;
            return this;
        }
        @CustomType.Setter
        public Builder processorDescription(String processorDescription) {
            if (processorDescription == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "processorDescription");
            }
            this.processorDescription = processorDescription;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationPlanAvailableShapeItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        public GetMigrationPlanAvailableShapeItem build() {
            final var _resultValue = new GetMigrationPlanAvailableShapeItem();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.definedTags = definedTags;
            _resultValue.freeformTags = freeformTags;
            _resultValue.gpuDescription = gpuDescription;
            _resultValue.gpus = gpus;
            _resultValue.localDiskDescription = localDiskDescription;
            _resultValue.localDisks = localDisks;
            _resultValue.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            _resultValue.maxVnicAttachments = maxVnicAttachments;
            _resultValue.memoryInGbs = memoryInGbs;
            _resultValue.minTotalBaselineOcpusRequired = minTotalBaselineOcpusRequired;
            _resultValue.networkingBandwidthInGbps = networkingBandwidthInGbps;
            _resultValue.ocpus = ocpus;
            _resultValue.paginationToken = paginationToken;
            _resultValue.processorDescription = processorDescription;
            _resultValue.shape = shape;
            _resultValue.systemTags = systemTags;
            return _resultValue;
        }
    }
}
