// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetEstimatedCostCompute;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetEstimatedCostOsImage;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetEstimatedCostStorage;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetAssetEstimatedCost {
    /**
     * @return Cost estimation for compute
     * 
     */
    private @Nullable List<GetTargetAssetEstimatedCostCompute> computes;
    /**
     * @return Currency code in the ISO format.
     * 
     */
    private @Nullable String currencyCode;
    /**
     * @return Cost estimation for the OS image.
     * 
     */
    private @Nullable List<GetTargetAssetEstimatedCostOsImage> osImages;
    /**
     * @return Cost estimation for storage
     * 
     */
    private @Nullable List<GetTargetAssetEstimatedCostStorage> storages;
    /**
     * @return Subscription ID
     * 
     */
    private @Nullable String subscriptionId;
    /**
     * @return Total estimation per month
     * 
     */
    private @Nullable Double totalEstimationPerMonth;
    /**
     * @return Total estimation per month by subscription.
     * 
     */
    private @Nullable Double totalEstimationPerMonthBySubscription;

    private GetTargetAssetEstimatedCost() {}
    /**
     * @return Cost estimation for compute
     * 
     */
    public List<GetTargetAssetEstimatedCostCompute> computes() {
        return this.computes == null ? List.of() : this.computes;
    }
    /**
     * @return Currency code in the ISO format.
     * 
     */
    public Optional<String> currencyCode() {
        return Optional.ofNullable(this.currencyCode);
    }
    /**
     * @return Cost estimation for the OS image.
     * 
     */
    public List<GetTargetAssetEstimatedCostOsImage> osImages() {
        return this.osImages == null ? List.of() : this.osImages;
    }
    /**
     * @return Cost estimation for storage
     * 
     */
    public List<GetTargetAssetEstimatedCostStorage> storages() {
        return this.storages == null ? List.of() : this.storages;
    }
    /**
     * @return Subscription ID
     * 
     */
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }
    /**
     * @return Total estimation per month
     * 
     */
    public Optional<Double> totalEstimationPerMonth() {
        return Optional.ofNullable(this.totalEstimationPerMonth);
    }
    /**
     * @return Total estimation per month by subscription.
     * 
     */
    public Optional<Double> totalEstimationPerMonthBySubscription() {
        return Optional.ofNullable(this.totalEstimationPerMonthBySubscription);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetAssetEstimatedCost defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetTargetAssetEstimatedCostCompute> computes;
        private @Nullable String currencyCode;
        private @Nullable List<GetTargetAssetEstimatedCostOsImage> osImages;
        private @Nullable List<GetTargetAssetEstimatedCostStorage> storages;
        private @Nullable String subscriptionId;
        private @Nullable Double totalEstimationPerMonth;
        private @Nullable Double totalEstimationPerMonthBySubscription;
        public Builder() {}
        public Builder(GetTargetAssetEstimatedCost defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computes = defaults.computes;
    	      this.currencyCode = defaults.currencyCode;
    	      this.osImages = defaults.osImages;
    	      this.storages = defaults.storages;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.totalEstimationPerMonth = defaults.totalEstimationPerMonth;
    	      this.totalEstimationPerMonthBySubscription = defaults.totalEstimationPerMonthBySubscription;
        }

        @CustomType.Setter
        public Builder computes(@Nullable List<GetTargetAssetEstimatedCostCompute> computes) {
            this.computes = computes;
            return this;
        }
        public Builder computes(GetTargetAssetEstimatedCostCompute... computes) {
            return computes(List.of(computes));
        }
        @CustomType.Setter
        public Builder currencyCode(@Nullable String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        @CustomType.Setter
        public Builder osImages(@Nullable List<GetTargetAssetEstimatedCostOsImage> osImages) {
            this.osImages = osImages;
            return this;
        }
        public Builder osImages(GetTargetAssetEstimatedCostOsImage... osImages) {
            return osImages(List.of(osImages));
        }
        @CustomType.Setter
        public Builder storages(@Nullable List<GetTargetAssetEstimatedCostStorage> storages) {
            this.storages = storages;
            return this;
        }
        public Builder storages(GetTargetAssetEstimatedCostStorage... storages) {
            return storages(List.of(storages));
        }
        @CustomType.Setter
        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder totalEstimationPerMonth(@Nullable Double totalEstimationPerMonth) {
            this.totalEstimationPerMonth = totalEstimationPerMonth;
            return this;
        }
        @CustomType.Setter
        public Builder totalEstimationPerMonthBySubscription(@Nullable Double totalEstimationPerMonthBySubscription) {
            this.totalEstimationPerMonthBySubscription = totalEstimationPerMonthBySubscription;
            return this;
        }
        public GetTargetAssetEstimatedCost build() {
            final var o = new GetTargetAssetEstimatedCost();
            o.computes = computes;
            o.currencyCode = currencyCode;
            o.osImages = osImages;
            o.storages = storages;
            o.subscriptionId = subscriptionId;
            o.totalEstimationPerMonth = totalEstimationPerMonth;
            o.totalEstimationPerMonthBySubscription = totalEstimationPerMonthBySubscription;
            return o;
        }
    }
}
