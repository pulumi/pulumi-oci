// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetAssetEstimatedCostCompute {
    /**
     * @return Total number of GPU
     * 
     */
    private @Nullable Double gpuCount;
    /**
     * @return GPU per hour
     * 
     */
    private @Nullable Double gpuPerHour;
    /**
     * @return GPU per hour by subscription
     * 
     */
    private @Nullable Double gpuPerHourBySubscription;
    /**
     * @return Total usage of memory
     * 
     */
    private @Nullable Double memoryAmountGb;
    /**
     * @return Gigabyte per hour
     * 
     */
    private @Nullable Double memoryGbPerHour;
    /**
     * @return Gigabyte per hour by subscription
     * 
     */
    private @Nullable Double memoryGbPerHourBySubscription;
    /**
     * @return Total number of OCPUs
     * 
     */
    private @Nullable Double ocpuCount;
    /**
     * @return OCPU per hour
     * 
     */
    private @Nullable Double ocpuPerHour;
    /**
     * @return OCPU per hour by subscription
     * 
     */
    private @Nullable Double ocpuPerHourBySubscription;
    /**
     * @return Total price per hour
     * 
     */
    private @Nullable Double totalPerHour;
    /**
     * @return Total price per hour by subscription
     * 
     */
    private @Nullable Double totalPerHourBySubscription;

    private GetTargetAssetEstimatedCostCompute() {}
    /**
     * @return Total number of GPU
     * 
     */
    public Optional<Double> gpuCount() {
        return Optional.ofNullable(this.gpuCount);
    }
    /**
     * @return GPU per hour
     * 
     */
    public Optional<Double> gpuPerHour() {
        return Optional.ofNullable(this.gpuPerHour);
    }
    /**
     * @return GPU per hour by subscription
     * 
     */
    public Optional<Double> gpuPerHourBySubscription() {
        return Optional.ofNullable(this.gpuPerHourBySubscription);
    }
    /**
     * @return Total usage of memory
     * 
     */
    public Optional<Double> memoryAmountGb() {
        return Optional.ofNullable(this.memoryAmountGb);
    }
    /**
     * @return Gigabyte per hour
     * 
     */
    public Optional<Double> memoryGbPerHour() {
        return Optional.ofNullable(this.memoryGbPerHour);
    }
    /**
     * @return Gigabyte per hour by subscription
     * 
     */
    public Optional<Double> memoryGbPerHourBySubscription() {
        return Optional.ofNullable(this.memoryGbPerHourBySubscription);
    }
    /**
     * @return Total number of OCPUs
     * 
     */
    public Optional<Double> ocpuCount() {
        return Optional.ofNullable(this.ocpuCount);
    }
    /**
     * @return OCPU per hour
     * 
     */
    public Optional<Double> ocpuPerHour() {
        return Optional.ofNullable(this.ocpuPerHour);
    }
    /**
     * @return OCPU per hour by subscription
     * 
     */
    public Optional<Double> ocpuPerHourBySubscription() {
        return Optional.ofNullable(this.ocpuPerHourBySubscription);
    }
    /**
     * @return Total price per hour
     * 
     */
    public Optional<Double> totalPerHour() {
        return Optional.ofNullable(this.totalPerHour);
    }
    /**
     * @return Total price per hour by subscription
     * 
     */
    public Optional<Double> totalPerHourBySubscription() {
        return Optional.ofNullable(this.totalPerHourBySubscription);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetAssetEstimatedCostCompute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double gpuCount;
        private @Nullable Double gpuPerHour;
        private @Nullable Double gpuPerHourBySubscription;
        private @Nullable Double memoryAmountGb;
        private @Nullable Double memoryGbPerHour;
        private @Nullable Double memoryGbPerHourBySubscription;
        private @Nullable Double ocpuCount;
        private @Nullable Double ocpuPerHour;
        private @Nullable Double ocpuPerHourBySubscription;
        private @Nullable Double totalPerHour;
        private @Nullable Double totalPerHourBySubscription;
        public Builder() {}
        public Builder(GetTargetAssetEstimatedCostCompute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gpuCount = defaults.gpuCount;
    	      this.gpuPerHour = defaults.gpuPerHour;
    	      this.gpuPerHourBySubscription = defaults.gpuPerHourBySubscription;
    	      this.memoryAmountGb = defaults.memoryAmountGb;
    	      this.memoryGbPerHour = defaults.memoryGbPerHour;
    	      this.memoryGbPerHourBySubscription = defaults.memoryGbPerHourBySubscription;
    	      this.ocpuCount = defaults.ocpuCount;
    	      this.ocpuPerHour = defaults.ocpuPerHour;
    	      this.ocpuPerHourBySubscription = defaults.ocpuPerHourBySubscription;
    	      this.totalPerHour = defaults.totalPerHour;
    	      this.totalPerHourBySubscription = defaults.totalPerHourBySubscription;
        }

        @CustomType.Setter
        public Builder gpuCount(@Nullable Double gpuCount) {
            this.gpuCount = gpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder gpuPerHour(@Nullable Double gpuPerHour) {
            this.gpuPerHour = gpuPerHour;
            return this;
        }
        @CustomType.Setter
        public Builder gpuPerHourBySubscription(@Nullable Double gpuPerHourBySubscription) {
            this.gpuPerHourBySubscription = gpuPerHourBySubscription;
            return this;
        }
        @CustomType.Setter
        public Builder memoryAmountGb(@Nullable Double memoryAmountGb) {
            this.memoryAmountGb = memoryAmountGb;
            return this;
        }
        @CustomType.Setter
        public Builder memoryGbPerHour(@Nullable Double memoryGbPerHour) {
            this.memoryGbPerHour = memoryGbPerHour;
            return this;
        }
        @CustomType.Setter
        public Builder memoryGbPerHourBySubscription(@Nullable Double memoryGbPerHourBySubscription) {
            this.memoryGbPerHourBySubscription = memoryGbPerHourBySubscription;
            return this;
        }
        @CustomType.Setter
        public Builder ocpuCount(@Nullable Double ocpuCount) {
            this.ocpuCount = ocpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder ocpuPerHour(@Nullable Double ocpuPerHour) {
            this.ocpuPerHour = ocpuPerHour;
            return this;
        }
        @CustomType.Setter
        public Builder ocpuPerHourBySubscription(@Nullable Double ocpuPerHourBySubscription) {
            this.ocpuPerHourBySubscription = ocpuPerHourBySubscription;
            return this;
        }
        @CustomType.Setter
        public Builder totalPerHour(@Nullable Double totalPerHour) {
            this.totalPerHour = totalPerHour;
            return this;
        }
        @CustomType.Setter
        public Builder totalPerHourBySubscription(@Nullable Double totalPerHourBySubscription) {
            this.totalPerHourBySubscription = totalPerHourBySubscription;
            return this;
        }
        public GetTargetAssetEstimatedCostCompute build() {
            final var o = new GetTargetAssetEstimatedCostCompute();
            o.gpuCount = gpuCount;
            o.gpuPerHour = gpuPerHour;
            o.gpuPerHourBySubscription = gpuPerHourBySubscription;
            o.memoryAmountGb = memoryAmountGb;
            o.memoryGbPerHour = memoryGbPerHour;
            o.memoryGbPerHourBySubscription = memoryGbPerHourBySubscription;
            o.ocpuCount = ocpuCount;
            o.ocpuPerHour = ocpuPerHour;
            o.ocpuPerHourBySubscription = ocpuPerHourBySubscription;
            o.totalPerHour = totalPerHour;
            o.totalPerHourBySubscription = totalPerHourBySubscription;
            return o;
        }
    }
}
