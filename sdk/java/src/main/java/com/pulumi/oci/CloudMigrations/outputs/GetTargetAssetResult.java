// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetCompatibilityMessage;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetEstimatedCost;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetMigrationAsset;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetRecommendedSpec;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetTestSpec;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetUserSpec;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetAssetResult {
    /**
     * @return Performance of the block volumes.
     * 
     */
    private @Nullable Integer blockVolumesPerformance;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Messages about the compatibility issues.
     * 
     */
    private @Nullable List<GetTargetAssetCompatibilityMessage> compatibilityMessages;
    /**
     * @return Created resource identifier
     * 
     */
    private @Nullable String createdResourceId;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Cost estimation description
     * 
     */
    private @Nullable List<GetTargetAssetEstimatedCost> estimatedCosts;
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    private @Nullable String id;
    /**
     * @return A boolean indicating whether the asset should be migrated.
     * 
     */
    private @Nullable Boolean isExcludedFromExecution;
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return Description of the migration asset.
     * 
     */
    private @Nullable List<GetTargetAssetMigrationAsset> migrationAssets;
    /**
     * @return OCID of the associated migration plan.
     * 
     */
    private @Nullable String migrationPlanId;
    /**
     * @return Microsoft license for VM configuration.
     * 
     */
    private @Nullable String msLicense;
    /**
     * @return Preferred VM shape type that you provide.
     * 
     */
    private @Nullable String preferredShapeType;
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    private @Nullable List<GetTargetAssetRecommendedSpec> recommendedSpecs;
    /**
     * @return The current state of the target asset.
     * 
     */
    private @Nullable String state;
    private String targetAssetId;
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    private @Nullable List<GetTargetAssetTestSpec> testSpecs;
    /**
     * @return The time when the assessment was done. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeAssessed;
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    private @Nullable String type;
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    private @Nullable List<GetTargetAssetUserSpec> userSpecs;

    private GetTargetAssetResult() {}
    /**
     * @return Performance of the block volumes.
     * 
     */
    public Optional<Integer> blockVolumesPerformance() {
        return Optional.ofNullable(this.blockVolumesPerformance);
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Messages about the compatibility issues.
     * 
     */
    public List<GetTargetAssetCompatibilityMessage> compatibilityMessages() {
        return this.compatibilityMessages == null ? List.of() : this.compatibilityMessages;
    }
    /**
     * @return Created resource identifier
     * 
     */
    public Optional<String> createdResourceId() {
        return Optional.ofNullable(this.createdResourceId);
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Cost estimation description
     * 
     */
    public List<GetTargetAssetEstimatedCost> estimatedCosts() {
        return this.estimatedCosts == null ? List.of() : this.estimatedCosts;
    }
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A boolean indicating whether the asset should be migrated.
     * 
     */
    public Optional<Boolean> isExcludedFromExecution() {
        return Optional.ofNullable(this.isExcludedFromExecution);
    }
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return Description of the migration asset.
     * 
     */
    public List<GetTargetAssetMigrationAsset> migrationAssets() {
        return this.migrationAssets == null ? List.of() : this.migrationAssets;
    }
    /**
     * @return OCID of the associated migration plan.
     * 
     */
    public Optional<String> migrationPlanId() {
        return Optional.ofNullable(this.migrationPlanId);
    }
    /**
     * @return Microsoft license for VM configuration.
     * 
     */
    public Optional<String> msLicense() {
        return Optional.ofNullable(this.msLicense);
    }
    /**
     * @return Preferred VM shape type that you provide.
     * 
     */
    public Optional<String> preferredShapeType() {
        return Optional.ofNullable(this.preferredShapeType);
    }
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public List<GetTargetAssetRecommendedSpec> recommendedSpecs() {
        return this.recommendedSpecs == null ? List.of() : this.recommendedSpecs;
    }
    /**
     * @return The current state of the target asset.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public String targetAssetId() {
        return this.targetAssetId;
    }
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public List<GetTargetAssetTestSpec> testSpecs() {
        return this.testSpecs == null ? List.of() : this.testSpecs;
    }
    /**
     * @return The time when the assessment was done. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeAssessed() {
        return Optional.ofNullable(this.timeAssessed);
    }
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public List<GetTargetAssetUserSpec> userSpecs() {
        return this.userSpecs == null ? List.of() : this.userSpecs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetAssetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer blockVolumesPerformance;
        private @Nullable String compartmentId;
        private @Nullable List<GetTargetAssetCompatibilityMessage> compatibilityMessages;
        private @Nullable String createdResourceId;
        private @Nullable String displayName;
        private @Nullable List<GetTargetAssetEstimatedCost> estimatedCosts;
        private @Nullable String id;
        private @Nullable Boolean isExcludedFromExecution;
        private @Nullable String lifecycleDetails;
        private @Nullable List<GetTargetAssetMigrationAsset> migrationAssets;
        private @Nullable String migrationPlanId;
        private @Nullable String msLicense;
        private @Nullable String preferredShapeType;
        private @Nullable List<GetTargetAssetRecommendedSpec> recommendedSpecs;
        private @Nullable String state;
        private String targetAssetId;
        private @Nullable List<GetTargetAssetTestSpec> testSpecs;
        private @Nullable String timeAssessed;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable String type;
        private @Nullable List<GetTargetAssetUserSpec> userSpecs;
        public Builder() {}
        public Builder(GetTargetAssetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockVolumesPerformance = defaults.blockVolumesPerformance;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compatibilityMessages = defaults.compatibilityMessages;
    	      this.createdResourceId = defaults.createdResourceId;
    	      this.displayName = defaults.displayName;
    	      this.estimatedCosts = defaults.estimatedCosts;
    	      this.id = defaults.id;
    	      this.isExcludedFromExecution = defaults.isExcludedFromExecution;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationAssets = defaults.migrationAssets;
    	      this.migrationPlanId = defaults.migrationPlanId;
    	      this.msLicense = defaults.msLicense;
    	      this.preferredShapeType = defaults.preferredShapeType;
    	      this.recommendedSpecs = defaults.recommendedSpecs;
    	      this.state = defaults.state;
    	      this.targetAssetId = defaults.targetAssetId;
    	      this.testSpecs = defaults.testSpecs;
    	      this.timeAssessed = defaults.timeAssessed;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.userSpecs = defaults.userSpecs;
        }

        @CustomType.Setter
        public Builder blockVolumesPerformance(@Nullable Integer blockVolumesPerformance) {
            this.blockVolumesPerformance = blockVolumesPerformance;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compatibilityMessages(@Nullable List<GetTargetAssetCompatibilityMessage> compatibilityMessages) {
            this.compatibilityMessages = compatibilityMessages;
            return this;
        }
        public Builder compatibilityMessages(GetTargetAssetCompatibilityMessage... compatibilityMessages) {
            return compatibilityMessages(List.of(compatibilityMessages));
        }
        @CustomType.Setter
        public Builder createdResourceId(@Nullable String createdResourceId) {
            this.createdResourceId = createdResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedCosts(@Nullable List<GetTargetAssetEstimatedCost> estimatedCosts) {
            this.estimatedCosts = estimatedCosts;
            return this;
        }
        public Builder estimatedCosts(GetTargetAssetEstimatedCost... estimatedCosts) {
            return estimatedCosts(List.of(estimatedCosts));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isExcludedFromExecution(@Nullable Boolean isExcludedFromExecution) {
            this.isExcludedFromExecution = isExcludedFromExecution;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder migrationAssets(@Nullable List<GetTargetAssetMigrationAsset> migrationAssets) {
            this.migrationAssets = migrationAssets;
            return this;
        }
        public Builder migrationAssets(GetTargetAssetMigrationAsset... migrationAssets) {
            return migrationAssets(List.of(migrationAssets));
        }
        @CustomType.Setter
        public Builder migrationPlanId(@Nullable String migrationPlanId) {
            this.migrationPlanId = migrationPlanId;
            return this;
        }
        @CustomType.Setter
        public Builder msLicense(@Nullable String msLicense) {
            this.msLicense = msLicense;
            return this;
        }
        @CustomType.Setter
        public Builder preferredShapeType(@Nullable String preferredShapeType) {
            this.preferredShapeType = preferredShapeType;
            return this;
        }
        @CustomType.Setter
        public Builder recommendedSpecs(@Nullable List<GetTargetAssetRecommendedSpec> recommendedSpecs) {
            this.recommendedSpecs = recommendedSpecs;
            return this;
        }
        public Builder recommendedSpecs(GetTargetAssetRecommendedSpec... recommendedSpecs) {
            return recommendedSpecs(List.of(recommendedSpecs));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetAssetId(String targetAssetId) {
            this.targetAssetId = Objects.requireNonNull(targetAssetId);
            return this;
        }
        @CustomType.Setter
        public Builder testSpecs(@Nullable List<GetTargetAssetTestSpec> testSpecs) {
            this.testSpecs = testSpecs;
            return this;
        }
        public Builder testSpecs(GetTargetAssetTestSpec... testSpecs) {
            return testSpecs(List.of(testSpecs));
        }
        @CustomType.Setter
        public Builder timeAssessed(@Nullable String timeAssessed) {
            this.timeAssessed = timeAssessed;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder userSpecs(@Nullable List<GetTargetAssetUserSpec> userSpecs) {
            this.userSpecs = userSpecs;
            return this;
        }
        public Builder userSpecs(GetTargetAssetUserSpec... userSpecs) {
            return userSpecs(List.of(userSpecs));
        }
        public GetTargetAssetResult build() {
            final var o = new GetTargetAssetResult();
            o.blockVolumesPerformance = blockVolumesPerformance;
            o.compartmentId = compartmentId;
            o.compatibilityMessages = compatibilityMessages;
            o.createdResourceId = createdResourceId;
            o.displayName = displayName;
            o.estimatedCosts = estimatedCosts;
            o.id = id;
            o.isExcludedFromExecution = isExcludedFromExecution;
            o.lifecycleDetails = lifecycleDetails;
            o.migrationAssets = migrationAssets;
            o.migrationPlanId = migrationPlanId;
            o.msLicense = msLicense;
            o.preferredShapeType = preferredShapeType;
            o.recommendedSpecs = recommendedSpecs;
            o.state = state;
            o.targetAssetId = targetAssetId;
            o.testSpecs = testSpecs;
            o.timeAssessed = timeAssessed;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.type = type;
            o.userSpecs = userSpecs;
            return o;
        }
    }
}
