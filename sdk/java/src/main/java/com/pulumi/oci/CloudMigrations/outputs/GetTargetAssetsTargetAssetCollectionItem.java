// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetsTargetAssetCollectionItemCompatibilityMessage;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCost;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetsTargetAssetCollectionItemMigrationAsset;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpec;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetsTargetAssetCollectionItemTestSpec;
import com.pulumi.oci.CloudMigrations.outputs.GetTargetAssetsTargetAssetCollectionItemUserSpec;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTargetAssetsTargetAssetCollectionItem {
    /**
     * @return Performance of the block volumes.
     * 
     */
    private Integer blockVolumesPerformance;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Messages about the compatibility issues.
     * 
     */
    private List<GetTargetAssetsTargetAssetCollectionItemCompatibilityMessage> compatibilityMessages;
    /**
     * @return Created resource identifier
     * 
     */
    private String createdResourceId;
    /**
     * @return A filter to return only resources that match the entire given display name.
     * 
     */
    private String displayName;
    /**
     * @return Cost estimation description
     * 
     */
    private List<GetTargetAssetsTargetAssetCollectionItemEstimatedCost> estimatedCosts;
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    private String id;
    /**
     * @return A boolean indicating whether the asset should be migrated.
     * 
     */
    private Boolean isExcludedFromExecution;
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Description of the migration asset.
     * 
     */
    private List<GetTargetAssetsTargetAssetCollectionItemMigrationAsset> migrationAssets;
    /**
     * @return Unique migration plan identifier
     * 
     */
    private String migrationPlanId;
    /**
     * @return Microsoft license for VM configuration.
     * 
     */
    private String msLicense;
    /**
     * @return Preferred VM shape type that you provide.
     * 
     */
    private String preferredShapeType;
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    private List<GetTargetAssetsTargetAssetCollectionItemRecommendedSpec> recommendedSpecs;
    /**
     * @return The current state of the target asset.
     * 
     */
    private String state;
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    private List<GetTargetAssetsTargetAssetCollectionItemTestSpec> testSpecs;
    /**
     * @return The time when the assessment was done. An RFC3339 formatted datetime string.
     * 
     */
    private String timeAssessed;
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    private String type;
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    private List<GetTargetAssetsTargetAssetCollectionItemUserSpec> userSpecs;

    private GetTargetAssetsTargetAssetCollectionItem() {}
    /**
     * @return Performance of the block volumes.
     * 
     */
    public Integer blockVolumesPerformance() {
        return this.blockVolumesPerformance;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Messages about the compatibility issues.
     * 
     */
    public List<GetTargetAssetsTargetAssetCollectionItemCompatibilityMessage> compatibilityMessages() {
        return this.compatibilityMessages;
    }
    /**
     * @return Created resource identifier
     * 
     */
    public String createdResourceId() {
        return this.createdResourceId;
    }
    /**
     * @return A filter to return only resources that match the entire given display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Cost estimation description
     * 
     */
    public List<GetTargetAssetsTargetAssetCollectionItemEstimatedCost> estimatedCosts() {
        return this.estimatedCosts;
    }
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A boolean indicating whether the asset should be migrated.
     * 
     */
    public Boolean isExcludedFromExecution() {
        return this.isExcludedFromExecution;
    }
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Description of the migration asset.
     * 
     */
    public List<GetTargetAssetsTargetAssetCollectionItemMigrationAsset> migrationAssets() {
        return this.migrationAssets;
    }
    /**
     * @return Unique migration plan identifier
     * 
     */
    public String migrationPlanId() {
        return this.migrationPlanId;
    }
    /**
     * @return Microsoft license for VM configuration.
     * 
     */
    public String msLicense() {
        return this.msLicense;
    }
    /**
     * @return Preferred VM shape type that you provide.
     * 
     */
    public String preferredShapeType() {
        return this.preferredShapeType;
    }
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public List<GetTargetAssetsTargetAssetCollectionItemRecommendedSpec> recommendedSpecs() {
        return this.recommendedSpecs;
    }
    /**
     * @return The current state of the target asset.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public List<GetTargetAssetsTargetAssetCollectionItemTestSpec> testSpecs() {
        return this.testSpecs;
    }
    /**
     * @return The time when the assessment was done. An RFC3339 formatted datetime string.
     * 
     */
    public String timeAssessed() {
        return this.timeAssessed;
    }
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public List<GetTargetAssetsTargetAssetCollectionItemUserSpec> userSpecs() {
        return this.userSpecs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetAssetsTargetAssetCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer blockVolumesPerformance;
        private String compartmentId;
        private List<GetTargetAssetsTargetAssetCollectionItemCompatibilityMessage> compatibilityMessages;
        private String createdResourceId;
        private String displayName;
        private List<GetTargetAssetsTargetAssetCollectionItemEstimatedCost> estimatedCosts;
        private String id;
        private Boolean isExcludedFromExecution;
        private String lifecycleDetails;
        private List<GetTargetAssetsTargetAssetCollectionItemMigrationAsset> migrationAssets;
        private String migrationPlanId;
        private String msLicense;
        private String preferredShapeType;
        private List<GetTargetAssetsTargetAssetCollectionItemRecommendedSpec> recommendedSpecs;
        private String state;
        private List<GetTargetAssetsTargetAssetCollectionItemTestSpec> testSpecs;
        private String timeAssessed;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        private List<GetTargetAssetsTargetAssetCollectionItemUserSpec> userSpecs;
        public Builder() {}
        public Builder(GetTargetAssetsTargetAssetCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockVolumesPerformance = defaults.blockVolumesPerformance;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compatibilityMessages = defaults.compatibilityMessages;
    	      this.createdResourceId = defaults.createdResourceId;
    	      this.displayName = defaults.displayName;
    	      this.estimatedCosts = defaults.estimatedCosts;
    	      this.id = defaults.id;
    	      this.isExcludedFromExecution = defaults.isExcludedFromExecution;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationAssets = defaults.migrationAssets;
    	      this.migrationPlanId = defaults.migrationPlanId;
    	      this.msLicense = defaults.msLicense;
    	      this.preferredShapeType = defaults.preferredShapeType;
    	      this.recommendedSpecs = defaults.recommendedSpecs;
    	      this.state = defaults.state;
    	      this.testSpecs = defaults.testSpecs;
    	      this.timeAssessed = defaults.timeAssessed;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.userSpecs = defaults.userSpecs;
        }

        @CustomType.Setter
        public Builder blockVolumesPerformance(Integer blockVolumesPerformance) {
            this.blockVolumesPerformance = Objects.requireNonNull(blockVolumesPerformance);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compatibilityMessages(List<GetTargetAssetsTargetAssetCollectionItemCompatibilityMessage> compatibilityMessages) {
            this.compatibilityMessages = Objects.requireNonNull(compatibilityMessages);
            return this;
        }
        public Builder compatibilityMessages(GetTargetAssetsTargetAssetCollectionItemCompatibilityMessage... compatibilityMessages) {
            return compatibilityMessages(List.of(compatibilityMessages));
        }
        @CustomType.Setter
        public Builder createdResourceId(String createdResourceId) {
            this.createdResourceId = Objects.requireNonNull(createdResourceId);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder estimatedCosts(List<GetTargetAssetsTargetAssetCollectionItemEstimatedCost> estimatedCosts) {
            this.estimatedCosts = Objects.requireNonNull(estimatedCosts);
            return this;
        }
        public Builder estimatedCosts(GetTargetAssetsTargetAssetCollectionItemEstimatedCost... estimatedCosts) {
            return estimatedCosts(List.of(estimatedCosts));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isExcludedFromExecution(Boolean isExcludedFromExecution) {
            this.isExcludedFromExecution = Objects.requireNonNull(isExcludedFromExecution);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder migrationAssets(List<GetTargetAssetsTargetAssetCollectionItemMigrationAsset> migrationAssets) {
            this.migrationAssets = Objects.requireNonNull(migrationAssets);
            return this;
        }
        public Builder migrationAssets(GetTargetAssetsTargetAssetCollectionItemMigrationAsset... migrationAssets) {
            return migrationAssets(List.of(migrationAssets));
        }
        @CustomType.Setter
        public Builder migrationPlanId(String migrationPlanId) {
            this.migrationPlanId = Objects.requireNonNull(migrationPlanId);
            return this;
        }
        @CustomType.Setter
        public Builder msLicense(String msLicense) {
            this.msLicense = Objects.requireNonNull(msLicense);
            return this;
        }
        @CustomType.Setter
        public Builder preferredShapeType(String preferredShapeType) {
            this.preferredShapeType = Objects.requireNonNull(preferredShapeType);
            return this;
        }
        @CustomType.Setter
        public Builder recommendedSpecs(List<GetTargetAssetsTargetAssetCollectionItemRecommendedSpec> recommendedSpecs) {
            this.recommendedSpecs = Objects.requireNonNull(recommendedSpecs);
            return this;
        }
        public Builder recommendedSpecs(GetTargetAssetsTargetAssetCollectionItemRecommendedSpec... recommendedSpecs) {
            return recommendedSpecs(List.of(recommendedSpecs));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder testSpecs(List<GetTargetAssetsTargetAssetCollectionItemTestSpec> testSpecs) {
            this.testSpecs = Objects.requireNonNull(testSpecs);
            return this;
        }
        public Builder testSpecs(GetTargetAssetsTargetAssetCollectionItemTestSpec... testSpecs) {
            return testSpecs(List.of(testSpecs));
        }
        @CustomType.Setter
        public Builder timeAssessed(String timeAssessed) {
            this.timeAssessed = Objects.requireNonNull(timeAssessed);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userSpecs(List<GetTargetAssetsTargetAssetCollectionItemUserSpec> userSpecs) {
            this.userSpecs = Objects.requireNonNull(userSpecs);
            return this;
        }
        public Builder userSpecs(GetTargetAssetsTargetAssetCollectionItemUserSpec... userSpecs) {
            return userSpecs(List.of(userSpecs));
        }
        public GetTargetAssetsTargetAssetCollectionItem build() {
            final var _resultValue = new GetTargetAssetsTargetAssetCollectionItem();
            _resultValue.blockVolumesPerformance = blockVolumesPerformance;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compatibilityMessages = compatibilityMessages;
            _resultValue.createdResourceId = createdResourceId;
            _resultValue.displayName = displayName;
            _resultValue.estimatedCosts = estimatedCosts;
            _resultValue.id = id;
            _resultValue.isExcludedFromExecution = isExcludedFromExecution;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.migrationAssets = migrationAssets;
            _resultValue.migrationPlanId = migrationPlanId;
            _resultValue.msLicense = msLicense;
            _resultValue.preferredShapeType = preferredShapeType;
            _resultValue.recommendedSpecs = recommendedSpecs;
            _resultValue.state = state;
            _resultValue.testSpecs = testSpecs;
            _resultValue.timeAssessed = timeAssessed;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            _resultValue.userSpecs = userSpecs;
            return _resultValue;
        }
    }
}
