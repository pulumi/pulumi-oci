// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetTargetAssetsTargetAssetCollectionItemMigrationAsset {
    /**
     * @return The availability domain of the instance.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private String availabilityDomain;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return List of migration assets that depend on the asset.
     * 
     */
    private List<String> dependedOnBies;
    /**
     * @return List of migration assets that depends on the asset.
     * 
     */
    private List<String> dependsOns;
    /**
     * @return A filter to return only resources that match the entire given display name.
     * 
     */
    private String displayName;
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    private String id;
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return OCID of the associated migration.
     * 
     */
    private String migrationId;
    /**
     * @return List of notifications
     * 
     */
    private List<String> notifications;
    /**
     * @return The parent snapshot of the migration asset to be used by the replication task.
     * 
     */
    private String parentSnapshot;
    /**
     * @return Replication compartment identifier
     * 
     */
    private String replicationCompartmentId;
    /**
     * @return Replication schedule identifier
     * 
     */
    private String replicationScheduleId;
    /**
     * @return Name of snapshot bucket
     * 
     */
    private String snapShotBucketName;
    /**
     * @return Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> snapshots;
    /**
     * @return Key-value pair representing asset metadata keys and values scoped to a namespace. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> sourceAssetData;
    /**
     * @return OCID that is referenced to an asset for an inventory.
     * 
     */
    private String sourceAssetId;
    /**
     * @return The current state of the target asset.
     * 
     */
    private String state;
    /**
     * @return Tenancy identifier
     * 
     */
    private String tenancyId;
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    private String type;

    private GetTargetAssetsTargetAssetCollectionItemMigrationAsset() {}
    /**
     * @return The availability domain of the instance.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return List of migration assets that depend on the asset.
     * 
     */
    public List<String> dependedOnBies() {
        return this.dependedOnBies;
    }
    /**
     * @return List of migration assets that depends on the asset.
     * 
     */
    public List<String> dependsOns() {
        return this.dependsOns;
    }
    /**
     * @return A filter to return only resources that match the entire given display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return OCID of the associated migration.
     * 
     */
    public String migrationId() {
        return this.migrationId;
    }
    /**
     * @return List of notifications
     * 
     */
    public List<String> notifications() {
        return this.notifications;
    }
    /**
     * @return The parent snapshot of the migration asset to be used by the replication task.
     * 
     */
    public String parentSnapshot() {
        return this.parentSnapshot;
    }
    /**
     * @return Replication compartment identifier
     * 
     */
    public String replicationCompartmentId() {
        return this.replicationCompartmentId;
    }
    /**
     * @return Replication schedule identifier
     * 
     */
    public String replicationScheduleId() {
        return this.replicationScheduleId;
    }
    /**
     * @return Name of snapshot bucket
     * 
     */
    public String snapShotBucketName() {
        return this.snapShotBucketName;
    }
    /**
     * @return Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> snapshots() {
        return this.snapshots;
    }
    /**
     * @return Key-value pair representing asset metadata keys and values scoped to a namespace. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> sourceAssetData() {
        return this.sourceAssetData;
    }
    /**
     * @return OCID that is referenced to an asset for an inventory.
     * 
     */
    public String sourceAssetId() {
        return this.sourceAssetId;
    }
    /**
     * @return The current state of the target asset.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Tenancy identifier
     * 
     */
    public String tenancyId() {
        return this.tenancyId;
    }
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetAssetsTargetAssetCollectionItemMigrationAsset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private String compartmentId;
        private List<String> dependedOnBies;
        private List<String> dependsOns;
        private String displayName;
        private String id;
        private String lifecycleDetails;
        private String migrationId;
        private List<String> notifications;
        private String parentSnapshot;
        private String replicationCompartmentId;
        private String replicationScheduleId;
        private String snapShotBucketName;
        private Map<String,Object> snapshots;
        private Map<String,Object> sourceAssetData;
        private String sourceAssetId;
        private String state;
        private String tenancyId;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        public Builder() {}
        public Builder(GetTargetAssetsTargetAssetCollectionItemMigrationAsset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dependedOnBies = defaults.dependedOnBies;
    	      this.dependsOns = defaults.dependsOns;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationId = defaults.migrationId;
    	      this.notifications = defaults.notifications;
    	      this.parentSnapshot = defaults.parentSnapshot;
    	      this.replicationCompartmentId = defaults.replicationCompartmentId;
    	      this.replicationScheduleId = defaults.replicationScheduleId;
    	      this.snapShotBucketName = defaults.snapShotBucketName;
    	      this.snapshots = defaults.snapshots;
    	      this.sourceAssetData = defaults.sourceAssetData;
    	      this.sourceAssetId = defaults.sourceAssetId;
    	      this.state = defaults.state;
    	      this.tenancyId = defaults.tenancyId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder dependedOnBies(List<String> dependedOnBies) {
            this.dependedOnBies = Objects.requireNonNull(dependedOnBies);
            return this;
        }
        public Builder dependedOnBies(String... dependedOnBies) {
            return dependedOnBies(List.of(dependedOnBies));
        }
        @CustomType.Setter
        public Builder dependsOns(List<String> dependsOns) {
            this.dependsOns = Objects.requireNonNull(dependsOns);
            return this;
        }
        public Builder dependsOns(String... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder migrationId(String migrationId) {
            this.migrationId = Objects.requireNonNull(migrationId);
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<String> notifications) {
            this.notifications = Objects.requireNonNull(notifications);
            return this;
        }
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder parentSnapshot(String parentSnapshot) {
            this.parentSnapshot = Objects.requireNonNull(parentSnapshot);
            return this;
        }
        @CustomType.Setter
        public Builder replicationCompartmentId(String replicationCompartmentId) {
            this.replicationCompartmentId = Objects.requireNonNull(replicationCompartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder replicationScheduleId(String replicationScheduleId) {
            this.replicationScheduleId = Objects.requireNonNull(replicationScheduleId);
            return this;
        }
        @CustomType.Setter
        public Builder snapShotBucketName(String snapShotBucketName) {
            this.snapShotBucketName = Objects.requireNonNull(snapShotBucketName);
            return this;
        }
        @CustomType.Setter
        public Builder snapshots(Map<String,Object> snapshots) {
            this.snapshots = Objects.requireNonNull(snapshots);
            return this;
        }
        @CustomType.Setter
        public Builder sourceAssetData(Map<String,Object> sourceAssetData) {
            this.sourceAssetData = Objects.requireNonNull(sourceAssetData);
            return this;
        }
        @CustomType.Setter
        public Builder sourceAssetId(String sourceAssetId) {
            this.sourceAssetId = Objects.requireNonNull(sourceAssetId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(String tenancyId) {
            this.tenancyId = Objects.requireNonNull(tenancyId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetTargetAssetsTargetAssetCollectionItemMigrationAsset build() {
            final var o = new GetTargetAssetsTargetAssetCollectionItemMigrationAsset();
            o.availabilityDomain = availabilityDomain;
            o.compartmentId = compartmentId;
            o.dependedOnBies = dependedOnBies;
            o.dependsOns = dependsOns;
            o.displayName = displayName;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.migrationId = migrationId;
            o.notifications = notifications;
            o.parentSnapshot = parentSnapshot;
            o.replicationCompartmentId = replicationCompartmentId;
            o.replicationScheduleId = replicationScheduleId;
            o.snapShotBucketName = snapShotBucketName;
            o.snapshots = snapshots;
            o.sourceAssetData = sourceAssetData;
            o.sourceAssetId = sourceAssetId;
            o.state = state;
            o.tenancyId = tenancyId;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.type = type;
            return o;
        }
    }
}
