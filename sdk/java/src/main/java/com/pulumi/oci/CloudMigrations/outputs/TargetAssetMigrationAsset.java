// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.CloudMigrations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TargetAssetMigrationAsset {
    /**
     * @return (Updatable) The availability domain of the instance.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return (Updatable) The OCID of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return List of migration assets that depend on the asset.
     * 
     */
    private @Nullable List<String> dependedOnBies;
    /**
     * @return List of migration assets that depends on the asset.
     * 
     */
    private @Nullable List<String> dependsOns;
    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    private @Nullable String id;
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return OCID of the associated migration.
     * 
     */
    private @Nullable String migrationId;
    /**
     * @return List of notifications
     * 
     */
    private @Nullable List<String> notifications;
    /**
     * @return The parent snapshot of the migration asset to be used by the replication task.
     * 
     */
    private @Nullable String parentSnapshot;
    /**
     * @return Replication compartment identifier
     * 
     */
    private @Nullable String replicationCompartmentId;
    /**
     * @return Replication schedule identifier
     * 
     */
    private @Nullable String replicationScheduleId;
    /**
     * @return Name of snapshot bucket
     * 
     */
    private @Nullable String snapShotBucketName;
    /**
     * @return Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> snapshots;
    /**
     * @return Key-value pair representing asset metadata keys and values scoped to a namespace. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> sourceAssetData;
    /**
     * @return OCID that is referenced to an asset for an inventory.
     * 
     */
    private @Nullable String sourceAssetId;
    /**
     * @return The current state of the target asset.
     * 
     */
    private @Nullable String state;
    /**
     * @return Tenancy identifier
     * 
     */
    private @Nullable String tenancyId;
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return (Updatable) The type of action to run when the instance is interrupted for eviction.
     * 
     */
    private @Nullable String type;

    private TargetAssetMigrationAsset() {}
    /**
     * @return (Updatable) The availability domain of the instance.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return (Updatable) The OCID of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return List of migration assets that depend on the asset.
     * 
     */
    public List<String> dependedOnBies() {
        return this.dependedOnBies == null ? List.of() : this.dependedOnBies;
    }
    /**
     * @return List of migration assets that depends on the asset.
     * 
     */
    public List<String> dependsOns() {
        return this.dependsOns == null ? List.of() : this.dependsOns;
    }
    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return OCID of the associated migration.
     * 
     */
    public Optional<String> migrationId() {
        return Optional.ofNullable(this.migrationId);
    }
    /**
     * @return List of notifications
     * 
     */
    public List<String> notifications() {
        return this.notifications == null ? List.of() : this.notifications;
    }
    /**
     * @return The parent snapshot of the migration asset to be used by the replication task.
     * 
     */
    public Optional<String> parentSnapshot() {
        return Optional.ofNullable(this.parentSnapshot);
    }
    /**
     * @return Replication compartment identifier
     * 
     */
    public Optional<String> replicationCompartmentId() {
        return Optional.ofNullable(this.replicationCompartmentId);
    }
    /**
     * @return Replication schedule identifier
     * 
     */
    public Optional<String> replicationScheduleId() {
        return Optional.ofNullable(this.replicationScheduleId);
    }
    /**
     * @return Name of snapshot bucket
     * 
     */
    public Optional<String> snapShotBucketName() {
        return Optional.ofNullable(this.snapShotBucketName);
    }
    /**
     * @return Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> snapshots() {
        return this.snapshots == null ? Map.of() : this.snapshots;
    }
    /**
     * @return Key-value pair representing asset metadata keys and values scoped to a namespace. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> sourceAssetData() {
        return this.sourceAssetData == null ? Map.of() : this.sourceAssetData;
    }
    /**
     * @return OCID that is referenced to an asset for an inventory.
     * 
     */
    public Optional<String> sourceAssetId() {
        return Optional.ofNullable(this.sourceAssetId);
    }
    /**
     * @return The current state of the target asset.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Tenancy identifier
     * 
     */
    public Optional<String> tenancyId() {
        return Optional.ofNullable(this.tenancyId);
    }
    /**
     * @return The time when the target asset was created. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time when the target asset was updated. An RFC3339 formatted datetime string.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return (Updatable) The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetAssetMigrationAsset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityDomain;
        private @Nullable String compartmentId;
        private @Nullable List<String> dependedOnBies;
        private @Nullable List<String> dependsOns;
        private @Nullable String displayName;
        private @Nullable String id;
        private @Nullable String lifecycleDetails;
        private @Nullable String migrationId;
        private @Nullable List<String> notifications;
        private @Nullable String parentSnapshot;
        private @Nullable String replicationCompartmentId;
        private @Nullable String replicationScheduleId;
        private @Nullable String snapShotBucketName;
        private @Nullable Map<String,Object> snapshots;
        private @Nullable Map<String,Object> sourceAssetData;
        private @Nullable String sourceAssetId;
        private @Nullable String state;
        private @Nullable String tenancyId;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable String type;
        public Builder() {}
        public Builder(TargetAssetMigrationAsset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dependedOnBies = defaults.dependedOnBies;
    	      this.dependsOns = defaults.dependsOns;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationId = defaults.migrationId;
    	      this.notifications = defaults.notifications;
    	      this.parentSnapshot = defaults.parentSnapshot;
    	      this.replicationCompartmentId = defaults.replicationCompartmentId;
    	      this.replicationScheduleId = defaults.replicationScheduleId;
    	      this.snapShotBucketName = defaults.snapShotBucketName;
    	      this.snapshots = defaults.snapshots;
    	      this.sourceAssetData = defaults.sourceAssetData;
    	      this.sourceAssetId = defaults.sourceAssetId;
    	      this.state = defaults.state;
    	      this.tenancyId = defaults.tenancyId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dependedOnBies(@Nullable List<String> dependedOnBies) {
            this.dependedOnBies = dependedOnBies;
            return this;
        }
        public Builder dependedOnBies(String... dependedOnBies) {
            return dependedOnBies(List.of(dependedOnBies));
        }
        @CustomType.Setter
        public Builder dependsOns(@Nullable List<String> dependsOns) {
            this.dependsOns = dependsOns;
            return this;
        }
        public Builder dependsOns(String... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder migrationId(@Nullable String migrationId) {
            this.migrationId = migrationId;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(@Nullable List<String> notifications) {
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder parentSnapshot(@Nullable String parentSnapshot) {
            this.parentSnapshot = parentSnapshot;
            return this;
        }
        @CustomType.Setter
        public Builder replicationCompartmentId(@Nullable String replicationCompartmentId) {
            this.replicationCompartmentId = replicationCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder replicationScheduleId(@Nullable String replicationScheduleId) {
            this.replicationScheduleId = replicationScheduleId;
            return this;
        }
        @CustomType.Setter
        public Builder snapShotBucketName(@Nullable String snapShotBucketName) {
            this.snapShotBucketName = snapShotBucketName;
            return this;
        }
        @CustomType.Setter
        public Builder snapshots(@Nullable Map<String,Object> snapshots) {
            this.snapshots = snapshots;
            return this;
        }
        @CustomType.Setter
        public Builder sourceAssetData(@Nullable Map<String,Object> sourceAssetData) {
            this.sourceAssetData = sourceAssetData;
            return this;
        }
        @CustomType.Setter
        public Builder sourceAssetId(@Nullable String sourceAssetId) {
            this.sourceAssetId = sourceAssetId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(@Nullable String tenancyId) {
            this.tenancyId = tenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public TargetAssetMigrationAsset build() {
            final var _resultValue = new TargetAssetMigrationAsset();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.compartmentId = compartmentId;
            _resultValue.dependedOnBies = dependedOnBies;
            _resultValue.dependsOns = dependsOns;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.migrationId = migrationId;
            _resultValue.notifications = notifications;
            _resultValue.parentSnapshot = parentSnapshot;
            _resultValue.replicationCompartmentId = replicationCompartmentId;
            _resultValue.replicationScheduleId = replicationScheduleId;
            _resultValue.snapShotBucketName = snapShotBucketName;
            _resultValue.snapshots = snapshots;
            _resultValue.sourceAssetData = sourceAssetData;
            _resultValue.sourceAssetId = sourceAssetId;
            _resultValue.state = state;
            _resultValue.tenancyId = tenancyId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
