// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ComputeCloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ComputeCloud.outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic;
import com.pulumi.oci.ComputeCloud.outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic;
import com.pulumi.oci.ComputeCloud.outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AtCustomerCccInfrastructureInfrastructureNetworkConfiguration {
    /**
     * @return The domain name system (DNS) addresses that the Compute Cloud@Customer infrastructure uses for the data center network.
     * 
     */
    private @Nullable List<String> dnsIps;
    /**
     * @return Dynamic routing information for the Compute Cloud@Customer infrastructure.
     * 
     */
    private @Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics;
    /**
     * @return Static routing information for a rack.
     * 
     */
    private @Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics;
    /**
     * @return Information about the management nodes that are provisioned in the Compute Cloud@Customer infrastructure.
     * 
     */
    private @Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes;
    /**
     * @return The hostname corresponding to the virtual IP (VIP) address of the management nodes.
     * 
     */
    private @Nullable String mgmtVipHostname;
    /**
     * @return The IP address used as the virtual IP (VIP) address of the management nodes.
     * 
     */
    private @Nullable String mgmtVipIp;
    /**
     * @return Addresses of the network spine switches.
     * 
     */
    private @Nullable List<String> spineIps;
    /**
     * @return The spine switch public virtual IP (VIP). Traffic routed to the Compute Cloud@Customer infrastructure and  and virtual cloud networks (VCNs) should have this address as next hop.
     * 
     */
    private @Nullable String spineVip;
    /**
     * @return Domain name to be used as the base domain for the internal network and by  public facing services.
     * 
     */
    private @Nullable String uplinkDomain;
    /**
     * @return Uplink gateway in the datacenter network that the Compute Cloud@Customer connects to.
     * 
     */
    private @Nullable String uplinkGatewayIp;
    /**
     * @return Netmask of the subnet that the Compute Cloud@Customer infrastructure is connected to.
     * 
     */
    private @Nullable String uplinkNetmask;
    /**
     * @return Number of uplink ports per spine switch. Connectivity is identical on both spine switches. For example, if input is two 100 gigabyte ports; then port-1 and port-2 on both spines will be configured.
     * 
     */
    private @Nullable Integer uplinkPortCount;
    /**
     * @return The port forward error correction (FEC) setting for the uplink port on the Compute Cloud@Customer infrastructure.
     * 
     */
    private @Nullable String uplinkPortForwardErrorCorrection;
    /**
     * @return Uplink port speed defined in gigabytes per second. All uplink ports must have identical speed.
     * 
     */
    private @Nullable Integer uplinkPortSpeedInGbps;
    /**
     * @return The virtual local area network (VLAN) maximum transmission unit (MTU) size for the uplink ports.
     * 
     */
    private @Nullable Integer uplinkVlanMtu;

    private AtCustomerCccInfrastructureInfrastructureNetworkConfiguration() {}
    /**
     * @return The domain name system (DNS) addresses that the Compute Cloud@Customer infrastructure uses for the data center network.
     * 
     */
    public List<String> dnsIps() {
        return this.dnsIps == null ? List.of() : this.dnsIps;
    }
    /**
     * @return Dynamic routing information for the Compute Cloud@Customer infrastructure.
     * 
     */
    public List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics() {
        return this.infrastructureRoutingDynamics == null ? List.of() : this.infrastructureRoutingDynamics;
    }
    /**
     * @return Static routing information for a rack.
     * 
     */
    public List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics() {
        return this.infrastructureRoutingStatics == null ? List.of() : this.infrastructureRoutingStatics;
    }
    /**
     * @return Information about the management nodes that are provisioned in the Compute Cloud@Customer infrastructure.
     * 
     */
    public List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes() {
        return this.managementNodes == null ? List.of() : this.managementNodes;
    }
    /**
     * @return The hostname corresponding to the virtual IP (VIP) address of the management nodes.
     * 
     */
    public Optional<String> mgmtVipHostname() {
        return Optional.ofNullable(this.mgmtVipHostname);
    }
    /**
     * @return The IP address used as the virtual IP (VIP) address of the management nodes.
     * 
     */
    public Optional<String> mgmtVipIp() {
        return Optional.ofNullable(this.mgmtVipIp);
    }
    /**
     * @return Addresses of the network spine switches.
     * 
     */
    public List<String> spineIps() {
        return this.spineIps == null ? List.of() : this.spineIps;
    }
    /**
     * @return The spine switch public virtual IP (VIP). Traffic routed to the Compute Cloud@Customer infrastructure and  and virtual cloud networks (VCNs) should have this address as next hop.
     * 
     */
    public Optional<String> spineVip() {
        return Optional.ofNullable(this.spineVip);
    }
    /**
     * @return Domain name to be used as the base domain for the internal network and by  public facing services.
     * 
     */
    public Optional<String> uplinkDomain() {
        return Optional.ofNullable(this.uplinkDomain);
    }
    /**
     * @return Uplink gateway in the datacenter network that the Compute Cloud@Customer connects to.
     * 
     */
    public Optional<String> uplinkGatewayIp() {
        return Optional.ofNullable(this.uplinkGatewayIp);
    }
    /**
     * @return Netmask of the subnet that the Compute Cloud@Customer infrastructure is connected to.
     * 
     */
    public Optional<String> uplinkNetmask() {
        return Optional.ofNullable(this.uplinkNetmask);
    }
    /**
     * @return Number of uplink ports per spine switch. Connectivity is identical on both spine switches. For example, if input is two 100 gigabyte ports; then port-1 and port-2 on both spines will be configured.
     * 
     */
    public Optional<Integer> uplinkPortCount() {
        return Optional.ofNullable(this.uplinkPortCount);
    }
    /**
     * @return The port forward error correction (FEC) setting for the uplink port on the Compute Cloud@Customer infrastructure.
     * 
     */
    public Optional<String> uplinkPortForwardErrorCorrection() {
        return Optional.ofNullable(this.uplinkPortForwardErrorCorrection);
    }
    /**
     * @return Uplink port speed defined in gigabytes per second. All uplink ports must have identical speed.
     * 
     */
    public Optional<Integer> uplinkPortSpeedInGbps() {
        return Optional.ofNullable(this.uplinkPortSpeedInGbps);
    }
    /**
     * @return The virtual local area network (VLAN) maximum transmission unit (MTU) size for the uplink ports.
     * 
     */
    public Optional<Integer> uplinkVlanMtu() {
        return Optional.ofNullable(this.uplinkVlanMtu);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AtCustomerCccInfrastructureInfrastructureNetworkConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> dnsIps;
        private @Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics;
        private @Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics;
        private @Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes;
        private @Nullable String mgmtVipHostname;
        private @Nullable String mgmtVipIp;
        private @Nullable List<String> spineIps;
        private @Nullable String spineVip;
        private @Nullable String uplinkDomain;
        private @Nullable String uplinkGatewayIp;
        private @Nullable String uplinkNetmask;
        private @Nullable Integer uplinkPortCount;
        private @Nullable String uplinkPortForwardErrorCorrection;
        private @Nullable Integer uplinkPortSpeedInGbps;
        private @Nullable Integer uplinkVlanMtu;
        public Builder() {}
        public Builder(AtCustomerCccInfrastructureInfrastructureNetworkConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsIps = defaults.dnsIps;
    	      this.infrastructureRoutingDynamics = defaults.infrastructureRoutingDynamics;
    	      this.infrastructureRoutingStatics = defaults.infrastructureRoutingStatics;
    	      this.managementNodes = defaults.managementNodes;
    	      this.mgmtVipHostname = defaults.mgmtVipHostname;
    	      this.mgmtVipIp = defaults.mgmtVipIp;
    	      this.spineIps = defaults.spineIps;
    	      this.spineVip = defaults.spineVip;
    	      this.uplinkDomain = defaults.uplinkDomain;
    	      this.uplinkGatewayIp = defaults.uplinkGatewayIp;
    	      this.uplinkNetmask = defaults.uplinkNetmask;
    	      this.uplinkPortCount = defaults.uplinkPortCount;
    	      this.uplinkPortForwardErrorCorrection = defaults.uplinkPortForwardErrorCorrection;
    	      this.uplinkPortSpeedInGbps = defaults.uplinkPortSpeedInGbps;
    	      this.uplinkVlanMtu = defaults.uplinkVlanMtu;
        }

        @CustomType.Setter
        public Builder dnsIps(@Nullable List<String> dnsIps) {
            this.dnsIps = dnsIps;
            return this;
        }
        public Builder dnsIps(String... dnsIps) {
            return dnsIps(List.of(dnsIps));
        }
        @CustomType.Setter
        public Builder infrastructureRoutingDynamics(@Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics) {
            this.infrastructureRoutingDynamics = infrastructureRoutingDynamics;
            return this;
        }
        public Builder infrastructureRoutingDynamics(AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic... infrastructureRoutingDynamics) {
            return infrastructureRoutingDynamics(List.of(infrastructureRoutingDynamics));
        }
        @CustomType.Setter
        public Builder infrastructureRoutingStatics(@Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics) {
            this.infrastructureRoutingStatics = infrastructureRoutingStatics;
            return this;
        }
        public Builder infrastructureRoutingStatics(AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic... infrastructureRoutingStatics) {
            return infrastructureRoutingStatics(List.of(infrastructureRoutingStatics));
        }
        @CustomType.Setter
        public Builder managementNodes(@Nullable List<AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes) {
            this.managementNodes = managementNodes;
            return this;
        }
        public Builder managementNodes(AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode... managementNodes) {
            return managementNodes(List.of(managementNodes));
        }
        @CustomType.Setter
        public Builder mgmtVipHostname(@Nullable String mgmtVipHostname) {
            this.mgmtVipHostname = mgmtVipHostname;
            return this;
        }
        @CustomType.Setter
        public Builder mgmtVipIp(@Nullable String mgmtVipIp) {
            this.mgmtVipIp = mgmtVipIp;
            return this;
        }
        @CustomType.Setter
        public Builder spineIps(@Nullable List<String> spineIps) {
            this.spineIps = spineIps;
            return this;
        }
        public Builder spineIps(String... spineIps) {
            return spineIps(List.of(spineIps));
        }
        @CustomType.Setter
        public Builder spineVip(@Nullable String spineVip) {
            this.spineVip = spineVip;
            return this;
        }
        @CustomType.Setter
        public Builder uplinkDomain(@Nullable String uplinkDomain) {
            this.uplinkDomain = uplinkDomain;
            return this;
        }
        @CustomType.Setter
        public Builder uplinkGatewayIp(@Nullable String uplinkGatewayIp) {
            this.uplinkGatewayIp = uplinkGatewayIp;
            return this;
        }
        @CustomType.Setter
        public Builder uplinkNetmask(@Nullable String uplinkNetmask) {
            this.uplinkNetmask = uplinkNetmask;
            return this;
        }
        @CustomType.Setter
        public Builder uplinkPortCount(@Nullable Integer uplinkPortCount) {
            this.uplinkPortCount = uplinkPortCount;
            return this;
        }
        @CustomType.Setter
        public Builder uplinkPortForwardErrorCorrection(@Nullable String uplinkPortForwardErrorCorrection) {
            this.uplinkPortForwardErrorCorrection = uplinkPortForwardErrorCorrection;
            return this;
        }
        @CustomType.Setter
        public Builder uplinkPortSpeedInGbps(@Nullable Integer uplinkPortSpeedInGbps) {
            this.uplinkPortSpeedInGbps = uplinkPortSpeedInGbps;
            return this;
        }
        @CustomType.Setter
        public Builder uplinkVlanMtu(@Nullable Integer uplinkVlanMtu) {
            this.uplinkVlanMtu = uplinkVlanMtu;
            return this;
        }
        public AtCustomerCccInfrastructureInfrastructureNetworkConfiguration build() {
            final var _resultValue = new AtCustomerCccInfrastructureInfrastructureNetworkConfiguration();
            _resultValue.dnsIps = dnsIps;
            _resultValue.infrastructureRoutingDynamics = infrastructureRoutingDynamics;
            _resultValue.infrastructureRoutingStatics = infrastructureRoutingStatics;
            _resultValue.managementNodes = managementNodes;
            _resultValue.mgmtVipHostname = mgmtVipHostname;
            _resultValue.mgmtVipIp = mgmtVipIp;
            _resultValue.spineIps = spineIps;
            _resultValue.spineVip = spineVip;
            _resultValue.uplinkDomain = uplinkDomain;
            _resultValue.uplinkGatewayIp = uplinkGatewayIp;
            _resultValue.uplinkNetmask = uplinkNetmask;
            _resultValue.uplinkPortCount = uplinkPortCount;
            _resultValue.uplinkPortForwardErrorCorrection = uplinkPortForwardErrorCorrection;
            _resultValue.uplinkPortSpeedInGbps = uplinkPortSpeedInGbps;
            _resultValue.uplinkVlanMtu = uplinkVlanMtu;
            return _resultValue;
        }
    }
}
