// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ComputeCloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ComputeCloud.outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic;
import com.pulumi.oci.ComputeCloud.outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic;
import com.pulumi.oci.ComputeCloud.outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAtCustomerCccInfrastructureInfrastructureNetworkConfiguration {
    /**
     * @return The domain name system (DNS) addresses that the Compute Cloud@Customer infrastructure uses for the data center network.
     * 
     */
    private List<String> dnsIps;
    /**
     * @return Dynamic routing information for the Compute Cloud@Customer infrastructure.
     * 
     */
    private List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics;
    /**
     * @return Static routing information for a rack.
     * 
     */
    private List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics;
    /**
     * @return Information about the management nodes that are provisioned in the Compute Cloud@Customer infrastructure.
     * 
     */
    private List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes;
    /**
     * @return The hostname corresponding to the virtual IP (VIP) address of the management nodes.
     * 
     */
    private String mgmtVipHostname;
    /**
     * @return The IP address used as the virtual IP (VIP) address of the management nodes.
     * 
     */
    private String mgmtVipIp;
    /**
     * @return Addresses of the network spine switches.
     * 
     */
    private List<String> spineIps;
    /**
     * @return The spine switch public virtual IP (VIP). Traffic routed to the Compute Cloud@Customer infrastructure and  and virtual cloud networks (VCNs) should have this address as next hop.
     * 
     */
    private String spineVip;
    /**
     * @return Domain name to be used as the base domain for the internal network and by  public facing services.
     * 
     */
    private String uplinkDomain;
    /**
     * @return Uplink gateway in the datacenter network that the Compute Cloud@Customer connects to.
     * 
     */
    private String uplinkGatewayIp;
    /**
     * @return Netmask of the subnet that the Compute Cloud@Customer infrastructure is connected to.
     * 
     */
    private String uplinkNetmask;
    /**
     * @return Number of uplink ports per spine switch. Connectivity is identical on both spine switches. For example, if input is two 100 gigabyte ports; then port-1 and port-2 on both spines will be configured.
     * 
     */
    private Integer uplinkPortCount;
    /**
     * @return The port forward error correction (FEC) setting for the uplink port on the Compute Cloud@Customer infrastructure.
     * 
     */
    private String uplinkPortForwardErrorCorrection;
    /**
     * @return Uplink port speed defined in gigabytes per second. All uplink ports must have identical speed.
     * 
     */
    private Integer uplinkPortSpeedInGbps;
    /**
     * @return The virtual local area network (VLAN) maximum transmission unit (MTU) size for the uplink ports.
     * 
     */
    private Integer uplinkVlanMtu;

    private GetAtCustomerCccInfrastructureInfrastructureNetworkConfiguration() {}
    /**
     * @return The domain name system (DNS) addresses that the Compute Cloud@Customer infrastructure uses for the data center network.
     * 
     */
    public List<String> dnsIps() {
        return this.dnsIps;
    }
    /**
     * @return Dynamic routing information for the Compute Cloud@Customer infrastructure.
     * 
     */
    public List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics() {
        return this.infrastructureRoutingDynamics;
    }
    /**
     * @return Static routing information for a rack.
     * 
     */
    public List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics() {
        return this.infrastructureRoutingStatics;
    }
    /**
     * @return Information about the management nodes that are provisioned in the Compute Cloud@Customer infrastructure.
     * 
     */
    public List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes() {
        return this.managementNodes;
    }
    /**
     * @return The hostname corresponding to the virtual IP (VIP) address of the management nodes.
     * 
     */
    public String mgmtVipHostname() {
        return this.mgmtVipHostname;
    }
    /**
     * @return The IP address used as the virtual IP (VIP) address of the management nodes.
     * 
     */
    public String mgmtVipIp() {
        return this.mgmtVipIp;
    }
    /**
     * @return Addresses of the network spine switches.
     * 
     */
    public List<String> spineIps() {
        return this.spineIps;
    }
    /**
     * @return The spine switch public virtual IP (VIP). Traffic routed to the Compute Cloud@Customer infrastructure and  and virtual cloud networks (VCNs) should have this address as next hop.
     * 
     */
    public String spineVip() {
        return this.spineVip;
    }
    /**
     * @return Domain name to be used as the base domain for the internal network and by  public facing services.
     * 
     */
    public String uplinkDomain() {
        return this.uplinkDomain;
    }
    /**
     * @return Uplink gateway in the datacenter network that the Compute Cloud@Customer connects to.
     * 
     */
    public String uplinkGatewayIp() {
        return this.uplinkGatewayIp;
    }
    /**
     * @return Netmask of the subnet that the Compute Cloud@Customer infrastructure is connected to.
     * 
     */
    public String uplinkNetmask() {
        return this.uplinkNetmask;
    }
    /**
     * @return Number of uplink ports per spine switch. Connectivity is identical on both spine switches. For example, if input is two 100 gigabyte ports; then port-1 and port-2 on both spines will be configured.
     * 
     */
    public Integer uplinkPortCount() {
        return this.uplinkPortCount;
    }
    /**
     * @return The port forward error correction (FEC) setting for the uplink port on the Compute Cloud@Customer infrastructure.
     * 
     */
    public String uplinkPortForwardErrorCorrection() {
        return this.uplinkPortForwardErrorCorrection;
    }
    /**
     * @return Uplink port speed defined in gigabytes per second. All uplink ports must have identical speed.
     * 
     */
    public Integer uplinkPortSpeedInGbps() {
        return this.uplinkPortSpeedInGbps;
    }
    /**
     * @return The virtual local area network (VLAN) maximum transmission unit (MTU) size for the uplink ports.
     * 
     */
    public Integer uplinkVlanMtu() {
        return this.uplinkVlanMtu;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAtCustomerCccInfrastructureInfrastructureNetworkConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> dnsIps;
        private List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics;
        private List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics;
        private List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes;
        private String mgmtVipHostname;
        private String mgmtVipIp;
        private List<String> spineIps;
        private String spineVip;
        private String uplinkDomain;
        private String uplinkGatewayIp;
        private String uplinkNetmask;
        private Integer uplinkPortCount;
        private String uplinkPortForwardErrorCorrection;
        private Integer uplinkPortSpeedInGbps;
        private Integer uplinkVlanMtu;
        public Builder() {}
        public Builder(GetAtCustomerCccInfrastructureInfrastructureNetworkConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsIps = defaults.dnsIps;
    	      this.infrastructureRoutingDynamics = defaults.infrastructureRoutingDynamics;
    	      this.infrastructureRoutingStatics = defaults.infrastructureRoutingStatics;
    	      this.managementNodes = defaults.managementNodes;
    	      this.mgmtVipHostname = defaults.mgmtVipHostname;
    	      this.mgmtVipIp = defaults.mgmtVipIp;
    	      this.spineIps = defaults.spineIps;
    	      this.spineVip = defaults.spineVip;
    	      this.uplinkDomain = defaults.uplinkDomain;
    	      this.uplinkGatewayIp = defaults.uplinkGatewayIp;
    	      this.uplinkNetmask = defaults.uplinkNetmask;
    	      this.uplinkPortCount = defaults.uplinkPortCount;
    	      this.uplinkPortForwardErrorCorrection = defaults.uplinkPortForwardErrorCorrection;
    	      this.uplinkPortSpeedInGbps = defaults.uplinkPortSpeedInGbps;
    	      this.uplinkVlanMtu = defaults.uplinkVlanMtu;
        }

        @CustomType.Setter
        public Builder dnsIps(List<String> dnsIps) {
            this.dnsIps = Objects.requireNonNull(dnsIps);
            return this;
        }
        public Builder dnsIps(String... dnsIps) {
            return dnsIps(List.of(dnsIps));
        }
        @CustomType.Setter
        public Builder infrastructureRoutingDynamics(List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic> infrastructureRoutingDynamics) {
            this.infrastructureRoutingDynamics = Objects.requireNonNull(infrastructureRoutingDynamics);
            return this;
        }
        public Builder infrastructureRoutingDynamics(GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic... infrastructureRoutingDynamics) {
            return infrastructureRoutingDynamics(List.of(infrastructureRoutingDynamics));
        }
        @CustomType.Setter
        public Builder infrastructureRoutingStatics(List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic> infrastructureRoutingStatics) {
            this.infrastructureRoutingStatics = Objects.requireNonNull(infrastructureRoutingStatics);
            return this;
        }
        public Builder infrastructureRoutingStatics(GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic... infrastructureRoutingStatics) {
            return infrastructureRoutingStatics(List.of(infrastructureRoutingStatics));
        }
        @CustomType.Setter
        public Builder managementNodes(List<GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode> managementNodes) {
            this.managementNodes = Objects.requireNonNull(managementNodes);
            return this;
        }
        public Builder managementNodes(GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode... managementNodes) {
            return managementNodes(List.of(managementNodes));
        }
        @CustomType.Setter
        public Builder mgmtVipHostname(String mgmtVipHostname) {
            this.mgmtVipHostname = Objects.requireNonNull(mgmtVipHostname);
            return this;
        }
        @CustomType.Setter
        public Builder mgmtVipIp(String mgmtVipIp) {
            this.mgmtVipIp = Objects.requireNonNull(mgmtVipIp);
            return this;
        }
        @CustomType.Setter
        public Builder spineIps(List<String> spineIps) {
            this.spineIps = Objects.requireNonNull(spineIps);
            return this;
        }
        public Builder spineIps(String... spineIps) {
            return spineIps(List.of(spineIps));
        }
        @CustomType.Setter
        public Builder spineVip(String spineVip) {
            this.spineVip = Objects.requireNonNull(spineVip);
            return this;
        }
        @CustomType.Setter
        public Builder uplinkDomain(String uplinkDomain) {
            this.uplinkDomain = Objects.requireNonNull(uplinkDomain);
            return this;
        }
        @CustomType.Setter
        public Builder uplinkGatewayIp(String uplinkGatewayIp) {
            this.uplinkGatewayIp = Objects.requireNonNull(uplinkGatewayIp);
            return this;
        }
        @CustomType.Setter
        public Builder uplinkNetmask(String uplinkNetmask) {
            this.uplinkNetmask = Objects.requireNonNull(uplinkNetmask);
            return this;
        }
        @CustomType.Setter
        public Builder uplinkPortCount(Integer uplinkPortCount) {
            this.uplinkPortCount = Objects.requireNonNull(uplinkPortCount);
            return this;
        }
        @CustomType.Setter
        public Builder uplinkPortForwardErrorCorrection(String uplinkPortForwardErrorCorrection) {
            this.uplinkPortForwardErrorCorrection = Objects.requireNonNull(uplinkPortForwardErrorCorrection);
            return this;
        }
        @CustomType.Setter
        public Builder uplinkPortSpeedInGbps(Integer uplinkPortSpeedInGbps) {
            this.uplinkPortSpeedInGbps = Objects.requireNonNull(uplinkPortSpeedInGbps);
            return this;
        }
        @CustomType.Setter
        public Builder uplinkVlanMtu(Integer uplinkVlanMtu) {
            this.uplinkVlanMtu = Objects.requireNonNull(uplinkVlanMtu);
            return this;
        }
        public GetAtCustomerCccInfrastructureInfrastructureNetworkConfiguration build() {
            final var o = new GetAtCustomerCccInfrastructureInfrastructureNetworkConfiguration();
            o.dnsIps = dnsIps;
            o.infrastructureRoutingDynamics = infrastructureRoutingDynamics;
            o.infrastructureRoutingStatics = infrastructureRoutingStatics;
            o.managementNodes = managementNodes;
            o.mgmtVipHostname = mgmtVipHostname;
            o.mgmtVipIp = mgmtVipIp;
            o.spineIps = spineIps;
            o.spineVip = spineVip;
            o.uplinkDomain = uplinkDomain;
            o.uplinkGatewayIp = uplinkGatewayIp;
            o.uplinkNetmask = uplinkNetmask;
            o.uplinkPortCount = uplinkPortCount;
            o.uplinkPortForwardErrorCorrection = uplinkPortForwardErrorCorrection;
            o.uplinkPortSpeedInGbps = uplinkPortSpeedInGbps;
            o.uplinkVlanMtu = uplinkVlanMtu;
            return o;
        }
    }
}
