// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ComputeCloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory {
    /**
     * @return The number of storage trays in the Compute Cloud{@literal @}Customer infrastructure rack that are designated for capacity storage.
     * 
     */
    private Integer capacityStorageTrayCount;
    /**
     * @return The number of compute nodes that are available and usable on the Compute Cloud{@literal @}Customer infrastructure rack. There is no distinction of compute node type in this information.
     * 
     */
    private Integer computeNodeCount;
    /**
     * @return The number of management nodes that are available and in active use on the Compute Cloud{@literal @}Customer infrastructure rack.
     * 
     */
    private Integer managementNodeCount;
    /**
     * @return The number of storage trays in the Compute Cloud{@literal @}Customer infrastructure rack that are designated for performance storage.
     * 
     */
    private Integer performanceStorageTrayCount;
    /**
     * @return The serial number of the Compute Cloud{@literal @}Customer infrastructure rack.
     * 
     */
    private String serialNumber;

    private GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory() {}
    /**
     * @return The number of storage trays in the Compute Cloud{@literal @}Customer infrastructure rack that are designated for capacity storage.
     * 
     */
    public Integer capacityStorageTrayCount() {
        return this.capacityStorageTrayCount;
    }
    /**
     * @return The number of compute nodes that are available and usable on the Compute Cloud{@literal @}Customer infrastructure rack. There is no distinction of compute node type in this information.
     * 
     */
    public Integer computeNodeCount() {
        return this.computeNodeCount;
    }
    /**
     * @return The number of management nodes that are available and in active use on the Compute Cloud{@literal @}Customer infrastructure rack.
     * 
     */
    public Integer managementNodeCount() {
        return this.managementNodeCount;
    }
    /**
     * @return The number of storage trays in the Compute Cloud{@literal @}Customer infrastructure rack that are designated for performance storage.
     * 
     */
    public Integer performanceStorageTrayCount() {
        return this.performanceStorageTrayCount;
    }
    /**
     * @return The serial number of the Compute Cloud{@literal @}Customer infrastructure rack.
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer capacityStorageTrayCount;
        private Integer computeNodeCount;
        private Integer managementNodeCount;
        private Integer performanceStorageTrayCount;
        private String serialNumber;
        public Builder() {}
        public Builder(GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityStorageTrayCount = defaults.capacityStorageTrayCount;
    	      this.computeNodeCount = defaults.computeNodeCount;
    	      this.managementNodeCount = defaults.managementNodeCount;
    	      this.performanceStorageTrayCount = defaults.performanceStorageTrayCount;
    	      this.serialNumber = defaults.serialNumber;
        }

        @CustomType.Setter
        public Builder capacityStorageTrayCount(Integer capacityStorageTrayCount) {
            if (capacityStorageTrayCount == null) {
              throw new MissingRequiredPropertyException("GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory", "capacityStorageTrayCount");
            }
            this.capacityStorageTrayCount = capacityStorageTrayCount;
            return this;
        }
        @CustomType.Setter
        public Builder computeNodeCount(Integer computeNodeCount) {
            if (computeNodeCount == null) {
              throw new MissingRequiredPropertyException("GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory", "computeNodeCount");
            }
            this.computeNodeCount = computeNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder managementNodeCount(Integer managementNodeCount) {
            if (managementNodeCount == null) {
              throw new MissingRequiredPropertyException("GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory", "managementNodeCount");
            }
            this.managementNodeCount = managementNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder performanceStorageTrayCount(Integer performanceStorageTrayCount) {
            if (performanceStorageTrayCount == null) {
              throw new MissingRequiredPropertyException("GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory", "performanceStorageTrayCount");
            }
            this.performanceStorageTrayCount = performanceStorageTrayCount;
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(String serialNumber) {
            if (serialNumber == null) {
              throw new MissingRequiredPropertyException("GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory", "serialNumber");
            }
            this.serialNumber = serialNumber;
            return this;
        }
        public GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory build() {
            final var _resultValue = new GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory();
            _resultValue.capacityStorageTrayCount = capacityStorageTrayCount;
            _resultValue.computeNodeCount = computeNodeCount;
            _resultValue.managementNodeCount = managementNodeCount;
            _resultValue.performanceStorageTrayCount = performanceStorageTrayCount;
            _resultValue.serialNumber = serialNumber;
            return _resultValue;
        }
    }
}
