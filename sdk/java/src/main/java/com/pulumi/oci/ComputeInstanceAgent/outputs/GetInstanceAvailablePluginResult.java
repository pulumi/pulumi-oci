// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ComputeInstanceAgent.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ComputeInstanceAgent.outputs.GetInstanceAvailablePluginAvailablePlugin;
import com.pulumi.oci.ComputeInstanceAgent.outputs.GetInstanceAvailablePluginFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceAvailablePluginResult {
    /**
     * @return The list of available_plugins.
     * 
     */
    private List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins;
    private String compartmentId;
    private @Nullable List<GetInstanceAvailablePluginFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The plugin name
     * 
     */
    private @Nullable String name;
    private String osName;
    private String osVersion;

    private GetInstanceAvailablePluginResult() {}
    /**
     * @return The list of available_plugins.
     * 
     */
    public List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins() {
        return this.availablePlugins;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetInstanceAvailablePluginFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The plugin name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String osName() {
        return this.osName;
    }
    public String osVersion() {
        return this.osVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceAvailablePluginResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins;
        private String compartmentId;
        private @Nullable List<GetInstanceAvailablePluginFilter> filters;
        private String id;
        private @Nullable String name;
        private String osName;
        private String osVersion;
        public Builder() {}
        public Builder(GetInstanceAvailablePluginResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availablePlugins = defaults.availablePlugins;
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.osName = defaults.osName;
    	      this.osVersion = defaults.osVersion;
        }

        @CustomType.Setter
        public Builder availablePlugins(List<GetInstanceAvailablePluginAvailablePlugin> availablePlugins) {
            if (availablePlugins == null) {
              throw new MissingRequiredPropertyException("GetInstanceAvailablePluginResult", "availablePlugins");
            }
            this.availablePlugins = availablePlugins;
            return this;
        }
        public Builder availablePlugins(GetInstanceAvailablePluginAvailablePlugin... availablePlugins) {
            return availablePlugins(List.of(availablePlugins));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetInstanceAvailablePluginResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetInstanceAvailablePluginFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetInstanceAvailablePluginFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceAvailablePluginResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osName(String osName) {
            if (osName == null) {
              throw new MissingRequiredPropertyException("GetInstanceAvailablePluginResult", "osName");
            }
            this.osName = osName;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetInstanceAvailablePluginResult", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        public GetInstanceAvailablePluginResult build() {
            final var _resultValue = new GetInstanceAvailablePluginResult();
            _resultValue.availablePlugins = availablePlugins;
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.osName = osName;
            _resultValue.osVersion = osVersion;
            return _resultValue;
        }
    }
}
