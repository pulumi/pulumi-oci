// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.inputs.AddonConfigurationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AddonArgs extends com.pulumi.resources.ResourceArgs {

    public static final AddonArgs Empty = new AddonArgs();

    /**
     * The name of the addon.
     * 
     */
    @Import(name="addonName", required=true)
    private Output<String> addonName;

    /**
     * @return The name of the addon.
     * 
     */
    public Output<String> addonName() {
        return this.addonName;
    }

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * (Updatable) Addon configuration details
     * 
     */
    @Import(name="configurations")
    private @Nullable Output<List<AddonConfigurationArgs>> configurations;

    /**
     * @return (Updatable) Addon configuration details
     * 
     */
    public Optional<Output<List<AddonConfigurationArgs>>> configurations() {
        return Optional.ofNullable(this.configurations);
    }

    /**
     * Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
     * 
     */
    @Import(name="overrideExisting")
    private @Nullable Output<Boolean> overrideExisting;

    /**
     * @return Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
     * 
     */
    public Optional<Output<Boolean>> overrideExisting() {
        return Optional.ofNullable(this.overrideExisting);
    }

    /**
     * Whether to remove addon resource in deletion.
     * 
     */
    @Import(name="removeAddonResourcesOnDelete", required=true)
    private Output<Boolean> removeAddonResourcesOnDelete;

    /**
     * @return Whether to remove addon resource in deletion.
     * 
     */
    public Output<Boolean> removeAddonResourcesOnDelete() {
        return this.removeAddonResourcesOnDelete;
    }

    /**
     * (Updatable) The version of addon to be installed.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return (Updatable) The version of addon to be installed.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private AddonArgs() {}

    private AddonArgs(AddonArgs $) {
        this.addonName = $.addonName;
        this.clusterId = $.clusterId;
        this.configurations = $.configurations;
        this.overrideExisting = $.overrideExisting;
        this.removeAddonResourcesOnDelete = $.removeAddonResourcesOnDelete;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddonArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddonArgs $;

        public Builder() {
            $ = new AddonArgs();
        }

        public Builder(AddonArgs defaults) {
            $ = new AddonArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addonName The name of the addon.
         * 
         * @return builder
         * 
         */
        public Builder addonName(Output<String> addonName) {
            $.addonName = addonName;
            return this;
        }

        /**
         * @param addonName The name of the addon.
         * 
         * @return builder
         * 
         */
        public Builder addonName(String addonName) {
            return addonName(Output.of(addonName));
        }

        /**
         * @param clusterId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param configurations (Updatable) Addon configuration details
         * 
         * @return builder
         * 
         */
        public Builder configurations(@Nullable Output<List<AddonConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations (Updatable) Addon configuration details
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<AddonConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations (Updatable) Addon configuration details
         * 
         * @return builder
         * 
         */
        public Builder configurations(AddonConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param overrideExisting Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
         * 
         * @return builder
         * 
         */
        public Builder overrideExisting(@Nullable Output<Boolean> overrideExisting) {
            $.overrideExisting = overrideExisting;
            return this;
        }

        /**
         * @param overrideExisting Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
         * 
         * @return builder
         * 
         */
        public Builder overrideExisting(Boolean overrideExisting) {
            return overrideExisting(Output.of(overrideExisting));
        }

        /**
         * @param removeAddonResourcesOnDelete Whether to remove addon resource in deletion.
         * 
         * @return builder
         * 
         */
        public Builder removeAddonResourcesOnDelete(Output<Boolean> removeAddonResourcesOnDelete) {
            $.removeAddonResourcesOnDelete = removeAddonResourcesOnDelete;
            return this;
        }

        /**
         * @param removeAddonResourcesOnDelete Whether to remove addon resource in deletion.
         * 
         * @return builder
         * 
         */
        public Builder removeAddonResourcesOnDelete(Boolean removeAddonResourcesOnDelete) {
            return removeAddonResourcesOnDelete(Output.of(removeAddonResourcesOnDelete));
        }

        /**
         * @param version (Updatable) The version of addon to be installed.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version (Updatable) The version of addon to be installed.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public AddonArgs build() {
            if ($.addonName == null) {
                throw new MissingRequiredPropertyException("AddonArgs", "addonName");
            }
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("AddonArgs", "clusterId");
            }
            if ($.removeAddonResourcesOnDelete == null) {
                throw new MissingRequiredPropertyException("AddonArgs", "removeAddonResourcesOnDelete");
            }
            return $;
        }
    }

}
