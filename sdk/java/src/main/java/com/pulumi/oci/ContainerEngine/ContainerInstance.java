// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.ContainerEngine.ContainerInstanceArgs;
import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceState;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainer;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceDnsConfig;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceImagePullSecret;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceShapeConfig;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceVnic;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceVolume;
import com.pulumi.oci.Utilities;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
 * 
 * Creates a container instance and deploys the containers on it.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.ContainerEngine.ContainerInstance;
 * import com.pulumi.oci.ContainerEngine.ContainerInstanceArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceContainerArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceContainerResourceConfigArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceContainerSecurityContextArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceShapeConfigArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceVnicArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceDnsConfigArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceImagePullSecretArgs;
 * import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceVolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testContainerInstance = new ContainerInstance(&#34;testContainerInstance&#34;, ContainerInstanceArgs.builder()        
 *             .availabilityDomain(var_.container_instance_availability_domain())
 *             .compartmentId(var_.compartment_id())
 *             .containers(ContainerInstanceContainerArgs.builder()
 *                 .imageUrl(var_.container_instance_containers_image_url())
 *                 .arguments(var_.container_instance_containers_arguments())
 *                 .commands(var_.container_instance_containers_command())
 *                 .definedTags(var_.container_instance_containers_defined_tags())
 *                 .displayName(var_.container_instance_containers_display_name())
 *                 .environmentVariables(var_.container_instance_containers_environment_variables())
 *                 .freeformTags(var_.container_instance_containers_freeform_tags())
 *                 .healthChecks(ContainerInstanceContainerHealthCheckArgs.builder()
 *                     .healthCheckType(var_.container_instance_containers_health_checks_health_check_type())
 *                     .commands(var_.container_instance_containers_health_checks_command())
 *                     .failureAction(var_.container_instance_containers_health_checks_failure_action())
 *                     .failureThreshold(var_.container_instance_containers_health_checks_failure_threshold())
 *                     .headers(ContainerInstanceContainerHealthCheckHeaderArgs.builder()
 *                         .name(var_.container_instance_containers_health_checks_headers_name())
 *                         .value(var_.container_instance_containers_health_checks_headers_value())
 *                         .build())
 *                     .initialDelayInSeconds(var_.container_instance_containers_health_checks_initial_delay_in_seconds())
 *                     .intervalInSeconds(var_.container_instance_containers_health_checks_interval_in_seconds())
 *                     .name(var_.container_instance_containers_health_checks_name())
 *                     .path(var_.container_instance_containers_health_checks_path())
 *                     .port(var_.container_instance_containers_health_checks_port())
 *                     .successThreshold(var_.container_instance_containers_health_checks_success_threshold())
 *                     .timeoutInSeconds(var_.container_instance_containers_health_checks_timeout_in_seconds())
 *                     .build())
 *                 .isResourcePrincipalDisabled(var_.container_instance_containers_is_resource_principal_disabled())
 *                 .resourceConfig(ContainerInstanceContainerResourceConfigArgs.builder()
 *                     .memoryLimitInGbs(var_.container_instance_containers_resource_config_memory_limit_in_gbs())
 *                     .vcpusLimit(var_.container_instance_containers_resource_config_vcpus_limit())
 *                     .build())
 *                 .securityContext(ContainerInstanceContainerSecurityContextArgs.builder()
 *                     .isNonRootUserCheckEnabled(var_.container_instance_containers_security_context_is_non_root_user_check_enabled())
 *                     .isRootFileSystemReadonly(var_.container_instance_containers_security_context_is_root_file_system_readonly())
 *                     .runAsGroup(var_.container_instance_containers_security_context_run_as_group())
 *                     .runAsUser(var_.container_instance_containers_security_context_run_as_user())
 *                     .securityContextType(var_.container_instance_containers_security_context_security_context_type())
 *                     .build())
 *                 .volumeMounts(ContainerInstanceContainerVolumeMountArgs.builder()
 *                     .mountPath(var_.container_instance_containers_volume_mounts_mount_path())
 *                     .volumeName(var_.container_instance_containers_volume_mounts_volume_name())
 *                     .isReadOnly(var_.container_instance_containers_volume_mounts_is_read_only())
 *                     .partition(var_.container_instance_containers_volume_mounts_partition())
 *                     .subPath(var_.container_instance_containers_volume_mounts_sub_path())
 *                     .build())
 *                 .workingDirectory(var_.container_instance_containers_working_directory())
 *                 .build())
 *             .shape(var_.container_instance_shape())
 *             .shapeConfig(ContainerInstanceShapeConfigArgs.builder()
 *                 .ocpus(var_.container_instance_shape_config_ocpus())
 *                 .memoryInGbs(var_.container_instance_shape_config_memory_in_gbs())
 *                 .build())
 *             .vnics(ContainerInstanceVnicArgs.builder()
 *                 .subnetId(oci_core_subnet.test_subnet().id())
 *                 .definedTags(var_.container_instance_vnics_defined_tags())
 *                 .displayName(var_.container_instance_vnics_display_name())
 *                 .freeformTags(var_.container_instance_vnics_freeform_tags())
 *                 .hostnameLabel(var_.container_instance_vnics_hostname_label())
 *                 .isPublicIpAssigned(var_.container_instance_vnics_is_public_ip_assigned())
 *                 .nsgIds(var_.container_instance_vnics_nsg_ids())
 *                 .privateIp(var_.container_instance_vnics_private_ip())
 *                 .skipSourceDestCheck(var_.container_instance_vnics_skip_source_dest_check())
 *                 .build())
 *             .containerRestartPolicy(var_.container_instance_container_restart_policy())
 *             .definedTags(Map.of(&#34;foo-namespace.bar-key&#34;, &#34;value&#34;))
 *             .displayName(var_.container_instance_display_name())
 *             .dnsConfig(ContainerInstanceDnsConfigArgs.builder()
 *                 .nameservers(var_.container_instance_dns_config_nameservers())
 *                 .options(var_.container_instance_dns_config_options())
 *                 .searches(var_.container_instance_dns_config_searches())
 *                 .build())
 *             .faultDomain(var_.container_instance_fault_domain())
 *             .freeformTags(Map.of(&#34;bar-key&#34;, &#34;value&#34;))
 *             .gracefulShutdownTimeoutInSeconds(var_.container_instance_graceful_shutdown_timeout_in_seconds())
 *             .imagePullSecrets(ContainerInstanceImagePullSecretArgs.builder()
 *                 .registryEndpoint(var_.container_instance_image_pull_secrets_registry_endpoint())
 *                 .secretType(var_.container_instance_image_pull_secrets_secret_type())
 *                 .password(var_.container_instance_image_pull_secrets_password())
 *                 .secretId(oci_vault_secret.test_secret().id())
 *                 .username(var_.container_instance_image_pull_secrets_username())
 *                 .build())
 *             .volumes(ContainerInstanceVolumeArgs.builder()
 *                 .name(var_.container_instance_volumes_name())
 *                 .volumeType(var_.container_instance_volumes_volume_type())
 *                 .backingStore(var_.container_instance_volumes_backing_store())
 *                 .configs(ContainerInstanceVolumeConfigArgs.builder()
 *                     .data(var_.container_instance_volumes_configs_data())
 *                     .fileName(var_.container_instance_volumes_configs_file_name())
 *                     .path(var_.container_instance_volumes_configs_path())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ContainerInstances can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:ContainerEngine/containerInstance:ContainerInstance test_container_instance &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:ContainerEngine/containerInstance:ContainerInstance")
public class ContainerInstance extends com.pulumi.resources.CustomResource {
    /**
     * The availability domain where the container instance runs.
     * 
     */
    @Export(name="availabilityDomain", refs={String.class}, tree="[0]")
    private Output<String> availabilityDomain;

    /**
     * @return The availability domain where the container instance runs.
     * 
     */
    public Output<String> availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * (Updatable) The compartment OCID.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * The number of containers on the container instance.
     * 
     */
    @Export(name="containerCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> containerCount;

    /**
     * @return The number of containers on the container instance.
     * 
     */
    public Output<Optional<Integer>> containerCount() {
        return Codegen.optional(this.containerCount);
    }
    /**
     * Container restart policy
     * 
     */
    @Export(name="containerRestartPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> containerRestartPolicy;

    /**
     * @return Container restart policy
     * 
     */
    public Output<Optional<String>> containerRestartPolicy() {
        return Codegen.optional(this.containerRestartPolicy);
    }
    /**
     * The containers to create on this container instance.
     * 
     */
    @Export(name="containers", refs={List.class,ContainerInstanceContainer.class}, tree="[0,1]")
    private Output<List<ContainerInstanceContainer>> containers;

    /**
     * @return The containers to create on this container instance.
     * 
     */
    public Output<List<ContainerInstanceContainer>> containers() {
        return this.containers;
    }
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> definedTags;

    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    public Output<Optional<Map<String,Object>>> definedTags() {
        return Codegen.optional(this.definedTags);
    }
    /**
     * A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     * 
     */
    @Export(name="dnsConfig", refs={ContainerInstanceDnsConfig.class}, tree="[0]")
    private Output</* @Nullable */ ContainerInstanceDnsConfig> dnsConfig;

    /**
     * @return Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     * 
     */
    public Output<Optional<ContainerInstanceDnsConfig>> dnsConfig() {
        return Codegen.optional(this.dnsConfig);
    }
    /**
     * The fault domain where the container instance runs.
     * 
     */
    @Export(name="faultDomain", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> faultDomain;

    /**
     * @return The fault domain where the container instance runs.
     * 
     */
    public Output<Optional<String>> faultDomain() {
        return Codegen.optional(this.faultDomain);
    }
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> freeformTags;

    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Optional<Map<String,Object>>> freeformTags() {
        return Codegen.optional(this.freeformTags);
    }
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     * 
     */
    @Export(name="gracefulShutdownTimeoutInSeconds", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gracefulShutdownTimeoutInSeconds;

    /**
     * @return The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     * 
     */
    public Output<Optional<String>> gracefulShutdownTimeoutInSeconds() {
        return Codegen.optional(this.gracefulShutdownTimeoutInSeconds);
    }
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     * 
     */
    @Export(name="imagePullSecrets", refs={List.class,ContainerInstanceImagePullSecret.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ContainerInstanceImagePullSecret>> imagePullSecrets;

    /**
     * @return The image pulls secrets so you can access private registry to pull container images.
     * 
     */
    public Output<Optional<List<ContainerInstanceImagePullSecret>>> imagePullSecrets() {
        return Codegen.optional(this.imagePullSecrets);
    }
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    @Export(name="lifecycleDetails", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lifecycleDetails;

    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    public Output<Optional<String>> lifecycleDetails() {
        return Codegen.optional(this.lifecycleDetails);
    }
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     * 
     */
    @Export(name="shape", refs={String.class}, tree="[0]")
    private Output<String> shape;

    /**
     * @return The shape of the container instance. The shape determines the resources available to the container instance.
     * 
     */
    public Output<String> shape() {
        return this.shape;
    }
    /**
     * The size and amount of resources available to the container instance.
     * 
     */
    @Export(name="shapeConfig", refs={ContainerInstanceShapeConfig.class}, tree="[0]")
    private Output<ContainerInstanceShapeConfig> shapeConfig;

    /**
     * @return The size and amount of resources available to the container instance.
     * 
     */
    public Output<ContainerInstanceShapeConfig> shapeConfig() {
        return this.shapeConfig;
    }
    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    @Export(name="systemTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    public Output<Optional<Map<String,Object>>> systemTags() {
        return Codegen.optional(this.systemTags);
    }
    /**
     * The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeCreated;

    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Output<Optional<String>> timeCreated() {
        return Codegen.optional(this.timeCreated);
    }
    /**
     * The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeUpdated;

    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Output<Optional<String>> timeUpdated() {
        return Codegen.optional(this.timeUpdated);
    }
    /**
     * The networks available to containers on this container instance.
     * 
     */
    @Export(name="vnics", refs={List.class,ContainerInstanceVnic.class}, tree="[0,1]")
    private Output<List<ContainerInstanceVnic>> vnics;

    /**
     * @return The networks available to containers on this container instance.
     * 
     */
    public Output<List<ContainerInstanceVnic>> vnics() {
        return this.vnics;
    }
    /**
     * The number of volumes that are attached to the container instance.
     * 
     */
    @Export(name="volumeCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> volumeCount;

    /**
     * @return The number of volumes that are attached to the container instance.
     * 
     */
    public Output<Optional<Integer>> volumeCount() {
        return Codegen.optional(this.volumeCount);
    }
    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     * 
     * You can attach up to 32 volumes to single container instance.
     * 
     */
    @Export(name="volumes", refs={List.class,ContainerInstanceVolume.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ContainerInstanceVolume>> volumes;

    /**
     * @return A volume is a directory with data that is accessible across multiple containers in a container instance.
     * 
     * You can attach up to 32 volumes to single container instance.
     * 
     */
    public Output<Optional<List<ContainerInstanceVolume>>> volumes() {
        return Codegen.optional(this.volumes);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ContainerInstance(String name) {
        this(name, ContainerInstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ContainerInstance(String name, ContainerInstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ContainerInstance(String name, ContainerInstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:ContainerEngine/containerInstance:ContainerInstance", name, args == null ? ContainerInstanceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ContainerInstance(String name, Output<String> id, @Nullable ContainerInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:ContainerEngine/containerInstance:ContainerInstance", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ContainerInstance get(String name, Output<String> id, @Nullable ContainerInstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ContainerInstance(name, id, state, options);
    }
}
