// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.inputs.VirtualNodePoolInitialVirtualNodeLabelArgs;
import com.pulumi.oci.ContainerEngine.inputs.VirtualNodePoolPlacementConfigurationArgs;
import com.pulumi.oci.ContainerEngine.inputs.VirtualNodePoolPodConfigurationArgs;
import com.pulumi.oci.ContainerEngine.inputs.VirtualNodePoolTaintArgs;
import com.pulumi.oci.ContainerEngine.inputs.VirtualNodePoolVirtualNodeTagsArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNodePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNodePoolArgs Empty = new VirtualNodePoolArgs();

    /**
     * The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * Compartment of the virtual node pool.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return Compartment of the virtual node pool.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Display name of the virtual node pool. This is a non-unique value.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Display name of the virtual node pool. This is a non-unique value.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
     * 
     */
    @Import(name="initialVirtualNodeLabels")
    private @Nullable Output<List<VirtualNodePoolInitialVirtualNodeLabelArgs>> initialVirtualNodeLabels;

    /**
     * @return (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
     * 
     */
    public Optional<Output<List<VirtualNodePoolInitialVirtualNodeLabelArgs>>> initialVirtualNodeLabels() {
        return Optional.ofNullable(this.initialVirtualNodeLabels);
    }

    /**
     * (Updatable) List of network security group IDs applied to the Pod VNIC.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return (Updatable) List of network security group IDs applied to the Pod VNIC.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
     * 
     */
    @Import(name="placementConfigurations", required=true)
    private Output<List<VirtualNodePoolPlacementConfigurationArgs>> placementConfigurations;

    /**
     * @return (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
     * 
     */
    public Output<List<VirtualNodePoolPlacementConfigurationArgs>> placementConfigurations() {
        return this.placementConfigurations;
    }

    /**
     * (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
     * 
     */
    @Import(name="podConfiguration", required=true)
    private Output<VirtualNodePoolPodConfigurationArgs> podConfiguration;

    /**
     * @return (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
     * 
     */
    public Output<VirtualNodePoolPodConfigurationArgs> podConfiguration() {
        return this.podConfiguration;
    }

    /**
     * (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<VirtualNodePoolTaintArgs>> taints;

    /**
     * @return (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
     * 
     */
    public Optional<Output<List<VirtualNodePoolTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * (Updatable) The tags associated to the virtual nodes in this virtual node pool.
     * 
     */
    @Import(name="virtualNodeTags")
    private @Nullable Output<VirtualNodePoolVirtualNodeTagsArgs> virtualNodeTags;

    /**
     * @return (Updatable) The tags associated to the virtual nodes in this virtual node pool.
     * 
     */
    public Optional<Output<VirtualNodePoolVirtualNodeTagsArgs>> virtualNodeTags() {
        return Optional.ofNullable(this.virtualNodeTags);
    }

    private VirtualNodePoolArgs() {}

    private VirtualNodePoolArgs(VirtualNodePoolArgs $) {
        this.clusterId = $.clusterId;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.initialVirtualNodeLabels = $.initialVirtualNodeLabels;
        this.nsgIds = $.nsgIds;
        this.placementConfigurations = $.placementConfigurations;
        this.podConfiguration = $.podConfiguration;
        this.size = $.size;
        this.taints = $.taints;
        this.virtualNodeTags = $.virtualNodeTags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNodePoolArgs $;

        public Builder() {
            $ = new VirtualNodePoolArgs();
        }

        public Builder(VirtualNodePoolArgs defaults) {
            $ = new VirtualNodePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param compartmentId Compartment of the virtual node pool.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId Compartment of the virtual node pool.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) Display name of the virtual node pool. This is a non-unique value.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Display name of the virtual node pool. This is a non-unique value.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param initialVirtualNodeLabels (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
         * 
         * @return builder
         * 
         */
        public Builder initialVirtualNodeLabels(@Nullable Output<List<VirtualNodePoolInitialVirtualNodeLabelArgs>> initialVirtualNodeLabels) {
            $.initialVirtualNodeLabels = initialVirtualNodeLabels;
            return this;
        }

        /**
         * @param initialVirtualNodeLabels (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
         * 
         * @return builder
         * 
         */
        public Builder initialVirtualNodeLabels(List<VirtualNodePoolInitialVirtualNodeLabelArgs> initialVirtualNodeLabels) {
            return initialVirtualNodeLabels(Output.of(initialVirtualNodeLabels));
        }

        /**
         * @param initialVirtualNodeLabels (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
         * 
         * @return builder
         * 
         */
        public Builder initialVirtualNodeLabels(VirtualNodePoolInitialVirtualNodeLabelArgs... initialVirtualNodeLabels) {
            return initialVirtualNodeLabels(List.of(initialVirtualNodeLabels));
        }

        /**
         * @param nsgIds (Updatable) List of network security group IDs applied to the Pod VNIC.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds (Updatable) List of network security group IDs applied to the Pod VNIC.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds (Updatable) List of network security group IDs applied to the Pod VNIC.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param placementConfigurations (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
         * 
         * @return builder
         * 
         */
        public Builder placementConfigurations(Output<List<VirtualNodePoolPlacementConfigurationArgs>> placementConfigurations) {
            $.placementConfigurations = placementConfigurations;
            return this;
        }

        /**
         * @param placementConfigurations (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
         * 
         * @return builder
         * 
         */
        public Builder placementConfigurations(List<VirtualNodePoolPlacementConfigurationArgs> placementConfigurations) {
            return placementConfigurations(Output.of(placementConfigurations));
        }

        /**
         * @param placementConfigurations (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
         * 
         * @return builder
         * 
         */
        public Builder placementConfigurations(VirtualNodePoolPlacementConfigurationArgs... placementConfigurations) {
            return placementConfigurations(List.of(placementConfigurations));
        }

        /**
         * @param podConfiguration (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
         * 
         * @return builder
         * 
         */
        public Builder podConfiguration(Output<VirtualNodePoolPodConfigurationArgs> podConfiguration) {
            $.podConfiguration = podConfiguration;
            return this;
        }

        /**
         * @param podConfiguration (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
         * 
         * @return builder
         * 
         */
        public Builder podConfiguration(VirtualNodePoolPodConfigurationArgs podConfiguration) {
            return podConfiguration(Output.of(podConfiguration));
        }

        /**
         * @param size (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param taints (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<VirtualNodePoolTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<VirtualNodePoolTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
         * 
         * @return builder
         * 
         */
        public Builder taints(VirtualNodePoolTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param virtualNodeTags (Updatable) The tags associated to the virtual nodes in this virtual node pool.
         * 
         * @return builder
         * 
         */
        public Builder virtualNodeTags(@Nullable Output<VirtualNodePoolVirtualNodeTagsArgs> virtualNodeTags) {
            $.virtualNodeTags = virtualNodeTags;
            return this;
        }

        /**
         * @param virtualNodeTags (Updatable) The tags associated to the virtual nodes in this virtual node pool.
         * 
         * @return builder
         * 
         */
        public Builder virtualNodeTags(VirtualNodePoolVirtualNodeTagsArgs virtualNodeTags) {
            return virtualNodeTags(Output.of(virtualNodeTags));
        }

        public VirtualNodePoolArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("VirtualNodePoolArgs", "clusterId");
            }
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("VirtualNodePoolArgs", "compartmentId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("VirtualNodePoolArgs", "displayName");
            }
            if ($.placementConfigurations == null) {
                throw new MissingRequiredPropertyException("VirtualNodePoolArgs", "placementConfigurations");
            }
            if ($.podConfiguration == null) {
                throw new MissingRequiredPropertyException("VirtualNodePoolArgs", "podConfiguration");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("VirtualNodePoolArgs", "size");
            }
            return $;
        }
    }

}
