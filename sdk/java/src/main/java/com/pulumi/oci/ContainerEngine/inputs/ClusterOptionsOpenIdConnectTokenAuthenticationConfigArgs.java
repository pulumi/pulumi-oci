// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.inputs.ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs Empty = new ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs();

    /**
     * (Updatable) A Base64 encoded public RSA or ECDSA certificates used to signed your identity provider&#39;s web certificate.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return (Updatable) A Base64 encoded public RSA or ECDSA certificates used to signed your identity provider&#39;s web certificate.
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * (Updatable) A client id that all tokens must be issued for.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return (Updatable) A client id that all tokens must be issued for.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * (Updatable) JWT claim to use as the user&#39;s group. If the claim is present it must be an array of strings.
     * 
     */
    @Import(name="groupsClaim")
    private @Nullable Output<String> groupsClaim;

    /**
     * @return (Updatable) JWT claim to use as the user&#39;s group. If the claim is present it must be an array of strings.
     * 
     */
    public Optional<Output<String>> groupsClaim() {
        return Optional.ofNullable(this.groupsClaim);
    }

    /**
     * (Updatable) Prefix prepended to group claims to prevent clashes with existing names (such as system:groups).
     * 
     */
    @Import(name="groupsPrefix")
    private @Nullable Output<String> groupsPrefix;

    /**
     * @return (Updatable) Prefix prepended to group claims to prevent clashes with existing names (such as system:groups).
     * 
     */
    public Optional<Output<String>> groupsPrefix() {
        return Optional.ofNullable(this.groupsPrefix);
    }

    /**
     * (Updatable) Whether the cluster has OIDC Auth Config enabled. Defaults to false.
     * 
     */
    @Import(name="isOpenIdConnectAuthEnabled", required=true)
    private Output<Boolean> isOpenIdConnectAuthEnabled;

    /**
     * @return (Updatable) Whether the cluster has OIDC Auth Config enabled. Defaults to false.
     * 
     */
    public Output<Boolean> isOpenIdConnectAuthEnabled() {
        return this.isOpenIdConnectAuthEnabled;
    }

    /**
     * (Updatable) URL of the provider that allows the API server to discover public signing keys.  Only URLs that use the https:// scheme are accepted. This is typically the provider&#39;s discovery URL,  changed to have an empty path.
     * 
     */
    @Import(name="issuerUrl")
    private @Nullable Output<String> issuerUrl;

    /**
     * @return (Updatable) URL of the provider that allows the API server to discover public signing keys.  Only URLs that use the https:// scheme are accepted. This is typically the provider&#39;s discovery URL,  changed to have an empty path.
     * 
     */
    public Optional<Output<String>> issuerUrl() {
        return Optional.ofNullable(this.issuerUrl);
    }

    /**
     * (Updatable) A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present  in the ID Token with a matching value. Repeat this flag to specify multiple claims.
     * 
     */
    @Import(name="requiredClaims")
    private @Nullable Output<List<ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimArgs>> requiredClaims;

    /**
     * @return (Updatable) A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present  in the ID Token with a matching value. Repeat this flag to specify multiple claims.
     * 
     */
    public Optional<Output<List<ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimArgs>>> requiredClaims() {
        return Optional.ofNullable(this.requiredClaims);
    }

    /**
     * (Updatable) The signing algorithms accepted. Default is [&#34;RS256&#34;].
     * 
     */
    @Import(name="signingAlgorithms")
    private @Nullable Output<List<String>> signingAlgorithms;

    /**
     * @return (Updatable) The signing algorithms accepted. Default is [&#34;RS256&#34;].
     * 
     */
    public Optional<Output<List<String>>> signingAlgorithms() {
        return Optional.ofNullable(this.signingAlgorithms);
    }

    /**
     * (Updatable) JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end  user. Admins can choose other claims, such as email or name, depending on their provider. However, claims  other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
     * 
     */
    @Import(name="usernameClaim")
    private @Nullable Output<String> usernameClaim;

    /**
     * @return (Updatable) JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end  user. Admins can choose other claims, such as email or name, depending on their provider. However, claims  other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
     * 
     */
    public Optional<Output<String>> usernameClaim() {
        return Optional.ofNullable(this.usernameClaim);
    }

    /**
     * (Updatable) Prefix prepended to username claims to prevent clashes with existing names (such as system:users).  For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn&#39;t provided and  --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where  ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.
     * 
     */
    @Import(name="usernamePrefix")
    private @Nullable Output<String> usernamePrefix;

    /**
     * @return (Updatable) Prefix prepended to username claims to prevent clashes with existing names (such as system:users).  For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn&#39;t provided and  --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where  ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.
     * 
     */
    public Optional<Output<String>> usernamePrefix() {
        return Optional.ofNullable(this.usernamePrefix);
    }

    private ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs() {}

    private ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs(ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs $) {
        this.caCertificate = $.caCertificate;
        this.clientId = $.clientId;
        this.groupsClaim = $.groupsClaim;
        this.groupsPrefix = $.groupsPrefix;
        this.isOpenIdConnectAuthEnabled = $.isOpenIdConnectAuthEnabled;
        this.issuerUrl = $.issuerUrl;
        this.requiredClaims = $.requiredClaims;
        this.signingAlgorithms = $.signingAlgorithms;
        this.usernameClaim = $.usernameClaim;
        this.usernamePrefix = $.usernamePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs $;

        public Builder() {
            $ = new ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs();
        }

        public Builder(ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs defaults) {
            $ = new ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificate (Updatable) A Base64 encoded public RSA or ECDSA certificates used to signed your identity provider&#39;s web certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate (Updatable) A Base64 encoded public RSA or ECDSA certificates used to signed your identity provider&#39;s web certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param clientId (Updatable) A client id that all tokens must be issued for.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId (Updatable) A client id that all tokens must be issued for.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param groupsClaim (Updatable) JWT claim to use as the user&#39;s group. If the claim is present it must be an array of strings.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(@Nullable Output<String> groupsClaim) {
            $.groupsClaim = groupsClaim;
            return this;
        }

        /**
         * @param groupsClaim (Updatable) JWT claim to use as the user&#39;s group. If the claim is present it must be an array of strings.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(String groupsClaim) {
            return groupsClaim(Output.of(groupsClaim));
        }

        /**
         * @param groupsPrefix (Updatable) Prefix prepended to group claims to prevent clashes with existing names (such as system:groups).
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(@Nullable Output<String> groupsPrefix) {
            $.groupsPrefix = groupsPrefix;
            return this;
        }

        /**
         * @param groupsPrefix (Updatable) Prefix prepended to group claims to prevent clashes with existing names (such as system:groups).
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(String groupsPrefix) {
            return groupsPrefix(Output.of(groupsPrefix));
        }

        /**
         * @param isOpenIdConnectAuthEnabled (Updatable) Whether the cluster has OIDC Auth Config enabled. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder isOpenIdConnectAuthEnabled(Output<Boolean> isOpenIdConnectAuthEnabled) {
            $.isOpenIdConnectAuthEnabled = isOpenIdConnectAuthEnabled;
            return this;
        }

        /**
         * @param isOpenIdConnectAuthEnabled (Updatable) Whether the cluster has OIDC Auth Config enabled. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder isOpenIdConnectAuthEnabled(Boolean isOpenIdConnectAuthEnabled) {
            return isOpenIdConnectAuthEnabled(Output.of(isOpenIdConnectAuthEnabled));
        }

        /**
         * @param issuerUrl (Updatable) URL of the provider that allows the API server to discover public signing keys.  Only URLs that use the https:// scheme are accepted. This is typically the provider&#39;s discovery URL,  changed to have an empty path.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(@Nullable Output<String> issuerUrl) {
            $.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * @param issuerUrl (Updatable) URL of the provider that allows the API server to discover public signing keys.  Only URLs that use the https:// scheme are accepted. This is typically the provider&#39;s discovery URL,  changed to have an empty path.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(String issuerUrl) {
            return issuerUrl(Output.of(issuerUrl));
        }

        /**
         * @param requiredClaims (Updatable) A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present  in the ID Token with a matching value. Repeat this flag to specify multiple claims.
         * 
         * @return builder
         * 
         */
        public Builder requiredClaims(@Nullable Output<List<ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimArgs>> requiredClaims) {
            $.requiredClaims = requiredClaims;
            return this;
        }

        /**
         * @param requiredClaims (Updatable) A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present  in the ID Token with a matching value. Repeat this flag to specify multiple claims.
         * 
         * @return builder
         * 
         */
        public Builder requiredClaims(List<ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimArgs> requiredClaims) {
            return requiredClaims(Output.of(requiredClaims));
        }

        /**
         * @param requiredClaims (Updatable) A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present  in the ID Token with a matching value. Repeat this flag to specify multiple claims.
         * 
         * @return builder
         * 
         */
        public Builder requiredClaims(ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimArgs... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }

        /**
         * @param signingAlgorithms (Updatable) The signing algorithms accepted. Default is [&#34;RS256&#34;].
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithms(@Nullable Output<List<String>> signingAlgorithms) {
            $.signingAlgorithms = signingAlgorithms;
            return this;
        }

        /**
         * @param signingAlgorithms (Updatable) The signing algorithms accepted. Default is [&#34;RS256&#34;].
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithms(List<String> signingAlgorithms) {
            return signingAlgorithms(Output.of(signingAlgorithms));
        }

        /**
         * @param signingAlgorithms (Updatable) The signing algorithms accepted. Default is [&#34;RS256&#34;].
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithms(String... signingAlgorithms) {
            return signingAlgorithms(List.of(signingAlgorithms));
        }

        /**
         * @param usernameClaim (Updatable) JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end  user. Admins can choose other claims, such as email or name, depending on their provider. However, claims  other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(@Nullable Output<String> usernameClaim) {
            $.usernameClaim = usernameClaim;
            return this;
        }

        /**
         * @param usernameClaim (Updatable) JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end  user. Admins can choose other claims, such as email or name, depending on their provider. However, claims  other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(String usernameClaim) {
            return usernameClaim(Output.of(usernameClaim));
        }

        /**
         * @param usernamePrefix (Updatable) Prefix prepended to username claims to prevent clashes with existing names (such as system:users).  For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn&#39;t provided and  --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where  ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(@Nullable Output<String> usernamePrefix) {
            $.usernamePrefix = usernamePrefix;
            return this;
        }

        /**
         * @param usernamePrefix (Updatable) Prefix prepended to username claims to prevent clashes with existing names (such as system:users).  For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn&#39;t provided and  --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where  ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(String usernamePrefix) {
            return usernamePrefix(Output.of(usernamePrefix));
        }

        public ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs build() {
            if ($.isOpenIdConnectAuthEnabled == null) {
                throw new MissingRequiredPropertyException("ClusterOptionsOpenIdConnectTokenAuthenticationConfigArgs", "isOpenIdConnectAuthEnabled");
            }
            return $;
        }
    }

}
