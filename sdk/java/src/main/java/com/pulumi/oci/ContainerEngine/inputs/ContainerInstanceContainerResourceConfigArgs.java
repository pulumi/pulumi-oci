// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerInstanceContainerResourceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerInstanceContainerResourceConfigArgs Empty = new ContainerInstanceContainerResourceConfigArgs();

    /**
     * The maximum amount of memory that can be consumed by the container&#39;s process.
     * 
     * If you do not set a value, then the process may use all available memory on the instance.
     * 
     */
    @Import(name="memoryLimitInGbs")
    private @Nullable Output<Double> memoryLimitInGbs;

    /**
     * @return The maximum amount of memory that can be consumed by the container&#39;s process.
     * 
     * If you do not set a value, then the process may use all available memory on the instance.
     * 
     */
    public Optional<Output<Double>> memoryLimitInGbs() {
        return Optional.ofNullable(this.memoryLimitInGbs);
    }

    /**
     * The maximum amount of CPUs that can be consumed by the container&#39;s process.
     * 
     * If you do not set a value, then the process can use all available CPU resources on the instance.
     * 
     * CPU usage is defined in terms of logical CPUs. This means that the maximum possible value on an E3 ContainerInstance with 1 OCPU is 2.0.
     * 
     * A container with a 2.0 vcpusLimit could consume up to 100% of the CPU resources available on the container instance. Values can be fractional. A value of &#34;1.5&#34; means that the container can consume at most the equivalent of 1 and a half logical CPUs worth of CPU capacity.
     * 
     */
    @Import(name="vcpusLimit")
    private @Nullable Output<Double> vcpusLimit;

    /**
     * @return The maximum amount of CPUs that can be consumed by the container&#39;s process.
     * 
     * If you do not set a value, then the process can use all available CPU resources on the instance.
     * 
     * CPU usage is defined in terms of logical CPUs. This means that the maximum possible value on an E3 ContainerInstance with 1 OCPU is 2.0.
     * 
     * A container with a 2.0 vcpusLimit could consume up to 100% of the CPU resources available on the container instance. Values can be fractional. A value of &#34;1.5&#34; means that the container can consume at most the equivalent of 1 and a half logical CPUs worth of CPU capacity.
     * 
     */
    public Optional<Output<Double>> vcpusLimit() {
        return Optional.ofNullable(this.vcpusLimit);
    }

    private ContainerInstanceContainerResourceConfigArgs() {}

    private ContainerInstanceContainerResourceConfigArgs(ContainerInstanceContainerResourceConfigArgs $) {
        this.memoryLimitInGbs = $.memoryLimitInGbs;
        this.vcpusLimit = $.vcpusLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceContainerResourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceContainerResourceConfigArgs $;

        public Builder() {
            $ = new ContainerInstanceContainerResourceConfigArgs();
        }

        public Builder(ContainerInstanceContainerResourceConfigArgs defaults) {
            $ = new ContainerInstanceContainerResourceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param memoryLimitInGbs The maximum amount of memory that can be consumed by the container&#39;s process.
         * 
         * If you do not set a value, then the process may use all available memory on the instance.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimitInGbs(@Nullable Output<Double> memoryLimitInGbs) {
            $.memoryLimitInGbs = memoryLimitInGbs;
            return this;
        }

        /**
         * @param memoryLimitInGbs The maximum amount of memory that can be consumed by the container&#39;s process.
         * 
         * If you do not set a value, then the process may use all available memory on the instance.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimitInGbs(Double memoryLimitInGbs) {
            return memoryLimitInGbs(Output.of(memoryLimitInGbs));
        }

        /**
         * @param vcpusLimit The maximum amount of CPUs that can be consumed by the container&#39;s process.
         * 
         * If you do not set a value, then the process can use all available CPU resources on the instance.
         * 
         * CPU usage is defined in terms of logical CPUs. This means that the maximum possible value on an E3 ContainerInstance with 1 OCPU is 2.0.
         * 
         * A container with a 2.0 vcpusLimit could consume up to 100% of the CPU resources available on the container instance. Values can be fractional. A value of &#34;1.5&#34; means that the container can consume at most the equivalent of 1 and a half logical CPUs worth of CPU capacity.
         * 
         * @return builder
         * 
         */
        public Builder vcpusLimit(@Nullable Output<Double> vcpusLimit) {
            $.vcpusLimit = vcpusLimit;
            return this;
        }

        /**
         * @param vcpusLimit The maximum amount of CPUs that can be consumed by the container&#39;s process.
         * 
         * If you do not set a value, then the process can use all available CPU resources on the instance.
         * 
         * CPU usage is defined in terms of logical CPUs. This means that the maximum possible value on an E3 ContainerInstance with 1 OCPU is 2.0.
         * 
         * A container with a 2.0 vcpusLimit could consume up to 100% of the CPU resources available on the container instance. Values can be fractional. A value of &#34;1.5&#34; means that the container can consume at most the equivalent of 1 and a half logical CPUs worth of CPU capacity.
         * 
         * @return builder
         * 
         */
        public Builder vcpusLimit(Double vcpusLimit) {
            return vcpusLimit(Output.of(vcpusLimit));
        }

        public ContainerInstanceContainerResourceConfigArgs build() {
            return $;
        }
    }

}
