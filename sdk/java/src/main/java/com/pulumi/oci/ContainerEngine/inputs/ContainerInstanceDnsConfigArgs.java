// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerInstanceDnsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerInstanceDnsConfigArgs Empty = new ContainerInstanceDnsConfigArgs();

    /**
     * IP address of a name server that the resolver should query, either an IPv4 address (in dot notation), or an IPv6 address in colon (and possibly dot) notation. If null, we will use nameservers from subnet dhcpDnsOptions.
     * 
     */
    @Import(name="nameservers")
    private @Nullable Output<List<String>> nameservers;

    /**
     * @return IP address of a name server that the resolver should query, either an IPv4 address (in dot notation), or an IPv6 address in colon (and possibly dot) notation. If null, we will use nameservers from subnet dhcpDnsOptions.
     * 
     */
    public Optional<Output<List<String>>> nameservers() {
        return Optional.ofNullable(this.nameservers);
    }

    /**
     * Options allows certain internal resolver variables to be modified. Options are a list of objects in https://man7.org/linux/man-pages/man5/resolv.conf.5.html. Examples: [&#34;ndots:n&#34;, &#34;edns0&#34;]
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<String>> options;

    /**
     * @return Options allows certain internal resolver variables to be modified. Options are a list of objects in https://man7.org/linux/man-pages/man5/resolv.conf.5.html. Examples: [&#34;ndots:n&#34;, &#34;edns0&#34;]
     * 
     */
    public Optional<Output<List<String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Search list for host-name lookup. If null, we will use searches from subnet dhcpDnsOptios.
     * 
     */
    @Import(name="searches")
    private @Nullable Output<List<String>> searches;

    /**
     * @return Search list for host-name lookup. If null, we will use searches from subnet dhcpDnsOptios.
     * 
     */
    public Optional<Output<List<String>>> searches() {
        return Optional.ofNullable(this.searches);
    }

    private ContainerInstanceDnsConfigArgs() {}

    private ContainerInstanceDnsConfigArgs(ContainerInstanceDnsConfigArgs $) {
        this.nameservers = $.nameservers;
        this.options = $.options;
        this.searches = $.searches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceDnsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceDnsConfigArgs $;

        public Builder() {
            $ = new ContainerInstanceDnsConfigArgs();
        }

        public Builder(ContainerInstanceDnsConfigArgs defaults) {
            $ = new ContainerInstanceDnsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nameservers IP address of a name server that the resolver should query, either an IPv4 address (in dot notation), or an IPv6 address in colon (and possibly dot) notation. If null, we will use nameservers from subnet dhcpDnsOptions.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(@Nullable Output<List<String>> nameservers) {
            $.nameservers = nameservers;
            return this;
        }

        /**
         * @param nameservers IP address of a name server that the resolver should query, either an IPv4 address (in dot notation), or an IPv6 address in colon (and possibly dot) notation. If null, we will use nameservers from subnet dhcpDnsOptions.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(List<String> nameservers) {
            return nameservers(Output.of(nameservers));
        }

        /**
         * @param nameservers IP address of a name server that the resolver should query, either an IPv4 address (in dot notation), or an IPv6 address in colon (and possibly dot) notation. If null, we will use nameservers from subnet dhcpDnsOptions.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(String... nameservers) {
            return nameservers(List.of(nameservers));
        }

        /**
         * @param options Options allows certain internal resolver variables to be modified. Options are a list of objects in https://man7.org/linux/man-pages/man5/resolv.conf.5.html. Examples: [&#34;ndots:n&#34;, &#34;edns0&#34;]
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<List<String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Options allows certain internal resolver variables to be modified. Options are a list of objects in https://man7.org/linux/man-pages/man5/resolv.conf.5.html. Examples: [&#34;ndots:n&#34;, &#34;edns0&#34;]
         * 
         * @return builder
         * 
         */
        public Builder options(List<String> options) {
            return options(Output.of(options));
        }

        /**
         * @param options Options allows certain internal resolver variables to be modified. Options are a list of objects in https://man7.org/linux/man-pages/man5/resolv.conf.5.html. Examples: [&#34;ndots:n&#34;, &#34;edns0&#34;]
         * 
         * @return builder
         * 
         */
        public Builder options(String... options) {
            return options(List.of(options));
        }

        /**
         * @param searches Search list for host-name lookup. If null, we will use searches from subnet dhcpDnsOptios.
         * 
         * @return builder
         * 
         */
        public Builder searches(@Nullable Output<List<String>> searches) {
            $.searches = searches;
            return this;
        }

        /**
         * @param searches Search list for host-name lookup. If null, we will use searches from subnet dhcpDnsOptios.
         * 
         * @return builder
         * 
         */
        public Builder searches(List<String> searches) {
            return searches(Output.of(searches));
        }

        /**
         * @param searches Search list for host-name lookup. If null, we will use searches from subnet dhcpDnsOptios.
         * 
         * @return builder
         * 
         */
        public Builder searches(String... searches) {
            return searches(List.of(searches));
        }

        public ContainerInstanceDnsConfigArgs build() {
            return $;
        }
    }

}
