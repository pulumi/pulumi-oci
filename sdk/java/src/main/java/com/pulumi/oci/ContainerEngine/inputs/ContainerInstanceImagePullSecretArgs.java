// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerInstanceImagePullSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerInstanceImagePullSecretArgs Empty = new ContainerInstanceImagePullSecretArgs();

    /**
     * The password which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The registry endpoint of the container image.
     * 
     */
    @Import(name="registryEndpoint", required=true)
    private Output<String> registryEndpoint;

    /**
     * @return The registry endpoint of the container image.
     * 
     */
    public Output<String> registryEndpoint() {
        return this.registryEndpoint;
    }

    /**
     * The OCID of the secret for registry credentials.
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return The OCID of the secret for registry credentials.
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * The type of ImagePullSecret.
     * 
     */
    @Import(name="secretType", required=true)
    private Output<String> secretType;

    /**
     * @return The type of ImagePullSecret.
     * 
     */
    public Output<String> secretType() {
        return this.secretType;
    }

    /**
     * The username which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ContainerInstanceImagePullSecretArgs() {}

    private ContainerInstanceImagePullSecretArgs(ContainerInstanceImagePullSecretArgs $) {
        this.password = $.password;
        this.registryEndpoint = $.registryEndpoint;
        this.secretId = $.secretId;
        this.secretType = $.secretType;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceImagePullSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceImagePullSecretArgs $;

        public Builder() {
            $ = new ContainerInstanceImagePullSecretArgs();
        }

        public Builder(ContainerInstanceImagePullSecretArgs defaults) {
            $ = new ContainerInstanceImagePullSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password The password which should be used with the registry for authentication. The value is expected in base64 format.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password which should be used with the registry for authentication. The value is expected in base64 format.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param registryEndpoint The registry endpoint of the container image.
         * 
         * @return builder
         * 
         */
        public Builder registryEndpoint(Output<String> registryEndpoint) {
            $.registryEndpoint = registryEndpoint;
            return this;
        }

        /**
         * @param registryEndpoint The registry endpoint of the container image.
         * 
         * @return builder
         * 
         */
        public Builder registryEndpoint(String registryEndpoint) {
            return registryEndpoint(Output.of(registryEndpoint));
        }

        /**
         * @param secretId The OCID of the secret for registry credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId The OCID of the secret for registry credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param secretType The type of ImagePullSecret.
         * 
         * @return builder
         * 
         */
        public Builder secretType(Output<String> secretType) {
            $.secretType = secretType;
            return this;
        }

        /**
         * @param secretType The type of ImagePullSecret.
         * 
         * @return builder
         * 
         */
        public Builder secretType(String secretType) {
            return secretType(Output.of(secretType));
        }

        /**
         * @param username The username which should be used with the registry for authentication. The value is expected in base64 format.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username which should be used with the registry for authentication. The value is expected in base64 format.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ContainerInstanceImagePullSecretArgs build() {
            $.registryEndpoint = Objects.requireNonNull($.registryEndpoint, "expected parameter 'registryEndpoint' to be non-null");
            $.secretType = Objects.requireNonNull($.secretType, "expected parameter 'secretType' to be non-null");
            return $;
        }
    }

}
