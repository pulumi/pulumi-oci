// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerInstanceShapeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerInstanceShapeConfigArgs Empty = new ContainerInstanceShapeConfigArgs();

    /**
     * The total amount of memory available to the container instance (GB).
     * 
     */
    @Import(name="memoryInGbs")
    private @Nullable Output<Double> memoryInGbs;

    /**
     * @return The total amount of memory available to the container instance (GB).
     * 
     */
    public Optional<Output<Double>> memoryInGbs() {
        return Optional.ofNullable(this.memoryInGbs);
    }

    /**
     * The networking bandwidth available to the container instance, in gigabits per second.
     * 
     */
    @Import(name="networkingBandwidthInGbps")
    private @Nullable Output<Double> networkingBandwidthInGbps;

    /**
     * @return The networking bandwidth available to the container instance, in gigabits per second.
     * 
     */
    public Optional<Output<Double>> networkingBandwidthInGbps() {
        return Optional.ofNullable(this.networkingBandwidthInGbps);
    }

    /**
     * The total number of OCPUs available to the container instance.
     * 
     */
    @Import(name="ocpus", required=true)
    private Output<Double> ocpus;

    /**
     * @return The total number of OCPUs available to the container instance.
     * 
     */
    public Output<Double> ocpus() {
        return this.ocpus;
    }

    /**
     * A short description of the container instance&#39;s processor (CPU).
     * 
     */
    @Import(name="processorDescription")
    private @Nullable Output<String> processorDescription;

    /**
     * @return A short description of the container instance&#39;s processor (CPU).
     * 
     */
    public Optional<Output<String>> processorDescription() {
        return Optional.ofNullable(this.processorDescription);
    }

    private ContainerInstanceShapeConfigArgs() {}

    private ContainerInstanceShapeConfigArgs(ContainerInstanceShapeConfigArgs $) {
        this.memoryInGbs = $.memoryInGbs;
        this.networkingBandwidthInGbps = $.networkingBandwidthInGbps;
        this.ocpus = $.ocpus;
        this.processorDescription = $.processorDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceShapeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceShapeConfigArgs $;

        public Builder() {
            $ = new ContainerInstanceShapeConfigArgs();
        }

        public Builder(ContainerInstanceShapeConfigArgs defaults) {
            $ = new ContainerInstanceShapeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param memoryInGbs The total amount of memory available to the container instance (GB).
         * 
         * @return builder
         * 
         */
        public Builder memoryInGbs(@Nullable Output<Double> memoryInGbs) {
            $.memoryInGbs = memoryInGbs;
            return this;
        }

        /**
         * @param memoryInGbs The total amount of memory available to the container instance (GB).
         * 
         * @return builder
         * 
         */
        public Builder memoryInGbs(Double memoryInGbs) {
            return memoryInGbs(Output.of(memoryInGbs));
        }

        /**
         * @param networkingBandwidthInGbps The networking bandwidth available to the container instance, in gigabits per second.
         * 
         * @return builder
         * 
         */
        public Builder networkingBandwidthInGbps(@Nullable Output<Double> networkingBandwidthInGbps) {
            $.networkingBandwidthInGbps = networkingBandwidthInGbps;
            return this;
        }

        /**
         * @param networkingBandwidthInGbps The networking bandwidth available to the container instance, in gigabits per second.
         * 
         * @return builder
         * 
         */
        public Builder networkingBandwidthInGbps(Double networkingBandwidthInGbps) {
            return networkingBandwidthInGbps(Output.of(networkingBandwidthInGbps));
        }

        /**
         * @param ocpus The total number of OCPUs available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder ocpus(Output<Double> ocpus) {
            $.ocpus = ocpus;
            return this;
        }

        /**
         * @param ocpus The total number of OCPUs available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder ocpus(Double ocpus) {
            return ocpus(Output.of(ocpus));
        }

        /**
         * @param processorDescription A short description of the container instance&#39;s processor (CPU).
         * 
         * @return builder
         * 
         */
        public Builder processorDescription(@Nullable Output<String> processorDescription) {
            $.processorDescription = processorDescription;
            return this;
        }

        /**
         * @param processorDescription A short description of the container instance&#39;s processor (CPU).
         * 
         * @return builder
         * 
         */
        public Builder processorDescription(String processorDescription) {
            return processorDescription(Output.of(processorDescription));
        }

        public ContainerInstanceShapeConfigArgs build() {
            if ($.ocpus == null) {
                throw new MissingRequiredPropertyException("ContainerInstanceShapeConfigArgs", "ocpus");
            }
            return $;
        }
    }

}
