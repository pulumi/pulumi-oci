// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceContainerArgs;
import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceDnsConfigArgs;
import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceImagePullSecretArgs;
import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceShapeConfigArgs;
import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceVnicArgs;
import com.pulumi.oci.ContainerEngine.inputs.ContainerInstanceVolumeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerInstanceState Empty = new ContainerInstanceState();

    /**
     * The availability domain where the container instance runs.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return The availability domain where the container instance runs.
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * (Updatable) The compartment OCID.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The compartment OCID.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The number of containers on the container instance.
     * 
     */
    @Import(name="containerCount")
    private @Nullable Output<Integer> containerCount;

    /**
     * @return The number of containers on the container instance.
     * 
     */
    public Optional<Output<Integer>> containerCount() {
        return Optional.ofNullable(this.containerCount);
    }

    /**
     * Container restart policy
     * 
     */
    @Import(name="containerRestartPolicy")
    private @Nullable Output<String> containerRestartPolicy;

    /**
     * @return Container restart policy
     * 
     */
    public Optional<Output<String>> containerRestartPolicy() {
        return Optional.ofNullable(this.containerRestartPolicy);
    }

    /**
     * The containers to create on this container instance.
     * 
     */
    @Import(name="containers")
    private @Nullable Output<List<ContainerInstanceContainerArgs>> containers;

    /**
     * @return The containers to create on this container instance.
     * 
     */
    public Optional<Output<List<ContainerInstanceContainerArgs>>> containers() {
        return Optional.ofNullable(this.containers);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information. If you don&#39;t provide a name, a name is generated automatically.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information. If you don&#39;t provide a name, a name is generated automatically.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     * 
     */
    @Import(name="dnsConfig")
    private @Nullable Output<ContainerInstanceDnsConfigArgs> dnsConfig;

    /**
     * @return Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     * 
     */
    public Optional<Output<ContainerInstanceDnsConfigArgs>> dnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }

    /**
     * The fault domain where the container instance runs.
     * 
     */
    @Import(name="faultDomain")
    private @Nullable Output<String> faultDomain;

    /**
     * @return The fault domain where the container instance runs.
     * 
     */
    public Optional<Output<String>> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     * 
     */
    @Import(name="gracefulShutdownTimeoutInSeconds")
    private @Nullable Output<String> gracefulShutdownTimeoutInSeconds;

    /**
     * @return The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     * 
     */
    public Optional<Output<String>> gracefulShutdownTimeoutInSeconds() {
        return Optional.ofNullable(this.gracefulShutdownTimeoutInSeconds);
    }

    /**
     * The image pulls secrets so you can access private registry to pull container images.
     * 
     */
    @Import(name="imagePullSecrets")
    private @Nullable Output<List<ContainerInstanceImagePullSecretArgs>> imagePullSecrets;

    /**
     * @return The image pulls secrets so you can access private registry to pull container images.
     * 
     */
    public Optional<Output<List<ContainerInstanceImagePullSecretArgs>>> imagePullSecrets() {
        return Optional.ofNullable(this.imagePullSecrets);
    }

    /**
     * A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return The shape of the container instance. The shape determines the resources available to the container instance.
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * The size and amount of resources available to the container instance.
     * 
     */
    @Import(name="shapeConfig")
    private @Nullable Output<ContainerInstanceShapeConfigArgs> shapeConfig;

    /**
     * @return The size and amount of resources available to the container instance.
     * 
     */
    public Optional<Output<ContainerInstanceShapeConfigArgs>> shapeConfig() {
        return Optional.ofNullable(this.shapeConfig);
    }

    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The networks available to containers on this container instance.
     * 
     */
    @Import(name="vnics")
    private @Nullable Output<List<ContainerInstanceVnicArgs>> vnics;

    /**
     * @return The networks available to containers on this container instance.
     * 
     */
    public Optional<Output<List<ContainerInstanceVnicArgs>>> vnics() {
        return Optional.ofNullable(this.vnics);
    }

    /**
     * The number of volumes that are attached to the container instance.
     * 
     */
    @Import(name="volumeCount")
    private @Nullable Output<Integer> volumeCount;

    /**
     * @return The number of volumes that are attached to the container instance.
     * 
     */
    public Optional<Output<Integer>> volumeCount() {
        return Optional.ofNullable(this.volumeCount);
    }

    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     * 
     * You can attach up to 32 volumes to single container instance.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<ContainerInstanceVolumeArgs>> volumes;

    /**
     * @return A volume is a directory with data that is accessible across multiple containers in a container instance.
     * 
     * You can attach up to 32 volumes to single container instance.
     * 
     */
    public Optional<Output<List<ContainerInstanceVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private ContainerInstanceState() {}

    private ContainerInstanceState(ContainerInstanceState $) {
        this.availabilityDomain = $.availabilityDomain;
        this.compartmentId = $.compartmentId;
        this.containerCount = $.containerCount;
        this.containerRestartPolicy = $.containerRestartPolicy;
        this.containers = $.containers;
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.dnsConfig = $.dnsConfig;
        this.faultDomain = $.faultDomain;
        this.freeformTags = $.freeformTags;
        this.gracefulShutdownTimeoutInSeconds = $.gracefulShutdownTimeoutInSeconds;
        this.imagePullSecrets = $.imagePullSecrets;
        this.lifecycleDetails = $.lifecycleDetails;
        this.shape = $.shape;
        this.shapeConfig = $.shapeConfig;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.vnics = $.vnics;
        this.volumeCount = $.volumeCount;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceState $;

        public Builder() {
            $ = new ContainerInstanceState();
        }

        public Builder(ContainerInstanceState defaults) {
            $ = new ContainerInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityDomain The availability domain where the container instance runs.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain The availability domain where the container instance runs.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param compartmentId (Updatable) The compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param containerCount The number of containers on the container instance.
         * 
         * @return builder
         * 
         */
        public Builder containerCount(@Nullable Output<Integer> containerCount) {
            $.containerCount = containerCount;
            return this;
        }

        /**
         * @param containerCount The number of containers on the container instance.
         * 
         * @return builder
         * 
         */
        public Builder containerCount(Integer containerCount) {
            return containerCount(Output.of(containerCount));
        }

        /**
         * @param containerRestartPolicy Container restart policy
         * 
         * @return builder
         * 
         */
        public Builder containerRestartPolicy(@Nullable Output<String> containerRestartPolicy) {
            $.containerRestartPolicy = containerRestartPolicy;
            return this;
        }

        /**
         * @param containerRestartPolicy Container restart policy
         * 
         * @return builder
         * 
         */
        public Builder containerRestartPolicy(String containerRestartPolicy) {
            return containerRestartPolicy(Output.of(containerRestartPolicy));
        }

        /**
         * @param containers The containers to create on this container instance.
         * 
         * @return builder
         * 
         */
        public Builder containers(@Nullable Output<List<ContainerInstanceContainerArgs>> containers) {
            $.containers = containers;
            return this;
        }

        /**
         * @param containers The containers to create on this container instance.
         * 
         * @return builder
         * 
         */
        public Builder containers(List<ContainerInstanceContainerArgs> containers) {
            return containers(Output.of(containers));
        }

        /**
         * @param containers The containers to create on this container instance.
         * 
         * @return builder
         * 
         */
        public Builder containers(ContainerInstanceContainerArgs... containers) {
            return containers(List.of(containers));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information. If you don&#39;t provide a name, a name is generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information. If you don&#39;t provide a name, a name is generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dnsConfig Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(@Nullable Output<ContainerInstanceDnsConfigArgs> dnsConfig) {
            $.dnsConfig = dnsConfig;
            return this;
        }

        /**
         * @param dnsConfig Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(ContainerInstanceDnsConfigArgs dnsConfig) {
            return dnsConfig(Output.of(dnsConfig));
        }

        /**
         * @param faultDomain The fault domain where the container instance runs.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(@Nullable Output<String> faultDomain) {
            $.faultDomain = faultDomain;
            return this;
        }

        /**
         * @param faultDomain The fault domain where the container instance runs.
         * 
         * @return builder
         * 
         */
        public Builder faultDomain(String faultDomain) {
            return faultDomain(Output.of(faultDomain));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param gracefulShutdownTimeoutInSeconds The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
         * 
         * @return builder
         * 
         */
        public Builder gracefulShutdownTimeoutInSeconds(@Nullable Output<String> gracefulShutdownTimeoutInSeconds) {
            $.gracefulShutdownTimeoutInSeconds = gracefulShutdownTimeoutInSeconds;
            return this;
        }

        /**
         * @param gracefulShutdownTimeoutInSeconds The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
         * 
         * @return builder
         * 
         */
        public Builder gracefulShutdownTimeoutInSeconds(String gracefulShutdownTimeoutInSeconds) {
            return gracefulShutdownTimeoutInSeconds(Output.of(gracefulShutdownTimeoutInSeconds));
        }

        /**
         * @param imagePullSecrets The image pulls secrets so you can access private registry to pull container images.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(@Nullable Output<List<ContainerInstanceImagePullSecretArgs>> imagePullSecrets) {
            $.imagePullSecrets = imagePullSecrets;
            return this;
        }

        /**
         * @param imagePullSecrets The image pulls secrets so you can access private registry to pull container images.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(List<ContainerInstanceImagePullSecretArgs> imagePullSecrets) {
            return imagePullSecrets(Output.of(imagePullSecrets));
        }

        /**
         * @param imagePullSecrets The image pulls secrets so you can access private registry to pull container images.
         * 
         * @return builder
         * 
         */
        public Builder imagePullSecrets(ContainerInstanceImagePullSecretArgs... imagePullSecrets) {
            return imagePullSecrets(List.of(imagePullSecrets));
        }

        /**
         * @param lifecycleDetails A message that describes the current state of the container in more detail. Can be used to provide actionable information.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails A message that describes the current state of the container in more detail. Can be used to provide actionable information.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param shape The shape of the container instance. The shape determines the resources available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape The shape of the container instance. The shape determines the resources available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param shapeConfig The size and amount of resources available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(@Nullable Output<ContainerInstanceShapeConfigArgs> shapeConfig) {
            $.shapeConfig = shapeConfig;
            return this;
        }

        /**
         * @param shapeConfig The size and amount of resources available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(ContainerInstanceShapeConfigArgs shapeConfig) {
            return shapeConfig(Output.of(shapeConfig));
        }

        /**
         * @param state (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param timeCreated The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param vnics The networks available to containers on this container instance.
         * 
         * @return builder
         * 
         */
        public Builder vnics(@Nullable Output<List<ContainerInstanceVnicArgs>> vnics) {
            $.vnics = vnics;
            return this;
        }

        /**
         * @param vnics The networks available to containers on this container instance.
         * 
         * @return builder
         * 
         */
        public Builder vnics(List<ContainerInstanceVnicArgs> vnics) {
            return vnics(Output.of(vnics));
        }

        /**
         * @param vnics The networks available to containers on this container instance.
         * 
         * @return builder
         * 
         */
        public Builder vnics(ContainerInstanceVnicArgs... vnics) {
            return vnics(List.of(vnics));
        }

        /**
         * @param volumeCount The number of volumes that are attached to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder volumeCount(@Nullable Output<Integer> volumeCount) {
            $.volumeCount = volumeCount;
            return this;
        }

        /**
         * @param volumeCount The number of volumes that are attached to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder volumeCount(Integer volumeCount) {
            return volumeCount(Output.of(volumeCount));
        }

        /**
         * @param volumes A volume is a directory with data that is accessible across multiple containers in a container instance.
         * 
         * You can attach up to 32 volumes to single container instance.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<ContainerInstanceVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes A volume is a directory with data that is accessible across multiple containers in a container instance.
         * 
         * You can attach up to 32 volumes to single container instance.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<ContainerInstanceVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes A volume is a directory with data that is accessible across multiple containers in a container instance.
         * 
         * You can attach up to 32 volumes to single container instance.
         * 
         * @return builder
         * 
         */
        public Builder volumes(ContainerInstanceVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public ContainerInstanceState build() {
            return $;
        }
    }

}
