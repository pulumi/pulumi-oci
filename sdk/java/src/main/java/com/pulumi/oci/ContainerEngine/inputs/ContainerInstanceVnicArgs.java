// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerInstanceVnicArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerInstanceVnicArgs Empty = new ContainerInstanceVnicArgs();

    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The hostname for the VNIC&#39;s primary private IP.
     * 
     */
    @Import(name="hostnameLabel")
    private @Nullable Output<String> hostnameLabel;

    /**
     * @return The hostname for the VNIC&#39;s primary private IP.
     * 
     */
    public Optional<Output<String>> hostnameLabel() {
        return Optional.ofNullable(this.hostnameLabel);
    }

    /**
     * Whether the VNIC should be assigned a public IP address.
     * 
     */
    @Import(name="isPublicIpAssigned")
    private @Nullable Output<Boolean> isPublicIpAssigned;

    /**
     * @return Whether the VNIC should be assigned a public IP address.
     * 
     */
    public Optional<Output<Boolean>> isPublicIpAssigned() {
        return Optional.ofNullable(this.isPublicIpAssigned);
    }

    /**
     * A list of the OCIDs of the network security groups (NSGs) to add the VNIC to.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return A list of the OCIDs of the network security groups (NSGs) to add the VNIC to.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * A private IP address of your choice to assign to the VNIC. Must be an available IP address within the subnet&#39;s CIDR.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return A private IP address of your choice to assign to the VNIC. Must be an available IP address within the subnet&#39;s CIDR.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * Whether the source/destination check is disabled on the VNIC.
     * 
     */
    @Import(name="skipSourceDestCheck")
    private @Nullable Output<Boolean> skipSourceDestCheck;

    /**
     * @return Whether the source/destination check is disabled on the VNIC.
     * 
     */
    public Optional<Output<Boolean>> skipSourceDestCheck() {
        return Optional.ofNullable(this.skipSourceDestCheck);
    }

    /**
     * The OCID of the subnet to create the VNIC in.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The OCID of the subnet to create the VNIC in.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * The ID of the Virtual Network Interface Card (VNIC) over which Containers accessing this network can communicate with the larger Virtual Client Network.
     * 
     */
    @Import(name="vnicId")
    private @Nullable Output<String> vnicId;

    /**
     * @return The ID of the Virtual Network Interface Card (VNIC) over which Containers accessing this network can communicate with the larger Virtual Client Network.
     * 
     */
    public Optional<Output<String>> vnicId() {
        return Optional.ofNullable(this.vnicId);
    }

    private ContainerInstanceVnicArgs() {}

    private ContainerInstanceVnicArgs(ContainerInstanceVnicArgs $) {
        this.definedTags = $.definedTags;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.hostnameLabel = $.hostnameLabel;
        this.isPublicIpAssigned = $.isPublicIpAssigned;
        this.nsgIds = $.nsgIds;
        this.privateIp = $.privateIp;
        this.skipSourceDestCheck = $.skipSourceDestCheck;
        this.subnetId = $.subnetId;
        this.vnicId = $.vnicId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceVnicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceVnicArgs $;

        public Builder() {
            $ = new ContainerInstanceVnicArgs();
        }

        public Builder(ContainerInstanceVnicArgs defaults) {
            $ = new ContainerInstanceVnicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param displayName A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param hostnameLabel The hostname for the VNIC&#39;s primary private IP.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(@Nullable Output<String> hostnameLabel) {
            $.hostnameLabel = hostnameLabel;
            return this;
        }

        /**
         * @param hostnameLabel The hostname for the VNIC&#39;s primary private IP.
         * 
         * @return builder
         * 
         */
        public Builder hostnameLabel(String hostnameLabel) {
            return hostnameLabel(Output.of(hostnameLabel));
        }

        /**
         * @param isPublicIpAssigned Whether the VNIC should be assigned a public IP address.
         * 
         * @return builder
         * 
         */
        public Builder isPublicIpAssigned(@Nullable Output<Boolean> isPublicIpAssigned) {
            $.isPublicIpAssigned = isPublicIpAssigned;
            return this;
        }

        /**
         * @param isPublicIpAssigned Whether the VNIC should be assigned a public IP address.
         * 
         * @return builder
         * 
         */
        public Builder isPublicIpAssigned(Boolean isPublicIpAssigned) {
            return isPublicIpAssigned(Output.of(isPublicIpAssigned));
        }

        /**
         * @param nsgIds A list of the OCIDs of the network security groups (NSGs) to add the VNIC to.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds A list of the OCIDs of the network security groups (NSGs) to add the VNIC to.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds A list of the OCIDs of the network security groups (NSGs) to add the VNIC to.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param privateIp A private IP address of your choice to assign to the VNIC. Must be an available IP address within the subnet&#39;s CIDR.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp A private IP address of your choice to assign to the VNIC. Must be an available IP address within the subnet&#39;s CIDR.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param skipSourceDestCheck Whether the source/destination check is disabled on the VNIC.
         * 
         * @return builder
         * 
         */
        public Builder skipSourceDestCheck(@Nullable Output<Boolean> skipSourceDestCheck) {
            $.skipSourceDestCheck = skipSourceDestCheck;
            return this;
        }

        /**
         * @param skipSourceDestCheck Whether the source/destination check is disabled on the VNIC.
         * 
         * @return builder
         * 
         */
        public Builder skipSourceDestCheck(Boolean skipSourceDestCheck) {
            return skipSourceDestCheck(Output.of(skipSourceDestCheck));
        }

        /**
         * @param subnetId The OCID of the subnet to create the VNIC in.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet to create the VNIC in.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param vnicId The ID of the Virtual Network Interface Card (VNIC) over which Containers accessing this network can communicate with the larger Virtual Client Network.
         * 
         * @return builder
         * 
         */
        public Builder vnicId(@Nullable Output<String> vnicId) {
            $.vnicId = vnicId;
            return this;
        }

        /**
         * @param vnicId The ID of the Virtual Network Interface Card (VNIC) over which Containers accessing this network can communicate with the larger Virtual Client Network.
         * 
         * @return builder
         * 
         */
        public Builder vnicId(String vnicId) {
            return vnicId(Output.of(vnicId));
        }

        public ContainerInstanceVnicArgs build() {
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            return $;
        }
    }

}
