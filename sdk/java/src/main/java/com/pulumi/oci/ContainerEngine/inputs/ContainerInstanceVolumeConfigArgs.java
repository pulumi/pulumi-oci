// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerInstanceVolumeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerInstanceVolumeConfigArgs Empty = new ContainerInstanceVolumeConfigArgs();

    /**
     * The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * The name of the file. The fileName should be unique across the volume.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return The name of the file. The fileName should be unique across the volume.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    private ContainerInstanceVolumeConfigArgs() {}

    private ContainerInstanceVolumeConfigArgs(ContainerInstanceVolumeConfigArgs $) {
        this.data = $.data;
        this.fileName = $.fileName;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceVolumeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceVolumeConfigArgs $;

        public Builder() {
            $ = new ContainerInstanceVolumeConfigArgs();
        }

        public Builder(ContainerInstanceVolumeConfigArgs defaults) {
            $ = new ContainerInstanceVolumeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param fileName The name of the file. The fileName should be unique across the volume.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName The name of the file. The fileName should be unique across the volume.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param path (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public ContainerInstanceVolumeConfigArgs build() {
            return $;
        }
    }

}
