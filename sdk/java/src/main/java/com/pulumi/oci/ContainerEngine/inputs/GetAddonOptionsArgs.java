// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.inputs.GetAddonOptionsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAddonOptionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAddonOptionsArgs Empty = new GetAddonOptionsArgs();

    /**
     * The name of the addon.
     * 
     */
    @Import(name="addonName")
    private @Nullable Output<String> addonName;

    /**
     * @return The name of the addon.
     * 
     */
    public Optional<Output<String>> addonName() {
        return Optional.ofNullable(this.addonName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetAddonOptionsFilterArgs>> filters;

    public Optional<Output<List<GetAddonOptionsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The kubernetes version to fetch the addons.
     * 
     */
    @Import(name="kubernetesVersion", required=true)
    private Output<String> kubernetesVersion;

    /**
     * @return The kubernetes version to fetch the addons.
     * 
     */
    public Output<String> kubernetesVersion() {
        return this.kubernetesVersion;
    }

    private GetAddonOptionsArgs() {}

    private GetAddonOptionsArgs(GetAddonOptionsArgs $) {
        this.addonName = $.addonName;
        this.filters = $.filters;
        this.kubernetesVersion = $.kubernetesVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAddonOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAddonOptionsArgs $;

        public Builder() {
            $ = new GetAddonOptionsArgs();
        }

        public Builder(GetAddonOptionsArgs defaults) {
            $ = new GetAddonOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addonName The name of the addon.
         * 
         * @return builder
         * 
         */
        public Builder addonName(@Nullable Output<String> addonName) {
            $.addonName = addonName;
            return this;
        }

        /**
         * @param addonName The name of the addon.
         * 
         * @return builder
         * 
         */
        public Builder addonName(String addonName) {
            return addonName(Output.of(addonName));
        }

        public Builder filters(@Nullable Output<List<GetAddonOptionsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetAddonOptionsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetAddonOptionsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param kubernetesVersion The kubernetes version to fetch the addons.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(Output<String> kubernetesVersion) {
            $.kubernetesVersion = kubernetesVersion;
            return this;
        }

        /**
         * @param kubernetesVersion The kubernetes version to fetch the addons.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(String kubernetesVersion) {
            return kubernetesVersion(Output.of(kubernetesVersion));
        }

        public GetAddonOptionsArgs build() {
            if ($.kubernetesVersion == null) {
                throw new MissingRequiredPropertyException("GetAddonOptionsArgs", "kubernetesVersion");
            }
            return $;
        }
    }

}
