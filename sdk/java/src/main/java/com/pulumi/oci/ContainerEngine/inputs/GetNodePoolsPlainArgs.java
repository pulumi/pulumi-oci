// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.inputs.GetNodePoolsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodePoolsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodePoolsPlainArgs Empty = new GetNodePoolsPlainArgs();

    /**
     * The OCID of the cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable String clusterId;

    /**
     * @return The OCID of the cluster.
     * 
     */
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable List<GetNodePoolsFilter> filters;

    public Optional<List<GetNodePoolsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The name to filter on.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name to filter on.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     * 
     */
    @Import(name="states")
    private @Nullable List<String> states;

    /**
     * @return A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     * 
     */
    public Optional<List<String>> states() {
        return Optional.ofNullable(this.states);
    }

    private GetNodePoolsPlainArgs() {}

    private GetNodePoolsPlainArgs(GetNodePoolsPlainArgs $) {
        this.clusterId = $.clusterId;
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.name = $.name;
        this.states = $.states;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodePoolsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodePoolsPlainArgs $;

        public Builder() {
            $ = new GetNodePoolsPlainArgs();
        }

        public Builder(GetNodePoolsPlainArgs defaults) {
            $ = new GetNodePoolsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The OCID of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetNodePoolsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetNodePoolsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name The name to filter on.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param states A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable List<String> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
         * 
         * @return builder
         * 
         */
        public Builder states(String... states) {
            return states(List.of(states));
        }

        public GetNodePoolsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetNodePoolsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
