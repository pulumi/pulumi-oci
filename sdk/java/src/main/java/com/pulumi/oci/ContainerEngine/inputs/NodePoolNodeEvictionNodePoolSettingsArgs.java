// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeEvictionNodePoolSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeEvictionNodePoolSettingsArgs Empty = new NodePoolNodeEvictionNodePoolSettingsArgs();

    /**
     * (Updatable) Duration after which OKE will give up eviction of the pods on the node. PT0M will indicate you want to delete the node without cordon and drain. Default PT60M, Min PT0M, Max: PT60M. Format ISO 8601 e.g PT30M
     * 
     */
    @Import(name="evictionGraceDuration")
    private @Nullable Output<String> evictionGraceDuration;

    /**
     * @return (Updatable) Duration after which OKE will give up eviction of the pods on the node. PT0M will indicate you want to delete the node without cordon and drain. Default PT60M, Min PT0M, Max: PT60M. Format ISO 8601 e.g PT30M
     * 
     */
    public Optional<Output<String>> evictionGraceDuration() {
        return Optional.ofNullable(this.evictionGraceDuration);
    }

    /**
     * (Updatable) If the node action should be performed if not all the pods can be evicted in the grace period
     * 
     */
    @Import(name="isForceActionAfterGraceDuration")
    private @Nullable Output<Boolean> isForceActionAfterGraceDuration;

    /**
     * @return (Updatable) If the node action should be performed if not all the pods can be evicted in the grace period
     * 
     */
    public Optional<Output<Boolean>> isForceActionAfterGraceDuration() {
        return Optional.ofNullable(this.isForceActionAfterGraceDuration);
    }

    /**
     * (Updatable) If the underlying compute instance should be deleted if you cannot evict all the pods in grace period
     * 
     */
    @Import(name="isForceDeleteAfterGraceDuration")
    private @Nullable Output<Boolean> isForceDeleteAfterGraceDuration;

    /**
     * @return (Updatable) If the underlying compute instance should be deleted if you cannot evict all the pods in grace period
     * 
     */
    public Optional<Output<Boolean>> isForceDeleteAfterGraceDuration() {
        return Optional.ofNullable(this.isForceDeleteAfterGraceDuration);
    }

    private NodePoolNodeEvictionNodePoolSettingsArgs() {}

    private NodePoolNodeEvictionNodePoolSettingsArgs(NodePoolNodeEvictionNodePoolSettingsArgs $) {
        this.evictionGraceDuration = $.evictionGraceDuration;
        this.isForceActionAfterGraceDuration = $.isForceActionAfterGraceDuration;
        this.isForceDeleteAfterGraceDuration = $.isForceDeleteAfterGraceDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeEvictionNodePoolSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeEvictionNodePoolSettingsArgs $;

        public Builder() {
            $ = new NodePoolNodeEvictionNodePoolSettingsArgs();
        }

        public Builder(NodePoolNodeEvictionNodePoolSettingsArgs defaults) {
            $ = new NodePoolNodeEvictionNodePoolSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param evictionGraceDuration (Updatable) Duration after which OKE will give up eviction of the pods on the node. PT0M will indicate you want to delete the node without cordon and drain. Default PT60M, Min PT0M, Max: PT60M. Format ISO 8601 e.g PT30M
         * 
         * @return builder
         * 
         */
        public Builder evictionGraceDuration(@Nullable Output<String> evictionGraceDuration) {
            $.evictionGraceDuration = evictionGraceDuration;
            return this;
        }

        /**
         * @param evictionGraceDuration (Updatable) Duration after which OKE will give up eviction of the pods on the node. PT0M will indicate you want to delete the node without cordon and drain. Default PT60M, Min PT0M, Max: PT60M. Format ISO 8601 e.g PT30M
         * 
         * @return builder
         * 
         */
        public Builder evictionGraceDuration(String evictionGraceDuration) {
            return evictionGraceDuration(Output.of(evictionGraceDuration));
        }

        /**
         * @param isForceActionAfterGraceDuration (Updatable) If the node action should be performed if not all the pods can be evicted in the grace period
         * 
         * @return builder
         * 
         */
        public Builder isForceActionAfterGraceDuration(@Nullable Output<Boolean> isForceActionAfterGraceDuration) {
            $.isForceActionAfterGraceDuration = isForceActionAfterGraceDuration;
            return this;
        }

        /**
         * @param isForceActionAfterGraceDuration (Updatable) If the node action should be performed if not all the pods can be evicted in the grace period
         * 
         * @return builder
         * 
         */
        public Builder isForceActionAfterGraceDuration(Boolean isForceActionAfterGraceDuration) {
            return isForceActionAfterGraceDuration(Output.of(isForceActionAfterGraceDuration));
        }

        /**
         * @param isForceDeleteAfterGraceDuration (Updatable) If the underlying compute instance should be deleted if you cannot evict all the pods in grace period
         * 
         * @return builder
         * 
         */
        public Builder isForceDeleteAfterGraceDuration(@Nullable Output<Boolean> isForceDeleteAfterGraceDuration) {
            $.isForceDeleteAfterGraceDuration = isForceDeleteAfterGraceDuration;
            return this;
        }

        /**
         * @param isForceDeleteAfterGraceDuration (Updatable) If the underlying compute instance should be deleted if you cannot evict all the pods in grace period
         * 
         * @return builder
         * 
         */
        public Builder isForceDeleteAfterGraceDuration(Boolean isForceDeleteAfterGraceDuration) {
            return isForceDeleteAfterGraceDuration(Output.of(isForceDeleteAfterGraceDuration));
        }

        public NodePoolNodeEvictionNodePoolSettingsArgs build() {
            return $;
        }
    }

}
