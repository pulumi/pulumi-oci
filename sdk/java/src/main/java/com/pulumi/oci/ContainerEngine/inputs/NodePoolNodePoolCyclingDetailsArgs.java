// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodePoolCyclingDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodePoolCyclingDetailsArgs Empty = new NodePoolNodePoolCyclingDetailsArgs();

    /**
     * (Updatable) If nodes in the nodepool will be cycled to have new changes.
     * 
     */
    @Import(name="isNodeCyclingEnabled")
    private @Nullable Output<Boolean> isNodeCyclingEnabled;

    /**
     * @return (Updatable) If nodes in the nodepool will be cycled to have new changes.
     * 
     */
    public Optional<Output<Boolean>> isNodeCyclingEnabled() {
        return Optional.ofNullable(this.isNodeCyclingEnabled);
    }

    /**
     * (Updatable) Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    @Import(name="maximumSurge")
    private @Nullable Output<String> maximumSurge;

    /**
     * @return (Updatable) Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    public Optional<Output<String>> maximumSurge() {
        return Optional.ofNullable(this.maximumSurge);
    }

    /**
     * (Updatable) Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    @Import(name="maximumUnavailable")
    private @Nullable Output<String> maximumUnavailable;

    /**
     * @return (Updatable) Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    public Optional<Output<String>> maximumUnavailable() {
        return Optional.ofNullable(this.maximumUnavailable);
    }

    private NodePoolNodePoolCyclingDetailsArgs() {}

    private NodePoolNodePoolCyclingDetailsArgs(NodePoolNodePoolCyclingDetailsArgs $) {
        this.isNodeCyclingEnabled = $.isNodeCyclingEnabled;
        this.maximumSurge = $.maximumSurge;
        this.maximumUnavailable = $.maximumUnavailable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodePoolCyclingDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodePoolCyclingDetailsArgs $;

        public Builder() {
            $ = new NodePoolNodePoolCyclingDetailsArgs();
        }

        public Builder(NodePoolNodePoolCyclingDetailsArgs defaults) {
            $ = new NodePoolNodePoolCyclingDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isNodeCyclingEnabled (Updatable) If nodes in the nodepool will be cycled to have new changes.
         * 
         * @return builder
         * 
         */
        public Builder isNodeCyclingEnabled(@Nullable Output<Boolean> isNodeCyclingEnabled) {
            $.isNodeCyclingEnabled = isNodeCyclingEnabled;
            return this;
        }

        /**
         * @param isNodeCyclingEnabled (Updatable) If nodes in the nodepool will be cycled to have new changes.
         * 
         * @return builder
         * 
         */
        public Builder isNodeCyclingEnabled(Boolean isNodeCyclingEnabled) {
            return isNodeCyclingEnabled(Output.of(isNodeCyclingEnabled));
        }

        /**
         * @param maximumSurge (Updatable) Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
         * 
         * @return builder
         * 
         */
        public Builder maximumSurge(@Nullable Output<String> maximumSurge) {
            $.maximumSurge = maximumSurge;
            return this;
        }

        /**
         * @param maximumSurge (Updatable) Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
         * 
         * @return builder
         * 
         */
        public Builder maximumSurge(String maximumSurge) {
            return maximumSurge(Output.of(maximumSurge));
        }

        /**
         * @param maximumUnavailable (Updatable) Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
         * 
         * @return builder
         * 
         */
        public Builder maximumUnavailable(@Nullable Output<String> maximumUnavailable) {
            $.maximumUnavailable = maximumUnavailable;
            return this;
        }

        /**
         * @param maximumUnavailable (Updatable) Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
         * 
         * @return builder
         * 
         */
        public Builder maximumUnavailable(String maximumUnavailable) {
            return maximumUnavailable(Output.of(maximumUnavailable));
        }

        public NodePoolNodePoolCyclingDetailsArgs build() {
            return $;
        }
    }

}
