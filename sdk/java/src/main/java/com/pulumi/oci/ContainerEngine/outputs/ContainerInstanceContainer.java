// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerHealthCheck;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerResourceConfig;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerSecurityContext;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerVolumeMount;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerInstanceContainer {
    /**
     * @return A list of string arguments for a container&#39;s ENTRYPOINT process.
     * 
     * Many containers use an ENTRYPOINT process pointing to a shell (/bin/bash). For those containers, this argument list specifies the main command in the container process.
     * 
     * The total size of all arguments combined must be 64 KB or smaller.
     * 
     */
    private @Nullable List<String> arguments;
    /**
     * @return The availability domain where the container instance runs.
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return An optional command that overrides the ENTRYPOINT process. If you do not provide a value, the existing ENTRYPOINT process defined in the image is used.
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return (Updatable) The compartment OCID.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The OCID of the container.
     * 
     */
    private @Nullable String containerId;
    private @Nullable String containerInstanceId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information. If you don&#39;t provide a name, a name is generated automatically.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return A map of additional environment variables to set in the environment of the container&#39;s ENTRYPOINT process. These variables are in addition to any variables already defined in the container&#39;s image.
     * 
     * The total size of all environment variables combined, name and values, must be 64 KB or smaller.
     * 
     */
    private @Nullable Map<String,Object> environmentVariables;
    private @Nullable Integer exitCode;
    /**
     * @return The fault domain where the container instance runs.
     * 
     */
    private @Nullable String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return list of container health checks to check container status and take appropriate action if container status is failed. There are three types of health checks that we currently support HTTP, TCP, and Command.
     * 
     */
    private @Nullable List<ContainerInstanceContainerHealthCheck> healthChecks;
    /**
     * @return A URL identifying the image that the container runs in, such as docker.io/library/busybox:latest. If you do not provide a tag, the tag will default to latest.
     * 
     * If no registry is provided, will default the registry to public docker hub `docker.io/library`.
     * 
     * The registry used for container image must be reachable over the Container Instance&#39;s VNIC.
     * 
     */
    private String imageUrl;
    /**
     * @return Determines if the container will have access to the container instance resource principal.
     * 
     * This method utilizes resource principal version 2.2. For information on how to use the exposed resource principal elements, see https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
     * 
     */
    private @Nullable Boolean isResourcePrincipalDisabled;
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The size and amount of resources available to the container.
     * 
     */
    private @Nullable ContainerInstanceContainerResourceConfig resourceConfig;
    /**
     * @return Security context for container.
     * 
     */
    private @Nullable ContainerInstanceContainerSecurityContext securityContext;
    /**
     * @return (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private @Nullable String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    private @Nullable Map<String,Object> systemTags;
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    private @Nullable String timeTerminated;
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return List of the volume mounts.
     * 
     */
    private @Nullable List<ContainerInstanceContainerVolumeMount> volumeMounts;
    /**
     * @return The working directory within the container&#39;s filesystem for the container process. If not specified, the default working directory from the image is used.
     * 
     */
    private @Nullable String workingDirectory;

    private ContainerInstanceContainer() {}
    /**
     * @return A list of string arguments for a container&#39;s ENTRYPOINT process.
     * 
     * Many containers use an ENTRYPOINT process pointing to a shell (/bin/bash). For those containers, this argument list specifies the main command in the container process.
     * 
     * The total size of all arguments combined must be 64 KB or smaller.
     * 
     */
    public List<String> arguments() {
        return this.arguments == null ? List.of() : this.arguments;
    }
    /**
     * @return The availability domain where the container instance runs.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return An optional command that overrides the ENTRYPOINT process. If you do not provide a value, the existing ENTRYPOINT process defined in the image is used.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return (Updatable) The compartment OCID.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The OCID of the container.
     * 
     */
    public Optional<String> containerId() {
        return Optional.ofNullable(this.containerId);
    }
    public Optional<String> containerInstanceId() {
        return Optional.ofNullable(this.containerInstanceId);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information. If you don&#39;t provide a name, a name is generated automatically.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return A map of additional environment variables to set in the environment of the container&#39;s ENTRYPOINT process. These variables are in addition to any variables already defined in the container&#39;s image.
     * 
     * The total size of all environment variables combined, name and values, must be 64 KB or smaller.
     * 
     */
    public Map<String,Object> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }
    public Optional<Integer> exitCode() {
        return Optional.ofNullable(this.exitCode);
    }
    /**
     * @return The fault domain where the container instance runs.
     * 
     */
    public Optional<String> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return list of container health checks to check container status and take appropriate action if container status is failed. There are three types of health checks that we currently support HTTP, TCP, and Command.
     * 
     */
    public List<ContainerInstanceContainerHealthCheck> healthChecks() {
        return this.healthChecks == null ? List.of() : this.healthChecks;
    }
    /**
     * @return A URL identifying the image that the container runs in, such as docker.io/library/busybox:latest. If you do not provide a tag, the tag will default to latest.
     * 
     * If no registry is provided, will default the registry to public docker hub `docker.io/library`.
     * 
     * The registry used for container image must be reachable over the Container Instance&#39;s VNIC.
     * 
     */
    public String imageUrl() {
        return this.imageUrl;
    }
    /**
     * @return Determines if the container will have access to the container instance resource principal.
     * 
     * This method utilizes resource principal version 2.2. For information on how to use the exposed resource principal elements, see https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
     * 
     */
    public Optional<Boolean> isResourcePrincipalDisabled() {
        return Optional.ofNullable(this.isResourcePrincipalDisabled);
    }
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The size and amount of resources available to the container.
     * 
     */
    public Optional<ContainerInstanceContainerResourceConfig> resourceConfig() {
        return Optional.ofNullable(this.resourceConfig);
    }
    /**
     * @return Security context for container.
     * 
     */
    public Optional<ContainerInstanceContainerSecurityContext> securityContext() {
        return Optional.ofNullable(this.securityContext);
    }
    /**
     * @return (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags == null ? Map.of() : this.systemTags;
    }
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    public Optional<String> timeTerminated() {
        return Optional.ofNullable(this.timeTerminated);
    }
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return List of the volume mounts.
     * 
     */
    public List<ContainerInstanceContainerVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    /**
     * @return The working directory within the container&#39;s filesystem for the container process. If not specified, the default working directory from the image is used.
     * 
     */
    public Optional<String> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> arguments;
        private @Nullable String availabilityDomain;
        private @Nullable List<String> commands;
        private @Nullable String compartmentId;
        private @Nullable String containerId;
        private @Nullable String containerInstanceId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> environmentVariables;
        private @Nullable Integer exitCode;
        private @Nullable String faultDomain;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable List<ContainerInstanceContainerHealthCheck> healthChecks;
        private String imageUrl;
        private @Nullable Boolean isResourcePrincipalDisabled;
        private @Nullable String lifecycleDetails;
        private @Nullable ContainerInstanceContainerResourceConfig resourceConfig;
        private @Nullable ContainerInstanceContainerSecurityContext securityContext;
        private @Nullable String state;
        private @Nullable Map<String,Object> systemTags;
        private @Nullable String timeCreated;
        private @Nullable String timeTerminated;
        private @Nullable String timeUpdated;
        private @Nullable List<ContainerInstanceContainerVolumeMount> volumeMounts;
        private @Nullable String workingDirectory;
        public Builder() {}
        public Builder(ContainerInstanceContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.commands = defaults.commands;
    	      this.compartmentId = defaults.compartmentId;
    	      this.containerId = defaults.containerId;
    	      this.containerInstanceId = defaults.containerInstanceId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.exitCode = defaults.exitCode;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.healthChecks = defaults.healthChecks;
    	      this.imageUrl = defaults.imageUrl;
    	      this.isResourcePrincipalDisabled = defaults.isResourcePrincipalDisabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.resourceConfig = defaults.resourceConfig;
    	      this.securityContext = defaults.securityContext;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeTerminated = defaults.timeTerminated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        @CustomType.Setter
        public Builder arguments(@Nullable List<String> arguments) {

            this.arguments = arguments;
            return this;
        }
        public Builder arguments(String... arguments) {
            return arguments(List.of(arguments));
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {

            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(@Nullable String containerId) {

            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder containerInstanceId(@Nullable String containerInstanceId) {

            this.containerInstanceId = containerInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {

            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(@Nullable Map<String,Object> environmentVariables) {

            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder exitCode(@Nullable Integer exitCode) {

            this.exitCode = exitCode;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(@Nullable String faultDomain) {

            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {

            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder healthChecks(@Nullable List<ContainerInstanceContainerHealthCheck> healthChecks) {

            this.healthChecks = healthChecks;
            return this;
        }
        public Builder healthChecks(ContainerInstanceContainerHealthCheck... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        @CustomType.Setter
        public Builder imageUrl(String imageUrl) {
            if (imageUrl == null) {
              throw new MissingRequiredPropertyException("ContainerInstanceContainer", "imageUrl");
            }
            this.imageUrl = imageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder isResourcePrincipalDisabled(@Nullable Boolean isResourcePrincipalDisabled) {

            this.isResourcePrincipalDisabled = isResourcePrincipalDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {

            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder resourceConfig(@Nullable ContainerInstanceContainerResourceConfig resourceConfig) {

            this.resourceConfig = resourceConfig;
            return this;
        }
        @CustomType.Setter
        public Builder securityContext(@Nullable ContainerInstanceContainerSecurityContext securityContext) {

            this.securityContext = securityContext;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(@Nullable Map<String,Object> systemTags) {

            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {

            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeTerminated(@Nullable String timeTerminated) {

            this.timeTerminated = timeTerminated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {

            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<ContainerInstanceContainerVolumeMount> volumeMounts) {

            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(ContainerInstanceContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDirectory(@Nullable String workingDirectory) {

            this.workingDirectory = workingDirectory;
            return this;
        }
        public ContainerInstanceContainer build() {
            final var _resultValue = new ContainerInstanceContainer();
            _resultValue.arguments = arguments;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.commands = commands;
            _resultValue.compartmentId = compartmentId;
            _resultValue.containerId = containerId;
            _resultValue.containerInstanceId = containerInstanceId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.exitCode = exitCode;
            _resultValue.faultDomain = faultDomain;
            _resultValue.freeformTags = freeformTags;
            _resultValue.healthChecks = healthChecks;
            _resultValue.imageUrl = imageUrl;
            _resultValue.isResourcePrincipalDisabled = isResourcePrincipalDisabled;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.resourceConfig = resourceConfig;
            _resultValue.securityContext = securityContext;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeTerminated = timeTerminated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.volumeMounts = volumeMounts;
            _resultValue.workingDirectory = workingDirectory;
            return _resultValue;
        }
    }
}
