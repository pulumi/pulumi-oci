// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerHealthCheck;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerResourceConfig;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerVolumeMount;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerInstanceContainer {
    /**
     * @return A list of additional capabilities for the container.
     * 
     */
    private @Nullable List<String> additionalCapabilities;
    /**
     * @return A list of string arguments for a container&#39;s entrypoint process.
     * 
     */
    private @Nullable List<String> arguments;
    /**
     * @return Availability Domain where the ContainerInstance should be created.
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return The list of strings which will be concatenated to a single command for checking container&#39;s status.
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return (Updatable) Compartment Identifier
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The ID of the Container on this Instance.
     * 
     */
    private @Nullable String containerId;
    private @Nullable String containerInstanceId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return A map of additional environment variables to set in the environment of the container&#39;s entrypoint process. These variables are in addition to any variables already defined in the container&#39;s image.
     * 
     */
    private @Nullable Map<String,Object> environmentVariables;
    private @Nullable Integer exitCode;
    /**
     * @return Fault Domain where the ContainerInstance should run.
     * 
     */
    private @Nullable String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return list of container health checks to check container status and take appropriate action if container status is failed. There are three types of health checks that we currently support HTTP, TCP, and Command.
     * 
     */
    private @Nullable List<ContainerInstanceContainerHealthCheck> healthChecks;
    /**
     * @return The container image information. Currently only support public docker registry. Can be either image name, e.g `containerImage`, image name with version, e.g `containerImage:v1` or complete docker image Url e.g `docker.io/library/containerImage:latest`. If no registry is provided, will default the registry to public docker hub `docker.io/library`. The registry used for container image must be reachable over the Container Instance&#39;s VNIC.
     * 
     */
    private String imageUrl;
    /**
     * @return Determines if the Container will have access to the Container Instance Resource Principal.  This method utilizes resource principal version 2.2. Please refer to  https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal  for detailed explanation of how to leverage the exposed resource principal elements.
     * 
     */
    private @Nullable Boolean isResourcePrincipalDisabled;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The size and amount of resources available to the Container.
     * 
     */
    private @Nullable ContainerInstanceContainerResourceConfig resourceConfig;
    /**
     * @return (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    private @Nullable String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private @Nullable Map<String,Object> systemTags;
    /**
     * @return The time the the ContainerInstance was created. An RFC3339 formatted datetime string
     * 
     */
    private @Nullable String timeCreated;
    private @Nullable String timeTerminated;
    /**
     * @return The time the ContainerInstance was updated. An RFC3339 formatted datetime string
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return List of the volume mounts.
     * 
     */
    private @Nullable List<ContainerInstanceContainerVolumeMount> volumeMounts;
    /**
     * @return The working directory within the Container&#39;s filesystem for the Container process. If none is set, the Container will run in the working directory set by the container image.
     * 
     */
    private @Nullable String workingDirectory;

    private ContainerInstanceContainer() {}
    /**
     * @return A list of additional capabilities for the container.
     * 
     */
    public List<String> additionalCapabilities() {
        return this.additionalCapabilities == null ? List.of() : this.additionalCapabilities;
    }
    /**
     * @return A list of string arguments for a container&#39;s entrypoint process.
     * 
     */
    public List<String> arguments() {
        return this.arguments == null ? List.of() : this.arguments;
    }
    /**
     * @return Availability Domain where the ContainerInstance should be created.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The list of strings which will be concatenated to a single command for checking container&#39;s status.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return (Updatable) Compartment Identifier
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The ID of the Container on this Instance.
     * 
     */
    public Optional<String> containerId() {
        return Optional.ofNullable(this.containerId);
    }
    public Optional<String> containerInstanceId() {
        return Optional.ofNullable(this.containerInstanceId);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return A map of additional environment variables to set in the environment of the container&#39;s entrypoint process. These variables are in addition to any variables already defined in the container&#39;s image.
     * 
     */
    public Map<String,Object> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }
    public Optional<Integer> exitCode() {
        return Optional.ofNullable(this.exitCode);
    }
    /**
     * @return Fault Domain where the ContainerInstance should run.
     * 
     */
    public Optional<String> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return list of container health checks to check container status and take appropriate action if container status is failed. There are three types of health checks that we currently support HTTP, TCP, and Command.
     * 
     */
    public List<ContainerInstanceContainerHealthCheck> healthChecks() {
        return this.healthChecks == null ? List.of() : this.healthChecks;
    }
    /**
     * @return The container image information. Currently only support public docker registry. Can be either image name, e.g `containerImage`, image name with version, e.g `containerImage:v1` or complete docker image Url e.g `docker.io/library/containerImage:latest`. If no registry is provided, will default the registry to public docker hub `docker.io/library`. The registry used for container image must be reachable over the Container Instance&#39;s VNIC.
     * 
     */
    public String imageUrl() {
        return this.imageUrl;
    }
    /**
     * @return Determines if the Container will have access to the Container Instance Resource Principal.  This method utilizes resource principal version 2.2. Please refer to  https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal  for detailed explanation of how to leverage the exposed resource principal elements.
     * 
     */
    public Optional<Boolean> isResourcePrincipalDisabled() {
        return Optional.ofNullable(this.isResourcePrincipalDisabled);
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The size and amount of resources available to the Container.
     * 
     */
    public Optional<ContainerInstanceContainerResourceConfig> resourceConfig() {
        return Optional.ofNullable(this.resourceConfig);
    }
    /**
     * @return (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags == null ? Map.of() : this.systemTags;
    }
    /**
     * @return The time the the ContainerInstance was created. An RFC3339 formatted datetime string
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    public Optional<String> timeTerminated() {
        return Optional.ofNullable(this.timeTerminated);
    }
    /**
     * @return The time the ContainerInstance was updated. An RFC3339 formatted datetime string
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return List of the volume mounts.
     * 
     */
    public List<ContainerInstanceContainerVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    /**
     * @return The working directory within the Container&#39;s filesystem for the Container process. If none is set, the Container will run in the working directory set by the container image.
     * 
     */
    public Optional<String> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> additionalCapabilities;
        private @Nullable List<String> arguments;
        private @Nullable String availabilityDomain;
        private @Nullable List<String> commands;
        private @Nullable String compartmentId;
        private @Nullable String containerId;
        private @Nullable String containerInstanceId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> environmentVariables;
        private @Nullable Integer exitCode;
        private @Nullable String faultDomain;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable List<ContainerInstanceContainerHealthCheck> healthChecks;
        private String imageUrl;
        private @Nullable Boolean isResourcePrincipalDisabled;
        private @Nullable String lifecycleDetails;
        private @Nullable ContainerInstanceContainerResourceConfig resourceConfig;
        private @Nullable String state;
        private @Nullable Map<String,Object> systemTags;
        private @Nullable String timeCreated;
        private @Nullable String timeTerminated;
        private @Nullable String timeUpdated;
        private @Nullable List<ContainerInstanceContainerVolumeMount> volumeMounts;
        private @Nullable String workingDirectory;
        public Builder() {}
        public Builder(ContainerInstanceContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalCapabilities = defaults.additionalCapabilities;
    	      this.arguments = defaults.arguments;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.commands = defaults.commands;
    	      this.compartmentId = defaults.compartmentId;
    	      this.containerId = defaults.containerId;
    	      this.containerInstanceId = defaults.containerInstanceId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.exitCode = defaults.exitCode;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.healthChecks = defaults.healthChecks;
    	      this.imageUrl = defaults.imageUrl;
    	      this.isResourcePrincipalDisabled = defaults.isResourcePrincipalDisabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.resourceConfig = defaults.resourceConfig;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeTerminated = defaults.timeTerminated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        @CustomType.Setter
        public Builder additionalCapabilities(@Nullable List<String> additionalCapabilities) {
            this.additionalCapabilities = additionalCapabilities;
            return this;
        }
        public Builder additionalCapabilities(String... additionalCapabilities) {
            return additionalCapabilities(List.of(additionalCapabilities));
        }
        @CustomType.Setter
        public Builder arguments(@Nullable List<String> arguments) {
            this.arguments = arguments;
            return this;
        }
        public Builder arguments(String... arguments) {
            return arguments(List.of(arguments));
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(@Nullable String containerId) {
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder containerInstanceId(@Nullable String containerInstanceId) {
            this.containerInstanceId = containerInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(@Nullable Map<String,Object> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder exitCode(@Nullable Integer exitCode) {
            this.exitCode = exitCode;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(@Nullable String faultDomain) {
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder healthChecks(@Nullable List<ContainerInstanceContainerHealthCheck> healthChecks) {
            this.healthChecks = healthChecks;
            return this;
        }
        public Builder healthChecks(ContainerInstanceContainerHealthCheck... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        @CustomType.Setter
        public Builder imageUrl(String imageUrl) {
            this.imageUrl = Objects.requireNonNull(imageUrl);
            return this;
        }
        @CustomType.Setter
        public Builder isResourcePrincipalDisabled(@Nullable Boolean isResourcePrincipalDisabled) {
            this.isResourcePrincipalDisabled = isResourcePrincipalDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder resourceConfig(@Nullable ContainerInstanceContainerResourceConfig resourceConfig) {
            this.resourceConfig = resourceConfig;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(@Nullable Map<String,Object> systemTags) {
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeTerminated(@Nullable String timeTerminated) {
            this.timeTerminated = timeTerminated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<ContainerInstanceContainerVolumeMount> volumeMounts) {
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(ContainerInstanceContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDirectory(@Nullable String workingDirectory) {
            this.workingDirectory = workingDirectory;
            return this;
        }
        public ContainerInstanceContainer build() {
            final var o = new ContainerInstanceContainer();
            o.additionalCapabilities = additionalCapabilities;
            o.arguments = arguments;
            o.availabilityDomain = availabilityDomain;
            o.commands = commands;
            o.compartmentId = compartmentId;
            o.containerId = containerId;
            o.containerInstanceId = containerInstanceId;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.environmentVariables = environmentVariables;
            o.exitCode = exitCode;
            o.faultDomain = faultDomain;
            o.freeformTags = freeformTags;
            o.healthChecks = healthChecks;
            o.imageUrl = imageUrl;
            o.isResourcePrincipalDisabled = isResourcePrincipalDisabled;
            o.lifecycleDetails = lifecycleDetails;
            o.resourceConfig = resourceConfig;
            o.state = state;
            o.systemTags = systemTags;
            o.timeCreated = timeCreated;
            o.timeTerminated = timeTerminated;
            o.timeUpdated = timeUpdated;
            o.volumeMounts = volumeMounts;
            o.workingDirectory = workingDirectory;
            return o;
        }
    }
}
