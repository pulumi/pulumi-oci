// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceContainerHealthCheckHeader;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerInstanceContainerHealthCheck {
    /**
     * @return The action will be triggered when the container health check fails. There are two types of action: KILL or NONE. The default action is KILL. If failure action is KILL, the container will be subject to the container restart policy.
     * 
     */
    private @Nullable String failureAction;
    /**
     * @return Number of consecutive failures at which we consider the check failed.
     * 
     */
    private @Nullable Integer failureThreshold;
    /**
     * @return Container health check HTTP headers.
     * 
     */
    private @Nullable List<ContainerInstanceContainerHealthCheckHeader> headers;
    /**
     * @return Container health check type.
     * 
     */
    private String healthCheckType;
    /**
     * @return The initial delay in seconds before start checking container health status.
     * 
     */
    private @Nullable Integer initialDelayInSeconds;
    /**
     * @return Number of seconds between two consecutive runs for checking container health.
     * 
     */
    private @Nullable Integer intervalInSeconds;
    /**
     * @return Health check name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Container health check HTTP path.
     * 
     */
    private @Nullable String path;
    /**
     * @return Container health check HTTP port.
     * 
     */
    private @Nullable Integer port;
    private @Nullable String status;
    private @Nullable String statusDetails;
    /**
     * @return Number of consecutive successes at which we consider the check succeeded again after it was in failure state.
     * 
     */
    private @Nullable Integer successThreshold;
    /**
     * @return Length of waiting time in seconds before marking health check failed.
     * 
     */
    private @Nullable Integer timeoutInSeconds;

    private ContainerInstanceContainerHealthCheck() {}
    /**
     * @return The action will be triggered when the container health check fails. There are two types of action: KILL or NONE. The default action is KILL. If failure action is KILL, the container will be subject to the container restart policy.
     * 
     */
    public Optional<String> failureAction() {
        return Optional.ofNullable(this.failureAction);
    }
    /**
     * @return Number of consecutive failures at which we consider the check failed.
     * 
     */
    public Optional<Integer> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }
    /**
     * @return Container health check HTTP headers.
     * 
     */
    public List<ContainerInstanceContainerHealthCheckHeader> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return Container health check type.
     * 
     */
    public String healthCheckType() {
        return this.healthCheckType;
    }
    /**
     * @return The initial delay in seconds before start checking container health status.
     * 
     */
    public Optional<Integer> initialDelayInSeconds() {
        return Optional.ofNullable(this.initialDelayInSeconds);
    }
    /**
     * @return Number of seconds between two consecutive runs for checking container health.
     * 
     */
    public Optional<Integer> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }
    /**
     * @return Health check name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Container health check HTTP path.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Container health check HTTP port.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public Optional<String> statusDetails() {
        return Optional.ofNullable(this.statusDetails);
    }
    /**
     * @return Number of consecutive successes at which we consider the check succeeded again after it was in failure state.
     * 
     */
    public Optional<Integer> successThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }
    /**
     * @return Length of waiting time in seconds before marking health check failed.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceContainerHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String failureAction;
        private @Nullable Integer failureThreshold;
        private @Nullable List<ContainerInstanceContainerHealthCheckHeader> headers;
        private String healthCheckType;
        private @Nullable Integer initialDelayInSeconds;
        private @Nullable Integer intervalInSeconds;
        private @Nullable String name;
        private @Nullable String path;
        private @Nullable Integer port;
        private @Nullable String status;
        private @Nullable String statusDetails;
        private @Nullable Integer successThreshold;
        private @Nullable Integer timeoutInSeconds;
        public Builder() {}
        public Builder(ContainerInstanceContainerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureAction = defaults.failureAction;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.headers = defaults.headers;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.initialDelayInSeconds = defaults.initialDelayInSeconds;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.status = defaults.status;
    	      this.statusDetails = defaults.statusDetails;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
        }

        @CustomType.Setter
        public Builder failureAction(@Nullable String failureAction) {

            this.failureAction = failureAction;
            return this;
        }
        @CustomType.Setter
        public Builder failureThreshold(@Nullable Integer failureThreshold) {

            this.failureThreshold = failureThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable List<ContainerInstanceContainerHealthCheckHeader> headers) {

            this.headers = headers;
            return this;
        }
        public Builder headers(ContainerInstanceContainerHealthCheckHeader... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder healthCheckType(String healthCheckType) {
            if (healthCheckType == null) {
              throw new MissingRequiredPropertyException("ContainerInstanceContainerHealthCheck", "healthCheckType");
            }
            this.healthCheckType = healthCheckType;
            return this;
        }
        @CustomType.Setter
        public Builder initialDelayInSeconds(@Nullable Integer initialDelayInSeconds) {

            this.initialDelayInSeconds = initialDelayInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder intervalInSeconds(@Nullable Integer intervalInSeconds) {

            this.intervalInSeconds = intervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusDetails(@Nullable String statusDetails) {

            this.statusDetails = statusDetails;
            return this;
        }
        @CustomType.Setter
        public Builder successThreshold(@Nullable Integer successThreshold) {

            this.successThreshold = successThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {

            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        public ContainerInstanceContainerHealthCheck build() {
            final var _resultValue = new ContainerInstanceContainerHealthCheck();
            _resultValue.failureAction = failureAction;
            _resultValue.failureThreshold = failureThreshold;
            _resultValue.headers = headers;
            _resultValue.healthCheckType = healthCheckType;
            _resultValue.initialDelayInSeconds = initialDelayInSeconds;
            _resultValue.intervalInSeconds = intervalInSeconds;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.status = status;
            _resultValue.statusDetails = statusDetails;
            _resultValue.successThreshold = successThreshold;
            _resultValue.timeoutInSeconds = timeoutInSeconds;
            return _resultValue;
        }
    }
}
