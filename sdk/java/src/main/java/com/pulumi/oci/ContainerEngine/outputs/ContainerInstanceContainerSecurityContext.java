// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerInstanceContainerSecurityContext {
    /**
     * @return Indicates if the container must run as a non-root user. If true, the service validates the container image at runtime to ensure that it is not going to run with UID 0 (root) and fails the container instance creation if the validation fails.
     * 
     */
    private @Nullable Boolean isNonRootUserCheckEnabled;
    /**
     * @return Determines if the container will have a read-only root file system. Default value is false.
     * 
     */
    private @Nullable Boolean isRootFileSystemReadonly;
    /**
     * @return The group ID (GID) to run the entrypoint process of the container. Uses runtime default if not provided.
     * 
     */
    private @Nullable Integer runAsGroup;
    /**
     * @return The user ID (UID) to run the entrypoint process of the container. Defaults to user specified UID in container image metadata if not provided. This must be provided if runAsGroup is provided.
     * 
     */
    private @Nullable Integer runAsUser;
    /**
     * @return The type of security context
     * 
     */
    private @Nullable String securityContextType;

    private ContainerInstanceContainerSecurityContext() {}
    /**
     * @return Indicates if the container must run as a non-root user. If true, the service validates the container image at runtime to ensure that it is not going to run with UID 0 (root) and fails the container instance creation if the validation fails.
     * 
     */
    public Optional<Boolean> isNonRootUserCheckEnabled() {
        return Optional.ofNullable(this.isNonRootUserCheckEnabled);
    }
    /**
     * @return Determines if the container will have a read-only root file system. Default value is false.
     * 
     */
    public Optional<Boolean> isRootFileSystemReadonly() {
        return Optional.ofNullable(this.isRootFileSystemReadonly);
    }
    /**
     * @return The group ID (GID) to run the entrypoint process of the container. Uses runtime default if not provided.
     * 
     */
    public Optional<Integer> runAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }
    /**
     * @return The user ID (UID) to run the entrypoint process of the container. Defaults to user specified UID in container image metadata if not provided. This must be provided if runAsGroup is provided.
     * 
     */
    public Optional<Integer> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }
    /**
     * @return The type of security context
     * 
     */
    public Optional<String> securityContextType() {
        return Optional.ofNullable(this.securityContextType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceContainerSecurityContext defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isNonRootUserCheckEnabled;
        private @Nullable Boolean isRootFileSystemReadonly;
        private @Nullable Integer runAsGroup;
        private @Nullable Integer runAsUser;
        private @Nullable String securityContextType;
        public Builder() {}
        public Builder(ContainerInstanceContainerSecurityContext defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isNonRootUserCheckEnabled = defaults.isNonRootUserCheckEnabled;
    	      this.isRootFileSystemReadonly = defaults.isRootFileSystemReadonly;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.securityContextType = defaults.securityContextType;
        }

        @CustomType.Setter
        public Builder isNonRootUserCheckEnabled(@Nullable Boolean isNonRootUserCheckEnabled) {
            this.isNonRootUserCheckEnabled = isNonRootUserCheckEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRootFileSystemReadonly(@Nullable Boolean isRootFileSystemReadonly) {
            this.isRootFileSystemReadonly = isRootFileSystemReadonly;
            return this;
        }
        @CustomType.Setter
        public Builder runAsGroup(@Nullable Integer runAsGroup) {
            this.runAsGroup = runAsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(@Nullable Integer runAsUser) {
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder securityContextType(@Nullable String securityContextType) {
            this.securityContextType = securityContextType;
            return this;
        }
        public ContainerInstanceContainerSecurityContext build() {
            final var o = new ContainerInstanceContainerSecurityContext();
            o.isNonRootUserCheckEnabled = isNonRootUserCheckEnabled;
            o.isRootFileSystemReadonly = isRootFileSystemReadonly;
            o.runAsGroup = runAsGroup;
            o.runAsUser = runAsUser;
            o.securityContextType = securityContextType;
            return o;
        }
    }
}
