// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerInstanceContainerVolumeMount {
    /**
     * @return Whether the volume was mounted in read-only mode. Defaults to false if not specified.
     * 
     */
    private @Nullable Boolean isReadOnly;
    /**
     * @return mountPath describes the volume access path.
     * 
     */
    private String mountPath;
    /**
     * @return If there is more than 1 partitions in the volume, this is the number of partition which be referenced. Here is a example: Number  Start   End     Size    File system  Name                  Flags 1      1049kB  106MB   105MB   fat16        EFI System Partition  boot, esp 2      106MB   1180MB  1074MB  xfs 3      1180MB  50.0GB  48.8GB                                     lvm
     * 
     */
    private @Nullable Integer partition;
    /**
     * @return specifies a sub-path inside the referenced volume instead of its root
     * 
     */
    private @Nullable String subPath;
    /**
     * @return The name of the volume.
     * 
     */
    private String volumeName;

    private ContainerInstanceContainerVolumeMount() {}
    /**
     * @return Whether the volume was mounted in read-only mode. Defaults to false if not specified.
     * 
     */
    public Optional<Boolean> isReadOnly() {
        return Optional.ofNullable(this.isReadOnly);
    }
    /**
     * @return mountPath describes the volume access path.
     * 
     */
    public String mountPath() {
        return this.mountPath;
    }
    /**
     * @return If there is more than 1 partitions in the volume, this is the number of partition which be referenced. Here is a example: Number  Start   End     Size    File system  Name                  Flags 1      1049kB  106MB   105MB   fat16        EFI System Partition  boot, esp 2      106MB   1180MB  1074MB  xfs 3      1180MB  50.0GB  48.8GB                                     lvm
     * 
     */
    public Optional<Integer> partition() {
        return Optional.ofNullable(this.partition);
    }
    /**
     * @return specifies a sub-path inside the referenced volume instead of its root
     * 
     */
    public Optional<String> subPath() {
        return Optional.ofNullable(this.subPath);
    }
    /**
     * @return The name of the volume.
     * 
     */
    public String volumeName() {
        return this.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceContainerVolumeMount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isReadOnly;
        private String mountPath;
        private @Nullable Integer partition;
        private @Nullable String subPath;
        private String volumeName;
        public Builder() {}
        public Builder(ContainerInstanceContainerVolumeMount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isReadOnly = defaults.isReadOnly;
    	      this.mountPath = defaults.mountPath;
    	      this.partition = defaults.partition;
    	      this.subPath = defaults.subPath;
    	      this.volumeName = defaults.volumeName;
        }

        @CustomType.Setter
        public Builder isReadOnly(@Nullable Boolean isReadOnly) {
            this.isReadOnly = isReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder mountPath(String mountPath) {
            this.mountPath = Objects.requireNonNull(mountPath);
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable Integer partition) {
            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder subPath(@Nullable String subPath) {
            this.subPath = subPath;
            return this;
        }
        @CustomType.Setter
        public Builder volumeName(String volumeName) {
            this.volumeName = Objects.requireNonNull(volumeName);
            return this;
        }
        public ContainerInstanceContainerVolumeMount build() {
            final var o = new ContainerInstanceContainerVolumeMount();
            o.isReadOnly = isReadOnly;
            o.mountPath = mountPath;
            o.partition = partition;
            o.subPath = subPath;
            o.volumeName = volumeName;
            return o;
        }
    }
}
