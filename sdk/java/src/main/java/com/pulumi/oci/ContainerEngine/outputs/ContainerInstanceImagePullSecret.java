// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerInstanceImagePullSecret {
    /**
     * @return The password which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    private @Nullable String password;
    /**
     * @return The registry endpoint of the container image.
     * 
     */
    private String registryEndpoint;
    /**
     * @return The OCID of the secret for registry credentials.
     * 
     */
    private @Nullable String secretId;
    /**
     * @return The type of ImagePullSecret.
     * 
     */
    private String secretType;
    /**
     * @return The username which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    private @Nullable String username;

    private ContainerInstanceImagePullSecret() {}
    /**
     * @return The password which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The registry endpoint of the container image.
     * 
     */
    public String registryEndpoint() {
        return this.registryEndpoint;
    }
    /**
     * @return The OCID of the secret for registry credentials.
     * 
     */
    public Optional<String> secretId() {
        return Optional.ofNullable(this.secretId);
    }
    /**
     * @return The type of ImagePullSecret.
     * 
     */
    public String secretType() {
        return this.secretType;
    }
    /**
     * @return The username which should be used with the registry for authentication. The value is expected in base64 format.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceImagePullSecret defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String password;
        private String registryEndpoint;
        private @Nullable String secretId;
        private String secretType;
        private @Nullable String username;
        public Builder() {}
        public Builder(ContainerInstanceImagePullSecret defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.registryEndpoint = defaults.registryEndpoint;
    	      this.secretId = defaults.secretId;
    	      this.secretType = defaults.secretType;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder registryEndpoint(String registryEndpoint) {
            if (registryEndpoint == null) {
              throw new MissingRequiredPropertyException("ContainerInstanceImagePullSecret", "registryEndpoint");
            }
            this.registryEndpoint = registryEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(@Nullable String secretId) {

            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder secretType(String secretType) {
            if (secretType == null) {
              throw new MissingRequiredPropertyException("ContainerInstanceImagePullSecret", "secretType");
            }
            this.secretType = secretType;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public ContainerInstanceImagePullSecret build() {
            final var _resultValue = new ContainerInstanceImagePullSecret();
            _resultValue.password = password;
            _resultValue.registryEndpoint = registryEndpoint;
            _resultValue.secretId = secretId;
            _resultValue.secretType = secretType;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
