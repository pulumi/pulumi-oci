// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.ContainerInstanceVolumeConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerInstanceVolume {
    /**
     * @return The volume type of the empty directory, can be either File Storage or Memory.
     * 
     */
    private @Nullable String backingStore;
    /**
     * @return Contains key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
     * 
     */
    private @Nullable List<ContainerInstanceVolumeConfig> configs;
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    private String name;
    /**
     * @return The type of volume.
     * 
     */
    private String volumeType;

    private ContainerInstanceVolume() {}
    /**
     * @return The volume type of the empty directory, can be either File Storage or Memory.
     * 
     */
    public Optional<String> backingStore() {
        return Optional.ofNullable(this.backingStore);
    }
    /**
     * @return Contains key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
     * 
     */
    public List<ContainerInstanceVolumeConfig> configs() {
        return this.configs == null ? List.of() : this.configs;
    }
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of volume.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerInstanceVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backingStore;
        private @Nullable List<ContainerInstanceVolumeConfig> configs;
        private String name;
        private String volumeType;
        public Builder() {}
        public Builder(ContainerInstanceVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backingStore = defaults.backingStore;
    	      this.configs = defaults.configs;
    	      this.name = defaults.name;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder backingStore(@Nullable String backingStore) {

            this.backingStore = backingStore;
            return this;
        }
        @CustomType.Setter
        public Builder configs(@Nullable List<ContainerInstanceVolumeConfig> configs) {

            this.configs = configs;
            return this;
        }
        public Builder configs(ContainerInstanceVolumeConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ContainerInstanceVolume", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            if (volumeType == null) {
              throw new MissingRequiredPropertyException("ContainerInstanceVolume", "volumeType");
            }
            this.volumeType = volumeType;
            return this;
        }
        public ContainerInstanceVolume build() {
            final var _resultValue = new ContainerInstanceVolume();
            _resultValue.backingStore = backingStore;
            _resultValue.configs = configs;
            _resultValue.name = name;
            _resultValue.volumeType = volumeType;
            return _resultValue;
        }
    }
}
