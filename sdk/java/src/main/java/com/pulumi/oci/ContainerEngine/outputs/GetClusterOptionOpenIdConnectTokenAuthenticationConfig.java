// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.GetClusterOptionOpenIdConnectTokenAuthenticationConfigRequiredClaim;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterOptionOpenIdConnectTokenAuthenticationConfig {
    private String caCertificate;
    private String clientId;
    private String groupsClaim;
    private String groupsPrefix;
    private Boolean isOpenIdConnectAuthEnabled;
    private String issuerUrl;
    private List<GetClusterOptionOpenIdConnectTokenAuthenticationConfigRequiredClaim> requiredClaims;
    private List<String> signingAlgorithms;
    private String usernameClaim;
    private String usernamePrefix;

    private GetClusterOptionOpenIdConnectTokenAuthenticationConfig() {}
    public String caCertificate() {
        return this.caCertificate;
    }
    public String clientId() {
        return this.clientId;
    }
    public String groupsClaim() {
        return this.groupsClaim;
    }
    public String groupsPrefix() {
        return this.groupsPrefix;
    }
    public Boolean isOpenIdConnectAuthEnabled() {
        return this.isOpenIdConnectAuthEnabled;
    }
    public String issuerUrl() {
        return this.issuerUrl;
    }
    public List<GetClusterOptionOpenIdConnectTokenAuthenticationConfigRequiredClaim> requiredClaims() {
        return this.requiredClaims;
    }
    public List<String> signingAlgorithms() {
        return this.signingAlgorithms;
    }
    public String usernameClaim() {
        return this.usernameClaim;
    }
    public String usernamePrefix() {
        return this.usernamePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterOptionOpenIdConnectTokenAuthenticationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caCertificate;
        private String clientId;
        private String groupsClaim;
        private String groupsPrefix;
        private Boolean isOpenIdConnectAuthEnabled;
        private String issuerUrl;
        private List<GetClusterOptionOpenIdConnectTokenAuthenticationConfigRequiredClaim> requiredClaims;
        private List<String> signingAlgorithms;
        private String usernameClaim;
        private String usernamePrefix;
        public Builder() {}
        public Builder(GetClusterOptionOpenIdConnectTokenAuthenticationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientId = defaults.clientId;
    	      this.groupsClaim = defaults.groupsClaim;
    	      this.groupsPrefix = defaults.groupsPrefix;
    	      this.isOpenIdConnectAuthEnabled = defaults.isOpenIdConnectAuthEnabled;
    	      this.issuerUrl = defaults.issuerUrl;
    	      this.requiredClaims = defaults.requiredClaims;
    	      this.signingAlgorithms = defaults.signingAlgorithms;
    	      this.usernameClaim = defaults.usernameClaim;
    	      this.usernamePrefix = defaults.usernamePrefix;
        }

        @CustomType.Setter
        public Builder caCertificate(String caCertificate) {
            if (caCertificate == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "caCertificate");
            }
            this.caCertificate = caCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder groupsClaim(String groupsClaim) {
            if (groupsClaim == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "groupsClaim");
            }
            this.groupsClaim = groupsClaim;
            return this;
        }
        @CustomType.Setter
        public Builder groupsPrefix(String groupsPrefix) {
            if (groupsPrefix == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "groupsPrefix");
            }
            this.groupsPrefix = groupsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder isOpenIdConnectAuthEnabled(Boolean isOpenIdConnectAuthEnabled) {
            if (isOpenIdConnectAuthEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "isOpenIdConnectAuthEnabled");
            }
            this.isOpenIdConnectAuthEnabled = isOpenIdConnectAuthEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder issuerUrl(String issuerUrl) {
            if (issuerUrl == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "issuerUrl");
            }
            this.issuerUrl = issuerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder requiredClaims(List<GetClusterOptionOpenIdConnectTokenAuthenticationConfigRequiredClaim> requiredClaims) {
            if (requiredClaims == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "requiredClaims");
            }
            this.requiredClaims = requiredClaims;
            return this;
        }
        public Builder requiredClaims(GetClusterOptionOpenIdConnectTokenAuthenticationConfigRequiredClaim... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }
        @CustomType.Setter
        public Builder signingAlgorithms(List<String> signingAlgorithms) {
            if (signingAlgorithms == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "signingAlgorithms");
            }
            this.signingAlgorithms = signingAlgorithms;
            return this;
        }
        public Builder signingAlgorithms(String... signingAlgorithms) {
            return signingAlgorithms(List.of(signingAlgorithms));
        }
        @CustomType.Setter
        public Builder usernameClaim(String usernameClaim) {
            if (usernameClaim == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "usernameClaim");
            }
            this.usernameClaim = usernameClaim;
            return this;
        }
        @CustomType.Setter
        public Builder usernamePrefix(String usernamePrefix) {
            if (usernamePrefix == null) {
              throw new MissingRequiredPropertyException("GetClusterOptionOpenIdConnectTokenAuthenticationConfig", "usernamePrefix");
            }
            this.usernamePrefix = usernamePrefix;
            return this;
        }
        public GetClusterOptionOpenIdConnectTokenAuthenticationConfig build() {
            final var _resultValue = new GetClusterOptionOpenIdConnectTokenAuthenticationConfig();
            _resultValue.caCertificate = caCertificate;
            _resultValue.clientId = clientId;
            _resultValue.groupsClaim = groupsClaim;
            _resultValue.groupsPrefix = groupsPrefix;
            _resultValue.isOpenIdConnectAuthEnabled = isOpenIdConnectAuthEnabled;
            _resultValue.issuerUrl = issuerUrl;
            _resultValue.requiredClaims = requiredClaims;
            _resultValue.signingAlgorithms = signingAlgorithms;
            _resultValue.usernameClaim = usernameClaim;
            _resultValue.usernamePrefix = usernamePrefix;
            return _resultValue;
        }
    }
}
