// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.GetClustersCluster;
import com.pulumi.oci.ContainerEngine.outputs.GetClustersFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClustersResult {
    /**
     * @return The list of clusters.
     * 
     */
    private List<GetClustersCluster> clusters;
    /**
     * @return The OCID of the compartment in which the cluster exists.
     * 
     */
    private String compartmentId;
    private @Nullable List<GetClustersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the cluster.
     * 
     */
    private @Nullable String name;
    /**
     * @return The state of the cluster masters.
     * 
     */
    private @Nullable List<String> states;

    private GetClustersResult() {}
    /**
     * @return The list of clusters.
     * 
     */
    public List<GetClustersCluster> clusters() {
        return this.clusters;
    }
    /**
     * @return The OCID of the compartment in which the cluster exists.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetClustersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the cluster.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The state of the cluster masters.
     * 
     */
    public List<String> states() {
        return this.states == null ? List.of() : this.states;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClustersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClustersCluster> clusters;
        private String compartmentId;
        private @Nullable List<GetClustersFilter> filters;
        private String id;
        private @Nullable String name;
        private @Nullable List<String> states;
        public Builder() {}
        public Builder(GetClustersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusters = defaults.clusters;
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.states = defaults.states;
        }

        @CustomType.Setter
        public Builder clusters(List<GetClustersCluster> clusters) {
            if (clusters == null) {
              throw new MissingRequiredPropertyException("GetClustersResult", "clusters");
            }
            this.clusters = clusters;
            return this;
        }
        public Builder clusters(GetClustersCluster... clusters) {
            return clusters(List.of(clusters));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetClustersResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetClustersFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetClustersFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClustersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder states(@Nullable List<String> states) {

            this.states = states;
            return this;
        }
        public Builder states(String... states) {
            return states(List.of(states));
        }
        public GetClustersResult build() {
            final var _resultValue = new GetClustersResult();
            _resultValue.clusters = clusters;
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.states = states;
            return _resultValue;
        }
    }
}
