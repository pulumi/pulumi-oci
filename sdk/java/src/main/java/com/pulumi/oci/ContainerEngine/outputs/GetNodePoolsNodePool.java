// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolInitialNodeLabel;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNode;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNodeConfigDetail;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNodeEvictionNodePoolSetting;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNodePoolCyclingDetail;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNodeShapeConfig;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNodeSource;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNodeSourceDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodePoolsNodePool {
    /**
     * @return The OCID of the cluster.
     * 
     */
    private String clusterId;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the node pool.
     * 
     */
    private String id;
    /**
     * @return A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
     * 
     */
    private List<GetNodePoolsNodePoolInitialNodeLabel> initialNodeLabels;
    /**
     * @return The version of Kubernetes running on the nodes in the node pool.
     * 
     */
    private String kubernetesVersion;
    /**
     * @return Details about the state of the nodepool.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The name to filter on.
     * 
     */
    private String name;
    /**
     * @return The configuration of nodes in the node pool.
     * 
     */
    private List<GetNodePoolsNodePoolNodeConfigDetail> nodeConfigDetails;
    /**
     * @return Node Eviction Details configuration
     * 
     */
    private List<GetNodePoolsNodePoolNodeEvictionNodePoolSetting> nodeEvictionNodePoolSettings;
    /**
     * @return Deprecated. see `nodeSource`. The OCID of the image running on the nodes in the node pool.
     * 
     * @deprecated
     * The &#39;node_image_id&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    private String nodeImageId;
    /**
     * @return Deprecated. see `nodeSource`. The name of the image running on the nodes in the node pool.
     * 
     * @deprecated
     * The &#39;node_image_name&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    private String nodeImageName;
    private Map<String,String> nodeMetadata;
    /**
     * @return Node Pool Cycling Details
     * 
     */
    private List<GetNodePoolsNodePoolNodePoolCyclingDetail> nodePoolCyclingDetails;
    private String nodePoolId;
    /**
     * @return The name of the node shape of the nodes in the node pool.
     * 
     */
    private String nodeShape;
    /**
     * @return The shape configuration of the nodes.
     * 
     */
    private List<GetNodePoolsNodePoolNodeShapeConfig> nodeShapeConfigs;
    /**
     * @return Source running on the nodes in the node pool.
     * 
     */
    private List<GetNodePoolsNodePoolNodeSourceDetail> nodeSourceDetails;
    /**
     * @return Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
     * 
     */
    private List<GetNodePoolsNodePoolNodeSource> nodeSources;
    private List<GetNodePoolsNodePoolNode> nodes;
    /**
     * @return The number of nodes in each subnet.
     * 
     */
    private Integer quantityPerSubnet;
    /**
     * @return The SSH public key on each node in the node pool on launch.
     * 
     */
    private String sshPublicKey;
    /**
     * @return A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     * 
     */
    private String state;
    /**
     * @return The OCIDs of the subnets in which to place nodes for this node pool.
     * 
     */
    private List<String> subnetIds;

    private GetNodePoolsNodePool() {}
    /**
     * @return The OCID of the cluster.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the node pool.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
     * 
     */
    public List<GetNodePoolsNodePoolInitialNodeLabel> initialNodeLabels() {
        return this.initialNodeLabels;
    }
    /**
     * @return The version of Kubernetes running on the nodes in the node pool.
     * 
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return Details about the state of the nodepool.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The name to filter on.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The configuration of nodes in the node pool.
     * 
     */
    public List<GetNodePoolsNodePoolNodeConfigDetail> nodeConfigDetails() {
        return this.nodeConfigDetails;
    }
    /**
     * @return Node Eviction Details configuration
     * 
     */
    public List<GetNodePoolsNodePoolNodeEvictionNodePoolSetting> nodeEvictionNodePoolSettings() {
        return this.nodeEvictionNodePoolSettings;
    }
    /**
     * @return Deprecated. see `nodeSource`. The OCID of the image running on the nodes in the node pool.
     * 
     * @deprecated
     * The &#39;node_image_id&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    public String nodeImageId() {
        return this.nodeImageId;
    }
    /**
     * @return Deprecated. see `nodeSource`. The name of the image running on the nodes in the node pool.
     * 
     * @deprecated
     * The &#39;node_image_name&#39; field has been deprecated. Please use &#39;node_source_details&#39; instead. If both fields are specified, then &#39;node_source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used. */
    public String nodeImageName() {
        return this.nodeImageName;
    }
    public Map<String,String> nodeMetadata() {
        return this.nodeMetadata;
    }
    /**
     * @return Node Pool Cycling Details
     * 
     */
    public List<GetNodePoolsNodePoolNodePoolCyclingDetail> nodePoolCyclingDetails() {
        return this.nodePoolCyclingDetails;
    }
    public String nodePoolId() {
        return this.nodePoolId;
    }
    /**
     * @return The name of the node shape of the nodes in the node pool.
     * 
     */
    public String nodeShape() {
        return this.nodeShape;
    }
    /**
     * @return The shape configuration of the nodes.
     * 
     */
    public List<GetNodePoolsNodePoolNodeShapeConfig> nodeShapeConfigs() {
        return this.nodeShapeConfigs;
    }
    /**
     * @return Source running on the nodes in the node pool.
     * 
     */
    public List<GetNodePoolsNodePoolNodeSourceDetail> nodeSourceDetails() {
        return this.nodeSourceDetails;
    }
    /**
     * @return Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
     * 
     */
    public List<GetNodePoolsNodePoolNodeSource> nodeSources() {
        return this.nodeSources;
    }
    public List<GetNodePoolsNodePoolNode> nodes() {
        return this.nodes;
    }
    /**
     * @return The number of nodes in each subnet.
     * 
     */
    public Integer quantityPerSubnet() {
        return this.quantityPerSubnet;
    }
    /**
     * @return The SSH public key on each node in the node pool on launch.
     * 
     */
    public String sshPublicKey() {
        return this.sshPublicKey;
    }
    /**
     * @return A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCIDs of the subnets in which to place nodes for this node pool.
     * 
     */
    public List<String> subnetIds() {
        return this.subnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolsNodePool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String compartmentId;
        private Map<String,String> definedTags;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetNodePoolsNodePoolInitialNodeLabel> initialNodeLabels;
        private String kubernetesVersion;
        private String lifecycleDetails;
        private String name;
        private List<GetNodePoolsNodePoolNodeConfigDetail> nodeConfigDetails;
        private List<GetNodePoolsNodePoolNodeEvictionNodePoolSetting> nodeEvictionNodePoolSettings;
        private String nodeImageId;
        private String nodeImageName;
        private Map<String,String> nodeMetadata;
        private List<GetNodePoolsNodePoolNodePoolCyclingDetail> nodePoolCyclingDetails;
        private String nodePoolId;
        private String nodeShape;
        private List<GetNodePoolsNodePoolNodeShapeConfig> nodeShapeConfigs;
        private List<GetNodePoolsNodePoolNodeSourceDetail> nodeSourceDetails;
        private List<GetNodePoolsNodePoolNodeSource> nodeSources;
        private List<GetNodePoolsNodePoolNode> nodes;
        private Integer quantityPerSubnet;
        private String sshPublicKey;
        private String state;
        private List<String> subnetIds;
        public Builder() {}
        public Builder(GetNodePoolsNodePool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.initialNodeLabels = defaults.initialNodeLabels;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.nodeConfigDetails = defaults.nodeConfigDetails;
    	      this.nodeEvictionNodePoolSettings = defaults.nodeEvictionNodePoolSettings;
    	      this.nodeImageId = defaults.nodeImageId;
    	      this.nodeImageName = defaults.nodeImageName;
    	      this.nodeMetadata = defaults.nodeMetadata;
    	      this.nodePoolCyclingDetails = defaults.nodePoolCyclingDetails;
    	      this.nodePoolId = defaults.nodePoolId;
    	      this.nodeShape = defaults.nodeShape;
    	      this.nodeShapeConfigs = defaults.nodeShapeConfigs;
    	      this.nodeSourceDetails = defaults.nodeSourceDetails;
    	      this.nodeSources = defaults.nodeSources;
    	      this.nodes = defaults.nodes;
    	      this.quantityPerSubnet = defaults.quantityPerSubnet;
    	      this.sshPublicKey = defaults.sshPublicKey;
    	      this.state = defaults.state;
    	      this.subnetIds = defaults.subnetIds;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initialNodeLabels(List<GetNodePoolsNodePoolInitialNodeLabel> initialNodeLabels) {
            if (initialNodeLabels == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "initialNodeLabels");
            }
            this.initialNodeLabels = initialNodeLabels;
            return this;
        }
        public Builder initialNodeLabels(GetNodePoolsNodePoolInitialNodeLabel... initialNodeLabels) {
            return initialNodeLabels(List.of(initialNodeLabels));
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeConfigDetails(List<GetNodePoolsNodePoolNodeConfigDetail> nodeConfigDetails) {
            if (nodeConfigDetails == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeConfigDetails");
            }
            this.nodeConfigDetails = nodeConfigDetails;
            return this;
        }
        public Builder nodeConfigDetails(GetNodePoolsNodePoolNodeConfigDetail... nodeConfigDetails) {
            return nodeConfigDetails(List.of(nodeConfigDetails));
        }
        @CustomType.Setter
        public Builder nodeEvictionNodePoolSettings(List<GetNodePoolsNodePoolNodeEvictionNodePoolSetting> nodeEvictionNodePoolSettings) {
            if (nodeEvictionNodePoolSettings == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeEvictionNodePoolSettings");
            }
            this.nodeEvictionNodePoolSettings = nodeEvictionNodePoolSettings;
            return this;
        }
        public Builder nodeEvictionNodePoolSettings(GetNodePoolsNodePoolNodeEvictionNodePoolSetting... nodeEvictionNodePoolSettings) {
            return nodeEvictionNodePoolSettings(List.of(nodeEvictionNodePoolSettings));
        }
        @CustomType.Setter
        public Builder nodeImageId(String nodeImageId) {
            if (nodeImageId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeImageId");
            }
            this.nodeImageId = nodeImageId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeImageName(String nodeImageName) {
            if (nodeImageName == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeImageName");
            }
            this.nodeImageName = nodeImageName;
            return this;
        }
        @CustomType.Setter
        public Builder nodeMetadata(Map<String,String> nodeMetadata) {
            if (nodeMetadata == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeMetadata");
            }
            this.nodeMetadata = nodeMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder nodePoolCyclingDetails(List<GetNodePoolsNodePoolNodePoolCyclingDetail> nodePoolCyclingDetails) {
            if (nodePoolCyclingDetails == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodePoolCyclingDetails");
            }
            this.nodePoolCyclingDetails = nodePoolCyclingDetails;
            return this;
        }
        public Builder nodePoolCyclingDetails(GetNodePoolsNodePoolNodePoolCyclingDetail... nodePoolCyclingDetails) {
            return nodePoolCyclingDetails(List.of(nodePoolCyclingDetails));
        }
        @CustomType.Setter
        public Builder nodePoolId(String nodePoolId) {
            if (nodePoolId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodePoolId");
            }
            this.nodePoolId = nodePoolId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeShape(String nodeShape) {
            if (nodeShape == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeShape");
            }
            this.nodeShape = nodeShape;
            return this;
        }
        @CustomType.Setter
        public Builder nodeShapeConfigs(List<GetNodePoolsNodePoolNodeShapeConfig> nodeShapeConfigs) {
            if (nodeShapeConfigs == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeShapeConfigs");
            }
            this.nodeShapeConfigs = nodeShapeConfigs;
            return this;
        }
        public Builder nodeShapeConfigs(GetNodePoolsNodePoolNodeShapeConfig... nodeShapeConfigs) {
            return nodeShapeConfigs(List.of(nodeShapeConfigs));
        }
        @CustomType.Setter
        public Builder nodeSourceDetails(List<GetNodePoolsNodePoolNodeSourceDetail> nodeSourceDetails) {
            if (nodeSourceDetails == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeSourceDetails");
            }
            this.nodeSourceDetails = nodeSourceDetails;
            return this;
        }
        public Builder nodeSourceDetails(GetNodePoolsNodePoolNodeSourceDetail... nodeSourceDetails) {
            return nodeSourceDetails(List.of(nodeSourceDetails));
        }
        @CustomType.Setter
        public Builder nodeSources(List<GetNodePoolsNodePoolNodeSource> nodeSources) {
            if (nodeSources == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodeSources");
            }
            this.nodeSources = nodeSources;
            return this;
        }
        public Builder nodeSources(GetNodePoolsNodePoolNodeSource... nodeSources) {
            return nodeSources(List.of(nodeSources));
        }
        @CustomType.Setter
        public Builder nodes(List<GetNodePoolsNodePoolNode> nodes) {
            if (nodes == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "nodes");
            }
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(GetNodePoolsNodePoolNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder quantityPerSubnet(Integer quantityPerSubnet) {
            if (quantityPerSubnet == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "quantityPerSubnet");
            }
            this.quantityPerSubnet = quantityPerSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKey(String sshPublicKey) {
            if (sshPublicKey == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "sshPublicKey");
            }
            this.sshPublicKey = sshPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetIds(List<String> subnetIds) {
            if (subnetIds == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePool", "subnetIds");
            }
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        public GetNodePoolsNodePool build() {
            final var _resultValue = new GetNodePoolsNodePool();
            _resultValue.clusterId = clusterId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.initialNodeLabels = initialNodeLabels;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.name = name;
            _resultValue.nodeConfigDetails = nodeConfigDetails;
            _resultValue.nodeEvictionNodePoolSettings = nodeEvictionNodePoolSettings;
            _resultValue.nodeImageId = nodeImageId;
            _resultValue.nodeImageName = nodeImageName;
            _resultValue.nodeMetadata = nodeMetadata;
            _resultValue.nodePoolCyclingDetails = nodePoolCyclingDetails;
            _resultValue.nodePoolId = nodePoolId;
            _resultValue.nodeShape = nodeShape;
            _resultValue.nodeShapeConfigs = nodeShapeConfigs;
            _resultValue.nodeSourceDetails = nodeSourceDetails;
            _resultValue.nodeSources = nodeSources;
            _resultValue.nodes = nodes;
            _resultValue.quantityPerSubnet = quantityPerSubnet;
            _resultValue.sshPublicKey = sshPublicKey;
            _resultValue.state = state;
            _resultValue.subnetIds = subnetIds;
            return _resultValue;
        }
    }
}
