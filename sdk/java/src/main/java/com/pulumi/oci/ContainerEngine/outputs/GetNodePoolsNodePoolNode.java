// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerEngine.outputs.GetNodePoolsNodePoolNodeError;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodePoolsNodePoolNode {
    /**
     * @return The availability domain in which to place nodes. Example: `Uocm:PHX-AD-1`
     * 
     */
    private String availabilityDomain;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    private List<GetNodePoolsNodePoolNodeError> errors;
    private String faultDomain;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the node pool.
     * 
     */
    private String id;
    /**
     * @return The version of Kubernetes running on the nodes in the node pool.
     * 
     */
    private String kubernetesVersion;
    /**
     * @return Details about the state of the nodepool.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The name to filter on.
     * 
     */
    private String name;
    private String nodePoolId;
    private String privateIp;
    private String publicIp;
    /**
     * @return A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     * 
     */
    private String state;
    /**
     * @return The OCID of the subnet in which to place nodes.
     * 
     */
    private String subnetId;

    private GetNodePoolsNodePoolNode() {}
    /**
     * @return The availability domain in which to place nodes. Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    public List<GetNodePoolsNodePoolNodeError> errors() {
        return this.errors;
    }
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the node pool.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The version of Kubernetes running on the nodes in the node pool.
     * 
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return Details about the state of the nodepool.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The name to filter on.
     * 
     */
    public String name() {
        return this.name;
    }
    public String nodePoolId() {
        return this.nodePoolId;
    }
    public String privateIp() {
        return this.privateIp;
    }
    public String publicIp() {
        return this.publicIp;
    }
    /**
     * @return A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the subnet in which to place nodes.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolsNodePoolNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private Map<String,Object> definedTags;
        private List<GetNodePoolsNodePoolNodeError> errors;
        private String faultDomain;
        private Map<String,Object> freeformTags;
        private String id;
        private String kubernetesVersion;
        private String lifecycleDetails;
        private String name;
        private String nodePoolId;
        private String privateIp;
        private String publicIp;
        private String state;
        private String subnetId;
        public Builder() {}
        public Builder(GetNodePoolsNodePoolNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.definedTags = defaults.definedTags;
    	      this.errors = defaults.errors;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.name = defaults.name;
    	      this.nodePoolId = defaults.nodePoolId;
    	      this.privateIp = defaults.privateIp;
    	      this.publicIp = defaults.publicIp;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder errors(List<GetNodePoolsNodePoolNodeError> errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        public Builder errors(GetNodePoolsNodePoolNodeError... errors) {
            return errors(List.of(errors));
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            this.faultDomain = Objects.requireNonNull(faultDomain);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            this.kubernetesVersion = Objects.requireNonNull(kubernetesVersion);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodePoolId(String nodePoolId) {
            this.nodePoolId = Objects.requireNonNull(nodePoolId);
            return this;
        }
        @CustomType.Setter
        public Builder privateIp(String privateIp) {
            this.privateIp = Objects.requireNonNull(privateIp);
            return this;
        }
        @CustomType.Setter
        public Builder publicIp(String publicIp) {
            this.publicIp = Objects.requireNonNull(publicIp);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public GetNodePoolsNodePoolNode build() {
            final var _resultValue = new GetNodePoolsNodePoolNode();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.definedTags = definedTags;
            _resultValue.errors = errors;
            _resultValue.faultDomain = faultDomain;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.name = name;
            _resultValue.nodePoolId = nodePoolId;
            _resultValue.privateIp = privateIp;
            _resultValue.publicIp = publicIp;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
