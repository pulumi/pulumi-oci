// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNodePoolsNodePoolNodePoolCyclingDetail {
    /**
     * @return If nodes in the nodepool will be cycled to have new changes.
     * 
     */
    private Boolean isNodeCyclingEnabled;
    /**
     * @return Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    private String maximumSurge;
    /**
     * @return Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    private String maximumUnavailable;

    private GetNodePoolsNodePoolNodePoolCyclingDetail() {}
    /**
     * @return If nodes in the nodepool will be cycled to have new changes.
     * 
     */
    public Boolean isNodeCyclingEnabled() {
        return this.isNodeCyclingEnabled;
    }
    /**
     * @return Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    public String maximumSurge() {
        return this.maximumSurge;
    }
    /**
     * @return Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    public String maximumUnavailable() {
        return this.maximumUnavailable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolsNodePoolNodePoolCyclingDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isNodeCyclingEnabled;
        private String maximumSurge;
        private String maximumUnavailable;
        public Builder() {}
        public Builder(GetNodePoolsNodePoolNodePoolCyclingDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isNodeCyclingEnabled = defaults.isNodeCyclingEnabled;
    	      this.maximumSurge = defaults.maximumSurge;
    	      this.maximumUnavailable = defaults.maximumUnavailable;
        }

        @CustomType.Setter
        public Builder isNodeCyclingEnabled(Boolean isNodeCyclingEnabled) {
            this.isNodeCyclingEnabled = Objects.requireNonNull(isNodeCyclingEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder maximumSurge(String maximumSurge) {
            this.maximumSurge = Objects.requireNonNull(maximumSurge);
            return this;
        }
        @CustomType.Setter
        public Builder maximumUnavailable(String maximumUnavailable) {
            this.maximumUnavailable = Objects.requireNonNull(maximumUnavailable);
            return this;
        }
        public GetNodePoolsNodePoolNodePoolCyclingDetail build() {
            final var o = new GetNodePoolsNodePoolNodePoolCyclingDetail();
            o.isNodeCyclingEnabled = isNodeCyclingEnabled;
            o.maximumSurge = maximumSurge;
            o.maximumUnavailable = maximumUnavailable;
            return o;
        }
    }
}
