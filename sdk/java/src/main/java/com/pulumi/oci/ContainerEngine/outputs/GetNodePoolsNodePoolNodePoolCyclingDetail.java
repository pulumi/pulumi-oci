// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNodePoolsNodePoolNodePoolCyclingDetail {
    /**
     * @return An ordered list of cycle modes that should be performed on the OKE nodes.
     * 
     */
    private List<String> cycleModes;
    /**
     * @return If cycling operation should be performed on the nodes in the node pool.
     * 
     */
    private Boolean isNodeCyclingEnabled;
    /**
     * @return Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    private String maximumSurge;
    /**
     * @return Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    private String maximumUnavailable;

    private GetNodePoolsNodePoolNodePoolCyclingDetail() {}
    /**
     * @return An ordered list of cycle modes that should be performed on the OKE nodes.
     * 
     */
    public List<String> cycleModes() {
        return this.cycleModes;
    }
    /**
     * @return If cycling operation should be performed on the nodes in the node pool.
     * 
     */
    public Boolean isNodeCyclingEnabled() {
        return this.isNodeCyclingEnabled;
    }
    /**
     * @return Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    public String maximumSurge() {
        return this.maximumSurge;
    }
    /**
     * @return Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
     * 
     */
    public String maximumUnavailable() {
        return this.maximumUnavailable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolsNodePoolNodePoolCyclingDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> cycleModes;
        private Boolean isNodeCyclingEnabled;
        private String maximumSurge;
        private String maximumUnavailable;
        public Builder() {}
        public Builder(GetNodePoolsNodePoolNodePoolCyclingDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cycleModes = defaults.cycleModes;
    	      this.isNodeCyclingEnabled = defaults.isNodeCyclingEnabled;
    	      this.maximumSurge = defaults.maximumSurge;
    	      this.maximumUnavailable = defaults.maximumUnavailable;
        }

        @CustomType.Setter
        public Builder cycleModes(List<String> cycleModes) {
            if (cycleModes == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePoolNodePoolCyclingDetail", "cycleModes");
            }
            this.cycleModes = cycleModes;
            return this;
        }
        public Builder cycleModes(String... cycleModes) {
            return cycleModes(List.of(cycleModes));
        }
        @CustomType.Setter
        public Builder isNodeCyclingEnabled(Boolean isNodeCyclingEnabled) {
            if (isNodeCyclingEnabled == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePoolNodePoolCyclingDetail", "isNodeCyclingEnabled");
            }
            this.isNodeCyclingEnabled = isNodeCyclingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maximumSurge(String maximumSurge) {
            if (maximumSurge == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePoolNodePoolCyclingDetail", "maximumSurge");
            }
            this.maximumSurge = maximumSurge;
            return this;
        }
        @CustomType.Setter
        public Builder maximumUnavailable(String maximumUnavailable) {
            if (maximumUnavailable == null) {
              throw new MissingRequiredPropertyException("GetNodePoolsNodePoolNodePoolCyclingDetail", "maximumUnavailable");
            }
            this.maximumUnavailable = maximumUnavailable;
            return this;
        }
        public GetNodePoolsNodePoolNodePoolCyclingDetail build() {
            final var _resultValue = new GetNodePoolsNodePoolNodePoolCyclingDetail();
            _resultValue.cycleModes = cycleModes;
            _resultValue.isNodeCyclingEnabled = isNodeCyclingEnabled;
            _resultValue.maximumSurge = maximumSurge;
            _resultValue.maximumUnavailable = maximumUnavailable;
            return _resultValue;
        }
    }
}
