// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.GetVirtualNodePoolsFilter;
import com.pulumi.oci.ContainerEngine.outputs.GetVirtualNodePoolsVirtualNodePool;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualNodePoolsResult {
    /**
     * @return The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
     * 
     */
    private @Nullable String clusterId;
    /**
     * @return Compartment of the virtual node pool.
     * 
     */
    private String compartmentId;
    /**
     * @return Display name of the virtual node pool. This is a non-unique value.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetVirtualNodePoolsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The state of the Virtual Node Pool.
     * 
     */
    private @Nullable List<String> states;
    /**
     * @return The list of virtual_node_pools.
     * 
     */
    private List<GetVirtualNodePoolsVirtualNodePool> virtualNodePools;

    private GetVirtualNodePoolsResult() {}
    /**
     * @return The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
     * 
     */
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }
    /**
     * @return Compartment of the virtual node pool.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Display name of the virtual node pool. This is a non-unique value.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetVirtualNodePoolsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The state of the Virtual Node Pool.
     * 
     */
    public List<String> states() {
        return this.states == null ? List.of() : this.states;
    }
    /**
     * @return The list of virtual_node_pools.
     * 
     */
    public List<GetVirtualNodePoolsVirtualNodePool> virtualNodePools() {
        return this.virtualNodePools;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNodePoolsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clusterId;
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetVirtualNodePoolsFilter> filters;
        private String id;
        private @Nullable List<String> states;
        private List<GetVirtualNodePoolsVirtualNodePool> virtualNodePools;
        public Builder() {}
        public Builder(GetVirtualNodePoolsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.states = defaults.states;
    	      this.virtualNodePools = defaults.virtualNodePools;
        }

        @CustomType.Setter
        public Builder clusterId(@Nullable String clusterId) {

            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetVirtualNodePoolsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetVirtualNodePoolsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder states(@Nullable List<String> states) {

            this.states = states;
            return this;
        }
        public Builder states(String... states) {
            return states(List.of(states));
        }
        @CustomType.Setter
        public Builder virtualNodePools(List<GetVirtualNodePoolsVirtualNodePool> virtualNodePools) {
            if (virtualNodePools == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsResult", "virtualNodePools");
            }
            this.virtualNodePools = virtualNodePools;
            return this;
        }
        public Builder virtualNodePools(GetVirtualNodePoolsVirtualNodePool... virtualNodePools) {
            return virtualNodePools(List.of(virtualNodePools));
        }
        public GetVirtualNodePoolsResult build() {
            final var _resultValue = new GetVirtualNodePoolsResult();
            _resultValue.clusterId = clusterId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.states = states;
            _resultValue.virtualNodePools = virtualNodePools;
            return _resultValue;
        }
    }
}
