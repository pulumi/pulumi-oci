// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerEngine.outputs.GetVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel;
import com.pulumi.oci.ContainerEngine.outputs.GetVirtualNodePoolsVirtualNodePoolPlacementConfiguration;
import com.pulumi.oci.ContainerEngine.outputs.GetVirtualNodePoolsVirtualNodePoolPodConfiguration;
import com.pulumi.oci.ContainerEngine.outputs.GetVirtualNodePoolsVirtualNodePoolTaint;
import com.pulumi.oci.ContainerEngine.outputs.GetVirtualNodePoolsVirtualNodePoolVirtualNodeTag;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVirtualNodePoolsVirtualNodePool {
    /**
     * @return The OCID of the cluster.
     * 
     */
    private String clusterId;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Display name of the virtual node pool. This is a non-unique value.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the virtual node pool.
     * 
     */
    private String id;
    /**
     * @return Initial labels that will be added to the Kubernetes Virtual Node object when it registers. This is the same as virtualNodePool resources.
     * 
     */
    private List<GetVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel> initialVirtualNodeLabels;
    /**
     * @return The version of Kubernetes running on the nodes in the node pool.
     * 
     */
    private String kubernetesVersion;
    /**
     * @return Details about the state of the Virtual Node Pool.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return List of network security group IDs applied to the Pod VNIC.
     * 
     */
    private List<String> nsgIds;
    /**
     * @return The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
     * 
     */
    private List<GetVirtualNodePoolsVirtualNodePoolPlacementConfiguration> placementConfigurations;
    /**
     * @return The pod configuration for pods run on virtual nodes of this virtual node pool.
     * 
     */
    private List<GetVirtualNodePoolsVirtualNodePoolPodConfiguration> podConfigurations;
    /**
     * @return The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
     * 
     */
    private Integer size;
    /**
     * @return A virtual node pool lifecycle state to filter on. Can have multiple parameters of this name.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
     * 
     */
    private List<GetVirtualNodePoolsVirtualNodePoolTaint> taints;
    /**
     * @return The time the virtual node pool was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the virtual node pool was updated.
     * 
     */
    private String timeUpdated;
    private String virtualNodePoolId;
    /**
     * @return The tags associated to the virtual nodes in this virtual node pool.
     * 
     */
    private List<GetVirtualNodePoolsVirtualNodePoolVirtualNodeTag> virtualNodeTags;

    private GetVirtualNodePoolsVirtualNodePool() {}
    /**
     * @return The OCID of the cluster.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Display name of the virtual node pool. This is a non-unique value.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the virtual node pool.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Initial labels that will be added to the Kubernetes Virtual Node object when it registers. This is the same as virtualNodePool resources.
     * 
     */
    public List<GetVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel> initialVirtualNodeLabels() {
        return this.initialVirtualNodeLabels;
    }
    /**
     * @return The version of Kubernetes running on the nodes in the node pool.
     * 
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return Details about the state of the Virtual Node Pool.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return List of network security group IDs applied to the Pod VNIC.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
     * 
     */
    public List<GetVirtualNodePoolsVirtualNodePoolPlacementConfiguration> placementConfigurations() {
        return this.placementConfigurations;
    }
    /**
     * @return The pod configuration for pods run on virtual nodes of this virtual node pool.
     * 
     */
    public List<GetVirtualNodePoolsVirtualNodePoolPodConfiguration> podConfigurations() {
        return this.podConfigurations;
    }
    /**
     * @return The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return A virtual node pool lifecycle state to filter on. Can have multiple parameters of this name.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
     * 
     */
    public List<GetVirtualNodePoolsVirtualNodePoolTaint> taints() {
        return this.taints;
    }
    /**
     * @return The time the virtual node pool was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the virtual node pool was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public String virtualNodePoolId() {
        return this.virtualNodePoolId;
    }
    /**
     * @return The tags associated to the virtual nodes in this virtual node pool.
     * 
     */
    public List<GetVirtualNodePoolsVirtualNodePoolVirtualNodeTag> virtualNodeTags() {
        return this.virtualNodeTags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNodePoolsVirtualNodePool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel> initialVirtualNodeLabels;
        private String kubernetesVersion;
        private String lifecycleDetails;
        private List<String> nsgIds;
        private List<GetVirtualNodePoolsVirtualNodePoolPlacementConfiguration> placementConfigurations;
        private List<GetVirtualNodePoolsVirtualNodePoolPodConfiguration> podConfigurations;
        private Integer size;
        private String state;
        private Map<String,Object> systemTags;
        private List<GetVirtualNodePoolsVirtualNodePoolTaint> taints;
        private String timeCreated;
        private String timeUpdated;
        private String virtualNodePoolId;
        private List<GetVirtualNodePoolsVirtualNodePoolVirtualNodeTag> virtualNodeTags;
        public Builder() {}
        public Builder(GetVirtualNodePoolsVirtualNodePool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.initialVirtualNodeLabels = defaults.initialVirtualNodeLabels;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.nsgIds = defaults.nsgIds;
    	      this.placementConfigurations = defaults.placementConfigurations;
    	      this.podConfigurations = defaults.podConfigurations;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.taints = defaults.taints;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.virtualNodePoolId = defaults.virtualNodePoolId;
    	      this.virtualNodeTags = defaults.virtualNodeTags;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initialVirtualNodeLabels(List<GetVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel> initialVirtualNodeLabels) {
            if (initialVirtualNodeLabels == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "initialVirtualNodeLabels");
            }
            this.initialVirtualNodeLabels = initialVirtualNodeLabels;
            return this;
        }
        public Builder initialVirtualNodeLabels(GetVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel... initialVirtualNodeLabels) {
            return initialVirtualNodeLabels(List.of(initialVirtualNodeLabels));
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder placementConfigurations(List<GetVirtualNodePoolsVirtualNodePoolPlacementConfiguration> placementConfigurations) {
            if (placementConfigurations == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "placementConfigurations");
            }
            this.placementConfigurations = placementConfigurations;
            return this;
        }
        public Builder placementConfigurations(GetVirtualNodePoolsVirtualNodePoolPlacementConfiguration... placementConfigurations) {
            return placementConfigurations(List.of(placementConfigurations));
        }
        @CustomType.Setter
        public Builder podConfigurations(List<GetVirtualNodePoolsVirtualNodePoolPodConfiguration> podConfigurations) {
            if (podConfigurations == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "podConfigurations");
            }
            this.podConfigurations = podConfigurations;
            return this;
        }
        public Builder podConfigurations(GetVirtualNodePoolsVirtualNodePoolPodConfiguration... podConfigurations) {
            return podConfigurations(List.of(podConfigurations));
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder taints(List<GetVirtualNodePoolsVirtualNodePoolTaint> taints) {
            if (taints == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "taints");
            }
            this.taints = taints;
            return this;
        }
        public Builder taints(GetVirtualNodePoolsVirtualNodePoolTaint... taints) {
            return taints(List.of(taints));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNodePoolId(String virtualNodePoolId) {
            if (virtualNodePoolId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "virtualNodePoolId");
            }
            this.virtualNodePoolId = virtualNodePoolId;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNodeTags(List<GetVirtualNodePoolsVirtualNodePoolVirtualNodeTag> virtualNodeTags) {
            if (virtualNodeTags == null) {
              throw new MissingRequiredPropertyException("GetVirtualNodePoolsVirtualNodePool", "virtualNodeTags");
            }
            this.virtualNodeTags = virtualNodeTags;
            return this;
        }
        public Builder virtualNodeTags(GetVirtualNodePoolsVirtualNodePoolVirtualNodeTag... virtualNodeTags) {
            return virtualNodeTags(List.of(virtualNodeTags));
        }
        public GetVirtualNodePoolsVirtualNodePool build() {
            final var _resultValue = new GetVirtualNodePoolsVirtualNodePool();
            _resultValue.clusterId = clusterId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.initialVirtualNodeLabels = initialVirtualNodeLabels;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.nsgIds = nsgIds;
            _resultValue.placementConfigurations = placementConfigurations;
            _resultValue.podConfigurations = podConfigurations;
            _resultValue.size = size;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.taints = taints;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.virtualNodePoolId = virtualNodePoolId;
            _resultValue.virtualNodeTags = virtualNodeTags;
            return _resultValue;
        }
    }
}
