// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerEngine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolNodeEvictionNodePoolSettings {
    /**
     * @return (Updatable) Duration after which OKE will give up eviction of the pods on the node. PT0M will indicate you want to delete the node without cordon and drain. Default PT60M, Min PT0M, Max: PT60M. Format ISO 8601 e.g PT30M
     * 
     */
    private final @Nullable String evictionGraceDuration;
    /**
     * @return (Updatable) If the underlying compute instance should be deleted if you cannot evict all the pods in grace period
     * 
     */
    private final @Nullable Boolean isForceDeleteAfterGraceDuration;

    @CustomType.Constructor
    private NodePoolNodeEvictionNodePoolSettings(
        @CustomType.Parameter("evictionGraceDuration") @Nullable String evictionGraceDuration,
        @CustomType.Parameter("isForceDeleteAfterGraceDuration") @Nullable Boolean isForceDeleteAfterGraceDuration) {
        this.evictionGraceDuration = evictionGraceDuration;
        this.isForceDeleteAfterGraceDuration = isForceDeleteAfterGraceDuration;
    }

    /**
     * @return (Updatable) Duration after which OKE will give up eviction of the pods on the node. PT0M will indicate you want to delete the node without cordon and drain. Default PT60M, Min PT0M, Max: PT60M. Format ISO 8601 e.g PT30M
     * 
     */
    public Optional<String> evictionGraceDuration() {
        return Optional.ofNullable(this.evictionGraceDuration);
    }
    /**
     * @return (Updatable) If the underlying compute instance should be deleted if you cannot evict all the pods in grace period
     * 
     */
    public Optional<Boolean> isForceDeleteAfterGraceDuration() {
        return Optional.ofNullable(this.isForceDeleteAfterGraceDuration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolNodeEvictionNodePoolSettings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String evictionGraceDuration;
        private @Nullable Boolean isForceDeleteAfterGraceDuration;

        public Builder() {
    	      // Empty
        }

        public Builder(NodePoolNodeEvictionNodePoolSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.evictionGraceDuration = defaults.evictionGraceDuration;
    	      this.isForceDeleteAfterGraceDuration = defaults.isForceDeleteAfterGraceDuration;
        }

        public Builder evictionGraceDuration(@Nullable String evictionGraceDuration) {
            this.evictionGraceDuration = evictionGraceDuration;
            return this;
        }
        public Builder isForceDeleteAfterGraceDuration(@Nullable Boolean isForceDeleteAfterGraceDuration) {
            this.isForceDeleteAfterGraceDuration = isForceDeleteAfterGraceDuration;
            return this;
        }        public NodePoolNodeEvictionNodePoolSettings build() {
            return new NodePoolNodeEvictionNodePoolSettings(evictionGraceDuration, isForceDeleteAfterGraceDuration);
        }
    }
}
