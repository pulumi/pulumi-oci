// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceContainerHealthCheck;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceContainerResourceConfig;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceContainerSecurityContext;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceContainerVolumeMount;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerInstanceContainer {
    private @Nullable List<String> arguments;
    /**
     * @return The availability domain to place the container instance.
     * 
     */
    private @Nullable String availabilityDomain;
    private @Nullable List<String> commands;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The OCID of the container.
     * 
     */
    private @Nullable String containerId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container instance.
     * 
     */
    private @Nullable String containerInstanceId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable Map<String,Object> environmentVariables;
    private @Nullable Integer exitCode;
    /**
     * @return The fault domain to place the container instance.
     * 
     */
    private @Nullable String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    private @Nullable List<GetContainerInstanceContainerHealthCheck> healthChecks;
    private @Nullable String imageUrl;
    private @Nullable Boolean isResourcePrincipalDisabled;
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    private @Nullable String lifecycleDetails;
    private @Nullable List<GetContainerInstanceContainerResourceConfig> resourceConfigs;
    private @Nullable List<GetContainerInstanceContainerSecurityContext> securityContexts;
    /**
     * @return The current state of the container instance.
     * 
     */
    private @Nullable String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    private @Nullable Map<String,Object> systemTags;
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    private @Nullable String timeTerminated;
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeUpdated;
    private @Nullable List<GetContainerInstanceContainerVolumeMount> volumeMounts;
    private @Nullable String workingDirectory;

    private GetContainerInstanceContainer() {}
    public List<String> arguments() {
        return this.arguments == null ? List.of() : this.arguments;
    }
    /**
     * @return The availability domain to place the container instance.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The OCID of the container.
     * 
     */
    public Optional<String> containerId() {
        return Optional.ofNullable(this.containerId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container instance.
     * 
     */
    public Optional<String> containerInstanceId() {
        return Optional.ofNullable(this.containerInstanceId);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Map<String,Object> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }
    public Optional<Integer> exitCode() {
        return Optional.ofNullable(this.exitCode);
    }
    /**
     * @return The fault domain to place the container instance.
     * 
     */
    public Optional<String> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    public List<GetContainerInstanceContainerHealthCheck> healthChecks() {
        return this.healthChecks == null ? List.of() : this.healthChecks;
    }
    public Optional<String> imageUrl() {
        return Optional.ofNullable(this.imageUrl);
    }
    public Optional<Boolean> isResourcePrincipalDisabled() {
        return Optional.ofNullable(this.isResourcePrincipalDisabled);
    }
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    public List<GetContainerInstanceContainerResourceConfig> resourceConfigs() {
        return this.resourceConfigs == null ? List.of() : this.resourceConfigs;
    }
    public List<GetContainerInstanceContainerSecurityContext> securityContexts() {
        return this.securityContexts == null ? List.of() : this.securityContexts;
    }
    /**
     * @return The current state of the container instance.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags == null ? Map.of() : this.systemTags;
    }
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    public Optional<String> timeTerminated() {
        return Optional.ofNullable(this.timeTerminated);
    }
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    public List<GetContainerInstanceContainerVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    public Optional<String> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> arguments;
        private @Nullable String availabilityDomain;
        private @Nullable List<String> commands;
        private @Nullable String compartmentId;
        private @Nullable String containerId;
        private @Nullable String containerInstanceId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> environmentVariables;
        private @Nullable Integer exitCode;
        private @Nullable String faultDomain;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable List<GetContainerInstanceContainerHealthCheck> healthChecks;
        private @Nullable String imageUrl;
        private @Nullable Boolean isResourcePrincipalDisabled;
        private @Nullable String lifecycleDetails;
        private @Nullable List<GetContainerInstanceContainerResourceConfig> resourceConfigs;
        private @Nullable List<GetContainerInstanceContainerSecurityContext> securityContexts;
        private @Nullable String state;
        private @Nullable Map<String,Object> systemTags;
        private @Nullable String timeCreated;
        private @Nullable String timeTerminated;
        private @Nullable String timeUpdated;
        private @Nullable List<GetContainerInstanceContainerVolumeMount> volumeMounts;
        private @Nullable String workingDirectory;
        public Builder() {}
        public Builder(GetContainerInstanceContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.commands = defaults.commands;
    	      this.compartmentId = defaults.compartmentId;
    	      this.containerId = defaults.containerId;
    	      this.containerInstanceId = defaults.containerInstanceId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.exitCode = defaults.exitCode;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.healthChecks = defaults.healthChecks;
    	      this.imageUrl = defaults.imageUrl;
    	      this.isResourcePrincipalDisabled = defaults.isResourcePrincipalDisabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.resourceConfigs = defaults.resourceConfigs;
    	      this.securityContexts = defaults.securityContexts;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeTerminated = defaults.timeTerminated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        @CustomType.Setter
        public Builder arguments(@Nullable List<String> arguments) {
            this.arguments = arguments;
            return this;
        }
        public Builder arguments(String... arguments) {
            return arguments(List.of(arguments));
        }
        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(@Nullable String containerId) {
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder containerInstanceId(@Nullable String containerInstanceId) {
            this.containerInstanceId = containerInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(@Nullable Map<String,Object> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder exitCode(@Nullable Integer exitCode) {
            this.exitCode = exitCode;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(@Nullable String faultDomain) {
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder healthChecks(@Nullable List<GetContainerInstanceContainerHealthCheck> healthChecks) {
            this.healthChecks = healthChecks;
            return this;
        }
        public Builder healthChecks(GetContainerInstanceContainerHealthCheck... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        @CustomType.Setter
        public Builder imageUrl(@Nullable String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder isResourcePrincipalDisabled(@Nullable Boolean isResourcePrincipalDisabled) {
            this.isResourcePrincipalDisabled = isResourcePrincipalDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder resourceConfigs(@Nullable List<GetContainerInstanceContainerResourceConfig> resourceConfigs) {
            this.resourceConfigs = resourceConfigs;
            return this;
        }
        public Builder resourceConfigs(GetContainerInstanceContainerResourceConfig... resourceConfigs) {
            return resourceConfigs(List.of(resourceConfigs));
        }
        @CustomType.Setter
        public Builder securityContexts(@Nullable List<GetContainerInstanceContainerSecurityContext> securityContexts) {
            this.securityContexts = securityContexts;
            return this;
        }
        public Builder securityContexts(GetContainerInstanceContainerSecurityContext... securityContexts) {
            return securityContexts(List.of(securityContexts));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(@Nullable Map<String,Object> systemTags) {
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeTerminated(@Nullable String timeTerminated) {
            this.timeTerminated = timeTerminated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<GetContainerInstanceContainerVolumeMount> volumeMounts) {
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(GetContainerInstanceContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDirectory(@Nullable String workingDirectory) {
            this.workingDirectory = workingDirectory;
            return this;
        }
        public GetContainerInstanceContainer build() {
            final var o = new GetContainerInstanceContainer();
            o.arguments = arguments;
            o.availabilityDomain = availabilityDomain;
            o.commands = commands;
            o.compartmentId = compartmentId;
            o.containerId = containerId;
            o.containerInstanceId = containerInstanceId;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.environmentVariables = environmentVariables;
            o.exitCode = exitCode;
            o.faultDomain = faultDomain;
            o.freeformTags = freeformTags;
            o.healthChecks = healthChecks;
            o.imageUrl = imageUrl;
            o.isResourcePrincipalDisabled = isResourcePrincipalDisabled;
            o.lifecycleDetails = lifecycleDetails;
            o.resourceConfigs = resourceConfigs;
            o.securityContexts = securityContexts;
            o.state = state;
            o.systemTags = systemTags;
            o.timeCreated = timeCreated;
            o.timeTerminated = timeTerminated;
            o.timeUpdated = timeUpdated;
            o.volumeMounts = volumeMounts;
            o.workingDirectory = workingDirectory;
            return o;
        }
    }
}
