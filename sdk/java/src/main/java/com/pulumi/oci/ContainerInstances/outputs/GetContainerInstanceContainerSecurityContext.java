// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceContainerSecurityContextCapability;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetContainerInstanceContainerSecurityContext {
    private List<GetContainerInstanceContainerSecurityContextCapability> capabilities;
    private Boolean isNonRootUserCheckEnabled;
    private Boolean isRootFileSystemReadonly;
    private Integer runAsGroup;
    private Integer runAsUser;
    private String securityContextType;

    private GetContainerInstanceContainerSecurityContext() {}
    public List<GetContainerInstanceContainerSecurityContextCapability> capabilities() {
        return this.capabilities;
    }
    public Boolean isNonRootUserCheckEnabled() {
        return this.isNonRootUserCheckEnabled;
    }
    public Boolean isRootFileSystemReadonly() {
        return this.isRootFileSystemReadonly;
    }
    public Integer runAsGroup() {
        return this.runAsGroup;
    }
    public Integer runAsUser() {
        return this.runAsUser;
    }
    public String securityContextType() {
        return this.securityContextType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceContainerSecurityContext defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetContainerInstanceContainerSecurityContextCapability> capabilities;
        private Boolean isNonRootUserCheckEnabled;
        private Boolean isRootFileSystemReadonly;
        private Integer runAsGroup;
        private Integer runAsUser;
        private String securityContextType;
        public Builder() {}
        public Builder(GetContainerInstanceContainerSecurityContext defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.isNonRootUserCheckEnabled = defaults.isNonRootUserCheckEnabled;
    	      this.isRootFileSystemReadonly = defaults.isRootFileSystemReadonly;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.securityContextType = defaults.securityContextType;
        }

        @CustomType.Setter
        public Builder capabilities(List<GetContainerInstanceContainerSecurityContextCapability> capabilities) {
            if (capabilities == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerSecurityContext", "capabilities");
            }
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(GetContainerInstanceContainerSecurityContextCapability... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder isNonRootUserCheckEnabled(Boolean isNonRootUserCheckEnabled) {
            if (isNonRootUserCheckEnabled == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerSecurityContext", "isNonRootUserCheckEnabled");
            }
            this.isNonRootUserCheckEnabled = isNonRootUserCheckEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRootFileSystemReadonly(Boolean isRootFileSystemReadonly) {
            if (isRootFileSystemReadonly == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerSecurityContext", "isRootFileSystemReadonly");
            }
            this.isRootFileSystemReadonly = isRootFileSystemReadonly;
            return this;
        }
        @CustomType.Setter
        public Builder runAsGroup(Integer runAsGroup) {
            if (runAsGroup == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerSecurityContext", "runAsGroup");
            }
            this.runAsGroup = runAsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(Integer runAsUser) {
            if (runAsUser == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerSecurityContext", "runAsUser");
            }
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder securityContextType(String securityContextType) {
            if (securityContextType == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerSecurityContext", "securityContextType");
            }
            this.securityContextType = securityContextType;
            return this;
        }
        public GetContainerInstanceContainerSecurityContext build() {
            final var _resultValue = new GetContainerInstanceContainerSecurityContext();
            _resultValue.capabilities = capabilities;
            _resultValue.isNonRootUserCheckEnabled = isNonRootUserCheckEnabled;
            _resultValue.isRootFileSystemReadonly = isRootFileSystemReadonly;
            _resultValue.runAsGroup = runAsGroup;
            _resultValue.runAsUser = runAsUser;
            _resultValue.securityContextType = securityContextType;
            return _resultValue;
        }
    }
}
