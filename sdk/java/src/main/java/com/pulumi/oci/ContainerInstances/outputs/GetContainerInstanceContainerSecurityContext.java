// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerInstanceContainerSecurityContext {
    private @Nullable Boolean isNonRootUserCheckEnabled;
    private @Nullable Boolean isRootFileSystemReadonly;
    private @Nullable Integer runAsGroup;
    private @Nullable Integer runAsUser;
    private @Nullable String securityContextType;

    private GetContainerInstanceContainerSecurityContext() {}
    public Optional<Boolean> isNonRootUserCheckEnabled() {
        return Optional.ofNullable(this.isNonRootUserCheckEnabled);
    }
    public Optional<Boolean> isRootFileSystemReadonly() {
        return Optional.ofNullable(this.isRootFileSystemReadonly);
    }
    public Optional<Integer> runAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }
    public Optional<Integer> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }
    public Optional<String> securityContextType() {
        return Optional.ofNullable(this.securityContextType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceContainerSecurityContext defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isNonRootUserCheckEnabled;
        private @Nullable Boolean isRootFileSystemReadonly;
        private @Nullable Integer runAsGroup;
        private @Nullable Integer runAsUser;
        private @Nullable String securityContextType;
        public Builder() {}
        public Builder(GetContainerInstanceContainerSecurityContext defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isNonRootUserCheckEnabled = defaults.isNonRootUserCheckEnabled;
    	      this.isRootFileSystemReadonly = defaults.isRootFileSystemReadonly;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.securityContextType = defaults.securityContextType;
        }

        @CustomType.Setter
        public Builder isNonRootUserCheckEnabled(@Nullable Boolean isNonRootUserCheckEnabled) {
            this.isNonRootUserCheckEnabled = isNonRootUserCheckEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRootFileSystemReadonly(@Nullable Boolean isRootFileSystemReadonly) {
            this.isRootFileSystemReadonly = isRootFileSystemReadonly;
            return this;
        }
        @CustomType.Setter
        public Builder runAsGroup(@Nullable Integer runAsGroup) {
            this.runAsGroup = runAsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(@Nullable Integer runAsUser) {
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder securityContextType(@Nullable String securityContextType) {
            this.securityContextType = securityContextType;
            return this;
        }
        public GetContainerInstanceContainerSecurityContext build() {
            final var o = new GetContainerInstanceContainerSecurityContext();
            o.isNonRootUserCheckEnabled = isNonRootUserCheckEnabled;
            o.isRootFileSystemReadonly = isRootFileSystemReadonly;
            o.runAsGroup = runAsGroup;
            o.runAsUser = runAsUser;
            o.securityContextType = securityContextType;
            return o;
        }
    }
}
