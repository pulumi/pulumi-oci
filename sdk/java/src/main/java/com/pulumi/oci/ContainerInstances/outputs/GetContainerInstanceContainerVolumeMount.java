// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetContainerInstanceContainerVolumeMount {
    private Boolean isReadOnly;
    private String mountPath;
    private Integer partition;
    private String subPath;
    private String volumeName;

    private GetContainerInstanceContainerVolumeMount() {}
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }
    public String mountPath() {
        return this.mountPath;
    }
    public Integer partition() {
        return this.partition;
    }
    public String subPath() {
        return this.subPath;
    }
    public String volumeName() {
        return this.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceContainerVolumeMount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isReadOnly;
        private String mountPath;
        private Integer partition;
        private String subPath;
        private String volumeName;
        public Builder() {}
        public Builder(GetContainerInstanceContainerVolumeMount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isReadOnly = defaults.isReadOnly;
    	      this.mountPath = defaults.mountPath;
    	      this.partition = defaults.partition;
    	      this.subPath = defaults.subPath;
    	      this.volumeName = defaults.volumeName;
        }

        @CustomType.Setter
        public Builder isReadOnly(Boolean isReadOnly) {
            if (isReadOnly == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerVolumeMount", "isReadOnly");
            }
            this.isReadOnly = isReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder mountPath(String mountPath) {
            if (mountPath == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerVolumeMount", "mountPath");
            }
            this.mountPath = mountPath;
            return this;
        }
        @CustomType.Setter
        public Builder partition(Integer partition) {
            if (partition == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerVolumeMount", "partition");
            }
            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder subPath(String subPath) {
            if (subPath == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerVolumeMount", "subPath");
            }
            this.subPath = subPath;
            return this;
        }
        @CustomType.Setter
        public Builder volumeName(String volumeName) {
            if (volumeName == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceContainerVolumeMount", "volumeName");
            }
            this.volumeName = volumeName;
            return this;
        }
        public GetContainerInstanceContainerVolumeMount build() {
            final var _resultValue = new GetContainerInstanceContainerVolumeMount();
            _resultValue.isReadOnly = isReadOnly;
            _resultValue.mountPath = mountPath;
            _resultValue.partition = partition;
            _resultValue.subPath = subPath;
            _resultValue.volumeName = volumeName;
            return _resultValue;
        }
    }
}
