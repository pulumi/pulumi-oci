// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerInstanceContainerVolumeMount {
    private @Nullable Boolean isReadOnly;
    private @Nullable String mountPath;
    private @Nullable Integer partition;
    private @Nullable String subPath;
    private @Nullable String volumeName;

    private GetContainerInstanceContainerVolumeMount() {}
    public Optional<Boolean> isReadOnly() {
        return Optional.ofNullable(this.isReadOnly);
    }
    public Optional<String> mountPath() {
        return Optional.ofNullable(this.mountPath);
    }
    public Optional<Integer> partition() {
        return Optional.ofNullable(this.partition);
    }
    public Optional<String> subPath() {
        return Optional.ofNullable(this.subPath);
    }
    public Optional<String> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceContainerVolumeMount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isReadOnly;
        private @Nullable String mountPath;
        private @Nullable Integer partition;
        private @Nullable String subPath;
        private @Nullable String volumeName;
        public Builder() {}
        public Builder(GetContainerInstanceContainerVolumeMount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isReadOnly = defaults.isReadOnly;
    	      this.mountPath = defaults.mountPath;
    	      this.partition = defaults.partition;
    	      this.subPath = defaults.subPath;
    	      this.volumeName = defaults.volumeName;
        }

        @CustomType.Setter
        public Builder isReadOnly(@Nullable Boolean isReadOnly) {
            this.isReadOnly = isReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder mountPath(@Nullable String mountPath) {
            this.mountPath = mountPath;
            return this;
        }
        @CustomType.Setter
        public Builder partition(@Nullable Integer partition) {
            this.partition = partition;
            return this;
        }
        @CustomType.Setter
        public Builder subPath(@Nullable String subPath) {
            this.subPath = subPath;
            return this;
        }
        @CustomType.Setter
        public Builder volumeName(@Nullable String volumeName) {
            this.volumeName = volumeName;
            return this;
        }
        public GetContainerInstanceContainerVolumeMount build() {
            final var o = new GetContainerInstanceContainerVolumeMount();
            o.isReadOnly = isReadOnly;
            o.mountPath = mountPath;
            o.partition = partition;
            o.subPath = subPath;
            o.volumeName = volumeName;
            return o;
        }
    }
}
