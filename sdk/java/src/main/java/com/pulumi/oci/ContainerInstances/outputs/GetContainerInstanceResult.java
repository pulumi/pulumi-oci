// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceContainer;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceDnsConfig;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceImagePullSecret;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceShapeConfig;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceVnic;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceVolume;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerInstanceResult {
    /**
     * @return The availability domain to place the container instance.
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The number of containers on the container instance.
     * 
     */
    private @Nullable Integer containerCount;
    private String containerInstanceId;
    /**
     * @return The container restart policy is applied for all containers in container instance.
     * 
     */
    private @Nullable String containerRestartPolicy;
    /**
     * @return The containers on the container instance.
     * 
     */
    private @Nullable List<GetContainerInstanceContainer> containers;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return DNS settings for containers.
     * 
     */
    private @Nullable List<GetContainerInstanceDnsConfig> dnsConfigs;
    /**
     * @return The fault domain to place the container instance.
     * 
     */
    private @Nullable String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     * 
     */
    private @Nullable String gracefulShutdownTimeoutInSeconds;
    /**
     * @return An OCID that cannot be changed.
     * 
     */
    private @Nullable String id;
    /**
     * @return The image pulls secrets so you can access private registry to pull container images.
     * 
     */
    private @Nullable List<GetContainerInstanceImagePullSecret> imagePullSecrets;
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The shape of the container instance. The shape determines the number of OCPUs, amount of memory, and other resources that are allocated to a container instance.
     * 
     */
    private @Nullable String shape;
    /**
     * @return The shape configuration for a container instance. The shape configuration determines the resources thats are available to the container instance and its containers.
     * 
     */
    private @Nullable List<GetContainerInstanceShapeConfig> shapeConfigs;
    /**
     * @return The current state of the container instance.
     * 
     */
    private @Nullable String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    private @Nullable Map<String,Object> systemTags;
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return The virtual networks available to the containers in the container instance.
     * 
     */
    private @Nullable List<GetContainerInstanceVnic> vnics;
    /**
     * @return The number of volumes that are attached to the container instance.
     * 
     */
    private @Nullable Integer volumeCount;
    /**
     * @return A volume is a directory with data that is accessible across multiple containers in a container instance.
     * 
     */
    private @Nullable List<GetContainerInstanceVolume> volumes;

    private GetContainerInstanceResult() {}
    /**
     * @return The availability domain to place the container instance.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The number of containers on the container instance.
     * 
     */
    public Optional<Integer> containerCount() {
        return Optional.ofNullable(this.containerCount);
    }
    public String containerInstanceId() {
        return this.containerInstanceId;
    }
    /**
     * @return The container restart policy is applied for all containers in container instance.
     * 
     */
    public Optional<String> containerRestartPolicy() {
        return Optional.ofNullable(this.containerRestartPolicy);
    }
    /**
     * @return The containers on the container instance.
     * 
     */
    public List<GetContainerInstanceContainer> containers() {
        return this.containers == null ? List.of() : this.containers;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return DNS settings for containers.
     * 
     */
    public List<GetContainerInstanceDnsConfig> dnsConfigs() {
        return this.dnsConfigs == null ? List.of() : this.dnsConfigs;
    }
    /**
     * @return The fault domain to place the container instance.
     * 
     */
    public Optional<String> faultDomain() {
        return Optional.ofNullable(this.faultDomain);
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     * 
     */
    public Optional<String> gracefulShutdownTimeoutInSeconds() {
        return Optional.ofNullable(this.gracefulShutdownTimeoutInSeconds);
    }
    /**
     * @return An OCID that cannot be changed.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The image pulls secrets so you can access private registry to pull container images.
     * 
     */
    public List<GetContainerInstanceImagePullSecret> imagePullSecrets() {
        return this.imagePullSecrets == null ? List.of() : this.imagePullSecrets;
    }
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The shape of the container instance. The shape determines the number of OCPUs, amount of memory, and other resources that are allocated to a container instance.
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return The shape configuration for a container instance. The shape configuration determines the resources thats are available to the container instance and its containers.
     * 
     */
    public List<GetContainerInstanceShapeConfig> shapeConfigs() {
        return this.shapeConfigs == null ? List.of() : this.shapeConfigs;
    }
    /**
     * @return The current state of the container instance.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags == null ? Map.of() : this.systemTags;
    }
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return The virtual networks available to the containers in the container instance.
     * 
     */
    public List<GetContainerInstanceVnic> vnics() {
        return this.vnics == null ? List.of() : this.vnics;
    }
    /**
     * @return The number of volumes that are attached to the container instance.
     * 
     */
    public Optional<Integer> volumeCount() {
        return Optional.ofNullable(this.volumeCount);
    }
    /**
     * @return A volume is a directory with data that is accessible across multiple containers in a container instance.
     * 
     */
    public List<GetContainerInstanceVolume> volumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityDomain;
        private @Nullable String compartmentId;
        private @Nullable Integer containerCount;
        private String containerInstanceId;
        private @Nullable String containerRestartPolicy;
        private @Nullable List<GetContainerInstanceContainer> containers;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String displayName;
        private @Nullable List<GetContainerInstanceDnsConfig> dnsConfigs;
        private @Nullable String faultDomain;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String gracefulShutdownTimeoutInSeconds;
        private @Nullable String id;
        private @Nullable List<GetContainerInstanceImagePullSecret> imagePullSecrets;
        private @Nullable String lifecycleDetails;
        private @Nullable String shape;
        private @Nullable List<GetContainerInstanceShapeConfig> shapeConfigs;
        private @Nullable String state;
        private @Nullable Map<String,Object> systemTags;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable List<GetContainerInstanceVnic> vnics;
        private @Nullable Integer volumeCount;
        private @Nullable List<GetContainerInstanceVolume> volumes;
        public Builder() {}
        public Builder(GetContainerInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.containerCount = defaults.containerCount;
    	      this.containerInstanceId = defaults.containerInstanceId;
    	      this.containerRestartPolicy = defaults.containerRestartPolicy;
    	      this.containers = defaults.containers;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.dnsConfigs = defaults.dnsConfigs;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gracefulShutdownTimeoutInSeconds = defaults.gracefulShutdownTimeoutInSeconds;
    	      this.id = defaults.id;
    	      this.imagePullSecrets = defaults.imagePullSecrets;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.shape = defaults.shape;
    	      this.shapeConfigs = defaults.shapeConfigs;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.vnics = defaults.vnics;
    	      this.volumeCount = defaults.volumeCount;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder containerCount(@Nullable Integer containerCount) {
            this.containerCount = containerCount;
            return this;
        }
        @CustomType.Setter
        public Builder containerInstanceId(String containerInstanceId) {
            this.containerInstanceId = Objects.requireNonNull(containerInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder containerRestartPolicy(@Nullable String containerRestartPolicy) {
            this.containerRestartPolicy = containerRestartPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder containers(@Nullable List<GetContainerInstanceContainer> containers) {
            this.containers = containers;
            return this;
        }
        public Builder containers(GetContainerInstanceContainer... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfigs(@Nullable List<GetContainerInstanceDnsConfig> dnsConfigs) {
            this.dnsConfigs = dnsConfigs;
            return this;
        }
        public Builder dnsConfigs(GetContainerInstanceDnsConfig... dnsConfigs) {
            return dnsConfigs(List.of(dnsConfigs));
        }
        @CustomType.Setter
        public Builder faultDomain(@Nullable String faultDomain) {
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder gracefulShutdownTimeoutInSeconds(@Nullable String gracefulShutdownTimeoutInSeconds) {
            this.gracefulShutdownTimeoutInSeconds = gracefulShutdownTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imagePullSecrets(@Nullable List<GetContainerInstanceImagePullSecret> imagePullSecrets) {
            this.imagePullSecrets = imagePullSecrets;
            return this;
        }
        public Builder imagePullSecrets(GetContainerInstanceImagePullSecret... imagePullSecrets) {
            return imagePullSecrets(List.of(imagePullSecrets));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder shapeConfigs(@Nullable List<GetContainerInstanceShapeConfig> shapeConfigs) {
            this.shapeConfigs = shapeConfigs;
            return this;
        }
        public Builder shapeConfigs(GetContainerInstanceShapeConfig... shapeConfigs) {
            return shapeConfigs(List.of(shapeConfigs));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(@Nullable Map<String,Object> systemTags) {
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder vnics(@Nullable List<GetContainerInstanceVnic> vnics) {
            this.vnics = vnics;
            return this;
        }
        public Builder vnics(GetContainerInstanceVnic... vnics) {
            return vnics(List.of(vnics));
        }
        @CustomType.Setter
        public Builder volumeCount(@Nullable Integer volumeCount) {
            this.volumeCount = volumeCount;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(@Nullable List<GetContainerInstanceVolume> volumes) {
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetContainerInstanceVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetContainerInstanceResult build() {
            final var o = new GetContainerInstanceResult();
            o.availabilityDomain = availabilityDomain;
            o.compartmentId = compartmentId;
            o.containerCount = containerCount;
            o.containerInstanceId = containerInstanceId;
            o.containerRestartPolicy = containerRestartPolicy;
            o.containers = containers;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.dnsConfigs = dnsConfigs;
            o.faultDomain = faultDomain;
            o.freeformTags = freeformTags;
            o.gracefulShutdownTimeoutInSeconds = gracefulShutdownTimeoutInSeconds;
            o.id = id;
            o.imagePullSecrets = imagePullSecrets;
            o.lifecycleDetails = lifecycleDetails;
            o.shape = shape;
            o.shapeConfigs = shapeConfigs;
            o.state = state;
            o.systemTags = systemTags;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.vnics = vnics;
            o.volumeCount = volumeCount;
            o.volumes = volumes;
            return o;
        }
    }
}
