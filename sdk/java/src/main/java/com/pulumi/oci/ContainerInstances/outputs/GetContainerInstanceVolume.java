// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstanceVolumeConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerInstanceVolume {
    /**
     * @return The volume type of the empty directory, can be either File Storage or Memory.
     * 
     */
    private @Nullable String backingStore;
    /**
     * @return Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
     * 
     */
    private @Nullable List<GetContainerInstanceVolumeConfig> configs;
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    private @Nullable String name;
    /**
     * @return The type of volume.
     * 
     */
    private @Nullable String volumeType;

    private GetContainerInstanceVolume() {}
    /**
     * @return The volume type of the empty directory, can be either File Storage or Memory.
     * 
     */
    public Optional<String> backingStore() {
        return Optional.ofNullable(this.backingStore);
    }
    /**
     * @return Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
     * 
     */
    public List<GetContainerInstanceVolumeConfig> configs() {
        return this.configs == null ? List.of() : this.configs;
    }
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The type of volume.
     * 
     */
    public Optional<String> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backingStore;
        private @Nullable List<GetContainerInstanceVolumeConfig> configs;
        private @Nullable String name;
        private @Nullable String volumeType;
        public Builder() {}
        public Builder(GetContainerInstanceVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backingStore = defaults.backingStore;
    	      this.configs = defaults.configs;
    	      this.name = defaults.name;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder backingStore(@Nullable String backingStore) {
            this.backingStore = backingStore;
            return this;
        }
        @CustomType.Setter
        public Builder configs(@Nullable List<GetContainerInstanceVolumeConfig> configs) {
            this.configs = configs;
            return this;
        }
        public Builder configs(GetContainerInstanceVolumeConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = volumeType;
            return this;
        }
        public GetContainerInstanceVolume build() {
            final var o = new GetContainerInstanceVolume();
            o.backingStore = backingStore;
            o.configs = configs;
            o.name = name;
            o.volumeType = volumeType;
            return o;
        }
    }
}
