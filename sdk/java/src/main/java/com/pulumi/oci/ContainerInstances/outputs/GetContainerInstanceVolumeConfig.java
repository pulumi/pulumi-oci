// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetContainerInstanceVolumeConfig {
    /**
     * @return The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
     * 
     */
    private String data;
    /**
     * @return The name of the file. The fileName should be unique across the volume.
     * 
     */
    private String fileName;
    /**
     * @return (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
     * 
     */
    private String path;

    private GetContainerInstanceVolumeConfig() {}
    /**
     * @return The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
     * 
     */
    public String data() {
        return this.data;
    }
    /**
     * @return The name of the file. The fileName should be unique across the volume.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    /**
     * @return (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
     * 
     */
    public String path() {
        return this.path;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstanceVolumeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String data;
        private String fileName;
        private String path;
        public Builder() {}
        public Builder(GetContainerInstanceVolumeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.data = defaults.data;
    	      this.fileName = defaults.fileName;
    	      this.path = defaults.path;
        }

        @CustomType.Setter
        public Builder data(String data) {
            if (data == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceVolumeConfig", "data");
            }
            this.data = data;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(String fileName) {
            if (fileName == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceVolumeConfig", "fileName");
            }
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetContainerInstanceVolumeConfig", "path");
            }
            this.path = path;
            return this;
        }
        public GetContainerInstanceVolumeConfig build() {
            final var _resultValue = new GetContainerInstanceVolumeConfig();
            _resultValue.data = data;
            _resultValue.fileName = fileName;
            _resultValue.path = path;
            return _resultValue;
        }
    }
}
