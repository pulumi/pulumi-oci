// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfig;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContext;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMount;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetContainerInstancesContainerInstanceCollectionItemContainer {
    private List<String> arguments;
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private String availabilityDomain;
    private List<String> commands;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return The OCID of the container.
     * 
     */
    private String containerId;
    private String containerInstanceId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    private Map<String,Object> environmentVariables;
    private Integer exitCode;
    /**
     * @return The fault domain to place the container instance.
     * 
     */
    private String faultDomain;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    private List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck> healthChecks;
    private String imageUrl;
    private Boolean isResourcePrincipalDisabled;
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    private String lifecycleDetails;
    private List<GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfig> resourceConfigs;
    private List<GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContext> securityContexts;
    /**
     * @return A filter to only return resources that match the given lifecycle state.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeCreated;
    private String timeTerminated;
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String timeUpdated;
    private List<GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMount> volumeMounts;
    private String workingDirectory;

    private GetContainerInstancesContainerInstanceCollectionItemContainer() {}
    public List<String> arguments() {
        return this.arguments;
    }
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    public List<String> commands() {
        return this.commands;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The OCID of the container.
     * 
     */
    public String containerId() {
        return this.containerId;
    }
    public String containerInstanceId() {
        return this.containerInstanceId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`.
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public Map<String,Object> environmentVariables() {
        return this.environmentVariables;
    }
    public Integer exitCode() {
        return this.exitCode;
    }
    /**
     * @return The fault domain to place the container instance.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    public List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck> healthChecks() {
        return this.healthChecks;
    }
    public String imageUrl() {
        return this.imageUrl;
    }
    public Boolean isResourcePrincipalDisabled() {
        return this.isResourcePrincipalDisabled;
    }
    /**
     * @return A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public List<GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfig> resourceConfigs() {
        return this.resourceConfigs;
    }
    public List<GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContext> securityContexts() {
        return this.securityContexts;
    }
    /**
     * @return A filter to only return resources that match the given lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`.
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public String timeTerminated() {
        return this.timeTerminated;
    }
    /**
     * @return The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public List<GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMount> volumeMounts() {
        return this.volumeMounts;
    }
    public String workingDirectory() {
        return this.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstancesContainerInstanceCollectionItemContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> arguments;
        private String availabilityDomain;
        private List<String> commands;
        private String compartmentId;
        private String containerId;
        private String containerInstanceId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> environmentVariables;
        private Integer exitCode;
        private String faultDomain;
        private Map<String,Object> freeformTags;
        private List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck> healthChecks;
        private String imageUrl;
        private Boolean isResourcePrincipalDisabled;
        private String lifecycleDetails;
        private List<GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfig> resourceConfigs;
        private List<GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContext> securityContexts;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeTerminated;
        private String timeUpdated;
        private List<GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMount> volumeMounts;
        private String workingDirectory;
        public Builder() {}
        public Builder(GetContainerInstancesContainerInstanceCollectionItemContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.commands = defaults.commands;
    	      this.compartmentId = defaults.compartmentId;
    	      this.containerId = defaults.containerId;
    	      this.containerInstanceId = defaults.containerInstanceId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.exitCode = defaults.exitCode;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.healthChecks = defaults.healthChecks;
    	      this.imageUrl = defaults.imageUrl;
    	      this.isResourcePrincipalDisabled = defaults.isResourcePrincipalDisabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.resourceConfigs = defaults.resourceConfigs;
    	      this.securityContexts = defaults.securityContexts;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeTerminated = defaults.timeTerminated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        @CustomType.Setter
        public Builder arguments(List<String> arguments) {
            this.arguments = Objects.requireNonNull(arguments);
            return this;
        }
        public Builder arguments(String... arguments) {
            return arguments(List.of(arguments));
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        @CustomType.Setter
        public Builder commands(List<String> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder containerId(String containerId) {
            this.containerId = Objects.requireNonNull(containerId);
            return this;
        }
        @CustomType.Setter
        public Builder containerInstanceId(String containerInstanceId) {
            this.containerInstanceId = Objects.requireNonNull(containerInstanceId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(Map<String,Object> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }
        @CustomType.Setter
        public Builder exitCode(Integer exitCode) {
            this.exitCode = Objects.requireNonNull(exitCode);
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            this.faultDomain = Objects.requireNonNull(faultDomain);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder healthChecks(List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck> healthChecks) {
            this.healthChecks = Objects.requireNonNull(healthChecks);
            return this;
        }
        public Builder healthChecks(GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        @CustomType.Setter
        public Builder imageUrl(String imageUrl) {
            this.imageUrl = Objects.requireNonNull(imageUrl);
            return this;
        }
        @CustomType.Setter
        public Builder isResourcePrincipalDisabled(Boolean isResourcePrincipalDisabled) {
            this.isResourcePrincipalDisabled = Objects.requireNonNull(isResourcePrincipalDisabled);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder resourceConfigs(List<GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfig> resourceConfigs) {
            this.resourceConfigs = Objects.requireNonNull(resourceConfigs);
            return this;
        }
        public Builder resourceConfigs(GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfig... resourceConfigs) {
            return resourceConfigs(List.of(resourceConfigs));
        }
        @CustomType.Setter
        public Builder securityContexts(List<GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContext> securityContexts) {
            this.securityContexts = Objects.requireNonNull(securityContexts);
            return this;
        }
        public Builder securityContexts(GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContext... securityContexts) {
            return securityContexts(List.of(securityContexts));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeTerminated(String timeTerminated) {
            this.timeTerminated = Objects.requireNonNull(timeTerminated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(List<GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMount> volumeMounts) {
            this.volumeMounts = Objects.requireNonNull(volumeMounts);
            return this;
        }
        public Builder volumeMounts(GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDirectory(String workingDirectory) {
            this.workingDirectory = Objects.requireNonNull(workingDirectory);
            return this;
        }
        public GetContainerInstancesContainerInstanceCollectionItemContainer build() {
            final var o = new GetContainerInstancesContainerInstanceCollectionItemContainer();
            o.arguments = arguments;
            o.availabilityDomain = availabilityDomain;
            o.commands = commands;
            o.compartmentId = compartmentId;
            o.containerId = containerId;
            o.containerInstanceId = containerInstanceId;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.environmentVariables = environmentVariables;
            o.exitCode = exitCode;
            o.faultDomain = faultDomain;
            o.freeformTags = freeformTags;
            o.healthChecks = healthChecks;
            o.imageUrl = imageUrl;
            o.isResourcePrincipalDisabled = isResourcePrincipalDisabled;
            o.lifecycleDetails = lifecycleDetails;
            o.resourceConfigs = resourceConfigs;
            o.securityContexts = securityContexts;
            o.state = state;
            o.systemTags = systemTags;
            o.timeCreated = timeCreated;
            o.timeTerminated = timeTerminated;
            o.timeUpdated = timeUpdated;
            o.volumeMounts = volumeMounts;
            o.workingDirectory = workingDirectory;
            return o;
        }
    }
}
