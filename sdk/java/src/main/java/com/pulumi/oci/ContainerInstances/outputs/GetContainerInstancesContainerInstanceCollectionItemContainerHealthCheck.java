// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck {
    private List<String> commands;
    private String failureAction;
    private Integer failureThreshold;
    private List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader> headers;
    private String healthCheckType;
    private Integer initialDelayInSeconds;
    private Integer intervalInSeconds;
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    private String name;
    /**
     * @return (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
     * 
     */
    private String path;
    private Integer port;
    private String status;
    private String statusDetails;
    private Integer successThreshold;
    private Integer timeoutInSeconds;

    private GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck() {}
    public List<String> commands() {
        return this.commands;
    }
    public String failureAction() {
        return this.failureAction;
    }
    public Integer failureThreshold() {
        return this.failureThreshold;
    }
    public List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader> headers() {
        return this.headers;
    }
    public String healthCheckType() {
        return this.healthCheckType;
    }
    public Integer initialDelayInSeconds() {
        return this.initialDelayInSeconds;
    }
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
     * 
     */
    public String path() {
        return this.path;
    }
    public Integer port() {
        return this.port;
    }
    public String status() {
        return this.status;
    }
    public String statusDetails() {
        return this.statusDetails;
    }
    public Integer successThreshold() {
        return this.successThreshold;
    }
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> commands;
        private String failureAction;
        private Integer failureThreshold;
        private List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader> headers;
        private String healthCheckType;
        private Integer initialDelayInSeconds;
        private Integer intervalInSeconds;
        private String name;
        private String path;
        private Integer port;
        private String status;
        private String statusDetails;
        private Integer successThreshold;
        private Integer timeoutInSeconds;
        public Builder() {}
        public Builder(GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.failureAction = defaults.failureAction;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.headers = defaults.headers;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.initialDelayInSeconds = defaults.initialDelayInSeconds;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.status = defaults.status;
    	      this.statusDetails = defaults.statusDetails;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
        }

        @CustomType.Setter
        public Builder commands(List<String> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder failureAction(String failureAction) {
            this.failureAction = Objects.requireNonNull(failureAction);
            return this;
        }
        @CustomType.Setter
        public Builder failureThreshold(Integer failureThreshold) {
            this.failureThreshold = Objects.requireNonNull(failureThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder headers(List<GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }
        public Builder headers(GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder healthCheckType(String healthCheckType) {
            this.healthCheckType = Objects.requireNonNull(healthCheckType);
            return this;
        }
        @CustomType.Setter
        public Builder initialDelayInSeconds(Integer initialDelayInSeconds) {
            this.initialDelayInSeconds = Objects.requireNonNull(initialDelayInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            this.intervalInSeconds = Objects.requireNonNull(intervalInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusDetails(String statusDetails) {
            this.statusDetails = Objects.requireNonNull(statusDetails);
            return this;
        }
        @CustomType.Setter
        public Builder successThreshold(Integer successThreshold) {
            this.successThreshold = Objects.requireNonNull(successThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            this.timeoutInSeconds = Objects.requireNonNull(timeoutInSeconds);
            return this;
        }
        public GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck build() {
            final var o = new GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheck();
            o.commands = commands;
            o.failureAction = failureAction;
            o.failureThreshold = failureThreshold;
            o.headers = headers;
            o.healthCheckType = healthCheckType;
            o.initialDelayInSeconds = initialDelayInSeconds;
            o.intervalInSeconds = intervalInSeconds;
            o.name = name;
            o.path = path;
            o.port = port;
            o.status = status;
            o.statusDetails = statusDetails;
            o.successThreshold = successThreshold;
            o.timeoutInSeconds = timeoutInSeconds;
            return o;
        }
    }
}
