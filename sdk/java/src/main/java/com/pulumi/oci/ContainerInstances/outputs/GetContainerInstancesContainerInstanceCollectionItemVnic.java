// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetContainerInstancesContainerInstanceCollectionItemVnic {
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    private String hostnameLabel;
    private Boolean isPublicIpAssigned;
    private List<String> nsgIds;
    private String privateIp;
    private Boolean skipSourceDestCheck;
    private String subnetId;
    /**
     * @return The ID of the Virtual Network Interface Card (VNIC) over which Containers accessing this network can communicate with the larger Virtual Client Network.
     * 
     */
    private String vnicId;

    private GetContainerInstancesContainerInstanceCollectionItemVnic() {}
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    public String hostnameLabel() {
        return this.hostnameLabel;
    }
    public Boolean isPublicIpAssigned() {
        return this.isPublicIpAssigned;
    }
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    public String privateIp() {
        return this.privateIp;
    }
    public Boolean skipSourceDestCheck() {
        return this.skipSourceDestCheck;
    }
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The ID of the Virtual Network Interface Card (VNIC) over which Containers accessing this network can communicate with the larger Virtual Client Network.
     * 
     */
    public String vnicId() {
        return this.vnicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstancesContainerInstanceCollectionItemVnic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String hostnameLabel;
        private Boolean isPublicIpAssigned;
        private List<String> nsgIds;
        private String privateIp;
        private Boolean skipSourceDestCheck;
        private String subnetId;
        private String vnicId;
        public Builder() {}
        public Builder(GetContainerInstancesContainerInstanceCollectionItemVnic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.isPublicIpAssigned = defaults.isPublicIpAssigned;
    	      this.nsgIds = defaults.nsgIds;
    	      this.privateIp = defaults.privateIp;
    	      this.skipSourceDestCheck = defaults.skipSourceDestCheck;
    	      this.subnetId = defaults.subnetId;
    	      this.vnicId = defaults.vnicId;
        }

        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder hostnameLabel(String hostnameLabel) {
            this.hostnameLabel = Objects.requireNonNull(hostnameLabel);
            return this;
        }
        @CustomType.Setter
        public Builder isPublicIpAssigned(Boolean isPublicIpAssigned) {
            this.isPublicIpAssigned = Objects.requireNonNull(isPublicIpAssigned);
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            this.nsgIds = Objects.requireNonNull(nsgIds);
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder privateIp(String privateIp) {
            this.privateIp = Objects.requireNonNull(privateIp);
            return this;
        }
        @CustomType.Setter
        public Builder skipSourceDestCheck(Boolean skipSourceDestCheck) {
            this.skipSourceDestCheck = Objects.requireNonNull(skipSourceDestCheck);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        @CustomType.Setter
        public Builder vnicId(String vnicId) {
            this.vnicId = Objects.requireNonNull(vnicId);
            return this;
        }
        public GetContainerInstancesContainerInstanceCollectionItemVnic build() {
            final var o = new GetContainerInstancesContainerInstanceCollectionItemVnic();
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.hostnameLabel = hostnameLabel;
            o.isPublicIpAssigned = isPublicIpAssigned;
            o.nsgIds = nsgIds;
            o.privateIp = privateIp;
            o.skipSourceDestCheck = skipSourceDestCheck;
            o.subnetId = subnetId;
            o.vnicId = vnicId;
            return o;
        }
    }
}
