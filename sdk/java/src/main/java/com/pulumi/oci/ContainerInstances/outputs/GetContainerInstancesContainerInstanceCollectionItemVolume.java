// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.ContainerInstances.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.ContainerInstances.outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetContainerInstancesContainerInstanceCollectionItemVolume {
    /**
     * @return The volume type of the empty directory, can be either File Storage or Memory.
     * 
     */
    private String backingStore;
    /**
     * @return Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
     * 
     */
    private List<GetContainerInstancesContainerInstanceCollectionItemVolumeConfig> configs;
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    private String name;
    /**
     * @return The type of volume.
     * 
     */
    private String volumeType;

    private GetContainerInstancesContainerInstanceCollectionItemVolume() {}
    /**
     * @return The volume type of the empty directory, can be either File Storage or Memory.
     * 
     */
    public String backingStore() {
        return this.backingStore;
    }
    /**
     * @return Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
     * 
     */
    public List<GetContainerInstancesContainerInstanceCollectionItemVolumeConfig> configs() {
        return this.configs;
    }
    /**
     * @return The name of the volume. This must be unique within a single container instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of volume.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerInstancesContainerInstanceCollectionItemVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backingStore;
        private List<GetContainerInstancesContainerInstanceCollectionItemVolumeConfig> configs;
        private String name;
        private String volumeType;
        public Builder() {}
        public Builder(GetContainerInstancesContainerInstanceCollectionItemVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backingStore = defaults.backingStore;
    	      this.configs = defaults.configs;
    	      this.name = defaults.name;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder backingStore(String backingStore) {
            this.backingStore = Objects.requireNonNull(backingStore);
            return this;
        }
        @CustomType.Setter
        public Builder configs(List<GetContainerInstancesContainerInstanceCollectionItemVolumeConfig> configs) {
            this.configs = Objects.requireNonNull(configs);
            return this;
        }
        public Builder configs(GetContainerInstancesContainerInstanceCollectionItemVolumeConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public GetContainerInstancesContainerInstanceCollectionItemVolume build() {
            final var o = new GetContainerInstancesContainerInstanceCollectionItemVolume();
            o.backingStore = backingStore;
            o.configs = configs;
            o.name = name;
            o.volumeType = volumeType;
            return o;
        }
    }
}
