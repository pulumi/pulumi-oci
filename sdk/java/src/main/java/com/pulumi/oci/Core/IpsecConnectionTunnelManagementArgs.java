// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementBgpSessionInfoArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementDpdConfigArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementEncryptionDomainConfigArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementPhaseOneDetailArgs;
import com.pulumi.oci.Core.inputs.IpsecConnectionTunnelManagementPhaseTwoDetailArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpsecConnectionTunnelManagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpsecConnectionTunnelManagementArgs Empty = new IpsecConnectionTunnelManagementArgs();

    /**
     * Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
     * 
     * If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
     * 
     */
    @Import(name="bgpSessionInfos")
    private @Nullable Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>> bgpSessionInfos;

    /**
     * @return Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
     * 
     * If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
     * 
     */
    public Optional<Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>>> bgpSessionInfos() {
        return Optional.ofNullable(this.bgpSessionInfos);
    }

    /**
     * A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="dpdConfigs")
    private @Nullable Output<List<IpsecConnectionTunnelManagementDpdConfigArgs>> dpdConfigs;

    public Optional<Output<List<IpsecConnectionTunnelManagementDpdConfigArgs>>> dpdConfigs() {
        return Optional.ofNullable(this.dpdConfigs);
    }

    /**
     * Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
     * 
     */
    @Import(name="encryptionDomainConfig")
    private @Nullable Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs> encryptionDomainConfig;

    /**
     * @return Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
     * 
     */
    public Optional<Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs>> encryptionDomainConfig() {
        return Optional.ofNullable(this.encryptionDomainConfig);
    }

    /**
     * Internet Key Exchange protocol version.
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<String> ikeVersion;

    /**
     * @return Internet Key Exchange protocol version.
     * 
     */
    public Optional<Output<String>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * The OCID of the IPSec connection.
     * 
     */
    @Import(name="ipsecId", required=true)
    private Output<String> ipsecId;

    /**
     * @return The OCID of the IPSec connection.
     * 
     */
    public Output<String> ipsecId() {
        return this.ipsecId;
    }

    /**
     * By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
     * 
     * The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
     * 
     * The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
     * 
     */
    @Import(name="natTranslationEnabled")
    private @Nullable Output<String> natTranslationEnabled;

    /**
     * @return By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
     * 
     * The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
     * 
     * The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
     * 
     */
    public Optional<Output<String>> natTranslationEnabled() {
        return Optional.ofNullable(this.natTranslationEnabled);
    }

    /**
     * Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
     * 
     */
    @Import(name="oracleCanInitiate")
    private @Nullable Output<String> oracleCanInitiate;

    /**
     * @return Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
     * 
     */
    public Optional<Output<String>> oracleCanInitiate() {
        return Optional.ofNullable(this.oracleCanInitiate);
    }

    /**
     * Configuration details for IKE phase one (ISAKMP) configuration parameters.
     * 
     * See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
     * 
     */
    @Import(name="phaseOneDetails")
    private @Nullable Output<List<IpsecConnectionTunnelManagementPhaseOneDetailArgs>> phaseOneDetails;

    /**
     * @return Configuration details for IKE phase one (ISAKMP) configuration parameters.
     * 
     * See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
     * 
     */
    public Optional<Output<List<IpsecConnectionTunnelManagementPhaseOneDetailArgs>>> phaseOneDetails() {
        return Optional.ofNullable(this.phaseOneDetails);
    }

    /**
     * Configuration details for IPSec phase two configuration parameters.
     * 
     * See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
     * 
     */
    @Import(name="phaseTwoDetails")
    private @Nullable Output<List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs>> phaseTwoDetails;

    /**
     * @return Configuration details for IPSec phase two configuration parameters.
     * 
     * See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
     * 
     */
    public Optional<Output<List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs>>> phaseTwoDetails() {
        return Optional.ofNullable(this.phaseTwoDetails);
    }

    /**
     * The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
     * 
     */
    @Import(name="routing")
    private @Nullable Output<String> routing;

    /**
     * @return The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
     * 
     */
    public Optional<Output<String>> routing() {
        return Optional.ofNullable(this.routing);
    }

    /**
     * The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
     * 
     */
    @Import(name="sharedSecret")
    private @Nullable Output<String> sharedSecret;

    /**
     * @return The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
     * 
     */
    public Optional<Output<String>> sharedSecret() {
        return Optional.ofNullable(this.sharedSecret);
    }

    /**
     * The OCID of the IPSec connection&#39;s tunnel.
     * 
     */
    @Import(name="tunnelId", required=true)
    private Output<String> tunnelId;

    /**
     * @return The OCID of the IPSec connection&#39;s tunnel.
     * 
     */
    public Output<String> tunnelId() {
        return this.tunnelId;
    }

    private IpsecConnectionTunnelManagementArgs() {}

    private IpsecConnectionTunnelManagementArgs(IpsecConnectionTunnelManagementArgs $) {
        this.bgpSessionInfos = $.bgpSessionInfos;
        this.displayName = $.displayName;
        this.dpdConfigs = $.dpdConfigs;
        this.encryptionDomainConfig = $.encryptionDomainConfig;
        this.ikeVersion = $.ikeVersion;
        this.ipsecId = $.ipsecId;
        this.natTranslationEnabled = $.natTranslationEnabled;
        this.oracleCanInitiate = $.oracleCanInitiate;
        this.phaseOneDetails = $.phaseOneDetails;
        this.phaseTwoDetails = $.phaseTwoDetails;
        this.routing = $.routing;
        this.sharedSecret = $.sharedSecret;
        this.tunnelId = $.tunnelId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecConnectionTunnelManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecConnectionTunnelManagementArgs $;

        public Builder() {
            $ = new IpsecConnectionTunnelManagementArgs();
        }

        public Builder(IpsecConnectionTunnelManagementArgs defaults) {
            $ = new IpsecConnectionTunnelManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(@Nullable Output<List<IpsecConnectionTunnelManagementBgpSessionInfoArgs>> bgpSessionInfos) {
            $.bgpSessionInfos = bgpSessionInfos;
            return this;
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(List<IpsecConnectionTunnelManagementBgpSessionInfoArgs> bgpSessionInfos) {
            return bgpSessionInfos(Output.of(bgpSessionInfos));
        }

        /**
         * @param bgpSessionInfos Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
         * 
         * If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder bgpSessionInfos(IpsecConnectionTunnelManagementBgpSessionInfoArgs... bgpSessionInfos) {
            return bgpSessionInfos(List.of(bgpSessionInfos));
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder dpdConfigs(@Nullable Output<List<IpsecConnectionTunnelManagementDpdConfigArgs>> dpdConfigs) {
            $.dpdConfigs = dpdConfigs;
            return this;
        }

        public Builder dpdConfigs(List<IpsecConnectionTunnelManagementDpdConfigArgs> dpdConfigs) {
            return dpdConfigs(Output.of(dpdConfigs));
        }

        public Builder dpdConfigs(IpsecConnectionTunnelManagementDpdConfigArgs... dpdConfigs) {
            return dpdConfigs(List.of(dpdConfigs));
        }

        /**
         * @param encryptionDomainConfig Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
         * 
         * @return builder
         * 
         */
        public Builder encryptionDomainConfig(@Nullable Output<IpsecConnectionTunnelManagementEncryptionDomainConfigArgs> encryptionDomainConfig) {
            $.encryptionDomainConfig = encryptionDomainConfig;
            return this;
        }

        /**
         * @param encryptionDomainConfig Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
         * 
         * @return builder
         * 
         */
        public Builder encryptionDomainConfig(IpsecConnectionTunnelManagementEncryptionDomainConfigArgs encryptionDomainConfig) {
            return encryptionDomainConfig(Output.of(encryptionDomainConfig));
        }

        /**
         * @param ikeVersion Internet Key Exchange protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(@Nullable Output<String> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        /**
         * @param ikeVersion Internet Key Exchange protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(String ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        /**
         * @param ipsecId The OCID of the IPSec connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecId(Output<String> ipsecId) {
            $.ipsecId = ipsecId;
            return this;
        }

        /**
         * @param ipsecId The OCID of the IPSec connection.
         * 
         * @return builder
         * 
         */
        public Builder ipsecId(String ipsecId) {
            return ipsecId(Output.of(ipsecId));
        }

        /**
         * @param natTranslationEnabled By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
         * 
         * The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
         * 
         * The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
         * 
         * @return builder
         * 
         */
        public Builder natTranslationEnabled(@Nullable Output<String> natTranslationEnabled) {
            $.natTranslationEnabled = natTranslationEnabled;
            return this;
        }

        /**
         * @param natTranslationEnabled By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
         * 
         * The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
         * 
         * The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
         * 
         * @return builder
         * 
         */
        public Builder natTranslationEnabled(String natTranslationEnabled) {
            return natTranslationEnabled(Output.of(natTranslationEnabled));
        }

        /**
         * @param oracleCanInitiate Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
         * 
         * @return builder
         * 
         */
        public Builder oracleCanInitiate(@Nullable Output<String> oracleCanInitiate) {
            $.oracleCanInitiate = oracleCanInitiate;
            return this;
        }

        /**
         * @param oracleCanInitiate Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
         * 
         * @return builder
         * 
         */
        public Builder oracleCanInitiate(String oracleCanInitiate) {
            return oracleCanInitiate(Output.of(oracleCanInitiate));
        }

        /**
         * @param phaseOneDetails Configuration details for IKE phase one (ISAKMP) configuration parameters.
         * 
         * See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
         * 
         * @return builder
         * 
         */
        public Builder phaseOneDetails(@Nullable Output<List<IpsecConnectionTunnelManagementPhaseOneDetailArgs>> phaseOneDetails) {
            $.phaseOneDetails = phaseOneDetails;
            return this;
        }

        /**
         * @param phaseOneDetails Configuration details for IKE phase one (ISAKMP) configuration parameters.
         * 
         * See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
         * 
         * @return builder
         * 
         */
        public Builder phaseOneDetails(List<IpsecConnectionTunnelManagementPhaseOneDetailArgs> phaseOneDetails) {
            return phaseOneDetails(Output.of(phaseOneDetails));
        }

        /**
         * @param phaseOneDetails Configuration details for IKE phase one (ISAKMP) configuration parameters.
         * 
         * See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
         * 
         * @return builder
         * 
         */
        public Builder phaseOneDetails(IpsecConnectionTunnelManagementPhaseOneDetailArgs... phaseOneDetails) {
            return phaseOneDetails(List.of(phaseOneDetails));
        }

        /**
         * @param phaseTwoDetails Configuration details for IPSec phase two configuration parameters.
         * 
         * See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
         * 
         * @return builder
         * 
         */
        public Builder phaseTwoDetails(@Nullable Output<List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs>> phaseTwoDetails) {
            $.phaseTwoDetails = phaseTwoDetails;
            return this;
        }

        /**
         * @param phaseTwoDetails Configuration details for IPSec phase two configuration parameters.
         * 
         * See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
         * 
         * @return builder
         * 
         */
        public Builder phaseTwoDetails(List<IpsecConnectionTunnelManagementPhaseTwoDetailArgs> phaseTwoDetails) {
            return phaseTwoDetails(Output.of(phaseTwoDetails));
        }

        /**
         * @param phaseTwoDetails Configuration details for IPSec phase two configuration parameters.
         * 
         * See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
         * 
         * @return builder
         * 
         */
        public Builder phaseTwoDetails(IpsecConnectionTunnelManagementPhaseTwoDetailArgs... phaseTwoDetails) {
            return phaseTwoDetails(List.of(phaseTwoDetails));
        }

        /**
         * @param routing The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
         * 
         * @return builder
         * 
         */
        public Builder routing(@Nullable Output<String> routing) {
            $.routing = routing;
            return this;
        }

        /**
         * @param routing The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
         * 
         * @return builder
         * 
         */
        public Builder routing(String routing) {
            return routing(Output.of(routing));
        }

        /**
         * @param sharedSecret The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(@Nullable Output<String> sharedSecret) {
            $.sharedSecret = sharedSecret;
            return this;
        }

        /**
         * @param sharedSecret The shared secret (pre-shared key) to use for the IPSec tunnel. If you don&#39;t provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(String sharedSecret) {
            return sharedSecret(Output.of(sharedSecret));
        }

        /**
         * @param tunnelId The OCID of the IPSec connection&#39;s tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId The OCID of the IPSec connection&#39;s tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        public IpsecConnectionTunnelManagementArgs build() {
            if ($.ipsecId == null) {
                throw new MissingRequiredPropertyException("IpsecConnectionTunnelManagementArgs", "ipsecId");
            }
            if ($.tunnelId == null) {
                throw new MissingRequiredPropertyException("IpsecConnectionTunnelManagementArgs", "tunnelId");
            }
            return $;
        }
    }

}
