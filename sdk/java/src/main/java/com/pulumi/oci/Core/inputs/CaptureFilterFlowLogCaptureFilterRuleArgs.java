// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Core.inputs.CaptureFilterFlowLogCaptureFilterRuleIcmpOptionsArgs;
import com.pulumi.oci.Core.inputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptionsArgs;
import com.pulumi.oci.Core.inputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaptureFilterFlowLogCaptureFilterRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CaptureFilterFlowLogCaptureFilterRuleArgs Empty = new CaptureFilterFlowLogCaptureFilterRuleArgs();

    /**
     * (Updatable) Traffic to this CIDR will be captured in the flow log.
     * 
     */
    @Import(name="destinationCidr")
    private @Nullable Output<String> destinationCidr;

    /**
     * @return (Updatable) Traffic to this CIDR will be captured in the flow log.
     * 
     */
    public Optional<Output<String>> destinationCidr() {
        return Optional.ofNullable(this.destinationCidr);
    }

    /**
     * (Updatable) Type or types of flow logs to store. `ALL` includes records for both accepted traffic and rejected traffic.
     * 
     */
    @Import(name="flowLogType")
    private @Nullable Output<String> flowLogType;

    /**
     * @return (Updatable) Type or types of flow logs to store. `ALL` includes records for both accepted traffic and rejected traffic.
     * 
     */
    public Optional<Output<String>> flowLogType() {
        return Optional.ofNullable(this.flowLogType);
    }

    /**
     * (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
     * 
     */
    @Import(name="icmpOptions")
    private @Nullable Output<CaptureFilterFlowLogCaptureFilterRuleIcmpOptionsArgs> icmpOptions;

    /**
     * @return (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
     * 
     */
    public Optional<Output<CaptureFilterFlowLogCaptureFilterRuleIcmpOptionsArgs>> icmpOptions() {
        return Optional.ofNullable(this.icmpOptions);
    }

    /**
     * (Updatable) Indicates whether a flow log capture filter rule is enabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Indicates whether a flow log capture filter rule is enabled.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) A lower number indicates a higher priority, range 0-9. Each rule must have a distinct priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return (Updatable) A lower number indicates a higher priority, range 0-9. Each rule must have a distinct priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * (Updatable) The transport protocol the filter uses.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return (Updatable) The transport protocol the filter uses.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * (Updatable) Include or exclude a ruleAction object.
     * 
     */
    @Import(name="ruleAction")
    private @Nullable Output<String> ruleAction;

    /**
     * @return (Updatable) Include or exclude a ruleAction object.
     * 
     */
    public Optional<Output<String>> ruleAction() {
        return Optional.ofNullable(this.ruleAction);
    }

    /**
     * (Updatable) Sampling interval as 1 of X, where X is an integer not greater than 100000.
     * 
     */
    @Import(name="samplingRate")
    private @Nullable Output<Integer> samplingRate;

    /**
     * @return (Updatable) Sampling interval as 1 of X, where X is an integer not greater than 100000.
     * 
     */
    public Optional<Output<Integer>> samplingRate() {
        return Optional.ofNullable(this.samplingRate);
    }

    /**
     * (Updatable) Traffic from this CIDR will be captured in the flow log.
     * 
     */
    @Import(name="sourceCidr")
    private @Nullable Output<String> sourceCidr;

    /**
     * @return (Updatable) Traffic from this CIDR will be captured in the flow log.
     * 
     */
    public Optional<Output<String>> sourceCidr() {
        return Optional.ofNullable(this.sourceCidr);
    }

    /**
     * (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    @Import(name="tcpOptions")
    private @Nullable Output<CaptureFilterFlowLogCaptureFilterRuleTcpOptionsArgs> tcpOptions;

    /**
     * @return (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<Output<CaptureFilterFlowLogCaptureFilterRuleTcpOptionsArgs>> tcpOptions() {
        return Optional.ofNullable(this.tcpOptions);
    }

    /**
     * (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    @Import(name="udpOptions")
    private @Nullable Output<CaptureFilterFlowLogCaptureFilterRuleUdpOptionsArgs> udpOptions;

    /**
     * @return (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<Output<CaptureFilterFlowLogCaptureFilterRuleUdpOptionsArgs>> udpOptions() {
        return Optional.ofNullable(this.udpOptions);
    }

    private CaptureFilterFlowLogCaptureFilterRuleArgs() {}

    private CaptureFilterFlowLogCaptureFilterRuleArgs(CaptureFilterFlowLogCaptureFilterRuleArgs $) {
        this.destinationCidr = $.destinationCidr;
        this.flowLogType = $.flowLogType;
        this.icmpOptions = $.icmpOptions;
        this.isEnabled = $.isEnabled;
        this.priority = $.priority;
        this.protocol = $.protocol;
        this.ruleAction = $.ruleAction;
        this.samplingRate = $.samplingRate;
        this.sourceCidr = $.sourceCidr;
        this.tcpOptions = $.tcpOptions;
        this.udpOptions = $.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaptureFilterFlowLogCaptureFilterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaptureFilterFlowLogCaptureFilterRuleArgs $;

        public Builder() {
            $ = new CaptureFilterFlowLogCaptureFilterRuleArgs();
        }

        public Builder(CaptureFilterFlowLogCaptureFilterRuleArgs defaults) {
            $ = new CaptureFilterFlowLogCaptureFilterRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationCidr (Updatable) Traffic to this CIDR will be captured in the flow log.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidr(@Nullable Output<String> destinationCidr) {
            $.destinationCidr = destinationCidr;
            return this;
        }

        /**
         * @param destinationCidr (Updatable) Traffic to this CIDR will be captured in the flow log.
         * 
         * @return builder
         * 
         */
        public Builder destinationCidr(String destinationCidr) {
            return destinationCidr(Output.of(destinationCidr));
        }

        /**
         * @param flowLogType (Updatable) Type or types of flow logs to store. `ALL` includes records for both accepted traffic and rejected traffic.
         * 
         * @return builder
         * 
         */
        public Builder flowLogType(@Nullable Output<String> flowLogType) {
            $.flowLogType = flowLogType;
            return this;
        }

        /**
         * @param flowLogType (Updatable) Type or types of flow logs to store. `ALL` includes records for both accepted traffic and rejected traffic.
         * 
         * @return builder
         * 
         */
        public Builder flowLogType(String flowLogType) {
            return flowLogType(Output.of(flowLogType));
        }

        /**
         * @param icmpOptions (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
         * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
         * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
         * 
         * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
         * 
         * @return builder
         * 
         */
        public Builder icmpOptions(@Nullable Output<CaptureFilterFlowLogCaptureFilterRuleIcmpOptionsArgs> icmpOptions) {
            $.icmpOptions = icmpOptions;
            return this;
        }

        /**
         * @param icmpOptions (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
         * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
         * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
         * 
         * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
         * 
         * @return builder
         * 
         */
        public Builder icmpOptions(CaptureFilterFlowLogCaptureFilterRuleIcmpOptionsArgs icmpOptions) {
            return icmpOptions(Output.of(icmpOptions));
        }

        /**
         * @param isEnabled (Updatable) Indicates whether a flow log capture filter rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Indicates whether a flow log capture filter rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param priority (Updatable) A lower number indicates a higher priority, range 0-9. Each rule must have a distinct priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority (Updatable) A lower number indicates a higher priority, range 0-9. Each rule must have a distinct priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param protocol (Updatable) The transport protocol the filter uses.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) The transport protocol the filter uses.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param ruleAction (Updatable) Include or exclude a ruleAction object.
         * 
         * @return builder
         * 
         */
        public Builder ruleAction(@Nullable Output<String> ruleAction) {
            $.ruleAction = ruleAction;
            return this;
        }

        /**
         * @param ruleAction (Updatable) Include or exclude a ruleAction object.
         * 
         * @return builder
         * 
         */
        public Builder ruleAction(String ruleAction) {
            return ruleAction(Output.of(ruleAction));
        }

        /**
         * @param samplingRate (Updatable) Sampling interval as 1 of X, where X is an integer not greater than 100000.
         * 
         * @return builder
         * 
         */
        public Builder samplingRate(@Nullable Output<Integer> samplingRate) {
            $.samplingRate = samplingRate;
            return this;
        }

        /**
         * @param samplingRate (Updatable) Sampling interval as 1 of X, where X is an integer not greater than 100000.
         * 
         * @return builder
         * 
         */
        public Builder samplingRate(Integer samplingRate) {
            return samplingRate(Output.of(samplingRate));
        }

        /**
         * @param sourceCidr (Updatable) Traffic from this CIDR will be captured in the flow log.
         * 
         * @return builder
         * 
         */
        public Builder sourceCidr(@Nullable Output<String> sourceCidr) {
            $.sourceCidr = sourceCidr;
            return this;
        }

        /**
         * @param sourceCidr (Updatable) Traffic from this CIDR will be captured in the flow log.
         * 
         * @return builder
         * 
         */
        public Builder sourceCidr(String sourceCidr) {
            return sourceCidr(Output.of(sourceCidr));
        }

        /**
         * @param tcpOptions (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder tcpOptions(@Nullable Output<CaptureFilterFlowLogCaptureFilterRuleTcpOptionsArgs> tcpOptions) {
            $.tcpOptions = tcpOptions;
            return this;
        }

        /**
         * @param tcpOptions (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder tcpOptions(CaptureFilterFlowLogCaptureFilterRuleTcpOptionsArgs tcpOptions) {
            return tcpOptions(Output.of(tcpOptions));
        }

        /**
         * @param udpOptions (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder udpOptions(@Nullable Output<CaptureFilterFlowLogCaptureFilterRuleUdpOptionsArgs> udpOptions) {
            $.udpOptions = udpOptions;
            return this;
        }

        /**
         * @param udpOptions (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
         * 
         * @return builder
         * 
         */
        public Builder udpOptions(CaptureFilterFlowLogCaptureFilterRuleUdpOptionsArgs udpOptions) {
            return udpOptions(Output.of(udpOptions));
        }

        public CaptureFilterFlowLogCaptureFilterRuleArgs build() {
            return $;
        }
    }

}
