// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DedicatedVmHostCapacityBinArgs extends com.pulumi.resources.ResourceArgs {

    public static final DedicatedVmHostCapacityBinArgs Empty = new DedicatedVmHostCapacityBinArgs();

    /**
     * Zero-based index for the corresponding capacity bucket.
     * 
     */
    @Import(name="capacityIndex")
    private @Nullable Output<Integer> capacityIndex;

    /**
     * @return Zero-based index for the corresponding capacity bucket.
     * 
     */
    public Optional<Output<Integer>> capacityIndex() {
        return Optional.ofNullable(this.capacityIndex);
    }

    /**
     * The current available memory of the dedicated VM host, in GBs.
     * 
     */
    @Import(name="remainingMemoryInGbs")
    private @Nullable Output<Double> remainingMemoryInGbs;

    /**
     * @return The current available memory of the dedicated VM host, in GBs.
     * 
     */
    public Optional<Output<Double>> remainingMemoryInGbs() {
        return Optional.ofNullable(this.remainingMemoryInGbs);
    }

    /**
     * The current available OCPUs of the dedicated VM host.
     * 
     */
    @Import(name="remainingOcpus")
    private @Nullable Output<Double> remainingOcpus;

    /**
     * @return The current available OCPUs of the dedicated VM host.
     * 
     */
    public Optional<Output<Double>> remainingOcpus() {
        return Optional.ofNullable(this.remainingOcpus);
    }

    /**
     * List of VMI shapes supported on each capacity bucket.
     * 
     */
    @Import(name="supportedShapes")
    private @Nullable Output<List<String>> supportedShapes;

    /**
     * @return List of VMI shapes supported on each capacity bucket.
     * 
     */
    public Optional<Output<List<String>>> supportedShapes() {
        return Optional.ofNullable(this.supportedShapes);
    }

    /**
     * The current total memory of the dedicated VM host, in GBs.
     * 
     */
    @Import(name="totalMemoryInGbs")
    private @Nullable Output<Double> totalMemoryInGbs;

    /**
     * @return The current total memory of the dedicated VM host, in GBs.
     * 
     */
    public Optional<Output<Double>> totalMemoryInGbs() {
        return Optional.ofNullable(this.totalMemoryInGbs);
    }

    /**
     * The current total OCPUs of the dedicated VM host.
     * 
     */
    @Import(name="totalOcpus")
    private @Nullable Output<Double> totalOcpus;

    /**
     * @return The current total OCPUs of the dedicated VM host.
     * 
     */
    public Optional<Output<Double>> totalOcpus() {
        return Optional.ofNullable(this.totalOcpus);
    }

    private DedicatedVmHostCapacityBinArgs() {}

    private DedicatedVmHostCapacityBinArgs(DedicatedVmHostCapacityBinArgs $) {
        this.capacityIndex = $.capacityIndex;
        this.remainingMemoryInGbs = $.remainingMemoryInGbs;
        this.remainingOcpus = $.remainingOcpus;
        this.supportedShapes = $.supportedShapes;
        this.totalMemoryInGbs = $.totalMemoryInGbs;
        this.totalOcpus = $.totalOcpus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DedicatedVmHostCapacityBinArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DedicatedVmHostCapacityBinArgs $;

        public Builder() {
            $ = new DedicatedVmHostCapacityBinArgs();
        }

        public Builder(DedicatedVmHostCapacityBinArgs defaults) {
            $ = new DedicatedVmHostCapacityBinArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacityIndex Zero-based index for the corresponding capacity bucket.
         * 
         * @return builder
         * 
         */
        public Builder capacityIndex(@Nullable Output<Integer> capacityIndex) {
            $.capacityIndex = capacityIndex;
            return this;
        }

        /**
         * @param capacityIndex Zero-based index for the corresponding capacity bucket.
         * 
         * @return builder
         * 
         */
        public Builder capacityIndex(Integer capacityIndex) {
            return capacityIndex(Output.of(capacityIndex));
        }

        /**
         * @param remainingMemoryInGbs The current available memory of the dedicated VM host, in GBs.
         * 
         * @return builder
         * 
         */
        public Builder remainingMemoryInGbs(@Nullable Output<Double> remainingMemoryInGbs) {
            $.remainingMemoryInGbs = remainingMemoryInGbs;
            return this;
        }

        /**
         * @param remainingMemoryInGbs The current available memory of the dedicated VM host, in GBs.
         * 
         * @return builder
         * 
         */
        public Builder remainingMemoryInGbs(Double remainingMemoryInGbs) {
            return remainingMemoryInGbs(Output.of(remainingMemoryInGbs));
        }

        /**
         * @param remainingOcpus The current available OCPUs of the dedicated VM host.
         * 
         * @return builder
         * 
         */
        public Builder remainingOcpus(@Nullable Output<Double> remainingOcpus) {
            $.remainingOcpus = remainingOcpus;
            return this;
        }

        /**
         * @param remainingOcpus The current available OCPUs of the dedicated VM host.
         * 
         * @return builder
         * 
         */
        public Builder remainingOcpus(Double remainingOcpus) {
            return remainingOcpus(Output.of(remainingOcpus));
        }

        /**
         * @param supportedShapes List of VMI shapes supported on each capacity bucket.
         * 
         * @return builder
         * 
         */
        public Builder supportedShapes(@Nullable Output<List<String>> supportedShapes) {
            $.supportedShapes = supportedShapes;
            return this;
        }

        /**
         * @param supportedShapes List of VMI shapes supported on each capacity bucket.
         * 
         * @return builder
         * 
         */
        public Builder supportedShapes(List<String> supportedShapes) {
            return supportedShapes(Output.of(supportedShapes));
        }

        /**
         * @param supportedShapes List of VMI shapes supported on each capacity bucket.
         * 
         * @return builder
         * 
         */
        public Builder supportedShapes(String... supportedShapes) {
            return supportedShapes(List.of(supportedShapes));
        }

        /**
         * @param totalMemoryInGbs The current total memory of the dedicated VM host, in GBs.
         * 
         * @return builder
         * 
         */
        public Builder totalMemoryInGbs(@Nullable Output<Double> totalMemoryInGbs) {
            $.totalMemoryInGbs = totalMemoryInGbs;
            return this;
        }

        /**
         * @param totalMemoryInGbs The current total memory of the dedicated VM host, in GBs.
         * 
         * @return builder
         * 
         */
        public Builder totalMemoryInGbs(Double totalMemoryInGbs) {
            return totalMemoryInGbs(Output.of(totalMemoryInGbs));
        }

        /**
         * @param totalOcpus The current total OCPUs of the dedicated VM host.
         * 
         * @return builder
         * 
         */
        public Builder totalOcpus(@Nullable Output<Double> totalOcpus) {
            $.totalOcpus = totalOcpus;
            return this;
        }

        /**
         * @param totalOcpus The current total OCPUs of the dedicated VM host.
         * 
         * @return builder
         * 
         */
        public Builder totalOcpus(Double totalOcpus) {
            return totalOcpus(Output.of(totalOcpus));
        }

        public DedicatedVmHostCapacityBinArgs build() {
            return $;
        }
    }

}
