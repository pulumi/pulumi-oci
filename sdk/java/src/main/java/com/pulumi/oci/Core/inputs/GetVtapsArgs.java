// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.inputs.GetVtapsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVtapsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVtapsArgs Empty = new GetVtapsArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only resources that match the given display name exactly.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetVtapsFilterArgs>> filters;

    public Optional<Output<List<GetVtapsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Indicates whether to list all VTAPs or only running VTAPs.
     * * When `FALSE`, lists ALL running and stopped VTAPs.
     * * When `TRUE`, lists only running VTAPs (VTAPs where isVtapEnabled = `TRUE`).
     * 
     */
    @Import(name="isVtapEnabled")
    private @Nullable Output<Boolean> isVtapEnabled;

    /**
     * @return Indicates whether to list all VTAPs or only running VTAPs.
     * * When `FALSE`, lists ALL running and stopped VTAPs.
     * * When `TRUE`, lists only running VTAPs (VTAPs where isVtapEnabled = `TRUE`).
     * 
     */
    public Optional<Output<Boolean>> isVtapEnabled() {
        return Optional.ofNullable(this.isVtapEnabled);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP source.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP source.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * A filter to return only resources that match the given VTAP administrative lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources that match the given VTAP administrative lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP target.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP target.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The IP address of the VTAP target.
     * 
     */
    @Import(name="targetIp")
    private @Nullable Output<String> targetIp;

    /**
     * @return The IP address of the VTAP target.
     * 
     */
    public Optional<Output<String>> targetIp() {
        return Optional.ofNullable(this.targetIp);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     * 
     */
    @Import(name="vcnId")
    private @Nullable Output<String> vcnId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     * 
     */
    public Optional<Output<String>> vcnId() {
        return Optional.ofNullable(this.vcnId);
    }

    private GetVtapsArgs() {}

    private GetVtapsArgs(GetVtapsArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.isVtapEnabled = $.isVtapEnabled;
        this.source = $.source;
        this.state = $.state;
        this.targetId = $.targetId;
        this.targetIp = $.targetIp;
        this.vcnId = $.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVtapsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVtapsArgs $;

        public Builder() {
            $ = new GetVtapsArgs();
        }

        public Builder(GetVtapsArgs defaults) {
            $ = new GetVtapsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only resources that match the given display name exactly.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the given display name exactly.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetVtapsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetVtapsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetVtapsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isVtapEnabled Indicates whether to list all VTAPs or only running VTAPs.
         * * When `FALSE`, lists ALL running and stopped VTAPs.
         * * When `TRUE`, lists only running VTAPs (VTAPs where isVtapEnabled = `TRUE`).
         * 
         * @return builder
         * 
         */
        public Builder isVtapEnabled(@Nullable Output<Boolean> isVtapEnabled) {
            $.isVtapEnabled = isVtapEnabled;
            return this;
        }

        /**
         * @param isVtapEnabled Indicates whether to list all VTAPs or only running VTAPs.
         * * When `FALSE`, lists ALL running and stopped VTAPs.
         * * When `TRUE`, lists only running VTAPs (VTAPs where isVtapEnabled = `TRUE`).
         * 
         * @return builder
         * 
         */
        public Builder isVtapEnabled(Boolean isVtapEnabled) {
            return isVtapEnabled(Output.of(isVtapEnabled));
        }

        /**
         * @param source The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP source.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP source.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param state A filter to return only resources that match the given VTAP administrative lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the given VTAP administrative lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP target.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param targetIp The IP address of the VTAP target.
         * 
         * @return builder
         * 
         */
        public Builder targetIp(@Nullable Output<String> targetIp) {
            $.targetIp = targetIp;
            return this;
        }

        /**
         * @param targetIp The IP address of the VTAP target.
         * 
         * @return builder
         * 
         */
        public Builder targetIp(String targetIp) {
            return targetIp(Output.of(targetIp));
        }

        /**
         * @param vcnId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(@Nullable Output<String> vcnId) {
            $.vcnId = vcnId;
            return this;
        }

        /**
         * @param vcnId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(String vcnId) {
            return vcnId(Output.of(vcnId));
        }

        public GetVtapsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetVtapsArgs", "compartmentId");
            }
            return $;
        }
    }

}
