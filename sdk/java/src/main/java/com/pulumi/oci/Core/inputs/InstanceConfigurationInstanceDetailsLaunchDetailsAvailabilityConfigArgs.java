// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs Empty = new InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs();

    /**
     * Whether to live migrate supported VM instances to a healthy physical VM host without disrupting running instances during infrastructure maintenance events. If null, Oracle chooses the best option for migrating the VM during infrastructure maintenance events.
     * 
     */
    @Import(name="isLiveMigrationPreferred")
    private @Nullable Output<Boolean> isLiveMigrationPreferred;

    /**
     * @return Whether to live migrate supported VM instances to a healthy physical VM host without disrupting running instances during infrastructure maintenance events. If null, Oracle chooses the best option for migrating the VM during infrastructure maintenance events.
     * 
     */
    public Optional<Output<Boolean>> isLiveMigrationPreferred() {
        return Optional.ofNullable(this.isLiveMigrationPreferred);
    }

    /**
     * The lifecycle state for an instance when it is recovered after infrastructure maintenance.
     * * `RESTORE_INSTANCE` - The instance is restored to the lifecycle state it was in before the maintenance event. If the instance was running, it is automatically rebooted. This is the default action when a value is not set.
     * * `STOP_INSTANCE` - The instance is recovered in the stopped state.
     * 
     */
    @Import(name="recoveryAction")
    private @Nullable Output<String> recoveryAction;

    /**
     * @return The lifecycle state for an instance when it is recovered after infrastructure maintenance.
     * * `RESTORE_INSTANCE` - The instance is restored to the lifecycle state it was in before the maintenance event. If the instance was running, it is automatically rebooted. This is the default action when a value is not set.
     * * `STOP_INSTANCE` - The instance is recovered in the stopped state.
     * 
     */
    public Optional<Output<String>> recoveryAction() {
        return Optional.ofNullable(this.recoveryAction);
    }

    private InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs() {}

    private InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs(InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs $) {
        this.isLiveMigrationPreferred = $.isLiveMigrationPreferred;
        this.recoveryAction = $.recoveryAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs $;

        public Builder() {
            $ = new InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs();
        }

        public Builder(InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs defaults) {
            $ = new InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isLiveMigrationPreferred Whether to live migrate supported VM instances to a healthy physical VM host without disrupting running instances during infrastructure maintenance events. If null, Oracle chooses the best option for migrating the VM during infrastructure maintenance events.
         * 
         * @return builder
         * 
         */
        public Builder isLiveMigrationPreferred(@Nullable Output<Boolean> isLiveMigrationPreferred) {
            $.isLiveMigrationPreferred = isLiveMigrationPreferred;
            return this;
        }

        /**
         * @param isLiveMigrationPreferred Whether to live migrate supported VM instances to a healthy physical VM host without disrupting running instances during infrastructure maintenance events. If null, Oracle chooses the best option for migrating the VM during infrastructure maintenance events.
         * 
         * @return builder
         * 
         */
        public Builder isLiveMigrationPreferred(Boolean isLiveMigrationPreferred) {
            return isLiveMigrationPreferred(Output.of(isLiveMigrationPreferred));
        }

        /**
         * @param recoveryAction The lifecycle state for an instance when it is recovered after infrastructure maintenance.
         * * `RESTORE_INSTANCE` - The instance is restored to the lifecycle state it was in before the maintenance event. If the instance was running, it is automatically rebooted. This is the default action when a value is not set.
         * * `STOP_INSTANCE` - The instance is recovered in the stopped state.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAction(@Nullable Output<String> recoveryAction) {
            $.recoveryAction = recoveryAction;
            return this;
        }

        /**
         * @param recoveryAction The lifecycle state for an instance when it is recovered after infrastructure maintenance.
         * * `RESTORE_INSTANCE` - The instance is restored to the lifecycle state it was in before the maintenance event. If the instance was running, it is automatically rebooted. This is the default action when a value is not set.
         * * `STOP_INSTANCE` - The instance is recovered in the stopped state.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAction(String recoveryAction) {
            return recoveryAction(Output.of(recoveryAction));
        }

        public InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfigArgs build() {
            return $;
        }
    }

}
