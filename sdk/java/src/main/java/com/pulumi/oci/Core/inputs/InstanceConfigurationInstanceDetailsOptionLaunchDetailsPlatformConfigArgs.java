// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs Empty = new InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs();

    /**
     * Whether virtualization instructions are available. For example, Secure Virtual Machine for AMD shapes or VT-x for Intel shapes.
     * 
     */
    @Import(name="areVirtualInstructionsEnabled")
    private @Nullable Output<Boolean> areVirtualInstructionsEnabled;

    /**
     * @return Whether virtualization instructions are available. For example, Secure Virtual Machine for AMD shapes or VT-x for Intel shapes.
     * 
     */
    public Optional<Output<Boolean>> areVirtualInstructionsEnabled() {
        return Optional.ofNullable(this.areVirtualInstructionsEnabled);
    }

    /**
     * Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device pass-through.
     * 
     */
    @Import(name="isAccessControlServiceEnabled")
    private @Nullable Output<Boolean> isAccessControlServiceEnabled;

    /**
     * @return Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device pass-through.
     * 
     */
    public Optional<Output<Boolean>> isAccessControlServiceEnabled() {
        return Optional.ofNullable(this.isAccessControlServiceEnabled);
    }

    /**
     * Whether the input-output memory management unit is enabled.
     * 
     */
    @Import(name="isInputOutputMemoryManagementUnitEnabled")
    private @Nullable Output<Boolean> isInputOutputMemoryManagementUnitEnabled;

    /**
     * @return Whether the input-output memory management unit is enabled.
     * 
     */
    public Optional<Output<Boolean>> isInputOutputMemoryManagementUnitEnabled() {
        return Optional.ofNullable(this.isInputOutputMemoryManagementUnitEnabled);
    }

    /**
     * Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    @Import(name="isMeasuredBootEnabled")
    private @Nullable Output<Boolean> isMeasuredBootEnabled;

    /**
     * @return Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    public Optional<Output<Boolean>> isMeasuredBootEnabled() {
        return Optional.ofNullable(this.isMeasuredBootEnabled);
    }

    /**
     * Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
     * 
     */
    @Import(name="isMemoryEncryptionEnabled")
    private @Nullable Output<Boolean> isMemoryEncryptionEnabled;

    /**
     * @return Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> isMemoryEncryptionEnabled() {
        return Optional.ofNullable(this.isMemoryEncryptionEnabled);
    }

    /**
     * Whether Secure Boot is enabled on the instance.
     * 
     */
    @Import(name="isSecureBootEnabled")
    private @Nullable Output<Boolean> isSecureBootEnabled;

    /**
     * @return Whether Secure Boot is enabled on the instance.
     * 
     */
    public Optional<Output<Boolean>> isSecureBootEnabled() {
        return Optional.ofNullable(this.isSecureBootEnabled);
    }

    /**
     * Whether symmetric multithreading is enabled on the instance. Symmetric multithreading is also called simultaneous multithreading (SMT) or Intel Hyper-Threading.
     * 
     */
    @Import(name="isSymmetricMultiThreadingEnabled")
    private @Nullable Output<Boolean> isSymmetricMultiThreadingEnabled;

    /**
     * @return Whether symmetric multithreading is enabled on the instance. Symmetric multithreading is also called simultaneous multithreading (SMT) or Intel Hyper-Threading.
     * 
     */
    public Optional<Output<Boolean>> isSymmetricMultiThreadingEnabled() {
        return Optional.ofNullable(this.isSymmetricMultiThreadingEnabled);
    }

    /**
     * Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    @Import(name="isTrustedPlatformModuleEnabled")
    private @Nullable Output<Boolean> isTrustedPlatformModuleEnabled;

    /**
     * @return Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    public Optional<Output<Boolean>> isTrustedPlatformModuleEnabled() {
        return Optional.ofNullable(this.isTrustedPlatformModuleEnabled);
    }

    /**
     * The number of NUMA nodes per socket (NPS).
     * 
     */
    @Import(name="numaNodesPerSocket")
    private @Nullable Output<String> numaNodesPerSocket;

    /**
     * @return The number of NUMA nodes per socket (NPS).
     * 
     */
    public Optional<Output<String>> numaNodesPerSocket() {
        return Optional.ofNullable(this.numaNodesPerSocket);
    }

    /**
     * The percentage of cores enabled. Value must be a multiple of 25%. If the requested percentage results in a fractional number of cores, the system rounds up the number of cores across processors and provisions an instance with a whole number of cores.
     * 
     * If the applications that you run on the instance use a core-based licensing model and need fewer cores than the full size of the shape, you can disable cores to reduce your licensing costs. The instance itself is billed for the full shape, regardless of whether all cores are enabled.
     * 
     */
    @Import(name="percentageOfCoresEnabled")
    private @Nullable Output<Integer> percentageOfCoresEnabled;

    /**
     * @return The percentage of cores enabled. Value must be a multiple of 25%. If the requested percentage results in a fractional number of cores, the system rounds up the number of cores across processors and provisions an instance with a whole number of cores.
     * 
     * If the applications that you run on the instance use a core-based licensing model and need fewer cores than the full size of the shape, you can disable cores to reduce your licensing costs. The instance itself is billed for the full shape, regardless of whether all cores are enabled.
     * 
     */
    public Optional<Output<Integer>> percentageOfCoresEnabled() {
        return Optional.ofNullable(this.percentageOfCoresEnabled);
    }

    /**
     * The type of action to run when the instance is interrupted for eviction.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs() {}

    private InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs(InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs $) {
        this.areVirtualInstructionsEnabled = $.areVirtualInstructionsEnabled;
        this.isAccessControlServiceEnabled = $.isAccessControlServiceEnabled;
        this.isInputOutputMemoryManagementUnitEnabled = $.isInputOutputMemoryManagementUnitEnabled;
        this.isMeasuredBootEnabled = $.isMeasuredBootEnabled;
        this.isMemoryEncryptionEnabled = $.isMemoryEncryptionEnabled;
        this.isSecureBootEnabled = $.isSecureBootEnabled;
        this.isSymmetricMultiThreadingEnabled = $.isSymmetricMultiThreadingEnabled;
        this.isTrustedPlatformModuleEnabled = $.isTrustedPlatformModuleEnabled;
        this.numaNodesPerSocket = $.numaNodesPerSocket;
        this.percentageOfCoresEnabled = $.percentageOfCoresEnabled;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs $;

        public Builder() {
            $ = new InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs();
        }

        public Builder(InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs defaults) {
            $ = new InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param areVirtualInstructionsEnabled Whether virtualization instructions are available. For example, Secure Virtual Machine for AMD shapes or VT-x for Intel shapes.
         * 
         * @return builder
         * 
         */
        public Builder areVirtualInstructionsEnabled(@Nullable Output<Boolean> areVirtualInstructionsEnabled) {
            $.areVirtualInstructionsEnabled = areVirtualInstructionsEnabled;
            return this;
        }

        /**
         * @param areVirtualInstructionsEnabled Whether virtualization instructions are available. For example, Secure Virtual Machine for AMD shapes or VT-x for Intel shapes.
         * 
         * @return builder
         * 
         */
        public Builder areVirtualInstructionsEnabled(Boolean areVirtualInstructionsEnabled) {
            return areVirtualInstructionsEnabled(Output.of(areVirtualInstructionsEnabled));
        }

        /**
         * @param isAccessControlServiceEnabled Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device pass-through.
         * 
         * @return builder
         * 
         */
        public Builder isAccessControlServiceEnabled(@Nullable Output<Boolean> isAccessControlServiceEnabled) {
            $.isAccessControlServiceEnabled = isAccessControlServiceEnabled;
            return this;
        }

        /**
         * @param isAccessControlServiceEnabled Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device pass-through.
         * 
         * @return builder
         * 
         */
        public Builder isAccessControlServiceEnabled(Boolean isAccessControlServiceEnabled) {
            return isAccessControlServiceEnabled(Output.of(isAccessControlServiceEnabled));
        }

        /**
         * @param isInputOutputMemoryManagementUnitEnabled Whether the input-output memory management unit is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isInputOutputMemoryManagementUnitEnabled(@Nullable Output<Boolean> isInputOutputMemoryManagementUnitEnabled) {
            $.isInputOutputMemoryManagementUnitEnabled = isInputOutputMemoryManagementUnitEnabled;
            return this;
        }

        /**
         * @param isInputOutputMemoryManagementUnitEnabled Whether the input-output memory management unit is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isInputOutputMemoryManagementUnitEnabled(Boolean isInputOutputMemoryManagementUnitEnabled) {
            return isInputOutputMemoryManagementUnitEnabled(Output.of(isInputOutputMemoryManagementUnitEnabled));
        }

        /**
         * @param isMeasuredBootEnabled Whether the Measured Boot feature is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isMeasuredBootEnabled(@Nullable Output<Boolean> isMeasuredBootEnabled) {
            $.isMeasuredBootEnabled = isMeasuredBootEnabled;
            return this;
        }

        /**
         * @param isMeasuredBootEnabled Whether the Measured Boot feature is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isMeasuredBootEnabled(Boolean isMeasuredBootEnabled) {
            return isMeasuredBootEnabled(Output.of(isMeasuredBootEnabled));
        }

        /**
         * @param isMemoryEncryptionEnabled Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder isMemoryEncryptionEnabled(@Nullable Output<Boolean> isMemoryEncryptionEnabled) {
            $.isMemoryEncryptionEnabled = isMemoryEncryptionEnabled;
            return this;
        }

        /**
         * @param isMemoryEncryptionEnabled Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder isMemoryEncryptionEnabled(Boolean isMemoryEncryptionEnabled) {
            return isMemoryEncryptionEnabled(Output.of(isMemoryEncryptionEnabled));
        }

        /**
         * @param isSecureBootEnabled Whether Secure Boot is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isSecureBootEnabled(@Nullable Output<Boolean> isSecureBootEnabled) {
            $.isSecureBootEnabled = isSecureBootEnabled;
            return this;
        }

        /**
         * @param isSecureBootEnabled Whether Secure Boot is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isSecureBootEnabled(Boolean isSecureBootEnabled) {
            return isSecureBootEnabled(Output.of(isSecureBootEnabled));
        }

        /**
         * @param isSymmetricMultiThreadingEnabled Whether symmetric multithreading is enabled on the instance. Symmetric multithreading is also called simultaneous multithreading (SMT) or Intel Hyper-Threading.
         * 
         * @return builder
         * 
         */
        public Builder isSymmetricMultiThreadingEnabled(@Nullable Output<Boolean> isSymmetricMultiThreadingEnabled) {
            $.isSymmetricMultiThreadingEnabled = isSymmetricMultiThreadingEnabled;
            return this;
        }

        /**
         * @param isSymmetricMultiThreadingEnabled Whether symmetric multithreading is enabled on the instance. Symmetric multithreading is also called simultaneous multithreading (SMT) or Intel Hyper-Threading.
         * 
         * @return builder
         * 
         */
        public Builder isSymmetricMultiThreadingEnabled(Boolean isSymmetricMultiThreadingEnabled) {
            return isSymmetricMultiThreadingEnabled(Output.of(isSymmetricMultiThreadingEnabled));
        }

        /**
         * @param isTrustedPlatformModuleEnabled Whether the Trusted Platform Module (TPM) is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isTrustedPlatformModuleEnabled(@Nullable Output<Boolean> isTrustedPlatformModuleEnabled) {
            $.isTrustedPlatformModuleEnabled = isTrustedPlatformModuleEnabled;
            return this;
        }

        /**
         * @param isTrustedPlatformModuleEnabled Whether the Trusted Platform Module (TPM) is enabled on the instance.
         * 
         * @return builder
         * 
         */
        public Builder isTrustedPlatformModuleEnabled(Boolean isTrustedPlatformModuleEnabled) {
            return isTrustedPlatformModuleEnabled(Output.of(isTrustedPlatformModuleEnabled));
        }

        /**
         * @param numaNodesPerSocket The number of NUMA nodes per socket (NPS).
         * 
         * @return builder
         * 
         */
        public Builder numaNodesPerSocket(@Nullable Output<String> numaNodesPerSocket) {
            $.numaNodesPerSocket = numaNodesPerSocket;
            return this;
        }

        /**
         * @param numaNodesPerSocket The number of NUMA nodes per socket (NPS).
         * 
         * @return builder
         * 
         */
        public Builder numaNodesPerSocket(String numaNodesPerSocket) {
            return numaNodesPerSocket(Output.of(numaNodesPerSocket));
        }

        /**
         * @param percentageOfCoresEnabled The percentage of cores enabled. Value must be a multiple of 25%. If the requested percentage results in a fractional number of cores, the system rounds up the number of cores across processors and provisions an instance with a whole number of cores.
         * 
         * If the applications that you run on the instance use a core-based licensing model and need fewer cores than the full size of the shape, you can disable cores to reduce your licensing costs. The instance itself is billed for the full shape, regardless of whether all cores are enabled.
         * 
         * @return builder
         * 
         */
        public Builder percentageOfCoresEnabled(@Nullable Output<Integer> percentageOfCoresEnabled) {
            $.percentageOfCoresEnabled = percentageOfCoresEnabled;
            return this;
        }

        /**
         * @param percentageOfCoresEnabled The percentage of cores enabled. Value must be a multiple of 25%. If the requested percentage results in a fractional number of cores, the system rounds up the number of cores across processors and provisions an instance with a whole number of cores.
         * 
         * If the applications that you run on the instance use a core-based licensing model and need fewer cores than the full size of the shape, you can disable cores to reduce your licensing costs. The instance itself is billed for the full shape, regardless of whether all cores are enabled.
         * 
         * @return builder
         * 
         */
        public Builder percentageOfCoresEnabled(Integer percentageOfCoresEnabled) {
            return percentageOfCoresEnabled(Output.of(percentageOfCoresEnabled));
        }

        /**
         * @param type The type of action to run when the instance is interrupted for eviction.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of action to run when the instance is interrupted for eviction.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfigArgs", "type");
            }
            return $;
        }
    }

}
