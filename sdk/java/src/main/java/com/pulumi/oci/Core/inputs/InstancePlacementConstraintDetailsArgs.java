// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstancePlacementConstraintDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstancePlacementConstraintDetailsArgs Empty = new InstancePlacementConstraintDetailsArgs();

    /**
     * The OCID of the compute bare metal host.
     * 
     */
    @Import(name="computeBareMetalHostId")
    private @Nullable Output<String> computeBareMetalHostId;

    /**
     * @return The OCID of the compute bare metal host.
     * 
     */
    public Optional<Output<String>> computeBareMetalHostId() {
        return Optional.ofNullable(this.computeBareMetalHostId);
    }

    /**
     * The OCID of the compute host group.
     * 
     */
    @Import(name="computeHostGroupId")
    private @Nullable Output<String> computeHostGroupId;

    /**
     * @return The OCID of the compute host group.
     * 
     */
    public Optional<Output<String>> computeHostGroupId() {
        return Optional.ofNullable(this.computeHostGroupId);
    }

    /**
     * Determines the type of targeted launch.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Determines the type of targeted launch.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private InstancePlacementConstraintDetailsArgs() {}

    private InstancePlacementConstraintDetailsArgs(InstancePlacementConstraintDetailsArgs $) {
        this.computeBareMetalHostId = $.computeBareMetalHostId;
        this.computeHostGroupId = $.computeHostGroupId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstancePlacementConstraintDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstancePlacementConstraintDetailsArgs $;

        public Builder() {
            $ = new InstancePlacementConstraintDetailsArgs();
        }

        public Builder(InstancePlacementConstraintDetailsArgs defaults) {
            $ = new InstancePlacementConstraintDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeBareMetalHostId The OCID of the compute bare metal host.
         * 
         * @return builder
         * 
         */
        public Builder computeBareMetalHostId(@Nullable Output<String> computeBareMetalHostId) {
            $.computeBareMetalHostId = computeBareMetalHostId;
            return this;
        }

        /**
         * @param computeBareMetalHostId The OCID of the compute bare metal host.
         * 
         * @return builder
         * 
         */
        public Builder computeBareMetalHostId(String computeBareMetalHostId) {
            return computeBareMetalHostId(Output.of(computeBareMetalHostId));
        }

        /**
         * @param computeHostGroupId The OCID of the compute host group.
         * 
         * @return builder
         * 
         */
        public Builder computeHostGroupId(@Nullable Output<String> computeHostGroupId) {
            $.computeHostGroupId = computeHostGroupId;
            return this;
        }

        /**
         * @param computeHostGroupId The OCID of the compute host group.
         * 
         * @return builder
         * 
         */
        public Builder computeHostGroupId(String computeHostGroupId) {
            return computeHostGroupId(Output.of(computeHostGroupId));
        }

        /**
         * @param type Determines the type of targeted launch.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Determines the type of targeted launch.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InstancePlacementConstraintDetailsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("InstancePlacementConstraintDetailsArgs", "type");
            }
            return $;
        }
    }

}
