// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpsecConnectionTunnelManagementDpdConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpsecConnectionTunnelManagementDpdConfigArgs Empty = new IpsecConnectionTunnelManagementDpdConfigArgs();

    /**
     * This option defines whether DPD can be initiated from the Oracle side of the connection. `INITIATE_AND_RESPOND` or `RESPOND_ONLY`
     * 
     */
    @Import(name="dpdMode")
    private @Nullable Output<String> dpdMode;

    /**
     * @return This option defines whether DPD can be initiated from the Oracle side of the connection. `INITIATE_AND_RESPOND` or `RESPOND_ONLY`
     * 
     */
    public Optional<Output<String>> dpdMode() {
        return Optional.ofNullable(this.dpdMode);
    }

    /**
     * DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
     * 
     */
    @Import(name="dpdTimeoutInSec")
    private @Nullable Output<Integer> dpdTimeoutInSec;

    /**
     * @return DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
     * 
     */
    public Optional<Output<Integer>> dpdTimeoutInSec() {
        return Optional.ofNullable(this.dpdTimeoutInSec);
    }

    private IpsecConnectionTunnelManagementDpdConfigArgs() {}

    private IpsecConnectionTunnelManagementDpdConfigArgs(IpsecConnectionTunnelManagementDpdConfigArgs $) {
        this.dpdMode = $.dpdMode;
        this.dpdTimeoutInSec = $.dpdTimeoutInSec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecConnectionTunnelManagementDpdConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecConnectionTunnelManagementDpdConfigArgs $;

        public Builder() {
            $ = new IpsecConnectionTunnelManagementDpdConfigArgs();
        }

        public Builder(IpsecConnectionTunnelManagementDpdConfigArgs defaults) {
            $ = new IpsecConnectionTunnelManagementDpdConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dpdMode This option defines whether DPD can be initiated from the Oracle side of the connection. `INITIATE_AND_RESPOND` or `RESPOND_ONLY`
         * 
         * @return builder
         * 
         */
        public Builder dpdMode(@Nullable Output<String> dpdMode) {
            $.dpdMode = dpdMode;
            return this;
        }

        /**
         * @param dpdMode This option defines whether DPD can be initiated from the Oracle side of the connection. `INITIATE_AND_RESPOND` or `RESPOND_ONLY`
         * 
         * @return builder
         * 
         */
        public Builder dpdMode(String dpdMode) {
            return dpdMode(Output.of(dpdMode));
        }

        /**
         * @param dpdTimeoutInSec DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
         * 
         * @return builder
         * 
         */
        public Builder dpdTimeoutInSec(@Nullable Output<Integer> dpdTimeoutInSec) {
            $.dpdTimeoutInSec = dpdTimeoutInSec;
            return this;
        }

        /**
         * @param dpdTimeoutInSec DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
         * 
         * @return builder
         * 
         */
        public Builder dpdTimeoutInSec(Integer dpdTimeoutInSec) {
            return dpdTimeoutInSec(Output.of(dpdTimeoutInSec));
        }

        public IpsecConnectionTunnelManagementDpdConfigArgs build() {
            return $;
        }
    }

}
