// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeAutotunePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeAutotunePolicyArgs Empty = new VolumeAutotunePolicyArgs();

    /**
     * (Updatable) This specifies the type of autotunes supported by OCI.
     * 
     */
    @Import(name="autotuneType", required=true)
    private Output<String> autotuneType;

    /**
     * @return (Updatable) This specifies the type of autotunes supported by OCI.
     * 
     */
    public Output<String> autotuneType() {
        return this.autotuneType;
    }

    /**
     * (Updatable) This will be the maximum VPUs/GB performance level that the volume will be auto-tuned temporarily based on performance monitoring.
     * 
     */
    @Import(name="maxVpusPerGb")
    private @Nullable Output<String> maxVpusPerGb;

    /**
     * @return (Updatable) This will be the maximum VPUs/GB performance level that the volume will be auto-tuned temporarily based on performance monitoring.
     * 
     */
    public Optional<Output<String>> maxVpusPerGb() {
        return Optional.ofNullable(this.maxVpusPerGb);
    }

    private VolumeAutotunePolicyArgs() {}

    private VolumeAutotunePolicyArgs(VolumeAutotunePolicyArgs $) {
        this.autotuneType = $.autotuneType;
        this.maxVpusPerGb = $.maxVpusPerGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeAutotunePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeAutotunePolicyArgs $;

        public Builder() {
            $ = new VolumeAutotunePolicyArgs();
        }

        public Builder(VolumeAutotunePolicyArgs defaults) {
            $ = new VolumeAutotunePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autotuneType (Updatable) This specifies the type of autotunes supported by OCI.
         * 
         * @return builder
         * 
         */
        public Builder autotuneType(Output<String> autotuneType) {
            $.autotuneType = autotuneType;
            return this;
        }

        /**
         * @param autotuneType (Updatable) This specifies the type of autotunes supported by OCI.
         * 
         * @return builder
         * 
         */
        public Builder autotuneType(String autotuneType) {
            return autotuneType(Output.of(autotuneType));
        }

        /**
         * @param maxVpusPerGb (Updatable) This will be the maximum VPUs/GB performance level that the volume will be auto-tuned temporarily based on performance monitoring.
         * 
         * @return builder
         * 
         */
        public Builder maxVpusPerGb(@Nullable Output<String> maxVpusPerGb) {
            $.maxVpusPerGb = maxVpusPerGb;
            return this;
        }

        /**
         * @param maxVpusPerGb (Updatable) This will be the maximum VPUs/GB performance level that the volume will be auto-tuned temporarily based on performance monitoring.
         * 
         * @return builder
         * 
         */
        public Builder maxVpusPerGb(String maxVpusPerGb) {
            return maxVpusPerGb(Output.of(maxVpusPerGb));
        }

        public VolumeAutotunePolicyArgs build() {
            if ($.autotuneType == null) {
                throw new MissingRequiredPropertyException("VolumeAutotunePolicyArgs", "autotuneType");
            }
            return $;
        }
    }

}
