// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeSourceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeSourceDetailsArgs Empty = new VolumeSourceDetailsArgs();

    /**
     * Block size in bytes to be considered while performing volume restore. The value must be a power of 2; ranging from 4KB (4096 bytes) to 1MB (1048576 bytes). If omitted, defaults to 4,096 bytes (4 KiB).
     * 
     */
    @Import(name="changeBlockSizeInBytes")
    private @Nullable Output<String> changeBlockSizeInBytes;

    /**
     * @return Block size in bytes to be considered while performing volume restore. The value must be a power of 2; ranging from 4KB (4096 bytes) to 1MB (1048576 bytes). If omitted, defaults to 4,096 bytes (4 KiB).
     * 
     */
    public Optional<Output<String>> changeBlockSizeInBytes() {
        return Optional.ofNullable(this.changeBlockSizeInBytes);
    }

    /**
     * The OCID of the first volume backup.
     * 
     */
    @Import(name="firstBackupId")
    private @Nullable Output<String> firstBackupId;

    /**
     * @return The OCID of the first volume backup.
     * 
     */
    public Optional<Output<String>> firstBackupId() {
        return Optional.ofNullable(this.firstBackupId);
    }

    /**
     * The OCID of the block volume replica.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The OCID of the block volume replica.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The OCID of the second volume backup.
     * 
     */
    @Import(name="secondBackupId")
    private @Nullable Output<String> secondBackupId;

    /**
     * @return The OCID of the second volume backup.
     * 
     */
    public Optional<Output<String>> secondBackupId() {
        return Optional.ofNullable(this.secondBackupId);
    }

    /**
     * The type can be one of these values: `blockVolumeReplica`, `volume`, `volumeBackup`, `volumeBackupDelta`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type can be one of these values: `blockVolumeReplica`, `volume`, `volumeBackup`, `volumeBackupDelta`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private VolumeSourceDetailsArgs() {}

    private VolumeSourceDetailsArgs(VolumeSourceDetailsArgs $) {
        this.changeBlockSizeInBytes = $.changeBlockSizeInBytes;
        this.firstBackupId = $.firstBackupId;
        this.id = $.id;
        this.secondBackupId = $.secondBackupId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeSourceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeSourceDetailsArgs $;

        public Builder() {
            $ = new VolumeSourceDetailsArgs();
        }

        public Builder(VolumeSourceDetailsArgs defaults) {
            $ = new VolumeSourceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeBlockSizeInBytes Block size in bytes to be considered while performing volume restore. The value must be a power of 2; ranging from 4KB (4096 bytes) to 1MB (1048576 bytes). If omitted, defaults to 4,096 bytes (4 KiB).
         * 
         * @return builder
         * 
         */
        public Builder changeBlockSizeInBytes(@Nullable Output<String> changeBlockSizeInBytes) {
            $.changeBlockSizeInBytes = changeBlockSizeInBytes;
            return this;
        }

        /**
         * @param changeBlockSizeInBytes Block size in bytes to be considered while performing volume restore. The value must be a power of 2; ranging from 4KB (4096 bytes) to 1MB (1048576 bytes). If omitted, defaults to 4,096 bytes (4 KiB).
         * 
         * @return builder
         * 
         */
        public Builder changeBlockSizeInBytes(String changeBlockSizeInBytes) {
            return changeBlockSizeInBytes(Output.of(changeBlockSizeInBytes));
        }

        /**
         * @param firstBackupId The OCID of the first volume backup.
         * 
         * @return builder
         * 
         */
        public Builder firstBackupId(@Nullable Output<String> firstBackupId) {
            $.firstBackupId = firstBackupId;
            return this;
        }

        /**
         * @param firstBackupId The OCID of the first volume backup.
         * 
         * @return builder
         * 
         */
        public Builder firstBackupId(String firstBackupId) {
            return firstBackupId(Output.of(firstBackupId));
        }

        /**
         * @param id The OCID of the block volume replica.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The OCID of the block volume replica.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param secondBackupId The OCID of the second volume backup.
         * 
         * @return builder
         * 
         */
        public Builder secondBackupId(@Nullable Output<String> secondBackupId) {
            $.secondBackupId = secondBackupId;
            return this;
        }

        /**
         * @param secondBackupId The OCID of the second volume backup.
         * 
         * @return builder
         * 
         */
        public Builder secondBackupId(String secondBackupId) {
            return secondBackupId(Output.of(secondBackupId));
        }

        /**
         * @param type The type can be one of these values: `blockVolumeReplica`, `volume`, `volumeBackup`, `volumeBackupDelta`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type can be one of these values: `blockVolumeReplica`, `volume`, `volumeBackup`, `volumeBackupDelta`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public VolumeSourceDetailsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("VolumeSourceDetailsArgs", "type");
            }
            return $;
        }
    }

}
