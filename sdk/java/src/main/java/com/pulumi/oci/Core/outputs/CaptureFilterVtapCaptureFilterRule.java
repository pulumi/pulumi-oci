// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.CaptureFilterVtapCaptureFilterRuleIcmpOptions;
import com.pulumi.oci.Core.outputs.CaptureFilterVtapCaptureFilterRuleTcpOptions;
import com.pulumi.oci.Core.outputs.CaptureFilterVtapCaptureFilterRuleUdpOptions;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CaptureFilterVtapCaptureFilterRule {
    /**
     * @return (Updatable) Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
     * 
     */
    private @Nullable String destinationCidr;
    /**
     * @return (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
     * 
     */
    private @Nullable CaptureFilterVtapCaptureFilterRuleIcmpOptions icmpOptions;
    /**
     * @return (Updatable) The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
     * * 1 = ICMP
     * * 6 = TCP
     * * 17 = UDP
     * 
     */
    private @Nullable String protocol;
    /**
     * @return (Updatable) Include or exclude packets meeting this definition from mirrored traffic.
     * 
     */
    private @Nullable String ruleAction;
    /**
     * @return (Updatable) Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
     * 
     */
    private @Nullable String sourceCidr;
    /**
     * @return (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable CaptureFilterVtapCaptureFilterRuleTcpOptions tcpOptions;
    /**
     * @return (Updatable) The traffic direction the VTAP is configured to mirror.
     * 
     */
    private String trafficDirection;
    /**
     * @return (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable CaptureFilterVtapCaptureFilterRuleUdpOptions udpOptions;

    private CaptureFilterVtapCaptureFilterRule() {}
    /**
     * @return (Updatable) Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
     * 
     */
    public Optional<String> destinationCidr() {
        return Optional.ofNullable(this.destinationCidr);
    }
    /**
     * @return (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
     * 
     */
    public Optional<CaptureFilterVtapCaptureFilterRuleIcmpOptions> icmpOptions() {
        return Optional.ofNullable(this.icmpOptions);
    }
    /**
     * @return (Updatable) The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
     * * 1 = ICMP
     * * 6 = TCP
     * * 17 = UDP
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return (Updatable) Include or exclude packets meeting this definition from mirrored traffic.
     * 
     */
    public Optional<String> ruleAction() {
        return Optional.ofNullable(this.ruleAction);
    }
    /**
     * @return (Updatable) Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
     * 
     */
    public Optional<String> sourceCidr() {
        return Optional.ofNullable(this.sourceCidr);
    }
    /**
     * @return (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<CaptureFilterVtapCaptureFilterRuleTcpOptions> tcpOptions() {
        return Optional.ofNullable(this.tcpOptions);
    }
    /**
     * @return (Updatable) The traffic direction the VTAP is configured to mirror.
     * 
     */
    public String trafficDirection() {
        return this.trafficDirection;
    }
    /**
     * @return (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<CaptureFilterVtapCaptureFilterRuleUdpOptions> udpOptions() {
        return Optional.ofNullable(this.udpOptions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CaptureFilterVtapCaptureFilterRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String destinationCidr;
        private @Nullable CaptureFilterVtapCaptureFilterRuleIcmpOptions icmpOptions;
        private @Nullable String protocol;
        private @Nullable String ruleAction;
        private @Nullable String sourceCidr;
        private @Nullable CaptureFilterVtapCaptureFilterRuleTcpOptions tcpOptions;
        private String trafficDirection;
        private @Nullable CaptureFilterVtapCaptureFilterRuleUdpOptions udpOptions;
        public Builder() {}
        public Builder(CaptureFilterVtapCaptureFilterRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationCidr = defaults.destinationCidr;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.ruleAction = defaults.ruleAction;
    	      this.sourceCidr = defaults.sourceCidr;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.trafficDirection = defaults.trafficDirection;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder destinationCidr(@Nullable String destinationCidr) {

            this.destinationCidr = destinationCidr;
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(@Nullable CaptureFilterVtapCaptureFilterRuleIcmpOptions icmpOptions) {

            this.icmpOptions = icmpOptions;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ruleAction(@Nullable String ruleAction) {

            this.ruleAction = ruleAction;
            return this;
        }
        @CustomType.Setter
        public Builder sourceCidr(@Nullable String sourceCidr) {

            this.sourceCidr = sourceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(@Nullable CaptureFilterVtapCaptureFilterRuleTcpOptions tcpOptions) {

            this.tcpOptions = tcpOptions;
            return this;
        }
        @CustomType.Setter
        public Builder trafficDirection(String trafficDirection) {
            if (trafficDirection == null) {
              throw new MissingRequiredPropertyException("CaptureFilterVtapCaptureFilterRule", "trafficDirection");
            }
            this.trafficDirection = trafficDirection;
            return this;
        }
        @CustomType.Setter
        public Builder udpOptions(@Nullable CaptureFilterVtapCaptureFilterRuleUdpOptions udpOptions) {

            this.udpOptions = udpOptions;
            return this;
        }
        public CaptureFilterVtapCaptureFilterRule build() {
            final var _resultValue = new CaptureFilterVtapCaptureFilterRule();
            _resultValue.destinationCidr = destinationCidr;
            _resultValue.icmpOptions = icmpOptions;
            _resultValue.protocol = protocol;
            _resultValue.ruleAction = ruleAction;
            _resultValue.sourceCidr = sourceCidr;
            _resultValue.tcpOptions = tcpOptions;
            _resultValue.trafficDirection = trafficDirection;
            _resultValue.udpOptions = udpOptions;
            return _resultValue;
        }
    }
}
