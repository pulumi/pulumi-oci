// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.CrossConnectMacsecPropertiesPrimaryKey;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CrossConnectMacsecProperties {
    /**
     * @return (Updatable) Type of encryption cipher suite to use for the MACsec connection.
     * 
     */
    private @Nullable String encryptionCipher;
    /**
     * @return (Updatable) Indicates whether unencrypted traffic is allowed if MACsec Key Agreement protocol (MKA) fails.
     * 
     */
    private @Nullable Boolean isUnprotectedTrafficAllowed;
    /**
     * @return (Updatable) Defines the secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s held in Vault that represent the MACsec key.
     * 
     */
    private @Nullable CrossConnectMacsecPropertiesPrimaryKey primaryKey;
    /**
     * @return (Updatable) Indicates whether or not MACsec is enabled.
     * 
     */
    private String state;

    private CrossConnectMacsecProperties() {}
    /**
     * @return (Updatable) Type of encryption cipher suite to use for the MACsec connection.
     * 
     */
    public Optional<String> encryptionCipher() {
        return Optional.ofNullable(this.encryptionCipher);
    }
    /**
     * @return (Updatable) Indicates whether unencrypted traffic is allowed if MACsec Key Agreement protocol (MKA) fails.
     * 
     */
    public Optional<Boolean> isUnprotectedTrafficAllowed() {
        return Optional.ofNullable(this.isUnprotectedTrafficAllowed);
    }
    /**
     * @return (Updatable) Defines the secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s held in Vault that represent the MACsec key.
     * 
     */
    public Optional<CrossConnectMacsecPropertiesPrimaryKey> primaryKey() {
        return Optional.ofNullable(this.primaryKey);
    }
    /**
     * @return (Updatable) Indicates whether or not MACsec is enabled.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CrossConnectMacsecProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String encryptionCipher;
        private @Nullable Boolean isUnprotectedTrafficAllowed;
        private @Nullable CrossConnectMacsecPropertiesPrimaryKey primaryKey;
        private String state;
        public Builder() {}
        public Builder(CrossConnectMacsecProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryptionCipher = defaults.encryptionCipher;
    	      this.isUnprotectedTrafficAllowed = defaults.isUnprotectedTrafficAllowed;
    	      this.primaryKey = defaults.primaryKey;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder encryptionCipher(@Nullable String encryptionCipher) {
            this.encryptionCipher = encryptionCipher;
            return this;
        }
        @CustomType.Setter
        public Builder isUnprotectedTrafficAllowed(@Nullable Boolean isUnprotectedTrafficAllowed) {
            this.isUnprotectedTrafficAllowed = isUnprotectedTrafficAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder primaryKey(@Nullable CrossConnectMacsecPropertiesPrimaryKey primaryKey) {
            this.primaryKey = primaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public CrossConnectMacsecProperties build() {
            final var o = new CrossConnectMacsecProperties();
            o.encryptionCipher = encryptionCipher;
            o.isUnprotectedTrafficAllowed = isUnprotectedTrafficAllowed;
            o.primaryKey = primaryKey;
            o.state = state;
            return o;
        }
    }
}
