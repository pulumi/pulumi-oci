// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetBootVolumeBackupSourceDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBootVolumeBackupResult {
    private String bootVolumeBackupId;
    /**
     * @return The OCID of the boot volume.
     * 
     */
    private String bootVolumeId;
    /**
     * @return The OCID of the compartment that contains the boot volume backup.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return The date and time the volume backup will expire and be automatically deleted. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). This parameter will always be present for backups that were created automatically by a scheduled-backup policy. For manually created backups, it will be absent, signifying that there is no expiration time and the backup will last forever until manually deleted.
     * 
     */
    private String expirationTime;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the boot volume backup.
     * 
     */
    private String id;
    /**
     * @return The image OCID used to create the boot volume the backup is taken from.
     * 
     */
    private String imageId;
    /**
     * @return The OCID of the Vault service master encryption assigned to the boot volume backup. For more information about the Vault service and encryption keys, see [Overview of Vault service](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm) and [Using Keys](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Tasks/usingkeys.htm).
     * 
     */
    private String kmsKeyId;
    /**
     * @return The size of the boot volume, in GBs.
     * 
     */
    private String sizeInGbs;
    /**
     * @return The OCID of the source boot volume backup.
     * 
     */
    private String sourceBootVolumeBackupId;
    private List<GetBootVolumeBackupSourceDetail> sourceDetails;
    /**
     * @return Specifies whether the backup was created manually, or via scheduled backup policy.
     * 
     */
    private String sourceType;
    /**
     * @return The current state of a boot volume backup.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the boot volume backup was created. This is the time the actual point-in-time image of the volume data was taken. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the request to create the boot volume backup was received. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeRequestReceived;
    /**
     * @return The type of a volume backup. Supported values are &#39;FULL&#39; or &#39;INCREMENTAL&#39;.
     * 
     */
    private String type;
    /**
     * @return The size used by the backup, in GBs. It is typically smaller than sizeInGBs, depending on the space consumed on the boot volume and whether the backup is full or incremental.
     * 
     */
    private String uniqueSizeInGbs;

    private GetBootVolumeBackupResult() {}
    public String bootVolumeBackupId() {
        return this.bootVolumeBackupId;
    }
    /**
     * @return The OCID of the boot volume.
     * 
     */
    public String bootVolumeId() {
        return this.bootVolumeId;
    }
    /**
     * @return The OCID of the compartment that contains the boot volume backup.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The date and time the volume backup will expire and be automatically deleted. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). This parameter will always be present for backups that were created automatically by a scheduled-backup policy. For manually created backups, it will be absent, signifying that there is no expiration time and the backup will last forever until manually deleted.
     * 
     */
    public String expirationTime() {
        return this.expirationTime;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the boot volume backup.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The image OCID used to create the boot volume the backup is taken from.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The OCID of the Vault service master encryption assigned to the boot volume backup. For more information about the Vault service and encryption keys, see [Overview of Vault service](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm) and [Using Keys](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Tasks/usingkeys.htm).
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return The size of the boot volume, in GBs.
     * 
     */
    public String sizeInGbs() {
        return this.sizeInGbs;
    }
    /**
     * @return The OCID of the source boot volume backup.
     * 
     */
    public String sourceBootVolumeBackupId() {
        return this.sourceBootVolumeBackupId;
    }
    public List<GetBootVolumeBackupSourceDetail> sourceDetails() {
        return this.sourceDetails;
    }
    /**
     * @return Specifies whether the backup was created manually, or via scheduled backup policy.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return The current state of a boot volume backup.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the boot volume backup was created. This is the time the actual point-in-time image of the volume data was taken. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the request to create the boot volume backup was received. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeRequestReceived() {
        return this.timeRequestReceived;
    }
    /**
     * @return The type of a volume backup. Supported values are &#39;FULL&#39; or &#39;INCREMENTAL&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The size used by the backup, in GBs. It is typically smaller than sizeInGBs, depending on the space consumed on the boot volume and whether the backup is full or incremental.
     * 
     */
    public String uniqueSizeInGbs() {
        return this.uniqueSizeInGbs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBootVolumeBackupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bootVolumeBackupId;
        private String bootVolumeId;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private String expirationTime;
        private Map<String,String> freeformTags;
        private String id;
        private String imageId;
        private String kmsKeyId;
        private String sizeInGbs;
        private String sourceBootVolumeBackupId;
        private List<GetBootVolumeBackupSourceDetail> sourceDetails;
        private String sourceType;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeRequestReceived;
        private String type;
        private String uniqueSizeInGbs;
        public Builder() {}
        public Builder(GetBootVolumeBackupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootVolumeBackupId = defaults.bootVolumeBackupId;
    	      this.bootVolumeId = defaults.bootVolumeId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.expirationTime = defaults.expirationTime;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.sizeInGbs = defaults.sizeInGbs;
    	      this.sourceBootVolumeBackupId = defaults.sourceBootVolumeBackupId;
    	      this.sourceDetails = defaults.sourceDetails;
    	      this.sourceType = defaults.sourceType;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeRequestReceived = defaults.timeRequestReceived;
    	      this.type = defaults.type;
    	      this.uniqueSizeInGbs = defaults.uniqueSizeInGbs;
        }

        @CustomType.Setter
        public Builder bootVolumeBackupId(String bootVolumeBackupId) {
            if (bootVolumeBackupId == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "bootVolumeBackupId");
            }
            this.bootVolumeBackupId = bootVolumeBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder bootVolumeId(String bootVolumeId) {
            if (bootVolumeId == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "bootVolumeId");
            }
            this.bootVolumeId = bootVolumeId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder expirationTime(String expirationTime) {
            if (expirationTime == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "expirationTime");
            }
            this.expirationTime = expirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder sizeInGbs(String sizeInGbs) {
            if (sizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "sizeInGbs");
            }
            this.sizeInGbs = sizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder sourceBootVolumeBackupId(String sourceBootVolumeBackupId) {
            if (sourceBootVolumeBackupId == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "sourceBootVolumeBackupId");
            }
            this.sourceBootVolumeBackupId = sourceBootVolumeBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDetails(List<GetBootVolumeBackupSourceDetail> sourceDetails) {
            if (sourceDetails == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "sourceDetails");
            }
            this.sourceDetails = sourceDetails;
            return this;
        }
        public Builder sourceDetails(GetBootVolumeBackupSourceDetail... sourceDetails) {
            return sourceDetails(List.of(sourceDetails));
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeRequestReceived(String timeRequestReceived) {
            if (timeRequestReceived == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "timeRequestReceived");
            }
            this.timeRequestReceived = timeRequestReceived;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueSizeInGbs(String uniqueSizeInGbs) {
            if (uniqueSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetBootVolumeBackupResult", "uniqueSizeInGbs");
            }
            this.uniqueSizeInGbs = uniqueSizeInGbs;
            return this;
        }
        public GetBootVolumeBackupResult build() {
            final var _resultValue = new GetBootVolumeBackupResult();
            _resultValue.bootVolumeBackupId = bootVolumeBackupId;
            _resultValue.bootVolumeId = bootVolumeId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.expirationTime = expirationTime;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.sizeInGbs = sizeInGbs;
            _resultValue.sourceBootVolumeBackupId = sourceBootVolumeBackupId;
            _resultValue.sourceDetails = sourceDetails;
            _resultValue.sourceType = sourceType;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeRequestReceived = timeRequestReceived;
            _resultValue.type = type;
            _resultValue.uniqueSizeInGbs = uniqueSizeInGbs;
            return _resultValue;
        }
    }
}
