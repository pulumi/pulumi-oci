// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetBootVolumeBackupsBootVolumeBackup;
import com.pulumi.oci.Core.outputs.GetBootVolumeBackupsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBootVolumeBackupsResult {
    /**
     * @return The list of boot_volume_backups.
     * 
     */
    private List<GetBootVolumeBackupsBootVolumeBackup> bootVolumeBackups;
    /**
     * @return The OCID of the boot volume.
     * 
     */
    private @Nullable String bootVolumeId;
    /**
     * @return The OCID of the compartment that contains the boot volume backup.
     * 
     */
    private String compartmentId;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetBootVolumeBackupsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The OCID of the source boot volume backup.
     * 
     */
    private @Nullable String sourceBootVolumeBackupId;
    /**
     * @return The current state of a boot volume backup.
     * 
     */
    private @Nullable String state;

    private GetBootVolumeBackupsResult() {}
    /**
     * @return The list of boot_volume_backups.
     * 
     */
    public List<GetBootVolumeBackupsBootVolumeBackup> bootVolumeBackups() {
        return this.bootVolumeBackups;
    }
    /**
     * @return The OCID of the boot volume.
     * 
     */
    public Optional<String> bootVolumeId() {
        return Optional.ofNullable(this.bootVolumeId);
    }
    /**
     * @return The OCID of the compartment that contains the boot volume backup.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetBootVolumeBackupsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the source boot volume backup.
     * 
     */
    public Optional<String> sourceBootVolumeBackupId() {
        return Optional.ofNullable(this.sourceBootVolumeBackupId);
    }
    /**
     * @return The current state of a boot volume backup.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBootVolumeBackupsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBootVolumeBackupsBootVolumeBackup> bootVolumeBackups;
        private @Nullable String bootVolumeId;
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetBootVolumeBackupsFilter> filters;
        private String id;
        private @Nullable String sourceBootVolumeBackupId;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetBootVolumeBackupsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootVolumeBackups = defaults.bootVolumeBackups;
    	      this.bootVolumeId = defaults.bootVolumeId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.sourceBootVolumeBackupId = defaults.sourceBootVolumeBackupId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder bootVolumeBackups(List<GetBootVolumeBackupsBootVolumeBackup> bootVolumeBackups) {
            this.bootVolumeBackups = Objects.requireNonNull(bootVolumeBackups);
            return this;
        }
        public Builder bootVolumeBackups(GetBootVolumeBackupsBootVolumeBackup... bootVolumeBackups) {
            return bootVolumeBackups(List.of(bootVolumeBackups));
        }
        @CustomType.Setter
        public Builder bootVolumeId(@Nullable String bootVolumeId) {
            this.bootVolumeId = bootVolumeId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetBootVolumeBackupsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetBootVolumeBackupsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder sourceBootVolumeBackupId(@Nullable String sourceBootVolumeBackupId) {
            this.sourceBootVolumeBackupId = sourceBootVolumeBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetBootVolumeBackupsResult build() {
            final var o = new GetBootVolumeBackupsResult();
            o.bootVolumeBackups = bootVolumeBackups;
            o.bootVolumeId = bootVolumeId;
            o.compartmentId = compartmentId;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.sourceBootVolumeBackupId = sourceBootVolumeBackupId;
            o.state = state;
            return o;
        }
    }
}
