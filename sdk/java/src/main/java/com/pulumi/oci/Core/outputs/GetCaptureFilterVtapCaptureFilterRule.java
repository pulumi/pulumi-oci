// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetCaptureFilterVtapCaptureFilterRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOption;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCaptureFilterVtapCaptureFilterRule {
    /**
     * @return Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
     * 
     */
    private @Nullable String destinationCidr;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private @Nullable List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions;
    /**
     * @return The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
     * * 1 = ICMP
     * * 6 = TCP
     * * 17 = UDP
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Include or exclude packets meeting this definition from mirrored traffic.
     * 
     */
    private @Nullable String ruleAction;
    /**
     * @return Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
     * 
     */
    private @Nullable String sourceCidr;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions;
    /**
     * @return The traffic direction the VTAP is configured to mirror.
     * 
     */
    private @Nullable String trafficDirection;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions;

    private GetCaptureFilterVtapCaptureFilterRule() {}
    /**
     * @return Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
     * 
     */
    public Optional<String> destinationCidr() {
        return Optional.ofNullable(this.destinationCidr);
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions() {
        return this.icmpOptions == null ? List.of() : this.icmpOptions;
    }
    /**
     * @return The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
     * * 1 = ICMP
     * * 6 = TCP
     * * 17 = UDP
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Include or exclude packets meeting this definition from mirrored traffic.
     * 
     */
    public Optional<String> ruleAction() {
        return Optional.ofNullable(this.ruleAction);
    }
    /**
     * @return Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
     * 
     */
    public Optional<String> sourceCidr() {
        return Optional.ofNullable(this.sourceCidr);
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions() {
        return this.tcpOptions == null ? List.of() : this.tcpOptions;
    }
    /**
     * @return The traffic direction the VTAP is configured to mirror.
     * 
     */
    public Optional<String> trafficDirection() {
        return Optional.ofNullable(this.trafficDirection);
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions() {
        return this.udpOptions == null ? List.of() : this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCaptureFilterVtapCaptureFilterRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String destinationCidr;
        private @Nullable List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions;
        private @Nullable String protocol;
        private @Nullable String ruleAction;
        private @Nullable String sourceCidr;
        private @Nullable List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions;
        private @Nullable String trafficDirection;
        private @Nullable List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions;
        public Builder() {}
        public Builder(GetCaptureFilterVtapCaptureFilterRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationCidr = defaults.destinationCidr;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.ruleAction = defaults.ruleAction;
    	      this.sourceCidr = defaults.sourceCidr;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.trafficDirection = defaults.trafficDirection;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder destinationCidr(@Nullable String destinationCidr) {
            this.destinationCidr = destinationCidr;
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(@Nullable List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions) {
            this.icmpOptions = icmpOptions;
            return this;
        }
        public Builder icmpOptions(GetCaptureFilterVtapCaptureFilterRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ruleAction(@Nullable String ruleAction) {
            this.ruleAction = ruleAction;
            return this;
        }
        @CustomType.Setter
        public Builder sourceCidr(@Nullable String sourceCidr) {
            this.sourceCidr = sourceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(@Nullable List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions) {
            this.tcpOptions = tcpOptions;
            return this;
        }
        public Builder tcpOptions(GetCaptureFilterVtapCaptureFilterRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        @CustomType.Setter
        public Builder trafficDirection(@Nullable String trafficDirection) {
            this.trafficDirection = trafficDirection;
            return this;
        }
        @CustomType.Setter
        public Builder udpOptions(@Nullable List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions) {
            this.udpOptions = udpOptions;
            return this;
        }
        public Builder udpOptions(GetCaptureFilterVtapCaptureFilterRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }
        public GetCaptureFilterVtapCaptureFilterRule build() {
            final var o = new GetCaptureFilterVtapCaptureFilterRule();
            o.destinationCidr = destinationCidr;
            o.icmpOptions = icmpOptions;
            o.protocol = protocol;
            o.ruleAction = ruleAction;
            o.sourceCidr = sourceCidr;
            o.tcpOptions = tcpOptions;
            o.trafficDirection = trafficDirection;
            o.udpOptions = udpOptions;
            return o;
        }
    }
}
