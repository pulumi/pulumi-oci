// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetCaptureFilterVtapCaptureFilterRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOption;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCaptureFilterVtapCaptureFilterRule {
    /**
     * @return Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
     * 
     */
    private String destinationCidr;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions;
    /**
     * @return The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
     * * 1 = ICMP
     * * 6 = TCP
     * * 17 = UDP
     * 
     */
    private String protocol;
    /**
     * @return Include or exclude packets meeting this definition from mirrored traffic.
     * 
     */
    private String ruleAction;
    /**
     * @return Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
     * 
     */
    private String sourceCidr;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions;
    /**
     * @return The traffic direction the VTAP is configured to mirror.
     * 
     */
    private String trafficDirection;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions;

    private GetCaptureFilterVtapCaptureFilterRule() {}
    /**
     * @return Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
     * 
     */
    public String destinationCidr() {
        return this.destinationCidr;
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions() {
        return this.icmpOptions;
    }
    /**
     * @return The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
     * * 1 = ICMP
     * * 6 = TCP
     * * 17 = UDP
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Include or exclude packets meeting this definition from mirrored traffic.
     * 
     */
    public String ruleAction() {
        return this.ruleAction;
    }
    /**
     * @return Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
     * 
     */
    public String sourceCidr() {
        return this.sourceCidr;
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions() {
        return this.tcpOptions;
    }
    /**
     * @return The traffic direction the VTAP is configured to mirror.
     * 
     */
    public String trafficDirection() {
        return this.trafficDirection;
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions() {
        return this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCaptureFilterVtapCaptureFilterRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationCidr;
        private List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions;
        private String protocol;
        private String ruleAction;
        private String sourceCidr;
        private List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions;
        private String trafficDirection;
        private List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions;
        public Builder() {}
        public Builder(GetCaptureFilterVtapCaptureFilterRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationCidr = defaults.destinationCidr;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.ruleAction = defaults.ruleAction;
    	      this.sourceCidr = defaults.sourceCidr;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.trafficDirection = defaults.trafficDirection;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder destinationCidr(String destinationCidr) {
            if (destinationCidr == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "destinationCidr");
            }
            this.destinationCidr = destinationCidr;
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(List<GetCaptureFilterVtapCaptureFilterRuleIcmpOption> icmpOptions) {
            if (icmpOptions == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "icmpOptions");
            }
            this.icmpOptions = icmpOptions;
            return this;
        }
        public Builder icmpOptions(GetCaptureFilterVtapCaptureFilterRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ruleAction(String ruleAction) {
            if (ruleAction == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "ruleAction");
            }
            this.ruleAction = ruleAction;
            return this;
        }
        @CustomType.Setter
        public Builder sourceCidr(String sourceCidr) {
            if (sourceCidr == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "sourceCidr");
            }
            this.sourceCidr = sourceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(List<GetCaptureFilterVtapCaptureFilterRuleTcpOption> tcpOptions) {
            if (tcpOptions == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "tcpOptions");
            }
            this.tcpOptions = tcpOptions;
            return this;
        }
        public Builder tcpOptions(GetCaptureFilterVtapCaptureFilterRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        @CustomType.Setter
        public Builder trafficDirection(String trafficDirection) {
            if (trafficDirection == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "trafficDirection");
            }
            this.trafficDirection = trafficDirection;
            return this;
        }
        @CustomType.Setter
        public Builder udpOptions(List<GetCaptureFilterVtapCaptureFilterRuleUdpOption> udpOptions) {
            if (udpOptions == null) {
              throw new MissingRequiredPropertyException("GetCaptureFilterVtapCaptureFilterRule", "udpOptions");
            }
            this.udpOptions = udpOptions;
            return this;
        }
        public Builder udpOptions(GetCaptureFilterVtapCaptureFilterRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }
        public GetCaptureFilterVtapCaptureFilterRule build() {
            final var _resultValue = new GetCaptureFilterVtapCaptureFilterRule();
            _resultValue.destinationCidr = destinationCidr;
            _resultValue.icmpOptions = icmpOptions;
            _resultValue.protocol = protocol;
            _resultValue.ruleAction = ruleAction;
            _resultValue.sourceCidr = sourceCidr;
            _resultValue.tcpOptions = tcpOptions;
            _resultValue.trafficDirection = trafficDirection;
            _resultValue.udpOptions = udpOptions;
            return _resultValue;
        }
    }
}
