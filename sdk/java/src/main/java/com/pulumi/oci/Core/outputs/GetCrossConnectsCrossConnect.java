// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetCrossConnectsCrossConnectMacsecProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCrossConnectsCrossConnect {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect group.
     * 
     */
    private String crossConnectGroupId;
    /**
     * @return A reference name or identifier for the physical fiber connection that this cross-connect uses.
     * 
     */
    private String customerReferenceName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    private String displayName;
    private String farCrossConnectOrCrossConnectGroupId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The cross-connect&#39;s Oracle ID (OCID).
     * 
     */
    private String id;
    private Boolean isActive;
    /**
     * @return The name of the FastConnect location where this cross-connect is installed.
     * 
     */
    private String locationName;
    /**
     * @return Properties used for MACsec (if capable).
     * 
     */
    private List<GetCrossConnectsCrossConnectMacsecProperty> macsecProperties;
    private String nearCrossConnectOrCrossConnectGroupId;
    /**
     * @return The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
     * 
     */
    private String ociLogicalDeviceName;
    /**
     * @return The FastConnect device that terminates the physical connection.
     * 
     */
    private String ociPhysicalDeviceName;
    /**
     * @return A string identifying the meet-me room port for this cross-connect.
     * 
     */
    private String portName;
    /**
     * @return The port speed for this cross-connect.  Example: `10 Gbps`
     * 
     */
    private String portSpeedShapeName;
    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    private String state;
    /**
     * @return The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;

    private GetCrossConnectsCrossConnect() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect group.
     * 
     */
    public String crossConnectGroupId() {
        return this.crossConnectGroupId;
    }
    /**
     * @return A reference name or identifier for the physical fiber connection that this cross-connect uses.
     * 
     */
    public String customerReferenceName() {
        return this.customerReferenceName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public String farCrossConnectOrCrossConnectGroupId() {
        return this.farCrossConnectOrCrossConnectGroupId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The cross-connect&#39;s Oracle ID (OCID).
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isActive() {
        return this.isActive;
    }
    /**
     * @return The name of the FastConnect location where this cross-connect is installed.
     * 
     */
    public String locationName() {
        return this.locationName;
    }
    /**
     * @return Properties used for MACsec (if capable).
     * 
     */
    public List<GetCrossConnectsCrossConnectMacsecProperty> macsecProperties() {
        return this.macsecProperties;
    }
    public String nearCrossConnectOrCrossConnectGroupId() {
        return this.nearCrossConnectOrCrossConnectGroupId;
    }
    /**
     * @return The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
     * 
     */
    public String ociLogicalDeviceName() {
        return this.ociLogicalDeviceName;
    }
    /**
     * @return The FastConnect device that terminates the physical connection.
     * 
     */
    public String ociPhysicalDeviceName() {
        return this.ociPhysicalDeviceName;
    }
    /**
     * @return A string identifying the meet-me room port for this cross-connect.
     * 
     */
    public String portName() {
        return this.portName;
    }
    /**
     * @return The port speed for this cross-connect.  Example: `10 Gbps`
     * 
     */
    public String portSpeedShapeName() {
        return this.portSpeedShapeName;
    }
    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCrossConnectsCrossConnect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String crossConnectGroupId;
        private String customerReferenceName;
        private Map<String,Object> definedTags;
        private String displayName;
        private String farCrossConnectOrCrossConnectGroupId;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isActive;
        private String locationName;
        private List<GetCrossConnectsCrossConnectMacsecProperty> macsecProperties;
        private String nearCrossConnectOrCrossConnectGroupId;
        private String ociLogicalDeviceName;
        private String ociPhysicalDeviceName;
        private String portName;
        private String portSpeedShapeName;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetCrossConnectsCrossConnect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.crossConnectGroupId = defaults.crossConnectGroupId;
    	      this.customerReferenceName = defaults.customerReferenceName;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.farCrossConnectOrCrossConnectGroupId = defaults.farCrossConnectOrCrossConnectGroupId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isActive = defaults.isActive;
    	      this.locationName = defaults.locationName;
    	      this.macsecProperties = defaults.macsecProperties;
    	      this.nearCrossConnectOrCrossConnectGroupId = defaults.nearCrossConnectOrCrossConnectGroupId;
    	      this.ociLogicalDeviceName = defaults.ociLogicalDeviceName;
    	      this.ociPhysicalDeviceName = defaults.ociPhysicalDeviceName;
    	      this.portName = defaults.portName;
    	      this.portSpeedShapeName = defaults.portSpeedShapeName;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder crossConnectGroupId(String crossConnectGroupId) {
            this.crossConnectGroupId = Objects.requireNonNull(crossConnectGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder customerReferenceName(String customerReferenceName) {
            this.customerReferenceName = Objects.requireNonNull(customerReferenceName);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder farCrossConnectOrCrossConnectGroupId(String farCrossConnectOrCrossConnectGroupId) {
            this.farCrossConnectOrCrossConnectGroupId = Objects.requireNonNull(farCrossConnectOrCrossConnectGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isActive(Boolean isActive) {
            this.isActive = Objects.requireNonNull(isActive);
            return this;
        }
        @CustomType.Setter
        public Builder locationName(String locationName) {
            this.locationName = Objects.requireNonNull(locationName);
            return this;
        }
        @CustomType.Setter
        public Builder macsecProperties(List<GetCrossConnectsCrossConnectMacsecProperty> macsecProperties) {
            this.macsecProperties = Objects.requireNonNull(macsecProperties);
            return this;
        }
        public Builder macsecProperties(GetCrossConnectsCrossConnectMacsecProperty... macsecProperties) {
            return macsecProperties(List.of(macsecProperties));
        }
        @CustomType.Setter
        public Builder nearCrossConnectOrCrossConnectGroupId(String nearCrossConnectOrCrossConnectGroupId) {
            this.nearCrossConnectOrCrossConnectGroupId = Objects.requireNonNull(nearCrossConnectOrCrossConnectGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder ociLogicalDeviceName(String ociLogicalDeviceName) {
            this.ociLogicalDeviceName = Objects.requireNonNull(ociLogicalDeviceName);
            return this;
        }
        @CustomType.Setter
        public Builder ociPhysicalDeviceName(String ociPhysicalDeviceName) {
            this.ociPhysicalDeviceName = Objects.requireNonNull(ociPhysicalDeviceName);
            return this;
        }
        @CustomType.Setter
        public Builder portName(String portName) {
            this.portName = Objects.requireNonNull(portName);
            return this;
        }
        @CustomType.Setter
        public Builder portSpeedShapeName(String portSpeedShapeName) {
            this.portSpeedShapeName = Objects.requireNonNull(portSpeedShapeName);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public GetCrossConnectsCrossConnect build() {
            final var _resultValue = new GetCrossConnectsCrossConnect();
            _resultValue.compartmentId = compartmentId;
            _resultValue.crossConnectGroupId = crossConnectGroupId;
            _resultValue.customerReferenceName = customerReferenceName;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.farCrossConnectOrCrossConnectGroupId = farCrossConnectOrCrossConnectGroupId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isActive = isActive;
            _resultValue.locationName = locationName;
            _resultValue.macsecProperties = macsecProperties;
            _resultValue.nearCrossConnectOrCrossConnectGroupId = nearCrossConnectOrCrossConnectGroupId;
            _resultValue.ociLogicalDeviceName = ociLogicalDeviceName;
            _resultValue.ociPhysicalDeviceName = ociPhysicalDeviceName;
            _resultValue.portName = portName;
            _resultValue.portSpeedShapeName = portSpeedShapeName;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
