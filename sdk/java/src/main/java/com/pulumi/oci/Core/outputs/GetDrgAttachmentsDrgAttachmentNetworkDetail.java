// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDrgAttachmentsDrgAttachmentNetworkDetail {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network attached to the DRG.
     * 
     */
    private String id;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target IPSec tunnel attachment.
     * 
     */
    private List<String> ids;
    /**
     * @return The IPSec connection that contains the attached IPSec tunnel.
     * 
     */
    private String ipsecConnectionId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table the DRG attachment is using.
     * 
     */
    private String routeTableId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual circuit&#39;s DRG attachment.
     * 
     */
    private String transportAttachmentId;
    /**
     * @return Boolean flag that determines wether all traffic over the virtual circuits is encrypted.  Example: `true`
     * 
     */
    private Boolean transportOnlyMode;
    /**
     * @return The type can be one of these values: `IPSEC_TUNNEL`, `LOOPBACK`, `REMOTE_PEERING_CONNECTION`, `VCN`, `VIRTUAL_CIRCUIT`
     * 
     */
    private String type;
    /**
     * @return Indicates whether the VCN CIDRs or the individual subnet CIDRs are imported from the attachment. Routes from the VCN ingress route table are always imported.
     * 
     */
    private String vcnRouteType;

    private GetDrgAttachmentsDrgAttachmentNetworkDetail() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network attached to the DRG.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target IPSec tunnel attachment.
     * 
     */
    public List<String> ids() {
        return this.ids;
    }
    /**
     * @return The IPSec connection that contains the attached IPSec tunnel.
     * 
     */
    public String ipsecConnectionId() {
        return this.ipsecConnectionId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table the DRG attachment is using.
     * 
     */
    public String routeTableId() {
        return this.routeTableId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual circuit&#39;s DRG attachment.
     * 
     */
    public String transportAttachmentId() {
        return this.transportAttachmentId;
    }
    /**
     * @return Boolean flag that determines wether all traffic over the virtual circuits is encrypted.  Example: `true`
     * 
     */
    public Boolean transportOnlyMode() {
        return this.transportOnlyMode;
    }
    /**
     * @return The type can be one of these values: `IPSEC_TUNNEL`, `LOOPBACK`, `REMOTE_PEERING_CONNECTION`, `VCN`, `VIRTUAL_CIRCUIT`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Indicates whether the VCN CIDRs or the individual subnet CIDRs are imported from the attachment. Routes from the VCN ingress route table are always imported.
     * 
     */
    public String vcnRouteType() {
        return this.vcnRouteType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDrgAttachmentsDrgAttachmentNetworkDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private List<String> ids;
        private String ipsecConnectionId;
        private String routeTableId;
        private String transportAttachmentId;
        private Boolean transportOnlyMode;
        private String type;
        private String vcnRouteType;
        public Builder() {}
        public Builder(GetDrgAttachmentsDrgAttachmentNetworkDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.ipsecConnectionId = defaults.ipsecConnectionId;
    	      this.routeTableId = defaults.routeTableId;
    	      this.transportAttachmentId = defaults.transportAttachmentId;
    	      this.transportOnlyMode = defaults.transportOnlyMode;
    	      this.type = defaults.type;
    	      this.vcnRouteType = defaults.vcnRouteType;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            this.ids = Objects.requireNonNull(ids);
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder ipsecConnectionId(String ipsecConnectionId) {
            this.ipsecConnectionId = Objects.requireNonNull(ipsecConnectionId);
            return this;
        }
        @CustomType.Setter
        public Builder routeTableId(String routeTableId) {
            this.routeTableId = Objects.requireNonNull(routeTableId);
            return this;
        }
        @CustomType.Setter
        public Builder transportAttachmentId(String transportAttachmentId) {
            this.transportAttachmentId = Objects.requireNonNull(transportAttachmentId);
            return this;
        }
        @CustomType.Setter
        public Builder transportOnlyMode(Boolean transportOnlyMode) {
            this.transportOnlyMode = Objects.requireNonNull(transportOnlyMode);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder vcnRouteType(String vcnRouteType) {
            this.vcnRouteType = Objects.requireNonNull(vcnRouteType);
            return this;
        }
        public GetDrgAttachmentsDrgAttachmentNetworkDetail build() {
            final var _resultValue = new GetDrgAttachmentsDrgAttachmentNetworkDetail();
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.ipsecConnectionId = ipsecConnectionId;
            _resultValue.routeTableId = routeTableId;
            _resultValue.transportAttachmentId = transportAttachmentId;
            _resultValue.transportOnlyMode = transportOnlyMode;
            _resultValue.type = type;
            _resultValue.vcnRouteType = vcnRouteType;
            return _resultValue;
        }
    }
}
