// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFastConnectProviderServicesFastConnectProviderService {
    /**
     * @return Who is responsible for managing the virtual circuit bandwidth.
     * 
     */
    private @Nullable String bandwithShapeManagement;
    /**
     * @return Who is responsible for managing the ASN information for the network at the other end of the connection from Oracle.
     * 
     */
    private @Nullable String customerAsnManagement;
    /**
     * @return The location of the provider&#39;s website or portal. This portal is where you can get information about the provider service, create a virtual circuit connection from the provider to Oracle Cloud Infrastructure, and retrieve your provider service key for that virtual circuit connection.  Example: `https://example.com`
     * 
     */
    private @Nullable String description;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the service offered by the provider.
     * 
     */
    private @Nullable String id;
    /**
     * @return Who is responsible for managing the private peering BGP information.
     * 
     */
    private @Nullable String privatePeeringBgpManagement;
    /**
     * @return The name of the provider.
     * 
     */
    private @Nullable String providerName;
    /**
     * @return Who is responsible for managing the provider service key.
     * 
     */
    private @Nullable String providerServiceKeyManagement;
    /**
     * @return The name of the service offered by the provider.
     * 
     */
    private @Nullable String providerServiceName;
    /**
     * @return Who is responsible for managing the public peering BGP information.
     * 
     */
    private @Nullable String publicPeeringBgpManagement;
    /**
     * @return Total number of cross-connect or cross-connect groups required for the virtual circuit.
     * 
     */
    private @Nullable Integer requiredTotalCrossConnects;
    /**
     * @return An array of virtual circuit types supported by this service.
     * 
     */
    private @Nullable List<String> supportedVirtualCircuitTypes;
    /**
     * @return Provider service type.
     * 
     */
    private @Nullable String type;

    private GetFastConnectProviderServicesFastConnectProviderService() {}
    /**
     * @return Who is responsible for managing the virtual circuit bandwidth.
     * 
     */
    public Optional<String> bandwithShapeManagement() {
        return Optional.ofNullable(this.bandwithShapeManagement);
    }
    /**
     * @return Who is responsible for managing the ASN information for the network at the other end of the connection from Oracle.
     * 
     */
    public Optional<String> customerAsnManagement() {
        return Optional.ofNullable(this.customerAsnManagement);
    }
    /**
     * @return The location of the provider&#39;s website or portal. This portal is where you can get information about the provider service, create a virtual circuit connection from the provider to Oracle Cloud Infrastructure, and retrieve your provider service key for that virtual circuit connection.  Example: `https://example.com`
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the service offered by the provider.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Who is responsible for managing the private peering BGP information.
     * 
     */
    public Optional<String> privatePeeringBgpManagement() {
        return Optional.ofNullable(this.privatePeeringBgpManagement);
    }
    /**
     * @return The name of the provider.
     * 
     */
    public Optional<String> providerName() {
        return Optional.ofNullable(this.providerName);
    }
    /**
     * @return Who is responsible for managing the provider service key.
     * 
     */
    public Optional<String> providerServiceKeyManagement() {
        return Optional.ofNullable(this.providerServiceKeyManagement);
    }
    /**
     * @return The name of the service offered by the provider.
     * 
     */
    public Optional<String> providerServiceName() {
        return Optional.ofNullable(this.providerServiceName);
    }
    /**
     * @return Who is responsible for managing the public peering BGP information.
     * 
     */
    public Optional<String> publicPeeringBgpManagement() {
        return Optional.ofNullable(this.publicPeeringBgpManagement);
    }
    /**
     * @return Total number of cross-connect or cross-connect groups required for the virtual circuit.
     * 
     */
    public Optional<Integer> requiredTotalCrossConnects() {
        return Optional.ofNullable(this.requiredTotalCrossConnects);
    }
    /**
     * @return An array of virtual circuit types supported by this service.
     * 
     */
    public List<String> supportedVirtualCircuitTypes() {
        return this.supportedVirtualCircuitTypes == null ? List.of() : this.supportedVirtualCircuitTypes;
    }
    /**
     * @return Provider service type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFastConnectProviderServicesFastConnectProviderService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bandwithShapeManagement;
        private @Nullable String customerAsnManagement;
        private @Nullable String description;
        private @Nullable String id;
        private @Nullable String privatePeeringBgpManagement;
        private @Nullable String providerName;
        private @Nullable String providerServiceKeyManagement;
        private @Nullable String providerServiceName;
        private @Nullable String publicPeeringBgpManagement;
        private @Nullable Integer requiredTotalCrossConnects;
        private @Nullable List<String> supportedVirtualCircuitTypes;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetFastConnectProviderServicesFastConnectProviderService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwithShapeManagement = defaults.bandwithShapeManagement;
    	      this.customerAsnManagement = defaults.customerAsnManagement;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.privatePeeringBgpManagement = defaults.privatePeeringBgpManagement;
    	      this.providerName = defaults.providerName;
    	      this.providerServiceKeyManagement = defaults.providerServiceKeyManagement;
    	      this.providerServiceName = defaults.providerServiceName;
    	      this.publicPeeringBgpManagement = defaults.publicPeeringBgpManagement;
    	      this.requiredTotalCrossConnects = defaults.requiredTotalCrossConnects;
    	      this.supportedVirtualCircuitTypes = defaults.supportedVirtualCircuitTypes;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder bandwithShapeManagement(@Nullable String bandwithShapeManagement) {
            this.bandwithShapeManagement = bandwithShapeManagement;
            return this;
        }
        @CustomType.Setter
        public Builder customerAsnManagement(@Nullable String customerAsnManagement) {
            this.customerAsnManagement = customerAsnManagement;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder privatePeeringBgpManagement(@Nullable String privatePeeringBgpManagement) {
            this.privatePeeringBgpManagement = privatePeeringBgpManagement;
            return this;
        }
        @CustomType.Setter
        public Builder providerName(@Nullable String providerName) {
            this.providerName = providerName;
            return this;
        }
        @CustomType.Setter
        public Builder providerServiceKeyManagement(@Nullable String providerServiceKeyManagement) {
            this.providerServiceKeyManagement = providerServiceKeyManagement;
            return this;
        }
        @CustomType.Setter
        public Builder providerServiceName(@Nullable String providerServiceName) {
            this.providerServiceName = providerServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder publicPeeringBgpManagement(@Nullable String publicPeeringBgpManagement) {
            this.publicPeeringBgpManagement = publicPeeringBgpManagement;
            return this;
        }
        @CustomType.Setter
        public Builder requiredTotalCrossConnects(@Nullable Integer requiredTotalCrossConnects) {
            this.requiredTotalCrossConnects = requiredTotalCrossConnects;
            return this;
        }
        @CustomType.Setter
        public Builder supportedVirtualCircuitTypes(@Nullable List<String> supportedVirtualCircuitTypes) {
            this.supportedVirtualCircuitTypes = supportedVirtualCircuitTypes;
            return this;
        }
        public Builder supportedVirtualCircuitTypes(String... supportedVirtualCircuitTypes) {
            return supportedVirtualCircuitTypes(List.of(supportedVirtualCircuitTypes));
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public GetFastConnectProviderServicesFastConnectProviderService build() {
            final var o = new GetFastConnectProviderServicesFastConnectProviderService();
            o.bandwithShapeManagement = bandwithShapeManagement;
            o.customerAsnManagement = customerAsnManagement;
            o.description = description;
            o.id = id;
            o.privatePeeringBgpManagement = privatePeeringBgpManagement;
            o.providerName = providerName;
            o.providerServiceKeyManagement = providerServiceKeyManagement;
            o.providerServiceName = providerServiceName;
            o.publicPeeringBgpManagement = publicPeeringBgpManagement;
            o.requiredTotalCrossConnects = requiredTotalCrossConnects;
            o.supportedVirtualCircuitTypes = supportedVirtualCircuitTypes;
            o.type = type;
            return o;
        }
    }
}
