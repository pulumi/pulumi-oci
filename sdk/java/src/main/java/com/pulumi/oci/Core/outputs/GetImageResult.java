// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetImageAgentFeature;
import com.pulumi.oci.Core.outputs.GetImageImageSourceDetail;
import com.pulumi.oci.Core.outputs.GetImageLaunchOption;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetImageResult {
    /**
     * @return Oracle Cloud Agent features supported on the image.
     * 
     */
    private List<GetImageAgentFeature> agentFeatures;
    /**
     * @return The OCID of the image originally used to launch the instance.
     * 
     */
    private String baseImageId;
    /**
     * @return The size of the internal storage for this image that is subject to billing (1 GB = 1,073,741,824 bytes).  Example: `100`
     * 
     */
    private String billableSizeInGbs;
    /**
     * @return The OCID of the compartment containing the instance you want to use as the basis for the image.
     * 
     */
    private String compartmentId;
    /**
     * @return Whether instances launched with this image can be used to create new images. For example, you cannot create an image of an Oracle Database instance.  Example: `true`
     * 
     */
    private Boolean createImageAllowed;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A user-friendly name for the image. It does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the image.
     * 
     */
    private String id;
    private String imageId;
    private List<GetImageImageSourceDetail> imageSourceDetails;
    private String instanceId;
    /**
     * @return Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
     * * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for platform images.
     * * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
     * * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
     * * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
     * 
     */
    private String launchMode;
    /**
     * @return Options for tuning the compatibility and performance of VM shapes. The values that you specify override any default values.
     * 
     */
    private List<GetImageLaunchOption> launchOptions;
    /**
     * @return The listing type of the image. The default value is &#34;NONE&#34;.
     * 
     */
    private String listingType;
    /**
     * @return The image&#39;s operating system.  Example: `Oracle Linux`
     * 
     */
    private String operatingSystem;
    /**
     * @return The image&#39;s operating system version.  Example: `7.2`
     * 
     */
    private String operatingSystemVersion;
    /**
     * @return The boot volume size for an instance launched from this image (1 MB = 1,048,576 bytes). Note this is not the same as the size of the image when it was exported or the actual size of the image.  Example: `47694`
     * 
     */
    private String sizeInMbs;
    /**
     * @return The current state of the image.
     * 
     */
    private String state;
    /**
     * @return The date and time the image was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;

    private GetImageResult() {}
    /**
     * @return Oracle Cloud Agent features supported on the image.
     * 
     */
    public List<GetImageAgentFeature> agentFeatures() {
        return this.agentFeatures;
    }
    /**
     * @return The OCID of the image originally used to launch the instance.
     * 
     */
    public String baseImageId() {
        return this.baseImageId;
    }
    /**
     * @return The size of the internal storage for this image that is subject to billing (1 GB = 1,073,741,824 bytes).  Example: `100`
     * 
     */
    public String billableSizeInGbs() {
        return this.billableSizeInGbs;
    }
    /**
     * @return The OCID of the compartment containing the instance you want to use as the basis for the image.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Whether instances launched with this image can be used to create new images. For example, you cannot create an image of an Oracle Database instance.  Example: `true`
     * 
     */
    public Boolean createImageAllowed() {
        return this.createImageAllowed;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name for the image. It does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the image.
     * 
     */
    public String id() {
        return this.id;
    }
    public String imageId() {
        return this.imageId;
    }
    public List<GetImageImageSourceDetail> imageSourceDetails() {
        return this.imageSourceDetails;
    }
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
     * * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for platform images.
     * * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
     * * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
     * * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
     * 
     */
    public String launchMode() {
        return this.launchMode;
    }
    /**
     * @return Options for tuning the compatibility and performance of VM shapes. The values that you specify override any default values.
     * 
     */
    public List<GetImageLaunchOption> launchOptions() {
        return this.launchOptions;
    }
    /**
     * @return The listing type of the image. The default value is &#34;NONE&#34;.
     * 
     */
    public String listingType() {
        return this.listingType;
    }
    /**
     * @return The image&#39;s operating system.  Example: `Oracle Linux`
     * 
     */
    public String operatingSystem() {
        return this.operatingSystem;
    }
    /**
     * @return The image&#39;s operating system version.  Example: `7.2`
     * 
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }
    /**
     * @return The boot volume size for an instance launched from this image (1 MB = 1,048,576 bytes). Note this is not the same as the size of the image when it was exported or the actual size of the image.  Example: `47694`
     * 
     */
    public String sizeInMbs() {
        return this.sizeInMbs;
    }
    /**
     * @return The current state of the image.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the image was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetImageAgentFeature> agentFeatures;
        private String baseImageId;
        private String billableSizeInGbs;
        private String compartmentId;
        private Boolean createImageAllowed;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String imageId;
        private List<GetImageImageSourceDetail> imageSourceDetails;
        private String instanceId;
        private String launchMode;
        private List<GetImageLaunchOption> launchOptions;
        private String listingType;
        private String operatingSystem;
        private String operatingSystemVersion;
        private String sizeInMbs;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentFeatures = defaults.agentFeatures;
    	      this.baseImageId = defaults.baseImageId;
    	      this.billableSizeInGbs = defaults.billableSizeInGbs;
    	      this.compartmentId = defaults.compartmentId;
    	      this.createImageAllowed = defaults.createImageAllowed;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageSourceDetails = defaults.imageSourceDetails;
    	      this.instanceId = defaults.instanceId;
    	      this.launchMode = defaults.launchMode;
    	      this.launchOptions = defaults.launchOptions;
    	      this.listingType = defaults.listingType;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.operatingSystemVersion = defaults.operatingSystemVersion;
    	      this.sizeInMbs = defaults.sizeInMbs;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder agentFeatures(List<GetImageAgentFeature> agentFeatures) {
            if (agentFeatures == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "agentFeatures");
            }
            this.agentFeatures = agentFeatures;
            return this;
        }
        public Builder agentFeatures(GetImageAgentFeature... agentFeatures) {
            return agentFeatures(List.of(agentFeatures));
        }
        @CustomType.Setter
        public Builder baseImageId(String baseImageId) {
            if (baseImageId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "baseImageId");
            }
            this.baseImageId = baseImageId;
            return this;
        }
        @CustomType.Setter
        public Builder billableSizeInGbs(String billableSizeInGbs) {
            if (billableSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "billableSizeInGbs");
            }
            this.billableSizeInGbs = billableSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder createImageAllowed(Boolean createImageAllowed) {
            if (createImageAllowed == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "createImageAllowed");
            }
            this.createImageAllowed = createImageAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder imageSourceDetails(List<GetImageImageSourceDetail> imageSourceDetails) {
            if (imageSourceDetails == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageSourceDetails");
            }
            this.imageSourceDetails = imageSourceDetails;
            return this;
        }
        public Builder imageSourceDetails(GetImageImageSourceDetail... imageSourceDetails) {
            return imageSourceDetails(List.of(imageSourceDetails));
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder launchMode(String launchMode) {
            if (launchMode == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "launchMode");
            }
            this.launchMode = launchMode;
            return this;
        }
        @CustomType.Setter
        public Builder launchOptions(List<GetImageLaunchOption> launchOptions) {
            if (launchOptions == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "launchOptions");
            }
            this.launchOptions = launchOptions;
            return this;
        }
        public Builder launchOptions(GetImageLaunchOption... launchOptions) {
            return launchOptions(List.of(launchOptions));
        }
        @CustomType.Setter
        public Builder listingType(String listingType) {
            if (listingType == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "listingType");
            }
            this.listingType = listingType;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystem(String operatingSystem) {
            if (operatingSystem == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "operatingSystem");
            }
            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystemVersion(String operatingSystemVersion) {
            if (operatingSystemVersion == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "operatingSystemVersion");
            }
            this.operatingSystemVersion = operatingSystemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sizeInMbs(String sizeInMbs) {
            if (sizeInMbs == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "sizeInMbs");
            }
            this.sizeInMbs = sizeInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetImageResult build() {
            final var _resultValue = new GetImageResult();
            _resultValue.agentFeatures = agentFeatures;
            _resultValue.baseImageId = baseImageId;
            _resultValue.billableSizeInGbs = billableSizeInGbs;
            _resultValue.compartmentId = compartmentId;
            _resultValue.createImageAllowed = createImageAllowed;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.imageSourceDetails = imageSourceDetails;
            _resultValue.instanceId = instanceId;
            _resultValue.launchMode = launchMode;
            _resultValue.launchOptions = launchOptions;
            _resultValue.listingType = listingType;
            _resultValue.operatingSystem = operatingSystem;
            _resultValue.operatingSystemVersion = operatingSystemVersion;
            _resultValue.sizeInMbs = sizeInMbs;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
