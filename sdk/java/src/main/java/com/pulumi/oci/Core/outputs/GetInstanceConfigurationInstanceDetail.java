// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetInstanceConfigurationInstanceDetailBlockVolume;
import com.pulumi.oci.Core.outputs.GetInstanceConfigurationInstanceDetailLaunchDetail;
import com.pulumi.oci.Core.outputs.GetInstanceConfigurationInstanceDetailOption;
import com.pulumi.oci.Core.outputs.GetInstanceConfigurationInstanceDetailSecondaryVnic;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceConfigurationInstanceDetail {
    /**
     * @return Block volume parameters.
     * 
     */
    private @Nullable List<GetInstanceConfigurationInstanceDetailBlockVolume> blockVolumes;
    /**
     * @return The type of instance details. Supported instanceType is compute
     * 
     */
    private @Nullable String instanceType;
    /**
     * @return Instance launch details for creating an instance from an instance configuration. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    private @Nullable List<GetInstanceConfigurationInstanceDetailLaunchDetail> launchDetails;
    /**
     * @return Multiple Compute Instance Configuration instance details.
     * 
     */
    private @Nullable List<GetInstanceConfigurationInstanceDetailOption> options;
    /**
     * @return Secondary VNIC parameters.
     * 
     */
    private @Nullable List<GetInstanceConfigurationInstanceDetailSecondaryVnic> secondaryVnics;

    private GetInstanceConfigurationInstanceDetail() {}
    /**
     * @return Block volume parameters.
     * 
     */
    public List<GetInstanceConfigurationInstanceDetailBlockVolume> blockVolumes() {
        return this.blockVolumes == null ? List.of() : this.blockVolumes;
    }
    /**
     * @return The type of instance details. Supported instanceType is compute
     * 
     */
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }
    /**
     * @return Instance launch details for creating an instance from an instance configuration. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     * 
     */
    public List<GetInstanceConfigurationInstanceDetailLaunchDetail> launchDetails() {
        return this.launchDetails == null ? List.of() : this.launchDetails;
    }
    /**
     * @return Multiple Compute Instance Configuration instance details.
     * 
     */
    public List<GetInstanceConfigurationInstanceDetailOption> options() {
        return this.options == null ? List.of() : this.options;
    }
    /**
     * @return Secondary VNIC parameters.
     * 
     */
    public List<GetInstanceConfigurationInstanceDetailSecondaryVnic> secondaryVnics() {
        return this.secondaryVnics == null ? List.of() : this.secondaryVnics;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceConfigurationInstanceDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetInstanceConfigurationInstanceDetailBlockVolume> blockVolumes;
        private @Nullable String instanceType;
        private @Nullable List<GetInstanceConfigurationInstanceDetailLaunchDetail> launchDetails;
        private @Nullable List<GetInstanceConfigurationInstanceDetailOption> options;
        private @Nullable List<GetInstanceConfigurationInstanceDetailSecondaryVnic> secondaryVnics;
        public Builder() {}
        public Builder(GetInstanceConfigurationInstanceDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockVolumes = defaults.blockVolumes;
    	      this.instanceType = defaults.instanceType;
    	      this.launchDetails = defaults.launchDetails;
    	      this.options = defaults.options;
    	      this.secondaryVnics = defaults.secondaryVnics;
        }

        @CustomType.Setter
        public Builder blockVolumes(@Nullable List<GetInstanceConfigurationInstanceDetailBlockVolume> blockVolumes) {
            this.blockVolumes = blockVolumes;
            return this;
        }
        public Builder blockVolumes(GetInstanceConfigurationInstanceDetailBlockVolume... blockVolumes) {
            return blockVolumes(List.of(blockVolumes));
        }
        @CustomType.Setter
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder launchDetails(@Nullable List<GetInstanceConfigurationInstanceDetailLaunchDetail> launchDetails) {
            this.launchDetails = launchDetails;
            return this;
        }
        public Builder launchDetails(GetInstanceConfigurationInstanceDetailLaunchDetail... launchDetails) {
            return launchDetails(List.of(launchDetails));
        }
        @CustomType.Setter
        public Builder options(@Nullable List<GetInstanceConfigurationInstanceDetailOption> options) {
            this.options = options;
            return this;
        }
        public Builder options(GetInstanceConfigurationInstanceDetailOption... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder secondaryVnics(@Nullable List<GetInstanceConfigurationInstanceDetailSecondaryVnic> secondaryVnics) {
            this.secondaryVnics = secondaryVnics;
            return this;
        }
        public Builder secondaryVnics(GetInstanceConfigurationInstanceDetailSecondaryVnic... secondaryVnics) {
            return secondaryVnics(List.of(secondaryVnics));
        }
        public GetInstanceConfigurationInstanceDetail build() {
            final var o = new GetInstanceConfigurationInstanceDetail();
            o.blockVolumes = blockVolumes;
            o.instanceType = instanceType;
            o.launchDetails = launchDetails;
            o.options = options;
            o.secondaryVnics = secondaryVnics;
            return o;
        }
    }
}
