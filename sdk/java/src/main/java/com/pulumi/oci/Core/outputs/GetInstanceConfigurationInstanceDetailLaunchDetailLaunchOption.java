// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption {
    /**
     * @return Emulation type for the boot volume.
     * * `ISCSI` - ISCSI attached block storage device.
     * * `SCSI` - Emulated SCSI disk.
     * * `IDE` - Emulated IDE disk.
     * * `VFIO` - Direct attached Virtual Function storage. This is the default option for local data volumes on platform images.
     * * `PARAVIRTUALIZED` - Paravirtualized disk. This is the default for boot volumes and remote block storage volumes on platform images.
     * 
     */
    private String bootVolumeType;
    /**
     * @return Firmware used to boot VM. Select the option that matches your operating system.
     * * `BIOS` - Boot VM using BIOS style firmware. This is compatible with both 32 bit and 64 bit operating systems that boot using MBR style bootloaders.
     * * `UEFI_64` - Boot VM using UEFI style firmware compatible with 64 bit operating systems. This is the default for platform images.
     * 
     */
    private String firmware;
    /**
     * @return Whether to enable consistent volume naming feature. Defaults to false.
     * 
     */
    private Boolean isConsistentVolumeNamingEnabled;
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [InstanceConfigurationLaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/InstanceConfigurationLaunchInstanceDetails).
     * 
     */
    private Boolean isPvEncryptionInTransitEnabled;
    /**
     * @return Emulation type for the physical network interface card (NIC).
     * * `E1000` - Emulated Gigabit ethernet controller. Compatible with Linux e1000 network driver.
     * * `VFIO` - Direct attached Virtual Function network controller. This is the networking type when you launch an instance using hardware-assisted (SR-IOV) networking.
     * * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
     * 
     */
    private String networkType;
    /**
     * @return Emulation type for volume.
     * * `ISCSI` - ISCSI attached block storage device.
     * * `SCSI` - Emulated SCSI disk.
     * * `IDE` - Emulated IDE disk.
     * * `VFIO` - Direct attached Virtual Function storage. This is the default option for local data volumes on platform images.
     * * `PARAVIRTUALIZED` - Paravirtualized disk. This is the default for boot volumes and remote block storage volumes on platform images.
     * 
     */
    private String remoteDataVolumeType;

    private GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption() {}
    /**
     * @return Emulation type for the boot volume.
     * * `ISCSI` - ISCSI attached block storage device.
     * * `SCSI` - Emulated SCSI disk.
     * * `IDE` - Emulated IDE disk.
     * * `VFIO` - Direct attached Virtual Function storage. This is the default option for local data volumes on platform images.
     * * `PARAVIRTUALIZED` - Paravirtualized disk. This is the default for boot volumes and remote block storage volumes on platform images.
     * 
     */
    public String bootVolumeType() {
        return this.bootVolumeType;
    }
    /**
     * @return Firmware used to boot VM. Select the option that matches your operating system.
     * * `BIOS` - Boot VM using BIOS style firmware. This is compatible with both 32 bit and 64 bit operating systems that boot using MBR style bootloaders.
     * * `UEFI_64` - Boot VM using UEFI style firmware compatible with 64 bit operating systems. This is the default for platform images.
     * 
     */
    public String firmware() {
        return this.firmware;
    }
    /**
     * @return Whether to enable consistent volume naming feature. Defaults to false.
     * 
     */
    public Boolean isConsistentVolumeNamingEnabled() {
        return this.isConsistentVolumeNamingEnabled;
    }
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [InstanceConfigurationLaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/InstanceConfigurationLaunchInstanceDetails).
     * 
     */
    public Boolean isPvEncryptionInTransitEnabled() {
        return this.isPvEncryptionInTransitEnabled;
    }
    /**
     * @return Emulation type for the physical network interface card (NIC).
     * * `E1000` - Emulated Gigabit ethernet controller. Compatible with Linux e1000 network driver.
     * * `VFIO` - Direct attached Virtual Function network controller. This is the networking type when you launch an instance using hardware-assisted (SR-IOV) networking.
     * * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return Emulation type for volume.
     * * `ISCSI` - ISCSI attached block storage device.
     * * `SCSI` - Emulated SCSI disk.
     * * `IDE` - Emulated IDE disk.
     * * `VFIO` - Direct attached Virtual Function storage. This is the default option for local data volumes on platform images.
     * * `PARAVIRTUALIZED` - Paravirtualized disk. This is the default for boot volumes and remote block storage volumes on platform images.
     * 
     */
    public String remoteDataVolumeType() {
        return this.remoteDataVolumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bootVolumeType;
        private String firmware;
        private Boolean isConsistentVolumeNamingEnabled;
        private Boolean isPvEncryptionInTransitEnabled;
        private String networkType;
        private String remoteDataVolumeType;
        public Builder() {}
        public Builder(GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootVolumeType = defaults.bootVolumeType;
    	      this.firmware = defaults.firmware;
    	      this.isConsistentVolumeNamingEnabled = defaults.isConsistentVolumeNamingEnabled;
    	      this.isPvEncryptionInTransitEnabled = defaults.isPvEncryptionInTransitEnabled;
    	      this.networkType = defaults.networkType;
    	      this.remoteDataVolumeType = defaults.remoteDataVolumeType;
        }

        @CustomType.Setter
        public Builder bootVolumeType(String bootVolumeType) {
            if (bootVolumeType == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption", "bootVolumeType");
            }
            this.bootVolumeType = bootVolumeType;
            return this;
        }
        @CustomType.Setter
        public Builder firmware(String firmware) {
            if (firmware == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption", "firmware");
            }
            this.firmware = firmware;
            return this;
        }
        @CustomType.Setter
        public Builder isConsistentVolumeNamingEnabled(Boolean isConsistentVolumeNamingEnabled) {
            if (isConsistentVolumeNamingEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption", "isConsistentVolumeNamingEnabled");
            }
            this.isConsistentVolumeNamingEnabled = isConsistentVolumeNamingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isPvEncryptionInTransitEnabled(Boolean isPvEncryptionInTransitEnabled) {
            if (isPvEncryptionInTransitEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption", "isPvEncryptionInTransitEnabled");
            }
            this.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder remoteDataVolumeType(String remoteDataVolumeType) {
            if (remoteDataVolumeType == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption", "remoteDataVolumeType");
            }
            this.remoteDataVolumeType = remoteDataVolumeType;
            return this;
        }
        public GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption build() {
            final var _resultValue = new GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOption();
            _resultValue.bootVolumeType = bootVolumeType;
            _resultValue.firmware = firmware;
            _resultValue.isConsistentVolumeNamingEnabled = isConsistentVolumeNamingEnabled;
            _resultValue.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            _resultValue.networkType = networkType;
            _resultValue.remoteDataVolumeType = remoteDataVolumeType;
            return _resultValue;
        }
    }
}
