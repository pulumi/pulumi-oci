// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfig {
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`.
     * 
     */
    private String baselineOcpuUtilization;
    /**
     * @return The total amount of memory available to the instance, in gigabytes.
     * 
     */
    private Double memoryInGbs;
    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    private Integer nvmes;
    /**
     * @return The total number of OCPUs available to the instance.
     * 
     */
    private Double ocpus;
    /**
     * @return The total number of VCPUs available to the instance. This can be used instead of OCPUs, in which case the actual number of OCPUs will be calculated based on this value and the actual hardware. This must be a multiple of 2.
     * 
     */
    private Integer vcpus;

    private GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfig() {}
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`.
     * 
     */
    public String baselineOcpuUtilization() {
        return this.baselineOcpuUtilization;
    }
    /**
     * @return The total amount of memory available to the instance, in gigabytes.
     * 
     */
    public Double memoryInGbs() {
        return this.memoryInGbs;
    }
    /**
     * @return The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
     * 
     */
    public Integer nvmes() {
        return this.nvmes;
    }
    /**
     * @return The total number of OCPUs available to the instance.
     * 
     */
    public Double ocpus() {
        return this.ocpus;
    }
    /**
     * @return The total number of VCPUs available to the instance. This can be used instead of OCPUs, in which case the actual number of OCPUs will be calculated based on this value and the actual hardware. This must be a multiple of 2.
     * 
     */
    public Integer vcpus() {
        return this.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String baselineOcpuUtilization;
        private Double memoryInGbs;
        private Integer nvmes;
        private Double ocpus;
        private Integer vcpus;
        public Builder() {}
        public Builder(GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baselineOcpuUtilization = defaults.baselineOcpuUtilization;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.nvmes = defaults.nvmes;
    	      this.ocpus = defaults.ocpus;
    	      this.vcpus = defaults.vcpus;
        }

        @CustomType.Setter
        public Builder baselineOcpuUtilization(String baselineOcpuUtilization) {
            this.baselineOcpuUtilization = Objects.requireNonNull(baselineOcpuUtilization);
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(Double memoryInGbs) {
            this.memoryInGbs = Objects.requireNonNull(memoryInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder nvmes(Integer nvmes) {
            this.nvmes = Objects.requireNonNull(nvmes);
            return this;
        }
        @CustomType.Setter
        public Builder ocpus(Double ocpus) {
            this.ocpus = Objects.requireNonNull(ocpus);
            return this;
        }
        @CustomType.Setter
        public Builder vcpus(Integer vcpus) {
            this.vcpus = Objects.requireNonNull(vcpus);
            return this;
        }
        public GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfig build() {
            final var _resultValue = new GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfig();
            _resultValue.baselineOcpuUtilization = baselineOcpuUtilization;
            _resultValue.memoryInGbs = memoryInGbs;
            _resultValue.nvmes = nvmes;
            _resultValue.ocpus = ocpus;
            _resultValue.vcpus = vcpus;
            return _resultValue;
        }
    }
}
