// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail {
    /**
     * @return The OCID of the boot volume used to boot the instance.
     * 
     */
    private String bootVolumeId;
    /**
     * @return The size of the boot volume in GBs. The minimum value is 50 GB and the maximum value is 32,768 GB (32 TB).
     * 
     */
    private String bootVolumeSizeInGbs;
    /**
     * @return The number of volume performance units (VPUs) that will be applied to this volume per GB, representing the Block Volume service&#39;s elastic performance options. See [Block Volume Performance Levels](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumeperformance.htm#perf_levels) for more information.
     * 
     */
    private String bootVolumeVpusPerGb;
    /**
     * @return The OCID of the image used to boot the instance.
     * 
     */
    private String imageId;
    /**
     * @return These are the criteria for selecting an image. This is required if imageId is not specified.
     * 
     */
    private List<GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail> instanceSourceImageFilterDetails;
    /**
     * @return The OCID of the Vault service key to assign as the master encryption key for the volume.
     * 
     */
    private String kmsKeyId;
    /**
     * @return The source type for the instance. Use `image` when specifying the image OCID. Use `bootVolume` when specifying the boot volume OCID.
     * 
     */
    private String sourceType;

    private GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail() {}
    /**
     * @return The OCID of the boot volume used to boot the instance.
     * 
     */
    public String bootVolumeId() {
        return this.bootVolumeId;
    }
    /**
     * @return The size of the boot volume in GBs. The minimum value is 50 GB and the maximum value is 32,768 GB (32 TB).
     * 
     */
    public String bootVolumeSizeInGbs() {
        return this.bootVolumeSizeInGbs;
    }
    /**
     * @return The number of volume performance units (VPUs) that will be applied to this volume per GB, representing the Block Volume service&#39;s elastic performance options. See [Block Volume Performance Levels](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumeperformance.htm#perf_levels) for more information.
     * 
     */
    public String bootVolumeVpusPerGb() {
        return this.bootVolumeVpusPerGb;
    }
    /**
     * @return The OCID of the image used to boot the instance.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return These are the criteria for selecting an image. This is required if imageId is not specified.
     * 
     */
    public List<GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail> instanceSourceImageFilterDetails() {
        return this.instanceSourceImageFilterDetails;
    }
    /**
     * @return The OCID of the Vault service key to assign as the master encryption key for the volume.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    /**
     * @return The source type for the instance. Use `image` when specifying the image OCID. Use `bootVolume` when specifying the boot volume OCID.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bootVolumeId;
        private String bootVolumeSizeInGbs;
        private String bootVolumeVpusPerGb;
        private String imageId;
        private List<GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail> instanceSourceImageFilterDetails;
        private String kmsKeyId;
        private String sourceType;
        public Builder() {}
        public Builder(GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootVolumeId = defaults.bootVolumeId;
    	      this.bootVolumeSizeInGbs = defaults.bootVolumeSizeInGbs;
    	      this.bootVolumeVpusPerGb = defaults.bootVolumeVpusPerGb;
    	      this.imageId = defaults.imageId;
    	      this.instanceSourceImageFilterDetails = defaults.instanceSourceImageFilterDetails;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.sourceType = defaults.sourceType;
        }

        @CustomType.Setter
        public Builder bootVolumeId(String bootVolumeId) {
            if (bootVolumeId == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail", "bootVolumeId");
            }
            this.bootVolumeId = bootVolumeId;
            return this;
        }
        @CustomType.Setter
        public Builder bootVolumeSizeInGbs(String bootVolumeSizeInGbs) {
            if (bootVolumeSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail", "bootVolumeSizeInGbs");
            }
            this.bootVolumeSizeInGbs = bootVolumeSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder bootVolumeVpusPerGb(String bootVolumeVpusPerGb) {
            if (bootVolumeVpusPerGb == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail", "bootVolumeVpusPerGb");
            }
            this.bootVolumeVpusPerGb = bootVolumeVpusPerGb;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceSourceImageFilterDetails(List<GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail> instanceSourceImageFilterDetails) {
            if (instanceSourceImageFilterDetails == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail", "instanceSourceImageFilterDetails");
            }
            this.instanceSourceImageFilterDetails = instanceSourceImageFilterDetails;
            return this;
        }
        public Builder instanceSourceImageFilterDetails(GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail... instanceSourceImageFilterDetails) {
            return instanceSourceImageFilterDetails(List.of(instanceSourceImageFilterDetails));
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        public GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail build() {
            final var _resultValue = new GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetail();
            _resultValue.bootVolumeId = bootVolumeId;
            _resultValue.bootVolumeSizeInGbs = bootVolumeSizeInGbs;
            _resultValue.bootVolumeVpusPerGb = bootVolumeVpusPerGb;
            _resultValue.imageId = imageId;
            _resultValue.instanceSourceImageFilterDetails = instanceSourceImageFilterDetails;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.sourceType = sourceType;
            return _resultValue;
        }
    }
}
