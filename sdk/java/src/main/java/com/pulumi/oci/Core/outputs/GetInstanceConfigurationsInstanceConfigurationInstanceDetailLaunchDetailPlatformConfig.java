// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig {
    /**
     * @return Whether virtualization instructions are available.
     * 
     */
    private final Boolean areVirtualInstructionsEnabled;
    /**
     * @return Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device passthrough.
     * 
     */
    private final Boolean isAccessControlServiceEnabled;
    /**
     * @return Whether the input-output memory management unit is enabled.
     * 
     */
    private final Boolean isInputOutputMemoryManagementUnitEnabled;
    /**
     * @return Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    private final Boolean isMeasuredBootEnabled;
    /**
     * @return Whether Secure Boot is enabled on the instance.
     * 
     */
    private final Boolean isSecureBootEnabled;
    /**
     * @return Whether symmetric multi-threading is enabled on the instance.
     * 
     */
    private final Boolean isSymmetricMultiThreadingEnabled;
    /**
     * @return Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    private final Boolean isTrustedPlatformModuleEnabled;
    /**
     * @return The number of NUMA nodes per socket (NPS).
     * 
     */
    private final String numaNodesPerSocket;
    /**
     * @return The percentage of cores enabled.
     * 
     */
    private final Integer percentageOfCoresEnabled;
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig(
        @CustomType.Parameter("areVirtualInstructionsEnabled") Boolean areVirtualInstructionsEnabled,
        @CustomType.Parameter("isAccessControlServiceEnabled") Boolean isAccessControlServiceEnabled,
        @CustomType.Parameter("isInputOutputMemoryManagementUnitEnabled") Boolean isInputOutputMemoryManagementUnitEnabled,
        @CustomType.Parameter("isMeasuredBootEnabled") Boolean isMeasuredBootEnabled,
        @CustomType.Parameter("isSecureBootEnabled") Boolean isSecureBootEnabled,
        @CustomType.Parameter("isSymmetricMultiThreadingEnabled") Boolean isSymmetricMultiThreadingEnabled,
        @CustomType.Parameter("isTrustedPlatformModuleEnabled") Boolean isTrustedPlatformModuleEnabled,
        @CustomType.Parameter("numaNodesPerSocket") String numaNodesPerSocket,
        @CustomType.Parameter("percentageOfCoresEnabled") Integer percentageOfCoresEnabled,
        @CustomType.Parameter("type") String type) {
        this.areVirtualInstructionsEnabled = areVirtualInstructionsEnabled;
        this.isAccessControlServiceEnabled = isAccessControlServiceEnabled;
        this.isInputOutputMemoryManagementUnitEnabled = isInputOutputMemoryManagementUnitEnabled;
        this.isMeasuredBootEnabled = isMeasuredBootEnabled;
        this.isSecureBootEnabled = isSecureBootEnabled;
        this.isSymmetricMultiThreadingEnabled = isSymmetricMultiThreadingEnabled;
        this.isTrustedPlatformModuleEnabled = isTrustedPlatformModuleEnabled;
        this.numaNodesPerSocket = numaNodesPerSocket;
        this.percentageOfCoresEnabled = percentageOfCoresEnabled;
        this.type = type;
    }

    /**
     * @return Whether virtualization instructions are available.
     * 
     */
    public Boolean areVirtualInstructionsEnabled() {
        return this.areVirtualInstructionsEnabled;
    }
    /**
     * @return Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device passthrough.
     * 
     */
    public Boolean isAccessControlServiceEnabled() {
        return this.isAccessControlServiceEnabled;
    }
    /**
     * @return Whether the input-output memory management unit is enabled.
     * 
     */
    public Boolean isInputOutputMemoryManagementUnitEnabled() {
        return this.isInputOutputMemoryManagementUnitEnabled;
    }
    /**
     * @return Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    public Boolean isMeasuredBootEnabled() {
        return this.isMeasuredBootEnabled;
    }
    /**
     * @return Whether Secure Boot is enabled on the instance.
     * 
     */
    public Boolean isSecureBootEnabled() {
        return this.isSecureBootEnabled;
    }
    /**
     * @return Whether symmetric multi-threading is enabled on the instance.
     * 
     */
    public Boolean isSymmetricMultiThreadingEnabled() {
        return this.isSymmetricMultiThreadingEnabled;
    }
    /**
     * @return Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    public Boolean isTrustedPlatformModuleEnabled() {
        return this.isTrustedPlatformModuleEnabled;
    }
    /**
     * @return The number of NUMA nodes per socket (NPS).
     * 
     */
    public String numaNodesPerSocket() {
        return this.numaNodesPerSocket;
    }
    /**
     * @return The percentage of cores enabled.
     * 
     */
    public Integer percentageOfCoresEnabled() {
        return this.percentageOfCoresEnabled;
    }
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean areVirtualInstructionsEnabled;
        private Boolean isAccessControlServiceEnabled;
        private Boolean isInputOutputMemoryManagementUnitEnabled;
        private Boolean isMeasuredBootEnabled;
        private Boolean isSecureBootEnabled;
        private Boolean isSymmetricMultiThreadingEnabled;
        private Boolean isTrustedPlatformModuleEnabled;
        private String numaNodesPerSocket;
        private Integer percentageOfCoresEnabled;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areVirtualInstructionsEnabled = defaults.areVirtualInstructionsEnabled;
    	      this.isAccessControlServiceEnabled = defaults.isAccessControlServiceEnabled;
    	      this.isInputOutputMemoryManagementUnitEnabled = defaults.isInputOutputMemoryManagementUnitEnabled;
    	      this.isMeasuredBootEnabled = defaults.isMeasuredBootEnabled;
    	      this.isSecureBootEnabled = defaults.isSecureBootEnabled;
    	      this.isSymmetricMultiThreadingEnabled = defaults.isSymmetricMultiThreadingEnabled;
    	      this.isTrustedPlatformModuleEnabled = defaults.isTrustedPlatformModuleEnabled;
    	      this.numaNodesPerSocket = defaults.numaNodesPerSocket;
    	      this.percentageOfCoresEnabled = defaults.percentageOfCoresEnabled;
    	      this.type = defaults.type;
        }

        public Builder areVirtualInstructionsEnabled(Boolean areVirtualInstructionsEnabled) {
            this.areVirtualInstructionsEnabled = Objects.requireNonNull(areVirtualInstructionsEnabled);
            return this;
        }
        public Builder isAccessControlServiceEnabled(Boolean isAccessControlServiceEnabled) {
            this.isAccessControlServiceEnabled = Objects.requireNonNull(isAccessControlServiceEnabled);
            return this;
        }
        public Builder isInputOutputMemoryManagementUnitEnabled(Boolean isInputOutputMemoryManagementUnitEnabled) {
            this.isInputOutputMemoryManagementUnitEnabled = Objects.requireNonNull(isInputOutputMemoryManagementUnitEnabled);
            return this;
        }
        public Builder isMeasuredBootEnabled(Boolean isMeasuredBootEnabled) {
            this.isMeasuredBootEnabled = Objects.requireNonNull(isMeasuredBootEnabled);
            return this;
        }
        public Builder isSecureBootEnabled(Boolean isSecureBootEnabled) {
            this.isSecureBootEnabled = Objects.requireNonNull(isSecureBootEnabled);
            return this;
        }
        public Builder isSymmetricMultiThreadingEnabled(Boolean isSymmetricMultiThreadingEnabled) {
            this.isSymmetricMultiThreadingEnabled = Objects.requireNonNull(isSymmetricMultiThreadingEnabled);
            return this;
        }
        public Builder isTrustedPlatformModuleEnabled(Boolean isTrustedPlatformModuleEnabled) {
            this.isTrustedPlatformModuleEnabled = Objects.requireNonNull(isTrustedPlatformModuleEnabled);
            return this;
        }
        public Builder numaNodesPerSocket(String numaNodesPerSocket) {
            this.numaNodesPerSocket = Objects.requireNonNull(numaNodesPerSocket);
            return this;
        }
        public Builder percentageOfCoresEnabled(Integer percentageOfCoresEnabled) {
            this.percentageOfCoresEnabled = Objects.requireNonNull(percentageOfCoresEnabled);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig build() {
            return new GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig(areVirtualInstructionsEnabled, isAccessControlServiceEnabled, isInputOutputMemoryManagementUnitEnabled, isMeasuredBootEnabled, isSecureBootEnabled, isSymmetricMultiThreadingEnabled, isTrustedPlatformModuleEnabled, numaNodesPerSocket, percentageOfCoresEnabled, type);
        }
    }
}
