// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstanceConsoleConnectionsInstanceConsoleConnection {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The SSH connection string for the console connection.
     * 
     */
    private String connectionString;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The SSH public key&#39;s fingerprint for client authentication to the console connection.
     * 
     */
    private String fingerprint;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the console connection.
     * 
     */
    private String id;
    /**
     * @return The OCID of the instance.
     * 
     */
    private String instanceId;
    private String publicKey;
    /**
     * @return The SSH public key&#39;s fingerprint for the console connection service host.
     * 
     */
    private String serviceHostKeyFingerprint;
    /**
     * @return The current state of the console connection.
     * 
     */
    private String state;
    /**
     * @return The SSH connection string for the SSH tunnel used to connect to the console connection over VNC.
     * 
     */
    private String vncConnectionString;

    private GetInstanceConsoleConnectionsInstanceConsoleConnection() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The SSH connection string for the console connection.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The SSH public key&#39;s fingerprint for client authentication to the console connection.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the console connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The SSH public key&#39;s fingerprint for the console connection service host.
     * 
     */
    public String serviceHostKeyFingerprint() {
        return this.serviceHostKeyFingerprint;
    }
    /**
     * @return The current state of the console connection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The SSH connection string for the SSH tunnel used to connect to the console connection over VNC.
     * 
     */
    public String vncConnectionString() {
        return this.vncConnectionString;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceConsoleConnectionsInstanceConsoleConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String connectionString;
        private Map<String,Object> definedTags;
        private String fingerprint;
        private Map<String,Object> freeformTags;
        private String id;
        private String instanceId;
        private String publicKey;
        private String serviceHostKeyFingerprint;
        private String state;
        private String vncConnectionString;
        public Builder() {}
        public Builder(GetInstanceConsoleConnectionsInstanceConsoleConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.definedTags = defaults.definedTags;
    	      this.fingerprint = defaults.fingerprint;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.publicKey = defaults.publicKey;
    	      this.serviceHostKeyFingerprint = defaults.serviceHostKeyFingerprint;
    	      this.state = defaults.state;
    	      this.vncConnectionString = defaults.vncConnectionString;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder serviceHostKeyFingerprint(String serviceHostKeyFingerprint) {
            if (serviceHostKeyFingerprint == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "serviceHostKeyFingerprint");
            }
            this.serviceHostKeyFingerprint = serviceHostKeyFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder vncConnectionString(String vncConnectionString) {
            if (vncConnectionString == null) {
              throw new MissingRequiredPropertyException("GetInstanceConsoleConnectionsInstanceConsoleConnection", "vncConnectionString");
            }
            this.vncConnectionString = vncConnectionString;
            return this;
        }
        public GetInstanceConsoleConnectionsInstanceConsoleConnection build() {
            final var _resultValue = new GetInstanceConsoleConnectionsInstanceConsoleConnection();
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionString = connectionString;
            _resultValue.definedTags = definedTags;
            _resultValue.fingerprint = fingerprint;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.publicKey = publicKey;
            _resultValue.serviceHostKeyFingerprint = serviceHostKeyFingerprint;
            _resultValue.state = state;
            _resultValue.vncConnectionString = vncConnectionString;
            return _resultValue;
        }
    }
}
