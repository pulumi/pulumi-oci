// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceLaunchVolumeAttachment {
    private String device;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    private String encryptionInTransitType;
    private Boolean isAgentAutoIscsiLoginEnabled;
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    private Boolean isPvEncryptionInTransitEnabled;
    private Boolean isReadOnly;
    private Boolean isShareable;
    private List<GetInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail> launchCreateVolumeDetails;
    /**
     * @return (Required) The type of action to run when the instance is interrupted for eviction.
     * 
     */
    private String type;
    private Boolean useChap;
    private String volumeId;

    private GetInstanceLaunchVolumeAttachment() {}
    public String device() {
        return this.device;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public String encryptionInTransitType() {
        return this.encryptionInTransitType;
    }
    public Boolean isAgentAutoIscsiLoginEnabled() {
        return this.isAgentAutoIscsiLoginEnabled;
    }
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    public Boolean isPvEncryptionInTransitEnabled() {
        return this.isPvEncryptionInTransitEnabled;
    }
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }
    public Boolean isShareable() {
        return this.isShareable;
    }
    public List<GetInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail> launchCreateVolumeDetails() {
        return this.launchCreateVolumeDetails;
    }
    /**
     * @return (Required) The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public String type() {
        return this.type;
    }
    public Boolean useChap() {
        return this.useChap;
    }
    public String volumeId() {
        return this.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceLaunchVolumeAttachment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String device;
        private String displayName;
        private String encryptionInTransitType;
        private Boolean isAgentAutoIscsiLoginEnabled;
        private Boolean isPvEncryptionInTransitEnabled;
        private Boolean isReadOnly;
        private Boolean isShareable;
        private List<GetInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail> launchCreateVolumeDetails;
        private String type;
        private Boolean useChap;
        private String volumeId;
        public Builder() {}
        public Builder(GetInstanceLaunchVolumeAttachment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.displayName = defaults.displayName;
    	      this.encryptionInTransitType = defaults.encryptionInTransitType;
    	      this.isAgentAutoIscsiLoginEnabled = defaults.isAgentAutoIscsiLoginEnabled;
    	      this.isPvEncryptionInTransitEnabled = defaults.isPvEncryptionInTransitEnabled;
    	      this.isReadOnly = defaults.isReadOnly;
    	      this.isShareable = defaults.isShareable;
    	      this.launchCreateVolumeDetails = defaults.launchCreateVolumeDetails;
    	      this.type = defaults.type;
    	      this.useChap = defaults.useChap;
    	      this.volumeId = defaults.volumeId;
        }

        @CustomType.Setter
        public Builder device(String device) {
            if (device == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "device");
            }
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionInTransitType(String encryptionInTransitType) {
            if (encryptionInTransitType == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "encryptionInTransitType");
            }
            this.encryptionInTransitType = encryptionInTransitType;
            return this;
        }
        @CustomType.Setter
        public Builder isAgentAutoIscsiLoginEnabled(Boolean isAgentAutoIscsiLoginEnabled) {
            if (isAgentAutoIscsiLoginEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "isAgentAutoIscsiLoginEnabled");
            }
            this.isAgentAutoIscsiLoginEnabled = isAgentAutoIscsiLoginEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isPvEncryptionInTransitEnabled(Boolean isPvEncryptionInTransitEnabled) {
            if (isPvEncryptionInTransitEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "isPvEncryptionInTransitEnabled");
            }
            this.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isReadOnly(Boolean isReadOnly) {
            if (isReadOnly == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "isReadOnly");
            }
            this.isReadOnly = isReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder isShareable(Boolean isShareable) {
            if (isShareable == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "isShareable");
            }
            this.isShareable = isShareable;
            return this;
        }
        @CustomType.Setter
        public Builder launchCreateVolumeDetails(List<GetInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail> launchCreateVolumeDetails) {
            if (launchCreateVolumeDetails == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "launchCreateVolumeDetails");
            }
            this.launchCreateVolumeDetails = launchCreateVolumeDetails;
            return this;
        }
        public Builder launchCreateVolumeDetails(GetInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail... launchCreateVolumeDetails) {
            return launchCreateVolumeDetails(List.of(launchCreateVolumeDetails));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder useChap(Boolean useChap) {
            if (useChap == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "useChap");
            }
            this.useChap = useChap;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            if (volumeId == null) {
              throw new MissingRequiredPropertyException("GetInstanceLaunchVolumeAttachment", "volumeId");
            }
            this.volumeId = volumeId;
            return this;
        }
        public GetInstanceLaunchVolumeAttachment build() {
            final var _resultValue = new GetInstanceLaunchVolumeAttachment();
            _resultValue.device = device;
            _resultValue.displayName = displayName;
            _resultValue.encryptionInTransitType = encryptionInTransitType;
            _resultValue.isAgentAutoIscsiLoginEnabled = isAgentAutoIscsiLoginEnabled;
            _resultValue.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            _resultValue.isReadOnly = isReadOnly;
            _resultValue.isShareable = isShareable;
            _resultValue.launchCreateVolumeDetails = launchCreateVolumeDetails;
            _resultValue.type = type;
            _resultValue.useChap = useChap;
            _resultValue.volumeId = volumeId;
            return _resultValue;
        }
    }
}
