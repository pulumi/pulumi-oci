// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetInstanceMaintenanceEventsFilter;
import com.pulumi.oci.Core.outputs.GetInstanceMaintenanceEventsInstanceMaintenanceEvent;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceMaintenanceEventsResult {
    /**
     * @return The OCID of the compartment that contains the instance.
     * 
     */
    private String compartmentId;
    /**
     * @return A unique identifier that will group Instances that have a relationship with one another and must be scheduled together for the Maintenance to proceed. Any Instances that have a relationship with one another from a Maintenance perspective will have a matching correlationToken.
     * 
     */
    private @Nullable String correlationToken;
    private @Nullable List<GetInstanceMaintenanceEventsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return This is the action that will be performed on the Instance by Oracle Cloud Infrastructure when the Maintenance begins.
     * 
     */
    private @Nullable String instanceAction;
    /**
     * @return The OCID of the instance.
     * 
     */
    private @Nullable String instanceId;
    /**
     * @return The list of instance_maintenance_events.
     * 
     */
    private List<GetInstanceMaintenanceEventsInstanceMaintenanceEvent> instanceMaintenanceEvents;
    /**
     * @return The current state of the maintenance event.
     * 
     */
    private @Nullable String state;
    private @Nullable String timeWindowStartGreaterThanOrEqualTo;
    private @Nullable String timeWindowStartLessThanOrEqualTo;

    private GetInstanceMaintenanceEventsResult() {}
    /**
     * @return The OCID of the compartment that contains the instance.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A unique identifier that will group Instances that have a relationship with one another and must be scheduled together for the Maintenance to proceed. Any Instances that have a relationship with one another from a Maintenance perspective will have a matching correlationToken.
     * 
     */
    public Optional<String> correlationToken() {
        return Optional.ofNullable(this.correlationToken);
    }
    public List<GetInstanceMaintenanceEventsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return This is the action that will be performed on the Instance by Oracle Cloud Infrastructure when the Maintenance begins.
     * 
     */
    public Optional<String> instanceAction() {
        return Optional.ofNullable(this.instanceAction);
    }
    /**
     * @return The OCID of the instance.
     * 
     */
    public Optional<String> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }
    /**
     * @return The list of instance_maintenance_events.
     * 
     */
    public List<GetInstanceMaintenanceEventsInstanceMaintenanceEvent> instanceMaintenanceEvents() {
        return this.instanceMaintenanceEvents;
    }
    /**
     * @return The current state of the maintenance event.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> timeWindowStartGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeWindowStartGreaterThanOrEqualTo);
    }
    public Optional<String> timeWindowStartLessThanOrEqualTo() {
        return Optional.ofNullable(this.timeWindowStartLessThanOrEqualTo);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceMaintenanceEventsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String correlationToken;
        private @Nullable List<GetInstanceMaintenanceEventsFilter> filters;
        private String id;
        private @Nullable String instanceAction;
        private @Nullable String instanceId;
        private List<GetInstanceMaintenanceEventsInstanceMaintenanceEvent> instanceMaintenanceEvents;
        private @Nullable String state;
        private @Nullable String timeWindowStartGreaterThanOrEqualTo;
        private @Nullable String timeWindowStartLessThanOrEqualTo;
        public Builder() {}
        public Builder(GetInstanceMaintenanceEventsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.correlationToken = defaults.correlationToken;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.instanceAction = defaults.instanceAction;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceMaintenanceEvents = defaults.instanceMaintenanceEvents;
    	      this.state = defaults.state;
    	      this.timeWindowStartGreaterThanOrEqualTo = defaults.timeWindowStartGreaterThanOrEqualTo;
    	      this.timeWindowStartLessThanOrEqualTo = defaults.timeWindowStartLessThanOrEqualTo;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetInstanceMaintenanceEventsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder correlationToken(@Nullable String correlationToken) {

            this.correlationToken = correlationToken;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetInstanceMaintenanceEventsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetInstanceMaintenanceEventsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceMaintenanceEventsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceAction(@Nullable String instanceAction) {

            this.instanceAction = instanceAction;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(@Nullable String instanceId) {

            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceMaintenanceEvents(List<GetInstanceMaintenanceEventsInstanceMaintenanceEvent> instanceMaintenanceEvents) {
            if (instanceMaintenanceEvents == null) {
              throw new MissingRequiredPropertyException("GetInstanceMaintenanceEventsResult", "instanceMaintenanceEvents");
            }
            this.instanceMaintenanceEvents = instanceMaintenanceEvents;
            return this;
        }
        public Builder instanceMaintenanceEvents(GetInstanceMaintenanceEventsInstanceMaintenanceEvent... instanceMaintenanceEvents) {
            return instanceMaintenanceEvents(List.of(instanceMaintenanceEvents));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeWindowStartGreaterThanOrEqualTo(@Nullable String timeWindowStartGreaterThanOrEqualTo) {

            this.timeWindowStartGreaterThanOrEqualTo = timeWindowStartGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeWindowStartLessThanOrEqualTo(@Nullable String timeWindowStartLessThanOrEqualTo) {

            this.timeWindowStartLessThanOrEqualTo = timeWindowStartLessThanOrEqualTo;
            return this;
        }
        public GetInstanceMaintenanceEventsResult build() {
            final var _resultValue = new GetInstanceMaintenanceEventsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.correlationToken = correlationToken;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.instanceAction = instanceAction;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceMaintenanceEvents = instanceMaintenanceEvents;
            _resultValue.state = state;
            _resultValue.timeWindowStartGreaterThanOrEqualTo = timeWindowStartGreaterThanOrEqualTo;
            _resultValue.timeWindowStartLessThanOrEqualTo = timeWindowStartLessThanOrEqualTo;
            return _resultValue;
        }
    }
}
