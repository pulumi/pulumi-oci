// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceShapeConfig {
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`.
     * 
     */
    private String baselineOcpuUtilization;
    /**
     * @return A short description of the instance&#39;s graphics processing unit (GPU).
     * 
     */
    private String gpuDescription;
    /**
     * @return The number of GPUs available to the instance.
     * 
     */
    private Integer gpus;
    /**
     * @return A short description of the local disks available to this instance.
     * 
     */
    private String localDiskDescription;
    /**
     * @return The number of local disks available to the instance.
     * 
     */
    private Integer localDisks;
    /**
     * @return The aggregate size of all local disks, in gigabytes.
     * 
     */
    private Double localDisksTotalSizeInGbs;
    /**
     * @return The maximum number of VNIC attachments for the instance.
     * 
     */
    private Integer maxVnicAttachments;
    /**
     * @return The total amount of memory available to the instance, in gigabytes.
     * 
     */
    private Double memoryInGbs;
    /**
     * @return The networking bandwidth available to the instance, in gigabits per second.
     * 
     */
    private Double networkingBandwidthInGbps;
    private Integer nvmes;
    /**
     * @return The total number of OCPUs available to the instance.
     * 
     */
    private Double ocpus;
    /**
     * @return A short description of the instance&#39;s processor (CPU).
     * 
     */
    private String processorDescription;
    /**
     * @return The total number of VCPUs available to the instance. This can be used instead of OCPUs, in which case the actual number of OCPUs will be calculated based on this value and the actual hardware. This must be a multiple of 2.
     * 
     */
    private Integer vcpus;

    private GetInstanceShapeConfig() {}
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`.
     * 
     */
    public String baselineOcpuUtilization() {
        return this.baselineOcpuUtilization;
    }
    /**
     * @return A short description of the instance&#39;s graphics processing unit (GPU).
     * 
     */
    public String gpuDescription() {
        return this.gpuDescription;
    }
    /**
     * @return The number of GPUs available to the instance.
     * 
     */
    public Integer gpus() {
        return this.gpus;
    }
    /**
     * @return A short description of the local disks available to this instance.
     * 
     */
    public String localDiskDescription() {
        return this.localDiskDescription;
    }
    /**
     * @return The number of local disks available to the instance.
     * 
     */
    public Integer localDisks() {
        return this.localDisks;
    }
    /**
     * @return The aggregate size of all local disks, in gigabytes.
     * 
     */
    public Double localDisksTotalSizeInGbs() {
        return this.localDisksTotalSizeInGbs;
    }
    /**
     * @return The maximum number of VNIC attachments for the instance.
     * 
     */
    public Integer maxVnicAttachments() {
        return this.maxVnicAttachments;
    }
    /**
     * @return The total amount of memory available to the instance, in gigabytes.
     * 
     */
    public Double memoryInGbs() {
        return this.memoryInGbs;
    }
    /**
     * @return The networking bandwidth available to the instance, in gigabits per second.
     * 
     */
    public Double networkingBandwidthInGbps() {
        return this.networkingBandwidthInGbps;
    }
    public Integer nvmes() {
        return this.nvmes;
    }
    /**
     * @return The total number of OCPUs available to the instance.
     * 
     */
    public Double ocpus() {
        return this.ocpus;
    }
    /**
     * @return A short description of the instance&#39;s processor (CPU).
     * 
     */
    public String processorDescription() {
        return this.processorDescription;
    }
    /**
     * @return The total number of VCPUs available to the instance. This can be used instead of OCPUs, in which case the actual number of OCPUs will be calculated based on this value and the actual hardware. This must be a multiple of 2.
     * 
     */
    public Integer vcpus() {
        return this.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceShapeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String baselineOcpuUtilization;
        private String gpuDescription;
        private Integer gpus;
        private String localDiskDescription;
        private Integer localDisks;
        private Double localDisksTotalSizeInGbs;
        private Integer maxVnicAttachments;
        private Double memoryInGbs;
        private Double networkingBandwidthInGbps;
        private Integer nvmes;
        private Double ocpus;
        private String processorDescription;
        private Integer vcpus;
        public Builder() {}
        public Builder(GetInstanceShapeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baselineOcpuUtilization = defaults.baselineOcpuUtilization;
    	      this.gpuDescription = defaults.gpuDescription;
    	      this.gpus = defaults.gpus;
    	      this.localDiskDescription = defaults.localDiskDescription;
    	      this.localDisks = defaults.localDisks;
    	      this.localDisksTotalSizeInGbs = defaults.localDisksTotalSizeInGbs;
    	      this.maxVnicAttachments = defaults.maxVnicAttachments;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.networkingBandwidthInGbps = defaults.networkingBandwidthInGbps;
    	      this.nvmes = defaults.nvmes;
    	      this.ocpus = defaults.ocpus;
    	      this.processorDescription = defaults.processorDescription;
    	      this.vcpus = defaults.vcpus;
        }

        @CustomType.Setter
        public Builder baselineOcpuUtilization(String baselineOcpuUtilization) {
            if (baselineOcpuUtilization == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "baselineOcpuUtilization");
            }
            this.baselineOcpuUtilization = baselineOcpuUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDescription(String gpuDescription) {
            if (gpuDescription == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "gpuDescription");
            }
            this.gpuDescription = gpuDescription;
            return this;
        }
        @CustomType.Setter
        public Builder gpus(Integer gpus) {
            if (gpus == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "gpus");
            }
            this.gpus = gpus;
            return this;
        }
        @CustomType.Setter
        public Builder localDiskDescription(String localDiskDescription) {
            if (localDiskDescription == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "localDiskDescription");
            }
            this.localDiskDescription = localDiskDescription;
            return this;
        }
        @CustomType.Setter
        public Builder localDisks(Integer localDisks) {
            if (localDisks == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "localDisks");
            }
            this.localDisks = localDisks;
            return this;
        }
        @CustomType.Setter
        public Builder localDisksTotalSizeInGbs(Double localDisksTotalSizeInGbs) {
            if (localDisksTotalSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "localDisksTotalSizeInGbs");
            }
            this.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxVnicAttachments(Integer maxVnicAttachments) {
            if (maxVnicAttachments == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "maxVnicAttachments");
            }
            this.maxVnicAttachments = maxVnicAttachments;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(Double memoryInGbs) {
            if (memoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "memoryInGbs");
            }
            this.memoryInGbs = memoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder networkingBandwidthInGbps(Double networkingBandwidthInGbps) {
            if (networkingBandwidthInGbps == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "networkingBandwidthInGbps");
            }
            this.networkingBandwidthInGbps = networkingBandwidthInGbps;
            return this;
        }
        @CustomType.Setter
        public Builder nvmes(Integer nvmes) {
            if (nvmes == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "nvmes");
            }
            this.nvmes = nvmes;
            return this;
        }
        @CustomType.Setter
        public Builder ocpus(Double ocpus) {
            if (ocpus == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "ocpus");
            }
            this.ocpus = ocpus;
            return this;
        }
        @CustomType.Setter
        public Builder processorDescription(String processorDescription) {
            if (processorDescription == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "processorDescription");
            }
            this.processorDescription = processorDescription;
            return this;
        }
        @CustomType.Setter
        public Builder vcpus(Integer vcpus) {
            if (vcpus == null) {
              throw new MissingRequiredPropertyException("GetInstanceShapeConfig", "vcpus");
            }
            this.vcpus = vcpus;
            return this;
        }
        public GetInstanceShapeConfig build() {
            final var _resultValue = new GetInstanceShapeConfig();
            _resultValue.baselineOcpuUtilization = baselineOcpuUtilization;
            _resultValue.gpuDescription = gpuDescription;
            _resultValue.gpus = gpus;
            _resultValue.localDiskDescription = localDiskDescription;
            _resultValue.localDisks = localDisks;
            _resultValue.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            _resultValue.maxVnicAttachments = maxVnicAttachments;
            _resultValue.memoryInGbs = memoryInGbs;
            _resultValue.networkingBandwidthInGbps = networkingBandwidthInGbps;
            _resultValue.nvmes = nvmes;
            _resultValue.ocpus = ocpus;
            _resultValue.processorDescription = processorDescription;
            _resultValue.vcpus = vcpus;
            return _resultValue;
        }
    }
}
