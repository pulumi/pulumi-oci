// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceAgentConfig;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceAvailabilityConfig;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceCreateVnicDetail;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceInstanceOption;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceLaunchOption;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceLaunchVolumeAttachment;
import com.pulumi.oci.Core.outputs.GetInstancesInstancePlatformConfig;
import com.pulumi.oci.Core.outputs.GetInstancesInstancePreemptibleInstanceConfig;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceShapeConfig;
import com.pulumi.oci.Core.outputs.GetInstancesInstanceSourceDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    /**
     * @return Configuration options for the Oracle Cloud Agent software running on the instance.
     * 
     */
    private List<GetInstancesInstanceAgentConfig> agentConfigs;
    private Boolean async;
    /**
     * @return Options for defining the availabiity of a VM instance after a maintenance event that impacts the underlying hardware.
     * 
     */
    private List<GetInstancesInstanceAvailabilityConfig> availabilityConfigs;
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private String availabilityDomain;
    /**
     * @return The OCID of the attached boot volume. If the `source_type` is `bootVolume`, this will be the same OCID as the `source_id`.
     * 
     */
    private String bootVolumeId;
    /**
     * @return The OCID of the compute capacity reservation.
     * 
     */
    private String capacityReservationId;
    /**
     * @return The OCID of the cluster placement group of the instance.
     * 
     */
    private String clusterPlacementGroupId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute cluster. A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a remote direct memory access (RDMA) network group.
     * 
     */
    private String computeClusterId;
    private List<GetInstancesInstanceCreateVnicDetail> createVnicDetails;
    /**
     * @return The OCID of the dedicated virtual machine host that the instance is placed on.
     * 
     */
    private String dedicatedVmHostId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    private String displayName;
    /**
     * @return Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
     * 
     */
    private Map<String,String> extendedMetadata;
    /**
     * @return The name of the fault domain the instance is running in.
     * 
     */
    private String faultDomain;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @deprecated
     * The &#39;hostname_label&#39; field has been deprecated. Please use &#39;hostname_label under create_vnic_details&#39; instead.
     * 
     */
    @Deprecated /* The 'hostname_label' field has been deprecated. Please use 'hostname_label under create_vnic_details' instead. */
    private String hostnameLabel;
    /**
     * @return The OCID of the instance.
     * 
     */
    private String id;
    /**
     * @return Deprecated. Use `sourceDetails` instead.
     * 
     * @deprecated
     * The &#39;image&#39; field has been deprecated. Please use &#39;source_details&#39; instead. If both fields are specified, then &#39;source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'image' field has been deprecated. Please use 'source_details' instead. If both fields are specified, then 'source_details' will be used. */
    private String image;
    /**
     * @return The OCID of the Instance Configuration used to source launch details for this instance. Any other fields supplied in the instance launch request override the details stored in the Instance Configuration for this instance launch.
     * 
     */
    private String instanceConfigurationId;
    /**
     * @return Optional mutable instance options
     * 
     */
    private List<GetInstancesInstanceInstanceOption> instanceOptions;
    /**
     * @return When a bare metal or virtual machine instance boots, the iPXE firmware that runs on the instance is configured to run an iPXE script to continue the boot process.
     * 
     */
    private String ipxeScript;
    /**
     * @return Whether the instanceâ€™s OCPUs and memory are distributed across multiple NUMA nodes.
     * 
     */
    private Boolean isCrossNumaNode;
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    private Boolean isPvEncryptionInTransitEnabled;
    /**
     * @return Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
     * * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for platform images.
     * * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
     * * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
     * * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
     * 
     */
    private String launchMode;
    /**
     * @return Options for tuning the compatibility and performance of VM shapes. The values that you specify override any default values.
     * 
     */
    private List<GetInstancesInstanceLaunchOption> launchOptions;
    private List<GetInstancesInstanceLaunchVolumeAttachment> launchVolumeAttachments;
    /**
     * @return Custom metadata that you provide.
     * 
     */
    private Map<String,String> metadata;
    /**
     * @return The platform configuration for the instance.
     * 
     */
    private List<GetInstancesInstancePlatformConfig> platformConfigs;
    /**
     * @return (Optional) Configuration options for preemptible instances.
     * 
     */
    private List<GetInstancesInstancePreemptibleInstanceConfig> preemptibleInstanceConfigs;
    /**
     * @return (Optional) Whether to preserve the boot volume that was used to launch the preemptible instance when the instance is terminated. Defaults to false if not specified.
     * 
     */
    private Boolean preserveBootVolume;
    private Boolean preserveDataVolumesCreatedAtLaunch;
    private String privateIp;
    private String publicIp;
    /**
     * @return The region that contains the availability domain the instance is running in.
     * 
     */
    private String region;
    /**
     * @return The shape of the instance. The shape determines the number of CPUs and the amount of memory allocated to the instance. You can enumerate all available shapes by calling [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Shape/ListShapes).
     * 
     */
    private String shape;
    /**
     * @return The shape configuration for an instance. The shape configuration determines the resources allocated to an instance.
     * 
     */
    private List<GetInstancesInstanceShapeConfig> shapeConfigs;
    private List<GetInstancesInstanceSourceDetail> sourceDetails;
    /**
     * @return A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    private String state;
    /**
     * @deprecated
     * The &#39;subnet_id&#39; field has been deprecated. Please use &#39;subnet_id under create_vnic_details&#39; instead.
     * 
     */
    @Deprecated /* The 'subnet_id' field has been deprecated. Please use 'subnet_id under create_vnic_details' instead. */
    private String subnetId;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the instance was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the instance is expected to be stopped / started,  in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). After that time if instance hasn&#39;t been rebooted, Oracle will reboot the instance within 24 hours of the due time. Regardless of how the instance was stopped, the flag will be reset to empty as soon as instance reaches Stopped state. Example: `2018-05-25T21:10:29.600Z`
     * 
     */
    private String timeMaintenanceRebootDue;
    private String updateOperationConstraint;

    private GetInstancesInstance() {}
    /**
     * @return Configuration options for the Oracle Cloud Agent software running on the instance.
     * 
     */
    public List<GetInstancesInstanceAgentConfig> agentConfigs() {
        return this.agentConfigs;
    }
    public Boolean async() {
        return this.async;
    }
    /**
     * @return Options for defining the availabiity of a VM instance after a maintenance event that impacts the underlying hardware.
     * 
     */
    public List<GetInstancesInstanceAvailabilityConfig> availabilityConfigs() {
        return this.availabilityConfigs;
    }
    /**
     * @return The name of the availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The OCID of the attached boot volume. If the `source_type` is `bootVolume`, this will be the same OCID as the `source_id`.
     * 
     */
    public String bootVolumeId() {
        return this.bootVolumeId;
    }
    /**
     * @return The OCID of the compute capacity reservation.
     * 
     */
    public String capacityReservationId() {
        return this.capacityReservationId;
    }
    /**
     * @return The OCID of the cluster placement group of the instance.
     * 
     */
    public String clusterPlacementGroupId() {
        return this.clusterPlacementGroupId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute cluster. A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a remote direct memory access (RDMA) network group.
     * 
     */
    public String computeClusterId() {
        return this.computeClusterId;
    }
    public List<GetInstancesInstanceCreateVnicDetail> createVnicDetails() {
        return this.createVnicDetails;
    }
    /**
     * @return The OCID of the dedicated virtual machine host that the instance is placed on.
     * 
     */
    public String dedicatedVmHostId() {
        return this.dedicatedVmHostId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
     * 
     */
    public Map<String,String> extendedMetadata() {
        return this.extendedMetadata;
    }
    /**
     * @return The name of the fault domain the instance is running in.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @deprecated
     * The &#39;hostname_label&#39; field has been deprecated. Please use &#39;hostname_label under create_vnic_details&#39; instead.
     * 
     */
    @Deprecated /* The 'hostname_label' field has been deprecated. Please use 'hostname_label under create_vnic_details' instead. */
    public String hostnameLabel() {
        return this.hostnameLabel;
    }
    /**
     * @return The OCID of the instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Deprecated. Use `sourceDetails` instead.
     * 
     * @deprecated
     * The &#39;image&#39; field has been deprecated. Please use &#39;source_details&#39; instead. If both fields are specified, then &#39;source_details&#39; will be used.
     * 
     */
    @Deprecated /* The 'image' field has been deprecated. Please use 'source_details' instead. If both fields are specified, then 'source_details' will be used. */
    public String image() {
        return this.image;
    }
    /**
     * @return The OCID of the Instance Configuration used to source launch details for this instance. Any other fields supplied in the instance launch request override the details stored in the Instance Configuration for this instance launch.
     * 
     */
    public String instanceConfigurationId() {
        return this.instanceConfigurationId;
    }
    /**
     * @return Optional mutable instance options
     * 
     */
    public List<GetInstancesInstanceInstanceOption> instanceOptions() {
        return this.instanceOptions;
    }
    /**
     * @return When a bare metal or virtual machine instance boots, the iPXE firmware that runs on the instance is configured to run an iPXE script to continue the boot process.
     * 
     */
    public String ipxeScript() {
        return this.ipxeScript;
    }
    /**
     * @return Whether the instanceâ€™s OCPUs and memory are distributed across multiple NUMA nodes.
     * 
     */
    public Boolean isCrossNumaNode() {
        return this.isCrossNumaNode;
    }
    /**
     * @return Deprecated. Instead use `isPvEncryptionInTransitEnabled` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/datatypes/LaunchInstanceDetails).
     * 
     */
    public Boolean isPvEncryptionInTransitEnabled() {
        return this.isPvEncryptionInTransitEnabled;
    }
    /**
     * @return Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
     * * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for platform images.
     * * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
     * * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
     * * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
     * 
     */
    public String launchMode() {
        return this.launchMode;
    }
    /**
     * @return Options for tuning the compatibility and performance of VM shapes. The values that you specify override any default values.
     * 
     */
    public List<GetInstancesInstanceLaunchOption> launchOptions() {
        return this.launchOptions;
    }
    public List<GetInstancesInstanceLaunchVolumeAttachment> launchVolumeAttachments() {
        return this.launchVolumeAttachments;
    }
    /**
     * @return Custom metadata that you provide.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return The platform configuration for the instance.
     * 
     */
    public List<GetInstancesInstancePlatformConfig> platformConfigs() {
        return this.platformConfigs;
    }
    /**
     * @return (Optional) Configuration options for preemptible instances.
     * 
     */
    public List<GetInstancesInstancePreemptibleInstanceConfig> preemptibleInstanceConfigs() {
        return this.preemptibleInstanceConfigs;
    }
    /**
     * @return (Optional) Whether to preserve the boot volume that was used to launch the preemptible instance when the instance is terminated. Defaults to false if not specified.
     * 
     */
    public Boolean preserveBootVolume() {
        return this.preserveBootVolume;
    }
    public Boolean preserveDataVolumesCreatedAtLaunch() {
        return this.preserveDataVolumesCreatedAtLaunch;
    }
    public String privateIp() {
        return this.privateIp;
    }
    public String publicIp() {
        return this.publicIp;
    }
    /**
     * @return The region that contains the availability domain the instance is running in.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The shape of the instance. The shape determines the number of CPUs and the amount of memory allocated to the instance. You can enumerate all available shapes by calling [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Shape/ListShapes).
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The shape configuration for an instance. The shape configuration determines the resources allocated to an instance.
     * 
     */
    public List<GetInstancesInstanceShapeConfig> shapeConfigs() {
        return this.shapeConfigs;
    }
    public List<GetInstancesInstanceSourceDetail> sourceDetails() {
        return this.sourceDetails;
    }
    /**
     * @return A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @deprecated
     * The &#39;subnet_id&#39; field has been deprecated. Please use &#39;subnet_id under create_vnic_details&#39; instead.
     * 
     */
    @Deprecated /* The 'subnet_id' field has been deprecated. Please use 'subnet_id under create_vnic_details' instead. */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the instance was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the instance is expected to be stopped / started,  in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). After that time if instance hasn&#39;t been rebooted, Oracle will reboot the instance within 24 hours of the due time. Regardless of how the instance was stopped, the flag will be reset to empty as soon as instance reaches Stopped state. Example: `2018-05-25T21:10:29.600Z`
     * 
     */
    public String timeMaintenanceRebootDue() {
        return this.timeMaintenanceRebootDue;
    }
    public String updateOperationConstraint() {
        return this.updateOperationConstraint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInstancesInstanceAgentConfig> agentConfigs;
        private Boolean async;
        private List<GetInstancesInstanceAvailabilityConfig> availabilityConfigs;
        private String availabilityDomain;
        private String bootVolumeId;
        private String capacityReservationId;
        private String clusterPlacementGroupId;
        private String compartmentId;
        private String computeClusterId;
        private List<GetInstancesInstanceCreateVnicDetail> createVnicDetails;
        private String dedicatedVmHostId;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> extendedMetadata;
        private String faultDomain;
        private Map<String,String> freeformTags;
        private String hostnameLabel;
        private String id;
        private String image;
        private String instanceConfigurationId;
        private List<GetInstancesInstanceInstanceOption> instanceOptions;
        private String ipxeScript;
        private Boolean isCrossNumaNode;
        private Boolean isPvEncryptionInTransitEnabled;
        private String launchMode;
        private List<GetInstancesInstanceLaunchOption> launchOptions;
        private List<GetInstancesInstanceLaunchVolumeAttachment> launchVolumeAttachments;
        private Map<String,String> metadata;
        private List<GetInstancesInstancePlatformConfig> platformConfigs;
        private List<GetInstancesInstancePreemptibleInstanceConfig> preemptibleInstanceConfigs;
        private Boolean preserveBootVolume;
        private Boolean preserveDataVolumesCreatedAtLaunch;
        private String privateIp;
        private String publicIp;
        private String region;
        private String shape;
        private List<GetInstancesInstanceShapeConfig> shapeConfigs;
        private List<GetInstancesInstanceSourceDetail> sourceDetails;
        private String state;
        private String subnetId;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeMaintenanceRebootDue;
        private String updateOperationConstraint;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentConfigs = defaults.agentConfigs;
    	      this.async = defaults.async;
    	      this.availabilityConfigs = defaults.availabilityConfigs;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.bootVolumeId = defaults.bootVolumeId;
    	      this.capacityReservationId = defaults.capacityReservationId;
    	      this.clusterPlacementGroupId = defaults.clusterPlacementGroupId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeClusterId = defaults.computeClusterId;
    	      this.createVnicDetails = defaults.createVnicDetails;
    	      this.dedicatedVmHostId = defaults.dedicatedVmHostId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.extendedMetadata = defaults.extendedMetadata;
    	      this.faultDomain = defaults.faultDomain;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.instanceConfigurationId = defaults.instanceConfigurationId;
    	      this.instanceOptions = defaults.instanceOptions;
    	      this.ipxeScript = defaults.ipxeScript;
    	      this.isCrossNumaNode = defaults.isCrossNumaNode;
    	      this.isPvEncryptionInTransitEnabled = defaults.isPvEncryptionInTransitEnabled;
    	      this.launchMode = defaults.launchMode;
    	      this.launchOptions = defaults.launchOptions;
    	      this.launchVolumeAttachments = defaults.launchVolumeAttachments;
    	      this.metadata = defaults.metadata;
    	      this.platformConfigs = defaults.platformConfigs;
    	      this.preemptibleInstanceConfigs = defaults.preemptibleInstanceConfigs;
    	      this.preserveBootVolume = defaults.preserveBootVolume;
    	      this.preserveDataVolumesCreatedAtLaunch = defaults.preserveDataVolumesCreatedAtLaunch;
    	      this.privateIp = defaults.privateIp;
    	      this.publicIp = defaults.publicIp;
    	      this.region = defaults.region;
    	      this.shape = defaults.shape;
    	      this.shapeConfigs = defaults.shapeConfigs;
    	      this.sourceDetails = defaults.sourceDetails;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeMaintenanceRebootDue = defaults.timeMaintenanceRebootDue;
    	      this.updateOperationConstraint = defaults.updateOperationConstraint;
        }

        @CustomType.Setter
        public Builder agentConfigs(List<GetInstancesInstanceAgentConfig> agentConfigs) {
            if (agentConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "agentConfigs");
            }
            this.agentConfigs = agentConfigs;
            return this;
        }
        public Builder agentConfigs(GetInstancesInstanceAgentConfig... agentConfigs) {
            return agentConfigs(List.of(agentConfigs));
        }
        @CustomType.Setter
        public Builder async(Boolean async) {
            if (async == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "async");
            }
            this.async = async;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityConfigs(List<GetInstancesInstanceAvailabilityConfig> availabilityConfigs) {
            if (availabilityConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "availabilityConfigs");
            }
            this.availabilityConfigs = availabilityConfigs;
            return this;
        }
        public Builder availabilityConfigs(GetInstancesInstanceAvailabilityConfig... availabilityConfigs) {
            return availabilityConfigs(List.of(availabilityConfigs));
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder bootVolumeId(String bootVolumeId) {
            if (bootVolumeId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "bootVolumeId");
            }
            this.bootVolumeId = bootVolumeId;
            return this;
        }
        @CustomType.Setter
        public Builder capacityReservationId(String capacityReservationId) {
            if (capacityReservationId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "capacityReservationId");
            }
            this.capacityReservationId = capacityReservationId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterPlacementGroupId(String clusterPlacementGroupId) {
            if (clusterPlacementGroupId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "clusterPlacementGroupId");
            }
            this.clusterPlacementGroupId = clusterPlacementGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder computeClusterId(String computeClusterId) {
            if (computeClusterId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "computeClusterId");
            }
            this.computeClusterId = computeClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder createVnicDetails(List<GetInstancesInstanceCreateVnicDetail> createVnicDetails) {
            if (createVnicDetails == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "createVnicDetails");
            }
            this.createVnicDetails = createVnicDetails;
            return this;
        }
        public Builder createVnicDetails(GetInstancesInstanceCreateVnicDetail... createVnicDetails) {
            return createVnicDetails(List.of(createVnicDetails));
        }
        @CustomType.Setter
        public Builder dedicatedVmHostId(String dedicatedVmHostId) {
            if (dedicatedVmHostId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "dedicatedVmHostId");
            }
            this.dedicatedVmHostId = dedicatedVmHostId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder extendedMetadata(Map<String,String> extendedMetadata) {
            if (extendedMetadata == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "extendedMetadata");
            }
            this.extendedMetadata = extendedMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            if (faultDomain == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "faultDomain");
            }
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameLabel(String hostnameLabel) {
            if (hostnameLabel == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "hostnameLabel");
            }
            this.hostnameLabel = hostnameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder instanceConfigurationId(String instanceConfigurationId) {
            if (instanceConfigurationId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceConfigurationId");
            }
            this.instanceConfigurationId = instanceConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceOptions(List<GetInstancesInstanceInstanceOption> instanceOptions) {
            if (instanceOptions == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "instanceOptions");
            }
            this.instanceOptions = instanceOptions;
            return this;
        }
        public Builder instanceOptions(GetInstancesInstanceInstanceOption... instanceOptions) {
            return instanceOptions(List.of(instanceOptions));
        }
        @CustomType.Setter
        public Builder ipxeScript(String ipxeScript) {
            if (ipxeScript == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "ipxeScript");
            }
            this.ipxeScript = ipxeScript;
            return this;
        }
        @CustomType.Setter
        public Builder isCrossNumaNode(Boolean isCrossNumaNode) {
            if (isCrossNumaNode == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "isCrossNumaNode");
            }
            this.isCrossNumaNode = isCrossNumaNode;
            return this;
        }
        @CustomType.Setter
        public Builder isPvEncryptionInTransitEnabled(Boolean isPvEncryptionInTransitEnabled) {
            if (isPvEncryptionInTransitEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "isPvEncryptionInTransitEnabled");
            }
            this.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder launchMode(String launchMode) {
            if (launchMode == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "launchMode");
            }
            this.launchMode = launchMode;
            return this;
        }
        @CustomType.Setter
        public Builder launchOptions(List<GetInstancesInstanceLaunchOption> launchOptions) {
            if (launchOptions == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "launchOptions");
            }
            this.launchOptions = launchOptions;
            return this;
        }
        public Builder launchOptions(GetInstancesInstanceLaunchOption... launchOptions) {
            return launchOptions(List.of(launchOptions));
        }
        @CustomType.Setter
        public Builder launchVolumeAttachments(List<GetInstancesInstanceLaunchVolumeAttachment> launchVolumeAttachments) {
            if (launchVolumeAttachments == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "launchVolumeAttachments");
            }
            this.launchVolumeAttachments = launchVolumeAttachments;
            return this;
        }
        public Builder launchVolumeAttachments(GetInstancesInstanceLaunchVolumeAttachment... launchVolumeAttachments) {
            return launchVolumeAttachments(List.of(launchVolumeAttachments));
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder platformConfigs(List<GetInstancesInstancePlatformConfig> platformConfigs) {
            if (platformConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "platformConfigs");
            }
            this.platformConfigs = platformConfigs;
            return this;
        }
        public Builder platformConfigs(GetInstancesInstancePlatformConfig... platformConfigs) {
            return platformConfigs(List.of(platformConfigs));
        }
        @CustomType.Setter
        public Builder preemptibleInstanceConfigs(List<GetInstancesInstancePreemptibleInstanceConfig> preemptibleInstanceConfigs) {
            if (preemptibleInstanceConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "preemptibleInstanceConfigs");
            }
            this.preemptibleInstanceConfigs = preemptibleInstanceConfigs;
            return this;
        }
        public Builder preemptibleInstanceConfigs(GetInstancesInstancePreemptibleInstanceConfig... preemptibleInstanceConfigs) {
            return preemptibleInstanceConfigs(List.of(preemptibleInstanceConfigs));
        }
        @CustomType.Setter
        public Builder preserveBootVolume(Boolean preserveBootVolume) {
            if (preserveBootVolume == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "preserveBootVolume");
            }
            this.preserveBootVolume = preserveBootVolume;
            return this;
        }
        @CustomType.Setter
        public Builder preserveDataVolumesCreatedAtLaunch(Boolean preserveDataVolumesCreatedAtLaunch) {
            if (preserveDataVolumesCreatedAtLaunch == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "preserveDataVolumesCreatedAtLaunch");
            }
            this.preserveDataVolumesCreatedAtLaunch = preserveDataVolumesCreatedAtLaunch;
            return this;
        }
        @CustomType.Setter
        public Builder privateIp(String privateIp) {
            if (privateIp == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "privateIp");
            }
            this.privateIp = privateIp;
            return this;
        }
        @CustomType.Setter
        public Builder publicIp(String publicIp) {
            if (publicIp == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "publicIp");
            }
            this.publicIp = publicIp;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder shapeConfigs(List<GetInstancesInstanceShapeConfig> shapeConfigs) {
            if (shapeConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "shapeConfigs");
            }
            this.shapeConfigs = shapeConfigs;
            return this;
        }
        public Builder shapeConfigs(GetInstancesInstanceShapeConfig... shapeConfigs) {
            return shapeConfigs(List.of(shapeConfigs));
        }
        @CustomType.Setter
        public Builder sourceDetails(List<GetInstancesInstanceSourceDetail> sourceDetails) {
            if (sourceDetails == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "sourceDetails");
            }
            this.sourceDetails = sourceDetails;
            return this;
        }
        public Builder sourceDetails(GetInstancesInstanceSourceDetail... sourceDetails) {
            return sourceDetails(List.of(sourceDetails));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceRebootDue(String timeMaintenanceRebootDue) {
            if (timeMaintenanceRebootDue == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "timeMaintenanceRebootDue");
            }
            this.timeMaintenanceRebootDue = timeMaintenanceRebootDue;
            return this;
        }
        @CustomType.Setter
        public Builder updateOperationConstraint(String updateOperationConstraint) {
            if (updateOperationConstraint == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstance", "updateOperationConstraint");
            }
            this.updateOperationConstraint = updateOperationConstraint;
            return this;
        }
        public GetInstancesInstance build() {
            final var _resultValue = new GetInstancesInstance();
            _resultValue.agentConfigs = agentConfigs;
            _resultValue.async = async;
            _resultValue.availabilityConfigs = availabilityConfigs;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.bootVolumeId = bootVolumeId;
            _resultValue.capacityReservationId = capacityReservationId;
            _resultValue.clusterPlacementGroupId = clusterPlacementGroupId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.computeClusterId = computeClusterId;
            _resultValue.createVnicDetails = createVnicDetails;
            _resultValue.dedicatedVmHostId = dedicatedVmHostId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.extendedMetadata = extendedMetadata;
            _resultValue.faultDomain = faultDomain;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hostnameLabel = hostnameLabel;
            _resultValue.id = id;
            _resultValue.image = image;
            _resultValue.instanceConfigurationId = instanceConfigurationId;
            _resultValue.instanceOptions = instanceOptions;
            _resultValue.ipxeScript = ipxeScript;
            _resultValue.isCrossNumaNode = isCrossNumaNode;
            _resultValue.isPvEncryptionInTransitEnabled = isPvEncryptionInTransitEnabled;
            _resultValue.launchMode = launchMode;
            _resultValue.launchOptions = launchOptions;
            _resultValue.launchVolumeAttachments = launchVolumeAttachments;
            _resultValue.metadata = metadata;
            _resultValue.platformConfigs = platformConfigs;
            _resultValue.preemptibleInstanceConfigs = preemptibleInstanceConfigs;
            _resultValue.preserveBootVolume = preserveBootVolume;
            _resultValue.preserveDataVolumesCreatedAtLaunch = preserveDataVolumesCreatedAtLaunch;
            _resultValue.privateIp = privateIp;
            _resultValue.publicIp = publicIp;
            _resultValue.region = region;
            _resultValue.shape = shape;
            _resultValue.shapeConfigs = shapeConfigs;
            _resultValue.sourceDetails = sourceDetails;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeMaintenanceRebootDue = timeMaintenanceRebootDue;
            _resultValue.updateOperationConstraint = updateOperationConstraint;
            return _resultValue;
        }
    }
}
