// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstancesInstanceShapeConfig {
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`.
     * 
     */
    private @Nullable String baselineOcpuUtilization;
    /**
     * @return A short description of the instance&#39;s graphics processing unit (GPU).
     * 
     */
    private @Nullable String gpuDescription;
    /**
     * @return The number of GPUs available to the instance.
     * 
     */
    private @Nullable Integer gpus;
    /**
     * @return A short description of the local disks available to this instance.
     * 
     */
    private @Nullable String localDiskDescription;
    /**
     * @return The number of local disks available to the instance.
     * 
     */
    private @Nullable Integer localDisks;
    /**
     * @return The aggregate size of all local disks, in gigabytes.
     * 
     */
    private @Nullable Double localDisksTotalSizeInGbs;
    /**
     * @return The maximum number of VNIC attachments for the instance.
     * 
     */
    private @Nullable Integer maxVnicAttachments;
    /**
     * @return The total amount of memory available to the instance, in gigabytes.
     * 
     */
    private @Nullable Double memoryInGbs;
    /**
     * @return The networking bandwidth available to the instance, in gigabits per second.
     * 
     */
    private @Nullable Double networkingBandwidthInGbps;
    private @Nullable Integer nvmes;
    /**
     * @return The total number of OCPUs available to the instance.
     * 
     */
    private @Nullable Double ocpus;
    /**
     * @return A short description of the instance&#39;s processor (CPU).
     * 
     */
    private @Nullable String processorDescription;
    /**
     * @return The total number of VCPUs available to the instance. This can be used instead of OCPUs, in which case the actual number of OCPUs will be calculated based on this value and the actual hardware. This must be a multiple of 2.
     * 
     */
    private @Nullable Integer vcpus;

    private GetInstancesInstanceShapeConfig() {}
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`.
     * 
     */
    public Optional<String> baselineOcpuUtilization() {
        return Optional.ofNullable(this.baselineOcpuUtilization);
    }
    /**
     * @return A short description of the instance&#39;s graphics processing unit (GPU).
     * 
     */
    public Optional<String> gpuDescription() {
        return Optional.ofNullable(this.gpuDescription);
    }
    /**
     * @return The number of GPUs available to the instance.
     * 
     */
    public Optional<Integer> gpus() {
        return Optional.ofNullable(this.gpus);
    }
    /**
     * @return A short description of the local disks available to this instance.
     * 
     */
    public Optional<String> localDiskDescription() {
        return Optional.ofNullable(this.localDiskDescription);
    }
    /**
     * @return The number of local disks available to the instance.
     * 
     */
    public Optional<Integer> localDisks() {
        return Optional.ofNullable(this.localDisks);
    }
    /**
     * @return The aggregate size of all local disks, in gigabytes.
     * 
     */
    public Optional<Double> localDisksTotalSizeInGbs() {
        return Optional.ofNullable(this.localDisksTotalSizeInGbs);
    }
    /**
     * @return The maximum number of VNIC attachments for the instance.
     * 
     */
    public Optional<Integer> maxVnicAttachments() {
        return Optional.ofNullable(this.maxVnicAttachments);
    }
    /**
     * @return The total amount of memory available to the instance, in gigabytes.
     * 
     */
    public Optional<Double> memoryInGbs() {
        return Optional.ofNullable(this.memoryInGbs);
    }
    /**
     * @return The networking bandwidth available to the instance, in gigabits per second.
     * 
     */
    public Optional<Double> networkingBandwidthInGbps() {
        return Optional.ofNullable(this.networkingBandwidthInGbps);
    }
    public Optional<Integer> nvmes() {
        return Optional.ofNullable(this.nvmes);
    }
    /**
     * @return The total number of OCPUs available to the instance.
     * 
     */
    public Optional<Double> ocpus() {
        return Optional.ofNullable(this.ocpus);
    }
    /**
     * @return A short description of the instance&#39;s processor (CPU).
     * 
     */
    public Optional<String> processorDescription() {
        return Optional.ofNullable(this.processorDescription);
    }
    /**
     * @return The total number of VCPUs available to the instance. This can be used instead of OCPUs, in which case the actual number of OCPUs will be calculated based on this value and the actual hardware. This must be a multiple of 2.
     * 
     */
    public Optional<Integer> vcpus() {
        return Optional.ofNullable(this.vcpus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstanceShapeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String baselineOcpuUtilization;
        private @Nullable String gpuDescription;
        private @Nullable Integer gpus;
        private @Nullable String localDiskDescription;
        private @Nullable Integer localDisks;
        private @Nullable Double localDisksTotalSizeInGbs;
        private @Nullable Integer maxVnicAttachments;
        private @Nullable Double memoryInGbs;
        private @Nullable Double networkingBandwidthInGbps;
        private @Nullable Integer nvmes;
        private @Nullable Double ocpus;
        private @Nullable String processorDescription;
        private @Nullable Integer vcpus;
        public Builder() {}
        public Builder(GetInstancesInstanceShapeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baselineOcpuUtilization = defaults.baselineOcpuUtilization;
    	      this.gpuDescription = defaults.gpuDescription;
    	      this.gpus = defaults.gpus;
    	      this.localDiskDescription = defaults.localDiskDescription;
    	      this.localDisks = defaults.localDisks;
    	      this.localDisksTotalSizeInGbs = defaults.localDisksTotalSizeInGbs;
    	      this.maxVnicAttachments = defaults.maxVnicAttachments;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.networkingBandwidthInGbps = defaults.networkingBandwidthInGbps;
    	      this.nvmes = defaults.nvmes;
    	      this.ocpus = defaults.ocpus;
    	      this.processorDescription = defaults.processorDescription;
    	      this.vcpus = defaults.vcpus;
        }

        @CustomType.Setter
        public Builder baselineOcpuUtilization(@Nullable String baselineOcpuUtilization) {
            this.baselineOcpuUtilization = baselineOcpuUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDescription(@Nullable String gpuDescription) {
            this.gpuDescription = gpuDescription;
            return this;
        }
        @CustomType.Setter
        public Builder gpus(@Nullable Integer gpus) {
            this.gpus = gpus;
            return this;
        }
        @CustomType.Setter
        public Builder localDiskDescription(@Nullable String localDiskDescription) {
            this.localDiskDescription = localDiskDescription;
            return this;
        }
        @CustomType.Setter
        public Builder localDisks(@Nullable Integer localDisks) {
            this.localDisks = localDisks;
            return this;
        }
        @CustomType.Setter
        public Builder localDisksTotalSizeInGbs(@Nullable Double localDisksTotalSizeInGbs) {
            this.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxVnicAttachments(@Nullable Integer maxVnicAttachments) {
            this.maxVnicAttachments = maxVnicAttachments;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(@Nullable Double memoryInGbs) {
            this.memoryInGbs = memoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder networkingBandwidthInGbps(@Nullable Double networkingBandwidthInGbps) {
            this.networkingBandwidthInGbps = networkingBandwidthInGbps;
            return this;
        }
        @CustomType.Setter
        public Builder nvmes(@Nullable Integer nvmes) {
            this.nvmes = nvmes;
            return this;
        }
        @CustomType.Setter
        public Builder ocpus(@Nullable Double ocpus) {
            this.ocpus = ocpus;
            return this;
        }
        @CustomType.Setter
        public Builder processorDescription(@Nullable String processorDescription) {
            this.processorDescription = processorDescription;
            return this;
        }
        @CustomType.Setter
        public Builder vcpus(@Nullable Integer vcpus) {
            this.vcpus = vcpus;
            return this;
        }
        public GetInstancesInstanceShapeConfig build() {
            final var o = new GetInstancesInstanceShapeConfig();
            o.baselineOcpuUtilization = baselineOcpuUtilization;
            o.gpuDescription = gpuDescription;
            o.gpus = gpus;
            o.localDiskDescription = localDiskDescription;
            o.localDisks = localDisks;
            o.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            o.maxVnicAttachments = maxVnicAttachments;
            o.memoryInGbs = memoryInGbs;
            o.networkingBandwidthInGbps = networkingBandwidthInGbps;
            o.nvmes = nvmes;
            o.ocpus = ocpus;
            o.processorDescription = processorDescription;
            o.vcpus = vcpus;
            return o;
        }
    }
}
