// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail;
import com.pulumi.oci.Core.outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIpsecConnectionTunnelsIpSecConnectionTunnel {
    /**
     * @return The list of virtual circuit [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s over which your network can reach this tunnel.
     * 
     */
    private @Nullable List<String> associatedVirtualCircuits;
    /**
     * @return Information for establishing a BGP session for the IPSec tunnel.
     * 
     */
    private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The IP address of the CPE device&#39;s VPN headend.  Example: `203.0.113.22`
     * 
     */
    private @Nullable String cpeIp;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Dead peer detection (DPD) mode set on the Oracle side of the connection. This mode sets whether Oracle can only respond to a request from the CPE device to start DPD, or both respond to and initiate requests.
     * 
     */
    private @Nullable String dpdMode;
    /**
     * @return DPD timeout in seconds.
     * 
     */
    private @Nullable Integer dpdTimeoutInSec;
    /**
     * @return Configuration information used by the encryption domain policy.
     * 
     */
    private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tunnel.
     * 
     */
    private @Nullable String id;
    /**
     * @return Internet Key Exchange protocol version.
     * 
     */
    private @Nullable String ikeVersion;
    /**
     * @return By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
     * 
     */
    private @Nullable String natTranslationEnabled;
    /**
     * @return Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device, or both respond to and initiate requests.
     * 
     */
    private @Nullable String oracleCanInitiate;
    /**
     * @return IPSec tunnel details specific to ISAKMP phase one.
     * 
     */
    private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails;
    /**
     * @return IPsec tunnel detail information specific to phase two.
     * 
     */
    private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails;
    /**
     * @return The type of routing used for this tunnel (BGP dynamic routing, static routing, or policy-based routing).
     * 
     */
    private @Nullable String routing;
    /**
     * @return The tunnel&#39;s lifecycle state.
     * 
     */
    private @Nullable String state;
    /**
     * @return The status of the tunnel based on IPSec protocol characteristics.
     * 
     */
    private @Nullable String status;
    /**
     * @return The date and time the IPSec tunnel was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return When the status of the IPSec tunnel last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private @Nullable String timeStatusUpdated;
    /**
     * @return The IP address of the Oracle VPN headend for the connection.  Example: `203.0.113.21`
     * 
     */
    private @Nullable String vpnIp;

    private GetIpsecConnectionTunnelsIpSecConnectionTunnel() {}
    /**
     * @return The list of virtual circuit [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s over which your network can reach this tunnel.
     * 
     */
    public List<String> associatedVirtualCircuits() {
        return this.associatedVirtualCircuits == null ? List.of() : this.associatedVirtualCircuits;
    }
    /**
     * @return Information for establishing a BGP session for the IPSec tunnel.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos() {
        return this.bgpSessionInfos == null ? List.of() : this.bgpSessionInfos;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The IP address of the CPE device&#39;s VPN headend.  Example: `203.0.113.22`
     * 
     */
    public Optional<String> cpeIp() {
        return Optional.ofNullable(this.cpeIp);
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Dead peer detection (DPD) mode set on the Oracle side of the connection. This mode sets whether Oracle can only respond to a request from the CPE device to start DPD, or both respond to and initiate requests.
     * 
     */
    public Optional<String> dpdMode() {
        return Optional.ofNullable(this.dpdMode);
    }
    /**
     * @return DPD timeout in seconds.
     * 
     */
    public Optional<Integer> dpdTimeoutInSec() {
        return Optional.ofNullable(this.dpdTimeoutInSec);
    }
    /**
     * @return Configuration information used by the encryption domain policy.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs() {
        return this.encryptionDomainConfigs == null ? List.of() : this.encryptionDomainConfigs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tunnel.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Internet Key Exchange protocol version.
     * 
     */
    public Optional<String> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }
    /**
     * @return By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
     * 
     */
    public Optional<String> natTranslationEnabled() {
        return Optional.ofNullable(this.natTranslationEnabled);
    }
    /**
     * @return Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device, or both respond to and initiate requests.
     * 
     */
    public Optional<String> oracleCanInitiate() {
        return Optional.ofNullable(this.oracleCanInitiate);
    }
    /**
     * @return IPSec tunnel details specific to ISAKMP phase one.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails() {
        return this.phaseOneDetails == null ? List.of() : this.phaseOneDetails;
    }
    /**
     * @return IPsec tunnel detail information specific to phase two.
     * 
     */
    public List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails() {
        return this.phaseTwoDetails == null ? List.of() : this.phaseTwoDetails;
    }
    /**
     * @return The type of routing used for this tunnel (BGP dynamic routing, static routing, or policy-based routing).
     * 
     */
    public Optional<String> routing() {
        return Optional.ofNullable(this.routing);
    }
    /**
     * @return The tunnel&#39;s lifecycle state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The status of the tunnel based on IPSec protocol characteristics.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The date and time the IPSec tunnel was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return When the status of the IPSec tunnel last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<String> timeStatusUpdated() {
        return Optional.ofNullable(this.timeStatusUpdated);
    }
    /**
     * @return The IP address of the Oracle VPN headend for the connection.  Example: `203.0.113.21`
     * 
     */
    public Optional<String> vpnIp() {
        return Optional.ofNullable(this.vpnIp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIpsecConnectionTunnelsIpSecConnectionTunnel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> associatedVirtualCircuits;
        private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos;
        private @Nullable String compartmentId;
        private @Nullable String cpeIp;
        private @Nullable String displayName;
        private @Nullable String dpdMode;
        private @Nullable Integer dpdTimeoutInSec;
        private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs;
        private @Nullable String id;
        private @Nullable String ikeVersion;
        private @Nullable String natTranslationEnabled;
        private @Nullable String oracleCanInitiate;
        private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails;
        private @Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails;
        private @Nullable String routing;
        private @Nullable String state;
        private @Nullable String status;
        private @Nullable String timeCreated;
        private @Nullable String timeStatusUpdated;
        private @Nullable String vpnIp;
        public Builder() {}
        public Builder(GetIpsecConnectionTunnelsIpSecConnectionTunnel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associatedVirtualCircuits = defaults.associatedVirtualCircuits;
    	      this.bgpSessionInfos = defaults.bgpSessionInfos;
    	      this.compartmentId = defaults.compartmentId;
    	      this.cpeIp = defaults.cpeIp;
    	      this.displayName = defaults.displayName;
    	      this.dpdMode = defaults.dpdMode;
    	      this.dpdTimeoutInSec = defaults.dpdTimeoutInSec;
    	      this.encryptionDomainConfigs = defaults.encryptionDomainConfigs;
    	      this.id = defaults.id;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.natTranslationEnabled = defaults.natTranslationEnabled;
    	      this.oracleCanInitiate = defaults.oracleCanInitiate;
    	      this.phaseOneDetails = defaults.phaseOneDetails;
    	      this.phaseTwoDetails = defaults.phaseTwoDetails;
    	      this.routing = defaults.routing;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStatusUpdated = defaults.timeStatusUpdated;
    	      this.vpnIp = defaults.vpnIp;
        }

        @CustomType.Setter
        public Builder associatedVirtualCircuits(@Nullable List<String> associatedVirtualCircuits) {
            this.associatedVirtualCircuits = associatedVirtualCircuits;
            return this;
        }
        public Builder associatedVirtualCircuits(String... associatedVirtualCircuits) {
            return associatedVirtualCircuits(List.of(associatedVirtualCircuits));
        }
        @CustomType.Setter
        public Builder bgpSessionInfos(@Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo> bgpSessionInfos) {
            this.bgpSessionInfos = bgpSessionInfos;
            return this;
        }
        public Builder bgpSessionInfos(GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo... bgpSessionInfos) {
            return bgpSessionInfos(List.of(bgpSessionInfos));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder cpeIp(@Nullable String cpeIp) {
            this.cpeIp = cpeIp;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dpdMode(@Nullable String dpdMode) {
            this.dpdMode = dpdMode;
            return this;
        }
        @CustomType.Setter
        public Builder dpdTimeoutInSec(@Nullable Integer dpdTimeoutInSec) {
            this.dpdTimeoutInSec = dpdTimeoutInSec;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionDomainConfigs(@Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig> encryptionDomainConfigs) {
            this.encryptionDomainConfigs = encryptionDomainConfigs;
            return this;
        }
        public Builder encryptionDomainConfigs(GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig... encryptionDomainConfigs) {
            return encryptionDomainConfigs(List.of(encryptionDomainConfigs));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(@Nullable String ikeVersion) {
            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder natTranslationEnabled(@Nullable String natTranslationEnabled) {
            this.natTranslationEnabled = natTranslationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder oracleCanInitiate(@Nullable String oracleCanInitiate) {
            this.oracleCanInitiate = oracleCanInitiate;
            return this;
        }
        @CustomType.Setter
        public Builder phaseOneDetails(@Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail> phaseOneDetails) {
            this.phaseOneDetails = phaseOneDetails;
            return this;
        }
        public Builder phaseOneDetails(GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail... phaseOneDetails) {
            return phaseOneDetails(List.of(phaseOneDetails));
        }
        @CustomType.Setter
        public Builder phaseTwoDetails(@Nullable List<GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail> phaseTwoDetails) {
            this.phaseTwoDetails = phaseTwoDetails;
            return this;
        }
        public Builder phaseTwoDetails(GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail... phaseTwoDetails) {
            return phaseTwoDetails(List.of(phaseTwoDetails));
        }
        @CustomType.Setter
        public Builder routing(@Nullable String routing) {
            this.routing = routing;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeStatusUpdated(@Nullable String timeStatusUpdated) {
            this.timeStatusUpdated = timeStatusUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIp(@Nullable String vpnIp) {
            this.vpnIp = vpnIp;
            return this;
        }
        public GetIpsecConnectionTunnelsIpSecConnectionTunnel build() {
            final var o = new GetIpsecConnectionTunnelsIpSecConnectionTunnel();
            o.associatedVirtualCircuits = associatedVirtualCircuits;
            o.bgpSessionInfos = bgpSessionInfos;
            o.compartmentId = compartmentId;
            o.cpeIp = cpeIp;
            o.displayName = displayName;
            o.dpdMode = dpdMode;
            o.dpdTimeoutInSec = dpdTimeoutInSec;
            o.encryptionDomainConfigs = encryptionDomainConfigs;
            o.id = id;
            o.ikeVersion = ikeVersion;
            o.natTranslationEnabled = natTranslationEnabled;
            o.oracleCanInitiate = oracleCanInitiate;
            o.phaseOneDetails = phaseOneDetails;
            o.phaseTwoDetails = phaseTwoDetails;
            o.routing = routing;
            o.state = state;
            o.status = status;
            o.timeCreated = timeCreated;
            o.timeStatusUpdated = timeStatusUpdated;
            o.vpnIp = vpnIp;
            return o;
        }
    }
}
