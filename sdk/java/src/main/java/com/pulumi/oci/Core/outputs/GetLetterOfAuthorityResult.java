// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLetterOfAuthorityResult {
    /**
     * @return The name of the entity authorized by this Letter of Authority.
     * 
     */
    private @Nullable String authorizedEntityName;
    /**
     * @return The type of cross-connect fiber, termination, and optical specification.
     * 
     */
    private @Nullable String circuitType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect.
     * 
     */
    private String crossConnectId;
    /**
     * @return The address of the FastConnect location.
     * 
     */
    private @Nullable String facilityLocation;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The meet-me room port for this cross-connect.
     * 
     */
    private @Nullable String portName;
    /**
     * @return The date and time when the Letter of Authority expires, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeExpires;
    /**
     * @return The date and time the Letter of Authority was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private @Nullable String timeIssued;

    private GetLetterOfAuthorityResult() {}
    /**
     * @return The name of the entity authorized by this Letter of Authority.
     * 
     */
    public Optional<String> authorizedEntityName() {
        return Optional.ofNullable(this.authorizedEntityName);
    }
    /**
     * @return The type of cross-connect fiber, termination, and optical specification.
     * 
     */
    public Optional<String> circuitType() {
        return Optional.ofNullable(this.circuitType);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect.
     * 
     */
    public String crossConnectId() {
        return this.crossConnectId;
    }
    /**
     * @return The address of the FastConnect location.
     * 
     */
    public Optional<String> facilityLocation() {
        return Optional.ofNullable(this.facilityLocation);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The meet-me room port for this cross-connect.
     * 
     */
    public Optional<String> portName() {
        return Optional.ofNullable(this.portName);
    }
    /**
     * @return The date and time when the Letter of Authority expires, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeExpires() {
        return Optional.ofNullable(this.timeExpires);
    }
    /**
     * @return The date and time the Letter of Authority was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public Optional<String> timeIssued() {
        return Optional.ofNullable(this.timeIssued);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLetterOfAuthorityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorizedEntityName;
        private @Nullable String circuitType;
        private String crossConnectId;
        private @Nullable String facilityLocation;
        private @Nullable String id;
        private @Nullable String portName;
        private @Nullable String timeExpires;
        private @Nullable String timeIssued;
        public Builder() {}
        public Builder(GetLetterOfAuthorityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizedEntityName = defaults.authorizedEntityName;
    	      this.circuitType = defaults.circuitType;
    	      this.crossConnectId = defaults.crossConnectId;
    	      this.facilityLocation = defaults.facilityLocation;
    	      this.id = defaults.id;
    	      this.portName = defaults.portName;
    	      this.timeExpires = defaults.timeExpires;
    	      this.timeIssued = defaults.timeIssued;
        }

        @CustomType.Setter
        public Builder authorizedEntityName(@Nullable String authorizedEntityName) {
            this.authorizedEntityName = authorizedEntityName;
            return this;
        }
        @CustomType.Setter
        public Builder circuitType(@Nullable String circuitType) {
            this.circuitType = circuitType;
            return this;
        }
        @CustomType.Setter
        public Builder crossConnectId(String crossConnectId) {
            this.crossConnectId = Objects.requireNonNull(crossConnectId);
            return this;
        }
        @CustomType.Setter
        public Builder facilityLocation(@Nullable String facilityLocation) {
            this.facilityLocation = facilityLocation;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder portName(@Nullable String portName) {
            this.portName = portName;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpires(@Nullable String timeExpires) {
            this.timeExpires = timeExpires;
            return this;
        }
        @CustomType.Setter
        public Builder timeIssued(@Nullable String timeIssued) {
            this.timeIssued = timeIssued;
            return this;
        }
        public GetLetterOfAuthorityResult build() {
            final var o = new GetLetterOfAuthorityResult();
            o.authorizedEntityName = authorizedEntityName;
            o.circuitType = circuitType;
            o.crossConnectId = crossConnectId;
            o.facilityLocation = facilityLocation;
            o.id = id;
            o.portName = portName;
            o.timeExpires = timeExpires;
            o.timeIssued = timeIssued;
            return o;
        }
    }
}
