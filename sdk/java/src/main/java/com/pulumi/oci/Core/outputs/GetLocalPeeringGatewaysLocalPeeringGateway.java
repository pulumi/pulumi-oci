// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLocalPeeringGatewaysLocalPeeringGateway {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The LPG&#39;s Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
     * 
     */
    private String id;
    /**
     * @return Whether the VCN at the other end of the peering is in a different tenancy.  Example: `false`
     * 
     */
    private Boolean isCrossTenancyPeering;
    /**
     * @return The smallest aggregate CIDR that contains all the CIDR routes advertised by the VCN at the other end of the peering from this LPG. See `peerAdvertisedCidrDetails` for the individual CIDRs. The value is `null` if the LPG is not peered.  Example: `192.168.0.0/16`, or if aggregated with `172.16.0.0/24` then `128.0.0.0/1`
     * 
     */
    private String peerAdvertisedCidr;
    /**
     * @return The specific ranges of IP addresses available on or via the VCN at the other end of the peering from this LPG. The value is `null` if the LPG is not peered. You can use these as destination CIDRs for route rules to route a subnet&#39;s traffic to this LPG.  Example: [`192.168.0.0/16`, `172.16.0.0/24`]
     * 
     */
    private List<String> peerAdvertisedCidrDetails;
    /**
     * @return The OCID of the peered LPG
     * 
     */
    private String peerId;
    /**
     * @return Whether the LPG is peered with another LPG. `NEW` means the LPG has not yet been peered. `PENDING` means the peering is being established. `REVOKED` means the LPG at the other end of the peering has been deleted.
     * 
     */
    private String peeringStatus;
    /**
     * @return Additional information regarding the peering status, if applicable.
     * 
     */
    private String peeringStatusDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table the LPG is using.
     * 
     */
    private String routeTableId;
    /**
     * @return The LPG&#39;s current lifecycle state.
     * 
     */
    private String state;
    /**
     * @return The date and time the LPG was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     * 
     */
    private String vcnId;

    private GetLocalPeeringGatewaysLocalPeeringGateway() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The LPG&#39;s Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the VCN at the other end of the peering is in a different tenancy.  Example: `false`
     * 
     */
    public Boolean isCrossTenancyPeering() {
        return this.isCrossTenancyPeering;
    }
    /**
     * @return The smallest aggregate CIDR that contains all the CIDR routes advertised by the VCN at the other end of the peering from this LPG. See `peerAdvertisedCidrDetails` for the individual CIDRs. The value is `null` if the LPG is not peered.  Example: `192.168.0.0/16`, or if aggregated with `172.16.0.0/24` then `128.0.0.0/1`
     * 
     */
    public String peerAdvertisedCidr() {
        return this.peerAdvertisedCidr;
    }
    /**
     * @return The specific ranges of IP addresses available on or via the VCN at the other end of the peering from this LPG. The value is `null` if the LPG is not peered. You can use these as destination CIDRs for route rules to route a subnet&#39;s traffic to this LPG.  Example: [`192.168.0.0/16`, `172.16.0.0/24`]
     * 
     */
    public List<String> peerAdvertisedCidrDetails() {
        return this.peerAdvertisedCidrDetails;
    }
    /**
     * @return The OCID of the peered LPG
     * 
     */
    public String peerId() {
        return this.peerId;
    }
    /**
     * @return Whether the LPG is peered with another LPG. `NEW` means the LPG has not yet been peered. `PENDING` means the peering is being established. `REVOKED` means the LPG at the other end of the peering has been deleted.
     * 
     */
    public String peeringStatus() {
        return this.peeringStatus;
    }
    /**
     * @return Additional information regarding the peering status, if applicable.
     * 
     */
    public String peeringStatusDetails() {
        return this.peeringStatusDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table the LPG is using.
     * 
     */
    public String routeTableId() {
        return this.routeTableId;
    }
    /**
     * @return The LPG&#39;s current lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the LPG was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     * 
     */
    public String vcnId() {
        return this.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLocalPeeringGatewaysLocalPeeringGateway defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isCrossTenancyPeering;
        private String peerAdvertisedCidr;
        private List<String> peerAdvertisedCidrDetails;
        private String peerId;
        private String peeringStatus;
        private String peeringStatusDetails;
        private String routeTableId;
        private String state;
        private String timeCreated;
        private String vcnId;
        public Builder() {}
        public Builder(GetLocalPeeringGatewaysLocalPeeringGateway defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isCrossTenancyPeering = defaults.isCrossTenancyPeering;
    	      this.peerAdvertisedCidr = defaults.peerAdvertisedCidr;
    	      this.peerAdvertisedCidrDetails = defaults.peerAdvertisedCidrDetails;
    	      this.peerId = defaults.peerId;
    	      this.peeringStatus = defaults.peeringStatus;
    	      this.peeringStatusDetails = defaults.peeringStatusDetails;
    	      this.routeTableId = defaults.routeTableId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.vcnId = defaults.vcnId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCrossTenancyPeering(Boolean isCrossTenancyPeering) {
            if (isCrossTenancyPeering == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "isCrossTenancyPeering");
            }
            this.isCrossTenancyPeering = isCrossTenancyPeering;
            return this;
        }
        @CustomType.Setter
        public Builder peerAdvertisedCidr(String peerAdvertisedCidr) {
            if (peerAdvertisedCidr == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "peerAdvertisedCidr");
            }
            this.peerAdvertisedCidr = peerAdvertisedCidr;
            return this;
        }
        @CustomType.Setter
        public Builder peerAdvertisedCidrDetails(List<String> peerAdvertisedCidrDetails) {
            if (peerAdvertisedCidrDetails == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "peerAdvertisedCidrDetails");
            }
            this.peerAdvertisedCidrDetails = peerAdvertisedCidrDetails;
            return this;
        }
        public Builder peerAdvertisedCidrDetails(String... peerAdvertisedCidrDetails) {
            return peerAdvertisedCidrDetails(List.of(peerAdvertisedCidrDetails));
        }
        @CustomType.Setter
        public Builder peerId(String peerId) {
            if (peerId == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "peerId");
            }
            this.peerId = peerId;
            return this;
        }
        @CustomType.Setter
        public Builder peeringStatus(String peeringStatus) {
            if (peeringStatus == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "peeringStatus");
            }
            this.peeringStatus = peeringStatus;
            return this;
        }
        @CustomType.Setter
        public Builder peeringStatusDetails(String peeringStatusDetails) {
            if (peeringStatusDetails == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "peeringStatusDetails");
            }
            this.peeringStatusDetails = peeringStatusDetails;
            return this;
        }
        @CustomType.Setter
        public Builder routeTableId(String routeTableId) {
            if (routeTableId == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "routeTableId");
            }
            this.routeTableId = routeTableId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder vcnId(String vcnId) {
            if (vcnId == null) {
              throw new MissingRequiredPropertyException("GetLocalPeeringGatewaysLocalPeeringGateway", "vcnId");
            }
            this.vcnId = vcnId;
            return this;
        }
        public GetLocalPeeringGatewaysLocalPeeringGateway build() {
            final var _resultValue = new GetLocalPeeringGatewaysLocalPeeringGateway();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isCrossTenancyPeering = isCrossTenancyPeering;
            _resultValue.peerAdvertisedCidr = peerAdvertisedCidr;
            _resultValue.peerAdvertisedCidrDetails = peerAdvertisedCidrDetails;
            _resultValue.peerId = peerId;
            _resultValue.peeringStatus = peeringStatus;
            _resultValue.peeringStatusDetails = peeringStatusDetails;
            _resultValue.routeTableId = routeTableId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.vcnId = vcnId;
            return _resultValue;
        }
    }
}
