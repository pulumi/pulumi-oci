// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkSecurityGroupSecurityRulesSecurityRule {
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    private String description;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    private String destination;
    /**
     * @return Type of destination for the rule. Required if `direction` = `EGRESS`.
     * 
     */
    private String destinationType;
    /**
     * @return Direction of the security rule. Set to `EGRESS` for rules that allow outbound IP packets, or `INGRESS` for rules that allow inbound IP packets.
     * 
     */
    private String direction;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions;
    /**
     * @return An Oracle-assigned identifier for the security rule. You specify this ID when you want to update or delete the rule.  Example: `04ABEC`
     * 
     */
    private String id;
    /**
     * @return Whether the rule is valid. The value is `True` when the rule is first created. If the rule&#39;s `source` or `destination` is a network security group, the value changes to `False` if that network security group is deleted.
     * 
     */
    private Boolean isValid;
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    private String protocol;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    private String source;
    /**
     * @return Type of source for the rule. Required if `direction` = `INGRESS`.
     * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * * `NETWORK_SECURITY_GROUP`: If the rule&#39;s `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
     * 
     */
    private String sourceType;
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    private Boolean stateless;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions;
    /**
     * @return The date and time the security rule was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions;

    private GetNetworkSecurityGroupSecurityRulesSecurityRule() {}
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Type of destination for the rule. Required if `direction` = `EGRESS`.
     * 
     */
    public String destinationType() {
        return this.destinationType;
    }
    /**
     * @return Direction of the security rule. Set to `EGRESS` for rules that allow outbound IP packets, or `INGRESS` for rules that allow inbound IP packets.
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions() {
        return this.icmpOptions;
    }
    /**
     * @return An Oracle-assigned identifier for the security rule. You specify this ID when you want to update or delete the rule.  Example: `04ABEC`
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the rule is valid. The value is `True` when the rule is first created. If the rule&#39;s `source` or `destination` is a network security group, the value changes to `False` if that network security group is deleted.
     * 
     */
    public Boolean isValid() {
        return this.isValid;
    }
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Type of source for the rule. Required if `direction` = `INGRESS`.
     * * `CIDR_BLOCK`: If the rule&#39;s `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * * `NETWORK_SECURITY_GROUP`: If the rule&#39;s `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Boolean stateless() {
        return this.stateless;
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions() {
        return this.tcpOptions;
    }
    /**
     * @return The date and time the security rule was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions() {
        return this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkSecurityGroupSecurityRulesSecurityRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String destination;
        private String destinationType;
        private String direction;
        private List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions;
        private String id;
        private Boolean isValid;
        private String protocol;
        private String source;
        private String sourceType;
        private Boolean stateless;
        private List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions;
        private String timeCreated;
        private List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions;
        public Builder() {}
        public Builder(GetNetworkSecurityGroupSecurityRulesSecurityRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.destinationType = defaults.destinationType;
    	      this.direction = defaults.direction;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.id = defaults.id;
    	      this.isValid = defaults.isValid;
    	      this.protocol = defaults.protocol;
    	      this.source = defaults.source;
    	      this.sourceType = defaults.sourceType;
    	      this.stateless = defaults.stateless;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.timeCreated = defaults.timeCreated;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            if (destination == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "destination");
            }
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder destinationType(String destinationType) {
            if (destinationType == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "destinationType");
            }
            this.destinationType = destinationType;
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            if (direction == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "direction");
            }
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions) {
            if (icmpOptions == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "icmpOptions");
            }
            this.icmpOptions = icmpOptions;
            return this;
        }
        public Builder icmpOptions(GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isValid(Boolean isValid) {
            if (isValid == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "isValid");
            }
            this.isValid = isValid;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder stateless(Boolean stateless) {
            if (stateless == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "stateless");
            }
            this.stateless = stateless;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions) {
            if (tcpOptions == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "tcpOptions");
            }
            this.tcpOptions = tcpOptions;
            return this;
        }
        public Builder tcpOptions(GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder udpOptions(List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions) {
            if (udpOptions == null) {
              throw new MissingRequiredPropertyException("GetNetworkSecurityGroupSecurityRulesSecurityRule", "udpOptions");
            }
            this.udpOptions = udpOptions;
            return this;
        }
        public Builder udpOptions(GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }
        public GetNetworkSecurityGroupSecurityRulesSecurityRule build() {
            final var _resultValue = new GetNetworkSecurityGroupSecurityRulesSecurityRule();
            _resultValue.description = description;
            _resultValue.destination = destination;
            _resultValue.destinationType = destinationType;
            _resultValue.direction = direction;
            _resultValue.icmpOptions = icmpOptions;
            _resultValue.id = id;
            _resultValue.isValid = isValid;
            _resultValue.protocol = protocol;
            _resultValue.source = source;
            _resultValue.sourceType = sourceType;
            _resultValue.stateless = stateless;
            _resultValue.tcpOptions = tcpOptions;
            _resultValue.timeCreated = timeCreated;
            _resultValue.udpOptions = udpOptions;
            return _resultValue;
        }
    }
}
