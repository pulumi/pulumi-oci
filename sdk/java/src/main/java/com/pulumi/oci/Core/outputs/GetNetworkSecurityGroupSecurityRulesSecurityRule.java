// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkSecurityGroupSecurityRulesSecurityRule {
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    private @Nullable String description;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    private @Nullable String destination;
    /**
     * @return Type of destination for the rule. Required if `direction` = `EGRESS`.
     * 
     */
    private @Nullable String destinationType;
    /**
     * @return Direction of the security rule. Set to `EGRESS` for rules that allow outbound IP packets, or `INGRESS` for rules that allow inbound IP packets.
     * 
     */
    private @Nullable String direction;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private @Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions;
    /**
     * @return An Oracle-assigned identifier for the security rule. You specify this ID when you want to update or delete the rule.  Example: `04ABEC`
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the rule is valid. The value is `True` when the rule is first created. If the rule&#39;s `source` or `destination` is a network security group, the value changes to `False` if that network security group is deleted.
     * 
     */
    private @Nullable Boolean isValid;
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    private @Nullable String source;
    /**
     * @return Type of source for the rule. Required if `direction` = `INGRESS`.
     * 
     */
    private @Nullable String sourceType;
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    private @Nullable Boolean stateless;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions;
    /**
     * @return The date and time the security rule was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions;

    private GetNetworkSecurityGroupSecurityRulesSecurityRule() {}
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     */
    public Optional<String> destination() {
        return Optional.ofNullable(this.destination);
    }
    /**
     * @return Type of destination for the rule. Required if `direction` = `EGRESS`.
     * 
     */
    public Optional<String> destinationType() {
        return Optional.ofNullable(this.destinationType);
    }
    /**
     * @return Direction of the security rule. Set to `EGRESS` for rules that allow outbound IP packets, or `INGRESS` for rules that allow inbound IP packets.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions() {
        return this.icmpOptions == null ? List.of() : this.icmpOptions;
    }
    /**
     * @return An Oracle-assigned identifier for the security rule. You specify this ID when you want to update or delete the rule.  Example: `04ABEC`
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the rule is valid. The value is `True` when the rule is first created. If the rule&#39;s `source` or `destination` is a network security group, the value changes to `False` if that network security group is deleted.
     * 
     */
    public Optional<Boolean> isValid() {
        return Optional.ofNullable(this.isValid);
    }
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return Type of source for the rule. Required if `direction` = `INGRESS`.
     * 
     */
    public Optional<String> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Optional<Boolean> stateless() {
        return Optional.ofNullable(this.stateless);
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions() {
        return this.tcpOptions == null ? List.of() : this.tcpOptions;
    }
    /**
     * @return The date and time the security rule was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions() {
        return this.udpOptions == null ? List.of() : this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkSecurityGroupSecurityRulesSecurityRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String destination;
        private @Nullable String destinationType;
        private @Nullable String direction;
        private @Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions;
        private @Nullable String id;
        private @Nullable Boolean isValid;
        private @Nullable String protocol;
        private @Nullable String source;
        private @Nullable String sourceType;
        private @Nullable Boolean stateless;
        private @Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions;
        private @Nullable String timeCreated;
        private @Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions;
        public Builder() {}
        public Builder(GetNetworkSecurityGroupSecurityRulesSecurityRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.destinationType = defaults.destinationType;
    	      this.direction = defaults.direction;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.id = defaults.id;
    	      this.isValid = defaults.isValid;
    	      this.protocol = defaults.protocol;
    	      this.source = defaults.source;
    	      this.sourceType = defaults.sourceType;
    	      this.stateless = defaults.stateless;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.timeCreated = defaults.timeCreated;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destination(@Nullable String destination) {
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder destinationType(@Nullable String destinationType) {
            this.destinationType = destinationType;
            return this;
        }
        @CustomType.Setter
        public Builder direction(@Nullable String direction) {
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(@Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption> icmpOptions) {
            this.icmpOptions = icmpOptions;
            return this;
        }
        public Builder icmpOptions(GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isValid(@Nullable Boolean isValid) {
            this.isValid = isValid;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(@Nullable String sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder stateless(@Nullable Boolean stateless) {
            this.stateless = stateless;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(@Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption> tcpOptions) {
            this.tcpOptions = tcpOptions;
            return this;
        }
        public Builder tcpOptions(GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder udpOptions(@Nullable List<GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption> udpOptions) {
            this.udpOptions = udpOptions;
            return this;
        }
        public Builder udpOptions(GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }
        public GetNetworkSecurityGroupSecurityRulesSecurityRule build() {
            final var o = new GetNetworkSecurityGroupSecurityRulesSecurityRule();
            o.description = description;
            o.destination = destination;
            o.destinationType = destinationType;
            o.direction = direction;
            o.icmpOptions = icmpOptions;
            o.id = id;
            o.isValid = isValid;
            o.protocol = protocol;
            o.source = source;
            o.sourceType = sourceType;
            o.stateless = stateless;
            o.tcpOptions = tcpOptions;
            o.timeCreated = timeCreated;
            o.udpOptions = udpOptions;
            return o;
        }
    }
}
