// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleUdpOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityListsSecurityListIngressSecurityRule {
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    private @Nullable String description;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private @Nullable List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions;
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    private @Nullable String source;
    /**
     * @return Type of source for the rule. The default is `CIDR_BLOCK`.
     * 
     */
    private @Nullable String sourceType;
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    private @Nullable Boolean stateless;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private @Nullable List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private @Nullable List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions;

    private GetSecurityListsSecurityListIngressSecurityRule() {}
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions() {
        return this.icmpOptions == null ? List.of() : this.icmpOptions;
    }
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return Type of source for the rule. The default is `CIDR_BLOCK`.
     * 
     */
    public Optional<String> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Optional<Boolean> stateless() {
        return Optional.ofNullable(this.stateless);
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions() {
        return this.tcpOptions == null ? List.of() : this.tcpOptions;
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions() {
        return this.udpOptions == null ? List.of() : this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityListsSecurityListIngressSecurityRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions;
        private @Nullable String protocol;
        private @Nullable String source;
        private @Nullable String sourceType;
        private @Nullable Boolean stateless;
        private @Nullable List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions;
        private @Nullable List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions;
        public Builder() {}
        public Builder(GetSecurityListsSecurityListIngressSecurityRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.source = defaults.source;
    	      this.sourceType = defaults.sourceType;
    	      this.stateless = defaults.stateless;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(@Nullable List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions) {
            this.icmpOptions = icmpOptions;
            return this;
        }
        public Builder icmpOptions(GetSecurityListsSecurityListIngressSecurityRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(@Nullable String sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder stateless(@Nullable Boolean stateless) {
            this.stateless = stateless;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(@Nullable List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions) {
            this.tcpOptions = tcpOptions;
            return this;
        }
        public Builder tcpOptions(GetSecurityListsSecurityListIngressSecurityRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        @CustomType.Setter
        public Builder udpOptions(@Nullable List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions) {
            this.udpOptions = udpOptions;
            return this;
        }
        public Builder udpOptions(GetSecurityListsSecurityListIngressSecurityRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }
        public GetSecurityListsSecurityListIngressSecurityRule build() {
            final var o = new GetSecurityListsSecurityListIngressSecurityRule();
            o.description = description;
            o.icmpOptions = icmpOptions;
            o.protocol = protocol;
            o.source = source;
            o.sourceType = sourceType;
            o.stateless = stateless;
            o.tcpOptions = tcpOptions;
            o.udpOptions = udpOptions;
            return o;
        }
    }
}
