// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleIcmpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleTcpOption;
import com.pulumi.oci.Core.outputs.GetSecurityListsSecurityListIngressSecurityRuleUdpOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityListsSecurityListIngressSecurityRule {
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    private String description;
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    private List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions;
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    private String protocol;
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    private String source;
    /**
     * @return Type of source for the rule. The default is `CIDR_BLOCK`.
     * 
     */
    private String sourceType;
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    private Boolean stateless;
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions;
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    private List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions;

    private GetSecurityListsSecurityListIngressSecurityRule() {}
    /**
     * @return An optional description of your choice for the rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions() {
        return this.icmpOptions;
    }
    /**
     * @return The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Type of source for the rule. The default is `CIDR_BLOCK`.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Boolean stateless() {
        return this.stateless;
    }
    /**
     * @return Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions() {
        return this.tcpOptions;
    }
    /**
     * @return Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * * The following 2 attributes specify an inclusive range of allowed destination ports. Use the same number for the min and max to indicate a single port. Defaults to all ports if not specified.
     * 
     */
    public List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions() {
        return this.udpOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityListsSecurityListIngressSecurityRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions;
        private String protocol;
        private String source;
        private String sourceType;
        private Boolean stateless;
        private List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions;
        private List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions;
        public Builder() {}
        public Builder(GetSecurityListsSecurityListIngressSecurityRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.source = defaults.source;
    	      this.sourceType = defaults.sourceType;
    	      this.stateless = defaults.stateless;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(List<GetSecurityListsSecurityListIngressSecurityRuleIcmpOption> icmpOptions) {
            this.icmpOptions = Objects.requireNonNull(icmpOptions);
            return this;
        }
        public Builder icmpOptions(GetSecurityListsSecurityListIngressSecurityRuleIcmpOption... icmpOptions) {
            return icmpOptions(List.of(icmpOptions));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }
        @CustomType.Setter
        public Builder stateless(Boolean stateless) {
            this.stateless = Objects.requireNonNull(stateless);
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(List<GetSecurityListsSecurityListIngressSecurityRuleTcpOption> tcpOptions) {
            this.tcpOptions = Objects.requireNonNull(tcpOptions);
            return this;
        }
        public Builder tcpOptions(GetSecurityListsSecurityListIngressSecurityRuleTcpOption... tcpOptions) {
            return tcpOptions(List.of(tcpOptions));
        }
        @CustomType.Setter
        public Builder udpOptions(List<GetSecurityListsSecurityListIngressSecurityRuleUdpOption> udpOptions) {
            this.udpOptions = Objects.requireNonNull(udpOptions);
            return this;
        }
        public Builder udpOptions(GetSecurityListsSecurityListIngressSecurityRuleUdpOption... udpOptions) {
            return udpOptions(List.of(udpOptions));
        }
        public GetSecurityListsSecurityListIngressSecurityRule build() {
            final var _resultValue = new GetSecurityListsSecurityListIngressSecurityRule();
            _resultValue.description = description;
            _resultValue.icmpOptions = icmpOptions;
            _resultValue.protocol = protocol;
            _resultValue.source = source;
            _resultValue.sourceType = sourceType;
            _resultValue.stateless = stateless;
            _resultValue.tcpOptions = tcpOptions;
            _resultValue.udpOptions = udpOptions;
            return _resultValue;
        }
    }
}
