// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetShapeShapeMaxVnicAttachmentOption;
import com.pulumi.oci.Core.outputs.GetShapeShapeMemoryOption;
import com.pulumi.oci.Core.outputs.GetShapeShapeNetworkingBandwidthOption;
import com.pulumi.oci.Core.outputs.GetShapeShapeOcpuOption;
import com.pulumi.oci.Core.outputs.GetShapeShapePlatformConfigOption;
import com.pulumi.oci.Core.outputs.GetShapeShapeRecommendedAlternative;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetShapeShape {
    private List<String> baselineOcpuUtilizations;
    private String billingType;
    private String gpuDescription;
    private Integer gpus;
    private Boolean isBilledForStoppedInstance;
    private Boolean isFlexible;
    private Boolean isLiveMigrationSupported;
    private Boolean isSubcore;
    private String localDiskDescription;
    private Integer localDisks;
    private Double localDisksTotalSizeInGbs;
    private List<GetShapeShapeMaxVnicAttachmentOption> maxVnicAttachmentOptions;
    private Integer maxVnicAttachments;
    private Double memoryInGbs;
    private List<GetShapeShapeMemoryOption> memoryOptions;
    private Double minTotalBaselineOcpusRequired;
    private String name;
    private Integer networkPorts;
    private Double networkingBandwidthInGbps;
    private List<GetShapeShapeNetworkingBandwidthOption> networkingBandwidthOptions;
    private List<GetShapeShapeOcpuOption> ocpuOptions;
    private Double ocpus;
    private List<GetShapeShapePlatformConfigOption> platformConfigOptions;
    private String processorDescription;
    private List<String> quotaNames;
    private Integer rdmaBandwidthInGbps;
    private Integer rdmaPorts;
    private List<GetShapeShapeRecommendedAlternative> recommendedAlternatives;
    private List<String> resizeCompatibleShapes;

    private GetShapeShape() {}
    public List<String> baselineOcpuUtilizations() {
        return this.baselineOcpuUtilizations;
    }
    public String billingType() {
        return this.billingType;
    }
    public String gpuDescription() {
        return this.gpuDescription;
    }
    public Integer gpus() {
        return this.gpus;
    }
    public Boolean isBilledForStoppedInstance() {
        return this.isBilledForStoppedInstance;
    }
    public Boolean isFlexible() {
        return this.isFlexible;
    }
    public Boolean isLiveMigrationSupported() {
        return this.isLiveMigrationSupported;
    }
    public Boolean isSubcore() {
        return this.isSubcore;
    }
    public String localDiskDescription() {
        return this.localDiskDescription;
    }
    public Integer localDisks() {
        return this.localDisks;
    }
    public Double localDisksTotalSizeInGbs() {
        return this.localDisksTotalSizeInGbs;
    }
    public List<GetShapeShapeMaxVnicAttachmentOption> maxVnicAttachmentOptions() {
        return this.maxVnicAttachmentOptions;
    }
    public Integer maxVnicAttachments() {
        return this.maxVnicAttachments;
    }
    public Double memoryInGbs() {
        return this.memoryInGbs;
    }
    public List<GetShapeShapeMemoryOption> memoryOptions() {
        return this.memoryOptions;
    }
    public Double minTotalBaselineOcpusRequired() {
        return this.minTotalBaselineOcpusRequired;
    }
    public String name() {
        return this.name;
    }
    public Integer networkPorts() {
        return this.networkPorts;
    }
    public Double networkingBandwidthInGbps() {
        return this.networkingBandwidthInGbps;
    }
    public List<GetShapeShapeNetworkingBandwidthOption> networkingBandwidthOptions() {
        return this.networkingBandwidthOptions;
    }
    public List<GetShapeShapeOcpuOption> ocpuOptions() {
        return this.ocpuOptions;
    }
    public Double ocpus() {
        return this.ocpus;
    }
    public List<GetShapeShapePlatformConfigOption> platformConfigOptions() {
        return this.platformConfigOptions;
    }
    public String processorDescription() {
        return this.processorDescription;
    }
    public List<String> quotaNames() {
        return this.quotaNames;
    }
    public Integer rdmaBandwidthInGbps() {
        return this.rdmaBandwidthInGbps;
    }
    public Integer rdmaPorts() {
        return this.rdmaPorts;
    }
    public List<GetShapeShapeRecommendedAlternative> recommendedAlternatives() {
        return this.recommendedAlternatives;
    }
    public List<String> resizeCompatibleShapes() {
        return this.resizeCompatibleShapes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetShapeShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> baselineOcpuUtilizations;
        private String billingType;
        private String gpuDescription;
        private Integer gpus;
        private Boolean isBilledForStoppedInstance;
        private Boolean isFlexible;
        private Boolean isLiveMigrationSupported;
        private Boolean isSubcore;
        private String localDiskDescription;
        private Integer localDisks;
        private Double localDisksTotalSizeInGbs;
        private List<GetShapeShapeMaxVnicAttachmentOption> maxVnicAttachmentOptions;
        private Integer maxVnicAttachments;
        private Double memoryInGbs;
        private List<GetShapeShapeMemoryOption> memoryOptions;
        private Double minTotalBaselineOcpusRequired;
        private String name;
        private Integer networkPorts;
        private Double networkingBandwidthInGbps;
        private List<GetShapeShapeNetworkingBandwidthOption> networkingBandwidthOptions;
        private List<GetShapeShapeOcpuOption> ocpuOptions;
        private Double ocpus;
        private List<GetShapeShapePlatformConfigOption> platformConfigOptions;
        private String processorDescription;
        private List<String> quotaNames;
        private Integer rdmaBandwidthInGbps;
        private Integer rdmaPorts;
        private List<GetShapeShapeRecommendedAlternative> recommendedAlternatives;
        private List<String> resizeCompatibleShapes;
        public Builder() {}
        public Builder(GetShapeShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baselineOcpuUtilizations = defaults.baselineOcpuUtilizations;
    	      this.billingType = defaults.billingType;
    	      this.gpuDescription = defaults.gpuDescription;
    	      this.gpus = defaults.gpus;
    	      this.isBilledForStoppedInstance = defaults.isBilledForStoppedInstance;
    	      this.isFlexible = defaults.isFlexible;
    	      this.isLiveMigrationSupported = defaults.isLiveMigrationSupported;
    	      this.isSubcore = defaults.isSubcore;
    	      this.localDiskDescription = defaults.localDiskDescription;
    	      this.localDisks = defaults.localDisks;
    	      this.localDisksTotalSizeInGbs = defaults.localDisksTotalSizeInGbs;
    	      this.maxVnicAttachmentOptions = defaults.maxVnicAttachmentOptions;
    	      this.maxVnicAttachments = defaults.maxVnicAttachments;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.memoryOptions = defaults.memoryOptions;
    	      this.minTotalBaselineOcpusRequired = defaults.minTotalBaselineOcpusRequired;
    	      this.name = defaults.name;
    	      this.networkPorts = defaults.networkPorts;
    	      this.networkingBandwidthInGbps = defaults.networkingBandwidthInGbps;
    	      this.networkingBandwidthOptions = defaults.networkingBandwidthOptions;
    	      this.ocpuOptions = defaults.ocpuOptions;
    	      this.ocpus = defaults.ocpus;
    	      this.platformConfigOptions = defaults.platformConfigOptions;
    	      this.processorDescription = defaults.processorDescription;
    	      this.quotaNames = defaults.quotaNames;
    	      this.rdmaBandwidthInGbps = defaults.rdmaBandwidthInGbps;
    	      this.rdmaPorts = defaults.rdmaPorts;
    	      this.recommendedAlternatives = defaults.recommendedAlternatives;
    	      this.resizeCompatibleShapes = defaults.resizeCompatibleShapes;
        }

        @CustomType.Setter
        public Builder baselineOcpuUtilizations(List<String> baselineOcpuUtilizations) {
            if (baselineOcpuUtilizations == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "baselineOcpuUtilizations");
            }
            this.baselineOcpuUtilizations = baselineOcpuUtilizations;
            return this;
        }
        public Builder baselineOcpuUtilizations(String... baselineOcpuUtilizations) {
            return baselineOcpuUtilizations(List.of(baselineOcpuUtilizations));
        }
        @CustomType.Setter
        public Builder billingType(String billingType) {
            if (billingType == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "billingType");
            }
            this.billingType = billingType;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDescription(String gpuDescription) {
            if (gpuDescription == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "gpuDescription");
            }
            this.gpuDescription = gpuDescription;
            return this;
        }
        @CustomType.Setter
        public Builder gpus(Integer gpus) {
            if (gpus == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "gpus");
            }
            this.gpus = gpus;
            return this;
        }
        @CustomType.Setter
        public Builder isBilledForStoppedInstance(Boolean isBilledForStoppedInstance) {
            if (isBilledForStoppedInstance == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "isBilledForStoppedInstance");
            }
            this.isBilledForStoppedInstance = isBilledForStoppedInstance;
            return this;
        }
        @CustomType.Setter
        public Builder isFlexible(Boolean isFlexible) {
            if (isFlexible == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "isFlexible");
            }
            this.isFlexible = isFlexible;
            return this;
        }
        @CustomType.Setter
        public Builder isLiveMigrationSupported(Boolean isLiveMigrationSupported) {
            if (isLiveMigrationSupported == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "isLiveMigrationSupported");
            }
            this.isLiveMigrationSupported = isLiveMigrationSupported;
            return this;
        }
        @CustomType.Setter
        public Builder isSubcore(Boolean isSubcore) {
            if (isSubcore == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "isSubcore");
            }
            this.isSubcore = isSubcore;
            return this;
        }
        @CustomType.Setter
        public Builder localDiskDescription(String localDiskDescription) {
            if (localDiskDescription == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "localDiskDescription");
            }
            this.localDiskDescription = localDiskDescription;
            return this;
        }
        @CustomType.Setter
        public Builder localDisks(Integer localDisks) {
            if (localDisks == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "localDisks");
            }
            this.localDisks = localDisks;
            return this;
        }
        @CustomType.Setter
        public Builder localDisksTotalSizeInGbs(Double localDisksTotalSizeInGbs) {
            if (localDisksTotalSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "localDisksTotalSizeInGbs");
            }
            this.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxVnicAttachmentOptions(List<GetShapeShapeMaxVnicAttachmentOption> maxVnicAttachmentOptions) {
            if (maxVnicAttachmentOptions == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "maxVnicAttachmentOptions");
            }
            this.maxVnicAttachmentOptions = maxVnicAttachmentOptions;
            return this;
        }
        public Builder maxVnicAttachmentOptions(GetShapeShapeMaxVnicAttachmentOption... maxVnicAttachmentOptions) {
            return maxVnicAttachmentOptions(List.of(maxVnicAttachmentOptions));
        }
        @CustomType.Setter
        public Builder maxVnicAttachments(Integer maxVnicAttachments) {
            if (maxVnicAttachments == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "maxVnicAttachments");
            }
            this.maxVnicAttachments = maxVnicAttachments;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(Double memoryInGbs) {
            if (memoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "memoryInGbs");
            }
            this.memoryInGbs = memoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder memoryOptions(List<GetShapeShapeMemoryOption> memoryOptions) {
            if (memoryOptions == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "memoryOptions");
            }
            this.memoryOptions = memoryOptions;
            return this;
        }
        public Builder memoryOptions(GetShapeShapeMemoryOption... memoryOptions) {
            return memoryOptions(List.of(memoryOptions));
        }
        @CustomType.Setter
        public Builder minTotalBaselineOcpusRequired(Double minTotalBaselineOcpusRequired) {
            if (minTotalBaselineOcpusRequired == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "minTotalBaselineOcpusRequired");
            }
            this.minTotalBaselineOcpusRequired = minTotalBaselineOcpusRequired;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkPorts(Integer networkPorts) {
            if (networkPorts == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "networkPorts");
            }
            this.networkPorts = networkPorts;
            return this;
        }
        @CustomType.Setter
        public Builder networkingBandwidthInGbps(Double networkingBandwidthInGbps) {
            if (networkingBandwidthInGbps == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "networkingBandwidthInGbps");
            }
            this.networkingBandwidthInGbps = networkingBandwidthInGbps;
            return this;
        }
        @CustomType.Setter
        public Builder networkingBandwidthOptions(List<GetShapeShapeNetworkingBandwidthOption> networkingBandwidthOptions) {
            if (networkingBandwidthOptions == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "networkingBandwidthOptions");
            }
            this.networkingBandwidthOptions = networkingBandwidthOptions;
            return this;
        }
        public Builder networkingBandwidthOptions(GetShapeShapeNetworkingBandwidthOption... networkingBandwidthOptions) {
            return networkingBandwidthOptions(List.of(networkingBandwidthOptions));
        }
        @CustomType.Setter
        public Builder ocpuOptions(List<GetShapeShapeOcpuOption> ocpuOptions) {
            if (ocpuOptions == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "ocpuOptions");
            }
            this.ocpuOptions = ocpuOptions;
            return this;
        }
        public Builder ocpuOptions(GetShapeShapeOcpuOption... ocpuOptions) {
            return ocpuOptions(List.of(ocpuOptions));
        }
        @CustomType.Setter
        public Builder ocpus(Double ocpus) {
            if (ocpus == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "ocpus");
            }
            this.ocpus = ocpus;
            return this;
        }
        @CustomType.Setter
        public Builder platformConfigOptions(List<GetShapeShapePlatformConfigOption> platformConfigOptions) {
            if (platformConfigOptions == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "platformConfigOptions");
            }
            this.platformConfigOptions = platformConfigOptions;
            return this;
        }
        public Builder platformConfigOptions(GetShapeShapePlatformConfigOption... platformConfigOptions) {
            return platformConfigOptions(List.of(platformConfigOptions));
        }
        @CustomType.Setter
        public Builder processorDescription(String processorDescription) {
            if (processorDescription == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "processorDescription");
            }
            this.processorDescription = processorDescription;
            return this;
        }
        @CustomType.Setter
        public Builder quotaNames(List<String> quotaNames) {
            if (quotaNames == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "quotaNames");
            }
            this.quotaNames = quotaNames;
            return this;
        }
        public Builder quotaNames(String... quotaNames) {
            return quotaNames(List.of(quotaNames));
        }
        @CustomType.Setter
        public Builder rdmaBandwidthInGbps(Integer rdmaBandwidthInGbps) {
            if (rdmaBandwidthInGbps == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "rdmaBandwidthInGbps");
            }
            this.rdmaBandwidthInGbps = rdmaBandwidthInGbps;
            return this;
        }
        @CustomType.Setter
        public Builder rdmaPorts(Integer rdmaPorts) {
            if (rdmaPorts == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "rdmaPorts");
            }
            this.rdmaPorts = rdmaPorts;
            return this;
        }
        @CustomType.Setter
        public Builder recommendedAlternatives(List<GetShapeShapeRecommendedAlternative> recommendedAlternatives) {
            if (recommendedAlternatives == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "recommendedAlternatives");
            }
            this.recommendedAlternatives = recommendedAlternatives;
            return this;
        }
        public Builder recommendedAlternatives(GetShapeShapeRecommendedAlternative... recommendedAlternatives) {
            return recommendedAlternatives(List.of(recommendedAlternatives));
        }
        @CustomType.Setter
        public Builder resizeCompatibleShapes(List<String> resizeCompatibleShapes) {
            if (resizeCompatibleShapes == null) {
              throw new MissingRequiredPropertyException("GetShapeShape", "resizeCompatibleShapes");
            }
            this.resizeCompatibleShapes = resizeCompatibleShapes;
            return this;
        }
        public Builder resizeCompatibleShapes(String... resizeCompatibleShapes) {
            return resizeCompatibleShapes(List.of(resizeCompatibleShapes));
        }
        public GetShapeShape build() {
            final var _resultValue = new GetShapeShape();
            _resultValue.baselineOcpuUtilizations = baselineOcpuUtilizations;
            _resultValue.billingType = billingType;
            _resultValue.gpuDescription = gpuDescription;
            _resultValue.gpus = gpus;
            _resultValue.isBilledForStoppedInstance = isBilledForStoppedInstance;
            _resultValue.isFlexible = isFlexible;
            _resultValue.isLiveMigrationSupported = isLiveMigrationSupported;
            _resultValue.isSubcore = isSubcore;
            _resultValue.localDiskDescription = localDiskDescription;
            _resultValue.localDisks = localDisks;
            _resultValue.localDisksTotalSizeInGbs = localDisksTotalSizeInGbs;
            _resultValue.maxVnicAttachmentOptions = maxVnicAttachmentOptions;
            _resultValue.maxVnicAttachments = maxVnicAttachments;
            _resultValue.memoryInGbs = memoryInGbs;
            _resultValue.memoryOptions = memoryOptions;
            _resultValue.minTotalBaselineOcpusRequired = minTotalBaselineOcpusRequired;
            _resultValue.name = name;
            _resultValue.networkPorts = networkPorts;
            _resultValue.networkingBandwidthInGbps = networkingBandwidthInGbps;
            _resultValue.networkingBandwidthOptions = networkingBandwidthOptions;
            _resultValue.ocpuOptions = ocpuOptions;
            _resultValue.ocpus = ocpus;
            _resultValue.platformConfigOptions = platformConfigOptions;
            _resultValue.processorDescription = processorDescription;
            _resultValue.quotaNames = quotaNames;
            _resultValue.rdmaBandwidthInGbps = rdmaBandwidthInGbps;
            _resultValue.rdmaPorts = rdmaPorts;
            _resultValue.recommendedAlternatives = recommendedAlternatives;
            _resultValue.resizeCompatibleShapes = resizeCompatibleShapes;
            return _resultValue;
        }
    }
}
