// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetVirtualCircuitPublicPrefixesFilter;
import com.pulumi.oci.Core.outputs.GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefix;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualCircuitPublicPrefixesResult {
    private @Nullable List<GetVirtualCircuitPublicPrefixesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Oracle must verify that the customer owns the public IP prefix before traffic for that prefix can flow across the virtual circuit. Verification can take a few business days. `IN_PROGRESS` means Oracle is verifying the prefix. `COMPLETED` means verification succeeded. `FAILED` means verification failed and traffic for this prefix will not flow across the connection.
     * 
     */
    private @Nullable String verificationState;
    private String virtualCircuitId;
    /**
     * @return The list of virtual_circuit_public_prefixes.
     * 
     */
    private List<GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefix> virtualCircuitPublicPrefixes;

    private GetVirtualCircuitPublicPrefixesResult() {}
    public List<GetVirtualCircuitPublicPrefixesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Oracle must verify that the customer owns the public IP prefix before traffic for that prefix can flow across the virtual circuit. Verification can take a few business days. `IN_PROGRESS` means Oracle is verifying the prefix. `COMPLETED` means verification succeeded. `FAILED` means verification failed and traffic for this prefix will not flow across the connection.
     * 
     */
    public Optional<String> verificationState() {
        return Optional.ofNullable(this.verificationState);
    }
    public String virtualCircuitId() {
        return this.virtualCircuitId;
    }
    /**
     * @return The list of virtual_circuit_public_prefixes.
     * 
     */
    public List<GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefix> virtualCircuitPublicPrefixes() {
        return this.virtualCircuitPublicPrefixes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualCircuitPublicPrefixesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetVirtualCircuitPublicPrefixesFilter> filters;
        private String id;
        private @Nullable String verificationState;
        private String virtualCircuitId;
        private List<GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefix> virtualCircuitPublicPrefixes;
        public Builder() {}
        public Builder(GetVirtualCircuitPublicPrefixesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.verificationState = defaults.verificationState;
    	      this.virtualCircuitId = defaults.virtualCircuitId;
    	      this.virtualCircuitPublicPrefixes = defaults.virtualCircuitPublicPrefixes;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetVirtualCircuitPublicPrefixesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetVirtualCircuitPublicPrefixesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder verificationState(@Nullable String verificationState) {
            this.verificationState = verificationState;
            return this;
        }
        @CustomType.Setter
        public Builder virtualCircuitId(String virtualCircuitId) {
            this.virtualCircuitId = Objects.requireNonNull(virtualCircuitId);
            return this;
        }
        @CustomType.Setter
        public Builder virtualCircuitPublicPrefixes(List<GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefix> virtualCircuitPublicPrefixes) {
            this.virtualCircuitPublicPrefixes = Objects.requireNonNull(virtualCircuitPublicPrefixes);
            return this;
        }
        public Builder virtualCircuitPublicPrefixes(GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefix... virtualCircuitPublicPrefixes) {
            return virtualCircuitPublicPrefixes(List.of(virtualCircuitPublicPrefixes));
        }
        public GetVirtualCircuitPublicPrefixesResult build() {
            final var _resultValue = new GetVirtualCircuitPublicPrefixesResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.verificationState = verificationState;
            _resultValue.virtualCircuitId = virtualCircuitId;
            _resultValue.virtualCircuitPublicPrefixes = virtualCircuitPublicPrefixes;
            return _resultValue;
        }
    }
}
