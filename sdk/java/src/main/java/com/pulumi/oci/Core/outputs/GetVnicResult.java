// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVnicResult {
    /**
     * @return The VNIC&#39;s availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private String availabilityDomain;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the VNIC.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The hostname for the VNIC&#39;s primary private IP. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, `bminstance1` in FQDN `bminstance1.subnet123.vcn1.oraclevcn.com`). Must be unique across all VNICs in the subnet and comply with [RFC 952](https://tools.ietf.org/html/rfc952) and [RFC 1123](https://tools.ietf.org/html/rfc1123).
     * 
     */
    private String hostnameLabel;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return List of IPv6 addresses assigned to the VNIC.  Example: `2001:DB8::`
     * 
     */
    private List<String> ipv6addresses;
    /**
     * @return Whether the VNIC is the primary VNIC (the VNIC that is automatically created and attached during instance launch).
     * 
     */
    private Boolean isPrimary;
    /**
     * @return The MAC address of the VNIC.
     * 
     */
    private String macAddress;
    /**
     * @return A list of the OCIDs of the network security groups that the VNIC belongs to.
     * 
     */
    private List<String> nsgIds;
    /**
     * @return The private IP address of the primary `privateIp` object on the VNIC. The address is within the CIDR of the VNIC&#39;s subnet.  Example: `10.0.3.3`
     * 
     */
    private String privateIpAddress;
    /**
     * @return The public IP address of the VNIC, if one is assigned.
     * 
     */
    private String publicIpAddress;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table the IP address or VNIC will use. For more information, see [Source Based Routing](https://docs.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#Overview_of_Routing_for_Your_VCN__source_routing).
     * 
     */
    private String routeTableId;
    /**
     * @return [Security attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/zpr-artifacts.htm#security-attributes) are labels for a resource that can be referenced in a [Zero Trust Packet Routing](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm) (ZPR) policy to control access to ZPR-supported resources.  Example: `{&#34;Oracle-DataSecurity-ZPR&#34;: {&#34;MaxEgressCount&#34;: {&#34;value&#34;:&#34;42&#34;,&#34;mode&#34;:&#34;audit&#34;}}}`
     * 
     */
    private Map<String,String> securityAttributes;
    /**
     * @return Whether the source/destination check is disabled on the VNIC. Defaults to `false`, which means the check is performed. For information about why you would skip the source/destination check, see [Using a Private IP as a Route Target](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#privateip).
     * 
     */
    private Boolean skipSourceDestCheck;
    /**
     * @return The current state of the VNIC.
     * 
     */
    private String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet the VNIC is in.
     * 
     */
    private String subnetId;
    /**
     * @return The date and time the VNIC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return If the VNIC belongs to a VLAN as part of the Oracle Cloud VMware Solution (instead of belonging to a subnet), the `vlanId` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN the VNIC is in. See [Vlan](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Vlan). If the VNIC is instead in a subnet, `subnetId` has a value.
     * 
     */
    private String vlanId;
    private String vnicId;

    private GetVnicResult() {}
    /**
     * @return The VNIC&#39;s availability domain.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the VNIC.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The hostname for the VNIC&#39;s primary private IP. Used for DNS. The value is the hostname portion of the primary private IP&#39;s fully qualified domain name (FQDN) (for example, `bminstance1` in FQDN `bminstance1.subnet123.vcn1.oraclevcn.com`). Must be unique across all VNICs in the subnet and comply with [RFC 952](https://tools.ietf.org/html/rfc952) and [RFC 1123](https://tools.ietf.org/html/rfc1123).
     * 
     */
    public String hostnameLabel() {
        return this.hostnameLabel;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of IPv6 addresses assigned to the VNIC.  Example: `2001:DB8::`
     * 
     */
    public List<String> ipv6addresses() {
        return this.ipv6addresses;
    }
    /**
     * @return Whether the VNIC is the primary VNIC (the VNIC that is automatically created and attached during instance launch).
     * 
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    /**
     * @return The MAC address of the VNIC.
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return A list of the OCIDs of the network security groups that the VNIC belongs to.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The private IP address of the primary `privateIp` object on the VNIC. The address is within the CIDR of the VNIC&#39;s subnet.  Example: `10.0.3.3`
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return The public IP address of the VNIC, if one is assigned.
     * 
     */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table the IP address or VNIC will use. For more information, see [Source Based Routing](https://docs.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#Overview_of_Routing_for_Your_VCN__source_routing).
     * 
     */
    public String routeTableId() {
        return this.routeTableId;
    }
    /**
     * @return [Security attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/zpr-artifacts.htm#security-attributes) are labels for a resource that can be referenced in a [Zero Trust Packet Routing](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm) (ZPR) policy to control access to ZPR-supported resources.  Example: `{&#34;Oracle-DataSecurity-ZPR&#34;: {&#34;MaxEgressCount&#34;: {&#34;value&#34;:&#34;42&#34;,&#34;mode&#34;:&#34;audit&#34;}}}`
     * 
     */
    public Map<String,String> securityAttributes() {
        return this.securityAttributes;
    }
    /**
     * @return Whether the source/destination check is disabled on the VNIC. Defaults to `false`, which means the check is performed. For information about why you would skip the source/destination check, see [Using a Private IP as a Route Target](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#privateip).
     * 
     */
    public Boolean skipSourceDestCheck() {
        return this.skipSourceDestCheck;
    }
    /**
     * @return The current state of the VNIC.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet the VNIC is in.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The date and time the VNIC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return If the VNIC belongs to a VLAN as part of the Oracle Cloud VMware Solution (instead of belonging to a subnet), the `vlanId` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN the VNIC is in. See [Vlan](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Vlan). If the VNIC is instead in a subnet, `subnetId` has a value.
     * 
     */
    public String vlanId() {
        return this.vlanId;
    }
    public String vnicId() {
        return this.vnicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVnicResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String hostnameLabel;
        private String id;
        private List<String> ipv6addresses;
        private Boolean isPrimary;
        private String macAddress;
        private List<String> nsgIds;
        private String privateIpAddress;
        private String publicIpAddress;
        private String routeTableId;
        private Map<String,String> securityAttributes;
        private Boolean skipSourceDestCheck;
        private String state;
        private String subnetId;
        private String timeCreated;
        private String vlanId;
        private String vnicId;
        public Builder() {}
        public Builder(GetVnicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostnameLabel = defaults.hostnameLabel;
    	      this.id = defaults.id;
    	      this.ipv6addresses = defaults.ipv6addresses;
    	      this.isPrimary = defaults.isPrimary;
    	      this.macAddress = defaults.macAddress;
    	      this.nsgIds = defaults.nsgIds;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.routeTableId = defaults.routeTableId;
    	      this.securityAttributes = defaults.securityAttributes;
    	      this.skipSourceDestCheck = defaults.skipSourceDestCheck;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.vlanId = defaults.vlanId;
    	      this.vnicId = defaults.vnicId;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameLabel(String hostnameLabel) {
            if (hostnameLabel == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "hostnameLabel");
            }
            this.hostnameLabel = hostnameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6addresses(List<String> ipv6addresses) {
            if (ipv6addresses == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "ipv6addresses");
            }
            this.ipv6addresses = ipv6addresses;
            return this;
        }
        public Builder ipv6addresses(String... ipv6addresses) {
            return ipv6addresses(List.of(ipv6addresses));
        }
        @CustomType.Setter
        public Builder isPrimary(Boolean isPrimary) {
            if (isPrimary == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "isPrimary");
            }
            this.isPrimary = isPrimary;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            if (privateIpAddress == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "privateIpAddress");
            }
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder publicIpAddress(String publicIpAddress) {
            if (publicIpAddress == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "publicIpAddress");
            }
            this.publicIpAddress = publicIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder routeTableId(String routeTableId) {
            if (routeTableId == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "routeTableId");
            }
            this.routeTableId = routeTableId;
            return this;
        }
        @CustomType.Setter
        public Builder securityAttributes(Map<String,String> securityAttributes) {
            if (securityAttributes == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "securityAttributes");
            }
            this.securityAttributes = securityAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder skipSourceDestCheck(Boolean skipSourceDestCheck) {
            if (skipSourceDestCheck == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "skipSourceDestCheck");
            }
            this.skipSourceDestCheck = skipSourceDestCheck;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(String vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vnicId(String vnicId) {
            if (vnicId == null) {
              throw new MissingRequiredPropertyException("GetVnicResult", "vnicId");
            }
            this.vnicId = vnicId;
            return this;
        }
        public GetVnicResult build() {
            final var _resultValue = new GetVnicResult();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hostnameLabel = hostnameLabel;
            _resultValue.id = id;
            _resultValue.ipv6addresses = ipv6addresses;
            _resultValue.isPrimary = isPrimary;
            _resultValue.macAddress = macAddress;
            _resultValue.nsgIds = nsgIds;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.publicIpAddress = publicIpAddress;
            _resultValue.routeTableId = routeTableId;
            _resultValue.securityAttributes = securityAttributes;
            _resultValue.skipSourceDestCheck = skipSourceDestCheck;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.vlanId = vlanId;
            _resultValue.vnicId = vnicId;
            return _resultValue;
        }
    }
}
