// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVolumeAttachmentsVolumeAttachmentMultipathDevice {
    /**
     * @return The volume&#39;s iSCSI IP address.  Example: `169.254.2.2`
     * 
     */
    private String ipv4;
    /**
     * @return The target volume&#39;s iSCSI Qualified Name in the format defined by [RFC 3720](https://tools.ietf.org/html/rfc3720#page-32).  Example: `iqn.2015-12.com.oracleiaas:40b7ee03-883f-46c6-a951-63d2841d2195`
     * 
     */
    private String iqn;
    /**
     * @return The volume&#39;s iSCSI port, usually port 860 or 3260.  Example: `3260`
     * 
     */
    private Integer port;

    private GetVolumeAttachmentsVolumeAttachmentMultipathDevice() {}
    /**
     * @return The volume&#39;s iSCSI IP address.  Example: `169.254.2.2`
     * 
     */
    public String ipv4() {
        return this.ipv4;
    }
    /**
     * @return The target volume&#39;s iSCSI Qualified Name in the format defined by [RFC 3720](https://tools.ietf.org/html/rfc3720#page-32).  Example: `iqn.2015-12.com.oracleiaas:40b7ee03-883f-46c6-a951-63d2841d2195`
     * 
     */
    public String iqn() {
        return this.iqn;
    }
    /**
     * @return The volume&#39;s iSCSI port, usually port 860 or 3260.  Example: `3260`
     * 
     */
    public Integer port() {
        return this.port;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeAttachmentsVolumeAttachmentMultipathDevice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ipv4;
        private String iqn;
        private Integer port;
        public Builder() {}
        public Builder(GetVolumeAttachmentsVolumeAttachmentMultipathDevice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipv4 = defaults.ipv4;
    	      this.iqn = defaults.iqn;
    	      this.port = defaults.port;
        }

        @CustomType.Setter
        public Builder ipv4(String ipv4) {
            if (ipv4 == null) {
              throw new MissingRequiredPropertyException("GetVolumeAttachmentsVolumeAttachmentMultipathDevice", "ipv4");
            }
            this.ipv4 = ipv4;
            return this;
        }
        @CustomType.Setter
        public Builder iqn(String iqn) {
            if (iqn == null) {
              throw new MissingRequiredPropertyException("GetVolumeAttachmentsVolumeAttachmentMultipathDevice", "iqn");
            }
            this.iqn = iqn;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetVolumeAttachmentsVolumeAttachmentMultipathDevice", "port");
            }
            this.port = port;
            return this;
        }
        public GetVolumeAttachmentsVolumeAttachmentMultipathDevice build() {
            final var _resultValue = new GetVolumeAttachmentsVolumeAttachmentMultipathDevice();
            _resultValue.ipv4 = ipv4;
            _resultValue.iqn = iqn;
            _resultValue.port = port;
            return _resultValue;
        }
    }
}
