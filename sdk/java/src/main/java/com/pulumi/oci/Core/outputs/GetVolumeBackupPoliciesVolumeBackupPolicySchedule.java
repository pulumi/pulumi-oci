// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVolumeBackupPoliciesVolumeBackupPolicySchedule {
    /**
     * @return The type of volume backup to create.
     * 
     */
    private String backupType;
    /**
     * @return The day of the month to schedule the volume backup.
     * 
     */
    private Integer dayOfMonth;
    /**
     * @return The day of the week to schedule the volume backup.
     * 
     */
    private String dayOfWeek;
    /**
     * @return The hour of the day to schedule the volume backup.
     * 
     */
    private Integer hourOfDay;
    /**
     * @return The month of the year to schedule the volume backup.
     * 
     */
    private String month;
    /**
     * @return The number of seconds that the volume backup start time should be shifted from the default interval boundaries specified by the period. The volume backup start time is the frequency start time plus the offset.
     * 
     */
    private Integer offsetSeconds;
    /**
     * @return Indicates how the offset is defined. If value is `STRUCTURED`, then `hourOfDay`, `dayOfWeek`, `dayOfMonth`, and `month` fields are used and `offsetSeconds` will be ignored in requests and users should ignore its value from the responses.
     * 
     */
    private String offsetType;
    /**
     * @return The volume backup frequency.
     * 
     */
    private String period;
    /**
     * @return How long, in seconds, to keep the volume backups created by this schedule.
     * 
     */
    private Integer retentionSeconds;
    /**
     * @return Specifies what time zone is the schedule in
     * 
     */
    private String timeZone;

    private GetVolumeBackupPoliciesVolumeBackupPolicySchedule() {}
    /**
     * @return The type of volume backup to create.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return The day of the month to schedule the volume backup.
     * 
     */
    public Integer dayOfMonth() {
        return this.dayOfMonth;
    }
    /**
     * @return The day of the week to schedule the volume backup.
     * 
     */
    public String dayOfWeek() {
        return this.dayOfWeek;
    }
    /**
     * @return The hour of the day to schedule the volume backup.
     * 
     */
    public Integer hourOfDay() {
        return this.hourOfDay;
    }
    /**
     * @return The month of the year to schedule the volume backup.
     * 
     */
    public String month() {
        return this.month;
    }
    /**
     * @return The number of seconds that the volume backup start time should be shifted from the default interval boundaries specified by the period. The volume backup start time is the frequency start time plus the offset.
     * 
     */
    public Integer offsetSeconds() {
        return this.offsetSeconds;
    }
    /**
     * @return Indicates how the offset is defined. If value is `STRUCTURED`, then `hourOfDay`, `dayOfWeek`, `dayOfMonth`, and `month` fields are used and `offsetSeconds` will be ignored in requests and users should ignore its value from the responses.
     * 
     */
    public String offsetType() {
        return this.offsetType;
    }
    /**
     * @return The volume backup frequency.
     * 
     */
    public String period() {
        return this.period;
    }
    /**
     * @return How long, in seconds, to keep the volume backups created by this schedule.
     * 
     */
    public Integer retentionSeconds() {
        return this.retentionSeconds;
    }
    /**
     * @return Specifies what time zone is the schedule in
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeBackupPoliciesVolumeBackupPolicySchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupType;
        private Integer dayOfMonth;
        private String dayOfWeek;
        private Integer hourOfDay;
        private String month;
        private Integer offsetSeconds;
        private String offsetType;
        private String period;
        private Integer retentionSeconds;
        private String timeZone;
        public Builder() {}
        public Builder(GetVolumeBackupPoliciesVolumeBackupPolicySchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupType = defaults.backupType;
    	      this.dayOfMonth = defaults.dayOfMonth;
    	      this.dayOfWeek = defaults.dayOfWeek;
    	      this.hourOfDay = defaults.hourOfDay;
    	      this.month = defaults.month;
    	      this.offsetSeconds = defaults.offsetSeconds;
    	      this.offsetType = defaults.offsetType;
    	      this.period = defaults.period;
    	      this.retentionSeconds = defaults.retentionSeconds;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder backupType(String backupType) {
            if (backupType == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "backupType");
            }
            this.backupType = backupType;
            return this;
        }
        @CustomType.Setter
        public Builder dayOfMonth(Integer dayOfMonth) {
            if (dayOfMonth == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "dayOfMonth");
            }
            this.dayOfMonth = dayOfMonth;
            return this;
        }
        @CustomType.Setter
        public Builder dayOfWeek(String dayOfWeek) {
            if (dayOfWeek == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "dayOfWeek");
            }
            this.dayOfWeek = dayOfWeek;
            return this;
        }
        @CustomType.Setter
        public Builder hourOfDay(Integer hourOfDay) {
            if (hourOfDay == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "hourOfDay");
            }
            this.hourOfDay = hourOfDay;
            return this;
        }
        @CustomType.Setter
        public Builder month(String month) {
            if (month == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "month");
            }
            this.month = month;
            return this;
        }
        @CustomType.Setter
        public Builder offsetSeconds(Integer offsetSeconds) {
            if (offsetSeconds == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "offsetSeconds");
            }
            this.offsetSeconds = offsetSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder offsetType(String offsetType) {
            if (offsetType == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "offsetType");
            }
            this.offsetType = offsetType;
            return this;
        }
        @CustomType.Setter
        public Builder period(String period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder retentionSeconds(Integer retentionSeconds) {
            if (retentionSeconds == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "retentionSeconds");
            }
            this.retentionSeconds = retentionSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetVolumeBackupPoliciesVolumeBackupPolicySchedule", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public GetVolumeBackupPoliciesVolumeBackupPolicySchedule build() {
            final var _resultValue = new GetVolumeBackupPoliciesVolumeBackupPolicySchedule();
            _resultValue.backupType = backupType;
            _resultValue.dayOfMonth = dayOfMonth;
            _resultValue.dayOfWeek = dayOfWeek;
            _resultValue.hourOfDay = hourOfDay;
            _resultValue.month = month;
            _resultValue.offsetSeconds = offsetSeconds;
            _resultValue.offsetType = offsetType;
            _resultValue.period = period;
            _resultValue.retentionSeconds = retentionSeconds;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
