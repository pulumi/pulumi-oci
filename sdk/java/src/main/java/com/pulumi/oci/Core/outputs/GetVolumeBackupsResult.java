// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Core.outputs.GetVolumeBackupsFilter;
import com.pulumi.oci.Core.outputs.GetVolumeBackupsVolumeBackup;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVolumeBackupsResult {
    /**
     * @return The OCID of the compartment that contains the volume backup.
     * 
     */
    private String compartmentId;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetVolumeBackupsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The OCID of the source volume backup.
     * 
     */
    private @Nullable String sourceVolumeBackupId;
    /**
     * @return The current state of a volume backup.
     * 
     */
    private @Nullable String state;
    /**
     * @return The list of volume_backups.
     * 
     */
    private @Nullable List<GetVolumeBackupsVolumeBackup> volumeBackups;
    /**
     * @return The OCID of the volume.
     * 
     */
    private @Nullable String volumeId;

    private GetVolumeBackupsResult() {}
    /**
     * @return The OCID of the compartment that contains the volume backup.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetVolumeBackupsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The OCID of the source volume backup.
     * 
     */
    public Optional<String> sourceVolumeBackupId() {
        return Optional.ofNullable(this.sourceVolumeBackupId);
    }
    /**
     * @return The current state of a volume backup.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The list of volume_backups.
     * 
     */
    public List<GetVolumeBackupsVolumeBackup> volumeBackups() {
        return this.volumeBackups == null ? List.of() : this.volumeBackups;
    }
    /**
     * @return The OCID of the volume.
     * 
     */
    public Optional<String> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeBackupsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetVolumeBackupsFilter> filters;
        private @Nullable String id;
        private @Nullable String sourceVolumeBackupId;
        private @Nullable String state;
        private @Nullable List<GetVolumeBackupsVolumeBackup> volumeBackups;
        private @Nullable String volumeId;
        public Builder() {}
        public Builder(GetVolumeBackupsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.sourceVolumeBackupId = defaults.sourceVolumeBackupId;
    	      this.state = defaults.state;
    	      this.volumeBackups = defaults.volumeBackups;
    	      this.volumeId = defaults.volumeId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetVolumeBackupsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetVolumeBackupsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder sourceVolumeBackupId(@Nullable String sourceVolumeBackupId) {
            this.sourceVolumeBackupId = sourceVolumeBackupId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder volumeBackups(@Nullable List<GetVolumeBackupsVolumeBackup> volumeBackups) {
            this.volumeBackups = volumeBackups;
            return this;
        }
        public Builder volumeBackups(GetVolumeBackupsVolumeBackup... volumeBackups) {
            return volumeBackups(List.of(volumeBackups));
        }
        @CustomType.Setter
        public Builder volumeId(@Nullable String volumeId) {
            this.volumeId = volumeId;
            return this;
        }
        public GetVolumeBackupsResult build() {
            final var o = new GetVolumeBackupsResult();
            o.compartmentId = compartmentId;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.sourceVolumeBackupId = sourceVolumeBackupId;
            o.state = state;
            o.volumeBackups = volumeBackups;
            o.volumeId = volumeId;
            return o;
        }
    }
}
