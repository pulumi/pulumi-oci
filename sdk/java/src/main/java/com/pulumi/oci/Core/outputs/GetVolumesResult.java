// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.GetVolumesFilter;
import com.pulumi.oci.Core.outputs.GetVolumesVolume;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVolumesResult {
    /**
     * @return The availability domain of the block volume replica.  Example: `Uocm:PHX-AD-1`
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return The clusterPlacementGroup Id of the volume for volume placement.
     * 
     */
    private @Nullable String clusterPlacementGroupId;
    /**
     * @return The OCID of the compartment that contains the volume.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetVolumesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current state of a volume.
     * 
     */
    private @Nullable String state;
    /**
     * @return The OCID of the source volume group.
     * 
     */
    private @Nullable String volumeGroupId;
    /**
     * @return The list of volumes.
     * 
     */
    private List<GetVolumesVolume> volumes;

    private GetVolumesResult() {}
    /**
     * @return The availability domain of the block volume replica.  Example: `Uocm:PHX-AD-1`
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The clusterPlacementGroup Id of the volume for volume placement.
     * 
     */
    public Optional<String> clusterPlacementGroupId() {
        return Optional.ofNullable(this.clusterPlacementGroupId);
    }
    /**
     * @return The OCID of the compartment that contains the volume.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetVolumesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of a volume.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The OCID of the source volume group.
     * 
     */
    public Optional<String> volumeGroupId() {
        return Optional.ofNullable(this.volumeGroupId);
    }
    /**
     * @return The list of volumes.
     * 
     */
    public List<GetVolumesVolume> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityDomain;
        private @Nullable String clusterPlacementGroupId;
        private @Nullable String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetVolumesFilter> filters;
        private String id;
        private @Nullable String state;
        private @Nullable String volumeGroupId;
        private List<GetVolumesVolume> volumes;
        public Builder() {}
        public Builder(GetVolumesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.clusterPlacementGroupId = defaults.clusterPlacementGroupId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.volumeGroupId = defaults.volumeGroupId;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder clusterPlacementGroupId(@Nullable String clusterPlacementGroupId) {

            this.clusterPlacementGroupId = clusterPlacementGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetVolumesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetVolumesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVolumesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder volumeGroupId(@Nullable String volumeGroupId) {

            this.volumeGroupId = volumeGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetVolumesVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetVolumesResult", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetVolumesVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetVolumesResult build() {
            final var _resultValue = new GetVolumesResult();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.clusterPlacementGroupId = clusterPlacementGroupId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.volumeGroupId = volumeGroupId;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
