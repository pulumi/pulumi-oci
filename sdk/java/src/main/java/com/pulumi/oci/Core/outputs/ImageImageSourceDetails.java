// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageImageSourceDetails {
    /**
     * @return The Object Storage bucket for the image.
     * 
     */
    private @Nullable String bucketName;
    /**
     * @return The Object Storage namespace for the image.
     * 
     */
    private @Nullable String namespaceName;
    /**
     * @return The Object Storage name for the image.
     * 
     */
    private @Nullable String objectName;
    /**
     * @return The image&#39;s operating system.  Example: `Oracle Linux`
     * 
     */
    private @Nullable String operatingSystem;
    /**
     * @return The image&#39;s operating system version.  Example: `7.2`
     * 
     */
    private @Nullable String operatingSystemVersion;
    /**
     * @return The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
     * * `QCOW2`
     * * `VMDK`
     * 
     */
    private @Nullable String sourceImageType;
    /**
     * @return The source type for the image. Use `objectStorageTuple` when specifying the namespace, bucket name, and object name. Use `objectStorageUri` when specifying the Object Storage URL.
     * 
     */
    private String sourceType;
    /**
     * @return The Object Storage URL for the image.
     * 
     */
    private @Nullable String sourceUri;

    private ImageImageSourceDetails() {}
    /**
     * @return The Object Storage bucket for the image.
     * 
     */
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    /**
     * @return The Object Storage namespace for the image.
     * 
     */
    public Optional<String> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }
    /**
     * @return The Object Storage name for the image.
     * 
     */
    public Optional<String> objectName() {
        return Optional.ofNullable(this.objectName);
    }
    /**
     * @return The image&#39;s operating system.  Example: `Oracle Linux`
     * 
     */
    public Optional<String> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }
    /**
     * @return The image&#39;s operating system version.  Example: `7.2`
     * 
     */
    public Optional<String> operatingSystemVersion() {
        return Optional.ofNullable(this.operatingSystemVersion);
    }
    /**
     * @return The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
     * * `QCOW2`
     * * `VMDK`
     * 
     */
    public Optional<String> sourceImageType() {
        return Optional.ofNullable(this.sourceImageType);
    }
    /**
     * @return The source type for the image. Use `objectStorageTuple` when specifying the namespace, bucket name, and object name. Use `objectStorageUri` when specifying the Object Storage URL.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return The Object Storage URL for the image.
     * 
     */
    public Optional<String> sourceUri() {
        return Optional.ofNullable(this.sourceUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageImageSourceDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bucketName;
        private @Nullable String namespaceName;
        private @Nullable String objectName;
        private @Nullable String operatingSystem;
        private @Nullable String operatingSystemVersion;
        private @Nullable String sourceImageType;
        private String sourceType;
        private @Nullable String sourceUri;
        public Builder() {}
        public Builder(ImageImageSourceDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketName = defaults.bucketName;
    	      this.namespaceName = defaults.namespaceName;
    	      this.objectName = defaults.objectName;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.operatingSystemVersion = defaults.operatingSystemVersion;
    	      this.sourceImageType = defaults.sourceImageType;
    	      this.sourceType = defaults.sourceType;
    	      this.sourceUri = defaults.sourceUri;
        }

        @CustomType.Setter
        public Builder bucketName(@Nullable String bucketName) {

            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceName(@Nullable String namespaceName) {

            this.namespaceName = namespaceName;
            return this;
        }
        @CustomType.Setter
        public Builder objectName(@Nullable String objectName) {

            this.objectName = objectName;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystem(@Nullable String operatingSystem) {

            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystemVersion(@Nullable String operatingSystemVersion) {

            this.operatingSystemVersion = operatingSystemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceImageType(@Nullable String sourceImageType) {

            this.sourceImageType = sourceImageType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("ImageImageSourceDetails", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUri(@Nullable String sourceUri) {

            this.sourceUri = sourceUri;
            return this;
        }
        public ImageImageSourceDetails build() {
            final var _resultValue = new ImageImageSourceDetails();
            _resultValue.bucketName = bucketName;
            _resultValue.namespaceName = namespaceName;
            _resultValue.objectName = objectName;
            _resultValue.operatingSystem = operatingSystem;
            _resultValue.operatingSystemVersion = operatingSystemVersion;
            _resultValue.sourceImageType = sourceImageType;
            _resultValue.sourceType = sourceType;
            _resultValue.sourceUri = sourceUri;
            return _resultValue;
        }
    }
}
