// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig {
    /**
     * @return Whether virtualization instructions are available. For example, Secure Virtual Machine for AMD shapes or VT-x for Intel shapes.
     * 
     */
    private @Nullable Boolean areVirtualInstructionsEnabled;
    /**
     * @return Instance Platform Configuration Configuration Map for flexible setting input.
     * 
     */
    private @Nullable Map<String,String> configMap;
    /**
     * @return Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device pass-through.
     * 
     */
    private @Nullable Boolean isAccessControlServiceEnabled;
    /**
     * @return Whether the input-output memory management unit is enabled.
     * 
     */
    private @Nullable Boolean isInputOutputMemoryManagementUnitEnabled;
    /**
     * @return Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    private @Nullable Boolean isMeasuredBootEnabled;
    /**
     * @return Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
     * 
     */
    private @Nullable Boolean isMemoryEncryptionEnabled;
    /**
     * @return Whether Secure Boot is enabled on the instance.
     * 
     */
    private @Nullable Boolean isSecureBootEnabled;
    /**
     * @return Whether symmetric multithreading is enabled on the instance. Symmetric multithreading is also called simultaneous multithreading (SMT) or Intel Hyper-Threading.
     * 
     */
    private @Nullable Boolean isSymmetricMultiThreadingEnabled;
    /**
     * @return Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    private @Nullable Boolean isTrustedPlatformModuleEnabled;
    /**
     * @return The number of NUMA nodes per socket (NPS).
     * 
     */
    private @Nullable String numaNodesPerSocket;
    /**
     * @return The percentage of cores enabled. Value must be a multiple of 25%. If the requested percentage results in a fractional number of cores, the system rounds up the number of cores across processors and provisions an instance with a whole number of cores.
     * 
     * If the applications that you run on the instance use a core-based licensing model and need fewer cores than the full size of the shape, you can disable cores to reduce your licensing costs. The instance itself is billed for the full shape, regardless of whether all cores are enabled.
     * 
     */
    private @Nullable Integer percentageOfCoresEnabled;
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    private String type;

    private InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig() {}
    /**
     * @return Whether virtualization instructions are available. For example, Secure Virtual Machine for AMD shapes or VT-x for Intel shapes.
     * 
     */
    public Optional<Boolean> areVirtualInstructionsEnabled() {
        return Optional.ofNullable(this.areVirtualInstructionsEnabled);
    }
    /**
     * @return Instance Platform Configuration Configuration Map for flexible setting input.
     * 
     */
    public Map<String,String> configMap() {
        return this.configMap == null ? Map.of() : this.configMap;
    }
    /**
     * @return Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device pass-through.
     * 
     */
    public Optional<Boolean> isAccessControlServiceEnabled() {
        return Optional.ofNullable(this.isAccessControlServiceEnabled);
    }
    /**
     * @return Whether the input-output memory management unit is enabled.
     * 
     */
    public Optional<Boolean> isInputOutputMemoryManagementUnitEnabled() {
        return Optional.ofNullable(this.isInputOutputMemoryManagementUnitEnabled);
    }
    /**
     * @return Whether the Measured Boot feature is enabled on the instance.
     * 
     */
    public Optional<Boolean> isMeasuredBootEnabled() {
        return Optional.ofNullable(this.isMeasuredBootEnabled);
    }
    /**
     * @return Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
     * 
     */
    public Optional<Boolean> isMemoryEncryptionEnabled() {
        return Optional.ofNullable(this.isMemoryEncryptionEnabled);
    }
    /**
     * @return Whether Secure Boot is enabled on the instance.
     * 
     */
    public Optional<Boolean> isSecureBootEnabled() {
        return Optional.ofNullable(this.isSecureBootEnabled);
    }
    /**
     * @return Whether symmetric multithreading is enabled on the instance. Symmetric multithreading is also called simultaneous multithreading (SMT) or Intel Hyper-Threading.
     * 
     */
    public Optional<Boolean> isSymmetricMultiThreadingEnabled() {
        return Optional.ofNullable(this.isSymmetricMultiThreadingEnabled);
    }
    /**
     * @return Whether the Trusted Platform Module (TPM) is enabled on the instance.
     * 
     */
    public Optional<Boolean> isTrustedPlatformModuleEnabled() {
        return Optional.ofNullable(this.isTrustedPlatformModuleEnabled);
    }
    /**
     * @return The number of NUMA nodes per socket (NPS).
     * 
     */
    public Optional<String> numaNodesPerSocket() {
        return Optional.ofNullable(this.numaNodesPerSocket);
    }
    /**
     * @return The percentage of cores enabled. Value must be a multiple of 25%. If the requested percentage results in a fractional number of cores, the system rounds up the number of cores across processors and provisions an instance with a whole number of cores.
     * 
     * If the applications that you run on the instance use a core-based licensing model and need fewer cores than the full size of the shape, you can disable cores to reduce your licensing costs. The instance itself is billed for the full shape, regardless of whether all cores are enabled.
     * 
     */
    public Optional<Integer> percentageOfCoresEnabled() {
        return Optional.ofNullable(this.percentageOfCoresEnabled);
    }
    /**
     * @return The type of action to run when the instance is interrupted for eviction.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean areVirtualInstructionsEnabled;
        private @Nullable Map<String,String> configMap;
        private @Nullable Boolean isAccessControlServiceEnabled;
        private @Nullable Boolean isInputOutputMemoryManagementUnitEnabled;
        private @Nullable Boolean isMeasuredBootEnabled;
        private @Nullable Boolean isMemoryEncryptionEnabled;
        private @Nullable Boolean isSecureBootEnabled;
        private @Nullable Boolean isSymmetricMultiThreadingEnabled;
        private @Nullable Boolean isTrustedPlatformModuleEnabled;
        private @Nullable String numaNodesPerSocket;
        private @Nullable Integer percentageOfCoresEnabled;
        private String type;
        public Builder() {}
        public Builder(InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areVirtualInstructionsEnabled = defaults.areVirtualInstructionsEnabled;
    	      this.configMap = defaults.configMap;
    	      this.isAccessControlServiceEnabled = defaults.isAccessControlServiceEnabled;
    	      this.isInputOutputMemoryManagementUnitEnabled = defaults.isInputOutputMemoryManagementUnitEnabled;
    	      this.isMeasuredBootEnabled = defaults.isMeasuredBootEnabled;
    	      this.isMemoryEncryptionEnabled = defaults.isMemoryEncryptionEnabled;
    	      this.isSecureBootEnabled = defaults.isSecureBootEnabled;
    	      this.isSymmetricMultiThreadingEnabled = defaults.isSymmetricMultiThreadingEnabled;
    	      this.isTrustedPlatformModuleEnabled = defaults.isTrustedPlatformModuleEnabled;
    	      this.numaNodesPerSocket = defaults.numaNodesPerSocket;
    	      this.percentageOfCoresEnabled = defaults.percentageOfCoresEnabled;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder areVirtualInstructionsEnabled(@Nullable Boolean areVirtualInstructionsEnabled) {

            this.areVirtualInstructionsEnabled = areVirtualInstructionsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder configMap(@Nullable Map<String,String> configMap) {

            this.configMap = configMap;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessControlServiceEnabled(@Nullable Boolean isAccessControlServiceEnabled) {

            this.isAccessControlServiceEnabled = isAccessControlServiceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isInputOutputMemoryManagementUnitEnabled(@Nullable Boolean isInputOutputMemoryManagementUnitEnabled) {

            this.isInputOutputMemoryManagementUnitEnabled = isInputOutputMemoryManagementUnitEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isMeasuredBootEnabled(@Nullable Boolean isMeasuredBootEnabled) {

            this.isMeasuredBootEnabled = isMeasuredBootEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isMemoryEncryptionEnabled(@Nullable Boolean isMemoryEncryptionEnabled) {

            this.isMemoryEncryptionEnabled = isMemoryEncryptionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSecureBootEnabled(@Nullable Boolean isSecureBootEnabled) {

            this.isSecureBootEnabled = isSecureBootEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSymmetricMultiThreadingEnabled(@Nullable Boolean isSymmetricMultiThreadingEnabled) {

            this.isSymmetricMultiThreadingEnabled = isSymmetricMultiThreadingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isTrustedPlatformModuleEnabled(@Nullable Boolean isTrustedPlatformModuleEnabled) {

            this.isTrustedPlatformModuleEnabled = isTrustedPlatformModuleEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder numaNodesPerSocket(@Nullable String numaNodesPerSocket) {

            this.numaNodesPerSocket = numaNodesPerSocket;
            return this;
        }
        @CustomType.Setter
        public Builder percentageOfCoresEnabled(@Nullable Integer percentageOfCoresEnabled) {

            this.percentageOfCoresEnabled = percentageOfCoresEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig", "type");
            }
            this.type = type;
            return this;
        }
        public InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig build() {
            final var _resultValue = new InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig();
            _resultValue.areVirtualInstructionsEnabled = areVirtualInstructionsEnabled;
            _resultValue.configMap = configMap;
            _resultValue.isAccessControlServiceEnabled = isAccessControlServiceEnabled;
            _resultValue.isInputOutputMemoryManagementUnitEnabled = isInputOutputMemoryManagementUnitEnabled;
            _resultValue.isMeasuredBootEnabled = isMeasuredBootEnabled;
            _resultValue.isMemoryEncryptionEnabled = isMemoryEncryptionEnabled;
            _resultValue.isSecureBootEnabled = isSecureBootEnabled;
            _resultValue.isSymmetricMultiThreadingEnabled = isSymmetricMultiThreadingEnabled;
            _resultValue.isTrustedPlatformModuleEnabled = isTrustedPlatformModuleEnabled;
            _resultValue.numaNodesPerSocket = numaNodesPerSocket;
            _resultValue.percentageOfCoresEnabled = percentageOfCoresEnabled;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
