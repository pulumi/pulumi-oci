// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IpsecConnectionTunnelManagementDpdConfig {
    /**
     * @return This option defines whether DPD can be initiated from the Oracle side of the connection. `INITIATE_AND_RESPOND` or `RESPOND_ONLY`
     * 
     */
    private @Nullable String dpdMode;
    /**
     * @return DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
     * 
     */
    private @Nullable Integer dpdTimeoutInSec;

    private IpsecConnectionTunnelManagementDpdConfig() {}
    /**
     * @return This option defines whether DPD can be initiated from the Oracle side of the connection. `INITIATE_AND_RESPOND` or `RESPOND_ONLY`
     * 
     */
    public Optional<String> dpdMode() {
        return Optional.ofNullable(this.dpdMode);
    }
    /**
     * @return DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
     * 
     */
    public Optional<Integer> dpdTimeoutInSec() {
        return Optional.ofNullable(this.dpdTimeoutInSec);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IpsecConnectionTunnelManagementDpdConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dpdMode;
        private @Nullable Integer dpdTimeoutInSec;
        public Builder() {}
        public Builder(IpsecConnectionTunnelManagementDpdConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dpdMode = defaults.dpdMode;
    	      this.dpdTimeoutInSec = defaults.dpdTimeoutInSec;
        }

        @CustomType.Setter
        public Builder dpdMode(@Nullable String dpdMode) {

            this.dpdMode = dpdMode;
            return this;
        }
        @CustomType.Setter
        public Builder dpdTimeoutInSec(@Nullable Integer dpdTimeoutInSec) {

            this.dpdTimeoutInSec = dpdTimeoutInSec;
            return this;
        }
        public IpsecConnectionTunnelManagementDpdConfig build() {
            final var _resultValue = new IpsecConnectionTunnelManagementDpdConfig();
            _resultValue.dpdMode = dpdMode;
            _resultValue.dpdTimeoutInSec = dpdTimeoutInSec;
            return _resultValue;
        }
    }
}
