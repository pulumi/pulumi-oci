// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Core.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Core.outputs.SecurityListEgressSecurityRuleIcmpOptions;
import com.pulumi.oci.Core.outputs.SecurityListEgressSecurityRuleTcpOptions;
import com.pulumi.oci.Core.outputs.SecurityListEgressSecurityRuleUdpOptions;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityListEgressSecurityRule {
    /**
     * @return (Updatable) An optional description of your choice for the rule.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     * Allowed values:
     * * IP address range in CIDR notation. For example: `192.168.1.0/24` or `2001:0db8:0123:45::/56` Note that IPv6 addressing is currently supported only in certain regions. See [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).
     * * The `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/), if you&#39;re setting up a security list rule for traffic destined for a particular `Service` through a service gateway. For example: `oci-phx-objectstorage`.
     * 
     */
    private String destination;
    /**
     * @return (Updatable) Type of destination for the rule. The default is `CIDR_BLOCK`.
     * 
     * Allowed values:
     * * `CIDR_BLOCK`: If the rule&#39;s `destination` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `destination` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic destined for a particular `Service` through a service gateway).
     * 
     */
    private @Nullable String destinationType;
    /**
     * @return (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
     * 
     */
    private @Nullable SecurityListEgressSecurityRuleIcmpOptions icmpOptions;
    /**
     * @return (Updatable) The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    private String protocol;
    /**
     * @return (Updatable) A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    private @Nullable Boolean stateless;
    /**
     * @return (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable SecurityListEgressSecurityRuleTcpOptions tcpOptions;
    /**
     * @return (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    private @Nullable SecurityListEgressSecurityRuleUdpOptions udpOptions;

    private SecurityListEgressSecurityRule() {}
    /**
     * @return (Updatable) An optional description of your choice for the rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     * 
     * Allowed values:
     * * IP address range in CIDR notation. For example: `192.168.1.0/24` or `2001:0db8:0123:45::/56` Note that IPv6 addressing is currently supported only in certain regions. See [IPv6 Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/ipv6.htm).
     * * The `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/), if you&#39;re setting up a security list rule for traffic destined for a particular `Service` through a service gateway. For example: `oci-phx-objectstorage`.
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return (Updatable) Type of destination for the rule. The default is `CIDR_BLOCK`.
     * 
     * Allowed values:
     * * `CIDR_BLOCK`: If the rule&#39;s `destination` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule&#39;s `destination` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic destined for a particular `Service` through a service gateway).
     * 
     */
    public Optional<String> destinationType() {
        return Optional.ofNullable(this.destinationType);
    }
    /**
     * @return (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     * 
     * If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 (&#34;Destination Unreachable&#34;) code 4 (&#34;Fragmentation Needed and Don&#39;t Fragment was Set&#34;). If you need to specify multiple codes for a single type, create a separate security list rule for each.
     * 
     */
    public Optional<SecurityListEgressSecurityRuleIcmpOptions> icmpOptions() {
        return Optional.ofNullable(this.icmpOptions);
    }
    /**
     * @return (Updatable) The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP (&#34;1&#34;), TCP (&#34;6&#34;), UDP (&#34;17&#34;), and ICMPv6 (&#34;58&#34;).
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return (Updatable) A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if ingress traffic allows TCP destination port 80, there should be an egress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     * 
     */
    public Optional<Boolean> stateless() {
        return Optional.ofNullable(this.stateless);
    }
    /**
     * @return (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<SecurityListEgressSecurityRuleTcpOptions> tcpOptions() {
        return Optional.ofNullable(this.tcpOptions);
    }
    /**
     * @return (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     * 
     */
    public Optional<SecurityListEgressSecurityRuleUdpOptions> udpOptions() {
        return Optional.ofNullable(this.udpOptions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityListEgressSecurityRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private String destination;
        private @Nullable String destinationType;
        private @Nullable SecurityListEgressSecurityRuleIcmpOptions icmpOptions;
        private String protocol;
        private @Nullable Boolean stateless;
        private @Nullable SecurityListEgressSecurityRuleTcpOptions tcpOptions;
        private @Nullable SecurityListEgressSecurityRuleUdpOptions udpOptions;
        public Builder() {}
        public Builder(SecurityListEgressSecurityRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.destinationType = defaults.destinationType;
    	      this.icmpOptions = defaults.icmpOptions;
    	      this.protocol = defaults.protocol;
    	      this.stateless = defaults.stateless;
    	      this.tcpOptions = defaults.tcpOptions;
    	      this.udpOptions = defaults.udpOptions;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            if (destination == null) {
              throw new MissingRequiredPropertyException("SecurityListEgressSecurityRule", "destination");
            }
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder destinationType(@Nullable String destinationType) {

            this.destinationType = destinationType;
            return this;
        }
        @CustomType.Setter
        public Builder icmpOptions(@Nullable SecurityListEgressSecurityRuleIcmpOptions icmpOptions) {

            this.icmpOptions = icmpOptions;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("SecurityListEgressSecurityRule", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder stateless(@Nullable Boolean stateless) {

            this.stateless = stateless;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOptions(@Nullable SecurityListEgressSecurityRuleTcpOptions tcpOptions) {

            this.tcpOptions = tcpOptions;
            return this;
        }
        @CustomType.Setter
        public Builder udpOptions(@Nullable SecurityListEgressSecurityRuleUdpOptions udpOptions) {

            this.udpOptions = udpOptions;
            return this;
        }
        public SecurityListEgressSecurityRule build() {
            final var _resultValue = new SecurityListEgressSecurityRule();
            _resultValue.description = description;
            _resultValue.destination = destination;
            _resultValue.destinationType = destinationType;
            _resultValue.icmpOptions = icmpOptions;
            _resultValue.protocol = protocol;
            _resultValue.stateless = stateless;
            _resultValue.tcpOptions = tcpOptions;
            _resultValue.udpOptions = udpOptions;
            return _resultValue;
        }
    }
}
