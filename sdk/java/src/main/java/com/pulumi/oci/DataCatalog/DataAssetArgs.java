// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataAssetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataAssetArgs Empty = new DataAssetArgs();

    /**
     * Unique catalog identifier.
     * 
     */
    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    /**
     * @return Unique catalog identifier.
     * 
     */
    public Output<String> catalogId() {
        return this.catalogId;
    }

    /**
     * (Updatable) Detailed description of the data asset.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Detailed description of the data asset.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="typeKey", required=true)
    private Output<String> typeKey;

    /**
     * @return The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> typeKey() {
        return this.typeKey;
    }

    private DataAssetArgs() {}

    private DataAssetArgs(DataAssetArgs $) {
        this.catalogId = $.catalogId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.properties = $.properties;
        this.typeKey = $.typeKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataAssetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataAssetArgs $;

        public Builder() {
            $ = new DataAssetArgs();
        }

        public Builder(DataAssetArgs defaults) {
            $ = new DataAssetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId Unique catalog identifier.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param description (Updatable) Detailed description of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Detailed description of the data asset.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param typeKey The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder typeKey(Output<String> typeKey) {
            $.typeKey = typeKey;
            return this;
        }

        /**
         * @param typeKey The key of the data asset type. This can be obtained via the &#39;/types&#39; endpoint.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder typeKey(String typeKey) {
            return typeKey(Output.of(typeKey));
        }

        public DataAssetArgs build() {
            if ($.catalogId == null) {
                throw new MissingRequiredPropertyException("DataAssetArgs", "catalogId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("DataAssetArgs", "displayName");
            }
            if ($.typeKey == null) {
                throw new MissingRequiredPropertyException("DataAssetArgs", "typeKey");
            }
            return $;
        }
    }

}
