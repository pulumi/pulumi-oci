// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCatalogTypeResult {
    /**
     * @return The data catalog&#39;s OCID.
     * 
     */
    private String catalogId;
    /**
     * @return Detailed description of the type.
     * 
     */
    private @Nullable String description;
    /**
     * @return Mapping type equivalence in the external system.
     * 
     */
    private @Nullable String externalTypeName;
    private @Nullable List<String> fields;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates whether the type is approved for use as a classifying object.
     * 
     */
    private @Nullable Boolean isApproved;
    /**
     * @return Indicates whether the type is internal, making it unavailable for use by metadata elements.
     * 
     */
    private @Nullable Boolean isInternal;
    /**
     * @return Indicates whether the type can be used for tagging metadata elements.
     * 
     */
    private @Nullable Boolean isTag;
    /**
     * @return Unique type key that is immutable.
     * 
     */
    private @Nullable String key;
    /**
     * @return The immutable name of the type.
     * 
     */
    private @Nullable String name;
    /**
     * @return A map of arrays which defines the type specific properties, both required and optional. The map keys are category names and the values are arrays contiaing all property details. Every property is contained inside of a category. Most types have required properties within the &#34;default&#34; category. Example: `{ &#34;properties&#34;: { &#34;default&#34;: { &#34;attributes:&#34;: [ { &#34;name&#34;: &#34;host&#34;, &#34;type&#34;: &#34;string&#34;, &#34;isRequired&#34;: true, &#34;isUpdatable&#34;: false }, ... ] } } }`
     * 
     */
    private @Nullable Map<String,Object> properties;
    /**
     * @return The current state of the type.
     * 
     */
    private @Nullable String state;
    /**
     * @return Indicates the category this type belongs to. For instance, data assets, connections.
     * 
     */
    private @Nullable String typeCategory;
    private String typeKey;
    /**
     * @return URI to the type instance in the API.
     * 
     */
    private @Nullable String uri;

    private GetCatalogTypeResult() {}
    /**
     * @return The data catalog&#39;s OCID.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return Detailed description of the type.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Mapping type equivalence in the external system.
     * 
     */
    public Optional<String> externalTypeName() {
        return Optional.ofNullable(this.externalTypeName);
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether the type is approved for use as a classifying object.
     * 
     */
    public Optional<Boolean> isApproved() {
        return Optional.ofNullable(this.isApproved);
    }
    /**
     * @return Indicates whether the type is internal, making it unavailable for use by metadata elements.
     * 
     */
    public Optional<Boolean> isInternal() {
        return Optional.ofNullable(this.isInternal);
    }
    /**
     * @return Indicates whether the type can be used for tagging metadata elements.
     * 
     */
    public Optional<Boolean> isTag() {
        return Optional.ofNullable(this.isTag);
    }
    /**
     * @return Unique type key that is immutable.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return The immutable name of the type.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A map of arrays which defines the type specific properties, both required and optional. The map keys are category names and the values are arrays contiaing all property details. Every property is contained inside of a category. Most types have required properties within the &#34;default&#34; category. Example: `{ &#34;properties&#34;: { &#34;default&#34;: { &#34;attributes:&#34;: [ { &#34;name&#34;: &#34;host&#34;, &#34;type&#34;: &#34;string&#34;, &#34;isRequired&#34;: true, &#34;isUpdatable&#34;: false }, ... ] } } }`
     * 
     */
    public Map<String,Object> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    /**
     * @return The current state of the type.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Indicates the category this type belongs to. For instance, data assets, connections.
     * 
     */
    public Optional<String> typeCategory() {
        return Optional.ofNullable(this.typeCategory);
    }
    public String typeKey() {
        return this.typeKey;
    }
    /**
     * @return URI to the type instance in the API.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogId;
        private @Nullable String description;
        private @Nullable String externalTypeName;
        private @Nullable List<String> fields;
        private @Nullable String id;
        private @Nullable Boolean isApproved;
        private @Nullable Boolean isInternal;
        private @Nullable Boolean isTag;
        private @Nullable String key;
        private @Nullable String name;
        private @Nullable Map<String,Object> properties;
        private @Nullable String state;
        private @Nullable String typeCategory;
        private String typeKey;
        private @Nullable String uri;
        public Builder() {}
        public Builder(GetCatalogTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.description = defaults.description;
    	      this.externalTypeName = defaults.externalTypeName;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.isApproved = defaults.isApproved;
    	      this.isInternal = defaults.isInternal;
    	      this.isTag = defaults.isTag;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.state = defaults.state;
    	      this.typeCategory = defaults.typeCategory;
    	      this.typeKey = defaults.typeKey;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder catalogId(String catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externalTypeName(@Nullable String externalTypeName) {
            this.externalTypeName = externalTypeName;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isApproved(@Nullable Boolean isApproved) {
            this.isApproved = isApproved;
            return this;
        }
        @CustomType.Setter
        public Builder isInternal(@Nullable Boolean isInternal) {
            this.isInternal = isInternal;
            return this;
        }
        @CustomType.Setter
        public Builder isTag(@Nullable Boolean isTag) {
            this.isTag = isTag;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable Map<String,Object> properties) {
            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder typeCategory(@Nullable String typeCategory) {
            this.typeCategory = typeCategory;
            return this;
        }
        @CustomType.Setter
        public Builder typeKey(String typeKey) {
            this.typeKey = Objects.requireNonNull(typeKey);
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        public GetCatalogTypeResult build() {
            final var o = new GetCatalogTypeResult();
            o.catalogId = catalogId;
            o.description = description;
            o.externalTypeName = externalTypeName;
            o.fields = fields;
            o.id = id;
            o.isApproved = isApproved;
            o.isInternal = isInternal;
            o.isTag = isTag;
            o.key = key;
            o.name = name;
            o.properties = properties;
            o.state = state;
            o.typeCategory = typeCategory;
            o.typeKey = typeKey;
            o.uri = uri;
            return o;
        }
    }
}
