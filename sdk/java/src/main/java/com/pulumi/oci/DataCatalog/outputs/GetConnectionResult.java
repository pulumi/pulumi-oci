// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionResult {
    private String catalogId;
    private String connectionKey;
    /**
     * @return OCID of the user who created the connection.
     * 
     */
    private String createdById;
    /**
     * @return Unique key of the parent data asset.
     * 
     */
    private String dataAssetKey;
    /**
     * @return A description of the connection.
     * 
     */
    private String description;
    /**
     * @return A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    private Map<String,Object> encProperties;
    /**
     * @return Unique external key of this object from the source system.
     * 
     */
    private String externalKey;
    private @Nullable List<String> fields;
    private String id;
    /**
     * @return Indicates whether this connection is the default connection.
     * 
     */
    private Boolean isDefault;
    /**
     * @return Unique connection key that is immutable.
     * 
     */
    private String key;
    /**
     * @return A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
     * 
     */
    private Map<String,Object> properties;
    /**
     * @return The current state of the connection.
     * 
     */
    private String state;
    /**
     * @return The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private String timeStatusUpdated;
    /**
     * @return The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    private String typeKey;
    /**
     * @return OCID of the user who modified the connection.
     * 
     */
    private String updatedById;
    /**
     * @return URI to the connection instance in the API.
     * 
     */
    private String uri;

    private GetConnectionResult() {}
    public String catalogId() {
        return this.catalogId;
    }
    public String connectionKey() {
        return this.connectionKey;
    }
    /**
     * @return OCID of the user who created the connection.
     * 
     */
    public String createdById() {
        return this.createdById;
    }
    /**
     * @return Unique key of the parent data asset.
     * 
     */
    public String dataAssetKey() {
        return this.dataAssetKey;
    }
    /**
     * @return A description of the connection.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public Map<String,Object> encProperties() {
        return this.encProperties;
    }
    /**
     * @return Unique external key of this object from the source system.
     * 
     */
    public String externalKey() {
        return this.externalKey;
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether this connection is the default connection.
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Unique connection key that is immutable.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
     * 
     */
    public Map<String,Object> properties() {
        return this.properties;
    }
    /**
     * @return The current state of the connection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public String timeStatusUpdated() {
        return this.timeStatusUpdated;
    }
    /**
     * @return The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    public String typeKey() {
        return this.typeKey;
    }
    /**
     * @return OCID of the user who modified the connection.
     * 
     */
    public String updatedById() {
        return this.updatedById;
    }
    /**
     * @return URI to the connection instance in the API.
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogId;
        private String connectionKey;
        private String createdById;
        private String dataAssetKey;
        private String description;
        private String displayName;
        private Map<String,Object> encProperties;
        private String externalKey;
        private @Nullable List<String> fields;
        private String id;
        private Boolean isDefault;
        private String key;
        private Map<String,Object> properties;
        private String state;
        private String timeCreated;
        private String timeStatusUpdated;
        private String timeUpdated;
        private String typeKey;
        private String updatedById;
        private String uri;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.connectionKey = defaults.connectionKey;
    	      this.createdById = defaults.createdById;
    	      this.dataAssetKey = defaults.dataAssetKey;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.encProperties = defaults.encProperties;
    	      this.externalKey = defaults.externalKey;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.isDefault = defaults.isDefault;
    	      this.key = defaults.key;
    	      this.properties = defaults.properties;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStatusUpdated = defaults.timeStatusUpdated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.typeKey = defaults.typeKey;
    	      this.updatedById = defaults.updatedById;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder catalogId(String catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        @CustomType.Setter
        public Builder connectionKey(String connectionKey) {
            this.connectionKey = Objects.requireNonNull(connectionKey);
            return this;
        }
        @CustomType.Setter
        public Builder createdById(String createdById) {
            this.createdById = Objects.requireNonNull(createdById);
            return this;
        }
        @CustomType.Setter
        public Builder dataAssetKey(String dataAssetKey) {
            this.dataAssetKey = Objects.requireNonNull(dataAssetKey);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder encProperties(Map<String,Object> encProperties) {
            this.encProperties = Objects.requireNonNull(encProperties);
            return this;
        }
        @CustomType.Setter
        public Builder externalKey(String externalKey) {
            this.externalKey = Objects.requireNonNull(externalKey);
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            this.isDefault = Objects.requireNonNull(isDefault);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder properties(Map<String,Object> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeStatusUpdated(String timeStatusUpdated) {
            this.timeStatusUpdated = Objects.requireNonNull(timeStatusUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder typeKey(String typeKey) {
            this.typeKey = Objects.requireNonNull(typeKey);
            return this;
        }
        @CustomType.Setter
        public Builder updatedById(String updatedById) {
            this.updatedById = Objects.requireNonNull(updatedById);
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public GetConnectionResult build() {
            final var o = new GetConnectionResult();
            o.catalogId = catalogId;
            o.connectionKey = connectionKey;
            o.createdById = createdById;
            o.dataAssetKey = dataAssetKey;
            o.description = description;
            o.displayName = displayName;
            o.encProperties = encProperties;
            o.externalKey = externalKey;
            o.fields = fields;
            o.id = id;
            o.isDefault = isDefault;
            o.key = key;
            o.properties = properties;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeStatusUpdated = timeStatusUpdated;
            o.timeUpdated = timeUpdated;
            o.typeKey = typeKey;
            o.updatedById = updatedById;
            o.uri = uri;
            return o;
        }
    }
}
