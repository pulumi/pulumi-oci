// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionsConnectionCollectionItem {
    /**
     * @return Unique catalog identifier.
     * 
     */
    private String catalogId;
    /**
     * @return OCID of the user who created the resource.
     * 
     */
    private @Nullable String createdById;
    /**
     * @return Unique data asset key.
     * 
     */
    private String dataAssetKey;
    /**
     * @return A description of the connection.
     * 
     */
    private @Nullable String description;
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    private String displayName;
    private @Nullable Map<String,Object> encProperties;
    /**
     * @return Unique external identifier of this resource in the external source system.
     * 
     */
    private @Nullable String externalKey;
    /**
     * @return Indicates whether this connection is the default connection.
     * 
     */
    private @Nullable Boolean isDefault;
    /**
     * @return Unique connection key that is immutable.
     * 
     */
    private @Nullable String key;
    /**
     * @return A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
     * 
     */
    private Map<String,Object> properties;
    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    private @Nullable String state;
    /**
     * @return Time that the resource was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return Time that the resource&#39;s status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private @Nullable String timeStatusUpdated;
    /**
     * @return Time that the resource was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    private String typeKey;
    /**
     * @return OCID of the user who updated the resource.
     * 
     */
    private @Nullable String updatedById;
    /**
     * @return URI to the connection instance in the API.
     * 
     */
    private @Nullable String uri;

    private GetConnectionsConnectionCollectionItem() {}
    /**
     * @return Unique catalog identifier.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return OCID of the user who created the resource.
     * 
     */
    public Optional<String> createdById() {
        return Optional.ofNullable(this.createdById);
    }
    /**
     * @return Unique data asset key.
     * 
     */
    public String dataAssetKey() {
        return this.dataAssetKey;
    }
    /**
     * @return A description of the connection.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public Map<String,Object> encProperties() {
        return this.encProperties == null ? Map.of() : this.encProperties;
    }
    /**
     * @return Unique external identifier of this resource in the external source system.
     * 
     */
    public Optional<String> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }
    /**
     * @return Indicates whether this connection is the default connection.
     * 
     */
    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }
    /**
     * @return Unique connection key that is immutable.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it&#39;s set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the &#34;default&#34; category. Example: `{&#34;properties&#34;: { &#34;default&#34;: { &#34;username&#34;: &#34;user1&#34;}}}`
     * 
     */
    public Map<String,Object> properties() {
        return this.properties;
    }
    /**
     * @return A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Time that the resource was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return Time that the resource&#39;s status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<String> timeStatusUpdated() {
        return Optional.ofNullable(this.timeStatusUpdated);
    }
    /**
     * @return Time that the resource was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    public String typeKey() {
        return this.typeKey;
    }
    /**
     * @return OCID of the user who updated the resource.
     * 
     */
    public Optional<String> updatedById() {
        return Optional.ofNullable(this.updatedById);
    }
    /**
     * @return URI to the connection instance in the API.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnectionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogId;
        private @Nullable String createdById;
        private String dataAssetKey;
        private @Nullable String description;
        private String displayName;
        private @Nullable Map<String,Object> encProperties;
        private @Nullable String externalKey;
        private @Nullable Boolean isDefault;
        private @Nullable String key;
        private Map<String,Object> properties;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeStatusUpdated;
        private @Nullable String timeUpdated;
        private String typeKey;
        private @Nullable String updatedById;
        private @Nullable String uri;
        public Builder() {}
        public Builder(GetConnectionsConnectionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.createdById = defaults.createdById;
    	      this.dataAssetKey = defaults.dataAssetKey;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.encProperties = defaults.encProperties;
    	      this.externalKey = defaults.externalKey;
    	      this.isDefault = defaults.isDefault;
    	      this.key = defaults.key;
    	      this.properties = defaults.properties;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStatusUpdated = defaults.timeStatusUpdated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.typeKey = defaults.typeKey;
    	      this.updatedById = defaults.updatedById;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder catalogId(String catalogId) {
            this.catalogId = Objects.requireNonNull(catalogId);
            return this;
        }
        @CustomType.Setter
        public Builder createdById(@Nullable String createdById) {
            this.createdById = createdById;
            return this;
        }
        @CustomType.Setter
        public Builder dataAssetKey(String dataAssetKey) {
            this.dataAssetKey = Objects.requireNonNull(dataAssetKey);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder encProperties(@Nullable Map<String,Object> encProperties) {
            this.encProperties = encProperties;
            return this;
        }
        @CustomType.Setter
        public Builder externalKey(@Nullable String externalKey) {
            this.externalKey = externalKey;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(@Nullable Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder properties(Map<String,Object> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeStatusUpdated(@Nullable String timeStatusUpdated) {
            this.timeStatusUpdated = timeStatusUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder typeKey(String typeKey) {
            this.typeKey = Objects.requireNonNull(typeKey);
            return this;
        }
        @CustomType.Setter
        public Builder updatedById(@Nullable String updatedById) {
            this.updatedById = updatedById;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        public GetConnectionsConnectionCollectionItem build() {
            final var o = new GetConnectionsConnectionCollectionItem();
            o.catalogId = catalogId;
            o.createdById = createdById;
            o.dataAssetKey = dataAssetKey;
            o.description = description;
            o.displayName = displayName;
            o.encProperties = encProperties;
            o.externalKey = externalKey;
            o.isDefault = isDefault;
            o.key = key;
            o.properties = properties;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeStatusUpdated = timeStatusUpdated;
            o.timeUpdated = timeUpdated;
            o.typeKey = typeKey;
            o.updatedById = updatedById;
            o.uri = uri;
            return o;
        }
    }
}
