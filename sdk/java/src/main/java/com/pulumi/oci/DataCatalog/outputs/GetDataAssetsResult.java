// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataCatalog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataCatalog.outputs.GetDataAssetsDataAssetCollection;
import com.pulumi.oci.DataCatalog.outputs.GetDataAssetsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataAssetsResult {
    /**
     * @return The data catalog&#39;s OCID.
     * 
     */
    private String catalogId;
    /**
     * @return OCID of the user who created the data asset.
     * 
     */
    private @Nullable String createdById;
    /**
     * @return The list of data_asset_collection.
     * 
     */
    private List<GetDataAssetsDataAssetCollection> dataAssetCollections;
    /**
     * @return A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable String displayNameContains;
    /**
     * @return External URI that can be used to reference the object. Format will differ based on the type of object.
     * 
     */
    private @Nullable String externalKey;
    private @Nullable List<String> fields;
    private @Nullable List<GetDataAssetsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current state of the data asset.
     * 
     */
    private @Nullable String state;
    /**
     * @return The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    private @Nullable String typeKey;

    private GetDataAssetsResult() {}
    /**
     * @return The data catalog&#39;s OCID.
     * 
     */
    public String catalogId() {
        return this.catalogId;
    }
    /**
     * @return OCID of the user who created the data asset.
     * 
     */
    public Optional<String> createdById() {
        return Optional.ofNullable(this.createdById);
    }
    /**
     * @return The list of data_asset_collection.
     * 
     */
    public List<GetDataAssetsDataAssetCollection> dataAssetCollections() {
        return this.dataAssetCollections;
    }
    /**
     * @return A user-friendly display name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Optional<String> displayNameContains() {
        return Optional.ofNullable(this.displayNameContains);
    }
    /**
     * @return External URI that can be used to reference the object. Format will differ based on the type of object.
     * 
     */
    public Optional<String> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public List<GetDataAssetsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of the data asset.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The key of the object type. Type key&#39;s can be found via the &#39;/types&#39; endpoint.
     * 
     */
    public Optional<String> typeKey() {
        return Optional.ofNullable(this.typeKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataAssetsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String catalogId;
        private @Nullable String createdById;
        private List<GetDataAssetsDataAssetCollection> dataAssetCollections;
        private @Nullable String displayName;
        private @Nullable String displayNameContains;
        private @Nullable String externalKey;
        private @Nullable List<String> fields;
        private @Nullable List<GetDataAssetsFilter> filters;
        private String id;
        private @Nullable String state;
        private @Nullable String typeKey;
        public Builder() {}
        public Builder(GetDataAssetsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.catalogId = defaults.catalogId;
    	      this.createdById = defaults.createdById;
    	      this.dataAssetCollections = defaults.dataAssetCollections;
    	      this.displayName = defaults.displayName;
    	      this.displayNameContains = defaults.displayNameContains;
    	      this.externalKey = defaults.externalKey;
    	      this.fields = defaults.fields;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.typeKey = defaults.typeKey;
        }

        @CustomType.Setter
        public Builder catalogId(String catalogId) {
            if (catalogId == null) {
              throw new MissingRequiredPropertyException("GetDataAssetsResult", "catalogId");
            }
            this.catalogId = catalogId;
            return this;
        }
        @CustomType.Setter
        public Builder createdById(@Nullable String createdById) {

            this.createdById = createdById;
            return this;
        }
        @CustomType.Setter
        public Builder dataAssetCollections(List<GetDataAssetsDataAssetCollection> dataAssetCollections) {
            if (dataAssetCollections == null) {
              throw new MissingRequiredPropertyException("GetDataAssetsResult", "dataAssetCollections");
            }
            this.dataAssetCollections = dataAssetCollections;
            return this;
        }
        public Builder dataAssetCollections(GetDataAssetsDataAssetCollection... dataAssetCollections) {
            return dataAssetCollections(List.of(dataAssetCollections));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameContains(@Nullable String displayNameContains) {

            this.displayNameContains = displayNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder externalKey(@Nullable String externalKey) {

            this.externalKey = externalKey;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {

            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDataAssetsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDataAssetsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataAssetsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder typeKey(@Nullable String typeKey) {

            this.typeKey = typeKey;
            return this;
        }
        public GetDataAssetsResult build() {
            final var _resultValue = new GetDataAssetsResult();
            _resultValue.catalogId = catalogId;
            _resultValue.createdById = createdById;
            _resultValue.dataAssetCollections = dataAssetCollections;
            _resultValue.displayName = displayName;
            _resultValue.displayNameContains = displayNameContains;
            _resultValue.externalKey = externalKey;
            _resultValue.fields = fields;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.typeKey = typeKey;
            return _resultValue;
        }
    }
}
