// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistriesFilter;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistriesRegistrySummaryCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegistriesResult {
    /**
     * @return Compartment Identifier
     * 
     */
    private String compartmentId;
    private @Nullable List<GetRegistriesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isDeepLookup;
    private @Nullable String name;
    /**
     * @return The list of registry_summary_collection.
     * 
     */
    private List<GetRegistriesRegistrySummaryCollection> registrySummaryCollections;
    /**
     * @return Lifecycle states for registries in the Data Connectivity Management Service CREATING - The resource is being created and may not be usable until the entire metadata is defined. UPDATING - The resource is being updated and may not be usable until all changes are commited. DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access. INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons. DELETED  - The resource has been deleted and isn&#39;t available. FAILED   - The resource is in a failed state due to validation or other errors.
     * 
     */
    private @Nullable String state;

    private GetRegistriesResult() {}
    /**
     * @return Compartment Identifier
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetRegistriesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isDeepLookup() {
        return Optional.ofNullable(this.isDeepLookup);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The list of registry_summary_collection.
     * 
     */
    public List<GetRegistriesRegistrySummaryCollection> registrySummaryCollections() {
        return this.registrySummaryCollections;
    }
    /**
     * @return Lifecycle states for registries in the Data Connectivity Management Service CREATING - The resource is being created and may not be usable until the entire metadata is defined. UPDATING - The resource is being updated and may not be usable until all changes are commited. DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access. INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons. DELETED  - The resource has been deleted and isn&#39;t available. FAILED   - The resource is in a failed state due to validation or other errors.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistriesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetRegistriesFilter> filters;
        private String id;
        private @Nullable Boolean isDeepLookup;
        private @Nullable String name;
        private List<GetRegistriesRegistrySummaryCollection> registrySummaryCollections;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetRegistriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isDeepLookup = defaults.isDeepLookup;
    	      this.name = defaults.name;
    	      this.registrySummaryCollections = defaults.registrySummaryCollections;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRegistriesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRegistriesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDeepLookup(@Nullable Boolean isDeepLookup) {
            this.isDeepLookup = isDeepLookup;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder registrySummaryCollections(List<GetRegistriesRegistrySummaryCollection> registrySummaryCollections) {
            this.registrySummaryCollections = Objects.requireNonNull(registrySummaryCollections);
            return this;
        }
        public Builder registrySummaryCollections(GetRegistriesRegistrySummaryCollection... registrySummaryCollections) {
            return registrySummaryCollections(List.of(registrySummaryCollections));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetRegistriesResult build() {
            final var o = new GetRegistriesResult();
            o.compartmentId = compartmentId;
            o.filters = filters;
            o.id = id;
            o.isDeepLookup = isDeepLookup;
            o.name = name;
            o.registrySummaryCollections = registrySummaryCollections;
            o.state = state;
            return o;
        }
    }
}
