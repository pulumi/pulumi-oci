// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnection;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadata;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadata;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRegistryDataAssetsDataAssetSummaryCollectionItem {
    /**
     * @return Additional properties for the data asset.
     * 
     */
    private Map<String,Object> assetProperties;
    /**
     * @return The default connection key.
     * 
     */
    private GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnection defaultConnection;
    /**
     * @return A user-defined description for the object.
     * 
     */
    private String description;
    /**
     * @return The list of endpoints with which this data asset is associated.
     * 
     */
    private List<String> endPoints;
    /**
     * @return The external key of the object.
     * 
     */
    private String externalKey;
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    private String identifier;
    /**
     * @return The identifying key for the object.
     * 
     */
    private String key;
    /**
     * @return A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     * 
     */
    private GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadata metadata;
    /**
     * @return The property which differentiates the subtypes.
     * 
     */
    private String modelType;
    /**
     * @return The model version of an object.
     * 
     */
    private String modelVersion;
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    private String name;
    /**
     * @return The type system maps from and to a type.
     * 
     */
    private GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem nativeTypeSystem;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private Integer objectVersion;
    /**
     * @return All the properties for the data asset in a key-value map format.
     * 
     */
    private Map<String,Object> properties;
    /**
     * @return The registry OCID.
     * 
     */
    private String registryId;
    /**
     * @return Information about the object and its parent.
     * 
     */
    private GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadata registryMetadata;
    /**
     * @return Specific DataAsset Type
     * 
     */
    private String type;

    private GetRegistryDataAssetsDataAssetSummaryCollectionItem() {}
    /**
     * @return Additional properties for the data asset.
     * 
     */
    public Map<String,Object> assetProperties() {
        return this.assetProperties;
    }
    /**
     * @return The default connection key.
     * 
     */
    public GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnection defaultConnection() {
        return this.defaultConnection;
    }
    /**
     * @return A user-defined description for the object.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The list of endpoints with which this data asset is associated.
     * 
     */
    public List<String> endPoints() {
        return this.endPoints;
    }
    /**
     * @return The external key of the object.
     * 
     */
    public String externalKey() {
        return this.externalKey;
    }
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return The identifying key for the object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     * 
     */
    public GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadata metadata() {
        return this.metadata;
    }
    /**
     * @return The property which differentiates the subtypes.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The model version of an object.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type system maps from and to a type.
     * 
     */
    public GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem nativeTypeSystem() {
        return this.nativeTypeSystem;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return All the properties for the data asset in a key-value map format.
     * 
     */
    public Map<String,Object> properties() {
        return this.properties;
    }
    /**
     * @return The registry OCID.
     * 
     */
    public String registryId() {
        return this.registryId;
    }
    /**
     * @return Information about the object and its parent.
     * 
     */
    public GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadata registryMetadata() {
        return this.registryMetadata;
    }
    /**
     * @return Specific DataAsset Type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryDataAssetsDataAssetSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> assetProperties;
        private GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnection defaultConnection;
        private String description;
        private List<String> endPoints;
        private String externalKey;
        private String identifier;
        private String key;
        private GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadata metadata;
        private String modelType;
        private String modelVersion;
        private String name;
        private GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem nativeTypeSystem;
        private Integer objectStatus;
        private Integer objectVersion;
        private Map<String,Object> properties;
        private String registryId;
        private GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadata registryMetadata;
        private String type;
        public Builder() {}
        public Builder(GetRegistryDataAssetsDataAssetSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetProperties = defaults.assetProperties;
    	      this.defaultConnection = defaults.defaultConnection;
    	      this.description = defaults.description;
    	      this.endPoints = defaults.endPoints;
    	      this.externalKey = defaults.externalKey;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.metadata = defaults.metadata;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.nativeTypeSystem = defaults.nativeTypeSystem;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.properties = defaults.properties;
    	      this.registryId = defaults.registryId;
    	      this.registryMetadata = defaults.registryMetadata;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder assetProperties(Map<String,Object> assetProperties) {
            this.assetProperties = Objects.requireNonNull(assetProperties);
            return this;
        }
        @CustomType.Setter
        public Builder defaultConnection(GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnection defaultConnection) {
            this.defaultConnection = Objects.requireNonNull(defaultConnection);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder endPoints(List<String> endPoints) {
            this.endPoints = Objects.requireNonNull(endPoints);
            return this;
        }
        public Builder endPoints(String... endPoints) {
            return endPoints(List.of(endPoints));
        }
        @CustomType.Setter
        public Builder externalKey(String externalKey) {
            this.externalKey = Objects.requireNonNull(externalKey);
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadata metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nativeTypeSystem(GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystem nativeTypeSystem) {
            this.nativeTypeSystem = Objects.requireNonNull(nativeTypeSystem);
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        @CustomType.Setter
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        @CustomType.Setter
        public Builder properties(Map<String,Object> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        @CustomType.Setter
        public Builder registryId(String registryId) {
            this.registryId = Objects.requireNonNull(registryId);
            return this;
        }
        @CustomType.Setter
        public Builder registryMetadata(GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadata registryMetadata) {
            this.registryMetadata = Objects.requireNonNull(registryMetadata);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetRegistryDataAssetsDataAssetSummaryCollectionItem build() {
            final var o = new GetRegistryDataAssetsDataAssetSummaryCollectionItem();
            o.assetProperties = assetProperties;
            o.defaultConnection = defaultConnection;
            o.description = description;
            o.endPoints = endPoints;
            o.externalKey = externalKey;
            o.identifier = identifier;
            o.key = key;
            o.metadata = metadata;
            o.modelType = modelType;
            o.modelVersion = modelVersion;
            o.name = name;
            o.nativeTypeSystem = nativeTypeSystem;
            o.objectStatus = objectStatus;
            o.objectVersion = objectVersion;
            o.properties = properties;
            o.registryId = registryId;
            o.registryMetadata = registryMetadata;
            o.type = type;
            return o;
        }
    }
}
