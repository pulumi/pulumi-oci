// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsDataAssetSummaryCollection;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryDataAssetsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegistryDataAssetsResult {
    /**
     * @return The list of data_asset_summary_collection.
     * 
     */
    private List<GetRegistryDataAssetsDataAssetSummaryCollection> dataAssetSummaryCollections;
    private @Nullable List<String> endpointIds;
    private @Nullable List<String> excludeEndpointIds;
    private @Nullable List<String> excludeTypes;
    private @Nullable String favoritesQueryParam;
    private @Nullable List<String> fields;
    private @Nullable List<GetRegistryDataAssetsFilter> filters;
    private @Nullable String folderId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable List<String> includeTypes;
    /**
     * @return Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private @Nullable String name;
    private String registryId;
    /**
     * @return Specific DataAsset Type
     * 
     */
    private @Nullable String type;

    private GetRegistryDataAssetsResult() {}
    /**
     * @return The list of data_asset_summary_collection.
     * 
     */
    public List<GetRegistryDataAssetsDataAssetSummaryCollection> dataAssetSummaryCollections() {
        return this.dataAssetSummaryCollections;
    }
    public List<String> endpointIds() {
        return this.endpointIds == null ? List.of() : this.endpointIds;
    }
    public List<String> excludeEndpointIds() {
        return this.excludeEndpointIds == null ? List.of() : this.excludeEndpointIds;
    }
    public List<String> excludeTypes() {
        return this.excludeTypes == null ? List.of() : this.excludeTypes;
    }
    public Optional<String> favoritesQueryParam() {
        return Optional.ofNullable(this.favoritesQueryParam);
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public List<GetRegistryDataAssetsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> folderId() {
        return Optional.ofNullable(this.folderId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> includeTypes() {
        return this.includeTypes == null ? List.of() : this.includeTypes;
    }
    /**
     * @return Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String registryId() {
        return this.registryId;
    }
    /**
     * @return Specific DataAsset Type
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryDataAssetsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRegistryDataAssetsDataAssetSummaryCollection> dataAssetSummaryCollections;
        private @Nullable List<String> endpointIds;
        private @Nullable List<String> excludeEndpointIds;
        private @Nullable List<String> excludeTypes;
        private @Nullable String favoritesQueryParam;
        private @Nullable List<String> fields;
        private @Nullable List<GetRegistryDataAssetsFilter> filters;
        private @Nullable String folderId;
        private String id;
        private @Nullable List<String> includeTypes;
        private @Nullable String name;
        private String registryId;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetRegistryDataAssetsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataAssetSummaryCollections = defaults.dataAssetSummaryCollections;
    	      this.endpointIds = defaults.endpointIds;
    	      this.excludeEndpointIds = defaults.excludeEndpointIds;
    	      this.excludeTypes = defaults.excludeTypes;
    	      this.favoritesQueryParam = defaults.favoritesQueryParam;
    	      this.fields = defaults.fields;
    	      this.filters = defaults.filters;
    	      this.folderId = defaults.folderId;
    	      this.id = defaults.id;
    	      this.includeTypes = defaults.includeTypes;
    	      this.name = defaults.name;
    	      this.registryId = defaults.registryId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder dataAssetSummaryCollections(List<GetRegistryDataAssetsDataAssetSummaryCollection> dataAssetSummaryCollections) {
            this.dataAssetSummaryCollections = Objects.requireNonNull(dataAssetSummaryCollections);
            return this;
        }
        public Builder dataAssetSummaryCollections(GetRegistryDataAssetsDataAssetSummaryCollection... dataAssetSummaryCollections) {
            return dataAssetSummaryCollections(List.of(dataAssetSummaryCollections));
        }
        @CustomType.Setter
        public Builder endpointIds(@Nullable List<String> endpointIds) {
            this.endpointIds = endpointIds;
            return this;
        }
        public Builder endpointIds(String... endpointIds) {
            return endpointIds(List.of(endpointIds));
        }
        @CustomType.Setter
        public Builder excludeEndpointIds(@Nullable List<String> excludeEndpointIds) {
            this.excludeEndpointIds = excludeEndpointIds;
            return this;
        }
        public Builder excludeEndpointIds(String... excludeEndpointIds) {
            return excludeEndpointIds(List.of(excludeEndpointIds));
        }
        @CustomType.Setter
        public Builder excludeTypes(@Nullable List<String> excludeTypes) {
            this.excludeTypes = excludeTypes;
            return this;
        }
        public Builder excludeTypes(String... excludeTypes) {
            return excludeTypes(List.of(excludeTypes));
        }
        @CustomType.Setter
        public Builder favoritesQueryParam(@Nullable String favoritesQueryParam) {
            this.favoritesQueryParam = favoritesQueryParam;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetRegistryDataAssetsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRegistryDataAssetsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder folderId(@Nullable String folderId) {
            this.folderId = folderId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder includeTypes(@Nullable List<String> includeTypes) {
            this.includeTypes = includeTypes;
            return this;
        }
        public Builder includeTypes(String... includeTypes) {
            return includeTypes(List.of(includeTypes));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder registryId(String registryId) {
            this.registryId = Objects.requireNonNull(registryId);
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public GetRegistryDataAssetsResult build() {
            final var o = new GetRegistryDataAssetsResult();
            o.dataAssetSummaryCollections = dataAssetSummaryCollections;
            o.endpointIds = endpointIds;
            o.excludeEndpointIds = excludeEndpointIds;
            o.excludeTypes = excludeTypes;
            o.favoritesQueryParam = favoritesQueryParam;
            o.fields = fields;
            o.filters = filters;
            o.folderId = folderId;
            o.id = id;
            o.includeTypes = includeTypes;
            o.name = name;
            o.registryId = registryId;
            o.type = type;
            return o;
        }
    }
}
