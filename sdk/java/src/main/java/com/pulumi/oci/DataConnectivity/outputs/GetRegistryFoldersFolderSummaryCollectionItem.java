// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAsset;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryFoldersFolderSummaryCollectionItemParentRef;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegistryFoldersFolderSummaryCollectionItem {
    /**
     * @return The list of data assets that belong to the folder.
     * 
     */
    private List<GetRegistryFoldersFolderSummaryCollectionItemDataAsset> dataAssets;
    /**
     * @return User-defined description of the folder.
     * 
     */
    private String description;
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    private String identifier;
    /**
     * @return Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
     * 
     */
    private String key;
    /**
     * @return The type of the folder.
     * 
     */
    private String modelType;
    /**
     * @return The model version of an object.
     * 
     */
    private String modelVersion;
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    private String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private Integer objectVersion;
    /**
     * @return A reference to the parent object.
     * 
     */
    private GetRegistryFoldersFolderSummaryCollectionItemParentRef parentRef;
    /**
     * @return The registry OCID.
     * 
     */
    private String registryId;

    private GetRegistryFoldersFolderSummaryCollectionItem() {}
    /**
     * @return The list of data assets that belong to the folder.
     * 
     */
    public List<GetRegistryFoldersFolderSummaryCollectionItemDataAsset> dataAssets() {
        return this.dataAssets;
    }
    /**
     * @return User-defined description of the folder.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The type of the folder.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The model version of an object.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return A reference to the parent object.
     * 
     */
    public GetRegistryFoldersFolderSummaryCollectionItemParentRef parentRef() {
        return this.parentRef;
    }
    /**
     * @return The registry OCID.
     * 
     */
    public String registryId() {
        return this.registryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryFoldersFolderSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRegistryFoldersFolderSummaryCollectionItemDataAsset> dataAssets;
        private String description;
        private String identifier;
        private String key;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private Integer objectVersion;
        private GetRegistryFoldersFolderSummaryCollectionItemParentRef parentRef;
        private String registryId;
        public Builder() {}
        public Builder(GetRegistryFoldersFolderSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataAssets = defaults.dataAssets;
    	      this.description = defaults.description;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentRef = defaults.parentRef;
    	      this.registryId = defaults.registryId;
        }

        @CustomType.Setter
        public Builder dataAssets(List<GetRegistryFoldersFolderSummaryCollectionItemDataAsset> dataAssets) {
            this.dataAssets = Objects.requireNonNull(dataAssets);
            return this;
        }
        public Builder dataAssets(GetRegistryFoldersFolderSummaryCollectionItemDataAsset... dataAssets) {
            return dataAssets(List.of(dataAssets));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        @CustomType.Setter
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        @CustomType.Setter
        public Builder parentRef(GetRegistryFoldersFolderSummaryCollectionItemParentRef parentRef) {
            this.parentRef = Objects.requireNonNull(parentRef);
            return this;
        }
        @CustomType.Setter
        public Builder registryId(String registryId) {
            this.registryId = Objects.requireNonNull(registryId);
            return this;
        }
        public GetRegistryFoldersFolderSummaryCollectionItem build() {
            final var o = new GetRegistryFoldersFolderSummaryCollectionItem();
            o.dataAssets = dataAssets;
            o.description = description;
            o.identifier = identifier;
            o.key = key;
            o.modelType = modelType;
            o.modelVersion = modelVersion;
            o.name = name;
            o.objectStatus = objectStatus;
            o.objectVersion = objectVersion;
            o.parentRef = parentRef;
            o.registryId = registryId;
            return o;
        }
    }
}
