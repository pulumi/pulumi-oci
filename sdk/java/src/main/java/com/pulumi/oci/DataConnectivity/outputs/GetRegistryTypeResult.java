// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryTypeDataAssetAttribute;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetRegistryTypeResult {
    /**
     * @return Mapping the connectionType as the key to the list of attributes as the value.
     * 
     */
    private Map<String,Object> connectionAttributes;
    /**
     * @return The list of attributes of the data asset.
     * 
     */
    private List<GetRegistryTypeDataAssetAttribute> dataAssetAttributes;
    private @Nullable List<String> fields;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String registryId;
    private String typeKey;

    private GetRegistryTypeResult() {}
    /**
     * @return Mapping the connectionType as the key to the list of attributes as the value.
     * 
     */
    public Map<String,Object> connectionAttributes() {
        return this.connectionAttributes;
    }
    /**
     * @return The list of attributes of the data asset.
     * 
     */
    public List<GetRegistryTypeDataAssetAttribute> dataAssetAttributes() {
        return this.dataAssetAttributes;
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String registryId() {
        return this.registryId;
    }
    public String typeKey() {
        return this.typeKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> connectionAttributes;
        private List<GetRegistryTypeDataAssetAttribute> dataAssetAttributes;
        private @Nullable List<String> fields;
        private String id;
        private String registryId;
        private String typeKey;
        public Builder() {}
        public Builder(GetRegistryTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionAttributes = defaults.connectionAttributes;
    	      this.dataAssetAttributes = defaults.dataAssetAttributes;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.registryId = defaults.registryId;
    	      this.typeKey = defaults.typeKey;
        }

        @CustomType.Setter
        public Builder connectionAttributes(Map<String,Object> connectionAttributes) {
            this.connectionAttributes = Objects.requireNonNull(connectionAttributes);
            return this;
        }
        @CustomType.Setter
        public Builder dataAssetAttributes(List<GetRegistryTypeDataAssetAttribute> dataAssetAttributes) {
            this.dataAssetAttributes = Objects.requireNonNull(dataAssetAttributes);
            return this;
        }
        public Builder dataAssetAttributes(GetRegistryTypeDataAssetAttribute... dataAssetAttributes) {
            return dataAssetAttributes(List.of(dataAssetAttributes));
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder registryId(String registryId) {
            this.registryId = Objects.requireNonNull(registryId);
            return this;
        }
        @CustomType.Setter
        public Builder typeKey(String typeKey) {
            this.typeKey = Objects.requireNonNull(typeKey);
            return this;
        }
        public GetRegistryTypeResult build() {
            final var o = new GetRegistryTypeResult();
            o.connectionAttributes = connectionAttributes;
            o.dataAssetAttributes = dataAssetAttributes;
            o.fields = fields;
            o.id = id;
            o.registryId = registryId;
            o.typeKey = typeKey;
            return o;
        }
    }
}
