// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryTypesFilter;
import com.pulumi.oci.DataConnectivity.outputs.GetRegistryTypesTypesSummaryCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegistryTypesResult {
    private @Nullable List<GetRegistryTypesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of of the attribute.
     * 
     */
    private @Nullable String name;
    private String registryId;
    private @Nullable String type;
    /**
     * @return The list of types_summary_collection.
     * 
     */
    private List<GetRegistryTypesTypesSummaryCollection> typesSummaryCollections;

    private GetRegistryTypesResult() {}
    public List<GetRegistryTypesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of of the attribute.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public String registryId() {
        return this.registryId;
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The list of types_summary_collection.
     * 
     */
    public List<GetRegistryTypesTypesSummaryCollection> typesSummaryCollections() {
        return this.typesSummaryCollections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryTypesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetRegistryTypesFilter> filters;
        private String id;
        private @Nullable String name;
        private String registryId;
        private @Nullable String type;
        private List<GetRegistryTypesTypesSummaryCollection> typesSummaryCollections;
        public Builder() {}
        public Builder(GetRegistryTypesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.registryId = defaults.registryId;
    	      this.type = defaults.type;
    	      this.typesSummaryCollections = defaults.typesSummaryCollections;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetRegistryTypesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRegistryTypesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder registryId(String registryId) {
            this.registryId = Objects.requireNonNull(registryId);
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder typesSummaryCollections(List<GetRegistryTypesTypesSummaryCollection> typesSummaryCollections) {
            this.typesSummaryCollections = Objects.requireNonNull(typesSummaryCollections);
            return this;
        }
        public Builder typesSummaryCollections(GetRegistryTypesTypesSummaryCollection... typesSummaryCollections) {
            return typesSummaryCollections(List.of(typesSummaryCollections));
        }
        public GetRegistryTypesResult build() {
            final var o = new GetRegistryTypesResult();
            o.filters = filters;
            o.id = id;
            o.name = name;
            o.registryId = registryId;
            o.type = type;
            o.typesSummaryCollections = typesSummaryCollections;
            return o;
        }
    }
}
