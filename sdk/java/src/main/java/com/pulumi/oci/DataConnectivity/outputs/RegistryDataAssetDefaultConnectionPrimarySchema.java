// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.RegistryDataAssetDefaultConnectionPrimarySchemaMetadata;
import com.pulumi.oci.DataConnectivity.outputs.RegistryDataAssetDefaultConnectionPrimarySchemaParentRef;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryDataAssetDefaultConnectionPrimarySchema {
    /**
     * @return (Updatable) The default connection key.
     * 
     */
    private @Nullable String defaultConnection;
    /**
     * @return (Updatable) A user-defined description for the object.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) The external key of the object.
     * 
     */
    private @Nullable String externalKey;
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    private String identifier;
    /**
     * @return (Updatable) Specifies whether the schema has containers.
     * 
     */
    private @Nullable Boolean isHasContainers;
    /**
     * @return (Updatable) The identifying key for the object.
     * 
     */
    private String key;
    /**
     * @return (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     * 
     */
    private @Nullable RegistryDataAssetDefaultConnectionPrimarySchemaMetadata metadata;
    /**
     * @return (Updatable) The property which differentiates the subtypes.
     * 
     */
    private String modelType;
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    private @Nullable String modelVersion;
    /**
     * @return (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private String name;
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private @Nullable Integer objectStatus;
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    private @Nullable Integer objectVersion;
    /**
     * @return (Updatable) A reference to the parent object.
     * 
     */
    private @Nullable RegistryDataAssetDefaultConnectionPrimarySchemaParentRef parentRef;
    /**
     * @return (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
     * 
     */
    private @Nullable String resourceName;

    private RegistryDataAssetDefaultConnectionPrimarySchema() {}
    /**
     * @return (Updatable) The default connection key.
     * 
     */
    public Optional<String> defaultConnection() {
        return Optional.ofNullable(this.defaultConnection);
    }
    /**
     * @return (Updatable) A user-defined description for the object.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) The external key of the object.
     * 
     */
    public Optional<String> externalKey() {
        return Optional.ofNullable(this.externalKey);
    }
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return (Updatable) Specifies whether the schema has containers.
     * 
     */
    public Optional<Boolean> isHasContainers() {
        return Optional.ofNullable(this.isHasContainers);
    }
    /**
     * @return (Updatable) The identifying key for the object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     * 
     */
    public Optional<RegistryDataAssetDefaultConnectionPrimarySchemaMetadata> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return (Updatable) The property which differentiates the subtypes.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<String> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }
    /**
     * @return (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Integer> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    public Optional<Integer> objectVersion() {
        return Optional.ofNullable(this.objectVersion);
    }
    /**
     * @return (Updatable) A reference to the parent object.
     * 
     */
    public Optional<RegistryDataAssetDefaultConnectionPrimarySchemaParentRef> parentRef() {
        return Optional.ofNullable(this.parentRef);
    }
    /**
     * @return (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
     * 
     */
    public Optional<String> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryDataAssetDefaultConnectionPrimarySchema defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultConnection;
        private @Nullable String description;
        private @Nullable String externalKey;
        private String identifier;
        private @Nullable Boolean isHasContainers;
        private String key;
        private @Nullable RegistryDataAssetDefaultConnectionPrimarySchemaMetadata metadata;
        private String modelType;
        private @Nullable String modelVersion;
        private String name;
        private @Nullable Integer objectStatus;
        private @Nullable Integer objectVersion;
        private @Nullable RegistryDataAssetDefaultConnectionPrimarySchemaParentRef parentRef;
        private @Nullable String resourceName;
        public Builder() {}
        public Builder(RegistryDataAssetDefaultConnectionPrimarySchema defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultConnection = defaults.defaultConnection;
    	      this.description = defaults.description;
    	      this.externalKey = defaults.externalKey;
    	      this.identifier = defaults.identifier;
    	      this.isHasContainers = defaults.isHasContainers;
    	      this.key = defaults.key;
    	      this.metadata = defaults.metadata;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentRef = defaults.parentRef;
    	      this.resourceName = defaults.resourceName;
        }

        @CustomType.Setter
        public Builder defaultConnection(@Nullable String defaultConnection) {
            this.defaultConnection = defaultConnection;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externalKey(@Nullable String externalKey) {
            this.externalKey = externalKey;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder isHasContainers(@Nullable Boolean isHasContainers) {
            this.isHasContainers = isHasContainers;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable RegistryDataAssetDefaultConnectionPrimarySchemaMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(@Nullable String modelVersion) {
            this.modelVersion = modelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(@Nullable Integer objectStatus) {
            this.objectStatus = objectStatus;
            return this;
        }
        @CustomType.Setter
        public Builder objectVersion(@Nullable Integer objectVersion) {
            this.objectVersion = objectVersion;
            return this;
        }
        @CustomType.Setter
        public Builder parentRef(@Nullable RegistryDataAssetDefaultConnectionPrimarySchemaParentRef parentRef) {
            this.parentRef = parentRef;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = resourceName;
            return this;
        }
        public RegistryDataAssetDefaultConnectionPrimarySchema build() {
            final var o = new RegistryDataAssetDefaultConnectionPrimarySchema();
            o.defaultConnection = defaultConnection;
            o.description = description;
            o.externalKey = externalKey;
            o.identifier = identifier;
            o.isHasContainers = isHasContainers;
            o.key = key;
            o.metadata = metadata;
            o.modelType = modelType;
            o.modelVersion = modelVersion;
            o.name = name;
            o.objectStatus = objectStatus;
            o.objectVersion = objectVersion;
            o.parentRef = parentRef;
            o.resourceName = resourceName;
            return o;
        }
    }
}
