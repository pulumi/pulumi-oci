// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataConnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetDefaultConnectionConnectionProperty;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetDefaultConnectionMetadata;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchema;
import com.pulumi.oci.DataConnectivity.outputs.RegistryFolderDataAssetDefaultConnectionRegistryMetadata;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryFolderDataAssetDefaultConnection {
    /**
     * @return (Updatable) The properties of the connection.
     * 
     */
    private @Nullable List<RegistryFolderDataAssetDefaultConnectionConnectionProperty> connectionProperties;
    /**
     * @return (Updatable) User-defined description of the folder.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    private String identifier;
    /**
     * @return (Updatable) The default property of the connection.
     * 
     */
    private @Nullable Boolean isDefault;
    /**
     * @return (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
     * 
     */
    private String key;
    /**
     * @return (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     * 
     */
    private @Nullable RegistryFolderDataAssetDefaultConnectionMetadata metadata;
    /**
     * @return (Updatable) The type of the folder.
     * 
     */
    private @Nullable String modelType;
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    private @Nullable String modelVersion;
    /**
     * @return (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private String name;
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private @Nullable Integer objectStatus;
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    private @Nullable Integer objectVersion;
    /**
     * @return (Updatable) The schema object.
     * 
     */
    private @Nullable RegistryFolderDataAssetDefaultConnectionPrimarySchema primarySchema;
    /**
     * @return (Updatable) All the properties for the data asset in a key-value map format.
     * 
     */
    private @Nullable Map<String,Object> properties;
    /**
     * @return (Updatable) Information about the object and its parent.
     * 
     */
    private @Nullable RegistryFolderDataAssetDefaultConnectionRegistryMetadata registryMetadata;
    /**
     * @return (Updatable) Specific DataAsset Type
     * 
     */
    private @Nullable String type;

    private RegistryFolderDataAssetDefaultConnection() {}
    /**
     * @return (Updatable) The properties of the connection.
     * 
     */
    public List<RegistryFolderDataAssetDefaultConnectionConnectionProperty> connectionProperties() {
        return this.connectionProperties == null ? List.of() : this.connectionProperties;
    }
    /**
     * @return (Updatable) User-defined description of the folder.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return (Updatable) The default property of the connection.
     * 
     */
    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }
    /**
     * @return (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     * 
     */
    public Optional<RegistryFolderDataAssetDefaultConnectionMetadata> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return (Updatable) The type of the folder.
     * 
     */
    public Optional<String> modelType() {
        return Optional.ofNullable(this.modelType);
    }
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<String> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }
    /**
     * @return (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Integer> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }
    /**
     * @return (Updatable) The version of the object that is used to track changes in the object instance.
     * 
     */
    public Optional<Integer> objectVersion() {
        return Optional.ofNullable(this.objectVersion);
    }
    /**
     * @return (Updatable) The schema object.
     * 
     */
    public Optional<RegistryFolderDataAssetDefaultConnectionPrimarySchema> primarySchema() {
        return Optional.ofNullable(this.primarySchema);
    }
    /**
     * @return (Updatable) All the properties for the data asset in a key-value map format.
     * 
     */
    public Map<String,Object> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    /**
     * @return (Updatable) Information about the object and its parent.
     * 
     */
    public Optional<RegistryFolderDataAssetDefaultConnectionRegistryMetadata> registryMetadata() {
        return Optional.ofNullable(this.registryMetadata);
    }
    /**
     * @return (Updatable) Specific DataAsset Type
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryFolderDataAssetDefaultConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<RegistryFolderDataAssetDefaultConnectionConnectionProperty> connectionProperties;
        private @Nullable String description;
        private String identifier;
        private @Nullable Boolean isDefault;
        private String key;
        private @Nullable RegistryFolderDataAssetDefaultConnectionMetadata metadata;
        private @Nullable String modelType;
        private @Nullable String modelVersion;
        private String name;
        private @Nullable Integer objectStatus;
        private @Nullable Integer objectVersion;
        private @Nullable RegistryFolderDataAssetDefaultConnectionPrimarySchema primarySchema;
        private @Nullable Map<String,Object> properties;
        private @Nullable RegistryFolderDataAssetDefaultConnectionRegistryMetadata registryMetadata;
        private @Nullable String type;
        public Builder() {}
        public Builder(RegistryFolderDataAssetDefaultConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionProperties = defaults.connectionProperties;
    	      this.description = defaults.description;
    	      this.identifier = defaults.identifier;
    	      this.isDefault = defaults.isDefault;
    	      this.key = defaults.key;
    	      this.metadata = defaults.metadata;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.primarySchema = defaults.primarySchema;
    	      this.properties = defaults.properties;
    	      this.registryMetadata = defaults.registryMetadata;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder connectionProperties(@Nullable List<RegistryFolderDataAssetDefaultConnectionConnectionProperty> connectionProperties) {
            this.connectionProperties = connectionProperties;
            return this;
        }
        public Builder connectionProperties(RegistryFolderDataAssetDefaultConnectionConnectionProperty... connectionProperties) {
            return connectionProperties(List.of(connectionProperties));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(@Nullable Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable RegistryFolderDataAssetDefaultConnectionMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder modelType(@Nullable String modelType) {
            this.modelType = modelType;
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(@Nullable String modelVersion) {
            this.modelVersion = modelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(@Nullable Integer objectStatus) {
            this.objectStatus = objectStatus;
            return this;
        }
        @CustomType.Setter
        public Builder objectVersion(@Nullable Integer objectVersion) {
            this.objectVersion = objectVersion;
            return this;
        }
        @CustomType.Setter
        public Builder primarySchema(@Nullable RegistryFolderDataAssetDefaultConnectionPrimarySchema primarySchema) {
            this.primarySchema = primarySchema;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable Map<String,Object> properties) {
            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder registryMetadata(@Nullable RegistryFolderDataAssetDefaultConnectionRegistryMetadata registryMetadata) {
            this.registryMetadata = registryMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public RegistryFolderDataAssetDefaultConnection build() {
            final var o = new RegistryFolderDataAssetDefaultConnection();
            o.connectionProperties = connectionProperties;
            o.description = description;
            o.identifier = identifier;
            o.isDefault = isDefault;
            o.key = key;
            o.metadata = metadata;
            o.modelType = modelType;
            o.modelVersion = modelVersion;
            o.name = name;
            o.objectStatus = objectStatus;
            o.objectVersion = objectVersion;
            o.primarySchema = primarySchema;
            o.properties = properties;
            o.registryMetadata = registryMetadata;
            o.type = type;
            return o;
        }
    }
}
