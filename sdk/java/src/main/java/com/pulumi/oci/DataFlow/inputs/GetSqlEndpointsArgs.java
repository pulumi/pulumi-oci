// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataFlow.inputs.GetSqlEndpointsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSqlEndpointsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSqlEndpointsArgs Empty = new GetSqlEndpointsArgs();

    /**
     * The OCID of the compartment in which to query resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment in which to query resources.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The query parameter for the Spark application name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The query parameter for the Spark application name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSqlEndpointsFilterArgs>> filters;

    public Optional<Output<List<GetSqlEndpointsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The unique id of the SQL Endpoint.
     * 
     */
    @Import(name="sqlEndpointId")
    private @Nullable Output<String> sqlEndpointId;

    /**
     * @return The unique id of the SQL Endpoint.
     * 
     */
    public Optional<Output<String>> sqlEndpointId() {
        return Optional.ofNullable(this.sqlEndpointId);
    }

    /**
     * A filter to return only those resources whose sqlEndpointLifecycleState matches the given sqlEndpointLifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only those resources whose sqlEndpointLifecycleState matches the given sqlEndpointLifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetSqlEndpointsArgs() {}

    private GetSqlEndpointsArgs(GetSqlEndpointsArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.sqlEndpointId = $.sqlEndpointId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSqlEndpointsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSqlEndpointsArgs $;

        public Builder() {
            $ = new GetSqlEndpointsArgs();
        }

        public Builder(GetSqlEndpointsArgs defaults) {
            $ = new GetSqlEndpointsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment in which to query resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment in which to query resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName The query parameter for the Spark application name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The query parameter for the Spark application name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetSqlEndpointsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSqlEndpointsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSqlEndpointsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param sqlEndpointId The unique id of the SQL Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder sqlEndpointId(@Nullable Output<String> sqlEndpointId) {
            $.sqlEndpointId = sqlEndpointId;
            return this;
        }

        /**
         * @param sqlEndpointId The unique id of the SQL Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder sqlEndpointId(String sqlEndpointId) {
            return sqlEndpointId(Output.of(sqlEndpointId));
        }

        /**
         * @param state A filter to return only those resources whose sqlEndpointLifecycleState matches the given sqlEndpointLifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only those resources whose sqlEndpointLifecycleState matches the given sqlEndpointLifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetSqlEndpointsArgs build() {
            return $;
        }
    }

}
