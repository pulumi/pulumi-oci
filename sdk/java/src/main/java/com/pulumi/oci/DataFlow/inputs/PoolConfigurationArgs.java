// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataFlow.inputs.PoolConfigurationShapeConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolConfigurationArgs Empty = new PoolConfigurationArgs();

    /**
     * (Updatable) Maximum number of compute instances in the pool for a given compute shape.
     * 
     */
    @Import(name="max")
    private @Nullable Output<Integer> max;

    /**
     * @return (Updatable) Maximum number of compute instances in the pool for a given compute shape.
     * 
     */
    public Optional<Output<Integer>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * (Updatable) Minimum number of compute instances in the pool for a given compute shape.
     * 
     */
    @Import(name="min")
    private @Nullable Output<Integer> min;

    /**
     * @return (Updatable) Minimum number of compute instances in the pool for a given compute shape.
     * 
     */
    public Optional<Output<Integer>> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * (Updatable) The compute shape of the resources you would like to provision.
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return (Updatable) The compute shape of the resources you would like to provision.
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * (Updatable) This is used to configure the shape of the driver or executor if a flexible shape is used.
     * 
     */
    @Import(name="shapeConfig")
    private @Nullable Output<PoolConfigurationShapeConfigArgs> shapeConfig;

    /**
     * @return (Updatable) This is used to configure the shape of the driver or executor if a flexible shape is used.
     * 
     */
    public Optional<Output<PoolConfigurationShapeConfigArgs>> shapeConfig() {
        return Optional.ofNullable(this.shapeConfig);
    }

    private PoolConfigurationArgs() {}

    private PoolConfigurationArgs(PoolConfigurationArgs $) {
        this.max = $.max;
        this.min = $.min;
        this.shape = $.shape;
        this.shapeConfig = $.shapeConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolConfigurationArgs $;

        public Builder() {
            $ = new PoolConfigurationArgs();
        }

        public Builder(PoolConfigurationArgs defaults) {
            $ = new PoolConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param max (Updatable) Maximum number of compute instances in the pool for a given compute shape.
         * 
         * @return builder
         * 
         */
        public Builder max(@Nullable Output<Integer> max) {
            $.max = max;
            return this;
        }

        /**
         * @param max (Updatable) Maximum number of compute instances in the pool for a given compute shape.
         * 
         * @return builder
         * 
         */
        public Builder max(Integer max) {
            return max(Output.of(max));
        }

        /**
         * @param min (Updatable) Minimum number of compute instances in the pool for a given compute shape.
         * 
         * @return builder
         * 
         */
        public Builder min(@Nullable Output<Integer> min) {
            $.min = min;
            return this;
        }

        /**
         * @param min (Updatable) Minimum number of compute instances in the pool for a given compute shape.
         * 
         * @return builder
         * 
         */
        public Builder min(Integer min) {
            return min(Output.of(min));
        }

        /**
         * @param shape (Updatable) The compute shape of the resources you would like to provision.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape (Updatable) The compute shape of the resources you would like to provision.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param shapeConfig (Updatable) This is used to configure the shape of the driver or executor if a flexible shape is used.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(@Nullable Output<PoolConfigurationShapeConfigArgs> shapeConfig) {
            $.shapeConfig = shapeConfig;
            return this;
        }

        /**
         * @param shapeConfig (Updatable) This is used to configure the shape of the driver or executor if a flexible shape is used.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(PoolConfigurationShapeConfigArgs shapeConfig) {
            return shapeConfig(Output.of(shapeConfig));
        }

        public PoolConfigurationArgs build() {
            return $;
        }
    }

}
