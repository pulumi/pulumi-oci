// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolPoolMetricActivelyUsedNodeCountArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolPoolMetricActivelyUsedNodeCountArgs Empty = new PoolPoolMetricActivelyUsedNodeCountArgs();

    /**
     * The compute shape of the nodes that the count is for.
     * 
     */
    @Import(name="logicalShape")
    private @Nullable Output<String> logicalShape;

    /**
     * @return The compute shape of the nodes that the count is for.
     * 
     */
    public Optional<Output<String>> logicalShape() {
        return Optional.ofNullable(this.logicalShape);
    }

    /**
     * The node count of this compute shape.
     * 
     */
    @Import(name="poolCount")
    private @Nullable Output<Integer> poolCount;

    /**
     * @return The node count of this compute shape.
     * 
     */
    public Optional<Output<Integer>> poolCount() {
        return Optional.ofNullable(this.poolCount);
    }

    private PoolPoolMetricActivelyUsedNodeCountArgs() {}

    private PoolPoolMetricActivelyUsedNodeCountArgs(PoolPoolMetricActivelyUsedNodeCountArgs $) {
        this.logicalShape = $.logicalShape;
        this.poolCount = $.poolCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolPoolMetricActivelyUsedNodeCountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolPoolMetricActivelyUsedNodeCountArgs $;

        public Builder() {
            $ = new PoolPoolMetricActivelyUsedNodeCountArgs();
        }

        public Builder(PoolPoolMetricActivelyUsedNodeCountArgs defaults) {
            $ = new PoolPoolMetricActivelyUsedNodeCountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logicalShape The compute shape of the nodes that the count is for.
         * 
         * @return builder
         * 
         */
        public Builder logicalShape(@Nullable Output<String> logicalShape) {
            $.logicalShape = logicalShape;
            return this;
        }

        /**
         * @param logicalShape The compute shape of the nodes that the count is for.
         * 
         * @return builder
         * 
         */
        public Builder logicalShape(String logicalShape) {
            return logicalShape(Output.of(logicalShape));
        }

        /**
         * @param poolCount The node count of this compute shape.
         * 
         * @return builder
         * 
         */
        public Builder poolCount(@Nullable Output<Integer> poolCount) {
            $.poolCount = poolCount;
            return this;
        }

        /**
         * @param poolCount The node count of this compute shape.
         * 
         * @return builder
         * 
         */
        public Builder poolCount(Integer poolCount) {
            return poolCount(Output.of(poolCount));
        }

        public PoolPoolMetricActivelyUsedNodeCountArgs build() {
            return $;
        }
    }

}
