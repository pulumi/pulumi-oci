// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataFlow.inputs.PoolPoolMetricActivelyUsedNodeCountArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolPoolMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolPoolMetricArgs Empty = new PoolPoolMetricArgs();

    /**
     * The number of runs that are currently running that are using this pool.
     * 
     */
    @Import(name="activeRunsCount")
    private @Nullable Output<String> activeRunsCount;

    /**
     * @return The number of runs that are currently running that are using this pool.
     * 
     */
    public Optional<Output<String>> activeRunsCount() {
        return Optional.ofNullable(this.activeRunsCount);
    }

    /**
     * A count of the nodes that are currently being used for each shape in this pool.
     * 
     */
    @Import(name="activelyUsedNodeCounts")
    private @Nullable Output<List<PoolPoolMetricActivelyUsedNodeCountArgs>> activelyUsedNodeCounts;

    /**
     * @return A count of the nodes that are currently being used for each shape in this pool.
     * 
     */
    public Optional<Output<List<PoolPoolMetricActivelyUsedNodeCountArgs>>> activelyUsedNodeCounts() {
        return Optional.ofNullable(this.activelyUsedNodeCounts);
    }

    /**
     * The last time the mertics were updated for this.
     * 
     */
    @Import(name="timeLastMetricsUpdated")
    private @Nullable Output<String> timeLastMetricsUpdated;

    /**
     * @return The last time the mertics were updated for this.
     * 
     */
    public Optional<Output<String>> timeLastMetricsUpdated() {
        return Optional.ofNullable(this.timeLastMetricsUpdated);
    }

    /**
     * The last time this pool was started.
     * 
     */
    @Import(name="timeLastStarted")
    private @Nullable Output<String> timeLastStarted;

    /**
     * @return The last time this pool was started.
     * 
     */
    public Optional<Output<String>> timeLastStarted() {
        return Optional.ofNullable(this.timeLastStarted);
    }

    /**
     * The last time this pool was stopped.
     * 
     */
    @Import(name="timeLastStopped")
    private @Nullable Output<String> timeLastStopped;

    /**
     * @return The last time this pool was stopped.
     * 
     */
    public Optional<Output<String>> timeLastStopped() {
        return Optional.ofNullable(this.timeLastStopped);
    }

    /**
     * The last time a run used this pool.
     * 
     */
    @Import(name="timeLastUsed")
    private @Nullable Output<String> timeLastUsed;

    /**
     * @return The last time a run used this pool.
     * 
     */
    public Optional<Output<String>> timeLastUsed() {
        return Optional.ofNullable(this.timeLastUsed);
    }

    private PoolPoolMetricArgs() {}

    private PoolPoolMetricArgs(PoolPoolMetricArgs $) {
        this.activeRunsCount = $.activeRunsCount;
        this.activelyUsedNodeCounts = $.activelyUsedNodeCounts;
        this.timeLastMetricsUpdated = $.timeLastMetricsUpdated;
        this.timeLastStarted = $.timeLastStarted;
        this.timeLastStopped = $.timeLastStopped;
        this.timeLastUsed = $.timeLastUsed;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolPoolMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolPoolMetricArgs $;

        public Builder() {
            $ = new PoolPoolMetricArgs();
        }

        public Builder(PoolPoolMetricArgs defaults) {
            $ = new PoolPoolMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeRunsCount The number of runs that are currently running that are using this pool.
         * 
         * @return builder
         * 
         */
        public Builder activeRunsCount(@Nullable Output<String> activeRunsCount) {
            $.activeRunsCount = activeRunsCount;
            return this;
        }

        /**
         * @param activeRunsCount The number of runs that are currently running that are using this pool.
         * 
         * @return builder
         * 
         */
        public Builder activeRunsCount(String activeRunsCount) {
            return activeRunsCount(Output.of(activeRunsCount));
        }

        /**
         * @param activelyUsedNodeCounts A count of the nodes that are currently being used for each shape in this pool.
         * 
         * @return builder
         * 
         */
        public Builder activelyUsedNodeCounts(@Nullable Output<List<PoolPoolMetricActivelyUsedNodeCountArgs>> activelyUsedNodeCounts) {
            $.activelyUsedNodeCounts = activelyUsedNodeCounts;
            return this;
        }

        /**
         * @param activelyUsedNodeCounts A count of the nodes that are currently being used for each shape in this pool.
         * 
         * @return builder
         * 
         */
        public Builder activelyUsedNodeCounts(List<PoolPoolMetricActivelyUsedNodeCountArgs> activelyUsedNodeCounts) {
            return activelyUsedNodeCounts(Output.of(activelyUsedNodeCounts));
        }

        /**
         * @param activelyUsedNodeCounts A count of the nodes that are currently being used for each shape in this pool.
         * 
         * @return builder
         * 
         */
        public Builder activelyUsedNodeCounts(PoolPoolMetricActivelyUsedNodeCountArgs... activelyUsedNodeCounts) {
            return activelyUsedNodeCounts(List.of(activelyUsedNodeCounts));
        }

        /**
         * @param timeLastMetricsUpdated The last time the mertics were updated for this.
         * 
         * @return builder
         * 
         */
        public Builder timeLastMetricsUpdated(@Nullable Output<String> timeLastMetricsUpdated) {
            $.timeLastMetricsUpdated = timeLastMetricsUpdated;
            return this;
        }

        /**
         * @param timeLastMetricsUpdated The last time the mertics were updated for this.
         * 
         * @return builder
         * 
         */
        public Builder timeLastMetricsUpdated(String timeLastMetricsUpdated) {
            return timeLastMetricsUpdated(Output.of(timeLastMetricsUpdated));
        }

        /**
         * @param timeLastStarted The last time this pool was started.
         * 
         * @return builder
         * 
         */
        public Builder timeLastStarted(@Nullable Output<String> timeLastStarted) {
            $.timeLastStarted = timeLastStarted;
            return this;
        }

        /**
         * @param timeLastStarted The last time this pool was started.
         * 
         * @return builder
         * 
         */
        public Builder timeLastStarted(String timeLastStarted) {
            return timeLastStarted(Output.of(timeLastStarted));
        }

        /**
         * @param timeLastStopped The last time this pool was stopped.
         * 
         * @return builder
         * 
         */
        public Builder timeLastStopped(@Nullable Output<String> timeLastStopped) {
            $.timeLastStopped = timeLastStopped;
            return this;
        }

        /**
         * @param timeLastStopped The last time this pool was stopped.
         * 
         * @return builder
         * 
         */
        public Builder timeLastStopped(String timeLastStopped) {
            return timeLastStopped(Output.of(timeLastStopped));
        }

        /**
         * @param timeLastUsed The last time a run used this pool.
         * 
         * @return builder
         * 
         */
        public Builder timeLastUsed(@Nullable Output<String> timeLastUsed) {
            $.timeLastUsed = timeLastUsed;
            return this;
        }

        /**
         * @param timeLastUsed The last time a run used this pool.
         * 
         * @return builder
         * 
         */
        public Builder timeLastUsed(String timeLastUsed) {
            return timeLastUsed(Output.of(timeLastUsed));
        }

        public PoolPoolMetricArgs build() {
            return $;
        }
    }

}
