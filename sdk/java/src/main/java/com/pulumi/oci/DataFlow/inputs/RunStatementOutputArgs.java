// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataFlow.inputs.RunStatementOutputDataArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RunStatementOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final RunStatementOutputArgs Empty = new RunStatementOutputArgs();

    /**
     * An object representing execution output of a statement.
     * 
     */
    @Import(name="datas")
    private @Nullable Output<List<RunStatementOutputDataArgs>> datas;

    /**
     * @return An object representing execution output of a statement.
     * 
     */
    public Optional<Output<List<RunStatementOutputDataArgs>>> datas() {
        return Optional.ofNullable(this.datas);
    }

    /**
     * The name of the error in the statement output.
     * 
     */
    @Import(name="errorName")
    private @Nullable Output<String> errorName;

    /**
     * @return The name of the error in the statement output.
     * 
     */
    public Optional<Output<String>> errorName() {
        return Optional.ofNullable(this.errorName);
    }

    /**
     * The value of the error in the statement output.
     * 
     */
    @Import(name="errorValue")
    private @Nullable Output<String> errorValue;

    /**
     * @return The value of the error in the statement output.
     * 
     */
    public Optional<Output<String>> errorValue() {
        return Optional.ofNullable(this.errorValue);
    }

    /**
     * Status of the statement output.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the statement output.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The traceback of the statement output.
     * 
     */
    @Import(name="tracebacks")
    private @Nullable Output<List<String>> tracebacks;

    /**
     * @return The traceback of the statement output.
     * 
     */
    public Optional<Output<List<String>>> tracebacks() {
        return Optional.ofNullable(this.tracebacks);
    }

    private RunStatementOutputArgs() {}

    private RunStatementOutputArgs(RunStatementOutputArgs $) {
        this.datas = $.datas;
        this.errorName = $.errorName;
        this.errorValue = $.errorValue;
        this.status = $.status;
        this.tracebacks = $.tracebacks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RunStatementOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RunStatementOutputArgs $;

        public Builder() {
            $ = new RunStatementOutputArgs();
        }

        public Builder(RunStatementOutputArgs defaults) {
            $ = new RunStatementOutputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datas An object representing execution output of a statement.
         * 
         * @return builder
         * 
         */
        public Builder datas(@Nullable Output<List<RunStatementOutputDataArgs>> datas) {
            $.datas = datas;
            return this;
        }

        /**
         * @param datas An object representing execution output of a statement.
         * 
         * @return builder
         * 
         */
        public Builder datas(List<RunStatementOutputDataArgs> datas) {
            return datas(Output.of(datas));
        }

        /**
         * @param datas An object representing execution output of a statement.
         * 
         * @return builder
         * 
         */
        public Builder datas(RunStatementOutputDataArgs... datas) {
            return datas(List.of(datas));
        }

        /**
         * @param errorName The name of the error in the statement output.
         * 
         * @return builder
         * 
         */
        public Builder errorName(@Nullable Output<String> errorName) {
            $.errorName = errorName;
            return this;
        }

        /**
         * @param errorName The name of the error in the statement output.
         * 
         * @return builder
         * 
         */
        public Builder errorName(String errorName) {
            return errorName(Output.of(errorName));
        }

        /**
         * @param errorValue The value of the error in the statement output.
         * 
         * @return builder
         * 
         */
        public Builder errorValue(@Nullable Output<String> errorValue) {
            $.errorValue = errorValue;
            return this;
        }

        /**
         * @param errorValue The value of the error in the statement output.
         * 
         * @return builder
         * 
         */
        public Builder errorValue(String errorValue) {
            return errorValue(Output.of(errorValue));
        }

        /**
         * @param status Status of the statement output.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the statement output.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tracebacks The traceback of the statement output.
         * 
         * @return builder
         * 
         */
        public Builder tracebacks(@Nullable Output<List<String>> tracebacks) {
            $.tracebacks = tracebacks;
            return this;
        }

        /**
         * @param tracebacks The traceback of the statement output.
         * 
         * @return builder
         * 
         */
        public Builder tracebacks(List<String> tracebacks) {
            return tracebacks(Output.of(tracebacks));
        }

        /**
         * @param tracebacks The traceback of the statement output.
         * 
         * @return builder
         * 
         */
        public Builder tracebacks(String... tracebacks) {
            return tracebacks(List.of(tracebacks));
        }

        public RunStatementOutputArgs build() {
            return $;
        }
    }

}
