// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataFlow.outputs.GetPoolConfigurationShapeConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPoolConfiguration {
    /**
     * @return Maximum number of compute instances in the pool for a given compute shape.
     * 
     */
    private Integer max;
    /**
     * @return Minimum number of compute instances in the pool for a given compute shape.
     * 
     */
    private Integer min;
    /**
     * @return The compute shape of the resources you would like to provision.
     * 
     */
    private String shape;
    /**
     * @return This is used to configure the shape of the driver or executor if a flexible shape is used.
     * 
     */
    private List<GetPoolConfigurationShapeConfig> shapeConfigs;

    private GetPoolConfiguration() {}
    /**
     * @return Maximum number of compute instances in the pool for a given compute shape.
     * 
     */
    public Integer max() {
        return this.max;
    }
    /**
     * @return Minimum number of compute instances in the pool for a given compute shape.
     * 
     */
    public Integer min() {
        return this.min;
    }
    /**
     * @return The compute shape of the resources you would like to provision.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return This is used to configure the shape of the driver or executor if a flexible shape is used.
     * 
     */
    public List<GetPoolConfigurationShapeConfig> shapeConfigs() {
        return this.shapeConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer max;
        private Integer min;
        private String shape;
        private List<GetPoolConfigurationShapeConfig> shapeConfigs;
        public Builder() {}
        public Builder(GetPoolConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.max = defaults.max;
    	      this.min = defaults.min;
    	      this.shape = defaults.shape;
    	      this.shapeConfigs = defaults.shapeConfigs;
        }

        @CustomType.Setter
        public Builder max(Integer max) {
            if (max == null) {
              throw new MissingRequiredPropertyException("GetPoolConfiguration", "max");
            }
            this.max = max;
            return this;
        }
        @CustomType.Setter
        public Builder min(Integer min) {
            if (min == null) {
              throw new MissingRequiredPropertyException("GetPoolConfiguration", "min");
            }
            this.min = min;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetPoolConfiguration", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder shapeConfigs(List<GetPoolConfigurationShapeConfig> shapeConfigs) {
            if (shapeConfigs == null) {
              throw new MissingRequiredPropertyException("GetPoolConfiguration", "shapeConfigs");
            }
            this.shapeConfigs = shapeConfigs;
            return this;
        }
        public Builder shapeConfigs(GetPoolConfigurationShapeConfig... shapeConfigs) {
            return shapeConfigs(List.of(shapeConfigs));
        }
        public GetPoolConfiguration build() {
            final var _resultValue = new GetPoolConfiguration();
            _resultValue.max = max;
            _resultValue.min = min;
            _resultValue.shape = shape;
            _resultValue.shapeConfigs = shapeConfigs;
            return _resultValue;
        }
    }
}
