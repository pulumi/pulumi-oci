// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataFlow.outputs.GetPoolPoolMetricActivelyUsedNodeCount;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPoolPoolMetric {
    /**
     * @return The number of runs that are currently running that are using this pool.
     * 
     */
    private String activeRunsCount;
    /**
     * @return A count of the nodes that are currently being used for each shape in this pool.
     * 
     */
    private List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts;
    /**
     * @return The last time the mertics were updated for this.
     * 
     */
    private String timeLastMetricsUpdated;
    /**
     * @return The last time this pool was started.
     * 
     */
    private String timeLastStarted;
    /**
     * @return The last time this pool was stopped.
     * 
     */
    private String timeLastStopped;
    /**
     * @return The last time a run used this pool.
     * 
     */
    private String timeLastUsed;

    private GetPoolPoolMetric() {}
    /**
     * @return The number of runs that are currently running that are using this pool.
     * 
     */
    public String activeRunsCount() {
        return this.activeRunsCount;
    }
    /**
     * @return A count of the nodes that are currently being used for each shape in this pool.
     * 
     */
    public List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts() {
        return this.activelyUsedNodeCounts;
    }
    /**
     * @return The last time the mertics were updated for this.
     * 
     */
    public String timeLastMetricsUpdated() {
        return this.timeLastMetricsUpdated;
    }
    /**
     * @return The last time this pool was started.
     * 
     */
    public String timeLastStarted() {
        return this.timeLastStarted;
    }
    /**
     * @return The last time this pool was stopped.
     * 
     */
    public String timeLastStopped() {
        return this.timeLastStopped;
    }
    /**
     * @return The last time a run used this pool.
     * 
     */
    public String timeLastUsed() {
        return this.timeLastUsed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolPoolMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activeRunsCount;
        private List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts;
        private String timeLastMetricsUpdated;
        private String timeLastStarted;
        private String timeLastStopped;
        private String timeLastUsed;
        public Builder() {}
        public Builder(GetPoolPoolMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeRunsCount = defaults.activeRunsCount;
    	      this.activelyUsedNodeCounts = defaults.activelyUsedNodeCounts;
    	      this.timeLastMetricsUpdated = defaults.timeLastMetricsUpdated;
    	      this.timeLastStarted = defaults.timeLastStarted;
    	      this.timeLastStopped = defaults.timeLastStopped;
    	      this.timeLastUsed = defaults.timeLastUsed;
        }

        @CustomType.Setter
        public Builder activeRunsCount(String activeRunsCount) {
            if (activeRunsCount == null) {
              throw new MissingRequiredPropertyException("GetPoolPoolMetric", "activeRunsCount");
            }
            this.activeRunsCount = activeRunsCount;
            return this;
        }
        @CustomType.Setter
        public Builder activelyUsedNodeCounts(List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts) {
            if (activelyUsedNodeCounts == null) {
              throw new MissingRequiredPropertyException("GetPoolPoolMetric", "activelyUsedNodeCounts");
            }
            this.activelyUsedNodeCounts = activelyUsedNodeCounts;
            return this;
        }
        public Builder activelyUsedNodeCounts(GetPoolPoolMetricActivelyUsedNodeCount... activelyUsedNodeCounts) {
            return activelyUsedNodeCounts(List.of(activelyUsedNodeCounts));
        }
        @CustomType.Setter
        public Builder timeLastMetricsUpdated(String timeLastMetricsUpdated) {
            if (timeLastMetricsUpdated == null) {
              throw new MissingRequiredPropertyException("GetPoolPoolMetric", "timeLastMetricsUpdated");
            }
            this.timeLastMetricsUpdated = timeLastMetricsUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStarted(String timeLastStarted) {
            if (timeLastStarted == null) {
              throw new MissingRequiredPropertyException("GetPoolPoolMetric", "timeLastStarted");
            }
            this.timeLastStarted = timeLastStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStopped(String timeLastStopped) {
            if (timeLastStopped == null) {
              throw new MissingRequiredPropertyException("GetPoolPoolMetric", "timeLastStopped");
            }
            this.timeLastStopped = timeLastStopped;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastUsed(String timeLastUsed) {
            if (timeLastUsed == null) {
              throw new MissingRequiredPropertyException("GetPoolPoolMetric", "timeLastUsed");
            }
            this.timeLastUsed = timeLastUsed;
            return this;
        }
        public GetPoolPoolMetric build() {
            final var _resultValue = new GetPoolPoolMetric();
            _resultValue.activeRunsCount = activeRunsCount;
            _resultValue.activelyUsedNodeCounts = activelyUsedNodeCounts;
            _resultValue.timeLastMetricsUpdated = timeLastMetricsUpdated;
            _resultValue.timeLastStarted = timeLastStarted;
            _resultValue.timeLastStopped = timeLastStopped;
            _resultValue.timeLastUsed = timeLastUsed;
            return _resultValue;
        }
    }
}
