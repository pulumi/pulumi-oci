// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataFlow.outputs.GetPoolPoolMetricActivelyUsedNodeCount;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPoolPoolMetric {
    /**
     * @return The number of runs that are currently running that are using this pool.
     * 
     */
    private @Nullable String activeRunsCount;
    /**
     * @return A count of the nodes that are currently being used for each shape in this pool.
     * 
     */
    private @Nullable List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts;
    /**
     * @return The last time the mertics were updated for this.
     * 
     */
    private @Nullable String timeLastMetricsUpdated;
    /**
     * @return The last time this pool was started.
     * 
     */
    private @Nullable String timeLastStarted;
    /**
     * @return The last time this pool was stopped.
     * 
     */
    private @Nullable String timeLastStopped;
    /**
     * @return The last time a run used this pool.
     * 
     */
    private @Nullable String timeLastUsed;

    private GetPoolPoolMetric() {}
    /**
     * @return The number of runs that are currently running that are using this pool.
     * 
     */
    public Optional<String> activeRunsCount() {
        return Optional.ofNullable(this.activeRunsCount);
    }
    /**
     * @return A count of the nodes that are currently being used for each shape in this pool.
     * 
     */
    public List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts() {
        return this.activelyUsedNodeCounts == null ? List.of() : this.activelyUsedNodeCounts;
    }
    /**
     * @return The last time the mertics were updated for this.
     * 
     */
    public Optional<String> timeLastMetricsUpdated() {
        return Optional.ofNullable(this.timeLastMetricsUpdated);
    }
    /**
     * @return The last time this pool was started.
     * 
     */
    public Optional<String> timeLastStarted() {
        return Optional.ofNullable(this.timeLastStarted);
    }
    /**
     * @return The last time this pool was stopped.
     * 
     */
    public Optional<String> timeLastStopped() {
        return Optional.ofNullable(this.timeLastStopped);
    }
    /**
     * @return The last time a run used this pool.
     * 
     */
    public Optional<String> timeLastUsed() {
        return Optional.ofNullable(this.timeLastUsed);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolPoolMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String activeRunsCount;
        private @Nullable List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts;
        private @Nullable String timeLastMetricsUpdated;
        private @Nullable String timeLastStarted;
        private @Nullable String timeLastStopped;
        private @Nullable String timeLastUsed;
        public Builder() {}
        public Builder(GetPoolPoolMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeRunsCount = defaults.activeRunsCount;
    	      this.activelyUsedNodeCounts = defaults.activelyUsedNodeCounts;
    	      this.timeLastMetricsUpdated = defaults.timeLastMetricsUpdated;
    	      this.timeLastStarted = defaults.timeLastStarted;
    	      this.timeLastStopped = defaults.timeLastStopped;
    	      this.timeLastUsed = defaults.timeLastUsed;
        }

        @CustomType.Setter
        public Builder activeRunsCount(@Nullable String activeRunsCount) {
            this.activeRunsCount = activeRunsCount;
            return this;
        }
        @CustomType.Setter
        public Builder activelyUsedNodeCounts(@Nullable List<GetPoolPoolMetricActivelyUsedNodeCount> activelyUsedNodeCounts) {
            this.activelyUsedNodeCounts = activelyUsedNodeCounts;
            return this;
        }
        public Builder activelyUsedNodeCounts(GetPoolPoolMetricActivelyUsedNodeCount... activelyUsedNodeCounts) {
            return activelyUsedNodeCounts(List.of(activelyUsedNodeCounts));
        }
        @CustomType.Setter
        public Builder timeLastMetricsUpdated(@Nullable String timeLastMetricsUpdated) {
            this.timeLastMetricsUpdated = timeLastMetricsUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStarted(@Nullable String timeLastStarted) {
            this.timeLastStarted = timeLastStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStopped(@Nullable String timeLastStopped) {
            this.timeLastStopped = timeLastStopped;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastUsed(@Nullable String timeLastUsed) {
            this.timeLastUsed = timeLastUsed;
            return this;
        }
        public GetPoolPoolMetric build() {
            final var o = new GetPoolPoolMetric();
            o.activeRunsCount = activeRunsCount;
            o.activelyUsedNodeCounts = activelyUsedNodeCounts;
            o.timeLastMetricsUpdated = timeLastMetricsUpdated;
            o.timeLastStarted = timeLastStarted;
            o.timeLastStopped = timeLastStopped;
            o.timeLastUsed = timeLastUsed;
            return o;
        }
    }
}
