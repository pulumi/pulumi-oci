// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPoolPoolMetricActivelyUsedNodeCount {
    /**
     * @return The compute shape of the nodes that the count is for.
     * 
     */
    private @Nullable String logicalShape;
    /**
     * @return The node count of this compute shape.
     * 
     */
    private @Nullable Integer poolCount;

    private GetPoolPoolMetricActivelyUsedNodeCount() {}
    /**
     * @return The compute shape of the nodes that the count is for.
     * 
     */
    public Optional<String> logicalShape() {
        return Optional.ofNullable(this.logicalShape);
    }
    /**
     * @return The node count of this compute shape.
     * 
     */
    public Optional<Integer> poolCount() {
        return Optional.ofNullable(this.poolCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolPoolMetricActivelyUsedNodeCount defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String logicalShape;
        private @Nullable Integer poolCount;
        public Builder() {}
        public Builder(GetPoolPoolMetricActivelyUsedNodeCount defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logicalShape = defaults.logicalShape;
    	      this.poolCount = defaults.poolCount;
        }

        @CustomType.Setter
        public Builder logicalShape(@Nullable String logicalShape) {
            this.logicalShape = logicalShape;
            return this;
        }
        @CustomType.Setter
        public Builder poolCount(@Nullable Integer poolCount) {
            this.poolCount = poolCount;
            return this;
        }
        public GetPoolPoolMetricActivelyUsedNodeCount build() {
            final var o = new GetPoolPoolMetricActivelyUsedNodeCount();
            o.logicalShape = logicalShape;
            o.poolCount = poolCount;
            return o;
        }
    }
}
