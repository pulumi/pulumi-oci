// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataFlow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataFlow.outputs.GetRunStatementOutput;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRunStatementResult {
    /**
     * @return The statement code to execute. Example: `println(sc.version)`
     * 
     */
    private String code;
    /**
     * @return The statement ID.
     * 
     */
    private String id;
    /**
     * @return The execution output of a statement.
     * 
     */
    private List<GetRunStatementOutput> outputs;
    /**
     * @return The execution progress.
     * 
     */
    private Double progress;
    /**
     * @return The ID of a run.
     * 
     */
    private String runId;
    /**
     * @return The current state of this statement.
     * 
     */
    private String state;
    private String statementId;
    /**
     * @return The date and time a statement execution was completed, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2022-05-31T21:10:29.600Z`
     * 
     */
    private String timeCompleted;
    /**
     * @return The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;

    private GetRunStatementResult() {}
    /**
     * @return The statement code to execute. Example: `println(sc.version)`
     * 
     */
    public String code() {
        return this.code;
    }
    /**
     * @return The statement ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The execution output of a statement.
     * 
     */
    public List<GetRunStatementOutput> outputs() {
        return this.outputs;
    }
    /**
     * @return The execution progress.
     * 
     */
    public Double progress() {
        return this.progress;
    }
    /**
     * @return The ID of a run.
     * 
     */
    public String runId() {
        return this.runId;
    }
    /**
     * @return The current state of this statement.
     * 
     */
    public String state() {
        return this.state;
    }
    public String statementId() {
        return this.statementId;
    }
    /**
     * @return The date and time a statement execution was completed, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2022-05-31T21:10:29.600Z`
     * 
     */
    public String timeCompleted() {
        return this.timeCompleted;
    }
    /**
     * @return The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRunStatementResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String code;
        private String id;
        private List<GetRunStatementOutput> outputs;
        private Double progress;
        private String runId;
        private String state;
        private String statementId;
        private String timeCompleted;
        private String timeCreated;
        public Builder() {}
        public Builder(GetRunStatementResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.code = defaults.code;
    	      this.id = defaults.id;
    	      this.outputs = defaults.outputs;
    	      this.progress = defaults.progress;
    	      this.runId = defaults.runId;
    	      this.state = defaults.state;
    	      this.statementId = defaults.statementId;
    	      this.timeCompleted = defaults.timeCompleted;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder code(String code) {
            if (code == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "code");
            }
            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder outputs(List<GetRunStatementOutput> outputs) {
            if (outputs == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "outputs");
            }
            this.outputs = outputs;
            return this;
        }
        public Builder outputs(GetRunStatementOutput... outputs) {
            return outputs(List.of(outputs));
        }
        @CustomType.Setter
        public Builder progress(Double progress) {
            if (progress == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "progress");
            }
            this.progress = progress;
            return this;
        }
        @CustomType.Setter
        public Builder runId(String runId) {
            if (runId == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "runId");
            }
            this.runId = runId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder statementId(String statementId) {
            if (statementId == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "statementId");
            }
            this.statementId = statementId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCompleted(String timeCompleted) {
            if (timeCompleted == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "timeCompleted");
            }
            this.timeCompleted = timeCompleted;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetRunStatementResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetRunStatementResult build() {
            final var _resultValue = new GetRunStatementResult();
            _resultValue.code = code;
            _resultValue.id = id;
            _resultValue.outputs = outputs;
            _resultValue.progress = progress;
            _resultValue.runId = runId;
            _resultValue.state = state;
            _resultValue.statementId = statementId;
            _resultValue.timeCompleted = timeCompleted;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
