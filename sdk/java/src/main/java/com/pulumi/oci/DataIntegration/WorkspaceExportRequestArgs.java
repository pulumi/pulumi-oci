// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceExportRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceExportRequestArgs Empty = new WorkspaceExportRequestArgs();

    /**
     * This field controls if the references will be exported along with the objects
     * 
     */
    @Import(name="areReferencesIncluded")
    private @Nullable Output<Boolean> areReferencesIncluded;

    /**
     * @return This field controls if the references will be exported along with the objects
     * 
     */
    public Optional<Output<Boolean>> areReferencesIncluded() {
        return Optional.ofNullable(this.areReferencesIncluded);
    }

    /**
     * Name of the Object Storage bucket where the object will be exported.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of the Object Storage bucket where the object will be exported.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Name of the exported zip file.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return Name of the exported zip file.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * Filters for exported objects
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<String>> filters;

    /**
     * @return Filters for exported objects
     * 
     */
    public Optional<Output<List<String>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Flag to control whether to overwrite the object if it is already present at the provided object storage location.
     * 
     */
    @Import(name="isObjectOverwriteEnabled")
    private @Nullable Output<Boolean> isObjectOverwriteEnabled;

    /**
     * @return Flag to control whether to overwrite the object if it is already present at the provided object storage location.
     * 
     */
    public Optional<Output<Boolean>> isObjectOverwriteEnabled() {
        return Optional.ofNullable(this.isObjectOverwriteEnabled);
    }

    /**
     * Field is used to specify which object keys to export
     * 
     */
    @Import(name="objectKeys")
    private @Nullable Output<List<String>> objectKeys;

    /**
     * @return Field is used to specify which object keys to export
     * 
     */
    public Optional<Output<List<String>>> objectKeys() {
        return Optional.ofNullable(this.objectKeys);
    }

    /**
     * Region of the object storage (if using object storage of different region)
     * 
     */
    @Import(name="objectStorageRegion")
    private @Nullable Output<String> objectStorageRegion;

    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    public Optional<Output<String>> objectStorageRegion() {
        return Optional.ofNullable(this.objectStorageRegion);
    }

    /**
     * Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    @Import(name="objectStorageTenancyId")
    private @Nullable Output<String> objectStorageTenancyId;

    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    public Optional<Output<String>> objectStorageTenancyId() {
        return Optional.ofNullable(this.objectStorageTenancyId);
    }

    /**
     * The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private WorkspaceExportRequestArgs() {}

    private WorkspaceExportRequestArgs(WorkspaceExportRequestArgs $) {
        this.areReferencesIncluded = $.areReferencesIncluded;
        this.bucket = $.bucket;
        this.fileName = $.fileName;
        this.filters = $.filters;
        this.isObjectOverwriteEnabled = $.isObjectOverwriteEnabled;
        this.objectKeys = $.objectKeys;
        this.objectStorageRegion = $.objectStorageRegion;
        this.objectStorageTenancyId = $.objectStorageTenancyId;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceExportRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceExportRequestArgs $;

        public Builder() {
            $ = new WorkspaceExportRequestArgs();
        }

        public Builder(WorkspaceExportRequestArgs defaults) {
            $ = new WorkspaceExportRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param areReferencesIncluded This field controls if the references will be exported along with the objects
         * 
         * @return builder
         * 
         */
        public Builder areReferencesIncluded(@Nullable Output<Boolean> areReferencesIncluded) {
            $.areReferencesIncluded = areReferencesIncluded;
            return this;
        }

        /**
         * @param areReferencesIncluded This field controls if the references will be exported along with the objects
         * 
         * @return builder
         * 
         */
        public Builder areReferencesIncluded(Boolean areReferencesIncluded) {
            return areReferencesIncluded(Output.of(areReferencesIncluded));
        }

        /**
         * @param bucket Name of the Object Storage bucket where the object will be exported.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the Object Storage bucket where the object will be exported.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param fileName Name of the exported zip file.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName Name of the exported zip file.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param filters Filters for exported objects
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<String>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Filters for exported objects
         * 
         * @return builder
         * 
         */
        public Builder filters(List<String> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Filters for exported objects
         * 
         * @return builder
         * 
         */
        public Builder filters(String... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isObjectOverwriteEnabled Flag to control whether to overwrite the object if it is already present at the provided object storage location.
         * 
         * @return builder
         * 
         */
        public Builder isObjectOverwriteEnabled(@Nullable Output<Boolean> isObjectOverwriteEnabled) {
            $.isObjectOverwriteEnabled = isObjectOverwriteEnabled;
            return this;
        }

        /**
         * @param isObjectOverwriteEnabled Flag to control whether to overwrite the object if it is already present at the provided object storage location.
         * 
         * @return builder
         * 
         */
        public Builder isObjectOverwriteEnabled(Boolean isObjectOverwriteEnabled) {
            return isObjectOverwriteEnabled(Output.of(isObjectOverwriteEnabled));
        }

        /**
         * @param objectKeys Field is used to specify which object keys to export
         * 
         * @return builder
         * 
         */
        public Builder objectKeys(@Nullable Output<List<String>> objectKeys) {
            $.objectKeys = objectKeys;
            return this;
        }

        /**
         * @param objectKeys Field is used to specify which object keys to export
         * 
         * @return builder
         * 
         */
        public Builder objectKeys(List<String> objectKeys) {
            return objectKeys(Output.of(objectKeys));
        }

        /**
         * @param objectKeys Field is used to specify which object keys to export
         * 
         * @return builder
         * 
         */
        public Builder objectKeys(String... objectKeys) {
            return objectKeys(List.of(objectKeys));
        }

        /**
         * @param objectStorageRegion Region of the object storage (if using object storage of different region)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageRegion(@Nullable Output<String> objectStorageRegion) {
            $.objectStorageRegion = objectStorageRegion;
            return this;
        }

        /**
         * @param objectStorageRegion Region of the object storage (if using object storage of different region)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageRegion(String objectStorageRegion) {
            return objectStorageRegion(Output.of(objectStorageRegion));
        }

        /**
         * @param objectStorageTenancyId Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageTenancyId(@Nullable Output<String> objectStorageTenancyId) {
            $.objectStorageTenancyId = objectStorageTenancyId;
            return this;
        }

        /**
         * @param objectStorageTenancyId Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageTenancyId(String objectStorageTenancyId) {
            return objectStorageTenancyId(Output.of(objectStorageTenancyId));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceExportRequestArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.workspaceId = Objects.requireNonNull($.workspaceId, "expected parameter 'workspaceId' to be non-null");
            return $;
        }
    }

}
