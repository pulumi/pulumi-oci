// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceFolderRegistryMetadataArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceFolderArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceFolderArgs Empty = new WorkspaceFolderArgs();

    /**
     * (Updatable) The category name.
     * 
     */
    @Import(name="categoryName")
    private @Nullable Output<String> categoryName;

    /**
     * @return (Updatable) The category name.
     * 
     */
    public Optional<Output<String>> categoryName() {
        return Optional.ofNullable(this.categoryName);
    }

    /**
     * (Updatable) A user defined description for the folder.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user defined description for the folder.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="folderKey")
    private @Nullable Output<String> folderKey;

    public Optional<Output<String>> folderKey() {
        return Optional.ofNullable(this.folderKey);
    }

    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * (Updatable) The identifying key for the object.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Updatable) The identifying key for the object.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * (Updatable) The model version of an object.
     * 
     */
    @Import(name="modelVersion")
    private @Nullable Output<String> modelVersion;

    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<Output<String>> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }

    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    @Import(name="objectStatus")
    private @Nullable Output<Integer> objectStatus;

    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Output<Integer>> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }

    /**
     * (Updatable) Information about the object and its parent.
     * 
     */
    @Import(name="registryMetadata", required=true)
    private Output<WorkspaceFolderRegistryMetadataArgs> registryMetadata;

    /**
     * @return (Updatable) Information about the object and its parent.
     * 
     */
    public Output<WorkspaceFolderRegistryMetadataArgs> registryMetadata() {
        return this.registryMetadata;
    }

    /**
     * The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private WorkspaceFolderArgs() {}

    private WorkspaceFolderArgs(WorkspaceFolderArgs $) {
        this.categoryName = $.categoryName;
        this.description = $.description;
        this.folderKey = $.folderKey;
        this.identifier = $.identifier;
        this.key = $.key;
        this.modelVersion = $.modelVersion;
        this.name = $.name;
        this.objectStatus = $.objectStatus;
        this.registryMetadata = $.registryMetadata;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceFolderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceFolderArgs $;

        public Builder() {
            $ = new WorkspaceFolderArgs();
        }

        public Builder(WorkspaceFolderArgs defaults) {
            $ = new WorkspaceFolderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryName (Updatable) The category name.
         * 
         * @return builder
         * 
         */
        public Builder categoryName(@Nullable Output<String> categoryName) {
            $.categoryName = categoryName;
            return this;
        }

        /**
         * @param categoryName (Updatable) The category name.
         * 
         * @return builder
         * 
         */
        public Builder categoryName(String categoryName) {
            return categoryName(Output.of(categoryName));
        }

        /**
         * @param description (Updatable) A user defined description for the folder.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user defined description for the folder.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder folderKey(@Nullable Output<String> folderKey) {
            $.folderKey = folderKey;
            return this;
        }

        public Builder folderKey(String folderKey) {
            return folderKey(Output.of(folderKey));
        }

        /**
         * @param identifier (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param key (Updatable) The identifying key for the object.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) The identifying key for the object.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(@Nullable Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(@Nullable Output<Integer> objectStatus) {
            $.objectStatus = objectStatus;
            return this;
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(Integer objectStatus) {
            return objectStatus(Output.of(objectStatus));
        }

        /**
         * @param registryMetadata (Updatable) Information about the object and its parent.
         * 
         * @return builder
         * 
         */
        public Builder registryMetadata(Output<WorkspaceFolderRegistryMetadataArgs> registryMetadata) {
            $.registryMetadata = registryMetadata;
            return this;
        }

        /**
         * @param registryMetadata (Updatable) Information about the object and its parent.
         * 
         * @return builder
         * 
         */
        public Builder registryMetadata(WorkspaceFolderRegistryMetadataArgs registryMetadata) {
            return registryMetadata(Output.of(registryMetadata));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceFolderArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("WorkspaceFolderArgs", "identifier");
            }
            if ($.registryMetadata == null) {
                throw new MissingRequiredPropertyException("WorkspaceFolderArgs", "registryMetadata");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("WorkspaceFolderArgs", "workspaceId");
            }
            return $;
        }
    }

}
