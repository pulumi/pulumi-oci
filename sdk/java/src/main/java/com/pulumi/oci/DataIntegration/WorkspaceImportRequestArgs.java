// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceImportRequestImportConflictResolutionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceImportRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceImportRequestArgs Empty = new WorkspaceImportRequestArgs();

    /**
     * This field controls if the data asset references will be included during import.
     * 
     */
    @Import(name="areDataAssetReferencesIncluded")
    private @Nullable Output<Boolean> areDataAssetReferencesIncluded;

    /**
     * @return This field controls if the data asset references will be included during import.
     * 
     */
    public Optional<Output<Boolean>> areDataAssetReferencesIncluded() {
        return Optional.ofNullable(this.areDataAssetReferencesIncluded);
    }

    /**
     * Name of the Object Storage bucket where the object will be imported from.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Name of the Object Storage bucket where the object will be imported from.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Name of the zip file to be imported.
     * 
     */
    @Import(name="fileName", required=true)
    private Output<String> fileName;

    /**
     * @return Name of the zip file to be imported.
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }

    /**
     * Import Objects Conflict resolution.
     * 
     */
    @Import(name="importConflictResolution")
    private @Nullable Output<WorkspaceImportRequestImportConflictResolutionArgs> importConflictResolution;

    /**
     * @return Import Objects Conflict resolution.
     * 
     */
    public Optional<Output<WorkspaceImportRequestImportConflictResolutionArgs>> importConflictResolution() {
        return Optional.ofNullable(this.importConflictResolution);
    }

    /**
     * Key of the object inside which all the objects will be imported
     * 
     */
    @Import(name="objectKeyForImport")
    private @Nullable Output<String> objectKeyForImport;

    /**
     * @return Key of the object inside which all the objects will be imported
     * 
     */
    public Optional<Output<String>> objectKeyForImport() {
        return Optional.ofNullable(this.objectKeyForImport);
    }

    /**
     * Region of the object storage (if using object storage of different region)
     * 
     */
    @Import(name="objectStorageRegion")
    private @Nullable Output<String> objectStorageRegion;

    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    public Optional<Output<String>> objectStorageRegion() {
        return Optional.ofNullable(this.objectStorageRegion);
    }

    /**
     * Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    @Import(name="objectStorageTenancyId")
    private @Nullable Output<String> objectStorageTenancyId;

    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    public Optional<Output<String>> objectStorageTenancyId() {
        return Optional.ofNullable(this.objectStorageTenancyId);
    }

    /**
     * The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private WorkspaceImportRequestArgs() {}

    private WorkspaceImportRequestArgs(WorkspaceImportRequestArgs $) {
        this.areDataAssetReferencesIncluded = $.areDataAssetReferencesIncluded;
        this.bucket = $.bucket;
        this.fileName = $.fileName;
        this.importConflictResolution = $.importConflictResolution;
        this.objectKeyForImport = $.objectKeyForImport;
        this.objectStorageRegion = $.objectStorageRegion;
        this.objectStorageTenancyId = $.objectStorageTenancyId;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceImportRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceImportRequestArgs $;

        public Builder() {
            $ = new WorkspaceImportRequestArgs();
        }

        public Builder(WorkspaceImportRequestArgs defaults) {
            $ = new WorkspaceImportRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param areDataAssetReferencesIncluded This field controls if the data asset references will be included during import.
         * 
         * @return builder
         * 
         */
        public Builder areDataAssetReferencesIncluded(@Nullable Output<Boolean> areDataAssetReferencesIncluded) {
            $.areDataAssetReferencesIncluded = areDataAssetReferencesIncluded;
            return this;
        }

        /**
         * @param areDataAssetReferencesIncluded This field controls if the data asset references will be included during import.
         * 
         * @return builder
         * 
         */
        public Builder areDataAssetReferencesIncluded(Boolean areDataAssetReferencesIncluded) {
            return areDataAssetReferencesIncluded(Output.of(areDataAssetReferencesIncluded));
        }

        /**
         * @param bucket Name of the Object Storage bucket where the object will be imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the Object Storage bucket where the object will be imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param fileName Name of the zip file to be imported.
         * 
         * @return builder
         * 
         */
        public Builder fileName(Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName Name of the zip file to be imported.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param importConflictResolution Import Objects Conflict resolution.
         * 
         * @return builder
         * 
         */
        public Builder importConflictResolution(@Nullable Output<WorkspaceImportRequestImportConflictResolutionArgs> importConflictResolution) {
            $.importConflictResolution = importConflictResolution;
            return this;
        }

        /**
         * @param importConflictResolution Import Objects Conflict resolution.
         * 
         * @return builder
         * 
         */
        public Builder importConflictResolution(WorkspaceImportRequestImportConflictResolutionArgs importConflictResolution) {
            return importConflictResolution(Output.of(importConflictResolution));
        }

        /**
         * @param objectKeyForImport Key of the object inside which all the objects will be imported
         * 
         * @return builder
         * 
         */
        public Builder objectKeyForImport(@Nullable Output<String> objectKeyForImport) {
            $.objectKeyForImport = objectKeyForImport;
            return this;
        }

        /**
         * @param objectKeyForImport Key of the object inside which all the objects will be imported
         * 
         * @return builder
         * 
         */
        public Builder objectKeyForImport(String objectKeyForImport) {
            return objectKeyForImport(Output.of(objectKeyForImport));
        }

        /**
         * @param objectStorageRegion Region of the object storage (if using object storage of different region)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageRegion(@Nullable Output<String> objectStorageRegion) {
            $.objectStorageRegion = objectStorageRegion;
            return this;
        }

        /**
         * @param objectStorageRegion Region of the object storage (if using object storage of different region)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageRegion(String objectStorageRegion) {
            return objectStorageRegion(Output.of(objectStorageRegion));
        }

        /**
         * @param objectStorageTenancyId Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageTenancyId(@Nullable Output<String> objectStorageTenancyId) {
            $.objectStorageTenancyId = objectStorageTenancyId;
            return this;
        }

        /**
         * @param objectStorageTenancyId Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageTenancyId(String objectStorageTenancyId) {
            return objectStorageTenancyId(Output.of(objectStorageTenancyId));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceImportRequestArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("WorkspaceImportRequestArgs", "bucket");
            }
            if ($.fileName == null) {
                throw new MissingRequiredPropertyException("WorkspaceImportRequestArgs", "fileName");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("WorkspaceImportRequestArgs", "workspaceId");
            }
            return $;
        }
    }

}
