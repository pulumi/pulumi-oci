// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.inputs.GetWorkspaceApplicationPatchesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkspaceApplicationPatchesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkspaceApplicationPatchesPlainArgs Empty = new GetWorkspaceApplicationPatchesPlainArgs();

    /**
     * The application key.
     * 
     */
    @Import(name="applicationKey", required=true)
    private String applicationKey;

    /**
     * @return The application key.
     * 
     */
    public String applicationKey() {
        return this.applicationKey;
    }

    /**
     * Specifies the fields to get for an object.
     * 
     */
    @Import(name="fields")
    private @Nullable List<String> fields;

    /**
     * @return Specifies the fields to get for an object.
     * 
     */
    public Optional<List<String>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable List<GetWorkspaceApplicationPatchesFilter> filters;

    public Optional<List<GetWorkspaceApplicationPatchesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Used to filter by the identifier of the published object.
     * 
     */
    @Import(name="identifiers")
    private @Nullable List<String> identifiers;

    /**
     * @return Used to filter by the identifier of the published object.
     * 
     */
    public Optional<List<String>> identifiers() {
        return Optional.ofNullable(this.identifiers);
    }

    /**
     * Used to filter by the name of the object.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The workspace ID.
     * 
     */
    @Import(name="workspaceId", required=true)
    private String workspaceId;

    /**
     * @return The workspace ID.
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    private GetWorkspaceApplicationPatchesPlainArgs() {}

    private GetWorkspaceApplicationPatchesPlainArgs(GetWorkspaceApplicationPatchesPlainArgs $) {
        this.applicationKey = $.applicationKey;
        this.fields = $.fields;
        this.filters = $.filters;
        this.identifiers = $.identifiers;
        this.name = $.name;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkspaceApplicationPatchesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkspaceApplicationPatchesPlainArgs $;

        public Builder() {
            $ = new GetWorkspaceApplicationPatchesPlainArgs();
        }

        public Builder(GetWorkspaceApplicationPatchesPlainArgs defaults) {
            $ = new GetWorkspaceApplicationPatchesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationKey The application key.
         * 
         * @return builder
         * 
         */
        public Builder applicationKey(String applicationKey) {
            $.applicationKey = applicationKey;
            return this;
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable List<String> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable List<GetWorkspaceApplicationPatchesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetWorkspaceApplicationPatchesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param identifiers Used to filter by the identifier of the published object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(@Nullable List<String> identifiers) {
            $.identifiers = identifiers;
            return this;
        }

        /**
         * @param identifiers Used to filter by the identifier of the published object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(String... identifiers) {
            return identifiers(List.of(identifiers));
        }

        /**
         * @param name Used to filter by the name of the object.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        public GetWorkspaceApplicationPatchesPlainArgs build() {
            if ($.applicationKey == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceApplicationPatchesPlainArgs", "applicationKey");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceApplicationPatchesPlainArgs", "workspaceId");
            }
            return $;
        }
    }

}
