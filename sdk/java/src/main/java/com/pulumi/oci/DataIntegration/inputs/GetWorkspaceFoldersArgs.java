// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.inputs.GetWorkspaceFoldersFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkspaceFoldersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkspaceFoldersArgs Empty = new GetWorkspaceFoldersArgs();

    /**
     * Used to filter by the project or the folder object.
     * 
     */
    @Import(name="aggregatorKey")
    private @Nullable Output<String> aggregatorKey;

    /**
     * @return Used to filter by the project or the folder object.
     * 
     */
    public Optional<Output<String>> aggregatorKey() {
        return Optional.ofNullable(this.aggregatorKey);
    }

    /**
     * Specifies the fields to get for an object.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    /**
     * @return Specifies the fields to get for an object.
     * 
     */
    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetWorkspaceFoldersFilterArgs>> filters;

    public Optional<Output<List<GetWorkspaceFoldersFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Used to filter by the identifier of the object.
     * 
     */
    @Import(name="identifiers")
    private @Nullable Output<List<String>> identifiers;

    /**
     * @return Used to filter by the identifier of the object.
     * 
     */
    public Optional<Output<List<String>>> identifiers() {
        return Optional.ofNullable(this.identifiers);
    }

    /**
     * Used to filter by the name of the object.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * This parameter can be used to filter objects by the names that match partially or fully with the given value.
     * 
     */
    @Import(name="nameContains")
    private @Nullable Output<String> nameContains;

    /**
     * @return This parameter can be used to filter objects by the names that match partially or fully with the given value.
     * 
     */
    public Optional<Output<String>> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }

    /**
     * The workspace ID.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private GetWorkspaceFoldersArgs() {}

    private GetWorkspaceFoldersArgs(GetWorkspaceFoldersArgs $) {
        this.aggregatorKey = $.aggregatorKey;
        this.fields = $.fields;
        this.filters = $.filters;
        this.identifiers = $.identifiers;
        this.name = $.name;
        this.nameContains = $.nameContains;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkspaceFoldersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkspaceFoldersArgs $;

        public Builder() {
            $ = new GetWorkspaceFoldersArgs();
        }

        public Builder(GetWorkspaceFoldersArgs defaults) {
            $ = new GetWorkspaceFoldersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregatorKey Used to filter by the project or the folder object.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorKey(@Nullable Output<String> aggregatorKey) {
            $.aggregatorKey = aggregatorKey;
            return this;
        }

        /**
         * @param aggregatorKey Used to filter by the project or the folder object.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorKey(String aggregatorKey) {
            return aggregatorKey(Output.of(aggregatorKey));
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable Output<List<GetWorkspaceFoldersFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetWorkspaceFoldersFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetWorkspaceFoldersFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param identifiers Used to filter by the identifier of the object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(@Nullable Output<List<String>> identifiers) {
            $.identifiers = identifiers;
            return this;
        }

        /**
         * @param identifiers Used to filter by the identifier of the object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(List<String> identifiers) {
            return identifiers(Output.of(identifiers));
        }

        /**
         * @param identifiers Used to filter by the identifier of the object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(String... identifiers) {
            return identifiers(List.of(identifiers));
        }

        /**
         * @param name Used to filter by the name of the object.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Used to filter by the name of the object.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameContains This parameter can be used to filter objects by the names that match partially or fully with the given value.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(@Nullable Output<String> nameContains) {
            $.nameContains = nameContains;
            return this;
        }

        /**
         * @param nameContains This parameter can be used to filter objects by the names that match partially or fully with the given value.
         * 
         * @return builder
         * 
         */
        public Builder nameContains(String nameContains) {
            return nameContains(Output.of(nameContains));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public GetWorkspaceFoldersArgs build() {
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceFoldersArgs", "workspaceId");
            }
            return $;
        }
    }

}
