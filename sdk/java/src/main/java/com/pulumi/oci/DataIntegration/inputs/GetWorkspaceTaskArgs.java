// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetWorkspaceTaskArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkspaceTaskArgs Empty = new GetWorkspaceTaskArgs();

    /**
     * Used to expand references of the object. If value is true, then all referenced objects are expanded. If value is false, then shallow objects are returned in place of references. Default is false. &lt;br&gt;&lt;br&gt;&lt;B&gt;Example:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?expandReferences=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
     * 
     */
    @Import(name="expandReferences", required=true)
    private Output<String> expandReferences;

    /**
     * @return Used to expand references of the object. If value is true, then all referenced objects are expanded. If value is false, then shallow objects are returned in place of references. Default is false. &lt;br&gt;&lt;br&gt;&lt;B&gt;Example:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?expandReferences=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
     * 
     */
    public Output<String> expandReferences() {
        return this.expandReferences;
    }

    /**
     * The key of the object.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The key of the object.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The workspace ID.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private GetWorkspaceTaskArgs() {}

    private GetWorkspaceTaskArgs(GetWorkspaceTaskArgs $) {
        this.expandReferences = $.expandReferences;
        this.key = $.key;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkspaceTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkspaceTaskArgs $;

        public Builder() {
            $ = new GetWorkspaceTaskArgs();
        }

        public Builder(GetWorkspaceTaskArgs defaults) {
            $ = new GetWorkspaceTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expandReferences Used to expand references of the object. If value is true, then all referenced objects are expanded. If value is false, then shallow objects are returned in place of references. Default is false. &lt;br&gt;&lt;br&gt;&lt;B&gt;Example:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?expandReferences=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
         * 
         * @return builder
         * 
         */
        public Builder expandReferences(Output<String> expandReferences) {
            $.expandReferences = expandReferences;
            return this;
        }

        /**
         * @param expandReferences Used to expand references of the object. If value is true, then all referenced objects are expanded. If value is false, then shallow objects are returned in place of references. Default is false. &lt;br&gt;&lt;br&gt;&lt;B&gt;Example:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?expandReferences=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
         * 
         * @return builder
         * 
         */
        public Builder expandReferences(String expandReferences) {
            return expandReferences(Output.of(expandReferences));
        }

        /**
         * @param key The key of the object.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The key of the object.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public GetWorkspaceTaskArgs build() {
            if ($.expandReferences == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceTaskArgs", "expandReferences");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceTaskArgs", "key");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceTaskArgs", "workspaceId");
            }
            return $;
        }
    }

}
