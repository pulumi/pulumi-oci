// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.inputs.GetWorkspaceTasksFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkspaceTasksArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkspaceTasksArgs Empty = new GetWorkspaceTasksArgs();

    /**
     * Specifies the fields to get for an object.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    /**
     * @return Specifies the fields to get for an object.
     * 
     */
    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetWorkspaceTasksFilterArgs>> filters;

    public Optional<Output<List<GetWorkspaceTasksFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Unique key of the folder.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return Unique key of the folder.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * Used to filter by the identifier of the object.
     * 
     */
    @Import(name="identifiers")
    private @Nullable Output<List<String>> identifiers;

    /**
     * @return Used to filter by the identifier of the object.
     * 
     */
    public Optional<Output<List<String>>> identifiers() {
        return Optional.ofNullable(this.identifiers);
    }

    /**
     * Used to filter by the key of the object.
     * 
     */
    @Import(name="keys")
    private @Nullable Output<List<String>> keys;

    /**
     * @return Used to filter by the key of the object.
     * 
     */
    public Optional<Output<List<String>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * Used to filter by the name of the object.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. &lt;br&gt;&lt;br&gt;&lt;B&gt;Examples:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=false&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
     * 
     */
    @Import(name="types")
    private @Nullable Output<List<String>> types;

    /**
     * @return Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. &lt;br&gt;&lt;br&gt;&lt;B&gt;Examples:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=false&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
     * 
     */
    public Optional<Output<List<String>>> types() {
        return Optional.ofNullable(this.types);
    }

    /**
     * The workspace ID.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private GetWorkspaceTasksArgs() {}

    private GetWorkspaceTasksArgs(GetWorkspaceTasksArgs $) {
        this.fields = $.fields;
        this.filters = $.filters;
        this.folderId = $.folderId;
        this.identifiers = $.identifiers;
        this.keys = $.keys;
        this.name = $.name;
        this.types = $.types;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkspaceTasksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkspaceTasksArgs $;

        public Builder() {
            $ = new GetWorkspaceTasksArgs();
        }

        public Builder(GetWorkspaceTasksArgs defaults) {
            $ = new GetWorkspaceTasksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Specifies the fields to get for an object.
         * 
         * @return builder
         * 
         */
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable Output<List<GetWorkspaceTasksFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetWorkspaceTasksFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetWorkspaceTasksFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param folderId Unique key of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId Unique key of the folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param identifiers Used to filter by the identifier of the object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(@Nullable Output<List<String>> identifiers) {
            $.identifiers = identifiers;
            return this;
        }

        /**
         * @param identifiers Used to filter by the identifier of the object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(List<String> identifiers) {
            return identifiers(Output.of(identifiers));
        }

        /**
         * @param identifiers Used to filter by the identifier of the object.
         * 
         * @return builder
         * 
         */
        public Builder identifiers(String... identifiers) {
            return identifiers(List.of(identifiers));
        }

        /**
         * @param keys Used to filter by the key of the object.
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<List<String>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys Used to filter by the key of the object.
         * 
         * @return builder
         * 
         */
        public Builder keys(List<String> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys Used to filter by the key of the object.
         * 
         * @return builder
         * 
         */
        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param name Used to filter by the name of the object.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Used to filter by the name of the object.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param types Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. &lt;br&gt;&lt;br&gt;&lt;B&gt;Examples:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=false&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
         * 
         * @return builder
         * 
         */
        public Builder types(@Nullable Output<List<String>> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. &lt;br&gt;&lt;br&gt;&lt;B&gt;Examples:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=false&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
         * 
         * @return builder
         * 
         */
        public Builder types(List<String> types) {
            return types(Output.of(types));
        }

        /**
         * @param types Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. &lt;br&gt;&lt;br&gt;&lt;B&gt;Examples:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=false&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
         * 
         * @return builder
         * 
         */
        public Builder types(String... types) {
            return types(List.of(types));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public GetWorkspaceTasksArgs build() {
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("GetWorkspaceTasksArgs", "workspaceId");
            }
            return $;
        }
    }

}
