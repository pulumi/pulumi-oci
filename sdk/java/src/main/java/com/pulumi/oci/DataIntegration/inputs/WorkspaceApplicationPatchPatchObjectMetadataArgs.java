// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceApplicationPatchPatchObjectMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceApplicationPatchPatchObjectMetadataArgs Empty = new WorkspaceApplicationPatchPatchObjectMetadataArgs();

    /**
     * The patch action indicating if object was created, updated, or deleted.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return The patch action indicating if object was created, updated, or deleted.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * The object&#39;s key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The object&#39;s key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The fully qualified path of the published object, which would include its project and folder.
     * 
     */
    @Import(name="namePath")
    private @Nullable Output<String> namePath;

    /**
     * @return The fully qualified path of the published object, which would include its project and folder.
     * 
     */
    public Optional<Output<String>> namePath() {
        return Optional.ofNullable(this.namePath);
    }

    /**
     * The object version.
     * 
     */
    @Import(name="objectVersion")
    private @Nullable Output<Integer> objectVersion;

    /**
     * @return The object version.
     * 
     */
    public Optional<Output<Integer>> objectVersion() {
        return Optional.ofNullable(this.objectVersion);
    }

    /**
     * The type of the object in patch.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the object in patch.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private WorkspaceApplicationPatchPatchObjectMetadataArgs() {}

    private WorkspaceApplicationPatchPatchObjectMetadataArgs(WorkspaceApplicationPatchPatchObjectMetadataArgs $) {
        this.action = $.action;
        this.identifier = $.identifier;
        this.key = $.key;
        this.name = $.name;
        this.namePath = $.namePath;
        this.objectVersion = $.objectVersion;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceApplicationPatchPatchObjectMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceApplicationPatchPatchObjectMetadataArgs $;

        public Builder() {
            $ = new WorkspaceApplicationPatchPatchObjectMetadataArgs();
        }

        public Builder(WorkspaceApplicationPatchPatchObjectMetadataArgs defaults) {
            $ = new WorkspaceApplicationPatchPatchObjectMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The patch action indicating if object was created, updated, or deleted.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The patch action indicating if object was created, updated, or deleted.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param identifier Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param key The object&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The object&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namePath The fully qualified path of the published object, which would include its project and folder.
         * 
         * @return builder
         * 
         */
        public Builder namePath(@Nullable Output<String> namePath) {
            $.namePath = namePath;
            return this;
        }

        /**
         * @param namePath The fully qualified path of the published object, which would include its project and folder.
         * 
         * @return builder
         * 
         */
        public Builder namePath(String namePath) {
            return namePath(Output.of(namePath));
        }

        /**
         * @param objectVersion The object version.
         * 
         * @return builder
         * 
         */
        public Builder objectVersion(@Nullable Output<Integer> objectVersion) {
            $.objectVersion = objectVersion;
            return this;
        }

        /**
         * @param objectVersion The object version.
         * 
         * @return builder
         * 
         */
        public Builder objectVersion(Integer objectVersion) {
            return objectVersion(Output.of(objectVersion));
        }

        /**
         * @param type The type of the object in patch.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the object in patch.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public WorkspaceApplicationPatchPatchObjectMetadataArgs build() {
            return $;
        }
    }

}
