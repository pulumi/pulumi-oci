// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationPatchDependentObjectMetadataArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationPatchMetadataArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationPatchParentRefArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationPatchPatchObjectMetadataArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationPatchRegistryMetadataArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceApplicationPatchState extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceApplicationPatchState Empty = new WorkspaceApplicationPatchState();

    /**
     * The application key.
     * 
     */
    @Import(name="applicationKey")
    private @Nullable Output<String> applicationKey;

    /**
     * @return The application key.
     * 
     */
    public Optional<Output<String>> applicationKey() {
        return Optional.ofNullable(this.applicationKey);
    }

    /**
     * The application version of the patch.
     * 
     */
    @Import(name="applicationVersion")
    private @Nullable Output<Integer> applicationVersion;

    /**
     * @return The application version of the patch.
     * 
     */
    public Optional<Output<Integer>> applicationVersion() {
        return Optional.ofNullable(this.applicationVersion);
    }

    /**
     * List of dependent objects in this patch.
     * 
     */
    @Import(name="dependentObjectMetadatas")
    private @Nullable Output<List<WorkspaceApplicationPatchDependentObjectMetadataArgs>> dependentObjectMetadatas;

    /**
     * @return List of dependent objects in this patch.
     * 
     */
    public Optional<Output<List<WorkspaceApplicationPatchDependentObjectMetadataArgs>>> dependentObjectMetadatas() {
        return Optional.ofNullable(this.dependentObjectMetadatas);
    }

    /**
     * Detailed description for the object.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Detailed description for the object.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The errors encountered while applying the patch, if any.
     * 
     */
    @Import(name="errorMessages")
    private @Nullable Output<Map<String,String>> errorMessages;

    /**
     * @return The errors encountered while applying the patch, if any.
     * 
     */
    public Optional<Output<Map<String,String>>> errorMessages() {
        return Optional.ofNullable(this.errorMessages);
    }

    /**
     * Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * The object&#39;s key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The object&#39;s key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    @Import(name="keyMap")
    private @Nullable Output<Map<String,String>> keyMap;

    /**
     * @return A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    public Optional<Output<Map<String,String>>> keyMap() {
        return Optional.ofNullable(this.keyMap);
    }

    /**
     * A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<WorkspaceApplicationPatchMetadataArgs>> metadatas;

    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public Optional<Output<List<WorkspaceApplicationPatchMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * The object type.
     * 
     */
    @Import(name="modelType")
    private @Nullable Output<String> modelType;

    /**
     * @return The object type.
     * 
     */
    public Optional<Output<String>> modelType() {
        return Optional.ofNullable(this.modelType);
    }

    /**
     * The object&#39;s model version.
     * 
     */
    @Import(name="modelVersion")
    private @Nullable Output<String> modelVersion;

    /**
     * @return The object&#39;s model version.
     * 
     */
    public Optional<Output<String>> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }

    /**
     * Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The array of object keys to publish into application.
     * 
     */
    @Import(name="objectKeys")
    private @Nullable Output<List<String>> objectKeys;

    /**
     * @return The array of object keys to publish into application.
     * 
     */
    public Optional<Output<List<String>>> objectKeys() {
        return Optional.ofNullable(this.objectKeys);
    }

    /**
     * The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    @Import(name="objectStatus")
    private @Nullable Output<Integer> objectStatus;

    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Output<Integer>> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }

    /**
     * The object version.
     * 
     */
    @Import(name="objectVersion")
    private @Nullable Output<Integer> objectVersion;

    /**
     * @return The object version.
     * 
     */
    public Optional<Output<Integer>> objectVersion() {
        return Optional.ofNullable(this.objectVersion);
    }

    /**
     * A reference to the object&#39;s parent.
     * 
     */
    @Import(name="parentReves")
    private @Nullable Output<List<WorkspaceApplicationPatchParentRefArgs>> parentReves;

    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    public Optional<Output<List<WorkspaceApplicationPatchParentRefArgs>>> parentReves() {
        return Optional.ofNullable(this.parentReves);
    }

    /**
     * List of objects that are published or unpublished in this patch.
     * 
     */
    @Import(name="patchObjectMetadatas")
    private @Nullable Output<List<WorkspaceApplicationPatchPatchObjectMetadataArgs>> patchObjectMetadatas;

    /**
     * @return List of objects that are published or unpublished in this patch.
     * 
     */
    public Optional<Output<List<WorkspaceApplicationPatchPatchObjectMetadataArgs>>> patchObjectMetadatas() {
        return Optional.ofNullable(this.patchObjectMetadatas);
    }

    /**
     * Status of the patch applied or being applied on the application
     * 
     */
    @Import(name="patchStatus")
    private @Nullable Output<String> patchStatus;

    /**
     * @return Status of the patch applied or being applied on the application
     * 
     */
    public Optional<Output<String>> patchStatus() {
        return Optional.ofNullable(this.patchStatus);
    }

    /**
     * The type of the patch applied or being applied on the application.
     * 
     */
    @Import(name="patchType")
    private @Nullable Output<String> patchType;

    /**
     * @return The type of the patch applied or being applied on the application.
     * 
     */
    public Optional<Output<String>> patchType() {
        return Optional.ofNullable(this.patchType);
    }

    /**
     * Information about the object and its parent.
     * 
     */
    @Import(name="registryMetadata")
    private @Nullable Output<WorkspaceApplicationPatchRegistryMetadataArgs> registryMetadata;

    /**
     * @return Information about the object and its parent.
     * 
     */
    public Optional<Output<WorkspaceApplicationPatchRegistryMetadataArgs>> registryMetadata() {
        return Optional.ofNullable(this.registryMetadata);
    }

    /**
     * The date and time the patch was applied, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timePatched")
    private @Nullable Output<String> timePatched;

    /**
     * @return The date and time the patch was applied, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timePatched() {
        return Optional.ofNullable(this.timePatched);
    }

    /**
     * The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private WorkspaceApplicationPatchState() {}

    private WorkspaceApplicationPatchState(WorkspaceApplicationPatchState $) {
        this.applicationKey = $.applicationKey;
        this.applicationVersion = $.applicationVersion;
        this.dependentObjectMetadatas = $.dependentObjectMetadatas;
        this.description = $.description;
        this.errorMessages = $.errorMessages;
        this.identifier = $.identifier;
        this.key = $.key;
        this.keyMap = $.keyMap;
        this.metadatas = $.metadatas;
        this.modelType = $.modelType;
        this.modelVersion = $.modelVersion;
        this.name = $.name;
        this.objectKeys = $.objectKeys;
        this.objectStatus = $.objectStatus;
        this.objectVersion = $.objectVersion;
        this.parentReves = $.parentReves;
        this.patchObjectMetadatas = $.patchObjectMetadatas;
        this.patchStatus = $.patchStatus;
        this.patchType = $.patchType;
        this.registryMetadata = $.registryMetadata;
        this.timePatched = $.timePatched;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceApplicationPatchState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceApplicationPatchState $;

        public Builder() {
            $ = new WorkspaceApplicationPatchState();
        }

        public Builder(WorkspaceApplicationPatchState defaults) {
            $ = new WorkspaceApplicationPatchState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationKey The application key.
         * 
         * @return builder
         * 
         */
        public Builder applicationKey(@Nullable Output<String> applicationKey) {
            $.applicationKey = applicationKey;
            return this;
        }

        /**
         * @param applicationKey The application key.
         * 
         * @return builder
         * 
         */
        public Builder applicationKey(String applicationKey) {
            return applicationKey(Output.of(applicationKey));
        }

        /**
         * @param applicationVersion The application version of the patch.
         * 
         * @return builder
         * 
         */
        public Builder applicationVersion(@Nullable Output<Integer> applicationVersion) {
            $.applicationVersion = applicationVersion;
            return this;
        }

        /**
         * @param applicationVersion The application version of the patch.
         * 
         * @return builder
         * 
         */
        public Builder applicationVersion(Integer applicationVersion) {
            return applicationVersion(Output.of(applicationVersion));
        }

        /**
         * @param dependentObjectMetadatas List of dependent objects in this patch.
         * 
         * @return builder
         * 
         */
        public Builder dependentObjectMetadatas(@Nullable Output<List<WorkspaceApplicationPatchDependentObjectMetadataArgs>> dependentObjectMetadatas) {
            $.dependentObjectMetadatas = dependentObjectMetadatas;
            return this;
        }

        /**
         * @param dependentObjectMetadatas List of dependent objects in this patch.
         * 
         * @return builder
         * 
         */
        public Builder dependentObjectMetadatas(List<WorkspaceApplicationPatchDependentObjectMetadataArgs> dependentObjectMetadatas) {
            return dependentObjectMetadatas(Output.of(dependentObjectMetadatas));
        }

        /**
         * @param dependentObjectMetadatas List of dependent objects in this patch.
         * 
         * @return builder
         * 
         */
        public Builder dependentObjectMetadatas(WorkspaceApplicationPatchDependentObjectMetadataArgs... dependentObjectMetadatas) {
            return dependentObjectMetadatas(List.of(dependentObjectMetadatas));
        }

        /**
         * @param description Detailed description for the object.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Detailed description for the object.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param errorMessages The errors encountered while applying the patch, if any.
         * 
         * @return builder
         * 
         */
        public Builder errorMessages(@Nullable Output<Map<String,String>> errorMessages) {
            $.errorMessages = errorMessages;
            return this;
        }

        /**
         * @param errorMessages The errors encountered while applying the patch, if any.
         * 
         * @return builder
         * 
         */
        public Builder errorMessages(Map<String,String> errorMessages) {
            return errorMessages(Output.of(errorMessages));
        }

        /**
         * @param identifier Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param key The object&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The object&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param keyMap A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
         * 
         * @return builder
         * 
         */
        public Builder keyMap(@Nullable Output<Map<String,String>> keyMap) {
            $.keyMap = keyMap;
            return this;
        }

        /**
         * @param keyMap A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
         * 
         * @return builder
         * 
         */
        public Builder keyMap(Map<String,String> keyMap) {
            return keyMap(Output.of(keyMap));
        }

        /**
         * @param metadatas A summary type containing information about the object including its key, name and when/who created/updated it.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<WorkspaceApplicationPatchMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas A summary type containing information about the object including its key, name and when/who created/updated it.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<WorkspaceApplicationPatchMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas A summary type containing information about the object including its key, name and when/who created/updated it.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(WorkspaceApplicationPatchMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param modelType The object type.
         * 
         * @return builder
         * 
         */
        public Builder modelType(@Nullable Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType The object type.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param modelVersion The object&#39;s model version.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(@Nullable Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion The object&#39;s model version.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        /**
         * @param name Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectKeys The array of object keys to publish into application.
         * 
         * @return builder
         * 
         */
        public Builder objectKeys(@Nullable Output<List<String>> objectKeys) {
            $.objectKeys = objectKeys;
            return this;
        }

        /**
         * @param objectKeys The array of object keys to publish into application.
         * 
         * @return builder
         * 
         */
        public Builder objectKeys(List<String> objectKeys) {
            return objectKeys(Output.of(objectKeys));
        }

        /**
         * @param objectKeys The array of object keys to publish into application.
         * 
         * @return builder
         * 
         */
        public Builder objectKeys(String... objectKeys) {
            return objectKeys(List.of(objectKeys));
        }

        /**
         * @param objectStatus The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(@Nullable Output<Integer> objectStatus) {
            $.objectStatus = objectStatus;
            return this;
        }

        /**
         * @param objectStatus The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(Integer objectStatus) {
            return objectStatus(Output.of(objectStatus));
        }

        /**
         * @param objectVersion The object version.
         * 
         * @return builder
         * 
         */
        public Builder objectVersion(@Nullable Output<Integer> objectVersion) {
            $.objectVersion = objectVersion;
            return this;
        }

        /**
         * @param objectVersion The object version.
         * 
         * @return builder
         * 
         */
        public Builder objectVersion(Integer objectVersion) {
            return objectVersion(Output.of(objectVersion));
        }

        /**
         * @param parentReves A reference to the object&#39;s parent.
         * 
         * @return builder
         * 
         */
        public Builder parentReves(@Nullable Output<List<WorkspaceApplicationPatchParentRefArgs>> parentReves) {
            $.parentReves = parentReves;
            return this;
        }

        /**
         * @param parentReves A reference to the object&#39;s parent.
         * 
         * @return builder
         * 
         */
        public Builder parentReves(List<WorkspaceApplicationPatchParentRefArgs> parentReves) {
            return parentReves(Output.of(parentReves));
        }

        /**
         * @param parentReves A reference to the object&#39;s parent.
         * 
         * @return builder
         * 
         */
        public Builder parentReves(WorkspaceApplicationPatchParentRefArgs... parentReves) {
            return parentReves(List.of(parentReves));
        }

        /**
         * @param patchObjectMetadatas List of objects that are published or unpublished in this patch.
         * 
         * @return builder
         * 
         */
        public Builder patchObjectMetadatas(@Nullable Output<List<WorkspaceApplicationPatchPatchObjectMetadataArgs>> patchObjectMetadatas) {
            $.patchObjectMetadatas = patchObjectMetadatas;
            return this;
        }

        /**
         * @param patchObjectMetadatas List of objects that are published or unpublished in this patch.
         * 
         * @return builder
         * 
         */
        public Builder patchObjectMetadatas(List<WorkspaceApplicationPatchPatchObjectMetadataArgs> patchObjectMetadatas) {
            return patchObjectMetadatas(Output.of(patchObjectMetadatas));
        }

        /**
         * @param patchObjectMetadatas List of objects that are published or unpublished in this patch.
         * 
         * @return builder
         * 
         */
        public Builder patchObjectMetadatas(WorkspaceApplicationPatchPatchObjectMetadataArgs... patchObjectMetadatas) {
            return patchObjectMetadatas(List.of(patchObjectMetadatas));
        }

        /**
         * @param patchStatus Status of the patch applied or being applied on the application
         * 
         * @return builder
         * 
         */
        public Builder patchStatus(@Nullable Output<String> patchStatus) {
            $.patchStatus = patchStatus;
            return this;
        }

        /**
         * @param patchStatus Status of the patch applied or being applied on the application
         * 
         * @return builder
         * 
         */
        public Builder patchStatus(String patchStatus) {
            return patchStatus(Output.of(patchStatus));
        }

        /**
         * @param patchType The type of the patch applied or being applied on the application.
         * 
         * @return builder
         * 
         */
        public Builder patchType(@Nullable Output<String> patchType) {
            $.patchType = patchType;
            return this;
        }

        /**
         * @param patchType The type of the patch applied or being applied on the application.
         * 
         * @return builder
         * 
         */
        public Builder patchType(String patchType) {
            return patchType(Output.of(patchType));
        }

        /**
         * @param registryMetadata Information about the object and its parent.
         * 
         * @return builder
         * 
         */
        public Builder registryMetadata(@Nullable Output<WorkspaceApplicationPatchRegistryMetadataArgs> registryMetadata) {
            $.registryMetadata = registryMetadata;
            return this;
        }

        /**
         * @param registryMetadata Information about the object and its parent.
         * 
         * @return builder
         * 
         */
        public Builder registryMetadata(WorkspaceApplicationPatchRegistryMetadataArgs registryMetadata) {
            return registryMetadata(Output.of(registryMetadata));
        }

        /**
         * @param timePatched The date and time the patch was applied, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timePatched(@Nullable Output<String> timePatched) {
            $.timePatched = timePatched;
            return this;
        }

        /**
         * @param timePatched The date and time the patch was applied, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timePatched(String timePatched) {
            return timePatched(Output.of(timePatched));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceApplicationPatchState build() {
            return $;
        }
    }

}
