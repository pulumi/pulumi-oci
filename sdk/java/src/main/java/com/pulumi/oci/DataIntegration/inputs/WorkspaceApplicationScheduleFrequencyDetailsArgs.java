// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationScheduleFrequencyDetailsTimeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceApplicationScheduleFrequencyDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceApplicationScheduleFrequencyDetailsArgs Empty = new WorkspaceApplicationScheduleFrequencyDetailsArgs();

    /**
     * (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
     * 
     */
    @Import(name="customExpression")
    private @Nullable Output<String> customExpression;

    /**
     * @return (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
     * 
     */
    public Optional<Output<String>> customExpression() {
        return Optional.ofNullable(this.customExpression);
    }

    /**
     * (Updatable) This holds the day of the week on which the schedule should be triggered.
     * 
     */
    @Import(name="dayOfWeek")
    private @Nullable Output<String> dayOfWeek;

    /**
     * @return (Updatable) This holds the day of the week on which the schedule should be triggered.
     * 
     */
    public Optional<Output<String>> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }

    /**
     * (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
     * 
     */
    @Import(name="days")
    private @Nullable Output<List<Integer>> days;

    /**
     * @return (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
     * 
     */
    public Optional<Output<List<Integer>>> days() {
        return Optional.ofNullable(this.days);
    }

    /**
     * (Updatable) the frequency of the schedule.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return (Updatable) the frequency of the schedule.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * (Updatable) The type of the model
     * 
     */
    @Import(name="modelType", required=true)
    private Output<String> modelType;

    /**
     * @return (Updatable) The type of the model
     * 
     */
    public Output<String> modelType() {
        return this.modelType;
    }

    /**
     * (Updatable) A model to hold time in hour:minute:second format.
     * 
     */
    @Import(name="time")
    private @Nullable Output<WorkspaceApplicationScheduleFrequencyDetailsTimeArgs> time;

    /**
     * @return (Updatable) A model to hold time in hour:minute:second format.
     * 
     */
    public Optional<Output<WorkspaceApplicationScheduleFrequencyDetailsTimeArgs>> time() {
        return Optional.ofNullable(this.time);
    }

    /**
     * (Updatable) This holds the week of the month in which the schedule should be triggered.
     * 
     */
    @Import(name="weekOfMonth")
    private @Nullable Output<String> weekOfMonth;

    /**
     * @return (Updatable) This holds the week of the month in which the schedule should be triggered.
     * 
     */
    public Optional<Output<String>> weekOfMonth() {
        return Optional.ofNullable(this.weekOfMonth);
    }

    private WorkspaceApplicationScheduleFrequencyDetailsArgs() {}

    private WorkspaceApplicationScheduleFrequencyDetailsArgs(WorkspaceApplicationScheduleFrequencyDetailsArgs $) {
        this.customExpression = $.customExpression;
        this.dayOfWeek = $.dayOfWeek;
        this.days = $.days;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.modelType = $.modelType;
        this.time = $.time;
        this.weekOfMonth = $.weekOfMonth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceApplicationScheduleFrequencyDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceApplicationScheduleFrequencyDetailsArgs $;

        public Builder() {
            $ = new WorkspaceApplicationScheduleFrequencyDetailsArgs();
        }

        public Builder(WorkspaceApplicationScheduleFrequencyDetailsArgs defaults) {
            $ = new WorkspaceApplicationScheduleFrequencyDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customExpression (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
         * 
         * @return builder
         * 
         */
        public Builder customExpression(@Nullable Output<String> customExpression) {
            $.customExpression = customExpression;
            return this;
        }

        /**
         * @param customExpression (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
         * 
         * @return builder
         * 
         */
        public Builder customExpression(String customExpression) {
            return customExpression(Output.of(customExpression));
        }

        /**
         * @param dayOfWeek (Updatable) This holds the day of the week on which the schedule should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(@Nullable Output<String> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        /**
         * @param dayOfWeek (Updatable) This holds the day of the week on which the schedule should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(String dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        /**
         * @param days (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
         * 
         * @return builder
         * 
         */
        public Builder days(@Nullable Output<List<Integer>> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
         * 
         * @return builder
         * 
         */
        public Builder days(List<Integer> days) {
            return days(Output.of(days));
        }

        /**
         * @param days (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
         * 
         * @return builder
         * 
         */
        public Builder days(Integer... days) {
            return days(List.of(days));
        }

        /**
         * @param frequency (Updatable) the frequency of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency (Updatable) the frequency of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param modelType (Updatable) The type of the model
         * 
         * @return builder
         * 
         */
        public Builder modelType(Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType (Updatable) The type of the model
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param time (Updatable) A model to hold time in hour:minute:second format.
         * 
         * @return builder
         * 
         */
        public Builder time(@Nullable Output<WorkspaceApplicationScheduleFrequencyDetailsTimeArgs> time) {
            $.time = time;
            return this;
        }

        /**
         * @param time (Updatable) A model to hold time in hour:minute:second format.
         * 
         * @return builder
         * 
         */
        public Builder time(WorkspaceApplicationScheduleFrequencyDetailsTimeArgs time) {
            return time(Output.of(time));
        }

        /**
         * @param weekOfMonth (Updatable) This holds the week of the month in which the schedule should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder weekOfMonth(@Nullable Output<String> weekOfMonth) {
            $.weekOfMonth = weekOfMonth;
            return this;
        }

        /**
         * @param weekOfMonth (Updatable) This holds the week of the month in which the schedule should be triggered.
         * 
         * @return builder
         * 
         */
        public Builder weekOfMonth(String weekOfMonth) {
            return weekOfMonth(Output.of(weekOfMonth));
        }

        public WorkspaceApplicationScheduleFrequencyDetailsArgs build() {
            if ($.modelType == null) {
                throw new MissingRequiredPropertyException("WorkspaceApplicationScheduleFrequencyDetailsArgs", "modelType");
            }
            return $;
        }
    }

}
