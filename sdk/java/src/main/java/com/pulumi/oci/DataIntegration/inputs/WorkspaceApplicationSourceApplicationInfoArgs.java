// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceApplicationSourceApplicationInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceApplicationSourceApplicationInfoArgs Empty = new WorkspaceApplicationSourceApplicationInfoArgs();

    /**
     * The source application key to use when creating the application.
     * 
     */
    @Import(name="applicationKey")
    private @Nullable Output<String> applicationKey;

    /**
     * @return The source application key to use when creating the application.
     * 
     */
    public Optional<Output<String>> applicationKey() {
        return Optional.ofNullable(this.applicationKey);
    }

    /**
     * The source application version of the application.
     * 
     */
    @Import(name="applicationVersion")
    private @Nullable Output<String> applicationVersion;

    /**
     * @return The source application version of the application.
     * 
     */
    public Optional<Output<String>> applicationVersion() {
        return Optional.ofNullable(this.applicationVersion);
    }

    /**
     * Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
     * 
     */
    @Import(name="copyType")
    private @Nullable Output<String> copyType;

    /**
     * @return Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
     * 
     */
    public Optional<Output<String>> copyType() {
        return Optional.ofNullable(this.copyType);
    }

    /**
     * The last patch key for the application.
     * 
     */
    @Import(name="lastPatchKey")
    private @Nullable Output<String> lastPatchKey;

    /**
     * @return The last patch key for the application.
     * 
     */
    public Optional<Output<String>> lastPatchKey() {
        return Optional.ofNullable(this.lastPatchKey);
    }

    /**
     * The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private WorkspaceApplicationSourceApplicationInfoArgs() {}

    private WorkspaceApplicationSourceApplicationInfoArgs(WorkspaceApplicationSourceApplicationInfoArgs $) {
        this.applicationKey = $.applicationKey;
        this.applicationVersion = $.applicationVersion;
        this.copyType = $.copyType;
        this.lastPatchKey = $.lastPatchKey;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceApplicationSourceApplicationInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceApplicationSourceApplicationInfoArgs $;

        public Builder() {
            $ = new WorkspaceApplicationSourceApplicationInfoArgs();
        }

        public Builder(WorkspaceApplicationSourceApplicationInfoArgs defaults) {
            $ = new WorkspaceApplicationSourceApplicationInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationKey The source application key to use when creating the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationKey(@Nullable Output<String> applicationKey) {
            $.applicationKey = applicationKey;
            return this;
        }

        /**
         * @param applicationKey The source application key to use when creating the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationKey(String applicationKey) {
            return applicationKey(Output.of(applicationKey));
        }

        /**
         * @param applicationVersion The source application version of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationVersion(@Nullable Output<String> applicationVersion) {
            $.applicationVersion = applicationVersion;
            return this;
        }

        /**
         * @param applicationVersion The source application version of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationVersion(String applicationVersion) {
            return applicationVersion(Output.of(applicationVersion));
        }

        /**
         * @param copyType Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
         * 
         * @return builder
         * 
         */
        public Builder copyType(@Nullable Output<String> copyType) {
            $.copyType = copyType;
            return this;
        }

        /**
         * @param copyType Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
         * 
         * @return builder
         * 
         */
        public Builder copyType(String copyType) {
            return copyType(Output.of(copyType));
        }

        /**
         * @param lastPatchKey The last patch key for the application.
         * 
         * @return builder
         * 
         */
        public Builder lastPatchKey(@Nullable Output<String> lastPatchKey) {
            $.lastPatchKey = lastPatchKey;
            return this;
        }

        /**
         * @param lastPatchKey The last patch key for the application.
         * 
         * @return builder
         * 
         */
        public Builder lastPatchKey(String lastPatchKey) {
            return lastPatchKey(Output.of(lastPatchKey));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceApplicationSourceApplicationInfoArgs build() {
            return $;
        }
    }

}
