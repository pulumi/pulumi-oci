// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationTaskScheduleMetadataAggregatorArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceApplicationTaskScheduleMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceApplicationTaskScheduleMetadataArgs Empty = new WorkspaceApplicationTaskScheduleMetadataArgs();

    /**
     * The owning object key for this object.
     * 
     */
    @Import(name="aggregatorKey")
    private @Nullable Output<String> aggregatorKey;

    /**
     * @return The owning object key for this object.
     * 
     */
    public Optional<Output<String>> aggregatorKey() {
        return Optional.ofNullable(this.aggregatorKey);
    }

    /**
     * A summary type containing information about the object&#39;s aggregator including its type, key, name and description.
     * 
     */
    @Import(name="aggregators")
    private @Nullable Output<List<WorkspaceApplicationTaskScheduleMetadataAggregatorArgs>> aggregators;

    /**
     * @return A summary type containing information about the object&#39;s aggregator including its type, key, name and description.
     * 
     */
    public Optional<Output<List<WorkspaceApplicationTaskScheduleMetadataAggregatorArgs>>> aggregators() {
        return Optional.ofNullable(this.aggregators);
    }

    /**
     * A count statistics.
     * 
     */
    @Import(name="countStatistics")
    private @Nullable Output<List<WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs>> countStatistics;

    /**
     * @return A count statistics.
     * 
     */
    public Optional<Output<List<WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs>>> countStatistics() {
        return Optional.ofNullable(this.countStatistics);
    }

    /**
     * The user that created the object.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The user that created the object.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The user that created the object.
     * 
     */
    @Import(name="createdByName")
    private @Nullable Output<String> createdByName;

    /**
     * @return The user that created the object.
     * 
     */
    public Optional<Output<String>> createdByName() {
        return Optional.ofNullable(this.createdByName);
    }

    /**
     * The full path to identify this object.
     * 
     */
    @Import(name="identifierPath")
    private @Nullable Output<String> identifierPath;

    /**
     * @return The full path to identify this object.
     * 
     */
    public Optional<Output<String>> identifierPath() {
        return Optional.ofNullable(this.identifierPath);
    }

    /**
     * Information property fields.
     * 
     */
    @Import(name="infoFields")
    private @Nullable Output<Map<String,Object>> infoFields;

    /**
     * @return Information property fields.
     * 
     */
    public Optional<Output<Map<String,Object>>> infoFields() {
        return Optional.ofNullable(this.infoFields);
    }

    /**
     * Specifies whether this object is a favorite or not.
     * 
     */
    @Import(name="isFavorite")
    private @Nullable Output<Boolean> isFavorite;

    /**
     * @return Specifies whether this object is a favorite or not.
     * 
     */
    public Optional<Output<Boolean>> isFavorite() {
        return Optional.ofNullable(this.isFavorite);
    }

    /**
     * Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The registry version of the object.
     * 
     */
    @Import(name="registryVersion")
    private @Nullable Output<Integer> registryVersion;

    /**
     * @return The registry version of the object.
     * 
     */
    public Optional<Output<Integer>> registryVersion() {
        return Optional.ofNullable(this.registryVersion);
    }

    /**
     * The date and time that the object was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time that the object was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time that the object was updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time that the object was updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The user that updated the object.
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return The user that updated the object.
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * The user that updated the object.
     * 
     */
    @Import(name="updatedByName")
    private @Nullable Output<String> updatedByName;

    /**
     * @return The user that updated the object.
     * 
     */
    public Optional<Output<String>> updatedByName() {
        return Optional.ofNullable(this.updatedByName);
    }

    private WorkspaceApplicationTaskScheduleMetadataArgs() {}

    private WorkspaceApplicationTaskScheduleMetadataArgs(WorkspaceApplicationTaskScheduleMetadataArgs $) {
        this.aggregatorKey = $.aggregatorKey;
        this.aggregators = $.aggregators;
        this.countStatistics = $.countStatistics;
        this.createdBy = $.createdBy;
        this.createdByName = $.createdByName;
        this.identifierPath = $.identifierPath;
        this.infoFields = $.infoFields;
        this.isFavorite = $.isFavorite;
        this.labels = $.labels;
        this.registryVersion = $.registryVersion;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.updatedBy = $.updatedBy;
        this.updatedByName = $.updatedByName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceApplicationTaskScheduleMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceApplicationTaskScheduleMetadataArgs $;

        public Builder() {
            $ = new WorkspaceApplicationTaskScheduleMetadataArgs();
        }

        public Builder(WorkspaceApplicationTaskScheduleMetadataArgs defaults) {
            $ = new WorkspaceApplicationTaskScheduleMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregatorKey The owning object key for this object.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorKey(@Nullable Output<String> aggregatorKey) {
            $.aggregatorKey = aggregatorKey;
            return this;
        }

        /**
         * @param aggregatorKey The owning object key for this object.
         * 
         * @return builder
         * 
         */
        public Builder aggregatorKey(String aggregatorKey) {
            return aggregatorKey(Output.of(aggregatorKey));
        }

        /**
         * @param aggregators A summary type containing information about the object&#39;s aggregator including its type, key, name and description.
         * 
         * @return builder
         * 
         */
        public Builder aggregators(@Nullable Output<List<WorkspaceApplicationTaskScheduleMetadataAggregatorArgs>> aggregators) {
            $.aggregators = aggregators;
            return this;
        }

        /**
         * @param aggregators A summary type containing information about the object&#39;s aggregator including its type, key, name and description.
         * 
         * @return builder
         * 
         */
        public Builder aggregators(List<WorkspaceApplicationTaskScheduleMetadataAggregatorArgs> aggregators) {
            return aggregators(Output.of(aggregators));
        }

        /**
         * @param aggregators A summary type containing information about the object&#39;s aggregator including its type, key, name and description.
         * 
         * @return builder
         * 
         */
        public Builder aggregators(WorkspaceApplicationTaskScheduleMetadataAggregatorArgs... aggregators) {
            return aggregators(List.of(aggregators));
        }

        /**
         * @param countStatistics A count statistics.
         * 
         * @return builder
         * 
         */
        public Builder countStatistics(@Nullable Output<List<WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs>> countStatistics) {
            $.countStatistics = countStatistics;
            return this;
        }

        /**
         * @param countStatistics A count statistics.
         * 
         * @return builder
         * 
         */
        public Builder countStatistics(List<WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs> countStatistics) {
            return countStatistics(Output.of(countStatistics));
        }

        /**
         * @param countStatistics A count statistics.
         * 
         * @return builder
         * 
         */
        public Builder countStatistics(WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs... countStatistics) {
            return countStatistics(List.of(countStatistics));
        }

        /**
         * @param createdBy The user that created the object.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user that created the object.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdByName The user that created the object.
         * 
         * @return builder
         * 
         */
        public Builder createdByName(@Nullable Output<String> createdByName) {
            $.createdByName = createdByName;
            return this;
        }

        /**
         * @param createdByName The user that created the object.
         * 
         * @return builder
         * 
         */
        public Builder createdByName(String createdByName) {
            return createdByName(Output.of(createdByName));
        }

        /**
         * @param identifierPath The full path to identify this object.
         * 
         * @return builder
         * 
         */
        public Builder identifierPath(@Nullable Output<String> identifierPath) {
            $.identifierPath = identifierPath;
            return this;
        }

        /**
         * @param identifierPath The full path to identify this object.
         * 
         * @return builder
         * 
         */
        public Builder identifierPath(String identifierPath) {
            return identifierPath(Output.of(identifierPath));
        }

        /**
         * @param infoFields Information property fields.
         * 
         * @return builder
         * 
         */
        public Builder infoFields(@Nullable Output<Map<String,Object>> infoFields) {
            $.infoFields = infoFields;
            return this;
        }

        /**
         * @param infoFields Information property fields.
         * 
         * @return builder
         * 
         */
        public Builder infoFields(Map<String,Object> infoFields) {
            return infoFields(Output.of(infoFields));
        }

        /**
         * @param isFavorite Specifies whether this object is a favorite or not.
         * 
         * @return builder
         * 
         */
        public Builder isFavorite(@Nullable Output<Boolean> isFavorite) {
            $.isFavorite = isFavorite;
            return this;
        }

        /**
         * @param isFavorite Specifies whether this object is a favorite or not.
         * 
         * @return builder
         * 
         */
        public Builder isFavorite(Boolean isFavorite) {
            return isFavorite(Output.of(isFavorite));
        }

        /**
         * @param labels Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param registryVersion The registry version of the object.
         * 
         * @return builder
         * 
         */
        public Builder registryVersion(@Nullable Output<Integer> registryVersion) {
            $.registryVersion = registryVersion;
            return this;
        }

        /**
         * @param registryVersion The registry version of the object.
         * 
         * @return builder
         * 
         */
        public Builder registryVersion(Integer registryVersion) {
            return registryVersion(Output.of(registryVersion));
        }

        /**
         * @param timeCreated The date and time that the object was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time that the object was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time that the object was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time that the object was updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param updatedBy The user that updated the object.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy The user that updated the object.
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        /**
         * @param updatedByName The user that updated the object.
         * 
         * @return builder
         * 
         */
        public Builder updatedByName(@Nullable Output<String> updatedByName) {
            $.updatedByName = updatedByName;
            return this;
        }

        /**
         * @param updatedByName The user that updated the object.
         * 
         * @return builder
         * 
         */
        public Builder updatedByName(String updatedByName) {
            return updatedByName(Output.of(updatedByName));
        }

        public WorkspaceApplicationTaskScheduleMetadataArgs build() {
            return $;
        }
    }

}
