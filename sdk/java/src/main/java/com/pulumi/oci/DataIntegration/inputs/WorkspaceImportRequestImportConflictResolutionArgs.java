// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceImportRequestImportConflictResolutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceImportRequestImportConflictResolutionArgs Empty = new WorkspaceImportRequestImportConflictResolutionArgs();

    /**
     * In case of DUPLICATE mode, prefix will be used to disambiguate the object.
     * 
     */
    @Import(name="duplicatePrefix")
    private @Nullable Output<String> duplicatePrefix;

    /**
     * @return In case of DUPLICATE mode, prefix will be used to disambiguate the object.
     * 
     */
    public Optional<Output<String>> duplicatePrefix() {
        return Optional.ofNullable(this.duplicatePrefix);
    }

    /**
     * In case of DUPLICATE mode, suffix will be used to disambiguate the object.
     * 
     */
    @Import(name="duplicateSuffix")
    private @Nullable Output<String> duplicateSuffix;

    /**
     * @return In case of DUPLICATE mode, suffix will be used to disambiguate the object.
     * 
     */
    public Optional<Output<String>> duplicateSuffix() {
        return Optional.ofNullable(this.duplicateSuffix);
    }

    /**
     * Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
     * 
     */
    @Import(name="importConflictResolutionType", required=true)
    private Output<String> importConflictResolutionType;

    /**
     * @return Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
     * 
     */
    public Output<String> importConflictResolutionType() {
        return this.importConflictResolutionType;
    }

    private WorkspaceImportRequestImportConflictResolutionArgs() {}

    private WorkspaceImportRequestImportConflictResolutionArgs(WorkspaceImportRequestImportConflictResolutionArgs $) {
        this.duplicatePrefix = $.duplicatePrefix;
        this.duplicateSuffix = $.duplicateSuffix;
        this.importConflictResolutionType = $.importConflictResolutionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceImportRequestImportConflictResolutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceImportRequestImportConflictResolutionArgs $;

        public Builder() {
            $ = new WorkspaceImportRequestImportConflictResolutionArgs();
        }

        public Builder(WorkspaceImportRequestImportConflictResolutionArgs defaults) {
            $ = new WorkspaceImportRequestImportConflictResolutionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param duplicatePrefix In case of DUPLICATE mode, prefix will be used to disambiguate the object.
         * 
         * @return builder
         * 
         */
        public Builder duplicatePrefix(@Nullable Output<String> duplicatePrefix) {
            $.duplicatePrefix = duplicatePrefix;
            return this;
        }

        /**
         * @param duplicatePrefix In case of DUPLICATE mode, prefix will be used to disambiguate the object.
         * 
         * @return builder
         * 
         */
        public Builder duplicatePrefix(String duplicatePrefix) {
            return duplicatePrefix(Output.of(duplicatePrefix));
        }

        /**
         * @param duplicateSuffix In case of DUPLICATE mode, suffix will be used to disambiguate the object.
         * 
         * @return builder
         * 
         */
        public Builder duplicateSuffix(@Nullable Output<String> duplicateSuffix) {
            $.duplicateSuffix = duplicateSuffix;
            return this;
        }

        /**
         * @param duplicateSuffix In case of DUPLICATE mode, suffix will be used to disambiguate the object.
         * 
         * @return builder
         * 
         */
        public Builder duplicateSuffix(String duplicateSuffix) {
            return duplicateSuffix(Output.of(duplicateSuffix));
        }

        /**
         * @param importConflictResolutionType Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
         * 
         * @return builder
         * 
         */
        public Builder importConflictResolutionType(Output<String> importConflictResolutionType) {
            $.importConflictResolutionType = importConflictResolutionType;
            return this;
        }

        /**
         * @param importConflictResolutionType Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
         * 
         * @return builder
         * 
         */
        public Builder importConflictResolutionType(String importConflictResolutionType) {
            return importConflictResolutionType(Output.of(importConflictResolutionType));
        }

        public WorkspaceImportRequestImportConflictResolutionArgs build() {
            if ($.importConflictResolutionType == null) {
                throw new MissingRequiredPropertyException("WorkspaceImportRequestImportConflictResolutionArgs", "importConflictResolutionType");
            }
            return $;
        }
    }

}
