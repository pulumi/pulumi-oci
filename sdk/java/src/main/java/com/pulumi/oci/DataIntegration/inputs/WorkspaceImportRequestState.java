// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceImportRequestImportConflictResolutionArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceImportRequestImportedObjectArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceImportRequestState extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceImportRequestState Empty = new WorkspaceImportRequestState();

    /**
     * This field controls if the data asset references will be included during import.
     * 
     */
    @Import(name="areDataAssetReferencesIncluded")
    private @Nullable Output<Boolean> areDataAssetReferencesIncluded;

    /**
     * @return This field controls if the data asset references will be included during import.
     * 
     */
    public Optional<Output<Boolean>> areDataAssetReferencesIncluded() {
        return Optional.ofNullable(this.areDataAssetReferencesIncluded);
    }

    /**
     * Name of the Object Storage bucket where the object will be imported from.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Name of the Object Storage bucket where the object will be imported from.
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * Name of the user who initiated import request.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Name of the user who initiated import request.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Contains key of the error
     * 
     */
    @Import(name="errorMessages")
    private @Nullable Output<Map<String,String>> errorMessages;

    /**
     * @return Contains key of the error
     * 
     */
    public Optional<Output<Map<String,String>>> errorMessages() {
        return Optional.ofNullable(this.errorMessages);
    }

    /**
     * Name of the zip file to be imported.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return Name of the zip file to be imported.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * Import Objects Conflict resolution.
     * 
     */
    @Import(name="importConflictResolution")
    private @Nullable Output<WorkspaceImportRequestImportConflictResolutionArgs> importConflictResolution;

    /**
     * @return Import Objects Conflict resolution.
     * 
     */
    public Optional<Output<WorkspaceImportRequestImportConflictResolutionArgs>> importConflictResolution() {
        return Optional.ofNullable(this.importConflictResolution);
    }

    /**
     * The array of imported object details.
     * 
     */
    @Import(name="importedObjects")
    private @Nullable Output<List<WorkspaceImportRequestImportedObjectArgs>> importedObjects;

    /**
     * @return The array of imported object details.
     * 
     */
    public Optional<Output<List<WorkspaceImportRequestImportedObjectArgs>>> importedObjects() {
        return Optional.ofNullable(this.importedObjects);
    }

    /**
     * Import object request key
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Import object request key
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Name of the import request.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the import request.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Key of the object inside which all the objects will be imported
     * 
     */
    @Import(name="objectKeyForImport")
    private @Nullable Output<String> objectKeyForImport;

    /**
     * @return Key of the object inside which all the objects will be imported
     * 
     */
    public Optional<Output<String>> objectKeyForImport() {
        return Optional.ofNullable(this.objectKeyForImport);
    }

    /**
     * Region of the object storage (if using object storage of different region)
     * 
     */
    @Import(name="objectStorageRegion")
    private @Nullable Output<String> objectStorageRegion;

    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    public Optional<Output<String>> objectStorageRegion() {
        return Optional.ofNullable(this.objectStorageRegion);
    }

    /**
     * Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    @Import(name="objectStorageTenancyId")
    private @Nullable Output<String> objectStorageTenancyId;

    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    public Optional<Output<String>> objectStorageTenancyId() {
        return Optional.ofNullable(this.objectStorageTenancyId);
    }

    /**
     * Import Objects request status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Import Objects request status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Time at which the request was completely processed.
     * 
     */
    @Import(name="timeEndedInMillis")
    private @Nullable Output<String> timeEndedInMillis;

    /**
     * @return Time at which the request was completely processed.
     * 
     */
    public Optional<Output<String>> timeEndedInMillis() {
        return Optional.ofNullable(this.timeEndedInMillis);
    }

    /**
     * Time at which the request started getting processed.
     * 
     */
    @Import(name="timeStartedInMillis")
    private @Nullable Output<String> timeStartedInMillis;

    /**
     * @return Time at which the request started getting processed.
     * 
     */
    public Optional<Output<String>> timeStartedInMillis() {
        return Optional.ofNullable(this.timeStartedInMillis);
    }

    /**
     * Number of objects that are imported.
     * 
     */
    @Import(name="totalImportedObjectCount")
    private @Nullable Output<Integer> totalImportedObjectCount;

    /**
     * @return Number of objects that are imported.
     * 
     */
    public Optional<Output<Integer>> totalImportedObjectCount() {
        return Optional.ofNullable(this.totalImportedObjectCount);
    }

    /**
     * The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The workspace ID.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private WorkspaceImportRequestState() {}

    private WorkspaceImportRequestState(WorkspaceImportRequestState $) {
        this.areDataAssetReferencesIncluded = $.areDataAssetReferencesIncluded;
        this.bucket = $.bucket;
        this.createdBy = $.createdBy;
        this.errorMessages = $.errorMessages;
        this.fileName = $.fileName;
        this.importConflictResolution = $.importConflictResolution;
        this.importedObjects = $.importedObjects;
        this.key = $.key;
        this.name = $.name;
        this.objectKeyForImport = $.objectKeyForImport;
        this.objectStorageRegion = $.objectStorageRegion;
        this.objectStorageTenancyId = $.objectStorageTenancyId;
        this.status = $.status;
        this.timeEndedInMillis = $.timeEndedInMillis;
        this.timeStartedInMillis = $.timeStartedInMillis;
        this.totalImportedObjectCount = $.totalImportedObjectCount;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceImportRequestState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceImportRequestState $;

        public Builder() {
            $ = new WorkspaceImportRequestState();
        }

        public Builder(WorkspaceImportRequestState defaults) {
            $ = new WorkspaceImportRequestState(Objects.requireNonNull(defaults));
        }

        /**
         * @param areDataAssetReferencesIncluded This field controls if the data asset references will be included during import.
         * 
         * @return builder
         * 
         */
        public Builder areDataAssetReferencesIncluded(@Nullable Output<Boolean> areDataAssetReferencesIncluded) {
            $.areDataAssetReferencesIncluded = areDataAssetReferencesIncluded;
            return this;
        }

        /**
         * @param areDataAssetReferencesIncluded This field controls if the data asset references will be included during import.
         * 
         * @return builder
         * 
         */
        public Builder areDataAssetReferencesIncluded(Boolean areDataAssetReferencesIncluded) {
            return areDataAssetReferencesIncluded(Output.of(areDataAssetReferencesIncluded));
        }

        /**
         * @param bucket Name of the Object Storage bucket where the object will be imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the Object Storage bucket where the object will be imported from.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param createdBy Name of the user who initiated import request.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Name of the user who initiated import request.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param errorMessages Contains key of the error
         * 
         * @return builder
         * 
         */
        public Builder errorMessages(@Nullable Output<Map<String,String>> errorMessages) {
            $.errorMessages = errorMessages;
            return this;
        }

        /**
         * @param errorMessages Contains key of the error
         * 
         * @return builder
         * 
         */
        public Builder errorMessages(Map<String,String> errorMessages) {
            return errorMessages(Output.of(errorMessages));
        }

        /**
         * @param fileName Name of the zip file to be imported.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName Name of the zip file to be imported.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param importConflictResolution Import Objects Conflict resolution.
         * 
         * @return builder
         * 
         */
        public Builder importConflictResolution(@Nullable Output<WorkspaceImportRequestImportConflictResolutionArgs> importConflictResolution) {
            $.importConflictResolution = importConflictResolution;
            return this;
        }

        /**
         * @param importConflictResolution Import Objects Conflict resolution.
         * 
         * @return builder
         * 
         */
        public Builder importConflictResolution(WorkspaceImportRequestImportConflictResolutionArgs importConflictResolution) {
            return importConflictResolution(Output.of(importConflictResolution));
        }

        /**
         * @param importedObjects The array of imported object details.
         * 
         * @return builder
         * 
         */
        public Builder importedObjects(@Nullable Output<List<WorkspaceImportRequestImportedObjectArgs>> importedObjects) {
            $.importedObjects = importedObjects;
            return this;
        }

        /**
         * @param importedObjects The array of imported object details.
         * 
         * @return builder
         * 
         */
        public Builder importedObjects(List<WorkspaceImportRequestImportedObjectArgs> importedObjects) {
            return importedObjects(Output.of(importedObjects));
        }

        /**
         * @param importedObjects The array of imported object details.
         * 
         * @return builder
         * 
         */
        public Builder importedObjects(WorkspaceImportRequestImportedObjectArgs... importedObjects) {
            return importedObjects(List.of(importedObjects));
        }

        /**
         * @param key Import object request key
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Import object request key
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name Name of the import request.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the import request.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectKeyForImport Key of the object inside which all the objects will be imported
         * 
         * @return builder
         * 
         */
        public Builder objectKeyForImport(@Nullable Output<String> objectKeyForImport) {
            $.objectKeyForImport = objectKeyForImport;
            return this;
        }

        /**
         * @param objectKeyForImport Key of the object inside which all the objects will be imported
         * 
         * @return builder
         * 
         */
        public Builder objectKeyForImport(String objectKeyForImport) {
            return objectKeyForImport(Output.of(objectKeyForImport));
        }

        /**
         * @param objectStorageRegion Region of the object storage (if using object storage of different region)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageRegion(@Nullable Output<String> objectStorageRegion) {
            $.objectStorageRegion = objectStorageRegion;
            return this;
        }

        /**
         * @param objectStorageRegion Region of the object storage (if using object storage of different region)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageRegion(String objectStorageRegion) {
            return objectStorageRegion(Output.of(objectStorageRegion));
        }

        /**
         * @param objectStorageTenancyId Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageTenancyId(@Nullable Output<String> objectStorageTenancyId) {
            $.objectStorageTenancyId = objectStorageTenancyId;
            return this;
        }

        /**
         * @param objectStorageTenancyId Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
         * 
         * @return builder
         * 
         */
        public Builder objectStorageTenancyId(String objectStorageTenancyId) {
            return objectStorageTenancyId(Output.of(objectStorageTenancyId));
        }

        /**
         * @param status Import Objects request status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Import Objects request status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param timeEndedInMillis Time at which the request was completely processed.
         * 
         * @return builder
         * 
         */
        public Builder timeEndedInMillis(@Nullable Output<String> timeEndedInMillis) {
            $.timeEndedInMillis = timeEndedInMillis;
            return this;
        }

        /**
         * @param timeEndedInMillis Time at which the request was completely processed.
         * 
         * @return builder
         * 
         */
        public Builder timeEndedInMillis(String timeEndedInMillis) {
            return timeEndedInMillis(Output.of(timeEndedInMillis));
        }

        /**
         * @param timeStartedInMillis Time at which the request started getting processed.
         * 
         * @return builder
         * 
         */
        public Builder timeStartedInMillis(@Nullable Output<String> timeStartedInMillis) {
            $.timeStartedInMillis = timeStartedInMillis;
            return this;
        }

        /**
         * @param timeStartedInMillis Time at which the request started getting processed.
         * 
         * @return builder
         * 
         */
        public Builder timeStartedInMillis(String timeStartedInMillis) {
            return timeStartedInMillis(Output.of(timeStartedInMillis));
        }

        /**
         * @param totalImportedObjectCount Number of objects that are imported.
         * 
         * @return builder
         * 
         */
        public Builder totalImportedObjectCount(@Nullable Output<Integer> totalImportedObjectCount) {
            $.totalImportedObjectCount = totalImportedObjectCount;
            return this;
        }

        /**
         * @param totalImportedObjectCount Number of objects that are imported.
         * 
         * @return builder
         * 
         */
        public Builder totalImportedObjectCount(Integer totalImportedObjectCount) {
            return totalImportedObjectCount(Output.of(totalImportedObjectCount));
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The workspace ID.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public WorkspaceImportRequestState build() {
            return $;
        }
    }

}
