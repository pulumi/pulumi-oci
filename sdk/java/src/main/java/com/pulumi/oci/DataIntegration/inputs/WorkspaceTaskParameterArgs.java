// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceTaskParameterConfigValuesArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceTaskParameterParentRefArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceTaskParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceTaskParameterArgs Empty = new WorkspaceTaskParameterArgs();

    /**
     * (Updatable) Configuration values can be string, objects, or parameters.
     * 
     */
    @Import(name="configValues")
    private @Nullable Output<WorkspaceTaskParameterConfigValuesArgs> configValues;

    /**
     * @return (Updatable) Configuration values can be string, objects, or parameters.
     * 
     */
    public Optional<Output<WorkspaceTaskParameterConfigValuesArgs>> configValues() {
        return Optional.ofNullable(this.configValues);
    }

    /**
     * (Updatable) A default value for the vairable.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return (Updatable) A default value for the vairable.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * (Updatable) Detailed description for the object.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) Detailed description for the object.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Specifies whether the parameter is input value.
     * 
     */
    @Import(name="isInput")
    private @Nullable Output<Boolean> isInput;

    /**
     * @return (Updatable) Specifies whether the parameter is input value.
     * 
     */
    public Optional<Output<Boolean>> isInput() {
        return Optional.ofNullable(this.isInput);
    }

    /**
     * (Updatable) Specifies whether the parameter is output value.
     * 
     */
    @Import(name="isOutput")
    private @Nullable Output<Boolean> isOutput;

    /**
     * @return (Updatable) Specifies whether the parameter is output value.
     * 
     */
    public Optional<Output<Boolean>> isOutput() {
        return Optional.ofNullable(this.isOutput);
    }

    /**
     * (Updatable) The key of the object.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Updatable) The key of the object.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * (Updatable) The type of the types object.
     * 
     */
    @Import(name="modelType", required=true)
    private Output<String> modelType;

    /**
     * @return (Updatable) The type of the types object.
     * 
     */
    public Output<String> modelType() {
        return this.modelType;
    }

    /**
     * (Updatable) The model version of an object.
     * 
     */
    @Import(name="modelVersion")
    private @Nullable Output<String> modelVersion;

    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<Output<String>> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }

    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    @Import(name="objectStatus")
    private @Nullable Output<Integer> objectStatus;

    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Output<Integer>> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }

    /**
     * (Updatable) The output aggregation type.
     * 
     */
    @Import(name="outputAggregationType")
    private @Nullable Output<String> outputAggregationType;

    /**
     * @return (Updatable) The output aggregation type.
     * 
     */
    public Optional<Output<String>> outputAggregationType() {
        return Optional.ofNullable(this.outputAggregationType);
    }

    /**
     * (Updatable) A reference to the object&#39;s parent.
     * 
     */
    @Import(name="parentRef")
    private @Nullable Output<WorkspaceTaskParameterParentRefArgs> parentRef;

    /**
     * @return (Updatable) A reference to the object&#39;s parent.
     * 
     */
    public Optional<Output<WorkspaceTaskParameterParentRefArgs>> parentRef() {
        return Optional.ofNullable(this.parentRef);
    }

    /**
     * (Updatable) A base class for all model types, including First Class and its contained objects.
     * 
     */
    @Import(name="rootObjectDefaultValue")
    private @Nullable Output<String> rootObjectDefaultValue;

    /**
     * @return (Updatable) A base class for all model types, including First Class and its contained objects.
     * 
     */
    public Optional<Output<String>> rootObjectDefaultValue() {
        return Optional.ofNullable(this.rootObjectDefaultValue);
    }

    /**
     * (Updatable) The object type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Updatable) The object type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (Updatable) The type of value the parameter was created for.
     * 
     */
    @Import(name="typeName")
    private @Nullable Output<String> typeName;

    /**
     * @return (Updatable) The type of value the parameter was created for.
     * 
     */
    public Optional<Output<String>> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    /**
     * (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
     * 
     */
    @Import(name="usedFor")
    private @Nullable Output<String> usedFor;

    /**
     * @return (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
     * 
     */
    public Optional<Output<String>> usedFor() {
        return Optional.ofNullable(this.usedFor);
    }

    private WorkspaceTaskParameterArgs() {}

    private WorkspaceTaskParameterArgs(WorkspaceTaskParameterArgs $) {
        this.configValues = $.configValues;
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.isInput = $.isInput;
        this.isOutput = $.isOutput;
        this.key = $.key;
        this.modelType = $.modelType;
        this.modelVersion = $.modelVersion;
        this.name = $.name;
        this.objectStatus = $.objectStatus;
        this.outputAggregationType = $.outputAggregationType;
        this.parentRef = $.parentRef;
        this.rootObjectDefaultValue = $.rootObjectDefaultValue;
        this.type = $.type;
        this.typeName = $.typeName;
        this.usedFor = $.usedFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceTaskParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceTaskParameterArgs $;

        public Builder() {
            $ = new WorkspaceTaskParameterArgs();
        }

        public Builder(WorkspaceTaskParameterArgs defaults) {
            $ = new WorkspaceTaskParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configValues (Updatable) Configuration values can be string, objects, or parameters.
         * 
         * @return builder
         * 
         */
        public Builder configValues(@Nullable Output<WorkspaceTaskParameterConfigValuesArgs> configValues) {
            $.configValues = configValues;
            return this;
        }

        /**
         * @param configValues (Updatable) Configuration values can be string, objects, or parameters.
         * 
         * @return builder
         * 
         */
        public Builder configValues(WorkspaceTaskParameterConfigValuesArgs configValues) {
            return configValues(Output.of(configValues));
        }

        /**
         * @param defaultValue (Updatable) A default value for the vairable.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue (Updatable) A default value for the vairable.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description (Updatable) Detailed description for the object.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) Detailed description for the object.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isInput (Updatable) Specifies whether the parameter is input value.
         * 
         * @return builder
         * 
         */
        public Builder isInput(@Nullable Output<Boolean> isInput) {
            $.isInput = isInput;
            return this;
        }

        /**
         * @param isInput (Updatable) Specifies whether the parameter is input value.
         * 
         * @return builder
         * 
         */
        public Builder isInput(Boolean isInput) {
            return isInput(Output.of(isInput));
        }

        /**
         * @param isOutput (Updatable) Specifies whether the parameter is output value.
         * 
         * @return builder
         * 
         */
        public Builder isOutput(@Nullable Output<Boolean> isOutput) {
            $.isOutput = isOutput;
            return this;
        }

        /**
         * @param isOutput (Updatable) Specifies whether the parameter is output value.
         * 
         * @return builder
         * 
         */
        public Builder isOutput(Boolean isOutput) {
            return isOutput(Output.of(isOutput));
        }

        /**
         * @param key (Updatable) The key of the object.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) The key of the object.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param modelType (Updatable) The type of the types object.
         * 
         * @return builder
         * 
         */
        public Builder modelType(Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType (Updatable) The type of the types object.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(@Nullable Output<String> modelVersion) {
            $.modelVersion = modelVersion;
            return this;
        }

        /**
         * @param modelVersion (Updatable) The model version of an object.
         * 
         * @return builder
         * 
         */
        public Builder modelVersion(String modelVersion) {
            return modelVersion(Output.of(modelVersion));
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(@Nullable Output<Integer> objectStatus) {
            $.objectStatus = objectStatus;
            return this;
        }

        /**
         * @param objectStatus (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
         * 
         * @return builder
         * 
         */
        public Builder objectStatus(Integer objectStatus) {
            return objectStatus(Output.of(objectStatus));
        }

        /**
         * @param outputAggregationType (Updatable) The output aggregation type.
         * 
         * @return builder
         * 
         */
        public Builder outputAggregationType(@Nullable Output<String> outputAggregationType) {
            $.outputAggregationType = outputAggregationType;
            return this;
        }

        /**
         * @param outputAggregationType (Updatable) The output aggregation type.
         * 
         * @return builder
         * 
         */
        public Builder outputAggregationType(String outputAggregationType) {
            return outputAggregationType(Output.of(outputAggregationType));
        }

        /**
         * @param parentRef (Updatable) A reference to the object&#39;s parent.
         * 
         * @return builder
         * 
         */
        public Builder parentRef(@Nullable Output<WorkspaceTaskParameterParentRefArgs> parentRef) {
            $.parentRef = parentRef;
            return this;
        }

        /**
         * @param parentRef (Updatable) A reference to the object&#39;s parent.
         * 
         * @return builder
         * 
         */
        public Builder parentRef(WorkspaceTaskParameterParentRefArgs parentRef) {
            return parentRef(Output.of(parentRef));
        }

        /**
         * @param rootObjectDefaultValue (Updatable) A base class for all model types, including First Class and its contained objects.
         * 
         * @return builder
         * 
         */
        public Builder rootObjectDefaultValue(@Nullable Output<String> rootObjectDefaultValue) {
            $.rootObjectDefaultValue = rootObjectDefaultValue;
            return this;
        }

        /**
         * @param rootObjectDefaultValue (Updatable) A base class for all model types, including First Class and its contained objects.
         * 
         * @return builder
         * 
         */
        public Builder rootObjectDefaultValue(String rootObjectDefaultValue) {
            return rootObjectDefaultValue(Output.of(rootObjectDefaultValue));
        }

        /**
         * @param type (Updatable) The object type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The object type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param typeName (Updatable) The type of value the parameter was created for.
         * 
         * @return builder
         * 
         */
        public Builder typeName(@Nullable Output<String> typeName) {
            $.typeName = typeName;
            return this;
        }

        /**
         * @param typeName (Updatable) The type of value the parameter was created for.
         * 
         * @return builder
         * 
         */
        public Builder typeName(String typeName) {
            return typeName(Output.of(typeName));
        }

        /**
         * @param usedFor (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
         * 
         * @return builder
         * 
         */
        public Builder usedFor(@Nullable Output<String> usedFor) {
            $.usedFor = usedFor;
            return this;
        }

        /**
         * @param usedFor (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
         * 
         * @return builder
         * 
         */
        public Builder usedFor(String usedFor) {
            return usedFor(Output.of(usedFor));
        }

        public WorkspaceTaskParameterArgs build() {
            if ($.modelType == null) {
                throw new MissingRequiredPropertyException("WorkspaceTaskParameterArgs", "modelType");
            }
            return $;
        }
    }

}
