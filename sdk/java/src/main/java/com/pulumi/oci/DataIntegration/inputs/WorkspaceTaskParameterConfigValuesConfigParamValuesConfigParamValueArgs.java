// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs;
import com.pulumi.oci.DataIntegration.inputs.WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs Empty = new WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs();

    /**
     * An integer value of the parameter.
     * 
     */
    @Import(name="intValue")
    private @Nullable Output<Integer> intValue;

    /**
     * @return An integer value of the parameter.
     * 
     */
    public Optional<Output<Integer>> intValue() {
        return Optional.ofNullable(this.intValue);
    }

    /**
     * An object value of the parameter.
     * 
     */
    @Import(name="objectValue")
    private @Nullable Output<String> objectValue;

    /**
     * @return An object value of the parameter.
     * 
     */
    public Optional<Output<String>> objectValue() {
        return Optional.ofNullable(this.objectValue);
    }

    /**
     * Reference to the parameter by its key.
     * 
     */
    @Import(name="parameterValue")
    private @Nullable Output<String> parameterValue;

    /**
     * @return Reference to the parameter by its key.
     * 
     */
    public Optional<Output<String>> parameterValue() {
        return Optional.ofNullable(this.parameterValue);
    }

    /**
     * The root object reference value.
     * 
     */
    @Import(name="refValue")
    private @Nullable Output<WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs> refValue;

    /**
     * @return The root object reference value.
     * 
     */
    public Optional<Output<WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs>> refValue() {
        return Optional.ofNullable(this.refValue);
    }

    /**
     * The root object value, used in custom parameters.
     * 
     */
    @Import(name="rootObjectValue")
    private @Nullable Output<WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs> rootObjectValue;

    /**
     * @return The root object value, used in custom parameters.
     * 
     */
    public Optional<Output<WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs>> rootObjectValue() {
        return Optional.ofNullable(this.rootObjectValue);
    }

    /**
     * A string value of the parameter.
     * 
     */
    @Import(name="stringValue")
    private @Nullable Output<String> stringValue;

    /**
     * @return A string value of the parameter.
     * 
     */
    public Optional<Output<String>> stringValue() {
        return Optional.ofNullable(this.stringValue);
    }

    private WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs() {}

    private WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs(WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs $) {
        this.intValue = $.intValue;
        this.objectValue = $.objectValue;
        this.parameterValue = $.parameterValue;
        this.refValue = $.refValue;
        this.rootObjectValue = $.rootObjectValue;
        this.stringValue = $.stringValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs $;

        public Builder() {
            $ = new WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs();
        }

        public Builder(WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs defaults) {
            $ = new WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param intValue An integer value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder intValue(@Nullable Output<Integer> intValue) {
            $.intValue = intValue;
            return this;
        }

        /**
         * @param intValue An integer value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder intValue(Integer intValue) {
            return intValue(Output.of(intValue));
        }

        /**
         * @param objectValue An object value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder objectValue(@Nullable Output<String> objectValue) {
            $.objectValue = objectValue;
            return this;
        }

        /**
         * @param objectValue An object value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder objectValue(String objectValue) {
            return objectValue(Output.of(objectValue));
        }

        /**
         * @param parameterValue Reference to the parameter by its key.
         * 
         * @return builder
         * 
         */
        public Builder parameterValue(@Nullable Output<String> parameterValue) {
            $.parameterValue = parameterValue;
            return this;
        }

        /**
         * @param parameterValue Reference to the parameter by its key.
         * 
         * @return builder
         * 
         */
        public Builder parameterValue(String parameterValue) {
            return parameterValue(Output.of(parameterValue));
        }

        /**
         * @param refValue The root object reference value.
         * 
         * @return builder
         * 
         */
        public Builder refValue(@Nullable Output<WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs> refValue) {
            $.refValue = refValue;
            return this;
        }

        /**
         * @param refValue The root object reference value.
         * 
         * @return builder
         * 
         */
        public Builder refValue(WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs refValue) {
            return refValue(Output.of(refValue));
        }

        /**
         * @param rootObjectValue The root object value, used in custom parameters.
         * 
         * @return builder
         * 
         */
        public Builder rootObjectValue(@Nullable Output<WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs> rootObjectValue) {
            $.rootObjectValue = rootObjectValue;
            return this;
        }

        /**
         * @param rootObjectValue The root object value, used in custom parameters.
         * 
         * @return builder
         * 
         */
        public Builder rootObjectValue(WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs rootObjectValue) {
            return rootObjectValue(Output.of(rootObjectValue));
        }

        /**
         * @param stringValue A string value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder stringValue(@Nullable Output<String> stringValue) {
            $.stringValue = stringValue;
            return this;
        }

        /**
         * @param stringValue A string value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder stringValue(String stringValue) {
            return stringValue(Output.of(stringValue));
        }

        public WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs build() {
            return $;
        }
    }

}
