// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs Empty = new WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs();

    /**
     * The expression string for the object.
     * 
     */
    @Import(name="exprString")
    private @Nullable Output<String> exprString;

    /**
     * @return The expression string for the object.
     * 
     */
    public Optional<Output<String>> exprString() {
        return Optional.ofNullable(this.exprString);
    }

    /**
     * (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * (Updatable) The type of the task.
     * 
     */
    @Import(name="modelType")
    private @Nullable Output<String> modelType;

    /**
     * @return (Updatable) The type of the task.
     * 
     */
    public Optional<Output<String>> modelType() {
        return Optional.ofNullable(this.modelType);
    }

    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs() {}

    private WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs(WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs $) {
        this.exprString = $.exprString;
        this.key = $.key;
        this.modelType = $.modelType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs $;

        public Builder() {
            $ = new WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs();
        }

        public Builder(WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs defaults) {
            $ = new WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exprString The expression string for the object.
         * 
         * @return builder
         * 
         */
        public Builder exprString(@Nullable Output<String> exprString) {
            $.exprString = exprString;
            return this;
        }

        /**
         * @param exprString The expression string for the object.
         * 
         * @return builder
         * 
         */
        public Builder exprString(String exprString) {
            return exprString(Output.of(exprString));
        }

        /**
         * @param key (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param modelType (Updatable) The type of the task.
         * 
         * @return builder
         * 
         */
        public Builder modelType(@Nullable Output<String> modelType) {
            $.modelType = modelType;
            return this;
        }

        /**
         * @param modelType (Updatable) The type of the task.
         * 
         * @return builder
         * 
         */
        public Builder modelType(String modelType) {
            return modelType(Output.of(modelType));
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs build() {
            return $;
        }
    }

}
