// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceApplicationDependentObjectMetadata;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceApplicationMetadata;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceApplicationParentRef;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceApplicationPublishedObjectMetadata;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceApplicationRegistryMetadata;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceApplicationSourceApplicationInfo;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWorkspaceApplicationResult {
    /**
     * @return The source application key to use when creating the application.
     * 
     */
    private String applicationKey;
    /**
     * @return The source application version of the application.
     * 
     */
    private Integer applicationVersion;
    /**
     * @return OCID of the compartment that this resource belongs to. Defaults to compartment of the Workspace.
     * 
     */
    private String compartmentId;
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A list of dependent objects in this patch.
     * 
     */
    private List<GetWorkspaceApplicationDependentObjectMetadata> dependentObjectMetadatas;
    /**
     * @return The description of the aggregator.
     * 
     */
    private String description;
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return OCID of the resource that is used to uniquely identify the application
     * 
     */
    private String id;
    /**
     * @return Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    private String identifier;
    /**
     * @return The key of the object.
     * 
     */
    private String key;
    /**
     * @return A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    private Map<String,Object> keyMap;
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    private List<GetWorkspaceApplicationMetadata> metadatas;
    /**
     * @return The object type.
     * 
     */
    private String modelType;
    /**
     * @return The object&#39;s model version.
     * 
     */
    private String modelVersion;
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private Integer objectStatus;
    /**
     * @return The object version.
     * 
     */
    private Integer objectVersion;
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    private List<GetWorkspaceApplicationParentRef> parentReves;
    /**
     * @return A list of objects that are published or unpublished in this patch.
     * 
     */
    private List<GetWorkspaceApplicationPublishedObjectMetadata> publishedObjectMetadatas;
    private List<GetWorkspaceApplicationRegistryMetadata> registryMetadatas;
    /**
     * @return The information about the application.
     * 
     */
    private List<GetWorkspaceApplicationSourceApplicationInfo> sourceApplicationInfos;
    /**
     * @return The current state of the workspace.
     * 
     */
    private String state;
    /**
     * @return The date and time the application was created, in the timestamp format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the application was patched, in the timestamp format defined by RFC3339.
     * 
     */
    private String timePatched;
    /**
     * @return The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
     * 
     */
    private String timeUpdated;
    /**
     * @return The OCID of the workspace containing the application. This allows cross workspace deployment to publish an application from a different workspace into the current workspace specified in this operation.
     * 
     */
    private String workspaceId;

    private GetWorkspaceApplicationResult() {}
    /**
     * @return The source application key to use when creating the application.
     * 
     */
    public String applicationKey() {
        return this.applicationKey;
    }
    /**
     * @return The source application version of the application.
     * 
     */
    public Integer applicationVersion() {
        return this.applicationVersion;
    }
    /**
     * @return OCID of the compartment that this resource belongs to. Defaults to compartment of the Workspace.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A list of dependent objects in this patch.
     * 
     */
    public List<GetWorkspaceApplicationDependentObjectMetadata> dependentObjectMetadatas() {
        return this.dependentObjectMetadatas;
    }
    /**
     * @return The description of the aggregator.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return OCID of the resource that is used to uniquely identify the application
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return The key of the object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    public Map<String,Object> keyMap() {
        return this.keyMap;
    }
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public List<GetWorkspaceApplicationMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return The object type.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The object&#39;s model version.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The object version.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    public List<GetWorkspaceApplicationParentRef> parentReves() {
        return this.parentReves;
    }
    /**
     * @return A list of objects that are published or unpublished in this patch.
     * 
     */
    public List<GetWorkspaceApplicationPublishedObjectMetadata> publishedObjectMetadatas() {
        return this.publishedObjectMetadatas;
    }
    public List<GetWorkspaceApplicationRegistryMetadata> registryMetadatas() {
        return this.registryMetadatas;
    }
    /**
     * @return The information about the application.
     * 
     */
    public List<GetWorkspaceApplicationSourceApplicationInfo> sourceApplicationInfos() {
        return this.sourceApplicationInfos;
    }
    /**
     * @return The current state of the workspace.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the application was created, in the timestamp format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the application was patched, in the timestamp format defined by RFC3339.
     * 
     */
    public String timePatched() {
        return this.timePatched;
    }
    /**
     * @return The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The OCID of the workspace containing the application. This allows cross workspace deployment to publish an application from a different workspace into the current workspace specified in this operation.
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationKey;
        private Integer applicationVersion;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private List<GetWorkspaceApplicationDependentObjectMetadata> dependentObjectMetadatas;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String identifier;
        private String key;
        private Map<String,Object> keyMap;
        private List<GetWorkspaceApplicationMetadata> metadatas;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private Integer objectVersion;
        private List<GetWorkspaceApplicationParentRef> parentReves;
        private List<GetWorkspaceApplicationPublishedObjectMetadata> publishedObjectMetadatas;
        private List<GetWorkspaceApplicationRegistryMetadata> registryMetadatas;
        private List<GetWorkspaceApplicationSourceApplicationInfo> sourceApplicationInfos;
        private String state;
        private String timeCreated;
        private String timePatched;
        private String timeUpdated;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationKey = defaults.applicationKey;
    	      this.applicationVersion = defaults.applicationVersion;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.dependentObjectMetadatas = defaults.dependentObjectMetadatas;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.keyMap = defaults.keyMap;
    	      this.metadatas = defaults.metadatas;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentReves = defaults.parentReves;
    	      this.publishedObjectMetadatas = defaults.publishedObjectMetadatas;
    	      this.registryMetadatas = defaults.registryMetadatas;
    	      this.sourceApplicationInfos = defaults.sourceApplicationInfos;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timePatched = defaults.timePatched;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder applicationKey(String applicationKey) {
            this.applicationKey = Objects.requireNonNull(applicationKey);
            return this;
        }
        @CustomType.Setter
        public Builder applicationVersion(Integer applicationVersion) {
            this.applicationVersion = Objects.requireNonNull(applicationVersion);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder dependentObjectMetadatas(List<GetWorkspaceApplicationDependentObjectMetadata> dependentObjectMetadatas) {
            this.dependentObjectMetadatas = Objects.requireNonNull(dependentObjectMetadatas);
            return this;
        }
        public Builder dependentObjectMetadatas(GetWorkspaceApplicationDependentObjectMetadata... dependentObjectMetadatas) {
            return dependentObjectMetadatas(List.of(dependentObjectMetadatas));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder keyMap(Map<String,Object> keyMap) {
            this.keyMap = Objects.requireNonNull(keyMap);
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(List<GetWorkspaceApplicationMetadata> metadatas) {
            this.metadatas = Objects.requireNonNull(metadatas);
            return this;
        }
        public Builder metadatas(GetWorkspaceApplicationMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        @CustomType.Setter
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        @CustomType.Setter
        public Builder parentReves(List<GetWorkspaceApplicationParentRef> parentReves) {
            this.parentReves = Objects.requireNonNull(parentReves);
            return this;
        }
        public Builder parentReves(GetWorkspaceApplicationParentRef... parentReves) {
            return parentReves(List.of(parentReves));
        }
        @CustomType.Setter
        public Builder publishedObjectMetadatas(List<GetWorkspaceApplicationPublishedObjectMetadata> publishedObjectMetadatas) {
            this.publishedObjectMetadatas = Objects.requireNonNull(publishedObjectMetadatas);
            return this;
        }
        public Builder publishedObjectMetadatas(GetWorkspaceApplicationPublishedObjectMetadata... publishedObjectMetadatas) {
            return publishedObjectMetadatas(List.of(publishedObjectMetadatas));
        }
        @CustomType.Setter
        public Builder registryMetadatas(List<GetWorkspaceApplicationRegistryMetadata> registryMetadatas) {
            this.registryMetadatas = Objects.requireNonNull(registryMetadatas);
            return this;
        }
        public Builder registryMetadatas(GetWorkspaceApplicationRegistryMetadata... registryMetadatas) {
            return registryMetadatas(List.of(registryMetadatas));
        }
        @CustomType.Setter
        public Builder sourceApplicationInfos(List<GetWorkspaceApplicationSourceApplicationInfo> sourceApplicationInfos) {
            this.sourceApplicationInfos = Objects.requireNonNull(sourceApplicationInfos);
            return this;
        }
        public Builder sourceApplicationInfos(GetWorkspaceApplicationSourceApplicationInfo... sourceApplicationInfos) {
            return sourceApplicationInfos(List.of(sourceApplicationInfos));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timePatched(String timePatched) {
            this.timePatched = Objects.requireNonNull(timePatched);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetWorkspaceApplicationResult build() {
            final var _resultValue = new GetWorkspaceApplicationResult();
            _resultValue.applicationKey = applicationKey;
            _resultValue.applicationVersion = applicationVersion;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.dependentObjectMetadatas = dependentObjectMetadatas;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.key = key;
            _resultValue.keyMap = keyMap;
            _resultValue.metadatas = metadatas;
            _resultValue.modelType = modelType;
            _resultValue.modelVersion = modelVersion;
            _resultValue.name = name;
            _resultValue.objectStatus = objectStatus;
            _resultValue.objectVersion = objectVersion;
            _resultValue.parentReves = parentReves;
            _resultValue.publishedObjectMetadatas = publishedObjectMetadatas;
            _resultValue.registryMetadatas = registryMetadatas;
            _resultValue.sourceApplicationInfos = sourceApplicationInfos;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timePatched = timePatched;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
