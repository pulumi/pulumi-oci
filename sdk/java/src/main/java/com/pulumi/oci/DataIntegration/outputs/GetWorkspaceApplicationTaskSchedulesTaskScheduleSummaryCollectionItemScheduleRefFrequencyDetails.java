// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetailsTime;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails {
    /**
     * @return This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
     * 
     */
    private String customExpression;
    /**
     * @return This holds the day of the week on which the schedule should be triggered.
     * 
     */
    private String dayOfWeek;
    /**
     * @return A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
     * 
     */
    private List<Integer> days;
    /**
     * @return the frequency of the schedule.
     * 
     */
    private String frequency;
    /**
     * @return This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
     * 
     */
    private Integer interval;
    /**
     * @return The type of the object.
     * 
     */
    private String modelType;
    /**
     * @return A model to hold time in hour:minute:second format.
     * 
     */
    private GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetailsTime time;
    /**
     * @return This holds the week of the month in which the schedule should be triggered.
     * 
     */
    private String weekOfMonth;

    private GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails() {}
    /**
     * @return This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
     * 
     */
    public String customExpression() {
        return this.customExpression;
    }
    /**
     * @return This holds the day of the week on which the schedule should be triggered.
     * 
     */
    public String dayOfWeek() {
        return this.dayOfWeek;
    }
    /**
     * @return A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
     * 
     */
    public List<Integer> days() {
        return this.days;
    }
    /**
     * @return the frequency of the schedule.
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return The type of the object.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return A model to hold time in hour:minute:second format.
     * 
     */
    public GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetailsTime time() {
        return this.time;
    }
    /**
     * @return This holds the week of the month in which the schedule should be triggered.
     * 
     */
    public String weekOfMonth() {
        return this.weekOfMonth;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customExpression;
        private String dayOfWeek;
        private List<Integer> days;
        private String frequency;
        private Integer interval;
        private String modelType;
        private GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetailsTime time;
        private String weekOfMonth;
        public Builder() {}
        public Builder(GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customExpression = defaults.customExpression;
    	      this.dayOfWeek = defaults.dayOfWeek;
    	      this.days = defaults.days;
    	      this.frequency = defaults.frequency;
    	      this.interval = defaults.interval;
    	      this.modelType = defaults.modelType;
    	      this.time = defaults.time;
    	      this.weekOfMonth = defaults.weekOfMonth;
        }

        @CustomType.Setter
        public Builder customExpression(String customExpression) {
            if (customExpression == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "customExpression");
            }
            this.customExpression = customExpression;
            return this;
        }
        @CustomType.Setter
        public Builder dayOfWeek(String dayOfWeek) {
            if (dayOfWeek == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "dayOfWeek");
            }
            this.dayOfWeek = dayOfWeek;
            return this;
        }
        @CustomType.Setter
        public Builder days(List<Integer> days) {
            if (days == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "days");
            }
            this.days = days;
            return this;
        }
        public Builder days(Integer... days) {
            return days(List.of(days));
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            if (modelType == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "modelType");
            }
            this.modelType = modelType;
            return this;
        }
        @CustomType.Setter
        public Builder time(GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetailsTime time) {
            if (time == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "time");
            }
            this.time = time;
            return this;
        }
        @CustomType.Setter
        public Builder weekOfMonth(String weekOfMonth) {
            if (weekOfMonth == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails", "weekOfMonth");
            }
            this.weekOfMonth = weekOfMonth;
            return this;
        }
        public GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails build() {
            final var _resultValue = new GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetails();
            _resultValue.customExpression = customExpression;
            _resultValue.dayOfWeek = dayOfWeek;
            _resultValue.days = days;
            _resultValue.frequency = frequency;
            _resultValue.interval = interval;
            _resultValue.modelType = modelType;
            _resultValue.time = time;
            _resultValue.weekOfMonth = weekOfMonth;
            return _resultValue;
        }
    }
}
