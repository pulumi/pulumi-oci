// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkspaceExportRequestsExportRequestSummaryCollectionItem {
    /**
     * @return Controls if the references will be exported along with the objects
     * 
     */
    private @Nullable Boolean areReferencesIncluded;
    /**
     * @return The name of the Object Storage Bucket where the objects will be exported to
     * 
     */
    private String bucket;
    /**
     * @return Name of the user who initiated export request.
     * 
     */
    private @Nullable String createdBy;
    /**
     * @return Contains key of the error
     * 
     */
    private @Nullable Map<String,Object> errorMessages;
    /**
     * @return The array of exported object details.
     * 
     */
    private @Nullable List<GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem> exportedItems;
    /**
     * @return Name of the exported zip file.
     * 
     */
    private @Nullable String fileName;
    /**
     * @return Export multiple objects based on filters.
     * 
     */
    private @Nullable List<String> filters;
    /**
     * @return Flag to control whether to overwrite the object if it is already present at the provided object storage location.
     * 
     */
    private @Nullable Boolean isObjectOverwriteEnabled;
    /**
     * @return Export object request key
     * 
     */
    private @Nullable String key;
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    private @Nullable String name;
    /**
     * @return The list of the objects to be exported
     * 
     */
    private @Nullable List<String> objectKeys;
    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    private @Nullable String objectStorageRegion;
    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    private @Nullable String objectStorageTenancyId;
    /**
     * @return The array of exported referenced objects.
     * 
     */
    private @Nullable String referencedItems;
    /**
     * @return Export Objects request status.
     * 
     */
    private @Nullable String status;
    /**
     * @return Specifies end time of a copy object request.
     * 
     */
    private @Nullable String timeEndedInMillis;
    /**
     * @return Specifies start time of a copy object request.
     * 
     */
    private @Nullable String timeStartedInMillis;
    /**
     * @return Number of objects that are exported.
     * 
     */
    private @Nullable Integer totalExportedObjectCount;
    /**
     * @return The workspace ID.
     * 
     */
    private String workspaceId;

    private GetWorkspaceExportRequestsExportRequestSummaryCollectionItem() {}
    /**
     * @return Controls if the references will be exported along with the objects
     * 
     */
    public Optional<Boolean> areReferencesIncluded() {
        return Optional.ofNullable(this.areReferencesIncluded);
    }
    /**
     * @return The name of the Object Storage Bucket where the objects will be exported to
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Name of the user who initiated export request.
     * 
     */
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return Contains key of the error
     * 
     */
    public Map<String,Object> errorMessages() {
        return this.errorMessages == null ? Map.of() : this.errorMessages;
    }
    /**
     * @return The array of exported object details.
     * 
     */
    public List<GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem> exportedItems() {
        return this.exportedItems == null ? List.of() : this.exportedItems;
    }
    /**
     * @return Name of the exported zip file.
     * 
     */
    public Optional<String> fileName() {
        return Optional.ofNullable(this.fileName);
    }
    /**
     * @return Export multiple objects based on filters.
     * 
     */
    public List<String> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Flag to control whether to overwrite the object if it is already present at the provided object storage location.
     * 
     */
    public Optional<Boolean> isObjectOverwriteEnabled() {
        return Optional.ofNullable(this.isObjectOverwriteEnabled);
    }
    /**
     * @return Export object request key
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The list of the objects to be exported
     * 
     */
    public List<String> objectKeys() {
        return this.objectKeys == null ? List.of() : this.objectKeys;
    }
    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    public Optional<String> objectStorageRegion() {
        return Optional.ofNullable(this.objectStorageRegion);
    }
    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    public Optional<String> objectStorageTenancyId() {
        return Optional.ofNullable(this.objectStorageTenancyId);
    }
    /**
     * @return The array of exported referenced objects.
     * 
     */
    public Optional<String> referencedItems() {
        return Optional.ofNullable(this.referencedItems);
    }
    /**
     * @return Export Objects request status.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Specifies end time of a copy object request.
     * 
     */
    public Optional<String> timeEndedInMillis() {
        return Optional.ofNullable(this.timeEndedInMillis);
    }
    /**
     * @return Specifies start time of a copy object request.
     * 
     */
    public Optional<String> timeStartedInMillis() {
        return Optional.ofNullable(this.timeStartedInMillis);
    }
    /**
     * @return Number of objects that are exported.
     * 
     */
    public Optional<Integer> totalExportedObjectCount() {
        return Optional.ofNullable(this.totalExportedObjectCount);
    }
    /**
     * @return The workspace ID.
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceExportRequestsExportRequestSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean areReferencesIncluded;
        private String bucket;
        private @Nullable String createdBy;
        private @Nullable Map<String,Object> errorMessages;
        private @Nullable List<GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem> exportedItems;
        private @Nullable String fileName;
        private @Nullable List<String> filters;
        private @Nullable Boolean isObjectOverwriteEnabled;
        private @Nullable String key;
        private @Nullable String name;
        private @Nullable List<String> objectKeys;
        private @Nullable String objectStorageRegion;
        private @Nullable String objectStorageTenancyId;
        private @Nullable String referencedItems;
        private @Nullable String status;
        private @Nullable String timeEndedInMillis;
        private @Nullable String timeStartedInMillis;
        private @Nullable Integer totalExportedObjectCount;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceExportRequestsExportRequestSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areReferencesIncluded = defaults.areReferencesIncluded;
    	      this.bucket = defaults.bucket;
    	      this.createdBy = defaults.createdBy;
    	      this.errorMessages = defaults.errorMessages;
    	      this.exportedItems = defaults.exportedItems;
    	      this.fileName = defaults.fileName;
    	      this.filters = defaults.filters;
    	      this.isObjectOverwriteEnabled = defaults.isObjectOverwriteEnabled;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.objectKeys = defaults.objectKeys;
    	      this.objectStorageRegion = defaults.objectStorageRegion;
    	      this.objectStorageTenancyId = defaults.objectStorageTenancyId;
    	      this.referencedItems = defaults.referencedItems;
    	      this.status = defaults.status;
    	      this.timeEndedInMillis = defaults.timeEndedInMillis;
    	      this.timeStartedInMillis = defaults.timeStartedInMillis;
    	      this.totalExportedObjectCount = defaults.totalExportedObjectCount;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder areReferencesIncluded(@Nullable Boolean areReferencesIncluded) {
            this.areReferencesIncluded = areReferencesIncluded;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessages(@Nullable Map<String,Object> errorMessages) {
            this.errorMessages = errorMessages;
            return this;
        }
        @CustomType.Setter
        public Builder exportedItems(@Nullable List<GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem> exportedItems) {
            this.exportedItems = exportedItems;
            return this;
        }
        public Builder exportedItems(GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem... exportedItems) {
            return exportedItems(List.of(exportedItems));
        }
        @CustomType.Setter
        public Builder fileName(@Nullable String fileName) {
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<String> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(String... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder isObjectOverwriteEnabled(@Nullable Boolean isObjectOverwriteEnabled) {
            this.isObjectOverwriteEnabled = isObjectOverwriteEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectKeys(@Nullable List<String> objectKeys) {
            this.objectKeys = objectKeys;
            return this;
        }
        public Builder objectKeys(String... objectKeys) {
            return objectKeys(List.of(objectKeys));
        }
        @CustomType.Setter
        public Builder objectStorageRegion(@Nullable String objectStorageRegion) {
            this.objectStorageRegion = objectStorageRegion;
            return this;
        }
        @CustomType.Setter
        public Builder objectStorageTenancyId(@Nullable String objectStorageTenancyId) {
            this.objectStorageTenancyId = objectStorageTenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder referencedItems(@Nullable String referencedItems) {
            this.referencedItems = referencedItems;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeEndedInMillis(@Nullable String timeEndedInMillis) {
            this.timeEndedInMillis = timeEndedInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder timeStartedInMillis(@Nullable String timeStartedInMillis) {
            this.timeStartedInMillis = timeStartedInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder totalExportedObjectCount(@Nullable Integer totalExportedObjectCount) {
            this.totalExportedObjectCount = totalExportedObjectCount;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetWorkspaceExportRequestsExportRequestSummaryCollectionItem build() {
            final var o = new GetWorkspaceExportRequestsExportRequestSummaryCollectionItem();
            o.areReferencesIncluded = areReferencesIncluded;
            o.bucket = bucket;
            o.createdBy = createdBy;
            o.errorMessages = errorMessages;
            o.exportedItems = exportedItems;
            o.fileName = fileName;
            o.filters = filters;
            o.isObjectOverwriteEnabled = isObjectOverwriteEnabled;
            o.key = key;
            o.name = name;
            o.objectKeys = objectKeys;
            o.objectStorageRegion = objectStorageRegion;
            o.objectStorageTenancyId = objectStorageTenancyId;
            o.referencedItems = referencedItems;
            o.status = status;
            o.timeEndedInMillis = timeEndedInMillis;
            o.timeStartedInMillis = timeStartedInMillis;
            o.totalExportedObjectCount = totalExportedObjectCount;
            o.workspaceId = workspaceId;
            return o;
        }
    }
}
