// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFolderMetadata;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFolderParentRef;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFolderRegistryMetadata;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWorkspaceFolderResult {
    /**
     * @return The category name.
     * 
     */
    private String categoryName;
    /**
     * @return The description of the aggregator.
     * 
     */
    private String description;
    private String folderKey;
    private String id;
    /**
     * @return The identifier of the aggregator.
     * 
     */
    private String identifier;
    /**
     * @return The key of the aggregator object.
     * 
     */
    private String key;
    /**
     * @return A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    private Map<String,Object> keyMap;
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    private List<GetWorkspaceFolderMetadata> metadatas;
    /**
     * @return The type of the object.
     * 
     */
    private String modelType;
    /**
     * @return The model version of an object.
     * 
     */
    private String modelVersion;
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private Integer objectVersion;
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    private List<GetWorkspaceFolderParentRef> parentReves;
    private List<GetWorkspaceFolderRegistryMetadata> registryMetadatas;
    private String workspaceId;

    private GetWorkspaceFolderResult() {}
    /**
     * @return The category name.
     * 
     */
    public String categoryName() {
        return this.categoryName;
    }
    /**
     * @return The description of the aggregator.
     * 
     */
    public String description() {
        return this.description;
    }
    public String folderKey() {
        return this.folderKey;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The identifier of the aggregator.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return The key of the aggregator object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    public Map<String,Object> keyMap() {
        return this.keyMap;
    }
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public List<GetWorkspaceFolderMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return The type of the object.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The model version of an object.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    public List<GetWorkspaceFolderParentRef> parentReves() {
        return this.parentReves;
    }
    public List<GetWorkspaceFolderRegistryMetadata> registryMetadatas() {
        return this.registryMetadatas;
    }
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceFolderResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String categoryName;
        private String description;
        private String folderKey;
        private String id;
        private String identifier;
        private String key;
        private Map<String,Object> keyMap;
        private List<GetWorkspaceFolderMetadata> metadatas;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private Integer objectVersion;
        private List<GetWorkspaceFolderParentRef> parentReves;
        private List<GetWorkspaceFolderRegistryMetadata> registryMetadatas;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceFolderResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryName = defaults.categoryName;
    	      this.description = defaults.description;
    	      this.folderKey = defaults.folderKey;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.keyMap = defaults.keyMap;
    	      this.metadatas = defaults.metadatas;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentReves = defaults.parentReves;
    	      this.registryMetadatas = defaults.registryMetadatas;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder categoryName(String categoryName) {
            this.categoryName = Objects.requireNonNull(categoryName);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder folderKey(String folderKey) {
            this.folderKey = Objects.requireNonNull(folderKey);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder keyMap(Map<String,Object> keyMap) {
            this.keyMap = Objects.requireNonNull(keyMap);
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(List<GetWorkspaceFolderMetadata> metadatas) {
            this.metadatas = Objects.requireNonNull(metadatas);
            return this;
        }
        public Builder metadatas(GetWorkspaceFolderMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            this.modelType = Objects.requireNonNull(modelType);
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(String modelVersion) {
            this.modelVersion = Objects.requireNonNull(modelVersion);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(Integer objectStatus) {
            this.objectStatus = Objects.requireNonNull(objectStatus);
            return this;
        }
        @CustomType.Setter
        public Builder objectVersion(Integer objectVersion) {
            this.objectVersion = Objects.requireNonNull(objectVersion);
            return this;
        }
        @CustomType.Setter
        public Builder parentReves(List<GetWorkspaceFolderParentRef> parentReves) {
            this.parentReves = Objects.requireNonNull(parentReves);
            return this;
        }
        public Builder parentReves(GetWorkspaceFolderParentRef... parentReves) {
            return parentReves(List.of(parentReves));
        }
        @CustomType.Setter
        public Builder registryMetadatas(List<GetWorkspaceFolderRegistryMetadata> registryMetadatas) {
            this.registryMetadatas = Objects.requireNonNull(registryMetadatas);
            return this;
        }
        public Builder registryMetadatas(GetWorkspaceFolderRegistryMetadata... registryMetadatas) {
            return registryMetadatas(List.of(registryMetadatas));
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetWorkspaceFolderResult build() {
            final var _resultValue = new GetWorkspaceFolderResult();
            _resultValue.categoryName = categoryName;
            _resultValue.description = description;
            _resultValue.folderKey = folderKey;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.key = key;
            _resultValue.keyMap = keyMap;
            _resultValue.metadatas = metadatas;
            _resultValue.modelType = modelType;
            _resultValue.modelVersion = modelVersion;
            _resultValue.name = name;
            _resultValue.objectStatus = objectStatus;
            _resultValue.objectVersion = objectVersion;
            _resultValue.parentReves = parentReves;
            _resultValue.registryMetadatas = registryMetadatas;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
