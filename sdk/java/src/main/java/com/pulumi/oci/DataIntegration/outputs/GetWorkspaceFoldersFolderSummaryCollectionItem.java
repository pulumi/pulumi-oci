// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadata;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFoldersFolderSummaryCollectionItemParentRef;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadata;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWorkspaceFoldersFolderSummaryCollectionItem {
    /**
     * @return The category name.
     * 
     */
    private String categoryName;
    /**
     * @return The description of the aggregator.
     * 
     */
    private String description;
    private String folderKey;
    /**
     * @return Used to filter by the identifier of the object.
     * 
     */
    private String identifier;
    /**
     * @return The key of the aggregator object.
     * 
     */
    private String key;
    /**
     * @return A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    private Map<String,String> keyMap;
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    private List<GetWorkspaceFoldersFolderSummaryCollectionItemMetadata> metadatas;
    /**
     * @return The type of the object.
     * 
     */
    private String modelType;
    /**
     * @return The model version of an object.
     * 
     */
    private String modelVersion;
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    private String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private Integer objectStatus;
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    private Integer objectVersion;
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    private List<GetWorkspaceFoldersFolderSummaryCollectionItemParentRef> parentReves;
    private GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadata registryMetadata;
    /**
     * @return The workspace ID.
     * 
     */
    private String workspaceId;

    private GetWorkspaceFoldersFolderSummaryCollectionItem() {}
    /**
     * @return The category name.
     * 
     */
    public String categoryName() {
        return this.categoryName;
    }
    /**
     * @return The description of the aggregator.
     * 
     */
    public String description() {
        return this.description;
    }
    public String folderKey() {
        return this.folderKey;
    }
    /**
     * @return Used to filter by the identifier of the object.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return The key of the aggregator object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
     * 
     */
    public Map<String,String> keyMap() {
        return this.keyMap;
    }
    /**
     * @return A summary type containing information about the object including its key, name and when/who created/updated it.
     * 
     */
    public List<GetWorkspaceFoldersFolderSummaryCollectionItemMetadata> metadatas() {
        return this.metadatas;
    }
    /**
     * @return The type of the object.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The model version of an object.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return The version of the object that is used to track changes in the object instance.
     * 
     */
    public Integer objectVersion() {
        return this.objectVersion;
    }
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    public List<GetWorkspaceFoldersFolderSummaryCollectionItemParentRef> parentReves() {
        return this.parentReves;
    }
    public GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadata registryMetadata() {
        return this.registryMetadata;
    }
    /**
     * @return The workspace ID.
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceFoldersFolderSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String categoryName;
        private String description;
        private String folderKey;
        private String identifier;
        private String key;
        private Map<String,String> keyMap;
        private List<GetWorkspaceFoldersFolderSummaryCollectionItemMetadata> metadatas;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private Integer objectVersion;
        private List<GetWorkspaceFoldersFolderSummaryCollectionItemParentRef> parentReves;
        private GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadata registryMetadata;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceFoldersFolderSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryName = defaults.categoryName;
    	      this.description = defaults.description;
    	      this.folderKey = defaults.folderKey;
    	      this.identifier = defaults.identifier;
    	      this.key = defaults.key;
    	      this.keyMap = defaults.keyMap;
    	      this.metadatas = defaults.metadatas;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.objectVersion = defaults.objectVersion;
    	      this.parentReves = defaults.parentReves;
    	      this.registryMetadata = defaults.registryMetadata;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder categoryName(String categoryName) {
            if (categoryName == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "categoryName");
            }
            this.categoryName = categoryName;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder folderKey(String folderKey) {
            if (folderKey == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "folderKey");
            }
            this.folderKey = folderKey;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder keyMap(Map<String,String> keyMap) {
            if (keyMap == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "keyMap");
            }
            this.keyMap = keyMap;
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(List<GetWorkspaceFoldersFolderSummaryCollectionItemMetadata> metadatas) {
            if (metadatas == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "metadatas");
            }
            this.metadatas = metadatas;
            return this;
        }
        public Builder metadatas(GetWorkspaceFoldersFolderSummaryCollectionItemMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            if (modelType == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "modelType");
            }
            this.modelType = modelType;
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(String modelVersion) {
            if (modelVersion == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "modelVersion");
            }
            this.modelVersion = modelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(Integer objectStatus) {
            if (objectStatus == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "objectStatus");
            }
            this.objectStatus = objectStatus;
            return this;
        }
        @CustomType.Setter
        public Builder objectVersion(Integer objectVersion) {
            if (objectVersion == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "objectVersion");
            }
            this.objectVersion = objectVersion;
            return this;
        }
        @CustomType.Setter
        public Builder parentReves(List<GetWorkspaceFoldersFolderSummaryCollectionItemParentRef> parentReves) {
            if (parentReves == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "parentReves");
            }
            this.parentReves = parentReves;
            return this;
        }
        public Builder parentReves(GetWorkspaceFoldersFolderSummaryCollectionItemParentRef... parentReves) {
            return parentReves(List.of(parentReves));
        }
        @CustomType.Setter
        public Builder registryMetadata(GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadata registryMetadata) {
            if (registryMetadata == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "registryMetadata");
            }
            this.registryMetadata = registryMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            if (workspaceId == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceFoldersFolderSummaryCollectionItem", "workspaceId");
            }
            this.workspaceId = workspaceId;
            return this;
        }
        public GetWorkspaceFoldersFolderSummaryCollectionItem build() {
            final var _resultValue = new GetWorkspaceFoldersFolderSummaryCollectionItem();
            _resultValue.categoryName = categoryName;
            _resultValue.description = description;
            _resultValue.folderKey = folderKey;
            _resultValue.identifier = identifier;
            _resultValue.key = key;
            _resultValue.keyMap = keyMap;
            _resultValue.metadatas = metadatas;
            _resultValue.modelType = modelType;
            _resultValue.modelVersion = modelVersion;
            _resultValue.name = name;
            _resultValue.objectStatus = objectStatus;
            _resultValue.objectVersion = objectVersion;
            _resultValue.parentReves = parentReves;
            _resultValue.registryMetadata = registryMetadata;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
