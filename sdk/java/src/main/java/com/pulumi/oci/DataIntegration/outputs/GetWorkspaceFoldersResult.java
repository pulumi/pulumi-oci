// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFoldersFilter;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceFoldersFolderSummaryCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkspaceFoldersResult {
    /**
     * @return The owning object key for this object.
     * 
     */
    private @Nullable String aggregatorKey;
    private @Nullable List<String> fields;
    private @Nullable List<GetWorkspaceFoldersFilter> filters;
    /**
     * @return The list of folder_summary_collection.
     * 
     */
    private List<GetWorkspaceFoldersFolderSummaryCollection> folderSummaryCollections;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The identifier of the aggregator.
     * 
     */
    private @Nullable List<String> identifiers;
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private @Nullable String name;
    private @Nullable String nameContains;
    private String workspaceId;

    private GetWorkspaceFoldersResult() {}
    /**
     * @return The owning object key for this object.
     * 
     */
    public Optional<String> aggregatorKey() {
        return Optional.ofNullable(this.aggregatorKey);
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public List<GetWorkspaceFoldersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The list of folder_summary_collection.
     * 
     */
    public List<GetWorkspaceFoldersFolderSummaryCollection> folderSummaryCollections() {
        return this.folderSummaryCollections;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The identifier of the aggregator.
     * 
     */
    public List<String> identifiers() {
        return this.identifiers == null ? List.of() : this.identifiers;
    }
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> nameContains() {
        return Optional.ofNullable(this.nameContains);
    }
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceFoldersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aggregatorKey;
        private @Nullable List<String> fields;
        private @Nullable List<GetWorkspaceFoldersFilter> filters;
        private List<GetWorkspaceFoldersFolderSummaryCollection> folderSummaryCollections;
        private String id;
        private @Nullable List<String> identifiers;
        private @Nullable String name;
        private @Nullable String nameContains;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceFoldersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregatorKey = defaults.aggregatorKey;
    	      this.fields = defaults.fields;
    	      this.filters = defaults.filters;
    	      this.folderSummaryCollections = defaults.folderSummaryCollections;
    	      this.id = defaults.id;
    	      this.identifiers = defaults.identifiers;
    	      this.name = defaults.name;
    	      this.nameContains = defaults.nameContains;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder aggregatorKey(@Nullable String aggregatorKey) {
            this.aggregatorKey = aggregatorKey;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetWorkspaceFoldersFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetWorkspaceFoldersFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder folderSummaryCollections(List<GetWorkspaceFoldersFolderSummaryCollection> folderSummaryCollections) {
            this.folderSummaryCollections = Objects.requireNonNull(folderSummaryCollections);
            return this;
        }
        public Builder folderSummaryCollections(GetWorkspaceFoldersFolderSummaryCollection... folderSummaryCollections) {
            return folderSummaryCollections(List.of(folderSummaryCollections));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identifiers(@Nullable List<String> identifiers) {
            this.identifiers = identifiers;
            return this;
        }
        public Builder identifiers(String... identifiers) {
            return identifiers(List.of(identifiers));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameContains(@Nullable String nameContains) {
            this.nameContains = nameContains;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetWorkspaceFoldersResult build() {
            final var o = new GetWorkspaceFoldersResult();
            o.aggregatorKey = aggregatorKey;
            o.fields = fields;
            o.filters = filters;
            o.folderSummaryCollections = folderSummaryCollections;
            o.id = id;
            o.identifiers = identifiers;
            o.name = name;
            o.nameContains = nameContains;
            o.workspaceId = workspaceId;
            return o;
        }
    }
}
