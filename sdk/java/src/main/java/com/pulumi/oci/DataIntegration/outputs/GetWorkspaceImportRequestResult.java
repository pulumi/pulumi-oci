// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceImportRequestImportConflictResolution;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceImportRequestImportedObject;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWorkspaceImportRequestResult {
    /**
     * @return The name of the Object Storage Bucket where the objects will be imported from
     * 
     */
    private String bucket;
    /**
     * @return Name of the user who initiated import request.
     * 
     */
    private String createdBy;
    /**
     * @return Contains key of the error
     * 
     */
    private Map<String,Object> errorMessages;
    /**
     * @return Name of the zip file from which objects will be imported.
     * 
     */
    private String fileName;
    private String id;
    /**
     * @return Import Objects Conflict resolution.
     * 
     */
    private List<GetWorkspaceImportRequestImportConflictResolution> importConflictResolutions;
    private String importRequestKey;
    /**
     * @return The array of imported object details.
     * 
     */
    private List<GetWorkspaceImportRequestImportedObject> importedObjects;
    /**
     * @return Import object request key
     * 
     */
    private String key;
    /**
     * @return Name of the import request.
     * 
     */
    private String name;
    /**
     * @return Key of the object inside which all the objects will be imported
     * 
     */
    private String objectKeyForImport;
    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    private String objectStorageRegion;
    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    private String objectStorageTenancyId;
    /**
     * @return Import Objects request status.
     * 
     */
    private String status;
    /**
     * @return Time at which the request was completely processed.
     * 
     */
    private String timeEndedInMillis;
    /**
     * @return Time at which the request started getting processed.
     * 
     */
    private String timeStartedInMillis;
    /**
     * @return Number of objects that are imported.
     * 
     */
    private Integer totalImportedObjectCount;
    private String workspaceId;

    private GetWorkspaceImportRequestResult() {}
    /**
     * @return The name of the Object Storage Bucket where the objects will be imported from
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Name of the user who initiated import request.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Contains key of the error
     * 
     */
    public Map<String,Object> errorMessages() {
        return this.errorMessages;
    }
    /**
     * @return Name of the zip file from which objects will be imported.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Import Objects Conflict resolution.
     * 
     */
    public List<GetWorkspaceImportRequestImportConflictResolution> importConflictResolutions() {
        return this.importConflictResolutions;
    }
    public String importRequestKey() {
        return this.importRequestKey;
    }
    /**
     * @return The array of imported object details.
     * 
     */
    public List<GetWorkspaceImportRequestImportedObject> importedObjects() {
        return this.importedObjects;
    }
    /**
     * @return Import object request key
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Name of the import request.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Key of the object inside which all the objects will be imported
     * 
     */
    public String objectKeyForImport() {
        return this.objectKeyForImport;
    }
    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    public String objectStorageRegion() {
        return this.objectStorageRegion;
    }
    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    public String objectStorageTenancyId() {
        return this.objectStorageTenancyId;
    }
    /**
     * @return Import Objects request status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Time at which the request was completely processed.
     * 
     */
    public String timeEndedInMillis() {
        return this.timeEndedInMillis;
    }
    /**
     * @return Time at which the request started getting processed.
     * 
     */
    public String timeStartedInMillis() {
        return this.timeStartedInMillis;
    }
    /**
     * @return Number of objects that are imported.
     * 
     */
    public Integer totalImportedObjectCount() {
        return this.totalImportedObjectCount;
    }
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceImportRequestResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String createdBy;
        private Map<String,Object> errorMessages;
        private String fileName;
        private String id;
        private List<GetWorkspaceImportRequestImportConflictResolution> importConflictResolutions;
        private String importRequestKey;
        private List<GetWorkspaceImportRequestImportedObject> importedObjects;
        private String key;
        private String name;
        private String objectKeyForImport;
        private String objectStorageRegion;
        private String objectStorageTenancyId;
        private String status;
        private String timeEndedInMillis;
        private String timeStartedInMillis;
        private Integer totalImportedObjectCount;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceImportRequestResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.createdBy = defaults.createdBy;
    	      this.errorMessages = defaults.errorMessages;
    	      this.fileName = defaults.fileName;
    	      this.id = defaults.id;
    	      this.importConflictResolutions = defaults.importConflictResolutions;
    	      this.importRequestKey = defaults.importRequestKey;
    	      this.importedObjects = defaults.importedObjects;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.objectKeyForImport = defaults.objectKeyForImport;
    	      this.objectStorageRegion = defaults.objectStorageRegion;
    	      this.objectStorageTenancyId = defaults.objectStorageTenancyId;
    	      this.status = defaults.status;
    	      this.timeEndedInMillis = defaults.timeEndedInMillis;
    	      this.timeStartedInMillis = defaults.timeStartedInMillis;
    	      this.totalImportedObjectCount = defaults.totalImportedObjectCount;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessages(Map<String,Object> errorMessages) {
            if (errorMessages == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "errorMessages");
            }
            this.errorMessages = errorMessages;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(String fileName) {
            if (fileName == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "fileName");
            }
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder importConflictResolutions(List<GetWorkspaceImportRequestImportConflictResolution> importConflictResolutions) {
            if (importConflictResolutions == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "importConflictResolutions");
            }
            this.importConflictResolutions = importConflictResolutions;
            return this;
        }
        public Builder importConflictResolutions(GetWorkspaceImportRequestImportConflictResolution... importConflictResolutions) {
            return importConflictResolutions(List.of(importConflictResolutions));
        }
        @CustomType.Setter
        public Builder importRequestKey(String importRequestKey) {
            if (importRequestKey == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "importRequestKey");
            }
            this.importRequestKey = importRequestKey;
            return this;
        }
        @CustomType.Setter
        public Builder importedObjects(List<GetWorkspaceImportRequestImportedObject> importedObjects) {
            if (importedObjects == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "importedObjects");
            }
            this.importedObjects = importedObjects;
            return this;
        }
        public Builder importedObjects(GetWorkspaceImportRequestImportedObject... importedObjects) {
            return importedObjects(List.of(importedObjects));
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectKeyForImport(String objectKeyForImport) {
            if (objectKeyForImport == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "objectKeyForImport");
            }
            this.objectKeyForImport = objectKeyForImport;
            return this;
        }
        @CustomType.Setter
        public Builder objectStorageRegion(String objectStorageRegion) {
            if (objectStorageRegion == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "objectStorageRegion");
            }
            this.objectStorageRegion = objectStorageRegion;
            return this;
        }
        @CustomType.Setter
        public Builder objectStorageTenancyId(String objectStorageTenancyId) {
            if (objectStorageTenancyId == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "objectStorageTenancyId");
            }
            this.objectStorageTenancyId = objectStorageTenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeEndedInMillis(String timeEndedInMillis) {
            if (timeEndedInMillis == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "timeEndedInMillis");
            }
            this.timeEndedInMillis = timeEndedInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder timeStartedInMillis(String timeStartedInMillis) {
            if (timeStartedInMillis == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "timeStartedInMillis");
            }
            this.timeStartedInMillis = timeStartedInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder totalImportedObjectCount(Integer totalImportedObjectCount) {
            if (totalImportedObjectCount == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "totalImportedObjectCount");
            }
            this.totalImportedObjectCount = totalImportedObjectCount;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            if (workspaceId == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceImportRequestResult", "workspaceId");
            }
            this.workspaceId = workspaceId;
            return this;
        }
        public GetWorkspaceImportRequestResult build() {
            final var _resultValue = new GetWorkspaceImportRequestResult();
            _resultValue.bucket = bucket;
            _resultValue.createdBy = createdBy;
            _resultValue.errorMessages = errorMessages;
            _resultValue.fileName = fileName;
            _resultValue.id = id;
            _resultValue.importConflictResolutions = importConflictResolutions;
            _resultValue.importRequestKey = importRequestKey;
            _resultValue.importedObjects = importedObjects;
            _resultValue.key = key;
            _resultValue.name = name;
            _resultValue.objectKeyForImport = objectKeyForImport;
            _resultValue.objectStorageRegion = objectStorageRegion;
            _resultValue.objectStorageTenancyId = objectStorageTenancyId;
            _resultValue.status = status;
            _resultValue.timeEndedInMillis = timeEndedInMillis;
            _resultValue.timeStartedInMillis = timeStartedInMillis;
            _resultValue.totalImportedObjectCount = totalImportedObjectCount;
            _resultValue.workspaceId = workspaceId;
            return _resultValue;
        }
    }
}
