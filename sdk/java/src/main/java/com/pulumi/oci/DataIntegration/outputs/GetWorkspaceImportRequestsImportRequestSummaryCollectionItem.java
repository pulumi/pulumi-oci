// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolution;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkspaceImportRequestsImportRequestSummaryCollectionItem {
    /**
     * @return The name of the Object Storage Bucket where the objects will be imported from
     * 
     */
    private String bucket;
    /**
     * @return Name of the user who initiated import request.
     * 
     */
    private @Nullable String createdBy;
    /**
     * @return Contains key of the error
     * 
     */
    private @Nullable Map<String,Object> errorMessages;
    /**
     * @return Name of the zip file from which objects will be imported.
     * 
     */
    private String fileName;
    /**
     * @return Import Objects Conflict resolution.
     * 
     */
    private @Nullable GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolution importConflictResolution;
    /**
     * @return The array of imported object details.
     * 
     */
    private @Nullable List<GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject> importedObjects;
    /**
     * @return Import object request key
     * 
     */
    private @Nullable String key;
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    private @Nullable String name;
    /**
     * @return Key of the object inside which all the objects will be imported
     * 
     */
    private @Nullable String objectKeyForImport;
    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    private @Nullable String objectStorageRegion;
    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    private @Nullable String objectStorageTenancyId;
    /**
     * @return Import Objects request status.
     * 
     */
    private @Nullable String status;
    /**
     * @return Specifies end time of a copy object request.
     * 
     */
    private @Nullable String timeEndedInMillis;
    /**
     * @return Specifies start time of a copy object request.
     * 
     */
    private @Nullable String timeStartedInMillis;
    /**
     * @return Number of objects that are imported.
     * 
     */
    private @Nullable Integer totalImportedObjectCount;
    /**
     * @return The workspace ID.
     * 
     */
    private String workspaceId;

    private GetWorkspaceImportRequestsImportRequestSummaryCollectionItem() {}
    /**
     * @return The name of the Object Storage Bucket where the objects will be imported from
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Name of the user who initiated import request.
     * 
     */
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return Contains key of the error
     * 
     */
    public Map<String,Object> errorMessages() {
        return this.errorMessages == null ? Map.of() : this.errorMessages;
    }
    /**
     * @return Name of the zip file from which objects will be imported.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    /**
     * @return Import Objects Conflict resolution.
     * 
     */
    public Optional<GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolution> importConflictResolution() {
        return Optional.ofNullable(this.importConflictResolution);
    }
    /**
     * @return The array of imported object details.
     * 
     */
    public List<GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject> importedObjects() {
        return this.importedObjects == null ? List.of() : this.importedObjects;
    }
    /**
     * @return Import object request key
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Used to filter by the name of the object.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Key of the object inside which all the objects will be imported
     * 
     */
    public Optional<String> objectKeyForImport() {
        return Optional.ofNullable(this.objectKeyForImport);
    }
    /**
     * @return Region of the object storage (if using object storage of different region)
     * 
     */
    public Optional<String> objectStorageRegion() {
        return Optional.ofNullable(this.objectStorageRegion);
    }
    /**
     * @return Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
     * 
     */
    public Optional<String> objectStorageTenancyId() {
        return Optional.ofNullable(this.objectStorageTenancyId);
    }
    /**
     * @return Import Objects request status.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Specifies end time of a copy object request.
     * 
     */
    public Optional<String> timeEndedInMillis() {
        return Optional.ofNullable(this.timeEndedInMillis);
    }
    /**
     * @return Specifies start time of a copy object request.
     * 
     */
    public Optional<String> timeStartedInMillis() {
        return Optional.ofNullable(this.timeStartedInMillis);
    }
    /**
     * @return Number of objects that are imported.
     * 
     */
    public Optional<Integer> totalImportedObjectCount() {
        return Optional.ofNullable(this.totalImportedObjectCount);
    }
    /**
     * @return The workspace ID.
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceImportRequestsImportRequestSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private @Nullable String createdBy;
        private @Nullable Map<String,Object> errorMessages;
        private String fileName;
        private @Nullable GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolution importConflictResolution;
        private @Nullable List<GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject> importedObjects;
        private @Nullable String key;
        private @Nullable String name;
        private @Nullable String objectKeyForImport;
        private @Nullable String objectStorageRegion;
        private @Nullable String objectStorageTenancyId;
        private @Nullable String status;
        private @Nullable String timeEndedInMillis;
        private @Nullable String timeStartedInMillis;
        private @Nullable Integer totalImportedObjectCount;
        private String workspaceId;
        public Builder() {}
        public Builder(GetWorkspaceImportRequestsImportRequestSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.createdBy = defaults.createdBy;
    	      this.errorMessages = defaults.errorMessages;
    	      this.fileName = defaults.fileName;
    	      this.importConflictResolution = defaults.importConflictResolution;
    	      this.importedObjects = defaults.importedObjects;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.objectKeyForImport = defaults.objectKeyForImport;
    	      this.objectStorageRegion = defaults.objectStorageRegion;
    	      this.objectStorageTenancyId = defaults.objectStorageTenancyId;
    	      this.status = defaults.status;
    	      this.timeEndedInMillis = defaults.timeEndedInMillis;
    	      this.timeStartedInMillis = defaults.timeStartedInMillis;
    	      this.totalImportedObjectCount = defaults.totalImportedObjectCount;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessages(@Nullable Map<String,Object> errorMessages) {
            this.errorMessages = errorMessages;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(String fileName) {
            this.fileName = Objects.requireNonNull(fileName);
            return this;
        }
        @CustomType.Setter
        public Builder importConflictResolution(@Nullable GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolution importConflictResolution) {
            this.importConflictResolution = importConflictResolution;
            return this;
        }
        @CustomType.Setter
        public Builder importedObjects(@Nullable List<GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject> importedObjects) {
            this.importedObjects = importedObjects;
            return this;
        }
        public Builder importedObjects(GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject... importedObjects) {
            return importedObjects(List.of(importedObjects));
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectKeyForImport(@Nullable String objectKeyForImport) {
            this.objectKeyForImport = objectKeyForImport;
            return this;
        }
        @CustomType.Setter
        public Builder objectStorageRegion(@Nullable String objectStorageRegion) {
            this.objectStorageRegion = objectStorageRegion;
            return this;
        }
        @CustomType.Setter
        public Builder objectStorageTenancyId(@Nullable String objectStorageTenancyId) {
            this.objectStorageTenancyId = objectStorageTenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeEndedInMillis(@Nullable String timeEndedInMillis) {
            this.timeEndedInMillis = timeEndedInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder timeStartedInMillis(@Nullable String timeStartedInMillis) {
            this.timeStartedInMillis = timeStartedInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder totalImportedObjectCount(@Nullable Integer totalImportedObjectCount) {
            this.totalImportedObjectCount = totalImportedObjectCount;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetWorkspaceImportRequestsImportRequestSummaryCollectionItem build() {
            final var o = new GetWorkspaceImportRequestsImportRequestSummaryCollectionItem();
            o.bucket = bucket;
            o.createdBy = createdBy;
            o.errorMessages = errorMessages;
            o.fileName = fileName;
            o.importConflictResolution = importConflictResolution;
            o.importedObjects = importedObjects;
            o.key = key;
            o.name = name;
            o.objectKeyForImport = objectKeyForImport;
            o.objectStorageRegion = objectStorageRegion;
            o.objectStorageTenancyId = objectStorageTenancyId;
            o.status = status;
            o.timeEndedInMillis = timeEndedInMillis;
            o.timeStartedInMillis = timeStartedInMillis;
            o.totalImportedObjectCount = totalImportedObjectCount;
            o.workspaceId = workspaceId;
            return o;
        }
    }
}
