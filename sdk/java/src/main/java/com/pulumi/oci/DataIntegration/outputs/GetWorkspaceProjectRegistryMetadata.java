// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkspaceProjectRegistryMetadata {
    /**
     * @return The owning object key for this object.
     * 
     */
    private String aggregatorKey;
    /**
     * @return Specifies whether this object is a favorite or not.
     * 
     */
    private Boolean isFavorite;
    /**
     * @return The key of the aggregator object.
     * 
     */
    private String key;
    /**
     * @return Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
     * 
     */
    private List<String> labels;
    /**
     * @return The registry version of the object.
     * 
     */
    private Integer registryVersion;

    private GetWorkspaceProjectRegistryMetadata() {}
    /**
     * @return The owning object key for this object.
     * 
     */
    public String aggregatorKey() {
        return this.aggregatorKey;
    }
    /**
     * @return Specifies whether this object is a favorite or not.
     * 
     */
    public Boolean isFavorite() {
        return this.isFavorite;
    }
    /**
     * @return The key of the aggregator object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
     * 
     */
    public List<String> labels() {
        return this.labels;
    }
    /**
     * @return The registry version of the object.
     * 
     */
    public Integer registryVersion() {
        return this.registryVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceProjectRegistryMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aggregatorKey;
        private Boolean isFavorite;
        private String key;
        private List<String> labels;
        private Integer registryVersion;
        public Builder() {}
        public Builder(GetWorkspaceProjectRegistryMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregatorKey = defaults.aggregatorKey;
    	      this.isFavorite = defaults.isFavorite;
    	      this.key = defaults.key;
    	      this.labels = defaults.labels;
    	      this.registryVersion = defaults.registryVersion;
        }

        @CustomType.Setter
        public Builder aggregatorKey(String aggregatorKey) {
            if (aggregatorKey == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceProjectRegistryMetadata", "aggregatorKey");
            }
            this.aggregatorKey = aggregatorKey;
            return this;
        }
        @CustomType.Setter
        public Builder isFavorite(Boolean isFavorite) {
            if (isFavorite == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceProjectRegistryMetadata", "isFavorite");
            }
            this.isFavorite = isFavorite;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceProjectRegistryMetadata", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceProjectRegistryMetadata", "labels");
            }
            this.labels = labels;
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder registryVersion(Integer registryVersion) {
            if (registryVersion == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceProjectRegistryMetadata", "registryVersion");
            }
            this.registryVersion = registryVersion;
            return this;
        }
        public GetWorkspaceProjectRegistryMetadata build() {
            final var _resultValue = new GetWorkspaceProjectRegistryMetadata();
            _resultValue.aggregatorKey = aggregatorKey;
            _resultValue.isFavorite = isFavorite;
            _resultValue.key = key;
            _resultValue.labels = labels;
            _resultValue.registryVersion = registryVersion;
            return _resultValue;
        }
    }
}
