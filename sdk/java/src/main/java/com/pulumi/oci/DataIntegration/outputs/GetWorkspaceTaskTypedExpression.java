// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceTaskTypedExpressionConfigValue;
import com.pulumi.oci.DataIntegration.outputs.GetWorkspaceTaskTypedExpressionParentRef;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkspaceTaskTypedExpression {
    /**
     * @return Configuration values can be string, objects, or parameters.
     * 
     */
    private List<GetWorkspaceTaskTypedExpressionConfigValue> configValues;
    /**
     * @return Detailed description for the object.
     * 
     */
    private String description;
    /**
     * @return The expression string for the object.
     * 
     */
    private String expression;
    /**
     * @return The key of the object.
     * 
     */
    private String key;
    /**
     * @return The type of the types object.
     * 
     */
    private String modelType;
    /**
     * @return The model version of an object.
     * 
     */
    private String modelVersion;
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private String name;
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private Integer objectStatus;
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    private List<GetWorkspaceTaskTypedExpressionParentRef> parentReves;
    /**
     * @return The object type.
     * 
     */
    private String type;

    private GetWorkspaceTaskTypedExpression() {}
    /**
     * @return Configuration values can be string, objects, or parameters.
     * 
     */
    public List<GetWorkspaceTaskTypedExpressionConfigValue> configValues() {
        return this.configValues;
    }
    /**
     * @return Detailed description for the object.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The expression string for the object.
     * 
     */
    public String expression() {
        return this.expression;
    }
    /**
     * @return The key of the object.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The type of the types object.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return The model version of an object.
     * 
     */
    public String modelVersion() {
        return this.modelVersion;
    }
    /**
     * @return Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Integer objectStatus() {
        return this.objectStatus;
    }
    /**
     * @return A reference to the object&#39;s parent.
     * 
     */
    public List<GetWorkspaceTaskTypedExpressionParentRef> parentReves() {
        return this.parentReves;
    }
    /**
     * @return The object type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceTaskTypedExpression defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetWorkspaceTaskTypedExpressionConfigValue> configValues;
        private String description;
        private String expression;
        private String key;
        private String modelType;
        private String modelVersion;
        private String name;
        private Integer objectStatus;
        private List<GetWorkspaceTaskTypedExpressionParentRef> parentReves;
        private String type;
        public Builder() {}
        public Builder(GetWorkspaceTaskTypedExpression defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configValues = defaults.configValues;
    	      this.description = defaults.description;
    	      this.expression = defaults.expression;
    	      this.key = defaults.key;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.parentReves = defaults.parentReves;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder configValues(List<GetWorkspaceTaskTypedExpressionConfigValue> configValues) {
            if (configValues == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "configValues");
            }
            this.configValues = configValues;
            return this;
        }
        public Builder configValues(GetWorkspaceTaskTypedExpressionConfigValue... configValues) {
            return configValues(List.of(configValues));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expression(String expression) {
            if (expression == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "expression");
            }
            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            if (modelType == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "modelType");
            }
            this.modelType = modelType;
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(String modelVersion) {
            if (modelVersion == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "modelVersion");
            }
            this.modelVersion = modelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(Integer objectStatus) {
            if (objectStatus == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "objectStatus");
            }
            this.objectStatus = objectStatus;
            return this;
        }
        @CustomType.Setter
        public Builder parentReves(List<GetWorkspaceTaskTypedExpressionParentRef> parentReves) {
            if (parentReves == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "parentReves");
            }
            this.parentReves = parentReves;
            return this;
        }
        public Builder parentReves(GetWorkspaceTaskTypedExpressionParentRef... parentReves) {
            return parentReves(List.of(parentReves));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceTaskTypedExpression", "type");
            }
            this.type = type;
            return this;
        }
        public GetWorkspaceTaskTypedExpression build() {
            final var _resultValue = new GetWorkspaceTaskTypedExpression();
            _resultValue.configValues = configValues;
            _resultValue.description = description;
            _resultValue.expression = expression;
            _resultValue.key = key;
            _resultValue.modelType = modelType;
            _resultValue.modelVersion = modelVersion;
            _resultValue.name = name;
            _resultValue.objectStatus = objectStatus;
            _resultValue.parentReves = parentReves;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
