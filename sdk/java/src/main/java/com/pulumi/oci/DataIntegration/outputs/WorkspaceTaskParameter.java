// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataIntegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataIntegration.outputs.WorkspaceTaskParameterConfigValues;
import com.pulumi.oci.DataIntegration.outputs.WorkspaceTaskParameterParentRef;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkspaceTaskParameter {
    /**
     * @return (Updatable) Configuration values can be string, objects, or parameters.
     * 
     */
    private @Nullable WorkspaceTaskParameterConfigValues configValues;
    /**
     * @return (Updatable) A default value for the vairable.
     * 
     */
    private @Nullable String defaultValue;
    /**
     * @return (Updatable) Detailed description for the object.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Updatable) Specifies whether the parameter is input value.
     * 
     */
    private @Nullable Boolean isInput;
    /**
     * @return (Updatable) Specifies whether the parameter is output value.
     * 
     */
    private @Nullable Boolean isOutput;
    /**
     * @return (Updatable) The key of the object.
     * 
     */
    private @Nullable String key;
    /**
     * @return (Updatable) The type of the types object.
     * 
     */
    private String modelType;
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    private @Nullable String modelVersion;
    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    private @Nullable String name;
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    private @Nullable Integer objectStatus;
    /**
     * @return (Updatable) The output aggregation type.
     * 
     */
    private @Nullable String outputAggregationType;
    /**
     * @return (Updatable) A reference to the object&#39;s parent.
     * 
     */
    private @Nullable WorkspaceTaskParameterParentRef parentRef;
    /**
     * @return (Updatable) A base class for all model types, including First Class and its contained objects.
     * 
     */
    private @Nullable String rootObjectDefaultValue;
    /**
     * @return (Updatable) The object type.
     * 
     */
    private @Nullable String type;
    /**
     * @return (Updatable) The type of value the parameter was created for.
     * 
     */
    private @Nullable String typeName;
    /**
     * @return (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
     * 
     */
    private @Nullable String usedFor;

    private WorkspaceTaskParameter() {}
    /**
     * @return (Updatable) Configuration values can be string, objects, or parameters.
     * 
     */
    public Optional<WorkspaceTaskParameterConfigValues> configValues() {
        return Optional.ofNullable(this.configValues);
    }
    /**
     * @return (Updatable) A default value for the vairable.
     * 
     */
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    /**
     * @return (Updatable) Detailed description for the object.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Updatable) Specifies whether the parameter is input value.
     * 
     */
    public Optional<Boolean> isInput() {
        return Optional.ofNullable(this.isInput);
    }
    /**
     * @return (Updatable) Specifies whether the parameter is output value.
     * 
     */
    public Optional<Boolean> isOutput() {
        return Optional.ofNullable(this.isOutput);
    }
    /**
     * @return (Updatable) The key of the object.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return (Updatable) The type of the types object.
     * 
     */
    public String modelType() {
        return this.modelType;
    }
    /**
     * @return (Updatable) The model version of an object.
     * 
     */
    public Optional<String> modelVersion() {
        return Optional.ofNullable(this.modelVersion);
    }
    /**
     * @return (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     * 
     */
    public Optional<Integer> objectStatus() {
        return Optional.ofNullable(this.objectStatus);
    }
    /**
     * @return (Updatable) The output aggregation type.
     * 
     */
    public Optional<String> outputAggregationType() {
        return Optional.ofNullable(this.outputAggregationType);
    }
    /**
     * @return (Updatable) A reference to the object&#39;s parent.
     * 
     */
    public Optional<WorkspaceTaskParameterParentRef> parentRef() {
        return Optional.ofNullable(this.parentRef);
    }
    /**
     * @return (Updatable) A base class for all model types, including First Class and its contained objects.
     * 
     */
    public Optional<String> rootObjectDefaultValue() {
        return Optional.ofNullable(this.rootObjectDefaultValue);
    }
    /**
     * @return (Updatable) The object type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return (Updatable) The type of value the parameter was created for.
     * 
     */
    public Optional<String> typeName() {
        return Optional.ofNullable(this.typeName);
    }
    /**
     * @return (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
     * 
     */
    public Optional<String> usedFor() {
        return Optional.ofNullable(this.usedFor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkspaceTaskParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable WorkspaceTaskParameterConfigValues configValues;
        private @Nullable String defaultValue;
        private @Nullable String description;
        private @Nullable Boolean isInput;
        private @Nullable Boolean isOutput;
        private @Nullable String key;
        private String modelType;
        private @Nullable String modelVersion;
        private @Nullable String name;
        private @Nullable Integer objectStatus;
        private @Nullable String outputAggregationType;
        private @Nullable WorkspaceTaskParameterParentRef parentRef;
        private @Nullable String rootObjectDefaultValue;
        private @Nullable String type;
        private @Nullable String typeName;
        private @Nullable String usedFor;
        public Builder() {}
        public Builder(WorkspaceTaskParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configValues = defaults.configValues;
    	      this.defaultValue = defaults.defaultValue;
    	      this.description = defaults.description;
    	      this.isInput = defaults.isInput;
    	      this.isOutput = defaults.isOutput;
    	      this.key = defaults.key;
    	      this.modelType = defaults.modelType;
    	      this.modelVersion = defaults.modelVersion;
    	      this.name = defaults.name;
    	      this.objectStatus = defaults.objectStatus;
    	      this.outputAggregationType = defaults.outputAggregationType;
    	      this.parentRef = defaults.parentRef;
    	      this.rootObjectDefaultValue = defaults.rootObjectDefaultValue;
    	      this.type = defaults.type;
    	      this.typeName = defaults.typeName;
    	      this.usedFor = defaults.usedFor;
        }

        @CustomType.Setter
        public Builder configValues(@Nullable WorkspaceTaskParameterConfigValues configValues) {

            this.configValues = configValues;
            return this;
        }
        @CustomType.Setter
        public Builder defaultValue(@Nullable String defaultValue) {

            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder isInput(@Nullable Boolean isInput) {

            this.isInput = isInput;
            return this;
        }
        @CustomType.Setter
        public Builder isOutput(@Nullable Boolean isOutput) {

            this.isOutput = isOutput;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder modelType(String modelType) {
            if (modelType == null) {
              throw new MissingRequiredPropertyException("WorkspaceTaskParameter", "modelType");
            }
            this.modelType = modelType;
            return this;
        }
        @CustomType.Setter
        public Builder modelVersion(@Nullable String modelVersion) {

            this.modelVersion = modelVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectStatus(@Nullable Integer objectStatus) {

            this.objectStatus = objectStatus;
            return this;
        }
        @CustomType.Setter
        public Builder outputAggregationType(@Nullable String outputAggregationType) {

            this.outputAggregationType = outputAggregationType;
            return this;
        }
        @CustomType.Setter
        public Builder parentRef(@Nullable WorkspaceTaskParameterParentRef parentRef) {

            this.parentRef = parentRef;
            return this;
        }
        @CustomType.Setter
        public Builder rootObjectDefaultValue(@Nullable String rootObjectDefaultValue) {

            this.rootObjectDefaultValue = rootObjectDefaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder typeName(@Nullable String typeName) {

            this.typeName = typeName;
            return this;
        }
        @CustomType.Setter
        public Builder usedFor(@Nullable String usedFor) {

            this.usedFor = usedFor;
            return this;
        }
        public WorkspaceTaskParameter build() {
            final var _resultValue = new WorkspaceTaskParameter();
            _resultValue.configValues = configValues;
            _resultValue.defaultValue = defaultValue;
            _resultValue.description = description;
            _resultValue.isInput = isInput;
            _resultValue.isOutput = isOutput;
            _resultValue.key = key;
            _resultValue.modelType = modelType;
            _resultValue.modelVersion = modelVersion;
            _resultValue.name = name;
            _resultValue.objectStatus = objectStatus;
            _resultValue.outputAggregationType = outputAggregationType;
            _resultValue.parentRef = parentRef;
            _resultValue.rootObjectDefaultValue = rootObjectDefaultValue;
            _resultValue.type = type;
            _resultValue.typeName = typeName;
            _resultValue.usedFor = usedFor;
            return _resultValue;
        }
    }
}
