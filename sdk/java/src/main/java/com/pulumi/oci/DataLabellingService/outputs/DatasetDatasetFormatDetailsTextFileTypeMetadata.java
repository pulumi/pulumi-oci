// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataLabellingService.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatasetDatasetFormatDetailsTextFileTypeMetadata {
    /**
     * @return A column delimiter
     * 
     */
    private final @Nullable String columnDelimiter;
    /**
     * @return The index of a selected column. This is a zero-based index.
     * 
     */
    private final Integer columnIndex;
    /**
     * @return The name of a selected column.
     * 
     */
    private final @Nullable String columnName;
    /**
     * @return An escape character.
     * 
     */
    private final @Nullable String escapeCharacter;
    /**
     * @return It defines the format type of text files.
     * 
     */
    private final String formatType;
    /**
     * @return A line delimiter.
     * 
     */
    private final @Nullable String lineDelimiter;

    @CustomType.Constructor
    private DatasetDatasetFormatDetailsTextFileTypeMetadata(
        @CustomType.Parameter("columnDelimiter") @Nullable String columnDelimiter,
        @CustomType.Parameter("columnIndex") Integer columnIndex,
        @CustomType.Parameter("columnName") @Nullable String columnName,
        @CustomType.Parameter("escapeCharacter") @Nullable String escapeCharacter,
        @CustomType.Parameter("formatType") String formatType,
        @CustomType.Parameter("lineDelimiter") @Nullable String lineDelimiter) {
        this.columnDelimiter = columnDelimiter;
        this.columnIndex = columnIndex;
        this.columnName = columnName;
        this.escapeCharacter = escapeCharacter;
        this.formatType = formatType;
        this.lineDelimiter = lineDelimiter;
    }

    /**
     * @return A column delimiter
     * 
     */
    public Optional<String> columnDelimiter() {
        return Optional.ofNullable(this.columnDelimiter);
    }
    /**
     * @return The index of a selected column. This is a zero-based index.
     * 
     */
    public Integer columnIndex() {
        return this.columnIndex;
    }
    /**
     * @return The name of a selected column.
     * 
     */
    public Optional<String> columnName() {
        return Optional.ofNullable(this.columnName);
    }
    /**
     * @return An escape character.
     * 
     */
    public Optional<String> escapeCharacter() {
        return Optional.ofNullable(this.escapeCharacter);
    }
    /**
     * @return It defines the format type of text files.
     * 
     */
    public String formatType() {
        return this.formatType;
    }
    /**
     * @return A line delimiter.
     * 
     */
    public Optional<String> lineDelimiter() {
        return Optional.ofNullable(this.lineDelimiter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetDatasetFormatDetailsTextFileTypeMetadata defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String columnDelimiter;
        private Integer columnIndex;
        private @Nullable String columnName;
        private @Nullable String escapeCharacter;
        private String formatType;
        private @Nullable String lineDelimiter;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetDatasetFormatDetailsTextFileTypeMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.columnIndex = defaults.columnIndex;
    	      this.columnName = defaults.columnName;
    	      this.escapeCharacter = defaults.escapeCharacter;
    	      this.formatType = defaults.formatType;
    	      this.lineDelimiter = defaults.lineDelimiter;
        }

        public Builder columnDelimiter(@Nullable String columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }
        public Builder columnIndex(Integer columnIndex) {
            this.columnIndex = Objects.requireNonNull(columnIndex);
            return this;
        }
        public Builder columnName(@Nullable String columnName) {
            this.columnName = columnName;
            return this;
        }
        public Builder escapeCharacter(@Nullable String escapeCharacter) {
            this.escapeCharacter = escapeCharacter;
            return this;
        }
        public Builder formatType(String formatType) {
            this.formatType = Objects.requireNonNull(formatType);
            return this;
        }
        public Builder lineDelimiter(@Nullable String lineDelimiter) {
            this.lineDelimiter = lineDelimiter;
            return this;
        }        public DatasetDatasetFormatDetailsTextFileTypeMetadata build() {
            return new DatasetDatasetFormatDetailsTextFileTypeMetadata(columnDelimiter, columnIndex, columnName, escapeCharacter, formatType, lineDelimiter);
        }
    }
}
