// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.SensitiveDataModelTablesForDiscoveryArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensitiveDataModelArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensitiveDataModelArgs Empty = new SensitiveDataModelArgs();

    /**
     * (Updatable) The application suite name identifying a collection of applications. It&#39;s useful only if maintaining a sensitive data model for a suite of applications.
     * 
     */
    @Import(name="appSuiteName")
    private @Nullable Output<String> appSuiteName;

    /**
     * @return (Updatable) The application suite name identifying a collection of applications. It&#39;s useful only if maintaining a sensitive data model for a suite of applications.
     * 
     */
    public Optional<Output<String>> appSuiteName() {
        return Optional.ofNullable(this.appSuiteName);
    }

    /**
     * (Updatable) The OCID of the compartment where the sensitive data model should be created.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment where the sensitive data model should be created.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) The description of the sensitive data model.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description of the sensitive data model.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The display name of the sensitive data model. The name does not have to be unique, and it&#39;s changeable.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The display name of the sensitive data model. The name does not have to be unique, and it&#39;s changeable.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) Indicates if data discovery jobs should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
     * 
     */
    @Import(name="isAppDefinedRelationDiscoveryEnabled")
    private @Nullable Output<Boolean> isAppDefinedRelationDiscoveryEnabled;

    /**
     * @return (Updatable) Indicates if data discovery jobs should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
     * 
     */
    public Optional<Output<Boolean>> isAppDefinedRelationDiscoveryEnabled() {
        return Optional.ofNullable(this.isAppDefinedRelationDiscoveryEnabled);
    }

    /**
     * Indicates if all the schemas in the associated target database should be scanned by data discovery jobs. If it is set to true, sensitive data is discovered in all schemas (except for schemas maintained by Oracle).
     * 
     */
    @Import(name="isIncludeAllSchemas")
    private @Nullable Output<Boolean> isIncludeAllSchemas;

    /**
     * @return Indicates if all the schemas in the associated target database should be scanned by data discovery jobs. If it is set to true, sensitive data is discovered in all schemas (except for schemas maintained by Oracle).
     * 
     */
    public Optional<Output<Boolean>> isIncludeAllSchemas() {
        return Optional.ofNullable(this.isIncludeAllSchemas);
    }

    /**
     * Indicates if all the existing sensitive types should be used by data discovery jobs. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery.
     * 
     */
    @Import(name="isIncludeAllSensitiveTypes")
    private @Nullable Output<Boolean> isIncludeAllSensitiveTypes;

    /**
     * @return Indicates if all the existing sensitive types should be used by data discovery jobs. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery.
     * 
     */
    public Optional<Output<Boolean>> isIncludeAllSensitiveTypes() {
        return Optional.ofNullable(this.isIncludeAllSensitiveTypes);
    }

    /**
     * (Updatable) Indicates if data discovery jobs should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
     * 
     */
    @Import(name="isSampleDataCollectionEnabled")
    private @Nullable Output<Boolean> isSampleDataCollectionEnabled;

    /**
     * @return (Updatable) Indicates if data discovery jobs should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
     * 
     */
    public Optional<Output<Boolean>> isSampleDataCollectionEnabled() {
        return Optional.ofNullable(this.isSampleDataCollectionEnabled);
    }

    /**
     * (Updatable) The schemas to be scanned by data discovery jobs.
     * 
     */
    @Import(name="schemasForDiscoveries")
    private @Nullable Output<List<String>> schemasForDiscoveries;

    /**
     * @return (Updatable) The schemas to be scanned by data discovery jobs.
     * 
     */
    public Optional<Output<List<String>>> schemasForDiscoveries() {
        return Optional.ofNullable(this.schemasForDiscoveries);
    }

    /**
     * (Updatable) The OCIDs of the sensitive types to be used by data discovery jobs. If OCID of a sensitive category is provided, all its child sensitive types are used for data discovery.
     * 
     */
    @Import(name="sensitiveTypeIdsForDiscoveries")
    private @Nullable Output<List<String>> sensitiveTypeIdsForDiscoveries;

    /**
     * @return (Updatable) The OCIDs of the sensitive types to be used by data discovery jobs. If OCID of a sensitive category is provided, all its child sensitive types are used for data discovery.
     * 
     */
    public Optional<Output<List<String>>> sensitiveTypeIdsForDiscoveries() {
        return Optional.ofNullable(this.sensitiveTypeIdsForDiscoveries);
    }

    /**
     * (Updatable) The data discovery jobs will scan the tables specified here, including both schemas and tables. For instance, the input could be in the format: [{schemaName: &#34;HR&#34;, tableName: [&#34;T1&#34;, &#34;T2&#34;]}, {schemaName:  &#34;OE&#34;, tableName : [&#34;T3&#34;, &#34;T4&#34;]}].
     * 
     */
    @Import(name="tablesForDiscoveries")
    private @Nullable Output<List<SensitiveDataModelTablesForDiscoveryArgs>> tablesForDiscoveries;

    /**
     * @return (Updatable) The data discovery jobs will scan the tables specified here, including both schemas and tables. For instance, the input could be in the format: [{schemaName: &#34;HR&#34;, tableName: [&#34;T1&#34;, &#34;T2&#34;]}, {schemaName:  &#34;OE&#34;, tableName : [&#34;T3&#34;, &#34;T4&#34;]}].
     * 
     */
    public Optional<Output<List<SensitiveDataModelTablesForDiscoveryArgs>>> tablesForDiscoveries() {
        return Optional.ofNullable(this.tablesForDiscoveries);
    }

    /**
     * (Updatable) The OCID of the reference target database to be associated with the sensitive data model. All operations such as performing data discovery and adding columns manually are done in the context of the associated target database.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="targetId", required=true)
    private Output<String> targetId;

    /**
     * @return (Updatable) The OCID of the reference target database to be associated with the sensitive data model. All operations such as performing data discovery and adding columns manually are done in the context of the associated target database.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> targetId() {
        return this.targetId;
    }

    private SensitiveDataModelArgs() {}

    private SensitiveDataModelArgs(SensitiveDataModelArgs $) {
        this.appSuiteName = $.appSuiteName;
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.isAppDefinedRelationDiscoveryEnabled = $.isAppDefinedRelationDiscoveryEnabled;
        this.isIncludeAllSchemas = $.isIncludeAllSchemas;
        this.isIncludeAllSensitiveTypes = $.isIncludeAllSensitiveTypes;
        this.isSampleDataCollectionEnabled = $.isSampleDataCollectionEnabled;
        this.schemasForDiscoveries = $.schemasForDiscoveries;
        this.sensitiveTypeIdsForDiscoveries = $.sensitiveTypeIdsForDiscoveries;
        this.tablesForDiscoveries = $.tablesForDiscoveries;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensitiveDataModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensitiveDataModelArgs $;

        public Builder() {
            $ = new SensitiveDataModelArgs();
        }

        public Builder(SensitiveDataModelArgs defaults) {
            $ = new SensitiveDataModelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appSuiteName (Updatable) The application suite name identifying a collection of applications. It&#39;s useful only if maintaining a sensitive data model for a suite of applications.
         * 
         * @return builder
         * 
         */
        public Builder appSuiteName(@Nullable Output<String> appSuiteName) {
            $.appSuiteName = appSuiteName;
            return this;
        }

        /**
         * @param appSuiteName (Updatable) The application suite name identifying a collection of applications. It&#39;s useful only if maintaining a sensitive data model for a suite of applications.
         * 
         * @return builder
         * 
         */
        public Builder appSuiteName(String appSuiteName) {
            return appSuiteName(Output.of(appSuiteName));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the sensitive data model should be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the sensitive data model should be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) The description of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The display name of the sensitive data model. The name does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The display name of the sensitive data model. The name does not have to be unique, and it&#39;s changeable.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isAppDefinedRelationDiscoveryEnabled (Updatable) Indicates if data discovery jobs should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
         * 
         * @return builder
         * 
         */
        public Builder isAppDefinedRelationDiscoveryEnabled(@Nullable Output<Boolean> isAppDefinedRelationDiscoveryEnabled) {
            $.isAppDefinedRelationDiscoveryEnabled = isAppDefinedRelationDiscoveryEnabled;
            return this;
        }

        /**
         * @param isAppDefinedRelationDiscoveryEnabled (Updatable) Indicates if data discovery jobs should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It&#39;s disabled by default and should be used only if there is a need to identify application-level relationships.
         * 
         * @return builder
         * 
         */
        public Builder isAppDefinedRelationDiscoveryEnabled(Boolean isAppDefinedRelationDiscoveryEnabled) {
            return isAppDefinedRelationDiscoveryEnabled(Output.of(isAppDefinedRelationDiscoveryEnabled));
        }

        /**
         * @param isIncludeAllSchemas Indicates if all the schemas in the associated target database should be scanned by data discovery jobs. If it is set to true, sensitive data is discovered in all schemas (except for schemas maintained by Oracle).
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSchemas(@Nullable Output<Boolean> isIncludeAllSchemas) {
            $.isIncludeAllSchemas = isIncludeAllSchemas;
            return this;
        }

        /**
         * @param isIncludeAllSchemas Indicates if all the schemas in the associated target database should be scanned by data discovery jobs. If it is set to true, sensitive data is discovered in all schemas (except for schemas maintained by Oracle).
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSchemas(Boolean isIncludeAllSchemas) {
            return isIncludeAllSchemas(Output.of(isIncludeAllSchemas));
        }

        /**
         * @param isIncludeAllSensitiveTypes Indicates if all the existing sensitive types should be used by data discovery jobs. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSensitiveTypes(@Nullable Output<Boolean> isIncludeAllSensitiveTypes) {
            $.isIncludeAllSensitiveTypes = isIncludeAllSensitiveTypes;
            return this;
        }

        /**
         * @param isIncludeAllSensitiveTypes Indicates if all the existing sensitive types should be used by data discovery jobs. If it&#39;s set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeAllSensitiveTypes(Boolean isIncludeAllSensitiveTypes) {
            return isIncludeAllSensitiveTypes(Output.of(isIncludeAllSensitiveTypes));
        }

        /**
         * @param isSampleDataCollectionEnabled (Updatable) Indicates if data discovery jobs should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
         * 
         * @return builder
         * 
         */
        public Builder isSampleDataCollectionEnabled(@Nullable Output<Boolean> isSampleDataCollectionEnabled) {
            $.isSampleDataCollectionEnabled = isSampleDataCollectionEnabled;
            return this;
        }

        /**
         * @param isSampleDataCollectionEnabled (Updatable) Indicates if data discovery jobs should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it&#39;s disabled by default and should be used only if it&#39;s acceptable to store sample data in Data Safe&#39;s repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
         * 
         * @return builder
         * 
         */
        public Builder isSampleDataCollectionEnabled(Boolean isSampleDataCollectionEnabled) {
            return isSampleDataCollectionEnabled(Output.of(isSampleDataCollectionEnabled));
        }

        /**
         * @param schemasForDiscoveries (Updatable) The schemas to be scanned by data discovery jobs.
         * 
         * @return builder
         * 
         */
        public Builder schemasForDiscoveries(@Nullable Output<List<String>> schemasForDiscoveries) {
            $.schemasForDiscoveries = schemasForDiscoveries;
            return this;
        }

        /**
         * @param schemasForDiscoveries (Updatable) The schemas to be scanned by data discovery jobs.
         * 
         * @return builder
         * 
         */
        public Builder schemasForDiscoveries(List<String> schemasForDiscoveries) {
            return schemasForDiscoveries(Output.of(schemasForDiscoveries));
        }

        /**
         * @param schemasForDiscoveries (Updatable) The schemas to be scanned by data discovery jobs.
         * 
         * @return builder
         * 
         */
        public Builder schemasForDiscoveries(String... schemasForDiscoveries) {
            return schemasForDiscoveries(List.of(schemasForDiscoveries));
        }

        /**
         * @param sensitiveTypeIdsForDiscoveries (Updatable) The OCIDs of the sensitive types to be used by data discovery jobs. If OCID of a sensitive category is provided, all its child sensitive types are used for data discovery.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIdsForDiscoveries(@Nullable Output<List<String>> sensitiveTypeIdsForDiscoveries) {
            $.sensitiveTypeIdsForDiscoveries = sensitiveTypeIdsForDiscoveries;
            return this;
        }

        /**
         * @param sensitiveTypeIdsForDiscoveries (Updatable) The OCIDs of the sensitive types to be used by data discovery jobs. If OCID of a sensitive category is provided, all its child sensitive types are used for data discovery.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIdsForDiscoveries(List<String> sensitiveTypeIdsForDiscoveries) {
            return sensitiveTypeIdsForDiscoveries(Output.of(sensitiveTypeIdsForDiscoveries));
        }

        /**
         * @param sensitiveTypeIdsForDiscoveries (Updatable) The OCIDs of the sensitive types to be used by data discovery jobs. If OCID of a sensitive category is provided, all its child sensitive types are used for data discovery.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIdsForDiscoveries(String... sensitiveTypeIdsForDiscoveries) {
            return sensitiveTypeIdsForDiscoveries(List.of(sensitiveTypeIdsForDiscoveries));
        }

        /**
         * @param tablesForDiscoveries (Updatable) The data discovery jobs will scan the tables specified here, including both schemas and tables. For instance, the input could be in the format: [{schemaName: &#34;HR&#34;, tableName: [&#34;T1&#34;, &#34;T2&#34;]}, {schemaName:  &#34;OE&#34;, tableName : [&#34;T3&#34;, &#34;T4&#34;]}].
         * 
         * @return builder
         * 
         */
        public Builder tablesForDiscoveries(@Nullable Output<List<SensitiveDataModelTablesForDiscoveryArgs>> tablesForDiscoveries) {
            $.tablesForDiscoveries = tablesForDiscoveries;
            return this;
        }

        /**
         * @param tablesForDiscoveries (Updatable) The data discovery jobs will scan the tables specified here, including both schemas and tables. For instance, the input could be in the format: [{schemaName: &#34;HR&#34;, tableName: [&#34;T1&#34;, &#34;T2&#34;]}, {schemaName:  &#34;OE&#34;, tableName : [&#34;T3&#34;, &#34;T4&#34;]}].
         * 
         * @return builder
         * 
         */
        public Builder tablesForDiscoveries(List<SensitiveDataModelTablesForDiscoveryArgs> tablesForDiscoveries) {
            return tablesForDiscoveries(Output.of(tablesForDiscoveries));
        }

        /**
         * @param tablesForDiscoveries (Updatable) The data discovery jobs will scan the tables specified here, including both schemas and tables. For instance, the input could be in the format: [{schemaName: &#34;HR&#34;, tableName: [&#34;T1&#34;, &#34;T2&#34;]}, {schemaName:  &#34;OE&#34;, tableName : [&#34;T3&#34;, &#34;T4&#34;]}].
         * 
         * @return builder
         * 
         */
        public Builder tablesForDiscoveries(SensitiveDataModelTablesForDiscoveryArgs... tablesForDiscoveries) {
            return tablesForDiscoveries(List.of(tablesForDiscoveries));
        }

        /**
         * @param targetId (Updatable) The OCID of the reference target database to be associated with the sensitive data model. All operations such as performing data discovery and adding columns manually are done in the context of the associated target database.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder targetId(Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId (Updatable) The OCID of the reference target database to be associated with the sensitive data model. All operations such as performing data discovery and adding columns manually are done in the context of the associated target database.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        public SensitiveDataModelArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("SensitiveDataModelArgs", "compartmentId");
            }
            if ($.targetId == null) {
                throw new MissingRequiredPropertyException("SensitiveDataModelArgs", "targetId");
            }
            return $;
        }
    }

}
