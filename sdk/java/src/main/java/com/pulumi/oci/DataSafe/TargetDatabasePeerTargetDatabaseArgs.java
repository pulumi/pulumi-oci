// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.TargetDatabasePeerTargetDatabaseDatabaseDetailsArgs;
import com.pulumi.oci.DataSafe.inputs.TargetDatabasePeerTargetDatabaseTlsConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetDatabasePeerTargetDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetDatabasePeerTargetDatabaseArgs Empty = new TargetDatabasePeerTargetDatabaseArgs();

    /**
     * (Updatable) Details of the database for the registration in Data Safe.
     * 
     */
    @Import(name="databaseDetails", required=true)
    private Output<TargetDatabasePeerTargetDatabaseDatabaseDetailsArgs> databaseDetails;

    /**
     * @return (Updatable) Details of the database for the registration in Data Safe.
     * 
     */
    public Output<TargetDatabasePeerTargetDatabaseDatabaseDetailsArgs> databaseDetails() {
        return this.databaseDetails;
    }

    /**
     * The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
     * 
     */
    @Import(name="dataguardAssociationId")
    private @Nullable Output<String> dataguardAssociationId;

    /**
     * @return The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
     * 
     */
    public Optional<Output<String>> dataguardAssociationId() {
        return Optional.ofNullable(this.dataguardAssociationId);
    }

    /**
     * (Updatable) The description of the peer target database in Data Safe.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) The description of the peer target database in Data Safe.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The OCID of the Data Safe target database.
     * 
     */
    @Import(name="targetDatabaseId", required=true)
    private Output<String> targetDatabaseId;

    /**
     * @return The OCID of the Data Safe target database.
     * 
     */
    public Output<String> targetDatabaseId() {
        return this.targetDatabaseId;
    }

    /**
     * (Updatable) The details required to establish a TLS enabled connection.
     * 
     */
    @Import(name="tlsConfig")
    private @Nullable Output<TargetDatabasePeerTargetDatabaseTlsConfigArgs> tlsConfig;

    /**
     * @return (Updatable) The details required to establish a TLS enabled connection.
     * 
     */
    public Optional<Output<TargetDatabasePeerTargetDatabaseTlsConfigArgs>> tlsConfig() {
        return Optional.ofNullable(this.tlsConfig);
    }

    private TargetDatabasePeerTargetDatabaseArgs() {}

    private TargetDatabasePeerTargetDatabaseArgs(TargetDatabasePeerTargetDatabaseArgs $) {
        this.databaseDetails = $.databaseDetails;
        this.dataguardAssociationId = $.dataguardAssociationId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.targetDatabaseId = $.targetDatabaseId;
        this.tlsConfig = $.tlsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetDatabasePeerTargetDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetDatabasePeerTargetDatabaseArgs $;

        public Builder() {
            $ = new TargetDatabasePeerTargetDatabaseArgs();
        }

        public Builder(TargetDatabasePeerTargetDatabaseArgs defaults) {
            $ = new TargetDatabasePeerTargetDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseDetails (Updatable) Details of the database for the registration in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder databaseDetails(Output<TargetDatabasePeerTargetDatabaseDatabaseDetailsArgs> databaseDetails) {
            $.databaseDetails = databaseDetails;
            return this;
        }

        /**
         * @param databaseDetails (Updatable) Details of the database for the registration in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder databaseDetails(TargetDatabasePeerTargetDatabaseDatabaseDetailsArgs databaseDetails) {
            return databaseDetails(Output.of(databaseDetails));
        }

        /**
         * @param dataguardAssociationId The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
         * 
         * @return builder
         * 
         */
        public Builder dataguardAssociationId(@Nullable Output<String> dataguardAssociationId) {
            $.dataguardAssociationId = dataguardAssociationId;
            return this;
        }

        /**
         * @param dataguardAssociationId The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
         * 
         * @return builder
         * 
         */
        public Builder dataguardAssociationId(String dataguardAssociationId) {
            return dataguardAssociationId(Output.of(dataguardAssociationId));
        }

        /**
         * @param description (Updatable) The description of the peer target database in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) The description of the peer target database in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param targetDatabaseId The OCID of the Data Safe target database.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseId(Output<String> targetDatabaseId) {
            $.targetDatabaseId = targetDatabaseId;
            return this;
        }

        /**
         * @param targetDatabaseId The OCID of the Data Safe target database.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseId(String targetDatabaseId) {
            return targetDatabaseId(Output.of(targetDatabaseId));
        }

        /**
         * @param tlsConfig (Updatable) The details required to establish a TLS enabled connection.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfig(@Nullable Output<TargetDatabasePeerTargetDatabaseTlsConfigArgs> tlsConfig) {
            $.tlsConfig = tlsConfig;
            return this;
        }

        /**
         * @param tlsConfig (Updatable) The details required to establish a TLS enabled connection.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfig(TargetDatabasePeerTargetDatabaseTlsConfigArgs tlsConfig) {
            return tlsConfig(Output.of(tlsConfig));
        }

        public TargetDatabasePeerTargetDatabaseArgs build() {
            if ($.databaseDetails == null) {
                throw new MissingRequiredPropertyException("TargetDatabasePeerTargetDatabaseArgs", "databaseDetails");
            }
            if ($.targetDatabaseId == null) {
                throw new MissingRequiredPropertyException("TargetDatabasePeerTargetDatabaseArgs", "targetDatabaseId");
            }
            return $;
        }
    }

}
