// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CalculateAuditVolumeCollectedCollectedAuditVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final CalculateAuditVolumeCollectedCollectedAuditVolumeArgs Empty = new CalculateAuditVolumeCollectedCollectedAuditVolumeArgs();

    @Import(name="archivedVolume")
    private @Nullable Output<String> archivedVolume;

    public Optional<Output<String>> archivedVolume() {
        return Optional.ofNullable(this.archivedVolume);
    }

    /**
     * The OCID of the audit.
     * 
     */
    @Import(name="auditProfileId")
    private @Nullable Output<String> auditProfileId;

    /**
     * @return The OCID of the audit.
     * 
     */
    public Optional<Output<String>> auditProfileId() {
        return Optional.ofNullable(this.auditProfileId);
    }

    @Import(name="monthInConsideration")
    private @Nullable Output<String> monthInConsideration;

    public Optional<Output<String>> monthInConsideration() {
        return Optional.ofNullable(this.monthInConsideration);
    }

    @Import(name="onlineVolume")
    private @Nullable Output<String> onlineVolume;

    public Optional<Output<String>> onlineVolume() {
        return Optional.ofNullable(this.onlineVolume);
    }

    private CalculateAuditVolumeCollectedCollectedAuditVolumeArgs() {}

    private CalculateAuditVolumeCollectedCollectedAuditVolumeArgs(CalculateAuditVolumeCollectedCollectedAuditVolumeArgs $) {
        this.archivedVolume = $.archivedVolume;
        this.auditProfileId = $.auditProfileId;
        this.monthInConsideration = $.monthInConsideration;
        this.onlineVolume = $.onlineVolume;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CalculateAuditVolumeCollectedCollectedAuditVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CalculateAuditVolumeCollectedCollectedAuditVolumeArgs $;

        public Builder() {
            $ = new CalculateAuditVolumeCollectedCollectedAuditVolumeArgs();
        }

        public Builder(CalculateAuditVolumeCollectedCollectedAuditVolumeArgs defaults) {
            $ = new CalculateAuditVolumeCollectedCollectedAuditVolumeArgs(Objects.requireNonNull(defaults));
        }

        public Builder archivedVolume(@Nullable Output<String> archivedVolume) {
            $.archivedVolume = archivedVolume;
            return this;
        }

        public Builder archivedVolume(String archivedVolume) {
            return archivedVolume(Output.of(archivedVolume));
        }

        /**
         * @param auditProfileId The OCID of the audit.
         * 
         * @return builder
         * 
         */
        public Builder auditProfileId(@Nullable Output<String> auditProfileId) {
            $.auditProfileId = auditProfileId;
            return this;
        }

        /**
         * @param auditProfileId The OCID of the audit.
         * 
         * @return builder
         * 
         */
        public Builder auditProfileId(String auditProfileId) {
            return auditProfileId(Output.of(auditProfileId));
        }

        public Builder monthInConsideration(@Nullable Output<String> monthInConsideration) {
            $.monthInConsideration = monthInConsideration;
            return this;
        }

        public Builder monthInConsideration(String monthInConsideration) {
            return monthInConsideration(Output.of(monthInConsideration));
        }

        public Builder onlineVolume(@Nullable Output<String> onlineVolume) {
            $.onlineVolume = onlineVolume;
            return this;
        }

        public Builder onlineVolume(String onlineVolume) {
            return onlineVolume(Output.of(onlineVolume));
        }

        public CalculateAuditVolumeCollectedCollectedAuditVolumeArgs build() {
            return $;
        }
    }

}
