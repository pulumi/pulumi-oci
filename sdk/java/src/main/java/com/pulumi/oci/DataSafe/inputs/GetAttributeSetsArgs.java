// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetAttributeSetsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAttributeSetsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAttributeSetsArgs Empty = new GetAttributeSetsArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only attribute set resources that matches the specified attribute set OCID query param.
     * 
     */
    @Import(name="attributeSetId")
    private @Nullable Output<String> attributeSetId;

    /**
     * @return A filter to return only attribute set resources that matches the specified attribute set OCID query param.
     * 
     */
    public Optional<Output<String>> attributeSetId() {
        return Optional.ofNullable(this.attributeSetId);
    }

    /**
     * A filter to return only attribute set resources that matches the specified attribute set type query param.
     * 
     */
    @Import(name="attributeSetType")
    private @Nullable Output<String> attributeSetType;

    /**
     * @return A filter to return only attribute set resources that matches the specified attribute set type query param.
     * 
     */
    public Optional<Output<String>> attributeSetType() {
        return Optional.ofNullable(this.attributeSetType);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * A filter to return only resources that match the specified display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetAttributeSetsFilterArgs>> filters;

    public Optional<Output<List<GetAttributeSetsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return attribute set resources that are in use by other associated resources.
     * 
     */
    @Import(name="inUse")
    private @Nullable Output<String> inUse;

    /**
     * @return A filter to return attribute set resources that are in use by other associated resources.
     * 
     */
    public Optional<Output<String>> inUse() {
        return Optional.ofNullable(this.inUse);
    }

    /**
     * A filter to return user defined or seeded attribute set resources that matches the specified is user defined query param. A true value indicates user defined attribute set.
     * 
     */
    @Import(name="isUserDefined")
    private @Nullable Output<Boolean> isUserDefined;

    /**
     * @return A filter to return user defined or seeded attribute set resources that matches the specified is user defined query param. A true value indicates user defined attribute set.
     * 
     */
    public Optional<Output<Boolean>> isUserDefined() {
        return Optional.ofNullable(this.isUserDefined);
    }

    /**
     * The current state of an attribute set.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of an attribute set.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetAttributeSetsArgs() {}

    private GetAttributeSetsArgs(GetAttributeSetsArgs $) {
        this.accessLevel = $.accessLevel;
        this.attributeSetId = $.attributeSetId;
        this.attributeSetType = $.attributeSetType;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.inUse = $.inUse;
        this.isUserDefined = $.isUserDefined;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAttributeSetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAttributeSetsArgs $;

        public Builder() {
            $ = new GetAttributeSetsArgs();
        }

        public Builder(GetAttributeSetsArgs defaults) {
            $ = new GetAttributeSetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param attributeSetId A filter to return only attribute set resources that matches the specified attribute set OCID query param.
         * 
         * @return builder
         * 
         */
        public Builder attributeSetId(@Nullable Output<String> attributeSetId) {
            $.attributeSetId = attributeSetId;
            return this;
        }

        /**
         * @param attributeSetId A filter to return only attribute set resources that matches the specified attribute set OCID query param.
         * 
         * @return builder
         * 
         */
        public Builder attributeSetId(String attributeSetId) {
            return attributeSetId(Output.of(attributeSetId));
        }

        /**
         * @param attributeSetType A filter to return only attribute set resources that matches the specified attribute set type query param.
         * 
         * @return builder
         * 
         */
        public Builder attributeSetType(@Nullable Output<String> attributeSetType) {
            $.attributeSetType = attributeSetType;
            return this;
        }

        /**
         * @param attributeSetType A filter to return only attribute set resources that matches the specified attribute set type query param.
         * 
         * @return builder
         * 
         */
        public Builder attributeSetType(String attributeSetType) {
            return attributeSetType(Output.of(attributeSetType));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetAttributeSetsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetAttributeSetsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetAttributeSetsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param inUse A filter to return attribute set resources that are in use by other associated resources.
         * 
         * @return builder
         * 
         */
        public Builder inUse(@Nullable Output<String> inUse) {
            $.inUse = inUse;
            return this;
        }

        /**
         * @param inUse A filter to return attribute set resources that are in use by other associated resources.
         * 
         * @return builder
         * 
         */
        public Builder inUse(String inUse) {
            return inUse(Output.of(inUse));
        }

        /**
         * @param isUserDefined A filter to return user defined or seeded attribute set resources that matches the specified is user defined query param. A true value indicates user defined attribute set.
         * 
         * @return builder
         * 
         */
        public Builder isUserDefined(@Nullable Output<Boolean> isUserDefined) {
            $.isUserDefined = isUserDefined;
            return this;
        }

        /**
         * @param isUserDefined A filter to return user defined or seeded attribute set resources that matches the specified is user defined query param. A true value indicates user defined attribute set.
         * 
         * @return builder
         * 
         */
        public Builder isUserDefined(Boolean isUserDefined) {
            return isUserDefined(Output.of(isUserDefined));
        }

        /**
         * @param state The current state of an attribute set.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of an attribute set.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetAttributeSetsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetAttributeSetsArgs", "compartmentId");
            }
            return $;
        }
    }

}
