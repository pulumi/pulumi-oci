// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetDiscoveryAnalyticsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDiscoveryAnalyticsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDiscoveryAnalyticsPlainArgs Empty = new GetDiscoveryAnalyticsPlainArgs();

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetDiscoveryAnalyticsFilter> filters;

    public Optional<List<GetDiscoveryAnalyticsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Attribute by which the discovery analytics data should be grouped.
     * 
     */
    @Import(name="groupBy")
    private @Nullable String groupBy;

    /**
     * @return Attribute by which the discovery analytics data should be grouped.
     * 
     */
    public Optional<String> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }

    /**
     * A filter to return only the common sensitive type resources. Common sensitive types belong to  library sensitive types which are frequently used to perform sensitive data discovery.
     * 
     */
    @Import(name="isCommon")
    private @Nullable Boolean isCommon;

    /**
     * @return A filter to return only the common sensitive type resources. Common sensitive types belong to  library sensitive types which are frequently used to perform sensitive data discovery.
     * 
     */
    public Optional<Boolean> isCommon() {
        return Optional.ofNullable(this.isCommon);
    }

    /**
     * A filter to return only the resources that match the specified sensitive data model OCID.
     * 
     */
    @Import(name="sensitiveDataModelId")
    private @Nullable String sensitiveDataModelId;

    /**
     * @return A filter to return only the resources that match the specified sensitive data model OCID.
     * 
     */
    public Optional<String> sensitiveDataModelId() {
        return Optional.ofNullable(this.sensitiveDataModelId);
    }

    /**
     * An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
     * 
     */
    @Import(name="sensitiveTypeGroupId")
    private @Nullable String sensitiveTypeGroupId;

    /**
     * @return An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
     * 
     */
    public Optional<String> sensitiveTypeGroupId() {
        return Optional.ofNullable(this.sensitiveTypeGroupId);
    }

    /**
     * A filter to return only items related to a specific sensitive type OCID.
     * 
     */
    @Import(name="sensitiveTypeId")
    private @Nullable String sensitiveTypeId;

    /**
     * @return A filter to return only items related to a specific sensitive type OCID.
     * 
     */
    public Optional<String> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }

    /**
     * A filter to return the target database group that matches the specified OCID.
     * 
     */
    @Import(name="targetDatabaseGroupId")
    private @Nullable String targetDatabaseGroupId;

    /**
     * @return A filter to return the target database group that matches the specified OCID.
     * 
     */
    public Optional<String> targetDatabaseGroupId() {
        return Optional.ofNullable(this.targetDatabaseGroupId);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable String targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    private GetDiscoveryAnalyticsPlainArgs() {}

    private GetDiscoveryAnalyticsPlainArgs(GetDiscoveryAnalyticsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.groupBy = $.groupBy;
        this.isCommon = $.isCommon;
        this.sensitiveDataModelId = $.sensitiveDataModelId;
        this.sensitiveTypeGroupId = $.sensitiveTypeGroupId;
        this.sensitiveTypeId = $.sensitiveTypeId;
        this.targetDatabaseGroupId = $.targetDatabaseGroupId;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDiscoveryAnalyticsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDiscoveryAnalyticsPlainArgs $;

        public Builder() {
            $ = new GetDiscoveryAnalyticsPlainArgs();
        }

        public Builder(GetDiscoveryAnalyticsPlainArgs defaults) {
            $ = new GetDiscoveryAnalyticsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetDiscoveryAnalyticsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDiscoveryAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param groupBy Attribute by which the discovery analytics data should be grouped.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(@Nullable String groupBy) {
            $.groupBy = groupBy;
            return this;
        }

        /**
         * @param isCommon A filter to return only the common sensitive type resources. Common sensitive types belong to  library sensitive types which are frequently used to perform sensitive data discovery.
         * 
         * @return builder
         * 
         */
        public Builder isCommon(@Nullable Boolean isCommon) {
            $.isCommon = isCommon;
            return this;
        }

        /**
         * @param sensitiveDataModelId A filter to return only the resources that match the specified sensitive data model OCID.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(@Nullable String sensitiveDataModelId) {
            $.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }

        /**
         * @param sensitiveTypeGroupId An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeGroupId(@Nullable String sensitiveTypeGroupId) {
            $.sensitiveTypeGroupId = sensitiveTypeGroupId;
            return this;
        }

        /**
         * @param sensitiveTypeId A filter to return only items related to a specific sensitive type OCID.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeId(@Nullable String sensitiveTypeId) {
            $.sensitiveTypeId = sensitiveTypeId;
            return this;
        }

        /**
         * @param targetDatabaseGroupId A filter to return the target database group that matches the specified OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseGroupId(@Nullable String targetDatabaseGroupId) {
            $.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable String targetId) {
            $.targetId = targetId;
            return this;
        }

        public GetDiscoveryAnalyticsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDiscoveryAnalyticsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
