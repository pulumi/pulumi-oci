// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetMaskingReportMaskingErrorsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMaskingReportMaskingErrorsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMaskingReportMaskingErrorsArgs Empty = new GetMaskingReportMaskingErrorsArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetMaskingReportMaskingErrorsFilterArgs>> filters;

    public Optional<Output<List<GetMaskingReportMaskingErrorsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the masking report.
     * 
     */
    @Import(name="maskingReportId", required=true)
    private Output<String> maskingReportId;

    /**
     * @return The OCID of the masking report.
     * 
     */
    public Output<String> maskingReportId() {
        return this.maskingReportId;
    }

    /**
     * A filter to return only masking errors that match the specified step name.
     * 
     */
    @Import(name="stepName")
    private @Nullable Output<String> stepName;

    /**
     * @return A filter to return only masking errors that match the specified step name.
     * 
     */
    public Optional<Output<String>> stepName() {
        return Optional.ofNullable(this.stepName);
    }

    private GetMaskingReportMaskingErrorsArgs() {}

    private GetMaskingReportMaskingErrorsArgs(GetMaskingReportMaskingErrorsArgs $) {
        this.filters = $.filters;
        this.maskingReportId = $.maskingReportId;
        this.stepName = $.stepName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMaskingReportMaskingErrorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMaskingReportMaskingErrorsArgs $;

        public Builder() {
            $ = new GetMaskingReportMaskingErrorsArgs();
        }

        public Builder(GetMaskingReportMaskingErrorsArgs defaults) {
            $ = new GetMaskingReportMaskingErrorsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetMaskingReportMaskingErrorsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetMaskingReportMaskingErrorsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetMaskingReportMaskingErrorsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param maskingReportId The OCID of the masking report.
         * 
         * @return builder
         * 
         */
        public Builder maskingReportId(Output<String> maskingReportId) {
            $.maskingReportId = maskingReportId;
            return this;
        }

        /**
         * @param maskingReportId The OCID of the masking report.
         * 
         * @return builder
         * 
         */
        public Builder maskingReportId(String maskingReportId) {
            return maskingReportId(Output.of(maskingReportId));
        }

        /**
         * @param stepName A filter to return only masking errors that match the specified step name.
         * 
         * @return builder
         * 
         */
        public Builder stepName(@Nullable Output<String> stepName) {
            $.stepName = stepName;
            return this;
        }

        /**
         * @param stepName A filter to return only masking errors that match the specified step name.
         * 
         * @return builder
         * 
         */
        public Builder stepName(String stepName) {
            return stepName(Output.of(stepName));
        }

        public GetMaskingReportMaskingErrorsArgs build() {
            if ($.maskingReportId == null) {
                throw new MissingRequiredPropertyException("GetMaskingReportMaskingErrorsArgs", "maskingReportId");
            }
            return $;
        }
    }

}
