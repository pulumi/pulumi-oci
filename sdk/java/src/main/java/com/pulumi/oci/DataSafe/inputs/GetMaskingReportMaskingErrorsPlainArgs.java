// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetMaskingReportMaskingErrorsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMaskingReportMaskingErrorsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMaskingReportMaskingErrorsPlainArgs Empty = new GetMaskingReportMaskingErrorsPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetMaskingReportMaskingErrorsFilter> filters;

    public Optional<List<GetMaskingReportMaskingErrorsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the masking report.
     * 
     */
    @Import(name="maskingReportId", required=true)
    private String maskingReportId;

    /**
     * @return The OCID of the masking report.
     * 
     */
    public String maskingReportId() {
        return this.maskingReportId;
    }

    /**
     * A filter to return only masking errors that match the specified step name.
     * 
     */
    @Import(name="stepName")
    private @Nullable String stepName;

    /**
     * @return A filter to return only masking errors that match the specified step name.
     * 
     */
    public Optional<String> stepName() {
        return Optional.ofNullable(this.stepName);
    }

    private GetMaskingReportMaskingErrorsPlainArgs() {}

    private GetMaskingReportMaskingErrorsPlainArgs(GetMaskingReportMaskingErrorsPlainArgs $) {
        this.filters = $.filters;
        this.maskingReportId = $.maskingReportId;
        this.stepName = $.stepName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMaskingReportMaskingErrorsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMaskingReportMaskingErrorsPlainArgs $;

        public Builder() {
            $ = new GetMaskingReportMaskingErrorsPlainArgs();
        }

        public Builder(GetMaskingReportMaskingErrorsPlainArgs defaults) {
            $ = new GetMaskingReportMaskingErrorsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetMaskingReportMaskingErrorsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMaskingReportMaskingErrorsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param maskingReportId The OCID of the masking report.
         * 
         * @return builder
         * 
         */
        public Builder maskingReportId(String maskingReportId) {
            $.maskingReportId = maskingReportId;
            return this;
        }

        /**
         * @param stepName A filter to return only masking errors that match the specified step name.
         * 
         * @return builder
         * 
         */
        public Builder stepName(@Nullable String stepName) {
            $.stepName = stepName;
            return this;
        }

        public GetMaskingReportMaskingErrorsPlainArgs build() {
            if ($.maskingReportId == null) {
                throw new MissingRequiredPropertyException("GetMaskingReportMaskingErrorsPlainArgs", "maskingReportId");
            }
            return $;
        }
    }

}
