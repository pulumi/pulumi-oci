// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentChecksFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentChecksPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentChecksPlainArgs Empty = new GetSecurityAssessmentChecksPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
     * 
     */
    @Import(name="containsReferences")
    private @Nullable List<String> containsReferences;

    /**
     * @return An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
     * 
     */
    public Optional<List<String>> containsReferences() {
        return Optional.ofNullable(this.containsReferences);
    }

    /**
     * A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
     * 
     */
    @Import(name="containsSeverities")
    private @Nullable List<String> containsSeverities;

    /**
     * @return A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
     * 
     */
    public Optional<List<String>> containsSeverities() {
        return Optional.ofNullable(this.containsSeverities);
    }

    @Import(name="filters")
    private @Nullable List<GetSecurityAssessmentChecksFilter> filters;

    public Optional<List<GetSecurityAssessmentChecksFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Each check in security assessment has an associated key (think of key as a check&#39;s name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
     * 
     */
    @Import(name="key")
    private @Nullable String key;

    /**
     * @return Each check in security assessment has an associated key (think of key as a check&#39;s name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The OCID of the security assessment.
     * 
     */
    @Import(name="securityAssessmentId", required=true)
    private String securityAssessmentId;

    /**
     * @return The OCID of the security assessment.
     * 
     */
    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }

    /**
     * A filter to return only checks of a particular risk level.
     * 
     */
    @Import(name="suggestedSeverity")
    private @Nullable String suggestedSeverity;

    /**
     * @return A filter to return only checks of a particular risk level.
     * 
     */
    public Optional<String> suggestedSeverity() {
        return Optional.ofNullable(this.suggestedSeverity);
    }

    private GetSecurityAssessmentChecksPlainArgs() {}

    private GetSecurityAssessmentChecksPlainArgs(GetSecurityAssessmentChecksPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.containsReferences = $.containsReferences;
        this.containsSeverities = $.containsSeverities;
        this.filters = $.filters;
        this.key = $.key;
        this.securityAssessmentId = $.securityAssessmentId;
        this.suggestedSeverity = $.suggestedSeverity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentChecksPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentChecksPlainArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentChecksPlainArgs();
        }

        public Builder(GetSecurityAssessmentChecksPlainArgs defaults) {
            $ = new GetSecurityAssessmentChecksPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param containsReferences An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
         * 
         * @return builder
         * 
         */
        public Builder containsReferences(@Nullable List<String> containsReferences) {
            $.containsReferences = containsReferences;
            return this;
        }

        /**
         * @param containsReferences An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
         * 
         * @return builder
         * 
         */
        public Builder containsReferences(String... containsReferences) {
            return containsReferences(List.of(containsReferences));
        }

        /**
         * @param containsSeverities A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
         * 
         * @return builder
         * 
         */
        public Builder containsSeverities(@Nullable List<String> containsSeverities) {
            $.containsSeverities = containsSeverities;
            return this;
        }

        /**
         * @param containsSeverities A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
         * 
         * @return builder
         * 
         */
        public Builder containsSeverities(String... containsSeverities) {
            return containsSeverities(List.of(containsSeverities));
        }

        public Builder filters(@Nullable List<GetSecurityAssessmentChecksFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSecurityAssessmentChecksFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param key Each check in security assessment has an associated key (think of key as a check&#39;s name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable String key) {
            $.key = key;
            return this;
        }

        /**
         * @param securityAssessmentId The OCID of the security assessment.
         * 
         * @return builder
         * 
         */
        public Builder securityAssessmentId(String securityAssessmentId) {
            $.securityAssessmentId = securityAssessmentId;
            return this;
        }

        /**
         * @param suggestedSeverity A filter to return only checks of a particular risk level.
         * 
         * @return builder
         * 
         */
        public Builder suggestedSeverity(@Nullable String suggestedSeverity) {
            $.suggestedSeverity = suggestedSeverity;
            return this;
        }

        public GetSecurityAssessmentChecksPlainArgs build() {
            if ($.securityAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksPlainArgs", "securityAssessmentId");
            }
            return $;
        }
    }

}
