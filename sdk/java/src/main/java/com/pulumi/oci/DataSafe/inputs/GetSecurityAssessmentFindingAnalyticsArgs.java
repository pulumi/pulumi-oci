// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentFindingAnalyticsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentFindingAnalyticsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentFindingAnalyticsArgs Empty = new GetSecurityAssessmentFindingAnalyticsArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSecurityAssessmentFindingAnalyticsFilterArgs>> filters;

    public Optional<Output<List<GetSecurityAssessmentFindingAnalyticsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    @Import(name="findingKey")
    private @Nullable Output<String> findingKey;

    /**
     * @return The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    public Optional<Output<String>> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }

    /**
     * Attribute by which the finding analytics data should be grouped.
     * 
     */
    @Import(name="groupBy")
    private @Nullable Output<String> groupBy;

    /**
     * @return Attribute by which the finding analytics data should be grouped.
     * 
     */
    public Optional<Output<String>> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }

    /**
     * A filter to return only the findings that are marked as top findings.
     * 
     */
    @Import(name="isTopFinding")
    private @Nullable Output<Boolean> isTopFinding;

    /**
     * @return A filter to return only the findings that are marked as top findings.
     * 
     */
    public Optional<Output<Boolean>> isTopFinding() {
        return Optional.ofNullable(this.isTopFinding);
    }

    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * **Example:** | scimQuery=(severity eq &#39;high&#39;) and (targetId eq &#39;target_1&#39;) scimQuery=(category eq &#34;Users&#34;) and (targetId eq &#34;target_1&#34;) scimQuery=(reference eq &#39;CIS&#39;) and (targetId eq &#39;target_1&#39;)
     * Supported fields: severity reference title category targetId targetName
     * 
     */
    @Import(name="scimQuery")
    private @Nullable Output<String> scimQuery;

    /**
     * @return The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * **Example:** | scimQuery=(severity eq &#39;high&#39;) and (targetId eq &#39;target_1&#39;) scimQuery=(category eq &#34;Users&#34;) and (targetId eq &#34;target_1&#34;) scimQuery=(reference eq &#39;CIS&#39;) and (targetId eq &#39;target_1&#39;)
     * Supported fields: severity reference title category targetId targetName
     * 
     */
    public Optional<Output<String>> scimQuery() {
        return Optional.ofNullable(this.scimQuery);
    }

    /**
     * A filter to return only findings of a particular risk level.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return A filter to return only findings of a particular risk level.
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * An optional filter to return only the top finding that match the specified status.
     * 
     */
    @Import(name="topFindingStatus")
    private @Nullable Output<String> topFindingStatus;

    /**
     * @return An optional filter to return only the top finding that match the specified status.
     * 
     */
    public Optional<Output<String>> topFindingStatus() {
        return Optional.ofNullable(this.topFindingStatus);
    }

    private GetSecurityAssessmentFindingAnalyticsArgs() {}

    private GetSecurityAssessmentFindingAnalyticsArgs(GetSecurityAssessmentFindingAnalyticsArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.findingKey = $.findingKey;
        this.groupBy = $.groupBy;
        this.isTopFinding = $.isTopFinding;
        this.scimQuery = $.scimQuery;
        this.severity = $.severity;
        this.topFindingStatus = $.topFindingStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentFindingAnalyticsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentFindingAnalyticsArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentFindingAnalyticsArgs();
        }

        public Builder(GetSecurityAssessmentFindingAnalyticsArgs defaults) {
            $ = new GetSecurityAssessmentFindingAnalyticsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(@Nullable Output<List<GetSecurityAssessmentFindingAnalyticsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSecurityAssessmentFindingAnalyticsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSecurityAssessmentFindingAnalyticsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param findingKey The unique key that identifies the finding. It is a string and unique within a security assessment.
         * 
         * @return builder
         * 
         */
        public Builder findingKey(@Nullable Output<String> findingKey) {
            $.findingKey = findingKey;
            return this;
        }

        /**
         * @param findingKey The unique key that identifies the finding. It is a string and unique within a security assessment.
         * 
         * @return builder
         * 
         */
        public Builder findingKey(String findingKey) {
            return findingKey(Output.of(findingKey));
        }

        /**
         * @param groupBy Attribute by which the finding analytics data should be grouped.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(@Nullable Output<String> groupBy) {
            $.groupBy = groupBy;
            return this;
        }

        /**
         * @param groupBy Attribute by which the finding analytics data should be grouped.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(String groupBy) {
            return groupBy(Output.of(groupBy));
        }

        /**
         * @param isTopFinding A filter to return only the findings that are marked as top findings.
         * 
         * @return builder
         * 
         */
        public Builder isTopFinding(@Nullable Output<Boolean> isTopFinding) {
            $.isTopFinding = isTopFinding;
            return this;
        }

        /**
         * @param isTopFinding A filter to return only the findings that are marked as top findings.
         * 
         * @return builder
         * 
         */
        public Builder isTopFinding(Boolean isTopFinding) {
            return isTopFinding(Output.of(isTopFinding));
        }

        /**
         * @param scimQuery The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
         * **Example:** | scimQuery=(severity eq &#39;high&#39;) and (targetId eq &#39;target_1&#39;) scimQuery=(category eq &#34;Users&#34;) and (targetId eq &#34;target_1&#34;) scimQuery=(reference eq &#39;CIS&#39;) and (targetId eq &#39;target_1&#39;)
         * Supported fields: severity reference title category targetId targetName
         * 
         * @return builder
         * 
         */
        public Builder scimQuery(@Nullable Output<String> scimQuery) {
            $.scimQuery = scimQuery;
            return this;
        }

        /**
         * @param scimQuery The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
         * **Example:** | scimQuery=(severity eq &#39;high&#39;) and (targetId eq &#39;target_1&#39;) scimQuery=(category eq &#34;Users&#34;) and (targetId eq &#34;target_1&#34;) scimQuery=(reference eq &#39;CIS&#39;) and (targetId eq &#39;target_1&#39;)
         * Supported fields: severity reference title category targetId targetName
         * 
         * @return builder
         * 
         */
        public Builder scimQuery(String scimQuery) {
            return scimQuery(Output.of(scimQuery));
        }

        /**
         * @param severity A filter to return only findings of a particular risk level.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity A filter to return only findings of a particular risk level.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param topFindingStatus An optional filter to return only the top finding that match the specified status.
         * 
         * @return builder
         * 
         */
        public Builder topFindingStatus(@Nullable Output<String> topFindingStatus) {
            $.topFindingStatus = topFindingStatus;
            return this;
        }

        /**
         * @param topFindingStatus An optional filter to return only the top finding that match the specified status.
         * 
         * @return builder
         * 
         */
        public Builder topFindingStatus(String topFindingStatus) {
            return topFindingStatus(Output.of(topFindingStatus));
        }

        public GetSecurityAssessmentFindingAnalyticsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingAnalyticsArgs", "compartmentId");
            }
            return $;
        }
    }

}
