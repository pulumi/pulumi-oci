// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentFindingAnalyticsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentFindingAnalyticsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentFindingAnalyticsPlainArgs Empty = new GetSecurityAssessmentFindingAnalyticsPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetSecurityAssessmentFindingAnalyticsFilter> filters;

    public Optional<List<GetSecurityAssessmentFindingAnalyticsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    @Import(name="findingKey")
    private @Nullable String findingKey;

    /**
     * @return The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    public Optional<String> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }

    /**
     * Attribute by which the finding analytics data should be grouped.
     * 
     */
    @Import(name="groupBy")
    private @Nullable String groupBy;

    /**
     * @return Attribute by which the finding analytics data should be grouped.
     * 
     */
    public Optional<String> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }

    /**
     * A filter to return only the findings that are marked as top findings.
     * 
     */
    @Import(name="isTopFinding")
    private @Nullable Boolean isTopFinding;

    /**
     * @return A filter to return only the findings that are marked as top findings.
     * 
     */
    public Optional<Boolean> isTopFinding() {
        return Optional.ofNullable(this.isTopFinding);
    }

    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * **Example:** | scimQuery=(severity eq &#39;high&#39;) and (targetId eq &#39;target_1&#39;) scimQuery=(category eq &#34;Users&#34;) and (targetId eq &#34;target_1&#34;) scimQuery=(reference eq &#39;CIS&#39;) and (targetId eq &#39;target_1&#39;)
     * Supported fields: severity reference title category targetId targetName
     * 
     */
    @Import(name="scimQuery")
    private @Nullable String scimQuery;

    /**
     * @return The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     * **Example:** | scimQuery=(severity eq &#39;high&#39;) and (targetId eq &#39;target_1&#39;) scimQuery=(category eq &#34;Users&#34;) and (targetId eq &#34;target_1&#34;) scimQuery=(reference eq &#39;CIS&#39;) and (targetId eq &#39;target_1&#39;)
     * Supported fields: severity reference title category targetId targetName
     * 
     */
    public Optional<String> scimQuery() {
        return Optional.ofNullable(this.scimQuery);
    }

    /**
     * A filter to return only findings of a particular risk level.
     * 
     */
    @Import(name="severity")
    private @Nullable String severity;

    /**
     * @return A filter to return only findings of a particular risk level.
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * An optional filter to return only the top finding that match the specified status.
     * 
     */
    @Import(name="topFindingStatus")
    private @Nullable String topFindingStatus;

    /**
     * @return An optional filter to return only the top finding that match the specified status.
     * 
     */
    public Optional<String> topFindingStatus() {
        return Optional.ofNullable(this.topFindingStatus);
    }

    private GetSecurityAssessmentFindingAnalyticsPlainArgs() {}

    private GetSecurityAssessmentFindingAnalyticsPlainArgs(GetSecurityAssessmentFindingAnalyticsPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.findingKey = $.findingKey;
        this.groupBy = $.groupBy;
        this.isTopFinding = $.isTopFinding;
        this.scimQuery = $.scimQuery;
        this.severity = $.severity;
        this.topFindingStatus = $.topFindingStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentFindingAnalyticsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentFindingAnalyticsPlainArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentFindingAnalyticsPlainArgs();
        }

        public Builder(GetSecurityAssessmentFindingAnalyticsPlainArgs defaults) {
            $ = new GetSecurityAssessmentFindingAnalyticsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetSecurityAssessmentFindingAnalyticsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSecurityAssessmentFindingAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param findingKey The unique key that identifies the finding. It is a string and unique within a security assessment.
         * 
         * @return builder
         * 
         */
        public Builder findingKey(@Nullable String findingKey) {
            $.findingKey = findingKey;
            return this;
        }

        /**
         * @param groupBy Attribute by which the finding analytics data should be grouped.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(@Nullable String groupBy) {
            $.groupBy = groupBy;
            return this;
        }

        /**
         * @param isTopFinding A filter to return only the findings that are marked as top findings.
         * 
         * @return builder
         * 
         */
        public Builder isTopFinding(@Nullable Boolean isTopFinding) {
            $.isTopFinding = isTopFinding;
            return this;
        }

        /**
         * @param scimQuery The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
         * **Example:** | scimQuery=(severity eq &#39;high&#39;) and (targetId eq &#39;target_1&#39;) scimQuery=(category eq &#34;Users&#34;) and (targetId eq &#34;target_1&#34;) scimQuery=(reference eq &#39;CIS&#39;) and (targetId eq &#39;target_1&#39;)
         * Supported fields: severity reference title category targetId targetName
         * 
         * @return builder
         * 
         */
        public Builder scimQuery(@Nullable String scimQuery) {
            $.scimQuery = scimQuery;
            return this;
        }

        /**
         * @param severity A filter to return only findings of a particular risk level.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable String severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param topFindingStatus An optional filter to return only the top finding that match the specified status.
         * 
         * @return builder
         * 
         */
        public Builder topFindingStatus(@Nullable String topFindingStatus) {
            $.topFindingStatus = topFindingStatus;
            return this;
        }

        public GetSecurityAssessmentFindingAnalyticsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingAnalyticsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
