// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentFindingFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentFindingArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentFindingArgs Empty = new GetSecurityAssessmentFindingArgs();

    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSecurityAssessmentFindingFilterArgs>> filters;

    public Optional<Output<List<GetSecurityAssessmentFindingFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="findingKey")
    private @Nullable Output<String> findingKey;

    public Optional<Output<String>> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }

    @Import(name="isTopFinding")
    private @Nullable Output<Boolean> isTopFinding;

    public Optional<Output<Boolean>> isTopFinding() {
        return Optional.ofNullable(this.isTopFinding);
    }

    @Import(name="references")
    private @Nullable Output<String> references;

    public Optional<Output<String>> references() {
        return Optional.ofNullable(this.references);
    }

    @Import(name="scimQuery")
    private @Nullable Output<String> scimQuery;

    public Optional<Output<String>> scimQuery() {
        return Optional.ofNullable(this.scimQuery);
    }

    @Import(name="securityAssessmentId", required=true)
    private Output<String> securityAssessmentId;

    public Output<String> securityAssessmentId() {
        return this.securityAssessmentId;
    }

    @Import(name="severity")
    private @Nullable Output<String> severity;

    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    private GetSecurityAssessmentFindingArgs() {}

    private GetSecurityAssessmentFindingArgs(GetSecurityAssessmentFindingArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.fields = $.fields;
        this.filters = $.filters;
        this.findingKey = $.findingKey;
        this.isTopFinding = $.isTopFinding;
        this.references = $.references;
        this.scimQuery = $.scimQuery;
        this.securityAssessmentId = $.securityAssessmentId;
        this.severity = $.severity;
        this.state = $.state;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentFindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentFindingArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentFindingArgs();
        }

        public Builder(GetSecurityAssessmentFindingArgs defaults) {
            $ = new GetSecurityAssessmentFindingArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable Output<List<GetSecurityAssessmentFindingFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSecurityAssessmentFindingFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSecurityAssessmentFindingFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder findingKey(@Nullable Output<String> findingKey) {
            $.findingKey = findingKey;
            return this;
        }

        public Builder findingKey(String findingKey) {
            return findingKey(Output.of(findingKey));
        }

        public Builder isTopFinding(@Nullable Output<Boolean> isTopFinding) {
            $.isTopFinding = isTopFinding;
            return this;
        }

        public Builder isTopFinding(Boolean isTopFinding) {
            return isTopFinding(Output.of(isTopFinding));
        }

        public Builder references(@Nullable Output<String> references) {
            $.references = references;
            return this;
        }

        public Builder references(String references) {
            return references(Output.of(references));
        }

        public Builder scimQuery(@Nullable Output<String> scimQuery) {
            $.scimQuery = scimQuery;
            return this;
        }

        public Builder scimQuery(String scimQuery) {
            return scimQuery(Output.of(scimQuery));
        }

        public Builder securityAssessmentId(Output<String> securityAssessmentId) {
            $.securityAssessmentId = securityAssessmentId;
            return this;
        }

        public Builder securityAssessmentId(String securityAssessmentId) {
            return securityAssessmentId(Output.of(securityAssessmentId));
        }

        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        public GetSecurityAssessmentFindingArgs build() {
            if ($.securityAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingArgs", "securityAssessmentId");
            }
            return $;
        }
    }

}
