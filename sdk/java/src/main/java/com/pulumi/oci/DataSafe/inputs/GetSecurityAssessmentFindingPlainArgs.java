// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentFindingFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentFindingPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentFindingPlainArgs Empty = new GetSecurityAssessmentFindingPlainArgs();

    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    @Import(name="category")
    private @Nullable String category;

    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="containsReferences")
    private @Nullable List<String> containsReferences;

    public Optional<List<String>> containsReferences() {
        return Optional.ofNullable(this.containsReferences);
    }

    @Import(name="containsSeverities")
    private @Nullable List<String> containsSeverities;

    public Optional<List<String>> containsSeverities() {
        return Optional.ofNullable(this.containsSeverities);
    }

    @Import(name="fields")
    private @Nullable List<String> fields;

    public Optional<List<String>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filters")
    private @Nullable List<GetSecurityAssessmentFindingFilter> filters;

    public Optional<List<GetSecurityAssessmentFindingFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="findingKey")
    private @Nullable String findingKey;

    public Optional<String> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }

    @Import(name="isTopFinding")
    private @Nullable Boolean isTopFinding;

    public Optional<Boolean> isTopFinding() {
        return Optional.ofNullable(this.isTopFinding);
    }

    @Import(name="references")
    private @Nullable String references;

    public Optional<String> references() {
        return Optional.ofNullable(this.references);
    }

    @Import(name="scimQuery")
    private @Nullable String scimQuery;

    public Optional<String> scimQuery() {
        return Optional.ofNullable(this.scimQuery);
    }

    @Import(name="securityAssessmentId", required=true)
    private String securityAssessmentId;

    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }

    @Import(name="severity")
    private @Nullable String severity;

    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }

    @Import(name="state")
    private @Nullable String state;

    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="targetId")
    private @Nullable String targetId;

    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    @Import(name="targetIds")
    private @Nullable List<String> targetIds;

    public Optional<List<String>> targetIds() {
        return Optional.ofNullable(this.targetIds);
    }

    private GetSecurityAssessmentFindingPlainArgs() {}

    private GetSecurityAssessmentFindingPlainArgs(GetSecurityAssessmentFindingPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.category = $.category;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.containsReferences = $.containsReferences;
        this.containsSeverities = $.containsSeverities;
        this.fields = $.fields;
        this.filters = $.filters;
        this.findingKey = $.findingKey;
        this.isTopFinding = $.isTopFinding;
        this.references = $.references;
        this.scimQuery = $.scimQuery;
        this.securityAssessmentId = $.securityAssessmentId;
        this.severity = $.severity;
        this.state = $.state;
        this.targetId = $.targetId;
        this.targetIds = $.targetIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentFindingPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentFindingPlainArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentFindingPlainArgs();
        }

        public Builder(GetSecurityAssessmentFindingPlainArgs defaults) {
            $ = new GetSecurityAssessmentFindingPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        public Builder category(@Nullable String category) {
            $.category = category;
            return this;
        }

        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder containsReferences(@Nullable List<String> containsReferences) {
            $.containsReferences = containsReferences;
            return this;
        }

        public Builder containsReferences(String... containsReferences) {
            return containsReferences(List.of(containsReferences));
        }

        public Builder containsSeverities(@Nullable List<String> containsSeverities) {
            $.containsSeverities = containsSeverities;
            return this;
        }

        public Builder containsSeverities(String... containsSeverities) {
            return containsSeverities(List.of(containsSeverities));
        }

        public Builder fields(@Nullable List<String> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filters(@Nullable List<GetSecurityAssessmentFindingFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSecurityAssessmentFindingFilter... filters) {
            return filters(List.of(filters));
        }

        public Builder findingKey(@Nullable String findingKey) {
            $.findingKey = findingKey;
            return this;
        }

        public Builder isTopFinding(@Nullable Boolean isTopFinding) {
            $.isTopFinding = isTopFinding;
            return this;
        }

        public Builder references(@Nullable String references) {
            $.references = references;
            return this;
        }

        public Builder scimQuery(@Nullable String scimQuery) {
            $.scimQuery = scimQuery;
            return this;
        }

        public Builder securityAssessmentId(String securityAssessmentId) {
            $.securityAssessmentId = securityAssessmentId;
            return this;
        }

        public Builder severity(@Nullable String severity) {
            $.severity = severity;
            return this;
        }

        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public Builder targetId(@Nullable String targetId) {
            $.targetId = targetId;
            return this;
        }

        public Builder targetIds(@Nullable List<String> targetIds) {
            $.targetIds = targetIds;
            return this;
        }

        public Builder targetIds(String... targetIds) {
            return targetIds(List.of(targetIds));
        }

        public GetSecurityAssessmentFindingPlainArgs build() {
            if ($.securityAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingPlainArgs", "securityAssessmentId");
            }
            return $;
        }
    }

}
