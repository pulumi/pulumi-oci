// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentSecurityFeaturesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentSecurityFeaturesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentSecurityFeaturesArgs Empty = new GetSecurityAssessmentSecurityFeaturesArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSecurityAssessmentSecurityFeaturesFilterArgs>> filters;

    public Optional<Output<List<GetSecurityAssessmentSecurityFeaturesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
     * 
     */
    @Import(name="targetsWithColumnEncryption")
    private @Nullable Output<String> targetsWithColumnEncryption;

    /**
     * @return A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithColumnEncryption() {
        return Optional.ofNullable(this.targetsWithColumnEncryption);
    }

    /**
     * A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
     * 
     */
    @Import(name="targetsWithDatabaseVault")
    private @Nullable Output<String> targetsWithDatabaseVault;

    /**
     * @return A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithDatabaseVault() {
        return Optional.ofNullable(this.targetsWithDatabaseVault);
    }

    /**
     * A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
     * 
     */
    @Import(name="targetsWithExternalAuthentication")
    private @Nullable Output<String> targetsWithExternalAuthentication;

    /**
     * @return A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithExternalAuthentication() {
        return Optional.ofNullable(this.targetsWithExternalAuthentication);
    }

    /**
     * A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
     * 
     */
    @Import(name="targetsWithFineGrainedAudit")
    private @Nullable Output<String> targetsWithFineGrainedAudit;

    /**
     * @return A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithFineGrainedAudit() {
        return Optional.ofNullable(this.targetsWithFineGrainedAudit);
    }

    /**
     * A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
     * 
     */
    @Import(name="targetsWithGlobalAuthentication")
    private @Nullable Output<String> targetsWithGlobalAuthentication;

    /**
     * @return A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithGlobalAuthentication() {
        return Optional.ofNullable(this.targetsWithGlobalAuthentication);
    }

    /**
     * A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
     * 
     */
    @Import(name="targetsWithNetworkEncryption")
    private @Nullable Output<String> targetsWithNetworkEncryption;

    /**
     * @return A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithNetworkEncryption() {
        return Optional.ofNullable(this.targetsWithNetworkEncryption);
    }

    /**
     * A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
     * 
     */
    @Import(name="targetsWithPasswordAuthentication")
    private @Nullable Output<String> targetsWithPasswordAuthentication;

    /**
     * @return A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithPasswordAuthentication() {
        return Optional.ofNullable(this.targetsWithPasswordAuthentication);
    }

    /**
     * A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
     * 
     */
    @Import(name="targetsWithPrivilegeAnalysis")
    private @Nullable Output<String> targetsWithPrivilegeAnalysis;

    /**
     * @return A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithPrivilegeAnalysis() {
        return Optional.ofNullable(this.targetsWithPrivilegeAnalysis);
    }

    /**
     * A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
     * 
     */
    @Import(name="targetsWithTablespaceEncryption")
    private @Nullable Output<String> targetsWithTablespaceEncryption;

    /**
     * @return A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithTablespaceEncryption() {
        return Optional.ofNullable(this.targetsWithTablespaceEncryption);
    }

    /**
     * A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
     * 
     */
    @Import(name="targetsWithTraditionalAudit")
    private @Nullable Output<String> targetsWithTraditionalAudit;

    /**
     * @return A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithTraditionalAudit() {
        return Optional.ofNullable(this.targetsWithTraditionalAudit);
    }

    /**
     * A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
     * 
     */
    @Import(name="targetsWithUnifiedAudit")
    private @Nullable Output<String> targetsWithUnifiedAudit;

    /**
     * @return A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
     * 
     */
    public Optional<Output<String>> targetsWithUnifiedAudit() {
        return Optional.ofNullable(this.targetsWithUnifiedAudit);
    }

    private GetSecurityAssessmentSecurityFeaturesArgs() {}

    private GetSecurityAssessmentSecurityFeaturesArgs(GetSecurityAssessmentSecurityFeaturesArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.targetId = $.targetId;
        this.targetsWithColumnEncryption = $.targetsWithColumnEncryption;
        this.targetsWithDatabaseVault = $.targetsWithDatabaseVault;
        this.targetsWithExternalAuthentication = $.targetsWithExternalAuthentication;
        this.targetsWithFineGrainedAudit = $.targetsWithFineGrainedAudit;
        this.targetsWithGlobalAuthentication = $.targetsWithGlobalAuthentication;
        this.targetsWithNetworkEncryption = $.targetsWithNetworkEncryption;
        this.targetsWithPasswordAuthentication = $.targetsWithPasswordAuthentication;
        this.targetsWithPrivilegeAnalysis = $.targetsWithPrivilegeAnalysis;
        this.targetsWithTablespaceEncryption = $.targetsWithTablespaceEncryption;
        this.targetsWithTraditionalAudit = $.targetsWithTraditionalAudit;
        this.targetsWithUnifiedAudit = $.targetsWithUnifiedAudit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentSecurityFeaturesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentSecurityFeaturesArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentSecurityFeaturesArgs();
        }

        public Builder(GetSecurityAssessmentSecurityFeaturesArgs defaults) {
            $ = new GetSecurityAssessmentSecurityFeaturesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(@Nullable Output<List<GetSecurityAssessmentSecurityFeaturesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSecurityAssessmentSecurityFeaturesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSecurityAssessmentSecurityFeaturesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param targetsWithColumnEncryption A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithColumnEncryption(@Nullable Output<String> targetsWithColumnEncryption) {
            $.targetsWithColumnEncryption = targetsWithColumnEncryption;
            return this;
        }

        /**
         * @param targetsWithColumnEncryption A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithColumnEncryption(String targetsWithColumnEncryption) {
            return targetsWithColumnEncryption(Output.of(targetsWithColumnEncryption));
        }

        /**
         * @param targetsWithDatabaseVault A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithDatabaseVault(@Nullable Output<String> targetsWithDatabaseVault) {
            $.targetsWithDatabaseVault = targetsWithDatabaseVault;
            return this;
        }

        /**
         * @param targetsWithDatabaseVault A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithDatabaseVault(String targetsWithDatabaseVault) {
            return targetsWithDatabaseVault(Output.of(targetsWithDatabaseVault));
        }

        /**
         * @param targetsWithExternalAuthentication A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithExternalAuthentication(@Nullable Output<String> targetsWithExternalAuthentication) {
            $.targetsWithExternalAuthentication = targetsWithExternalAuthentication;
            return this;
        }

        /**
         * @param targetsWithExternalAuthentication A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithExternalAuthentication(String targetsWithExternalAuthentication) {
            return targetsWithExternalAuthentication(Output.of(targetsWithExternalAuthentication));
        }

        /**
         * @param targetsWithFineGrainedAudit A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithFineGrainedAudit(@Nullable Output<String> targetsWithFineGrainedAudit) {
            $.targetsWithFineGrainedAudit = targetsWithFineGrainedAudit;
            return this;
        }

        /**
         * @param targetsWithFineGrainedAudit A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithFineGrainedAudit(String targetsWithFineGrainedAudit) {
            return targetsWithFineGrainedAudit(Output.of(targetsWithFineGrainedAudit));
        }

        /**
         * @param targetsWithGlobalAuthentication A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithGlobalAuthentication(@Nullable Output<String> targetsWithGlobalAuthentication) {
            $.targetsWithGlobalAuthentication = targetsWithGlobalAuthentication;
            return this;
        }

        /**
         * @param targetsWithGlobalAuthentication A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithGlobalAuthentication(String targetsWithGlobalAuthentication) {
            return targetsWithGlobalAuthentication(Output.of(targetsWithGlobalAuthentication));
        }

        /**
         * @param targetsWithNetworkEncryption A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithNetworkEncryption(@Nullable Output<String> targetsWithNetworkEncryption) {
            $.targetsWithNetworkEncryption = targetsWithNetworkEncryption;
            return this;
        }

        /**
         * @param targetsWithNetworkEncryption A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithNetworkEncryption(String targetsWithNetworkEncryption) {
            return targetsWithNetworkEncryption(Output.of(targetsWithNetworkEncryption));
        }

        /**
         * @param targetsWithPasswordAuthentication A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithPasswordAuthentication(@Nullable Output<String> targetsWithPasswordAuthentication) {
            $.targetsWithPasswordAuthentication = targetsWithPasswordAuthentication;
            return this;
        }

        /**
         * @param targetsWithPasswordAuthentication A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithPasswordAuthentication(String targetsWithPasswordAuthentication) {
            return targetsWithPasswordAuthentication(Output.of(targetsWithPasswordAuthentication));
        }

        /**
         * @param targetsWithPrivilegeAnalysis A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithPrivilegeAnalysis(@Nullable Output<String> targetsWithPrivilegeAnalysis) {
            $.targetsWithPrivilegeAnalysis = targetsWithPrivilegeAnalysis;
            return this;
        }

        /**
         * @param targetsWithPrivilegeAnalysis A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithPrivilegeAnalysis(String targetsWithPrivilegeAnalysis) {
            return targetsWithPrivilegeAnalysis(Output.of(targetsWithPrivilegeAnalysis));
        }

        /**
         * @param targetsWithTablespaceEncryption A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithTablespaceEncryption(@Nullable Output<String> targetsWithTablespaceEncryption) {
            $.targetsWithTablespaceEncryption = targetsWithTablespaceEncryption;
            return this;
        }

        /**
         * @param targetsWithTablespaceEncryption A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithTablespaceEncryption(String targetsWithTablespaceEncryption) {
            return targetsWithTablespaceEncryption(Output.of(targetsWithTablespaceEncryption));
        }

        /**
         * @param targetsWithTraditionalAudit A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithTraditionalAudit(@Nullable Output<String> targetsWithTraditionalAudit) {
            $.targetsWithTraditionalAudit = targetsWithTraditionalAudit;
            return this;
        }

        /**
         * @param targetsWithTraditionalAudit A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithTraditionalAudit(String targetsWithTraditionalAudit) {
            return targetsWithTraditionalAudit(Output.of(targetsWithTraditionalAudit));
        }

        /**
         * @param targetsWithUnifiedAudit A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithUnifiedAudit(@Nullable Output<String> targetsWithUnifiedAudit) {
            $.targetsWithUnifiedAudit = targetsWithUnifiedAudit;
            return this;
        }

        /**
         * @param targetsWithUnifiedAudit A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithUnifiedAudit(String targetsWithUnifiedAudit) {
            return targetsWithUnifiedAudit(Output.of(targetsWithUnifiedAudit));
        }

        public GetSecurityAssessmentSecurityFeaturesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesArgs", "compartmentId");
            }
            return $;
        }
    }

}
