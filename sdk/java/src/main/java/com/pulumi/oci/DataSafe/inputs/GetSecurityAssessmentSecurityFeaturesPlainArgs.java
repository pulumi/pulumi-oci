// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentSecurityFeaturesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentSecurityFeaturesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentSecurityFeaturesPlainArgs Empty = new GetSecurityAssessmentSecurityFeaturesPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetSecurityAssessmentSecurityFeaturesFilter> filters;

    public Optional<List<GetSecurityAssessmentSecurityFeaturesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable String targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
     * 
     */
    @Import(name="targetsWithColumnEncryption")
    private @Nullable String targetsWithColumnEncryption;

    /**
     * @return A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
     * 
     */
    public Optional<String> targetsWithColumnEncryption() {
        return Optional.ofNullable(this.targetsWithColumnEncryption);
    }

    /**
     * A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
     * 
     */
    @Import(name="targetsWithDatabaseVault")
    private @Nullable String targetsWithDatabaseVault;

    /**
     * @return A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
     * 
     */
    public Optional<String> targetsWithDatabaseVault() {
        return Optional.ofNullable(this.targetsWithDatabaseVault);
    }

    /**
     * A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
     * 
     */
    @Import(name="targetsWithExternalAuthentication")
    private @Nullable String targetsWithExternalAuthentication;

    /**
     * @return A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
     * 
     */
    public Optional<String> targetsWithExternalAuthentication() {
        return Optional.ofNullable(this.targetsWithExternalAuthentication);
    }

    /**
     * A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
     * 
     */
    @Import(name="targetsWithFineGrainedAudit")
    private @Nullable String targetsWithFineGrainedAudit;

    /**
     * @return A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
     * 
     */
    public Optional<String> targetsWithFineGrainedAudit() {
        return Optional.ofNullable(this.targetsWithFineGrainedAudit);
    }

    /**
     * A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
     * 
     */
    @Import(name="targetsWithGlobalAuthentication")
    private @Nullable String targetsWithGlobalAuthentication;

    /**
     * @return A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
     * 
     */
    public Optional<String> targetsWithGlobalAuthentication() {
        return Optional.ofNullable(this.targetsWithGlobalAuthentication);
    }

    /**
     * A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
     * 
     */
    @Import(name="targetsWithNetworkEncryption")
    private @Nullable String targetsWithNetworkEncryption;

    /**
     * @return A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
     * 
     */
    public Optional<String> targetsWithNetworkEncryption() {
        return Optional.ofNullable(this.targetsWithNetworkEncryption);
    }

    /**
     * A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
     * 
     */
    @Import(name="targetsWithPasswordAuthentication")
    private @Nullable String targetsWithPasswordAuthentication;

    /**
     * @return A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
     * 
     */
    public Optional<String> targetsWithPasswordAuthentication() {
        return Optional.ofNullable(this.targetsWithPasswordAuthentication);
    }

    /**
     * A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
     * 
     */
    @Import(name="targetsWithPrivilegeAnalysis")
    private @Nullable String targetsWithPrivilegeAnalysis;

    /**
     * @return A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
     * 
     */
    public Optional<String> targetsWithPrivilegeAnalysis() {
        return Optional.ofNullable(this.targetsWithPrivilegeAnalysis);
    }

    /**
     * A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
     * 
     */
    @Import(name="targetsWithTablespaceEncryption")
    private @Nullable String targetsWithTablespaceEncryption;

    /**
     * @return A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
     * 
     */
    public Optional<String> targetsWithTablespaceEncryption() {
        return Optional.ofNullable(this.targetsWithTablespaceEncryption);
    }

    /**
     * A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
     * 
     */
    @Import(name="targetsWithTraditionalAudit")
    private @Nullable String targetsWithTraditionalAudit;

    /**
     * @return A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
     * 
     */
    public Optional<String> targetsWithTraditionalAudit() {
        return Optional.ofNullable(this.targetsWithTraditionalAudit);
    }

    /**
     * A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
     * 
     */
    @Import(name="targetsWithUnifiedAudit")
    private @Nullable String targetsWithUnifiedAudit;

    /**
     * @return A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
     * 
     */
    public Optional<String> targetsWithUnifiedAudit() {
        return Optional.ofNullable(this.targetsWithUnifiedAudit);
    }

    private GetSecurityAssessmentSecurityFeaturesPlainArgs() {}

    private GetSecurityAssessmentSecurityFeaturesPlainArgs(GetSecurityAssessmentSecurityFeaturesPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.targetId = $.targetId;
        this.targetsWithColumnEncryption = $.targetsWithColumnEncryption;
        this.targetsWithDatabaseVault = $.targetsWithDatabaseVault;
        this.targetsWithExternalAuthentication = $.targetsWithExternalAuthentication;
        this.targetsWithFineGrainedAudit = $.targetsWithFineGrainedAudit;
        this.targetsWithGlobalAuthentication = $.targetsWithGlobalAuthentication;
        this.targetsWithNetworkEncryption = $.targetsWithNetworkEncryption;
        this.targetsWithPasswordAuthentication = $.targetsWithPasswordAuthentication;
        this.targetsWithPrivilegeAnalysis = $.targetsWithPrivilegeAnalysis;
        this.targetsWithTablespaceEncryption = $.targetsWithTablespaceEncryption;
        this.targetsWithTraditionalAudit = $.targetsWithTraditionalAudit;
        this.targetsWithUnifiedAudit = $.targetsWithUnifiedAudit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentSecurityFeaturesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentSecurityFeaturesPlainArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentSecurityFeaturesPlainArgs();
        }

        public Builder(GetSecurityAssessmentSecurityFeaturesPlainArgs defaults) {
            $ = new GetSecurityAssessmentSecurityFeaturesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetSecurityAssessmentSecurityFeaturesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSecurityAssessmentSecurityFeaturesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable String targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetsWithColumnEncryption A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithColumnEncryption(@Nullable String targetsWithColumnEncryption) {
            $.targetsWithColumnEncryption = targetsWithColumnEncryption;
            return this;
        }

        /**
         * @param targetsWithDatabaseVault A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithDatabaseVault(@Nullable String targetsWithDatabaseVault) {
            $.targetsWithDatabaseVault = targetsWithDatabaseVault;
            return this;
        }

        /**
         * @param targetsWithExternalAuthentication A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithExternalAuthentication(@Nullable String targetsWithExternalAuthentication) {
            $.targetsWithExternalAuthentication = targetsWithExternalAuthentication;
            return this;
        }

        /**
         * @param targetsWithFineGrainedAudit A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithFineGrainedAudit(@Nullable String targetsWithFineGrainedAudit) {
            $.targetsWithFineGrainedAudit = targetsWithFineGrainedAudit;
            return this;
        }

        /**
         * @param targetsWithGlobalAuthentication A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithGlobalAuthentication(@Nullable String targetsWithGlobalAuthentication) {
            $.targetsWithGlobalAuthentication = targetsWithGlobalAuthentication;
            return this;
        }

        /**
         * @param targetsWithNetworkEncryption A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithNetworkEncryption(@Nullable String targetsWithNetworkEncryption) {
            $.targetsWithNetworkEncryption = targetsWithNetworkEncryption;
            return this;
        }

        /**
         * @param targetsWithPasswordAuthentication A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithPasswordAuthentication(@Nullable String targetsWithPasswordAuthentication) {
            $.targetsWithPasswordAuthentication = targetsWithPasswordAuthentication;
            return this;
        }

        /**
         * @param targetsWithPrivilegeAnalysis A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithPrivilegeAnalysis(@Nullable String targetsWithPrivilegeAnalysis) {
            $.targetsWithPrivilegeAnalysis = targetsWithPrivilegeAnalysis;
            return this;
        }

        /**
         * @param targetsWithTablespaceEncryption A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithTablespaceEncryption(@Nullable String targetsWithTablespaceEncryption) {
            $.targetsWithTablespaceEncryption = targetsWithTablespaceEncryption;
            return this;
        }

        /**
         * @param targetsWithTraditionalAudit A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithTraditionalAudit(@Nullable String targetsWithTraditionalAudit) {
            $.targetsWithTraditionalAudit = targetsWithTraditionalAudit;
            return this;
        }

        /**
         * @param targetsWithUnifiedAudit A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
         * 
         * @return builder
         * 
         */
        public Builder targetsWithUnifiedAudit(@Nullable String targetsWithUnifiedAudit) {
            $.targetsWithUnifiedAudit = targetsWithUnifiedAudit;
            return this;
        }

        public GetSecurityAssessmentSecurityFeaturesPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
