// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentTemplateAnalyticsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentTemplateAnalyticsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentTemplateAnalyticsArgs Empty = new GetSecurityAssessmentTemplateAnalyticsArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSecurityAssessmentTemplateAnalyticsFilterArgs>> filters;

    public Optional<Output<List<GetSecurityAssessmentTemplateAnalyticsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
     * 
     */
    @Import(name="isCompared")
    private @Nullable Output<Boolean> isCompared;

    /**
     * @return A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
     * 
     */
    public Optional<Output<Boolean>> isCompared() {
        return Optional.ofNullable(this.isCompared);
    }

    /**
     * A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
     * 
     */
    @Import(name="isCompliant")
    private @Nullable Output<Boolean> isCompliant;

    /**
     * @return A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
     * 
     */
    public Optional<Output<Boolean>> isCompliant() {
        return Optional.ofNullable(this.isCompliant);
    }

    /**
     * A filter to return only the target group related information if the OCID belongs to a target group.
     * 
     */
    @Import(name="isGroup")
    private @Nullable Output<Boolean> isGroup;

    /**
     * @return A filter to return only the target group related information if the OCID belongs to a target group.
     * 
     */
    public Optional<Output<Boolean>> isGroup() {
        return Optional.ofNullable(this.isGroup);
    }

    /**
     * A filter to return the target database group that matches the specified OCID.
     * 
     */
    @Import(name="targetDatabaseGroupId")
    private @Nullable Output<String> targetDatabaseGroupId;

    /**
     * @return A filter to return the target database group that matches the specified OCID.
     * 
     */
    public Optional<Output<String>> targetDatabaseGroupId() {
        return Optional.ofNullable(this.targetDatabaseGroupId);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The OCID of the security assessment of type TEMPLATE.
     * 
     */
    @Import(name="templateAssessmentId")
    private @Nullable Output<String> templateAssessmentId;

    /**
     * @return The OCID of the security assessment of type TEMPLATE.
     * 
     */
    public Optional<Output<String>> templateAssessmentId() {
        return Optional.ofNullable(this.templateAssessmentId);
    }

    /**
     * The OCID of the security assessment of type TEMPLATE_BASELINE.
     * 
     */
    @Import(name="templateBaselineAssessmentId")
    private @Nullable Output<String> templateBaselineAssessmentId;

    /**
     * @return The OCID of the security assessment of type TEMPLATE_BASELINE.
     * 
     */
    public Optional<Output<String>> templateBaselineAssessmentId() {
        return Optional.ofNullable(this.templateBaselineAssessmentId);
    }

    private GetSecurityAssessmentTemplateAnalyticsArgs() {}

    private GetSecurityAssessmentTemplateAnalyticsArgs(GetSecurityAssessmentTemplateAnalyticsArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.isCompared = $.isCompared;
        this.isCompliant = $.isCompliant;
        this.isGroup = $.isGroup;
        this.targetDatabaseGroupId = $.targetDatabaseGroupId;
        this.targetId = $.targetId;
        this.templateAssessmentId = $.templateAssessmentId;
        this.templateBaselineAssessmentId = $.templateBaselineAssessmentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentTemplateAnalyticsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentTemplateAnalyticsArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentTemplateAnalyticsArgs();
        }

        public Builder(GetSecurityAssessmentTemplateAnalyticsArgs defaults) {
            $ = new GetSecurityAssessmentTemplateAnalyticsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(@Nullable Output<List<GetSecurityAssessmentTemplateAnalyticsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSecurityAssessmentTemplateAnalyticsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSecurityAssessmentTemplateAnalyticsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isCompared A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
         * 
         * @return builder
         * 
         */
        public Builder isCompared(@Nullable Output<Boolean> isCompared) {
            $.isCompared = isCompared;
            return this;
        }

        /**
         * @param isCompared A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
         * 
         * @return builder
         * 
         */
        public Builder isCompared(Boolean isCompared) {
            return isCompared(Output.of(isCompared));
        }

        /**
         * @param isCompliant A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
         * 
         * @return builder
         * 
         */
        public Builder isCompliant(@Nullable Output<Boolean> isCompliant) {
            $.isCompliant = isCompliant;
            return this;
        }

        /**
         * @param isCompliant A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
         * 
         * @return builder
         * 
         */
        public Builder isCompliant(Boolean isCompliant) {
            return isCompliant(Output.of(isCompliant));
        }

        /**
         * @param isGroup A filter to return only the target group related information if the OCID belongs to a target group.
         * 
         * @return builder
         * 
         */
        public Builder isGroup(@Nullable Output<Boolean> isGroup) {
            $.isGroup = isGroup;
            return this;
        }

        /**
         * @param isGroup A filter to return only the target group related information if the OCID belongs to a target group.
         * 
         * @return builder
         * 
         */
        public Builder isGroup(Boolean isGroup) {
            return isGroup(Output.of(isGroup));
        }

        /**
         * @param targetDatabaseGroupId A filter to return the target database group that matches the specified OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseGroupId(@Nullable Output<String> targetDatabaseGroupId) {
            $.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }

        /**
         * @param targetDatabaseGroupId A filter to return the target database group that matches the specified OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseGroupId(String targetDatabaseGroupId) {
            return targetDatabaseGroupId(Output.of(targetDatabaseGroupId));
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param templateAssessmentId The OCID of the security assessment of type TEMPLATE.
         * 
         * @return builder
         * 
         */
        public Builder templateAssessmentId(@Nullable Output<String> templateAssessmentId) {
            $.templateAssessmentId = templateAssessmentId;
            return this;
        }

        /**
         * @param templateAssessmentId The OCID of the security assessment of type TEMPLATE.
         * 
         * @return builder
         * 
         */
        public Builder templateAssessmentId(String templateAssessmentId) {
            return templateAssessmentId(Output.of(templateAssessmentId));
        }

        /**
         * @param templateBaselineAssessmentId The OCID of the security assessment of type TEMPLATE_BASELINE.
         * 
         * @return builder
         * 
         */
        public Builder templateBaselineAssessmentId(@Nullable Output<String> templateBaselineAssessmentId) {
            $.templateBaselineAssessmentId = templateBaselineAssessmentId;
            return this;
        }

        /**
         * @param templateBaselineAssessmentId The OCID of the security assessment of type TEMPLATE_BASELINE.
         * 
         * @return builder
         * 
         */
        public Builder templateBaselineAssessmentId(String templateBaselineAssessmentId) {
            return templateBaselineAssessmentId(Output.of(templateBaselineAssessmentId));
        }

        public GetSecurityAssessmentTemplateAnalyticsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsArgs", "compartmentId");
            }
            return $;
        }
    }

}
