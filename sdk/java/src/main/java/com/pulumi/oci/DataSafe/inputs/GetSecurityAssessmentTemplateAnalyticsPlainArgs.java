// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSecurityAssessmentTemplateAnalyticsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentTemplateAnalyticsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentTemplateAnalyticsPlainArgs Empty = new GetSecurityAssessmentTemplateAnalyticsPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetSecurityAssessmentTemplateAnalyticsFilter> filters;

    public Optional<List<GetSecurityAssessmentTemplateAnalyticsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
     * 
     */
    @Import(name="isCompared")
    private @Nullable Boolean isCompared;

    /**
     * @return A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
     * 
     */
    public Optional<Boolean> isCompared() {
        return Optional.ofNullable(this.isCompared);
    }

    /**
     * A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
     * 
     */
    @Import(name="isCompliant")
    private @Nullable Boolean isCompliant;

    /**
     * @return A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
     * 
     */
    public Optional<Boolean> isCompliant() {
        return Optional.ofNullable(this.isCompliant);
    }

    /**
     * A filter to return only the target group related information if the OCID belongs to a target group.
     * 
     */
    @Import(name="isGroup")
    private @Nullable Boolean isGroup;

    /**
     * @return A filter to return only the target group related information if the OCID belongs to a target group.
     * 
     */
    public Optional<Boolean> isGroup() {
        return Optional.ofNullable(this.isGroup);
    }

    /**
     * A filter to return the target database group that matches the specified OCID.
     * 
     */
    @Import(name="targetDatabaseGroupId")
    private @Nullable String targetDatabaseGroupId;

    /**
     * @return A filter to return the target database group that matches the specified OCID.
     * 
     */
    public Optional<String> targetDatabaseGroupId() {
        return Optional.ofNullable(this.targetDatabaseGroupId);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable String targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The OCID of the security assessment of type TEMPLATE.
     * 
     */
    @Import(name="templateAssessmentId")
    private @Nullable String templateAssessmentId;

    /**
     * @return The OCID of the security assessment of type TEMPLATE.
     * 
     */
    public Optional<String> templateAssessmentId() {
        return Optional.ofNullable(this.templateAssessmentId);
    }

    /**
     * The OCID of the security assessment of type TEMPLATE_BASELINE.
     * 
     */
    @Import(name="templateBaselineAssessmentId")
    private @Nullable String templateBaselineAssessmentId;

    /**
     * @return The OCID of the security assessment of type TEMPLATE_BASELINE.
     * 
     */
    public Optional<String> templateBaselineAssessmentId() {
        return Optional.ofNullable(this.templateBaselineAssessmentId);
    }

    private GetSecurityAssessmentTemplateAnalyticsPlainArgs() {}

    private GetSecurityAssessmentTemplateAnalyticsPlainArgs(GetSecurityAssessmentTemplateAnalyticsPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.isCompared = $.isCompared;
        this.isCompliant = $.isCompliant;
        this.isGroup = $.isGroup;
        this.targetDatabaseGroupId = $.targetDatabaseGroupId;
        this.targetId = $.targetId;
        this.templateAssessmentId = $.templateAssessmentId;
        this.templateBaselineAssessmentId = $.templateBaselineAssessmentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentTemplateAnalyticsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentTemplateAnalyticsPlainArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentTemplateAnalyticsPlainArgs();
        }

        public Builder(GetSecurityAssessmentTemplateAnalyticsPlainArgs defaults) {
            $ = new GetSecurityAssessmentTemplateAnalyticsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetSecurityAssessmentTemplateAnalyticsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSecurityAssessmentTemplateAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isCompared A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
         * 
         * @return builder
         * 
         */
        public Builder isCompared(@Nullable Boolean isCompared) {
            $.isCompared = isCompared;
            return this;
        }

        /**
         * @param isCompliant A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
         * 
         * @return builder
         * 
         */
        public Builder isCompliant(@Nullable Boolean isCompliant) {
            $.isCompliant = isCompliant;
            return this;
        }

        /**
         * @param isGroup A filter to return only the target group related information if the OCID belongs to a target group.
         * 
         * @return builder
         * 
         */
        public Builder isGroup(@Nullable Boolean isGroup) {
            $.isGroup = isGroup;
            return this;
        }

        /**
         * @param targetDatabaseGroupId A filter to return the target database group that matches the specified OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseGroupId(@Nullable String targetDatabaseGroupId) {
            $.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable String targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param templateAssessmentId The OCID of the security assessment of type TEMPLATE.
         * 
         * @return builder
         * 
         */
        public Builder templateAssessmentId(@Nullable String templateAssessmentId) {
            $.templateAssessmentId = templateAssessmentId;
            return this;
        }

        /**
         * @param templateBaselineAssessmentId The OCID of the security assessment of type TEMPLATE_BASELINE.
         * 
         * @return builder
         * 
         */
        public Builder templateBaselineAssessmentId(@Nullable String templateBaselineAssessmentId) {
            $.templateBaselineAssessmentId = templateBaselineAssessmentId;
            return this;
        }

        public GetSecurityAssessmentTemplateAnalyticsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
