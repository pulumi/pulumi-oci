// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityAssessmentTemplateBaselineComparisonPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityAssessmentTemplateBaselineComparisonPlainArgs Empty = new GetSecurityAssessmentTemplateBaselineComparisonPlainArgs();

    /**
     * The category of the finding.
     * 
     */
    @Import(name="category")
    private @Nullable String category;

    /**
     * @return The category of the finding.
     * 
     */
    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The OCID of the security assessment baseline.
     * 
     */
    @Import(name="comparisonSecurityAssessmentId", required=true)
    private String comparisonSecurityAssessmentId;

    /**
     * @return The OCID of the security assessment baseline.
     * 
     */
    public String comparisonSecurityAssessmentId() {
        return this.comparisonSecurityAssessmentId;
    }

    /**
     * The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    @Import(name="findingKey")
    private @Nullable String findingKey;

    /**
     * @return The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    public Optional<String> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }

    /**
     * The OCID of the security assessment.
     * 
     */
    @Import(name="securityAssessmentId", required=true)
    private String securityAssessmentId;

    /**
     * @return The OCID of the security assessment.
     * 
     */
    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable String targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    private GetSecurityAssessmentTemplateBaselineComparisonPlainArgs() {}

    private GetSecurityAssessmentTemplateBaselineComparisonPlainArgs(GetSecurityAssessmentTemplateBaselineComparisonPlainArgs $) {
        this.category = $.category;
        this.comparisonSecurityAssessmentId = $.comparisonSecurityAssessmentId;
        this.findingKey = $.findingKey;
        this.securityAssessmentId = $.securityAssessmentId;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityAssessmentTemplateBaselineComparisonPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityAssessmentTemplateBaselineComparisonPlainArgs $;

        public Builder() {
            $ = new GetSecurityAssessmentTemplateBaselineComparisonPlainArgs();
        }

        public Builder(GetSecurityAssessmentTemplateBaselineComparisonPlainArgs defaults) {
            $ = new GetSecurityAssessmentTemplateBaselineComparisonPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category The category of the finding.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable String category) {
            $.category = category;
            return this;
        }

        /**
         * @param comparisonSecurityAssessmentId The OCID of the security assessment baseline.
         * 
         * @return builder
         * 
         */
        public Builder comparisonSecurityAssessmentId(String comparisonSecurityAssessmentId) {
            $.comparisonSecurityAssessmentId = comparisonSecurityAssessmentId;
            return this;
        }

        /**
         * @param findingKey The unique key that identifies the finding. It is a string and unique within a security assessment.
         * 
         * @return builder
         * 
         */
        public Builder findingKey(@Nullable String findingKey) {
            $.findingKey = findingKey;
            return this;
        }

        /**
         * @param securityAssessmentId The OCID of the security assessment.
         * 
         * @return builder
         * 
         */
        public Builder securityAssessmentId(String securityAssessmentId) {
            $.securityAssessmentId = securityAssessmentId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable String targetId) {
            $.targetId = targetId;
            return this;
        }

        public GetSecurityAssessmentTemplateBaselineComparisonPlainArgs build() {
            if ($.comparisonSecurityAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonPlainArgs", "comparisonSecurityAssessmentId");
            }
            if ($.securityAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonPlainArgs", "securityAssessmentId");
            }
            return $;
        }
    }

}
