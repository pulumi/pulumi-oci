// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSensitiveColumnAnalyticsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSensitiveColumnAnalyticsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSensitiveColumnAnalyticsPlainArgs Empty = new GetSensitiveColumnAnalyticsPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only a specific column based on column name.
     * 
     */
    @Import(name="columnNames")
    private @Nullable List<String> columnNames;

    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public Optional<List<String>> columnNames() {
        return Optional.ofNullable(this.columnNames);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetSensitiveColumnAnalyticsFilter> filters;

    public Optional<List<GetSensitiveColumnAnalyticsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The group by parameter to summarize the sensitive columns.
     * 
     */
    @Import(name="groupBies")
    private @Nullable List<String> groupBies;

    /**
     * @return The group by parameter to summarize the sensitive columns.
     * 
     */
    public Optional<List<String>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * A filter to return only items related to a specific object name.
     * 
     */
    @Import(name="objects")
    private @Nullable List<String> objects;

    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public Optional<List<String>> objects() {
        return Optional.ofNullable(this.objects);
    }

    /**
     * A filter to return only items related to specific schema name.
     * 
     */
    @Import(name="schemaNames")
    private @Nullable List<String> schemaNames;

    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public Optional<List<String>> schemaNames() {
        return Optional.ofNullable(this.schemaNames);
    }

    /**
     * A filter to return only the resources that match the specified sensitive data model OCID.
     * 
     */
    @Import(name="sensitiveDataModelId")
    private @Nullable String sensitiveDataModelId;

    /**
     * @return A filter to return only the resources that match the specified sensitive data model OCID.
     * 
     */
    public Optional<String> sensitiveDataModelId() {
        return Optional.ofNullable(this.sensitiveDataModelId);
    }

    /**
     * An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
     * 
     */
    @Import(name="sensitiveTypeGroupId")
    private @Nullable String sensitiveTypeGroupId;

    /**
     * @return An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
     * 
     */
    public Optional<String> sensitiveTypeGroupId() {
        return Optional.ofNullable(this.sensitiveTypeGroupId);
    }

    /**
     * A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
     * 
     */
    @Import(name="sensitiveTypeIds")
    private @Nullable List<String> sensitiveTypeIds;

    /**
     * @return A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
     * 
     */
    public Optional<List<String>> sensitiveTypeIds() {
        return Optional.ofNullable(this.sensitiveTypeIds);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable String targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    private GetSensitiveColumnAnalyticsPlainArgs() {}

    private GetSensitiveColumnAnalyticsPlainArgs(GetSensitiveColumnAnalyticsPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.columnNames = $.columnNames;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.groupBies = $.groupBies;
        this.objects = $.objects;
        this.schemaNames = $.schemaNames;
        this.sensitiveDataModelId = $.sensitiveDataModelId;
        this.sensitiveTypeGroupId = $.sensitiveTypeGroupId;
        this.sensitiveTypeIds = $.sensitiveTypeIds;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSensitiveColumnAnalyticsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSensitiveColumnAnalyticsPlainArgs $;

        public Builder() {
            $ = new GetSensitiveColumnAnalyticsPlainArgs();
        }

        public Builder(GetSensitiveColumnAnalyticsPlainArgs defaults) {
            $ = new GetSensitiveColumnAnalyticsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(@Nullable List<String> columnNames) {
            $.columnNames = columnNames;
            return this;
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetSensitiveColumnAnalyticsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSensitiveColumnAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param groupBies The group by parameter to summarize the sensitive columns.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable List<String> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies The group by parameter to summarize the sensitive columns.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(@Nullable List<String> objects) {
            $.objects = objects;
            return this;
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(@Nullable List<String> schemaNames) {
            $.schemaNames = schemaNames;
            return this;
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }

        /**
         * @param sensitiveDataModelId A filter to return only the resources that match the specified sensitive data model OCID.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(@Nullable String sensitiveDataModelId) {
            $.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }

        /**
         * @param sensitiveTypeGroupId An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeGroupId(@Nullable String sensitiveTypeGroupId) {
            $.sensitiveTypeGroupId = sensitiveTypeGroupId;
            return this;
        }

        /**
         * @param sensitiveTypeIds A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIds(@Nullable List<String> sensitiveTypeIds) {
            $.sensitiveTypeIds = sensitiveTypeIds;
            return this;
        }

        /**
         * @param sensitiveTypeIds A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIds(String... sensitiveTypeIds) {
            return sensitiveTypeIds(List.of(sensitiveTypeIds));
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable String targetId) {
            $.targetId = targetId;
            return this;
        }

        public GetSensitiveColumnAnalyticsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSensitiveColumnAnalyticsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
