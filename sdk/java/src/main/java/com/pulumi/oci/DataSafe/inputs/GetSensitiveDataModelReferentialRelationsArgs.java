// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSensitiveDataModelReferentialRelationsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSensitiveDataModelReferentialRelationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSensitiveDataModelReferentialRelationsArgs Empty = new GetSensitiveDataModelReferentialRelationsArgs();

    /**
     * A filter to return only a specific column based on column name.
     * 
     */
    @Import(name="columnNames")
    private @Nullable Output<List<String>> columnNames;

    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public Optional<Output<List<String>>> columnNames() {
        return Optional.ofNullable(this.columnNames);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetSensitiveDataModelReferentialRelationsFilterArgs>> filters;

    public Optional<Output<List<GetSensitiveDataModelReferentialRelationsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
     * 
     */
    @Import(name="isSensitive")
    private @Nullable Output<Boolean> isSensitive;

    /**
     * @return Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
     * 
     */
    public Optional<Output<Boolean>> isSensitive() {
        return Optional.ofNullable(this.isSensitive);
    }

    /**
     * A filter to return only items related to a specific object name.
     * 
     */
    @Import(name="objects")
    private @Nullable Output<List<String>> objects;

    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public Optional<Output<List<String>>> objects() {
        return Optional.ofNullable(this.objects);
    }

    /**
     * A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    @Import(name="relationTypes")
    private @Nullable Output<List<String>> relationTypes;

    /**
     * @return A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    public Optional<Output<List<String>>> relationTypes() {
        return Optional.ofNullable(this.relationTypes);
    }

    /**
     * A filter to return only items related to specific schema name.
     * 
     */
    @Import(name="schemaNames")
    private @Nullable Output<List<String>> schemaNames;

    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public Optional<Output<List<String>>> schemaNames() {
        return Optional.ofNullable(this.schemaNames);
    }

    /**
     * The OCID of the sensitive data model.
     * 
     */
    @Import(name="sensitiveDataModelId", required=true)
    private Output<String> sensitiveDataModelId;

    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public Output<String> sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }

    private GetSensitiveDataModelReferentialRelationsArgs() {}

    private GetSensitiveDataModelReferentialRelationsArgs(GetSensitiveDataModelReferentialRelationsArgs $) {
        this.columnNames = $.columnNames;
        this.filters = $.filters;
        this.isSensitive = $.isSensitive;
        this.objects = $.objects;
        this.relationTypes = $.relationTypes;
        this.schemaNames = $.schemaNames;
        this.sensitiveDataModelId = $.sensitiveDataModelId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSensitiveDataModelReferentialRelationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSensitiveDataModelReferentialRelationsArgs $;

        public Builder() {
            $ = new GetSensitiveDataModelReferentialRelationsArgs();
        }

        public Builder(GetSensitiveDataModelReferentialRelationsArgs defaults) {
            $ = new GetSensitiveDataModelReferentialRelationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(@Nullable Output<List<String>> columnNames) {
            $.columnNames = columnNames;
            return this;
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(List<String> columnNames) {
            return columnNames(Output.of(columnNames));
        }

        /**
         * @param columnNames A filter to return only a specific column based on column name.
         * 
         * @return builder
         * 
         */
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }

        public Builder filters(@Nullable Output<List<GetSensitiveDataModelReferentialRelationsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetSensitiveDataModelReferentialRelationsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetSensitiveDataModelReferentialRelationsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isSensitive Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
         * 
         * @return builder
         * 
         */
        public Builder isSensitive(@Nullable Output<Boolean> isSensitive) {
            $.isSensitive = isSensitive;
            return this;
        }

        /**
         * @param isSensitive Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
         * 
         * @return builder
         * 
         */
        public Builder isSensitive(Boolean isSensitive) {
            return isSensitive(Output.of(isSensitive));
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(@Nullable Output<List<String>> objects) {
            $.objects = objects;
            return this;
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(List<String> objects) {
            return objects(Output.of(objects));
        }

        /**
         * @param objects A filter to return only items related to a specific object name.
         * 
         * @return builder
         * 
         */
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }

        /**
         * @param relationTypes A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
         * 
         * @return builder
         * 
         */
        public Builder relationTypes(@Nullable Output<List<String>> relationTypes) {
            $.relationTypes = relationTypes;
            return this;
        }

        /**
         * @param relationTypes A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
         * 
         * @return builder
         * 
         */
        public Builder relationTypes(List<String> relationTypes) {
            return relationTypes(Output.of(relationTypes));
        }

        /**
         * @param relationTypes A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
         * 
         * @return builder
         * 
         */
        public Builder relationTypes(String... relationTypes) {
            return relationTypes(List.of(relationTypes));
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(@Nullable Output<List<String>> schemaNames) {
            $.schemaNames = schemaNames;
            return this;
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(List<String> schemaNames) {
            return schemaNames(Output.of(schemaNames));
        }

        /**
         * @param schemaNames A filter to return only items related to specific schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }

        /**
         * @param sensitiveDataModelId The OCID of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(Output<String> sensitiveDataModelId) {
            $.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }

        /**
         * @param sensitiveDataModelId The OCID of the sensitive data model.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            return sensitiveDataModelId(Output.of(sensitiveDataModelId));
        }

        public GetSensitiveDataModelReferentialRelationsArgs build() {
            if ($.sensitiveDataModelId == null) {
                throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsArgs", "sensitiveDataModelId");
            }
            return $;
        }
    }

}
