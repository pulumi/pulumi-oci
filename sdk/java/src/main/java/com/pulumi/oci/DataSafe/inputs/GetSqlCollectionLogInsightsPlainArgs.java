// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSqlCollectionLogInsightsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSqlCollectionLogInsightsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSqlCollectionLogInsightsPlainArgs Empty = new GetSqlCollectionLogInsightsPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetSqlCollectionLogInsightsFilter> filters;

    public Optional<List<GetSqlCollectionLogInsightsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The group by parameter to summarize SQL collection log insights aggregation.
     * 
     */
    @Import(name="groupBy")
    private @Nullable String groupBy;

    /**
     * @return The group by parameter to summarize SQL collection log insights aggregation.
     * 
     */
    public Optional<String> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }

    /**
     * The OCID of the SQL collection resource.
     * 
     */
    @Import(name="sqlCollectionId", required=true)
    private String sqlCollectionId;

    /**
     * @return The OCID of the SQL collection resource.
     * 
     */
    public String sqlCollectionId() {
        return this.sqlCollectionId;
    }

    /**
     * An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeEnded", required=true)
    private String timeEnded;

    /**
     * @return An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }

    /**
     * An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeStarted", required=true)
    private String timeStarted;

    /**
     * @return An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    private GetSqlCollectionLogInsightsPlainArgs() {}

    private GetSqlCollectionLogInsightsPlainArgs(GetSqlCollectionLogInsightsPlainArgs $) {
        this.filters = $.filters;
        this.groupBy = $.groupBy;
        this.sqlCollectionId = $.sqlCollectionId;
        this.timeEnded = $.timeEnded;
        this.timeStarted = $.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSqlCollectionLogInsightsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSqlCollectionLogInsightsPlainArgs $;

        public Builder() {
            $ = new GetSqlCollectionLogInsightsPlainArgs();
        }

        public Builder(GetSqlCollectionLogInsightsPlainArgs defaults) {
            $ = new GetSqlCollectionLogInsightsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetSqlCollectionLogInsightsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSqlCollectionLogInsightsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param groupBy The group by parameter to summarize SQL collection log insights aggregation.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(@Nullable String groupBy) {
            $.groupBy = groupBy;
            return this;
        }

        /**
         * @param sqlCollectionId The OCID of the SQL collection resource.
         * 
         * @return builder
         * 
         */
        public Builder sqlCollectionId(String sqlCollectionId) {
            $.sqlCollectionId = sqlCollectionId;
            return this;
        }

        /**
         * @param timeEnded An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeEnded(String timeEnded) {
            $.timeEnded = timeEnded;
            return this;
        }

        /**
         * @param timeStarted An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeStarted(String timeStarted) {
            $.timeStarted = timeStarted;
            return this;
        }

        public GetSqlCollectionLogInsightsPlainArgs build() {
            if ($.sqlCollectionId == null) {
                throw new MissingRequiredPropertyException("GetSqlCollectionLogInsightsPlainArgs", "sqlCollectionId");
            }
            if ($.timeEnded == null) {
                throw new MissingRequiredPropertyException("GetSqlCollectionLogInsightsPlainArgs", "timeEnded");
            }
            if ($.timeStarted == null) {
                throw new MissingRequiredPropertyException("GetSqlCollectionLogInsightsPlainArgs", "timeStarted");
            }
            return $;
        }
    }

}
