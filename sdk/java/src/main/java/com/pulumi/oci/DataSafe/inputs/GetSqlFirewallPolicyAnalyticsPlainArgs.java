// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetSqlFirewallPolicyAnalyticsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSqlFirewallPolicyAnalyticsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSqlFirewallPolicyAnalyticsPlainArgs Empty = new GetSqlFirewallPolicyAnalyticsPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetSqlFirewallPolicyAnalyticsFilter> filters;

    public Optional<List<GetSqlFirewallPolicyAnalyticsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The group by parameter to summarize SQL Firewall policy aggregation.
     * 
     */
    @Import(name="groupBies")
    private @Nullable List<String> groupBies;

    /**
     * @return The group by parameter to summarize SQL Firewall policy aggregation.
     * 
     */
    public Optional<List<String>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * An optional filter to return only resources that match the specified OCID of the security policy resource.
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable String securityPolicyId;

    /**
     * @return An optional filter to return only resources that match the specified OCID of the security policy resource.
     * 
     */
    public Optional<String> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    /**
     * The current state of the SQL Firewall policy.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return The current state of the SQL Firewall policy.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * An optional filter to return the summary of the SQL Firewall policies created before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeEnded")
    private @Nullable String timeEnded;

    /**
     * @return An optional filter to return the summary of the SQL Firewall policies created before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }

    /**
     * An optional filter to return the summary of the SQL Firewall policies created after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeStarted")
    private @Nullable String timeStarted;

    /**
     * @return An optional filter to return the summary of the SQL Firewall policies created after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }

    private GetSqlFirewallPolicyAnalyticsPlainArgs() {}

    private GetSqlFirewallPolicyAnalyticsPlainArgs(GetSqlFirewallPolicyAnalyticsPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.groupBies = $.groupBies;
        this.securityPolicyId = $.securityPolicyId;
        this.state = $.state;
        this.timeEnded = $.timeEnded;
        this.timeStarted = $.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSqlFirewallPolicyAnalyticsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSqlFirewallPolicyAnalyticsPlainArgs $;

        public Builder() {
            $ = new GetSqlFirewallPolicyAnalyticsPlainArgs();
        }

        public Builder(GetSqlFirewallPolicyAnalyticsPlainArgs defaults) {
            $ = new GetSqlFirewallPolicyAnalyticsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetSqlFirewallPolicyAnalyticsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetSqlFirewallPolicyAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param groupBies The group by parameter to summarize SQL Firewall policy aggregation.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable List<String> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies The group by parameter to summarize SQL Firewall policy aggregation.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param securityPolicyId An optional filter to return only resources that match the specified OCID of the security policy resource.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable String securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param state The current state of the SQL Firewall policy.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param timeEnded An optional filter to return the summary of the SQL Firewall policies created before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeEnded(@Nullable String timeEnded) {
            $.timeEnded = timeEnded;
            return this;
        }

        /**
         * @param timeStarted An optional filter to return the summary of the SQL Firewall policies created after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeStarted(@Nullable String timeStarted) {
            $.timeStarted = timeStarted;
            return this;
        }

        public GetSqlFirewallPolicyAnalyticsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetSqlFirewallPolicyAnalyticsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
