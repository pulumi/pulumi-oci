// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetUnifiedAuditPolicyDefinitionsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUnifiedAuditPolicyDefinitionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUnifiedAuditPolicyDefinitionsArgs Empty = new GetUnifiedAuditPolicyDefinitionsArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * A filter to return only resources that match the specified display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetUnifiedAuditPolicyDefinitionsFilterArgs>> filters;

    public Optional<Output<List<GetUnifiedAuditPolicyDefinitionsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A boolean flag indicating to list seeded unified audit policy definitions. Set this parameter to get list of seeded unified audit policy definitions.
     * 
     */
    @Import(name="isSeeded")
    private @Nullable Output<Boolean> isSeeded;

    /**
     * @return A boolean flag indicating to list seeded unified audit policy definitions. Set this parameter to get list of seeded unified audit policy definitions.
     * 
     */
    public Optional<Output<Boolean>> isSeeded() {
        return Optional.ofNullable(this.isSeeded);
    }

    /**
     * The current state of the unified audit policy definition.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the unified audit policy definition.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The category to which the unified audit policy definition belongs to.
     * 
     */
    @Import(name="unifiedAuditPolicyCategory")
    private @Nullable Output<String> unifiedAuditPolicyCategory;

    /**
     * @return The category to which the unified audit policy definition belongs to.
     * 
     */
    public Optional<Output<String>> unifiedAuditPolicyCategory() {
        return Optional.ofNullable(this.unifiedAuditPolicyCategory);
    }

    /**
     * An optional filter to return only resources that match the specified OCID of the unified audit policy definition resource.
     * 
     */
    @Import(name="unifiedAuditPolicyDefinitionId")
    private @Nullable Output<String> unifiedAuditPolicyDefinitionId;

    /**
     * @return An optional filter to return only resources that match the specified OCID of the unified audit policy definition resource.
     * 
     */
    public Optional<Output<String>> unifiedAuditPolicyDefinitionId() {
        return Optional.ofNullable(this.unifiedAuditPolicyDefinitionId);
    }

    /**
     * The name of the unified audit policy.
     * 
     */
    @Import(name="unifiedAuditPolicyName")
    private @Nullable Output<String> unifiedAuditPolicyName;

    /**
     * @return The name of the unified audit policy.
     * 
     */
    public Optional<Output<String>> unifiedAuditPolicyName() {
        return Optional.ofNullable(this.unifiedAuditPolicyName);
    }

    private GetUnifiedAuditPolicyDefinitionsArgs() {}

    private GetUnifiedAuditPolicyDefinitionsArgs(GetUnifiedAuditPolicyDefinitionsArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.isSeeded = $.isSeeded;
        this.state = $.state;
        this.unifiedAuditPolicyCategory = $.unifiedAuditPolicyCategory;
        this.unifiedAuditPolicyDefinitionId = $.unifiedAuditPolicyDefinitionId;
        this.unifiedAuditPolicyName = $.unifiedAuditPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUnifiedAuditPolicyDefinitionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUnifiedAuditPolicyDefinitionsArgs $;

        public Builder() {
            $ = new GetUnifiedAuditPolicyDefinitionsArgs();
        }

        public Builder(GetUnifiedAuditPolicyDefinitionsArgs defaults) {
            $ = new GetUnifiedAuditPolicyDefinitionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetUnifiedAuditPolicyDefinitionsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetUnifiedAuditPolicyDefinitionsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetUnifiedAuditPolicyDefinitionsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isSeeded A boolean flag indicating to list seeded unified audit policy definitions. Set this parameter to get list of seeded unified audit policy definitions.
         * 
         * @return builder
         * 
         */
        public Builder isSeeded(@Nullable Output<Boolean> isSeeded) {
            $.isSeeded = isSeeded;
            return this;
        }

        /**
         * @param isSeeded A boolean flag indicating to list seeded unified audit policy definitions. Set this parameter to get list of seeded unified audit policy definitions.
         * 
         * @return builder
         * 
         */
        public Builder isSeeded(Boolean isSeeded) {
            return isSeeded(Output.of(isSeeded));
        }

        /**
         * @param state The current state of the unified audit policy definition.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the unified audit policy definition.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param unifiedAuditPolicyCategory The category to which the unified audit policy definition belongs to.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyCategory(@Nullable Output<String> unifiedAuditPolicyCategory) {
            $.unifiedAuditPolicyCategory = unifiedAuditPolicyCategory;
            return this;
        }

        /**
         * @param unifiedAuditPolicyCategory The category to which the unified audit policy definition belongs to.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyCategory(String unifiedAuditPolicyCategory) {
            return unifiedAuditPolicyCategory(Output.of(unifiedAuditPolicyCategory));
        }

        /**
         * @param unifiedAuditPolicyDefinitionId An optional filter to return only resources that match the specified OCID of the unified audit policy definition resource.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyDefinitionId(@Nullable Output<String> unifiedAuditPolicyDefinitionId) {
            $.unifiedAuditPolicyDefinitionId = unifiedAuditPolicyDefinitionId;
            return this;
        }

        /**
         * @param unifiedAuditPolicyDefinitionId An optional filter to return only resources that match the specified OCID of the unified audit policy definition resource.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyDefinitionId(String unifiedAuditPolicyDefinitionId) {
            return unifiedAuditPolicyDefinitionId(Output.of(unifiedAuditPolicyDefinitionId));
        }

        /**
         * @param unifiedAuditPolicyName The name of the unified audit policy.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyName(@Nullable Output<String> unifiedAuditPolicyName) {
            $.unifiedAuditPolicyName = unifiedAuditPolicyName;
            return this;
        }

        /**
         * @param unifiedAuditPolicyName The name of the unified audit policy.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyName(String unifiedAuditPolicyName) {
            return unifiedAuditPolicyName(Output.of(unifiedAuditPolicyName));
        }

        public GetUnifiedAuditPolicyDefinitionsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyDefinitionsArgs", "compartmentId");
            }
            return $;
        }
    }

}
