// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetUnifiedAuditPolicyDefinitionsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUnifiedAuditPolicyDefinitionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUnifiedAuditPolicyDefinitionsPlainArgs Empty = new GetUnifiedAuditPolicyDefinitionsPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * A filter to return only resources that match the specified display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetUnifiedAuditPolicyDefinitionsFilter> filters;

    public Optional<List<GetUnifiedAuditPolicyDefinitionsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A boolean flag indicating to list seeded unified audit policy definitions. Set this parameter to get list of seeded unified audit policy definitions.
     * 
     */
    @Import(name="isSeeded")
    private @Nullable Boolean isSeeded;

    /**
     * @return A boolean flag indicating to list seeded unified audit policy definitions. Set this parameter to get list of seeded unified audit policy definitions.
     * 
     */
    public Optional<Boolean> isSeeded() {
        return Optional.ofNullable(this.isSeeded);
    }

    /**
     * The current state of the unified audit policy definition.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return The current state of the unified audit policy definition.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The category to which the unified audit policy definition belongs to.
     * 
     */
    @Import(name="unifiedAuditPolicyCategory")
    private @Nullable String unifiedAuditPolicyCategory;

    /**
     * @return The category to which the unified audit policy definition belongs to.
     * 
     */
    public Optional<String> unifiedAuditPolicyCategory() {
        return Optional.ofNullable(this.unifiedAuditPolicyCategory);
    }

    /**
     * An optional filter to return only resources that match the specified OCID of the unified audit policy definition resource.
     * 
     */
    @Import(name="unifiedAuditPolicyDefinitionId")
    private @Nullable String unifiedAuditPolicyDefinitionId;

    /**
     * @return An optional filter to return only resources that match the specified OCID of the unified audit policy definition resource.
     * 
     */
    public Optional<String> unifiedAuditPolicyDefinitionId() {
        return Optional.ofNullable(this.unifiedAuditPolicyDefinitionId);
    }

    /**
     * The name of the unified audit policy.
     * 
     */
    @Import(name="unifiedAuditPolicyName")
    private @Nullable String unifiedAuditPolicyName;

    /**
     * @return The name of the unified audit policy.
     * 
     */
    public Optional<String> unifiedAuditPolicyName() {
        return Optional.ofNullable(this.unifiedAuditPolicyName);
    }

    private GetUnifiedAuditPolicyDefinitionsPlainArgs() {}

    private GetUnifiedAuditPolicyDefinitionsPlainArgs(GetUnifiedAuditPolicyDefinitionsPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.isSeeded = $.isSeeded;
        this.state = $.state;
        this.unifiedAuditPolicyCategory = $.unifiedAuditPolicyCategory;
        this.unifiedAuditPolicyDefinitionId = $.unifiedAuditPolicyDefinitionId;
        this.unifiedAuditPolicyName = $.unifiedAuditPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUnifiedAuditPolicyDefinitionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUnifiedAuditPolicyDefinitionsPlainArgs $;

        public Builder() {
            $ = new GetUnifiedAuditPolicyDefinitionsPlainArgs();
        }

        public Builder(GetUnifiedAuditPolicyDefinitionsPlainArgs defaults) {
            $ = new GetUnifiedAuditPolicyDefinitionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the specified display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetUnifiedAuditPolicyDefinitionsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetUnifiedAuditPolicyDefinitionsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isSeeded A boolean flag indicating to list seeded unified audit policy definitions. Set this parameter to get list of seeded unified audit policy definitions.
         * 
         * @return builder
         * 
         */
        public Builder isSeeded(@Nullable Boolean isSeeded) {
            $.isSeeded = isSeeded;
            return this;
        }

        /**
         * @param state The current state of the unified audit policy definition.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param unifiedAuditPolicyCategory The category to which the unified audit policy definition belongs to.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyCategory(@Nullable String unifiedAuditPolicyCategory) {
            $.unifiedAuditPolicyCategory = unifiedAuditPolicyCategory;
            return this;
        }

        /**
         * @param unifiedAuditPolicyDefinitionId An optional filter to return only resources that match the specified OCID of the unified audit policy definition resource.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyDefinitionId(@Nullable String unifiedAuditPolicyDefinitionId) {
            $.unifiedAuditPolicyDefinitionId = unifiedAuditPolicyDefinitionId;
            return this;
        }

        /**
         * @param unifiedAuditPolicyName The name of the unified audit policy.
         * 
         * @return builder
         * 
         */
        public Builder unifiedAuditPolicyName(@Nullable String unifiedAuditPolicyName) {
            $.unifiedAuditPolicyName = unifiedAuditPolicyName;
            return this;
        }

        public GetUnifiedAuditPolicyDefinitionsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyDefinitionsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
