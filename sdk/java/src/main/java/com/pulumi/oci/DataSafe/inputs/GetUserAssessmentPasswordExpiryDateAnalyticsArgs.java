// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserAssessmentPasswordExpiryDateAnalyticsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAssessmentPasswordExpiryDateAnalyticsArgs Empty = new GetUserAssessmentPasswordExpiryDateAnalyticsArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs>> filters;

    public Optional<Output<List<GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timePasswordExpiryLessThan")
    private @Nullable Output<String> timePasswordExpiryLessThan;

    /**
     * @return A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timePasswordExpiryLessThan() {
        return Optional.ofNullable(this.timePasswordExpiryLessThan);
    }

    /**
     * The OCID of the user assessment.
     * 
     */
    @Import(name="userAssessmentId", required=true)
    private Output<String> userAssessmentId;

    /**
     * @return The OCID of the user assessment.
     * 
     */
    public Output<String> userAssessmentId() {
        return this.userAssessmentId;
    }

    /**
     * A filter to return only items that match the specified user category.
     * 
     */
    @Import(name="userCategory")
    private @Nullable Output<String> userCategory;

    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    public Optional<Output<String>> userCategory() {
        return Optional.ofNullable(this.userCategory);
    }

    private GetUserAssessmentPasswordExpiryDateAnalyticsArgs() {}

    private GetUserAssessmentPasswordExpiryDateAnalyticsArgs(GetUserAssessmentPasswordExpiryDateAnalyticsArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.timePasswordExpiryLessThan = $.timePasswordExpiryLessThan;
        this.userAssessmentId = $.userAssessmentId;
        this.userCategory = $.userCategory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAssessmentPasswordExpiryDateAnalyticsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAssessmentPasswordExpiryDateAnalyticsArgs $;

        public Builder() {
            $ = new GetUserAssessmentPasswordExpiryDateAnalyticsArgs();
        }

        public Builder(GetUserAssessmentPasswordExpiryDateAnalyticsArgs defaults) {
            $ = new GetUserAssessmentPasswordExpiryDateAnalyticsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(@Nullable Output<List<GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param timePasswordExpiryLessThan A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordExpiryLessThan(@Nullable Output<String> timePasswordExpiryLessThan) {
            $.timePasswordExpiryLessThan = timePasswordExpiryLessThan;
            return this;
        }

        /**
         * @param timePasswordExpiryLessThan A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordExpiryLessThan(String timePasswordExpiryLessThan) {
            return timePasswordExpiryLessThan(Output.of(timePasswordExpiryLessThan));
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(Output<String> userAssessmentId) {
            $.userAssessmentId = userAssessmentId;
            return this;
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(String userAssessmentId) {
            return userAssessmentId(Output.of(userAssessmentId));
        }

        /**
         * @param userCategory A filter to return only items that match the specified user category.
         * 
         * @return builder
         * 
         */
        public Builder userCategory(@Nullable Output<String> userCategory) {
            $.userCategory = userCategory;
            return this;
        }

        /**
         * @param userCategory A filter to return only items that match the specified user category.
         * 
         * @return builder
         * 
         */
        public Builder userCategory(String userCategory) {
            return userCategory(Output.of(userCategory));
        }

        public GetUserAssessmentPasswordExpiryDateAnalyticsArgs build() {
            if ($.userAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetUserAssessmentPasswordExpiryDateAnalyticsArgs", "userAssessmentId");
            }
            return $;
        }
    }

}
