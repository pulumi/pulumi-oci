// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs Empty = new GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetUserAssessmentPasswordExpiryDateAnalyticsFilter> filters;

    public Optional<List<GetUserAssessmentPasswordExpiryDateAnalyticsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timePasswordExpiryLessThan")
    private @Nullable String timePasswordExpiryLessThan;

    /**
     * @return A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<String> timePasswordExpiryLessThan() {
        return Optional.ofNullable(this.timePasswordExpiryLessThan);
    }

    /**
     * The OCID of the user assessment.
     * 
     */
    @Import(name="userAssessmentId", required=true)
    private String userAssessmentId;

    /**
     * @return The OCID of the user assessment.
     * 
     */
    public String userAssessmentId() {
        return this.userAssessmentId;
    }

    /**
     * A filter to return only items that match the specified user category.
     * 
     */
    @Import(name="userCategory")
    private @Nullable String userCategory;

    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    public Optional<String> userCategory() {
        return Optional.ofNullable(this.userCategory);
    }

    private GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs() {}

    private GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs(GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.timePasswordExpiryLessThan = $.timePasswordExpiryLessThan;
        this.userAssessmentId = $.userAssessmentId;
        this.userCategory = $.userCategory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs $;

        public Builder() {
            $ = new GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs();
        }

        public Builder(GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs defaults) {
            $ = new GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetUserAssessmentPasswordExpiryDateAnalyticsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetUserAssessmentPasswordExpiryDateAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param timePasswordExpiryLessThan A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordExpiryLessThan(@Nullable String timePasswordExpiryLessThan) {
            $.timePasswordExpiryLessThan = timePasswordExpiryLessThan;
            return this;
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(String userAssessmentId) {
            $.userAssessmentId = userAssessmentId;
            return this;
        }

        /**
         * @param userCategory A filter to return only items that match the specified user category.
         * 
         * @return builder
         * 
         */
        public Builder userCategory(@Nullable String userCategory) {
            $.userCategory = userCategory;
            return this;
        }

        public GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs build() {
            if ($.userAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetUserAssessmentPasswordExpiryDateAnalyticsPlainArgs", "userAssessmentId");
            }
            return $;
        }
    }

}
