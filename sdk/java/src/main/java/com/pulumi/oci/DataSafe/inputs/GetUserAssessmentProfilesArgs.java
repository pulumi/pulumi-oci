// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetUserAssessmentProfilesFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserAssessmentProfilesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAssessmentProfilesArgs Empty = new GetUserAssessmentProfilesArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="failedLoginAttemptsGreaterThanOrEqual")
    private @Nullable Output<String> failedLoginAttemptsGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> failedLoginAttemptsGreaterThanOrEqual() {
        return Optional.ofNullable(this.failedLoginAttemptsGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="failedLoginAttemptsLessThan")
    private @Nullable Output<String> failedLoginAttemptsLessThan;

    /**
     * @return An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> failedLoginAttemptsLessThan() {
        return Optional.ofNullable(this.failedLoginAttemptsLessThan);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetUserAssessmentProfilesFilterArgs>> filters;

    public Optional<Output<List<GetUserAssessmentProfilesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="inactiveAccountTimeGreaterThanOrEqual")
    private @Nullable Output<String> inactiveAccountTimeGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> inactiveAccountTimeGreaterThanOrEqual() {
        return Optional.ofNullable(this.inactiveAccountTimeGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="inactiveAccountTimeLessThan")
    private @Nullable Output<String> inactiveAccountTimeLessThan;

    /**
     * @return An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> inactiveAccountTimeLessThan() {
        return Optional.ofNullable(this.inactiveAccountTimeLessThan);
    }

    /**
     * An optional filter to return the user created profiles.
     * 
     */
    @Import(name="isUserCreated")
    private @Nullable Output<Boolean> isUserCreated;

    /**
     * @return An optional filter to return the user created profiles.
     * 
     */
    public Optional<Output<Boolean>> isUserCreated() {
        return Optional.ofNullable(this.isUserCreated);
    }

    /**
     * An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="passwordLockTimeGreaterThanOrEqual")
    private @Nullable Output<String> passwordLockTimeGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> passwordLockTimeGreaterThanOrEqual() {
        return Optional.ofNullable(this.passwordLockTimeGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="passwordLockTimeLessThan")
    private @Nullable Output<String> passwordLockTimeLessThan;

    /**
     * @return An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> passwordLockTimeLessThan() {
        return Optional.ofNullable(this.passwordLockTimeLessThan);
    }

    /**
     * An optional filter to filter the profiles based on password verification function.
     * 
     */
    @Import(name="passwordVerificationFunction")
    private @Nullable Output<String> passwordVerificationFunction;

    /**
     * @return An optional filter to filter the profiles based on password verification function.
     * 
     */
    public Optional<Output<String>> passwordVerificationFunction() {
        return Optional.ofNullable(this.passwordVerificationFunction);
    }

    /**
     * A filter to return only items that match the specified profile name.
     * 
     */
    @Import(name="profileName")
    private @Nullable Output<String> profileName;

    /**
     * @return A filter to return only items that match the specified profile name.
     * 
     */
    public Optional<Output<String>> profileName() {
        return Optional.ofNullable(this.profileName);
    }

    /**
     * An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="sessionsPerUserGreaterThanOrEqual")
    private @Nullable Output<String> sessionsPerUserGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> sessionsPerUserGreaterThanOrEqual() {
        return Optional.ofNullable(this.sessionsPerUserGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="sessionsPerUserLessThan")
    private @Nullable Output<String> sessionsPerUserLessThan;

    /**
     * @return An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<Output<String>> sessionsPerUserLessThan() {
        return Optional.ofNullable(this.sessionsPerUserLessThan);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The OCID of the user assessment.
     * 
     */
    @Import(name="userAssessmentId", required=true)
    private Output<String> userAssessmentId;

    /**
     * @return The OCID of the user assessment.
     * 
     */
    public Output<String> userAssessmentId() {
        return this.userAssessmentId;
    }

    /**
     * An optional filter to return the profiles having user count greater than or equal to the provided value.
     * 
     */
    @Import(name="userCountGreaterThanOrEqual")
    private @Nullable Output<String> userCountGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles having user count greater than or equal to the provided value.
     * 
     */
    public Optional<Output<String>> userCountGreaterThanOrEqual() {
        return Optional.ofNullable(this.userCountGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles having user count less than the provided value.
     * 
     */
    @Import(name="userCountLessThan")
    private @Nullable Output<String> userCountLessThan;

    /**
     * @return An optional filter to return the profiles having user count less than the provided value.
     * 
     */
    public Optional<Output<String>> userCountLessThan() {
        return Optional.ofNullable(this.userCountLessThan);
    }

    private GetUserAssessmentProfilesArgs() {}

    private GetUserAssessmentProfilesArgs(GetUserAssessmentProfilesArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.failedLoginAttemptsGreaterThanOrEqual = $.failedLoginAttemptsGreaterThanOrEqual;
        this.failedLoginAttemptsLessThan = $.failedLoginAttemptsLessThan;
        this.filters = $.filters;
        this.inactiveAccountTimeGreaterThanOrEqual = $.inactiveAccountTimeGreaterThanOrEqual;
        this.inactiveAccountTimeLessThan = $.inactiveAccountTimeLessThan;
        this.isUserCreated = $.isUserCreated;
        this.passwordLockTimeGreaterThanOrEqual = $.passwordLockTimeGreaterThanOrEqual;
        this.passwordLockTimeLessThan = $.passwordLockTimeLessThan;
        this.passwordVerificationFunction = $.passwordVerificationFunction;
        this.profileName = $.profileName;
        this.sessionsPerUserGreaterThanOrEqual = $.sessionsPerUserGreaterThanOrEqual;
        this.sessionsPerUserLessThan = $.sessionsPerUserLessThan;
        this.targetId = $.targetId;
        this.userAssessmentId = $.userAssessmentId;
        this.userCountGreaterThanOrEqual = $.userCountGreaterThanOrEqual;
        this.userCountLessThan = $.userCountLessThan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAssessmentProfilesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAssessmentProfilesArgs $;

        public Builder() {
            $ = new GetUserAssessmentProfilesArgs();
        }

        public Builder(GetUserAssessmentProfilesArgs defaults) {
            $ = new GetUserAssessmentProfilesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        /**
         * @param failedLoginAttemptsGreaterThanOrEqual An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginAttemptsGreaterThanOrEqual(@Nullable Output<String> failedLoginAttemptsGreaterThanOrEqual) {
            $.failedLoginAttemptsGreaterThanOrEqual = failedLoginAttemptsGreaterThanOrEqual;
            return this;
        }

        /**
         * @param failedLoginAttemptsGreaterThanOrEqual An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginAttemptsGreaterThanOrEqual(String failedLoginAttemptsGreaterThanOrEqual) {
            return failedLoginAttemptsGreaterThanOrEqual(Output.of(failedLoginAttemptsGreaterThanOrEqual));
        }

        /**
         * @param failedLoginAttemptsLessThan An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginAttemptsLessThan(@Nullable Output<String> failedLoginAttemptsLessThan) {
            $.failedLoginAttemptsLessThan = failedLoginAttemptsLessThan;
            return this;
        }

        /**
         * @param failedLoginAttemptsLessThan An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginAttemptsLessThan(String failedLoginAttemptsLessThan) {
            return failedLoginAttemptsLessThan(Output.of(failedLoginAttemptsLessThan));
        }

        public Builder filters(@Nullable Output<List<GetUserAssessmentProfilesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetUserAssessmentProfilesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetUserAssessmentProfilesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param inactiveAccountTimeGreaterThanOrEqual An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAccountTimeGreaterThanOrEqual(@Nullable Output<String> inactiveAccountTimeGreaterThanOrEqual) {
            $.inactiveAccountTimeGreaterThanOrEqual = inactiveAccountTimeGreaterThanOrEqual;
            return this;
        }

        /**
         * @param inactiveAccountTimeGreaterThanOrEqual An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAccountTimeGreaterThanOrEqual(String inactiveAccountTimeGreaterThanOrEqual) {
            return inactiveAccountTimeGreaterThanOrEqual(Output.of(inactiveAccountTimeGreaterThanOrEqual));
        }

        /**
         * @param inactiveAccountTimeLessThan An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAccountTimeLessThan(@Nullable Output<String> inactiveAccountTimeLessThan) {
            $.inactiveAccountTimeLessThan = inactiveAccountTimeLessThan;
            return this;
        }

        /**
         * @param inactiveAccountTimeLessThan An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAccountTimeLessThan(String inactiveAccountTimeLessThan) {
            return inactiveAccountTimeLessThan(Output.of(inactiveAccountTimeLessThan));
        }

        /**
         * @param isUserCreated An optional filter to return the user created profiles.
         * 
         * @return builder
         * 
         */
        public Builder isUserCreated(@Nullable Output<Boolean> isUserCreated) {
            $.isUserCreated = isUserCreated;
            return this;
        }

        /**
         * @param isUserCreated An optional filter to return the user created profiles.
         * 
         * @return builder
         * 
         */
        public Builder isUserCreated(Boolean isUserCreated) {
            return isUserCreated(Output.of(isUserCreated));
        }

        /**
         * @param passwordLockTimeGreaterThanOrEqual An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockTimeGreaterThanOrEqual(@Nullable Output<String> passwordLockTimeGreaterThanOrEqual) {
            $.passwordLockTimeGreaterThanOrEqual = passwordLockTimeGreaterThanOrEqual;
            return this;
        }

        /**
         * @param passwordLockTimeGreaterThanOrEqual An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockTimeGreaterThanOrEqual(String passwordLockTimeGreaterThanOrEqual) {
            return passwordLockTimeGreaterThanOrEqual(Output.of(passwordLockTimeGreaterThanOrEqual));
        }

        /**
         * @param passwordLockTimeLessThan An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockTimeLessThan(@Nullable Output<String> passwordLockTimeLessThan) {
            $.passwordLockTimeLessThan = passwordLockTimeLessThan;
            return this;
        }

        /**
         * @param passwordLockTimeLessThan An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockTimeLessThan(String passwordLockTimeLessThan) {
            return passwordLockTimeLessThan(Output.of(passwordLockTimeLessThan));
        }

        /**
         * @param passwordVerificationFunction An optional filter to filter the profiles based on password verification function.
         * 
         * @return builder
         * 
         */
        public Builder passwordVerificationFunction(@Nullable Output<String> passwordVerificationFunction) {
            $.passwordVerificationFunction = passwordVerificationFunction;
            return this;
        }

        /**
         * @param passwordVerificationFunction An optional filter to filter the profiles based on password verification function.
         * 
         * @return builder
         * 
         */
        public Builder passwordVerificationFunction(String passwordVerificationFunction) {
            return passwordVerificationFunction(Output.of(passwordVerificationFunction));
        }

        /**
         * @param profileName A filter to return only items that match the specified profile name.
         * 
         * @return builder
         * 
         */
        public Builder profileName(@Nullable Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param profileName A filter to return only items that match the specified profile name.
         * 
         * @return builder
         * 
         */
        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        /**
         * @param sessionsPerUserGreaterThanOrEqual An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder sessionsPerUserGreaterThanOrEqual(@Nullable Output<String> sessionsPerUserGreaterThanOrEqual) {
            $.sessionsPerUserGreaterThanOrEqual = sessionsPerUserGreaterThanOrEqual;
            return this;
        }

        /**
         * @param sessionsPerUserGreaterThanOrEqual An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder sessionsPerUserGreaterThanOrEqual(String sessionsPerUserGreaterThanOrEqual) {
            return sessionsPerUserGreaterThanOrEqual(Output.of(sessionsPerUserGreaterThanOrEqual));
        }

        /**
         * @param sessionsPerUserLessThan An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder sessionsPerUserLessThan(@Nullable Output<String> sessionsPerUserLessThan) {
            $.sessionsPerUserLessThan = sessionsPerUserLessThan;
            return this;
        }

        /**
         * @param sessionsPerUserLessThan An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder sessionsPerUserLessThan(String sessionsPerUserLessThan) {
            return sessionsPerUserLessThan(Output.of(sessionsPerUserLessThan));
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(Output<String> userAssessmentId) {
            $.userAssessmentId = userAssessmentId;
            return this;
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(String userAssessmentId) {
            return userAssessmentId(Output.of(userAssessmentId));
        }

        /**
         * @param userCountGreaterThanOrEqual An optional filter to return the profiles having user count greater than or equal to the provided value.
         * 
         * @return builder
         * 
         */
        public Builder userCountGreaterThanOrEqual(@Nullable Output<String> userCountGreaterThanOrEqual) {
            $.userCountGreaterThanOrEqual = userCountGreaterThanOrEqual;
            return this;
        }

        /**
         * @param userCountGreaterThanOrEqual An optional filter to return the profiles having user count greater than or equal to the provided value.
         * 
         * @return builder
         * 
         */
        public Builder userCountGreaterThanOrEqual(String userCountGreaterThanOrEqual) {
            return userCountGreaterThanOrEqual(Output.of(userCountGreaterThanOrEqual));
        }

        /**
         * @param userCountLessThan An optional filter to return the profiles having user count less than the provided value.
         * 
         * @return builder
         * 
         */
        public Builder userCountLessThan(@Nullable Output<String> userCountLessThan) {
            $.userCountLessThan = userCountLessThan;
            return this;
        }

        /**
         * @param userCountLessThan An optional filter to return the profiles having user count less than the provided value.
         * 
         * @return builder
         * 
         */
        public Builder userCountLessThan(String userCountLessThan) {
            return userCountLessThan(Output.of(userCountLessThan));
        }

        public GetUserAssessmentProfilesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetUserAssessmentProfilesArgs", "compartmentId");
            }
            if ($.userAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetUserAssessmentProfilesArgs", "userAssessmentId");
            }
            return $;
        }
    }

}
