// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetUserAssessmentProfilesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserAssessmentProfilesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAssessmentProfilesPlainArgs Empty = new GetUserAssessmentProfilesPlainArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable String accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only resources that match the specified compartment OCID.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    /**
     * An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="failedLoginAttemptsGreaterThanOrEqual")
    private @Nullable String failedLoginAttemptsGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> failedLoginAttemptsGreaterThanOrEqual() {
        return Optional.ofNullable(this.failedLoginAttemptsGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="failedLoginAttemptsLessThan")
    private @Nullable String failedLoginAttemptsLessThan;

    /**
     * @return An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> failedLoginAttemptsLessThan() {
        return Optional.ofNullable(this.failedLoginAttemptsLessThan);
    }

    @Import(name="filters")
    private @Nullable List<GetUserAssessmentProfilesFilter> filters;

    public Optional<List<GetUserAssessmentProfilesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="inactiveAccountTimeGreaterThanOrEqual")
    private @Nullable String inactiveAccountTimeGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> inactiveAccountTimeGreaterThanOrEqual() {
        return Optional.ofNullable(this.inactiveAccountTimeGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="inactiveAccountTimeLessThan")
    private @Nullable String inactiveAccountTimeLessThan;

    /**
     * @return An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> inactiveAccountTimeLessThan() {
        return Optional.ofNullable(this.inactiveAccountTimeLessThan);
    }

    /**
     * An optional filter to return the user created profiles.
     * 
     */
    @Import(name="isUserCreated")
    private @Nullable Boolean isUserCreated;

    /**
     * @return An optional filter to return the user created profiles.
     * 
     */
    public Optional<Boolean> isUserCreated() {
        return Optional.ofNullable(this.isUserCreated);
    }

    /**
     * An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="passwordLockTimeGreaterThanOrEqual")
    private @Nullable String passwordLockTimeGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> passwordLockTimeGreaterThanOrEqual() {
        return Optional.ofNullable(this.passwordLockTimeGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="passwordLockTimeLessThan")
    private @Nullable String passwordLockTimeLessThan;

    /**
     * @return An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> passwordLockTimeLessThan() {
        return Optional.ofNullable(this.passwordLockTimeLessThan);
    }

    /**
     * An optional filter to filter the profiles based on password verification function.
     * 
     */
    @Import(name="passwordVerificationFunction")
    private @Nullable String passwordVerificationFunction;

    /**
     * @return An optional filter to filter the profiles based on password verification function.
     * 
     */
    public Optional<String> passwordVerificationFunction() {
        return Optional.ofNullable(this.passwordVerificationFunction);
    }

    /**
     * A filter to return only items that match the specified profile name.
     * 
     */
    @Import(name="profileName")
    private @Nullable String profileName;

    /**
     * @return A filter to return only items that match the specified profile name.
     * 
     */
    public Optional<String> profileName() {
        return Optional.ofNullable(this.profileName);
    }

    /**
     * An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="sessionsPerUserGreaterThanOrEqual")
    private @Nullable String sessionsPerUserGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> sessionsPerUserGreaterThanOrEqual() {
        return Optional.ofNullable(this.sessionsPerUserGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    @Import(name="sessionsPerUserLessThan")
    private @Nullable String sessionsPerUserLessThan;

    /**
     * @return An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
     * 
     */
    public Optional<String> sessionsPerUserLessThan() {
        return Optional.ofNullable(this.sessionsPerUserLessThan);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable String targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The OCID of the user assessment.
     * 
     */
    @Import(name="userAssessmentId", required=true)
    private String userAssessmentId;

    /**
     * @return The OCID of the user assessment.
     * 
     */
    public String userAssessmentId() {
        return this.userAssessmentId;
    }

    /**
     * An optional filter to return the profiles having user count greater than or equal to the provided value.
     * 
     */
    @Import(name="userCountGreaterThanOrEqual")
    private @Nullable String userCountGreaterThanOrEqual;

    /**
     * @return An optional filter to return the profiles having user count greater than or equal to the provided value.
     * 
     */
    public Optional<String> userCountGreaterThanOrEqual() {
        return Optional.ofNullable(this.userCountGreaterThanOrEqual);
    }

    /**
     * An optional filter to return the profiles having user count less than the provided value.
     * 
     */
    @Import(name="userCountLessThan")
    private @Nullable String userCountLessThan;

    /**
     * @return An optional filter to return the profiles having user count less than the provided value.
     * 
     */
    public Optional<String> userCountLessThan() {
        return Optional.ofNullable(this.userCountLessThan);
    }

    private GetUserAssessmentProfilesPlainArgs() {}

    private GetUserAssessmentProfilesPlainArgs(GetUserAssessmentProfilesPlainArgs $) {
        this.accessLevel = $.accessLevel;
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.failedLoginAttemptsGreaterThanOrEqual = $.failedLoginAttemptsGreaterThanOrEqual;
        this.failedLoginAttemptsLessThan = $.failedLoginAttemptsLessThan;
        this.filters = $.filters;
        this.inactiveAccountTimeGreaterThanOrEqual = $.inactiveAccountTimeGreaterThanOrEqual;
        this.inactiveAccountTimeLessThan = $.inactiveAccountTimeLessThan;
        this.isUserCreated = $.isUserCreated;
        this.passwordLockTimeGreaterThanOrEqual = $.passwordLockTimeGreaterThanOrEqual;
        this.passwordLockTimeLessThan = $.passwordLockTimeLessThan;
        this.passwordVerificationFunction = $.passwordVerificationFunction;
        this.profileName = $.profileName;
        this.sessionsPerUserGreaterThanOrEqual = $.sessionsPerUserGreaterThanOrEqual;
        this.sessionsPerUserLessThan = $.sessionsPerUserLessThan;
        this.targetId = $.targetId;
        this.userAssessmentId = $.userAssessmentId;
        this.userCountGreaterThanOrEqual = $.userCountGreaterThanOrEqual;
        this.userCountLessThan = $.userCountLessThan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAssessmentProfilesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAssessmentProfilesPlainArgs $;

        public Builder() {
            $ = new GetUserAssessmentProfilesPlainArgs();
        }

        public Builder(GetUserAssessmentProfilesPlainArgs defaults) {
            $ = new GetUserAssessmentProfilesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable String accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param compartmentId A filter to return only resources that match the specified compartment OCID.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param failedLoginAttemptsGreaterThanOrEqual An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginAttemptsGreaterThanOrEqual(@Nullable String failedLoginAttemptsGreaterThanOrEqual) {
            $.failedLoginAttemptsGreaterThanOrEqual = failedLoginAttemptsGreaterThanOrEqual;
            return this;
        }

        /**
         * @param failedLoginAttemptsLessThan An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginAttemptsLessThan(@Nullable String failedLoginAttemptsLessThan) {
            $.failedLoginAttemptsLessThan = failedLoginAttemptsLessThan;
            return this;
        }

        public Builder filters(@Nullable List<GetUserAssessmentProfilesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetUserAssessmentProfilesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param inactiveAccountTimeGreaterThanOrEqual An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAccountTimeGreaterThanOrEqual(@Nullable String inactiveAccountTimeGreaterThanOrEqual) {
            $.inactiveAccountTimeGreaterThanOrEqual = inactiveAccountTimeGreaterThanOrEqual;
            return this;
        }

        /**
         * @param inactiveAccountTimeLessThan An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder inactiveAccountTimeLessThan(@Nullable String inactiveAccountTimeLessThan) {
            $.inactiveAccountTimeLessThan = inactiveAccountTimeLessThan;
            return this;
        }

        /**
         * @param isUserCreated An optional filter to return the user created profiles.
         * 
         * @return builder
         * 
         */
        public Builder isUserCreated(@Nullable Boolean isUserCreated) {
            $.isUserCreated = isUserCreated;
            return this;
        }

        /**
         * @param passwordLockTimeGreaterThanOrEqual An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockTimeGreaterThanOrEqual(@Nullable String passwordLockTimeGreaterThanOrEqual) {
            $.passwordLockTimeGreaterThanOrEqual = passwordLockTimeGreaterThanOrEqual;
            return this;
        }

        /**
         * @param passwordLockTimeLessThan An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder passwordLockTimeLessThan(@Nullable String passwordLockTimeLessThan) {
            $.passwordLockTimeLessThan = passwordLockTimeLessThan;
            return this;
        }

        /**
         * @param passwordVerificationFunction An optional filter to filter the profiles based on password verification function.
         * 
         * @return builder
         * 
         */
        public Builder passwordVerificationFunction(@Nullable String passwordVerificationFunction) {
            $.passwordVerificationFunction = passwordVerificationFunction;
            return this;
        }

        /**
         * @param profileName A filter to return only items that match the specified profile name.
         * 
         * @return builder
         * 
         */
        public Builder profileName(@Nullable String profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param sessionsPerUserGreaterThanOrEqual An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder sessionsPerUserGreaterThanOrEqual(@Nullable String sessionsPerUserGreaterThanOrEqual) {
            $.sessionsPerUserGreaterThanOrEqual = sessionsPerUserGreaterThanOrEqual;
            return this;
        }

        /**
         * @param sessionsPerUserLessThan An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the &#34;UNLIMITED&#34; and &#34;DEFAULT&#34; values.
         * 
         * @return builder
         * 
         */
        public Builder sessionsPerUserLessThan(@Nullable String sessionsPerUserLessThan) {
            $.sessionsPerUserLessThan = sessionsPerUserLessThan;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable String targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(String userAssessmentId) {
            $.userAssessmentId = userAssessmentId;
            return this;
        }

        /**
         * @param userCountGreaterThanOrEqual An optional filter to return the profiles having user count greater than or equal to the provided value.
         * 
         * @return builder
         * 
         */
        public Builder userCountGreaterThanOrEqual(@Nullable String userCountGreaterThanOrEqual) {
            $.userCountGreaterThanOrEqual = userCountGreaterThanOrEqual;
            return this;
        }

        /**
         * @param userCountLessThan An optional filter to return the profiles having user count less than the provided value.
         * 
         * @return builder
         * 
         */
        public Builder userCountLessThan(@Nullable String userCountLessThan) {
            $.userCountLessThan = userCountLessThan;
            return this;
        }

        public GetUserAssessmentProfilesPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetUserAssessmentProfilesPlainArgs", "compartmentId");
            }
            if ($.userAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetUserAssessmentProfilesPlainArgs", "userAssessmentId");
            }
            return $;
        }
    }

}
