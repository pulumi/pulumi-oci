// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.GetUserAssessmentUsersFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserAssessmentUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAssessmentUsersArgs Empty = new GetUserAssessmentUsersArgs();

    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    @Import(name="accessLevel")
    private @Nullable Output<String> accessLevel;

    /**
     * @return Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     * 
     */
    public Optional<Output<String>> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }

    /**
     * A filter to return only items that match the specified account status.
     * 
     */
    @Import(name="accountStatus")
    private @Nullable Output<String> accountStatus;

    /**
     * @return A filter to return only items that match the specified account status.
     * 
     */
    public Optional<Output<String>> accountStatus() {
        return Optional.ofNullable(this.accountStatus);
    }

    /**
     * A filter to return only items that match the criteria that all schemas can be accessed by a user.
     * 
     */
    @Import(name="areAllSchemasAccessible")
    private @Nullable Output<Boolean> areAllSchemasAccessible;

    /**
     * @return A filter to return only items that match the criteria that all schemas can be accessed by a user.
     * 
     */
    public Optional<Output<Boolean>> areAllSchemasAccessible() {
        return Optional.ofNullable(this.areAllSchemasAccessible);
    }

    /**
     * A filter to return only items that match the specified authentication type.
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<String> authenticationType;

    /**
     * @return A filter to return only items that match the specified authentication type.
     * 
     */
    public Optional<Output<String>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Output<Boolean> compartmentIdInSubtree;

    /**
     * @return Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
     * 
     */
    public Optional<Output<Boolean>> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetUserAssessmentUsersFilterArgs>> filters;

    public Optional<Output<List<GetUserAssessmentUsersFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return items that contain the specified schema list.
     * 
     */
    @Import(name="schemaLists")
    private @Nullable Output<List<String>> schemaLists;

    /**
     * @return A filter to return items that contain the specified schema list.
     * 
     */
    public Optional<Output<List<String>>> schemaLists() {
        return Optional.ofNullable(this.schemaLists);
    }

    /**
     * A filter to return only items related to a specific target OCID.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     * **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timeLastLoginGreaterThanOrEqualTo")
    private @Nullable Output<String> timeLastLoginGreaterThanOrEqualTo;

    /**
     * @return A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     * **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timeLastLoginGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeLastLoginGreaterThanOrEqualTo);
    }

    /**
     * A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timeLastLoginLessThan")
    private @Nullable Output<String> timeLastLoginLessThan;

    /**
     * @return A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timeLastLoginLessThan() {
        return Optional.ofNullable(this.timeLastLoginLessThan);
    }

    /**
     * A filter to return users whose password expiry date in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timePasswordExpiryGreaterThanOrEqualTo")
    private @Nullable Output<String> timePasswordExpiryGreaterThanOrEqualTo;

    /**
     * @return A filter to return users whose password expiry date in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timePasswordExpiryGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timePasswordExpiryGreaterThanOrEqualTo);
    }

    /**
     * A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timePasswordExpiryLessThan")
    private @Nullable Output<String> timePasswordExpiryLessThan;

    /**
     * @return A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timePasswordExpiryLessThan() {
        return Optional.ofNullable(this.timePasswordExpiryLessThan);
    }

    /**
     * A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     * **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timePasswordLastChangedGreaterThanOrEqualTo")
    private @Nullable Output<String> timePasswordLastChangedGreaterThanOrEqualTo;

    /**
     * @return A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     * **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timePasswordLastChangedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timePasswordLastChangedGreaterThanOrEqualTo);
    }

    /**
     * A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     * **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timePasswordLastChangedLessThan")
    private @Nullable Output<String> timePasswordLastChangedLessThan;

    /**
     * @return A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     * **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timePasswordLastChangedLessThan() {
        return Optional.ofNullable(this.timePasswordLastChangedLessThan);
    }

    /**
     * A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timeUserCreatedGreaterThanOrEqualTo")
    private @Nullable Output<String> timeUserCreatedGreaterThanOrEqualTo;

    /**
     * @return A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timeUserCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeUserCreatedGreaterThanOrEqualTo);
    }

    /**
     * A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    @Import(name="timeUserCreatedLessThan")
    private @Nullable Output<String> timeUserCreatedLessThan;

    /**
     * @return A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
     * 
     */
    public Optional<Output<String>> timeUserCreatedLessThan() {
        return Optional.ofNullable(this.timeUserCreatedLessThan);
    }

    /**
     * The OCID of the user assessment.
     * 
     */
    @Import(name="userAssessmentId", required=true)
    private Output<String> userAssessmentId;

    /**
     * @return The OCID of the user assessment.
     * 
     */
    public Output<String> userAssessmentId() {
        return this.userAssessmentId;
    }

    /**
     * A filter to return only items that match the specified user category.
     * 
     */
    @Import(name="userCategory")
    private @Nullable Output<String> userCategory;

    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    public Optional<Output<String>> userCategory() {
        return Optional.ofNullable(this.userCategory);
    }

    /**
     * A filter to return only items that match the specified user key.
     * 
     */
    @Import(name="userKey")
    private @Nullable Output<String> userKey;

    /**
     * @return A filter to return only items that match the specified user key.
     * 
     */
    public Optional<Output<String>> userKey() {
        return Optional.ofNullable(this.userKey);
    }

    /**
     * A filter to return only items that match the specified user name.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return A filter to return only items that match the specified user name.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    /**
     * A filter to return only items that match the specified user profile.
     * 
     */
    @Import(name="userProfile")
    private @Nullable Output<String> userProfile;

    /**
     * @return A filter to return only items that match the specified user profile.
     * 
     */
    public Optional<Output<String>> userProfile() {
        return Optional.ofNullable(this.userProfile);
    }

    /**
     * A filter to return only items that match the specified user role.
     * 
     */
    @Import(name="userRole")
    private @Nullable Output<String> userRole;

    /**
     * @return A filter to return only items that match the specified user role.
     * 
     */
    public Optional<Output<String>> userRole() {
        return Optional.ofNullable(this.userRole);
    }

    /**
     * A filter to return only items that match the specified user type. The possible values can be
     * * ADMIN_PRIVILEGED
     * * APPLICATION
     * * PRIVILEGED
     * * SCHEMA
     * * NON_PRIVILEGED as specified by &#39;#/definitions/userTypes&#39;.
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return A filter to return only items that match the specified user type. The possible values can be
     * * ADMIN_PRIVILEGED
     * * APPLICATION
     * * PRIVILEGED
     * * SCHEMA
     * * NON_PRIVILEGED as specified by &#39;#/definitions/userTypes&#39;.
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private GetUserAssessmentUsersArgs() {}

    private GetUserAssessmentUsersArgs(GetUserAssessmentUsersArgs $) {
        this.accessLevel = $.accessLevel;
        this.accountStatus = $.accountStatus;
        this.areAllSchemasAccessible = $.areAllSchemasAccessible;
        this.authenticationType = $.authenticationType;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.schemaLists = $.schemaLists;
        this.targetId = $.targetId;
        this.timeLastLoginGreaterThanOrEqualTo = $.timeLastLoginGreaterThanOrEqualTo;
        this.timeLastLoginLessThan = $.timeLastLoginLessThan;
        this.timePasswordExpiryGreaterThanOrEqualTo = $.timePasswordExpiryGreaterThanOrEqualTo;
        this.timePasswordExpiryLessThan = $.timePasswordExpiryLessThan;
        this.timePasswordLastChangedGreaterThanOrEqualTo = $.timePasswordLastChangedGreaterThanOrEqualTo;
        this.timePasswordLastChangedLessThan = $.timePasswordLastChangedLessThan;
        this.timeUserCreatedGreaterThanOrEqualTo = $.timeUserCreatedGreaterThanOrEqualTo;
        this.timeUserCreatedLessThan = $.timeUserCreatedLessThan;
        this.userAssessmentId = $.userAssessmentId;
        this.userCategory = $.userCategory;
        this.userKey = $.userKey;
        this.userName = $.userName;
        this.userProfile = $.userProfile;
        this.userRole = $.userRole;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAssessmentUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAssessmentUsersArgs $;

        public Builder() {
            $ = new GetUserAssessmentUsersArgs();
        }

        public Builder(GetUserAssessmentUsersArgs defaults) {
            $ = new GetUserAssessmentUsersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(@Nullable Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param accountStatus A filter to return only items that match the specified account status.
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(@Nullable Output<String> accountStatus) {
            $.accountStatus = accountStatus;
            return this;
        }

        /**
         * @param accountStatus A filter to return only items that match the specified account status.
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(String accountStatus) {
            return accountStatus(Output.of(accountStatus));
        }

        /**
         * @param areAllSchemasAccessible A filter to return only items that match the criteria that all schemas can be accessed by a user.
         * 
         * @return builder
         * 
         */
        public Builder areAllSchemasAccessible(@Nullable Output<Boolean> areAllSchemasAccessible) {
            $.areAllSchemasAccessible = areAllSchemasAccessible;
            return this;
        }

        /**
         * @param areAllSchemasAccessible A filter to return only items that match the criteria that all schemas can be accessed by a user.
         * 
         * @return builder
         * 
         */
        public Builder areAllSchemasAccessible(Boolean areAllSchemasAccessible) {
            return areAllSchemasAccessible(Output.of(areAllSchemasAccessible));
        }

        /**
         * @param authenticationType A filter to return only items that match the specified authentication type.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType A filter to return only items that match the specified authentication type.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Output<Boolean> compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        /**
         * @param compartmentIdInSubtree Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the &#39;accessLevel&#39; setting.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(Boolean compartmentIdInSubtree) {
            return compartmentIdInSubtree(Output.of(compartmentIdInSubtree));
        }

        public Builder filters(@Nullable Output<List<GetUserAssessmentUsersFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetUserAssessmentUsersFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetUserAssessmentUsersFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param schemaLists A filter to return items that contain the specified schema list.
         * 
         * @return builder
         * 
         */
        public Builder schemaLists(@Nullable Output<List<String>> schemaLists) {
            $.schemaLists = schemaLists;
            return this;
        }

        /**
         * @param schemaLists A filter to return items that contain the specified schema list.
         * 
         * @return builder
         * 
         */
        public Builder schemaLists(List<String> schemaLists) {
            return schemaLists(Output.of(schemaLists));
        }

        /**
         * @param schemaLists A filter to return items that contain the specified schema list.
         * 
         * @return builder
         * 
         */
        public Builder schemaLists(String... schemaLists) {
            return schemaLists(List.of(schemaLists));
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId A filter to return only items related to a specific target OCID.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param timeLastLoginGreaterThanOrEqualTo A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginGreaterThanOrEqualTo(@Nullable Output<String> timeLastLoginGreaterThanOrEqualTo) {
            $.timeLastLoginGreaterThanOrEqualTo = timeLastLoginGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeLastLoginGreaterThanOrEqualTo A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginGreaterThanOrEqualTo(String timeLastLoginGreaterThanOrEqualTo) {
            return timeLastLoginGreaterThanOrEqualTo(Output.of(timeLastLoginGreaterThanOrEqualTo));
        }

        /**
         * @param timeLastLoginLessThan A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginLessThan(@Nullable Output<String> timeLastLoginLessThan) {
            $.timeLastLoginLessThan = timeLastLoginLessThan;
            return this;
        }

        /**
         * @param timeLastLoginLessThan A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeLastLoginLessThan(String timeLastLoginLessThan) {
            return timeLastLoginLessThan(Output.of(timeLastLoginLessThan));
        }

        /**
         * @param timePasswordExpiryGreaterThanOrEqualTo A filter to return users whose password expiry date in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordExpiryGreaterThanOrEqualTo(@Nullable Output<String> timePasswordExpiryGreaterThanOrEqualTo) {
            $.timePasswordExpiryGreaterThanOrEqualTo = timePasswordExpiryGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timePasswordExpiryGreaterThanOrEqualTo A filter to return users whose password expiry date in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordExpiryGreaterThanOrEqualTo(String timePasswordExpiryGreaterThanOrEqualTo) {
            return timePasswordExpiryGreaterThanOrEqualTo(Output.of(timePasswordExpiryGreaterThanOrEqualTo));
        }

        /**
         * @param timePasswordExpiryLessThan A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordExpiryLessThan(@Nullable Output<String> timePasswordExpiryLessThan) {
            $.timePasswordExpiryLessThan = timePasswordExpiryLessThan;
            return this;
        }

        /**
         * @param timePasswordExpiryLessThan A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordExpiryLessThan(String timePasswordExpiryLessThan) {
            return timePasswordExpiryLessThan(Output.of(timePasswordExpiryLessThan));
        }

        /**
         * @param timePasswordLastChangedGreaterThanOrEqualTo A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedGreaterThanOrEqualTo(@Nullable Output<String> timePasswordLastChangedGreaterThanOrEqualTo) {
            $.timePasswordLastChangedGreaterThanOrEqualTo = timePasswordLastChangedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timePasswordLastChangedGreaterThanOrEqualTo A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedGreaterThanOrEqualTo(String timePasswordLastChangedGreaterThanOrEqualTo) {
            return timePasswordLastChangedGreaterThanOrEqualTo(Output.of(timePasswordLastChangedGreaterThanOrEqualTo));
        }

        /**
         * @param timePasswordLastChangedLessThan A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedLessThan(@Nullable Output<String> timePasswordLastChangedLessThan) {
            $.timePasswordLastChangedLessThan = timePasswordLastChangedLessThan;
            return this;
        }

        /**
         * @param timePasswordLastChangedLessThan A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timePasswordLastChangedLessThan(String timePasswordLastChangedLessThan) {
            return timePasswordLastChangedLessThan(Output.of(timePasswordLastChangedLessThan));
        }

        /**
         * @param timeUserCreatedGreaterThanOrEqualTo A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedGreaterThanOrEqualTo(@Nullable Output<String> timeUserCreatedGreaterThanOrEqualTo) {
            $.timeUserCreatedGreaterThanOrEqualTo = timeUserCreatedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeUserCreatedGreaterThanOrEqualTo A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedGreaterThanOrEqualTo(String timeUserCreatedGreaterThanOrEqualTo) {
            return timeUserCreatedGreaterThanOrEqualTo(Output.of(timeUserCreatedGreaterThanOrEqualTo));
        }

        /**
         * @param timeUserCreatedLessThan A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedLessThan(@Nullable Output<String> timeUserCreatedLessThan) {
            $.timeUserCreatedLessThan = timeUserCreatedLessThan;
            return this;
        }

        /**
         * @param timeUserCreatedLessThan A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
         * 
         * @return builder
         * 
         */
        public Builder timeUserCreatedLessThan(String timeUserCreatedLessThan) {
            return timeUserCreatedLessThan(Output.of(timeUserCreatedLessThan));
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(Output<String> userAssessmentId) {
            $.userAssessmentId = userAssessmentId;
            return this;
        }

        /**
         * @param userAssessmentId The OCID of the user assessment.
         * 
         * @return builder
         * 
         */
        public Builder userAssessmentId(String userAssessmentId) {
            return userAssessmentId(Output.of(userAssessmentId));
        }

        /**
         * @param userCategory A filter to return only items that match the specified user category.
         * 
         * @return builder
         * 
         */
        public Builder userCategory(@Nullable Output<String> userCategory) {
            $.userCategory = userCategory;
            return this;
        }

        /**
         * @param userCategory A filter to return only items that match the specified user category.
         * 
         * @return builder
         * 
         */
        public Builder userCategory(String userCategory) {
            return userCategory(Output.of(userCategory));
        }

        /**
         * @param userKey A filter to return only items that match the specified user key.
         * 
         * @return builder
         * 
         */
        public Builder userKey(@Nullable Output<String> userKey) {
            $.userKey = userKey;
            return this;
        }

        /**
         * @param userKey A filter to return only items that match the specified user key.
         * 
         * @return builder
         * 
         */
        public Builder userKey(String userKey) {
            return userKey(Output.of(userKey));
        }

        /**
         * @param userName A filter to return only items that match the specified user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName A filter to return only items that match the specified user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        /**
         * @param userProfile A filter to return only items that match the specified user profile.
         * 
         * @return builder
         * 
         */
        public Builder userProfile(@Nullable Output<String> userProfile) {
            $.userProfile = userProfile;
            return this;
        }

        /**
         * @param userProfile A filter to return only items that match the specified user profile.
         * 
         * @return builder
         * 
         */
        public Builder userProfile(String userProfile) {
            return userProfile(Output.of(userProfile));
        }

        /**
         * @param userRole A filter to return only items that match the specified user role.
         * 
         * @return builder
         * 
         */
        public Builder userRole(@Nullable Output<String> userRole) {
            $.userRole = userRole;
            return this;
        }

        /**
         * @param userRole A filter to return only items that match the specified user role.
         * 
         * @return builder
         * 
         */
        public Builder userRole(String userRole) {
            return userRole(Output.of(userRole));
        }

        /**
         * @param userType A filter to return only items that match the specified user type. The possible values can be
         * * ADMIN_PRIVILEGED
         * * APPLICATION
         * * PRIVILEGED
         * * SCHEMA
         * * NON_PRIVILEGED as specified by &#39;#/definitions/userTypes&#39;.
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType A filter to return only items that match the specified user type. The possible values can be
         * * ADMIN_PRIVILEGED
         * * APPLICATION
         * * PRIVILEGED
         * * SCHEMA
         * * NON_PRIVILEGED as specified by &#39;#/definitions/userTypes&#39;.
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public GetUserAssessmentUsersArgs build() {
            if ($.userAssessmentId == null) {
                throw new MissingRequiredPropertyException("GetUserAssessmentUsersArgs", "userAssessmentId");
            }
            return $;
        }
    }

}
