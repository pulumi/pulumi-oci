// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaskingReportManagementState extends com.pulumi.resources.ResourceArgs {

    public static final MaskingReportManagementState Empty = new MaskingReportManagementState();

    /**
     * The OCID of the compartment that contains the masking report.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the masking report.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Indicates if the temporary tables created during the masking operation were dropped after masking.
     * 
     */
    @Import(name="isDropTempTablesEnabled")
    private @Nullable Output<Boolean> isDropTempTablesEnabled;

    /**
     * @return Indicates if the temporary tables created during the masking operation were dropped after masking.
     * 
     */
    public Optional<Output<Boolean>> isDropTempTablesEnabled() {
        return Optional.ofNullable(this.isDropTempTablesEnabled);
    }

    /**
     * Indicates if redo logging was enabled during the masking operation.
     * 
     */
    @Import(name="isRedoLoggingEnabled")
    private @Nullable Output<Boolean> isRedoLoggingEnabled;

    /**
     * @return Indicates if redo logging was enabled during the masking operation.
     * 
     */
    public Optional<Output<Boolean>> isRedoLoggingEnabled() {
        return Optional.ofNullable(this.isRedoLoggingEnabled);
    }

    /**
     * Indicates if statistics gathering was enabled during the masking operation.
     * 
     */
    @Import(name="isRefreshStatsEnabled")
    private @Nullable Output<Boolean> isRefreshStatsEnabled;

    /**
     * @return Indicates if statistics gathering was enabled during the masking operation.
     * 
     */
    public Optional<Output<Boolean>> isRefreshStatsEnabled() {
        return Optional.ofNullable(this.isRefreshStatsEnabled);
    }

    /**
     * The OCID of the masking policy.
     * 
     */
    @Import(name="maskingPolicyId")
    private @Nullable Output<String> maskingPolicyId;

    /**
     * @return The OCID of the masking policy.
     * 
     */
    public Optional<Output<String>> maskingPolicyId() {
        return Optional.ofNullable(this.maskingPolicyId);
    }

    /**
     * The OCID of the masking work request that resulted in this masking report.
     * 
     */
    @Import(name="maskingWorkRequestId")
    private @Nullable Output<String> maskingWorkRequestId;

    /**
     * @return The OCID of the masking work request that resulted in this masking report.
     * 
     */
    public Optional<Output<String>> maskingWorkRequestId() {
        return Optional.ofNullable(this.maskingWorkRequestId);
    }

    /**
     * Indicates if parallel execution was enabled during the masking operation.
     * 
     */
    @Import(name="parallelDegree")
    private @Nullable Output<String> parallelDegree;

    /**
     * @return Indicates if parallel execution was enabled during the masking operation.
     * 
     */
    public Optional<Output<String>> parallelDegree() {
        return Optional.ofNullable(this.parallelDegree);
    }

    /**
     * Indicates how invalid objects were recompiled post the masking operation.
     * 
     */
    @Import(name="recompile")
    private @Nullable Output<String> recompile;

    /**
     * @return Indicates how invalid objects were recompiled post the masking operation.
     * 
     */
    public Optional<Output<String>> recompile() {
        return Optional.ofNullable(this.recompile);
    }

    /**
     * The current state of the masking report.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the masking report.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The OCID of the target database masked.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return The OCID of the target database masked.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    @Import(name="timeMaskingFinished")
    private @Nullable Output<String> timeMaskingFinished;

    /**
     * @return The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public Optional<Output<String>> timeMaskingFinished() {
        return Optional.ofNullable(this.timeMaskingFinished);
    }

    /**
     * The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    @Import(name="timeMaskingStarted")
    private @Nullable Output<String> timeMaskingStarted;

    /**
     * @return The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public Optional<Output<String>> timeMaskingStarted() {
        return Optional.ofNullable(this.timeMaskingStarted);
    }

    /**
     * The total number of masked columns.
     * 
     */
    @Import(name="totalMaskedColumns")
    private @Nullable Output<String> totalMaskedColumns;

    /**
     * @return The total number of masked columns.
     * 
     */
    public Optional<Output<String>> totalMaskedColumns() {
        return Optional.ofNullable(this.totalMaskedColumns);
    }

    /**
     * The total number of unique objects (tables and editioning views) that contain the masked columns.
     * 
     */
    @Import(name="totalMaskedObjects")
    private @Nullable Output<String> totalMaskedObjects;

    /**
     * @return The total number of unique objects (tables and editioning views) that contain the masked columns.
     * 
     */
    public Optional<Output<String>> totalMaskedObjects() {
        return Optional.ofNullable(this.totalMaskedObjects);
    }

    /**
     * The total number of unique schemas that contain the masked columns.
     * 
     */
    @Import(name="totalMaskedSchemas")
    private @Nullable Output<String> totalMaskedSchemas;

    /**
     * @return The total number of unique schemas that contain the masked columns.
     * 
     */
    public Optional<Output<String>> totalMaskedSchemas() {
        return Optional.ofNullable(this.totalMaskedSchemas);
    }

    /**
     * The total number of unique sensitive types associated with the masked columns.
     * 
     */
    @Import(name="totalMaskedSensitiveTypes")
    private @Nullable Output<String> totalMaskedSensitiveTypes;

    /**
     * @return The total number of unique sensitive types associated with the masked columns.
     * 
     */
    public Optional<Output<String>> totalMaskedSensitiveTypes() {
        return Optional.ofNullable(this.totalMaskedSensitiveTypes);
    }

    /**
     * The total number of masked values.
     * 
     */
    @Import(name="totalMaskedValues")
    private @Nullable Output<String> totalMaskedValues;

    /**
     * @return The total number of masked values.
     * 
     */
    public Optional<Output<String>> totalMaskedValues() {
        return Optional.ofNullable(this.totalMaskedValues);
    }

    private MaskingReportManagementState() {}

    private MaskingReportManagementState(MaskingReportManagementState $) {
        this.compartmentId = $.compartmentId;
        this.isDropTempTablesEnabled = $.isDropTempTablesEnabled;
        this.isRedoLoggingEnabled = $.isRedoLoggingEnabled;
        this.isRefreshStatsEnabled = $.isRefreshStatsEnabled;
        this.maskingPolicyId = $.maskingPolicyId;
        this.maskingWorkRequestId = $.maskingWorkRequestId;
        this.parallelDegree = $.parallelDegree;
        this.recompile = $.recompile;
        this.state = $.state;
        this.targetId = $.targetId;
        this.timeCreated = $.timeCreated;
        this.timeMaskingFinished = $.timeMaskingFinished;
        this.timeMaskingStarted = $.timeMaskingStarted;
        this.totalMaskedColumns = $.totalMaskedColumns;
        this.totalMaskedObjects = $.totalMaskedObjects;
        this.totalMaskedSchemas = $.totalMaskedSchemas;
        this.totalMaskedSensitiveTypes = $.totalMaskedSensitiveTypes;
        this.totalMaskedValues = $.totalMaskedValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaskingReportManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaskingReportManagementState $;

        public Builder() {
            $ = new MaskingReportManagementState();
        }

        public Builder(MaskingReportManagementState defaults) {
            $ = new MaskingReportManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the masking report.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the masking report.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param isDropTempTablesEnabled Indicates if the temporary tables created during the masking operation were dropped after masking.
         * 
         * @return builder
         * 
         */
        public Builder isDropTempTablesEnabled(@Nullable Output<Boolean> isDropTempTablesEnabled) {
            $.isDropTempTablesEnabled = isDropTempTablesEnabled;
            return this;
        }

        /**
         * @param isDropTempTablesEnabled Indicates if the temporary tables created during the masking operation were dropped after masking.
         * 
         * @return builder
         * 
         */
        public Builder isDropTempTablesEnabled(Boolean isDropTempTablesEnabled) {
            return isDropTempTablesEnabled(Output.of(isDropTempTablesEnabled));
        }

        /**
         * @param isRedoLoggingEnabled Indicates if redo logging was enabled during the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder isRedoLoggingEnabled(@Nullable Output<Boolean> isRedoLoggingEnabled) {
            $.isRedoLoggingEnabled = isRedoLoggingEnabled;
            return this;
        }

        /**
         * @param isRedoLoggingEnabled Indicates if redo logging was enabled during the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder isRedoLoggingEnabled(Boolean isRedoLoggingEnabled) {
            return isRedoLoggingEnabled(Output.of(isRedoLoggingEnabled));
        }

        /**
         * @param isRefreshStatsEnabled Indicates if statistics gathering was enabled during the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder isRefreshStatsEnabled(@Nullable Output<Boolean> isRefreshStatsEnabled) {
            $.isRefreshStatsEnabled = isRefreshStatsEnabled;
            return this;
        }

        /**
         * @param isRefreshStatsEnabled Indicates if statistics gathering was enabled during the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder isRefreshStatsEnabled(Boolean isRefreshStatsEnabled) {
            return isRefreshStatsEnabled(Output.of(isRefreshStatsEnabled));
        }

        /**
         * @param maskingPolicyId The OCID of the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicyId(@Nullable Output<String> maskingPolicyId) {
            $.maskingPolicyId = maskingPolicyId;
            return this;
        }

        /**
         * @param maskingPolicyId The OCID of the masking policy.
         * 
         * @return builder
         * 
         */
        public Builder maskingPolicyId(String maskingPolicyId) {
            return maskingPolicyId(Output.of(maskingPolicyId));
        }

        /**
         * @param maskingWorkRequestId The OCID of the masking work request that resulted in this masking report.
         * 
         * @return builder
         * 
         */
        public Builder maskingWorkRequestId(@Nullable Output<String> maskingWorkRequestId) {
            $.maskingWorkRequestId = maskingWorkRequestId;
            return this;
        }

        /**
         * @param maskingWorkRequestId The OCID of the masking work request that resulted in this masking report.
         * 
         * @return builder
         * 
         */
        public Builder maskingWorkRequestId(String maskingWorkRequestId) {
            return maskingWorkRequestId(Output.of(maskingWorkRequestId));
        }

        /**
         * @param parallelDegree Indicates if parallel execution was enabled during the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder parallelDegree(@Nullable Output<String> parallelDegree) {
            $.parallelDegree = parallelDegree;
            return this;
        }

        /**
         * @param parallelDegree Indicates if parallel execution was enabled during the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder parallelDegree(String parallelDegree) {
            return parallelDegree(Output.of(parallelDegree));
        }

        /**
         * @param recompile Indicates how invalid objects were recompiled post the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder recompile(@Nullable Output<String> recompile) {
            $.recompile = recompile;
            return this;
        }

        /**
         * @param recompile Indicates how invalid objects were recompiled post the masking operation.
         * 
         * @return builder
         * 
         */
        public Builder recompile(String recompile) {
            return recompile(Output.of(recompile));
        }

        /**
         * @param state The current state of the masking report.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the masking report.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetId The OCID of the target database masked.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The OCID of the target database masked.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param timeCreated The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeMaskingFinished The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
         * 
         * @return builder
         * 
         */
        public Builder timeMaskingFinished(@Nullable Output<String> timeMaskingFinished) {
            $.timeMaskingFinished = timeMaskingFinished;
            return this;
        }

        /**
         * @param timeMaskingFinished The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
         * 
         * @return builder
         * 
         */
        public Builder timeMaskingFinished(String timeMaskingFinished) {
            return timeMaskingFinished(Output.of(timeMaskingFinished));
        }

        /**
         * @param timeMaskingStarted The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
         * 
         * @return builder
         * 
         */
        public Builder timeMaskingStarted(@Nullable Output<String> timeMaskingStarted) {
            $.timeMaskingStarted = timeMaskingStarted;
            return this;
        }

        /**
         * @param timeMaskingStarted The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
         * 
         * @return builder
         * 
         */
        public Builder timeMaskingStarted(String timeMaskingStarted) {
            return timeMaskingStarted(Output.of(timeMaskingStarted));
        }

        /**
         * @param totalMaskedColumns The total number of masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedColumns(@Nullable Output<String> totalMaskedColumns) {
            $.totalMaskedColumns = totalMaskedColumns;
            return this;
        }

        /**
         * @param totalMaskedColumns The total number of masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedColumns(String totalMaskedColumns) {
            return totalMaskedColumns(Output.of(totalMaskedColumns));
        }

        /**
         * @param totalMaskedObjects The total number of unique objects (tables and editioning views) that contain the masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedObjects(@Nullable Output<String> totalMaskedObjects) {
            $.totalMaskedObjects = totalMaskedObjects;
            return this;
        }

        /**
         * @param totalMaskedObjects The total number of unique objects (tables and editioning views) that contain the masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedObjects(String totalMaskedObjects) {
            return totalMaskedObjects(Output.of(totalMaskedObjects));
        }

        /**
         * @param totalMaskedSchemas The total number of unique schemas that contain the masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedSchemas(@Nullable Output<String> totalMaskedSchemas) {
            $.totalMaskedSchemas = totalMaskedSchemas;
            return this;
        }

        /**
         * @param totalMaskedSchemas The total number of unique schemas that contain the masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedSchemas(String totalMaskedSchemas) {
            return totalMaskedSchemas(Output.of(totalMaskedSchemas));
        }

        /**
         * @param totalMaskedSensitiveTypes The total number of unique sensitive types associated with the masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedSensitiveTypes(@Nullable Output<String> totalMaskedSensitiveTypes) {
            $.totalMaskedSensitiveTypes = totalMaskedSensitiveTypes;
            return this;
        }

        /**
         * @param totalMaskedSensitiveTypes The total number of unique sensitive types associated with the masked columns.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedSensitiveTypes(String totalMaskedSensitiveTypes) {
            return totalMaskedSensitiveTypes(Output.of(totalMaskedSensitiveTypes));
        }

        /**
         * @param totalMaskedValues The total number of masked values.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedValues(@Nullable Output<String> totalMaskedValues) {
            $.totalMaskedValues = totalMaskedValues;
            return this;
        }

        /**
         * @param totalMaskedValues The total number of masked values.
         * 
         * @return builder
         * 
         */
        public Builder totalMaskedValues(String totalMaskedValues) {
            return totalMaskedValues(Output.of(totalMaskedValues));
        }

        public MaskingReportManagementState build() {
            return $;
        }
    }

}
