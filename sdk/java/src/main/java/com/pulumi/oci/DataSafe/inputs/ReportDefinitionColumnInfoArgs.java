// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReportDefinitionColumnInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReportDefinitionColumnInfoArgs Empty = new ReportDefinitionColumnInfoArgs();

    /**
     * (Updatable) An array of operators that can be supported by column fieldName.
     * 
     */
    @Import(name="applicableOperators")
    private @Nullable Output<List<String>> applicableOperators;

    /**
     * @return (Updatable) An array of operators that can be supported by column fieldName.
     * 
     */
    public Optional<Output<List<String>>> applicableOperators() {
        return Optional.ofNullable(this.applicableOperators);
    }

    /**
     * (Updatable) Specifies the data type of the column.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return (Updatable) Specifies the data type of the column.
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * (Updatable) Name of the column displayed on UI.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) Name of the column displayed on UI.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Specifies the display order of the column.
     * 
     */
    @Import(name="displayOrder", required=true)
    private Output<Integer> displayOrder;

    /**
     * @return (Updatable) Specifies the display order of the column.
     * 
     */
    public Output<Integer> displayOrder() {
        return this.displayOrder;
    }

    /**
     * (Updatable) Specifies the corresponding field name in the data source.
     * 
     */
    @Import(name="fieldName", required=true)
    private Output<String> fieldName;

    /**
     * @return (Updatable) Specifies the corresponding field name in the data source.
     * 
     */
    public Output<String> fieldName() {
        return this.fieldName;
    }

    /**
     * (Updatable) Indicates if the column is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    @Import(name="isHidden", required=true)
    private Output<Boolean> isHidden;

    /**
     * @return (Updatable) Indicates if the column is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Output<Boolean> isHidden() {
        return this.isHidden;
    }

    /**
     * (Updatable) Specifies if column is virtual and can only be used as column filter.
     * 
     */
    @Import(name="isVirtual")
    private @Nullable Output<Boolean> isVirtual;

    /**
     * @return (Updatable) Specifies if column is virtual and can only be used as column filter.
     * 
     */
    public Optional<Output<Boolean>> isVirtual() {
        return Optional.ofNullable(this.isVirtual);
    }

    private ReportDefinitionColumnInfoArgs() {}

    private ReportDefinitionColumnInfoArgs(ReportDefinitionColumnInfoArgs $) {
        this.applicableOperators = $.applicableOperators;
        this.dataType = $.dataType;
        this.displayName = $.displayName;
        this.displayOrder = $.displayOrder;
        this.fieldName = $.fieldName;
        this.isHidden = $.isHidden;
        this.isVirtual = $.isVirtual;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportDefinitionColumnInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportDefinitionColumnInfoArgs $;

        public Builder() {
            $ = new ReportDefinitionColumnInfoArgs();
        }

        public Builder(ReportDefinitionColumnInfoArgs defaults) {
            $ = new ReportDefinitionColumnInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicableOperators (Updatable) An array of operators that can be supported by column fieldName.
         * 
         * @return builder
         * 
         */
        public Builder applicableOperators(@Nullable Output<List<String>> applicableOperators) {
            $.applicableOperators = applicableOperators;
            return this;
        }

        /**
         * @param applicableOperators (Updatable) An array of operators that can be supported by column fieldName.
         * 
         * @return builder
         * 
         */
        public Builder applicableOperators(List<String> applicableOperators) {
            return applicableOperators(Output.of(applicableOperators));
        }

        /**
         * @param applicableOperators (Updatable) An array of operators that can be supported by column fieldName.
         * 
         * @return builder
         * 
         */
        public Builder applicableOperators(String... applicableOperators) {
            return applicableOperators(List.of(applicableOperators));
        }

        /**
         * @param dataType (Updatable) Specifies the data type of the column.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType (Updatable) Specifies the data type of the column.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param displayName (Updatable) Name of the column displayed on UI.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) Name of the column displayed on UI.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param displayOrder (Updatable) Specifies the display order of the column.
         * 
         * @return builder
         * 
         */
        public Builder displayOrder(Output<Integer> displayOrder) {
            $.displayOrder = displayOrder;
            return this;
        }

        /**
         * @param displayOrder (Updatable) Specifies the display order of the column.
         * 
         * @return builder
         * 
         */
        public Builder displayOrder(Integer displayOrder) {
            return displayOrder(Output.of(displayOrder));
        }

        /**
         * @param fieldName (Updatable) Specifies the corresponding field name in the data source.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param fieldName (Updatable) Specifies the corresponding field name in the data source.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        /**
         * @param isHidden (Updatable) Indicates if the column is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(Output<Boolean> isHidden) {
            $.isHidden = isHidden;
            return this;
        }

        /**
         * @param isHidden (Updatable) Indicates if the column is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder isHidden(Boolean isHidden) {
            return isHidden(Output.of(isHidden));
        }

        /**
         * @param isVirtual (Updatable) Specifies if column is virtual and can only be used as column filter.
         * 
         * @return builder
         * 
         */
        public Builder isVirtual(@Nullable Output<Boolean> isVirtual) {
            $.isVirtual = isVirtual;
            return this;
        }

        /**
         * @param isVirtual (Updatable) Specifies if column is virtual and can only be used as column filter.
         * 
         * @return builder
         * 
         */
        public Builder isVirtual(Boolean isVirtual) {
            return isVirtual(Output.of(isVirtual));
        }

        public ReportDefinitionColumnInfoArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ReportDefinitionColumnInfoArgs", "displayName");
            }
            if ($.displayOrder == null) {
                throw new MissingRequiredPropertyException("ReportDefinitionColumnInfoArgs", "displayOrder");
            }
            if ($.fieldName == null) {
                throw new MissingRequiredPropertyException("ReportDefinitionColumnInfoArgs", "fieldName");
            }
            if ($.isHidden == null) {
                throw new MissingRequiredPropertyException("ReportDefinitionColumnInfoArgs", "isHidden");
            }
            return $;
        }
    }

}
