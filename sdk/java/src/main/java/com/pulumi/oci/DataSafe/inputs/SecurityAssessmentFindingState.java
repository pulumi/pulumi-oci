// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentFindingPatchOperationArgs;
import com.pulumi.oci.DataSafe.inputs.SecurityAssessmentFindingReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityAssessmentFindingState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityAssessmentFindingState Empty = new SecurityAssessmentFindingState();

    /**
     * The OCID of the assessment that generated this finding.
     * 
     */
    @Import(name="assessmentId")
    private @Nullable Output<String> assessmentId;

    /**
     * @return The OCID of the assessment that generated this finding.
     * 
     */
    public Optional<Output<String>> assessmentId() {
        return Optional.ofNullable(this.assessmentId);
    }

    /**
     * The category to which the finding belongs to.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The category to which the finding belongs to.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     * 
     */
    @Import(name="details")
    private @Nullable Output<List<String>> details;

    /**
     * @return The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     * 
     */
    public Optional<Output<List<String>>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Determines if this risk level has changed on the target database since the last time &#39;severity&#39; was modified by user.
     * 
     */
    @Import(name="hasTargetDbRiskLevelChanged")
    private @Nullable Output<Boolean> hasTargetDbRiskLevelChanged;

    /**
     * @return Determines if this risk level has changed on the target database since the last time &#39;severity&#39; was modified by user.
     * 
     */
    public Optional<Output<Boolean>> hasTargetDbRiskLevelChanged() {
        return Optional.ofNullable(this.hasTargetDbRiskLevelChanged);
    }

    /**
     * Determines if this risk level was modified by user.
     * 
     */
    @Import(name="isRiskModified")
    private @Nullable Output<Boolean> isRiskModified;

    /**
     * @return Determines if this risk level was modified by user.
     * 
     */
    public Optional<Output<Boolean>> isRiskModified() {
        return Optional.ofNullable(this.isRiskModified);
    }

    /**
     * Indicates whether a given finding is marked as topFinding or not.
     * 
     */
    @Import(name="isTopFinding")
    private @Nullable Output<Boolean> isTopFinding;

    /**
     * @return Indicates whether a given finding is marked as topFinding or not.
     * 
     */
    public Optional<Output<Boolean>> isTopFinding() {
        return Optional.ofNullable(this.isTopFinding);
    }

    /**
     * User provided reason for accepting or modifying this finding if they choose to do so.
     * 
     */
    @Import(name="justification")
    private @Nullable Output<String> justification;

    /**
     * @return User provided reason for accepting or modifying this finding if they choose to do so.
     * 
     */
    public Optional<Output<String>> justification() {
        return Optional.ofNullable(this.justification);
    }

    /**
     * The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Details about the current state of the finding.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Details about the current state of the finding.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * Provides a recommended approach to take to remediate the finding reported.
     * 
     */
    @Import(name="oneline")
    private @Nullable Output<String> oneline;

    /**
     * @return Provides a recommended approach to take to remediate the finding reported.
     * 
     */
    public Optional<Output<String>> oneline() {
        return Optional.ofNullable(this.oneline);
    }

    /**
     * The severity of the finding as determined by security assessment. This cannot be modified by user.
     * 
     */
    @Import(name="oracleDefinedSeverity")
    private @Nullable Output<String> oracleDefinedSeverity;

    /**
     * @return The severity of the finding as determined by security assessment. This cannot be modified by user.
     * 
     */
    public Optional<Output<String>> oracleDefinedSeverity() {
        return Optional.ofNullable(this.oracleDefinedSeverity);
    }

    /**
     * (Updatable)
     * 
     */
    @Import(name="patchOperations")
    private @Nullable Output<List<SecurityAssessmentFindingPatchOperationArgs>> patchOperations;

    /**
     * @return (Updatable)
     * 
     */
    public Optional<Output<List<SecurityAssessmentFindingPatchOperationArgs>>> patchOperations() {
        return Optional.ofNullable(this.patchOperations);
    }

    /**
     * Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
     * 
     */
    @Import(name="references")
    private @Nullable Output<List<SecurityAssessmentFindingReferenceArgs>> references;

    /**
     * @return Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
     * 
     */
    public Optional<Output<List<SecurityAssessmentFindingReferenceArgs>>> references() {
        return Optional.ofNullable(this.references);
    }

    /**
     * The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    @Import(name="remarks")
    private @Nullable Output<String> remarks;

    /**
     * @return The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    public Optional<Output<String>> remarks() {
        return Optional.ofNullable(this.remarks);
    }

    /**
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="securityAssessmentId")
    private @Nullable Output<String> securityAssessmentId;

    /**
     * @return ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> securityAssessmentId() {
        return Optional.ofNullable(this.securityAssessmentId);
    }

    /**
     * The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * The current state of the finding.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the finding.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    /**
     * The OCID of the target database.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    /**
     * The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * The time until which the change in severity(deferred / modified) of this finding is valid.
     * 
     */
    @Import(name="timeValidUntil")
    private @Nullable Output<String> timeValidUntil;

    /**
     * @return The time until which the change in severity(deferred / modified) of this finding is valid.
     * 
     */
    public Optional<Output<String>> timeValidUntil() {
        return Optional.ofNullable(this.timeValidUntil);
    }

    /**
     * The short title for the finding.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The short title for the finding.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private SecurityAssessmentFindingState() {}

    private SecurityAssessmentFindingState(SecurityAssessmentFindingState $) {
        this.assessmentId = $.assessmentId;
        this.category = $.category;
        this.details = $.details;
        this.hasTargetDbRiskLevelChanged = $.hasTargetDbRiskLevelChanged;
        this.isRiskModified = $.isRiskModified;
        this.isTopFinding = $.isTopFinding;
        this.justification = $.justification;
        this.key = $.key;
        this.lifecycleDetails = $.lifecycleDetails;
        this.oneline = $.oneline;
        this.oracleDefinedSeverity = $.oracleDefinedSeverity;
        this.patchOperations = $.patchOperations;
        this.references = $.references;
        this.remarks = $.remarks;
        this.securityAssessmentId = $.securityAssessmentId;
        this.severity = $.severity;
        this.state = $.state;
        this.summary = $.summary;
        this.targetId = $.targetId;
        this.timeUpdated = $.timeUpdated;
        this.timeValidUntil = $.timeValidUntil;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityAssessmentFindingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityAssessmentFindingState $;

        public Builder() {
            $ = new SecurityAssessmentFindingState();
        }

        public Builder(SecurityAssessmentFindingState defaults) {
            $ = new SecurityAssessmentFindingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assessmentId The OCID of the assessment that generated this finding.
         * 
         * @return builder
         * 
         */
        public Builder assessmentId(@Nullable Output<String> assessmentId) {
            $.assessmentId = assessmentId;
            return this;
        }

        /**
         * @param assessmentId The OCID of the assessment that generated this finding.
         * 
         * @return builder
         * 
         */
        public Builder assessmentId(String assessmentId) {
            return assessmentId(Output.of(assessmentId));
        }

        /**
         * @param category The category to which the finding belongs to.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The category to which the finding belongs to.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param details The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
         * 
         * @return builder
         * 
         */
        public Builder details(@Nullable Output<List<String>> details) {
            $.details = details;
            return this;
        }

        /**
         * @param details The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
         * 
         * @return builder
         * 
         */
        public Builder details(List<String> details) {
            return details(Output.of(details));
        }

        /**
         * @param details The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
         * 
         * @return builder
         * 
         */
        public Builder details(String... details) {
            return details(List.of(details));
        }

        /**
         * @param hasTargetDbRiskLevelChanged Determines if this risk level has changed on the target database since the last time &#39;severity&#39; was modified by user.
         * 
         * @return builder
         * 
         */
        public Builder hasTargetDbRiskLevelChanged(@Nullable Output<Boolean> hasTargetDbRiskLevelChanged) {
            $.hasTargetDbRiskLevelChanged = hasTargetDbRiskLevelChanged;
            return this;
        }

        /**
         * @param hasTargetDbRiskLevelChanged Determines if this risk level has changed on the target database since the last time &#39;severity&#39; was modified by user.
         * 
         * @return builder
         * 
         */
        public Builder hasTargetDbRiskLevelChanged(Boolean hasTargetDbRiskLevelChanged) {
            return hasTargetDbRiskLevelChanged(Output.of(hasTargetDbRiskLevelChanged));
        }

        /**
         * @param isRiskModified Determines if this risk level was modified by user.
         * 
         * @return builder
         * 
         */
        public Builder isRiskModified(@Nullable Output<Boolean> isRiskModified) {
            $.isRiskModified = isRiskModified;
            return this;
        }

        /**
         * @param isRiskModified Determines if this risk level was modified by user.
         * 
         * @return builder
         * 
         */
        public Builder isRiskModified(Boolean isRiskModified) {
            return isRiskModified(Output.of(isRiskModified));
        }

        /**
         * @param isTopFinding Indicates whether a given finding is marked as topFinding or not.
         * 
         * @return builder
         * 
         */
        public Builder isTopFinding(@Nullable Output<Boolean> isTopFinding) {
            $.isTopFinding = isTopFinding;
            return this;
        }

        /**
         * @param isTopFinding Indicates whether a given finding is marked as topFinding or not.
         * 
         * @return builder
         * 
         */
        public Builder isTopFinding(Boolean isTopFinding) {
            return isTopFinding(Output.of(isTopFinding));
        }

        /**
         * @param justification User provided reason for accepting or modifying this finding if they choose to do so.
         * 
         * @return builder
         * 
         */
        public Builder justification(@Nullable Output<String> justification) {
            $.justification = justification;
            return this;
        }

        /**
         * @param justification User provided reason for accepting or modifying this finding if they choose to do so.
         * 
         * @return builder
         * 
         */
        public Builder justification(String justification) {
            return justification(Output.of(justification));
        }

        /**
         * @param key The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param lifecycleDetails Details about the current state of the finding.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Details about the current state of the finding.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param oneline Provides a recommended approach to take to remediate the finding reported.
         * 
         * @return builder
         * 
         */
        public Builder oneline(@Nullable Output<String> oneline) {
            $.oneline = oneline;
            return this;
        }

        /**
         * @param oneline Provides a recommended approach to take to remediate the finding reported.
         * 
         * @return builder
         * 
         */
        public Builder oneline(String oneline) {
            return oneline(Output.of(oneline));
        }

        /**
         * @param oracleDefinedSeverity The severity of the finding as determined by security assessment. This cannot be modified by user.
         * 
         * @return builder
         * 
         */
        public Builder oracleDefinedSeverity(@Nullable Output<String> oracleDefinedSeverity) {
            $.oracleDefinedSeverity = oracleDefinedSeverity;
            return this;
        }

        /**
         * @param oracleDefinedSeverity The severity of the finding as determined by security assessment. This cannot be modified by user.
         * 
         * @return builder
         * 
         */
        public Builder oracleDefinedSeverity(String oracleDefinedSeverity) {
            return oracleDefinedSeverity(Output.of(oracleDefinedSeverity));
        }

        /**
         * @param patchOperations (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder patchOperations(@Nullable Output<List<SecurityAssessmentFindingPatchOperationArgs>> patchOperations) {
            $.patchOperations = patchOperations;
            return this;
        }

        /**
         * @param patchOperations (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder patchOperations(List<SecurityAssessmentFindingPatchOperationArgs> patchOperations) {
            return patchOperations(Output.of(patchOperations));
        }

        /**
         * @param patchOperations (Updatable)
         * 
         * @return builder
         * 
         */
        public Builder patchOperations(SecurityAssessmentFindingPatchOperationArgs... patchOperations) {
            return patchOperations(List.of(patchOperations));
        }

        /**
         * @param references Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
         * 
         * @return builder
         * 
         */
        public Builder references(@Nullable Output<List<SecurityAssessmentFindingReferenceArgs>> references) {
            $.references = references;
            return this;
        }

        /**
         * @param references Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
         * 
         * @return builder
         * 
         */
        public Builder references(List<SecurityAssessmentFindingReferenceArgs> references) {
            return references(Output.of(references));
        }

        /**
         * @param references Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
         * 
         * @return builder
         * 
         */
        public Builder references(SecurityAssessmentFindingReferenceArgs... references) {
            return references(List.of(references));
        }

        /**
         * @param remarks The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
         * 
         * @return builder
         * 
         */
        public Builder remarks(@Nullable Output<String> remarks) {
            $.remarks = remarks;
            return this;
        }

        /**
         * @param remarks The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
         * 
         * @return builder
         * 
         */
        public Builder remarks(String remarks) {
            return remarks(Output.of(remarks));
        }

        /**
         * @param securityAssessmentId ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder securityAssessmentId(@Nullable Output<String> securityAssessmentId) {
            $.securityAssessmentId = securityAssessmentId;
            return this;
        }

        /**
         * @param securityAssessmentId ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder securityAssessmentId(String securityAssessmentId) {
            return securityAssessmentId(Output.of(securityAssessmentId));
        }

        /**
         * @param severity The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param state The current state of the finding.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the finding.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param summary The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        /**
         * @param targetId The OCID of the target database.
         * 
         * @return builder
         * 
         */
        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        /**
         * @param targetId The OCID of the target database.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        /**
         * @param timeUpdated The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param timeValidUntil The time until which the change in severity(deferred / modified) of this finding is valid.
         * 
         * @return builder
         * 
         */
        public Builder timeValidUntil(@Nullable Output<String> timeValidUntil) {
            $.timeValidUntil = timeValidUntil;
            return this;
        }

        /**
         * @param timeValidUntil The time until which the change in severity(deferred / modified) of this finding is valid.
         * 
         * @return builder
         * 
         */
        public Builder timeValidUntil(String timeValidUntil) {
            return timeValidUntil(Output.of(timeValidUntil));
        }

        /**
         * @param title The short title for the finding.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The short title for the finding.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public SecurityAssessmentFindingState build() {
            return $;
        }
    }

}
