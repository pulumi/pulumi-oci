// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensitiveDataModelReferentialRelationParentArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensitiveDataModelReferentialRelationParentArgs Empty = new SensitiveDataModelReferentialRelationParentArgs();

    /**
     * The application name.
     * 
     */
    @Import(name="appName", required=true)
    private Output<String> appName;

    /**
     * @return The application name.
     * 
     */
    public Output<String> appName() {
        return this.appName;
    }

    /**
     * Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
     * 
     */
    @Import(name="columnGroups", required=true)
    private Output<List<String>> columnGroups;

    /**
     * @return Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
     * 
     */
    public Output<List<String>> columnGroups() {
        return this.columnGroups;
    }

    /**
     * The database object that contains the columns.
     * 
     */
    @Import(name="object", required=true)
    private Output<String> object;

    /**
     * @return The database object that contains the columns.
     * 
     */
    public Output<String> object() {
        return this.object;
    }

    /**
     * The type of the database object that contains the sensitive column.
     * 
     */
    @Import(name="objectType", required=true)
    private Output<String> objectType;

    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    public Output<String> objectType() {
        return this.objectType;
    }

    /**
     * The schema name.
     * 
     */
    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    /**
     * @return The schema name.
     * 
     */
    public Output<String> schemaName() {
        return this.schemaName;
    }

    /**
     * Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
     * 
     */
    @Import(name="sensitiveTypeIds")
    private @Nullable Output<List<String>> sensitiveTypeIds;

    /**
     * @return Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
     * 
     */
    public Optional<Output<List<String>>> sensitiveTypeIds() {
        return Optional.ofNullable(this.sensitiveTypeIds);
    }

    private SensitiveDataModelReferentialRelationParentArgs() {}

    private SensitiveDataModelReferentialRelationParentArgs(SensitiveDataModelReferentialRelationParentArgs $) {
        this.appName = $.appName;
        this.columnGroups = $.columnGroups;
        this.object = $.object;
        this.objectType = $.objectType;
        this.schemaName = $.schemaName;
        this.sensitiveTypeIds = $.sensitiveTypeIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensitiveDataModelReferentialRelationParentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensitiveDataModelReferentialRelationParentArgs $;

        public Builder() {
            $ = new SensitiveDataModelReferentialRelationParentArgs();
        }

        public Builder(SensitiveDataModelReferentialRelationParentArgs defaults) {
            $ = new SensitiveDataModelReferentialRelationParentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appName The application name.
         * 
         * @return builder
         * 
         */
        public Builder appName(Output<String> appName) {
            $.appName = appName;
            return this;
        }

        /**
         * @param appName The application name.
         * 
         * @return builder
         * 
         */
        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        /**
         * @param columnGroups Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
         * 
         * @return builder
         * 
         */
        public Builder columnGroups(Output<List<String>> columnGroups) {
            $.columnGroups = columnGroups;
            return this;
        }

        /**
         * @param columnGroups Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
         * 
         * @return builder
         * 
         */
        public Builder columnGroups(List<String> columnGroups) {
            return columnGroups(Output.of(columnGroups));
        }

        /**
         * @param columnGroups Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
         * 
         * @return builder
         * 
         */
        public Builder columnGroups(String... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }

        /**
         * @param object The database object that contains the columns.
         * 
         * @return builder
         * 
         */
        public Builder object(Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object The database object that contains the columns.
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param objectType The type of the database object that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder objectType(Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType The type of the database object that contains the sensitive column.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        /**
         * @param schemaName The schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName The schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param sensitiveTypeIds Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIds(@Nullable Output<List<String>> sensitiveTypeIds) {
            $.sensitiveTypeIds = sensitiveTypeIds;
            return this;
        }

        /**
         * @param sensitiveTypeIds Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIds(List<String> sensitiveTypeIds) {
            return sensitiveTypeIds(Output.of(sensitiveTypeIds));
        }

        /**
         * @param sensitiveTypeIds Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveTypeIds(String... sensitiveTypeIds) {
            return sensitiveTypeIds(List.of(sensitiveTypeIds));
        }

        public SensitiveDataModelReferentialRelationParentArgs build() {
            if ($.appName == null) {
                throw new MissingRequiredPropertyException("SensitiveDataModelReferentialRelationParentArgs", "appName");
            }
            if ($.columnGroups == null) {
                throw new MissingRequiredPropertyException("SensitiveDataModelReferentialRelationParentArgs", "columnGroups");
            }
            if ($.object == null) {
                throw new MissingRequiredPropertyException("SensitiveDataModelReferentialRelationParentArgs", "object");
            }
            if ($.objectType == null) {
                throw new MissingRequiredPropertyException("SensitiveDataModelReferentialRelationParentArgs", "objectType");
            }
            if ($.schemaName == null) {
                throw new MissingRequiredPropertyException("SensitiveDataModelReferentialRelationParentArgs", "schemaName");
            }
            return $;
        }
    }

}
