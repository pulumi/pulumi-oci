// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs Empty = new TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs();

    /**
     * (Updatable) The OCID of the compartment for including target databases to the target database group. All target databases in the compartment will be members of the target database group.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return (Updatable) The OCID of the compartment for including target databases to the target database group. All target databases in the compartment will be members of the target database group.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * (Updatable) This indicates whether the target databases of sub-compartments should also be included in the target database group. By default, this parameter is set to false.
     * 
     */
    @Import(name="isIncludeSubtree")
    private @Nullable Output<Boolean> isIncludeSubtree;

    /**
     * @return (Updatable) This indicates whether the target databases of sub-compartments should also be included in the target database group. By default, this parameter is set to false.
     * 
     */
    public Optional<Output<Boolean>> isIncludeSubtree() {
        return Optional.ofNullable(this.isIncludeSubtree);
    }

    private TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs() {}

    private TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs(TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs $) {
        this.id = $.id;
        this.isIncludeSubtree = $.isIncludeSubtree;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs $;

        public Builder() {
            $ = new TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs();
        }

        public Builder(TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs defaults) {
            $ = new TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id (Updatable) The OCID of the compartment for including target databases to the target database group. All target databases in the compartment will be members of the target database group.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id (Updatable) The OCID of the compartment for including target databases to the target database group. All target databases in the compartment will be members of the target database group.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isIncludeSubtree (Updatable) This indicates whether the target databases of sub-compartments should also be included in the target database group. By default, this parameter is set to false.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeSubtree(@Nullable Output<Boolean> isIncludeSubtree) {
            $.isIncludeSubtree = isIncludeSubtree;
            return this;
        }

        /**
         * @param isIncludeSubtree (Updatable) This indicates whether the target databases of sub-compartments should also be included in the target database group. By default, this parameter is set to false.
         * 
         * @return builder
         * 
         */
        public Builder isIncludeSubtree(Boolean isIncludeSubtree) {
            return isIncludeSubtree(Output.of(isIncludeSubtree));
        }

        public TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("TargetDatabaseGroupMatchingCriteriaIncludeCompartmentArgs", "id");
            }
            return $;
        }
    }

}
