// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.inputs.TargetDatabasePeerTargetDatabaseDetailDatabaseDetailsArgs;
import com.pulumi.oci.DataSafe.inputs.TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetDatabasePeerTargetDatabaseDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetDatabasePeerTargetDatabaseDetailArgs Empty = new TargetDatabasePeerTargetDatabaseDetailArgs();

    /**
     * Details of the database for the registration in Data Safe.
     * 
     */
    @Import(name="databaseDetails", required=true)
    private Output<TargetDatabasePeerTargetDatabaseDetailDatabaseDetailsArgs> databaseDetails;

    /**
     * @return Details of the database for the registration in Data Safe.
     * 
     */
    public Output<TargetDatabasePeerTargetDatabaseDetailDatabaseDetailsArgs> databaseDetails() {
        return this.databaseDetails;
    }

    /**
     * The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
     * 
     */
    @Import(name="dataguardAssociationId")
    private @Nullable Output<String> dataguardAssociationId;

    /**
     * @return The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
     * 
     */
    public Optional<Output<String>> dataguardAssociationId() {
        return Optional.ofNullable(this.dataguardAssociationId);
    }

    /**
     * The description of the peer target database in Data Safe.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the peer target database in Data Safe.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) The details required to establish a TLS enabled connection.
     * 
     */
    @Import(name="tlsConfig")
    private @Nullable Output<TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs> tlsConfig;

    /**
     * @return (Updatable) The details required to establish a TLS enabled connection.
     * 
     */
    public Optional<Output<TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs>> tlsConfig() {
        return Optional.ofNullable(this.tlsConfig);
    }

    private TargetDatabasePeerTargetDatabaseDetailArgs() {}

    private TargetDatabasePeerTargetDatabaseDetailArgs(TargetDatabasePeerTargetDatabaseDetailArgs $) {
        this.databaseDetails = $.databaseDetails;
        this.dataguardAssociationId = $.dataguardAssociationId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.tlsConfig = $.tlsConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetDatabasePeerTargetDatabaseDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetDatabasePeerTargetDatabaseDetailArgs $;

        public Builder() {
            $ = new TargetDatabasePeerTargetDatabaseDetailArgs();
        }

        public Builder(TargetDatabasePeerTargetDatabaseDetailArgs defaults) {
            $ = new TargetDatabasePeerTargetDatabaseDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseDetails Details of the database for the registration in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder databaseDetails(Output<TargetDatabasePeerTargetDatabaseDetailDatabaseDetailsArgs> databaseDetails) {
            $.databaseDetails = databaseDetails;
            return this;
        }

        /**
         * @param databaseDetails Details of the database for the registration in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder databaseDetails(TargetDatabasePeerTargetDatabaseDetailDatabaseDetailsArgs databaseDetails) {
            return databaseDetails(Output.of(databaseDetails));
        }

        /**
         * @param dataguardAssociationId The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
         * 
         * @return builder
         * 
         */
        public Builder dataguardAssociationId(@Nullable Output<String> dataguardAssociationId) {
            $.dataguardAssociationId = dataguardAssociationId;
            return this;
        }

        /**
         * @param dataguardAssociationId The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
         * 
         * @return builder
         * 
         */
        public Builder dataguardAssociationId(String dataguardAssociationId) {
            return dataguardAssociationId(Output.of(dataguardAssociationId));
        }

        /**
         * @param description The description of the peer target database in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the peer target database in Data Safe.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param tlsConfig (Updatable) The details required to establish a TLS enabled connection.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfig(@Nullable Output<TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs> tlsConfig) {
            $.tlsConfig = tlsConfig;
            return this;
        }

        /**
         * @param tlsConfig (Updatable) The details required to establish a TLS enabled connection.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfig(TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs tlsConfig) {
            return tlsConfig(Output.of(tlsConfig));
        }

        public TargetDatabasePeerTargetDatabaseDetailArgs build() {
            if ($.databaseDetails == null) {
                throw new MissingRequiredPropertyException("TargetDatabasePeerTargetDatabaseDetailArgs", "databaseDetails");
            }
            return $;
        }
    }

}
