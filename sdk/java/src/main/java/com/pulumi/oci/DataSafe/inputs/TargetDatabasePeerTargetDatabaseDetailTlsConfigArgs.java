// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs Empty = new TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs();

    /**
     * The format of the certificate store.
     * 
     */
    @Import(name="certificateStoreType")
    private @Nullable Output<String> certificateStoreType;

    /**
     * @return The format of the certificate store.
     * 
     */
    public Optional<Output<String>> certificateStoreType() {
        return Optional.ofNullable(this.certificateStoreType);
    }

    /**
     * Base64 encoded string of key store file content.
     * 
     */
    @Import(name="keyStoreContent")
    private @Nullable Output<String> keyStoreContent;

    /**
     * @return Base64 encoded string of key store file content.
     * 
     */
    public Optional<Output<String>> keyStoreContent() {
        return Optional.ofNullable(this.keyStoreContent);
    }

    /**
     * Status to represent whether the database connection is TLS enabled or not.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Status to represent whether the database connection is TLS enabled or not.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * The password to read the trust store and key store files, if they are password protected.
     * 
     */
    @Import(name="storePassword")
    private @Nullable Output<String> storePassword;

    /**
     * @return The password to read the trust store and key store files, if they are password protected.
     * 
     */
    public Optional<Output<String>> storePassword() {
        return Optional.ofNullable(this.storePassword);
    }

    /**
     * Base64 encoded string of trust store file content.
     * 
     */
    @Import(name="trustStoreContent")
    private @Nullable Output<String> trustStoreContent;

    /**
     * @return Base64 encoded string of trust store file content.
     * 
     */
    public Optional<Output<String>> trustStoreContent() {
        return Optional.ofNullable(this.trustStoreContent);
    }

    private TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs() {}

    private TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs(TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs $) {
        this.certificateStoreType = $.certificateStoreType;
        this.keyStoreContent = $.keyStoreContent;
        this.status = $.status;
        this.storePassword = $.storePassword;
        this.trustStoreContent = $.trustStoreContent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs $;

        public Builder() {
            $ = new TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs();
        }

        public Builder(TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs defaults) {
            $ = new TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateStoreType The format of the certificate store.
         * 
         * @return builder
         * 
         */
        public Builder certificateStoreType(@Nullable Output<String> certificateStoreType) {
            $.certificateStoreType = certificateStoreType;
            return this;
        }

        /**
         * @param certificateStoreType The format of the certificate store.
         * 
         * @return builder
         * 
         */
        public Builder certificateStoreType(String certificateStoreType) {
            return certificateStoreType(Output.of(certificateStoreType));
        }

        /**
         * @param keyStoreContent Base64 encoded string of key store file content.
         * 
         * @return builder
         * 
         */
        public Builder keyStoreContent(@Nullable Output<String> keyStoreContent) {
            $.keyStoreContent = keyStoreContent;
            return this;
        }

        /**
         * @param keyStoreContent Base64 encoded string of key store file content.
         * 
         * @return builder
         * 
         */
        public Builder keyStoreContent(String keyStoreContent) {
            return keyStoreContent(Output.of(keyStoreContent));
        }

        /**
         * @param status Status to represent whether the database connection is TLS enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status to represent whether the database connection is TLS enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param storePassword The password to read the trust store and key store files, if they are password protected.
         * 
         * @return builder
         * 
         */
        public Builder storePassword(@Nullable Output<String> storePassword) {
            $.storePassword = storePassword;
            return this;
        }

        /**
         * @param storePassword The password to read the trust store and key store files, if they are password protected.
         * 
         * @return builder
         * 
         */
        public Builder storePassword(String storePassword) {
            return storePassword(Output.of(storePassword));
        }

        /**
         * @param trustStoreContent Base64 encoded string of trust store file content.
         * 
         * @return builder
         * 
         */
        public Builder trustStoreContent(@Nullable Output<String> trustStoreContent) {
            $.trustStoreContent = trustStoreContent;
            return this;
        }

        /**
         * @param trustStoreContent Base64 encoded string of trust store file content.
         * 
         * @return builder
         * 
         */
        public Builder trustStoreContent(String trustStoreContent) {
            return trustStoreContent(Output.of(trustStoreContent));
        }

        public TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs build() {
            if ($.status == null) {
                throw new MissingRequiredPropertyException("TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs", "status");
            }
            return $;
        }
    }

}
