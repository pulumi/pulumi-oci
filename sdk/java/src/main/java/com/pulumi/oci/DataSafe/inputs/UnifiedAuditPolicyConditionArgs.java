// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UnifiedAuditPolicyConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final UnifiedAuditPolicyConditionArgs Empty = new UnifiedAuditPolicyConditionArgs();

    /**
     * (Updatable) The OCID of the attribute set.
     * 
     */
    @Import(name="attributeSetId")
    private @Nullable Output<String> attributeSetId;

    /**
     * @return (Updatable) The OCID of the attribute set.
     * 
     */
    public Optional<Output<String>> attributeSetId() {
        return Optional.ofNullable(this.attributeSetId);
    }

    /**
     * (Updatable) Specifies whether to include or exclude the specified users or roles.
     * 
     */
    @Import(name="entitySelection", required=true)
    private Output<String> entitySelection;

    /**
     * @return (Updatable) Specifies whether to include or exclude the specified users or roles.
     * 
     */
    public Output<String> entitySelection() {
        return this.entitySelection;
    }

    /**
     * (Updatable) The type of users or roles that the unified audit policy is applied to.
     * 
     */
    @Import(name="entityType", required=true)
    private Output<String> entityType;

    /**
     * @return (Updatable) The type of users or roles that the unified audit policy is applied to.
     * 
     */
    public Output<String> entityType() {
        return this.entityType;
    }

    /**
     * (Updatable) The operation status that the policy must be enabled for.
     * 
     */
    @Import(name="operationStatus", required=true)
    private Output<String> operationStatus;

    /**
     * @return (Updatable) The operation status that the policy must be enabled for.
     * 
     */
    public Output<String> operationStatus() {
        return this.operationStatus;
    }

    /**
     * (Updatable) List of roles that the policy must be enabled for.
     * 
     */
    @Import(name="roleNames")
    private @Nullable Output<List<String>> roleNames;

    /**
     * @return (Updatable) List of roles that the policy must be enabled for.
     * 
     */
    public Optional<Output<List<String>>> roleNames() {
        return Optional.ofNullable(this.roleNames);
    }

    /**
     * (Updatable) The list of users that the unified audit policy is enabled for.
     * 
     */
    @Import(name="userNames")
    private @Nullable Output<List<String>> userNames;

    /**
     * @return (Updatable) The list of users that the unified audit policy is enabled for.
     * 
     */
    public Optional<Output<List<String>>> userNames() {
        return Optional.ofNullable(this.userNames);
    }

    private UnifiedAuditPolicyConditionArgs() {}

    private UnifiedAuditPolicyConditionArgs(UnifiedAuditPolicyConditionArgs $) {
        this.attributeSetId = $.attributeSetId;
        this.entitySelection = $.entitySelection;
        this.entityType = $.entityType;
        this.operationStatus = $.operationStatus;
        this.roleNames = $.roleNames;
        this.userNames = $.userNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UnifiedAuditPolicyConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UnifiedAuditPolicyConditionArgs $;

        public Builder() {
            $ = new UnifiedAuditPolicyConditionArgs();
        }

        public Builder(UnifiedAuditPolicyConditionArgs defaults) {
            $ = new UnifiedAuditPolicyConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributeSetId (Updatable) The OCID of the attribute set.
         * 
         * @return builder
         * 
         */
        public Builder attributeSetId(@Nullable Output<String> attributeSetId) {
            $.attributeSetId = attributeSetId;
            return this;
        }

        /**
         * @param attributeSetId (Updatable) The OCID of the attribute set.
         * 
         * @return builder
         * 
         */
        public Builder attributeSetId(String attributeSetId) {
            return attributeSetId(Output.of(attributeSetId));
        }

        /**
         * @param entitySelection (Updatable) Specifies whether to include or exclude the specified users or roles.
         * 
         * @return builder
         * 
         */
        public Builder entitySelection(Output<String> entitySelection) {
            $.entitySelection = entitySelection;
            return this;
        }

        /**
         * @param entitySelection (Updatable) Specifies whether to include or exclude the specified users or roles.
         * 
         * @return builder
         * 
         */
        public Builder entitySelection(String entitySelection) {
            return entitySelection(Output.of(entitySelection));
        }

        /**
         * @param entityType (Updatable) The type of users or roles that the unified audit policy is applied to.
         * 
         * @return builder
         * 
         */
        public Builder entityType(Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param entityType (Updatable) The type of users or roles that the unified audit policy is applied to.
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        /**
         * @param operationStatus (Updatable) The operation status that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder operationStatus(Output<String> operationStatus) {
            $.operationStatus = operationStatus;
            return this;
        }

        /**
         * @param operationStatus (Updatable) The operation status that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder operationStatus(String operationStatus) {
            return operationStatus(Output.of(operationStatus));
        }

        /**
         * @param roleNames (Updatable) List of roles that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder roleNames(@Nullable Output<List<String>> roleNames) {
            $.roleNames = roleNames;
            return this;
        }

        /**
         * @param roleNames (Updatable) List of roles that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder roleNames(List<String> roleNames) {
            return roleNames(Output.of(roleNames));
        }

        /**
         * @param roleNames (Updatable) List of roles that the policy must be enabled for.
         * 
         * @return builder
         * 
         */
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }

        /**
         * @param userNames (Updatable) The list of users that the unified audit policy is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder userNames(@Nullable Output<List<String>> userNames) {
            $.userNames = userNames;
            return this;
        }

        /**
         * @param userNames (Updatable) The list of users that the unified audit policy is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder userNames(List<String> userNames) {
            return userNames(Output.of(userNames));
        }

        /**
         * @param userNames (Updatable) The list of users that the unified audit policy is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder userNames(String... userNames) {
            return userNames(List.of(userNames));
        }

        public UnifiedAuditPolicyConditionArgs build() {
            if ($.entitySelection == null) {
                throw new MissingRequiredPropertyException("UnifiedAuditPolicyConditionArgs", "entitySelection");
            }
            if ($.entityType == null) {
                throw new MissingRequiredPropertyException("UnifiedAuditPolicyConditionArgs", "entityType");
            }
            if ($.operationStatus == null) {
                throw new MissingRequiredPropertyException("UnifiedAuditPolicyConditionArgs", "operationStatus");
            }
            return $;
        }
    }

}
