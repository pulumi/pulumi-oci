// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuditPolicyAuditConditionEnableCondition {
    /**
     * @return List of users or roles that the policy must be enabled for.
     * 
     */
    private @Nullable List<String> entityNames;
    /**
     * @return The entity include or exclude selection.
     * 
     */
    private @Nullable String entitySelection;
    /**
     * @return The entity type that the policy must be enabled for.
     * 
     */
    private @Nullable String entityType;
    /**
     * @return The operation status that the policy must be enabled for.
     * 
     */
    private @Nullable String operationStatus;

    private AuditPolicyAuditConditionEnableCondition() {}
    /**
     * @return List of users or roles that the policy must be enabled for.
     * 
     */
    public List<String> entityNames() {
        return this.entityNames == null ? List.of() : this.entityNames;
    }
    /**
     * @return The entity include or exclude selection.
     * 
     */
    public Optional<String> entitySelection() {
        return Optional.ofNullable(this.entitySelection);
    }
    /**
     * @return The entity type that the policy must be enabled for.
     * 
     */
    public Optional<String> entityType() {
        return Optional.ofNullable(this.entityType);
    }
    /**
     * @return The operation status that the policy must be enabled for.
     * 
     */
    public Optional<String> operationStatus() {
        return Optional.ofNullable(this.operationStatus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuditPolicyAuditConditionEnableCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> entityNames;
        private @Nullable String entitySelection;
        private @Nullable String entityType;
        private @Nullable String operationStatus;
        public Builder() {}
        public Builder(AuditPolicyAuditConditionEnableCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entityNames = defaults.entityNames;
    	      this.entitySelection = defaults.entitySelection;
    	      this.entityType = defaults.entityType;
    	      this.operationStatus = defaults.operationStatus;
        }

        @CustomType.Setter
        public Builder entityNames(@Nullable List<String> entityNames) {
            this.entityNames = entityNames;
            return this;
        }
        public Builder entityNames(String... entityNames) {
            return entityNames(List.of(entityNames));
        }
        @CustomType.Setter
        public Builder entitySelection(@Nullable String entitySelection) {
            this.entitySelection = entitySelection;
            return this;
        }
        @CustomType.Setter
        public Builder entityType(@Nullable String entityType) {
            this.entityType = entityType;
            return this;
        }
        @CustomType.Setter
        public Builder operationStatus(@Nullable String operationStatus) {
            this.operationStatus = operationStatus;
            return this;
        }
        public AuditPolicyAuditConditionEnableCondition build() {
            final var o = new AuditPolicyAuditConditionEnableCondition();
            o.entityNames = entityNames;
            o.entitySelection = entitySelection;
            o.entityType = entityType;
            o.operationStatus = operationStatus;
            return o;
        }
    }
}
