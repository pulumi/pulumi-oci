// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetAttributeSetsAttributeSetCollection;
import com.pulumi.oci.DataSafe.outputs.GetAttributeSetsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAttributeSetsResult {
    private @Nullable String accessLevel;
    /**
     * @return The list of attribute_set_collection.
     * 
     */
    private List<GetAttributeSetsAttributeSetCollection> attributeSetCollections;
    private @Nullable String attributeSetId;
    /**
     * @return The type of attribute set.
     * 
     */
    private @Nullable String attributeSetType;
    /**
     * @return The OCID of the compartment where the attribute set is stored.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The display name of an attribute set. The name does not have to be unique, and is changeable.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetAttributeSetsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the attribute set is in use by other resource.
     * 
     */
    private @Nullable String inUse;
    /**
     * @return A boolean flag indicating to list user defined or seeded attribute sets.
     * 
     */
    private @Nullable Boolean isUserDefined;
    /**
     * @return The current state of an attribute set.
     * 
     */
    private @Nullable String state;

    private GetAttributeSetsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The list of attribute_set_collection.
     * 
     */
    public List<GetAttributeSetsAttributeSetCollection> attributeSetCollections() {
        return this.attributeSetCollections;
    }
    public Optional<String> attributeSetId() {
        return Optional.ofNullable(this.attributeSetId);
    }
    /**
     * @return The type of attribute set.
     * 
     */
    public Optional<String> attributeSetType() {
        return Optional.ofNullable(this.attributeSetType);
    }
    /**
     * @return The OCID of the compartment where the attribute set is stored.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The display name of an attribute set. The name does not have to be unique, and is changeable.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAttributeSetsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the attribute set is in use by other resource.
     * 
     */
    public Optional<String> inUse() {
        return Optional.ofNullable(this.inUse);
    }
    /**
     * @return A boolean flag indicating to list user defined or seeded attribute sets.
     * 
     */
    public Optional<Boolean> isUserDefined() {
        return Optional.ofNullable(this.isUserDefined);
    }
    /**
     * @return The current state of an attribute set.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAttributeSetsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private List<GetAttributeSetsAttributeSetCollection> attributeSetCollections;
        private @Nullable String attributeSetId;
        private @Nullable String attributeSetType;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetAttributeSetsFilter> filters;
        private String id;
        private @Nullable String inUse;
        private @Nullable Boolean isUserDefined;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetAttributeSetsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.attributeSetCollections = defaults.attributeSetCollections;
    	      this.attributeSetId = defaults.attributeSetId;
    	      this.attributeSetType = defaults.attributeSetType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.inUse = defaults.inUse;
    	      this.isUserDefined = defaults.isUserDefined;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder attributeSetCollections(List<GetAttributeSetsAttributeSetCollection> attributeSetCollections) {
            if (attributeSetCollections == null) {
              throw new MissingRequiredPropertyException("GetAttributeSetsResult", "attributeSetCollections");
            }
            this.attributeSetCollections = attributeSetCollections;
            return this;
        }
        public Builder attributeSetCollections(GetAttributeSetsAttributeSetCollection... attributeSetCollections) {
            return attributeSetCollections(List.of(attributeSetCollections));
        }
        @CustomType.Setter
        public Builder attributeSetId(@Nullable String attributeSetId) {

            this.attributeSetId = attributeSetId;
            return this;
        }
        @CustomType.Setter
        public Builder attributeSetType(@Nullable String attributeSetType) {

            this.attributeSetType = attributeSetType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAttributeSetsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAttributeSetsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAttributeSetsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAttributeSetsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inUse(@Nullable String inUse) {

            this.inUse = inUse;
            return this;
        }
        @CustomType.Setter
        public Builder isUserDefined(@Nullable Boolean isUserDefined) {

            this.isUserDefined = isUserDefined;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetAttributeSetsResult build() {
            final var _resultValue = new GetAttributeSetsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.attributeSetCollections = attributeSetCollections;
            _resultValue.attributeSetId = attributeSetId;
            _resultValue.attributeSetType = attributeSetType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.inUse = inUse;
            _resultValue.isUserDefined = isUserDefined;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
