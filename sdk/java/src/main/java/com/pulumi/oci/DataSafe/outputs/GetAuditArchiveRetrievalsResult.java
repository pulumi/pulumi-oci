// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetAuditArchiveRetrievalsAuditArchiveRetrievalCollection;
import com.pulumi.oci.DataSafe.outputs.GetAuditArchiveRetrievalsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuditArchiveRetrievalsResult {
    private @Nullable String accessLevel;
    /**
     * @return The list of audit_archive_retrieval_collection.
     * 
     */
    private List<GetAuditArchiveRetrievalsAuditArchiveRetrievalCollection> auditArchiveRetrievalCollections;
    private @Nullable String auditArchiveRetrievalId;
    /**
     * @return The OCID of the compartment that contains archive retrieval.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The display name of the archive retrieval. The name does not have to be unique, and is changeable.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetAuditArchiveRetrievalsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current state of the archive retrieval.
     * 
     */
    private @Nullable String state;
    private @Nullable String targetDatabaseGroupId;
    /**
     * @return The OCID of the target associated with the archive retrieval.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The date time when retrieved archive data will be deleted from Data Safe and unloaded back into archival.
     * 
     */
    private @Nullable String timeOfExpiry;

    private GetAuditArchiveRetrievalsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The list of audit_archive_retrieval_collection.
     * 
     */
    public List<GetAuditArchiveRetrievalsAuditArchiveRetrievalCollection> auditArchiveRetrievalCollections() {
        return this.auditArchiveRetrievalCollections;
    }
    public Optional<String> auditArchiveRetrievalId() {
        return Optional.ofNullable(this.auditArchiveRetrievalId);
    }
    /**
     * @return The OCID of the compartment that contains archive retrieval.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The display name of the archive retrieval. The name does not have to be unique, and is changeable.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAuditArchiveRetrievalsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of the archive retrieval.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> targetDatabaseGroupId() {
        return Optional.ofNullable(this.targetDatabaseGroupId);
    }
    /**
     * @return The OCID of the target associated with the archive retrieval.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The date time when retrieved archive data will be deleted from Data Safe and unloaded back into archival.
     * 
     */
    public Optional<String> timeOfExpiry() {
        return Optional.ofNullable(this.timeOfExpiry);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditArchiveRetrievalsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private List<GetAuditArchiveRetrievalsAuditArchiveRetrievalCollection> auditArchiveRetrievalCollections;
        private @Nullable String auditArchiveRetrievalId;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetAuditArchiveRetrievalsFilter> filters;
        private String id;
        private @Nullable String state;
        private @Nullable String targetDatabaseGroupId;
        private @Nullable String targetId;
        private @Nullable String timeOfExpiry;
        public Builder() {}
        public Builder(GetAuditArchiveRetrievalsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.auditArchiveRetrievalCollections = defaults.auditArchiveRetrievalCollections;
    	      this.auditArchiveRetrievalId = defaults.auditArchiveRetrievalId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.targetDatabaseGroupId = defaults.targetDatabaseGroupId;
    	      this.targetId = defaults.targetId;
    	      this.timeOfExpiry = defaults.timeOfExpiry;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder auditArchiveRetrievalCollections(List<GetAuditArchiveRetrievalsAuditArchiveRetrievalCollection> auditArchiveRetrievalCollections) {
            if (auditArchiveRetrievalCollections == null) {
              throw new MissingRequiredPropertyException("GetAuditArchiveRetrievalsResult", "auditArchiveRetrievalCollections");
            }
            this.auditArchiveRetrievalCollections = auditArchiveRetrievalCollections;
            return this;
        }
        public Builder auditArchiveRetrievalCollections(GetAuditArchiveRetrievalsAuditArchiveRetrievalCollection... auditArchiveRetrievalCollections) {
            return auditArchiveRetrievalCollections(List.of(auditArchiveRetrievalCollections));
        }
        @CustomType.Setter
        public Builder auditArchiveRetrievalId(@Nullable String auditArchiveRetrievalId) {

            this.auditArchiveRetrievalId = auditArchiveRetrievalId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAuditArchiveRetrievalsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAuditArchiveRetrievalsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAuditArchiveRetrievalsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuditArchiveRetrievalsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseGroupId(@Nullable String targetDatabaseGroupId) {

            this.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfExpiry(@Nullable String timeOfExpiry) {

            this.timeOfExpiry = timeOfExpiry;
            return this;
        }
        public GetAuditArchiveRetrievalsResult build() {
            final var _resultValue = new GetAuditArchiveRetrievalsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.auditArchiveRetrievalCollections = auditArchiveRetrievalCollections;
            _resultValue.auditArchiveRetrievalId = auditArchiveRetrievalId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.targetDatabaseGroupId = targetDatabaseGroupId;
            _resultValue.targetId = targetId;
            _resultValue.timeOfExpiry = timeOfExpiry;
            return _resultValue;
        }
    }
}
