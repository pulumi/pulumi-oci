// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAuditEventItem {
    /**
     * @return The action taken for this audit event.
     * 
     */
    private String actionTaken;
    /**
     * @return Time of audit event occurrence in the target database.
     * 
     */
    private String auditEventTime;
    /**
     * @return The location of the audit. Currently the value is audit table.
     * 
     */
    private String auditLocation;
    /**
     * @return Comma-seperated list of audit policies that caused the current audit event.
     * 
     */
    private String auditPolicies;
    /**
     * @return The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
     * 
     */
    private String auditTrailId;
    /**
     * @return Type of auditing.
     * 
     */
    private String auditType;
    /**
     * @return Name of the host machine from which the session was spawned.
     * 
     */
    private String clientHostname;
    /**
     * @return The client identifier in each Oracle session.
     * 
     */
    private String clientId;
    /**
     * @return IP address of the host from which the session was spawned.
     * 
     */
    private String clientIp;
    /**
     * @return The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
     * 
     */
    private String clientProgram;
    /**
     * @return List of bind variables associated with the command text.
     * 
     */
    private String commandParam;
    /**
     * @return The SQL associated with the audit event.
     * 
     */
    private String commandText;
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return The type of the target database that was audited. Allowed values are
     * * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
     * * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
     * * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
     * 
     */
    private String databaseType;
    /**
     * @return Name of the database user whose actions were audited.
     * 
     */
    private String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Oracle Error code generated by the action. Zero indicates the action was successful.
     * 
     */
    private String errorCode;
    /**
     * @return Detailed message on why the Error occurred.
     * 
     */
    private String errorMessage;
    /**
     * @return Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
     * 
     */
    private String eventName;
    /**
     * @return List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
     * 
     */
    private String extendedEventAttributes;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the audit event.
     * 
     */
    private String id;
    /**
     * @return Indicates whether an alert was raised for this audit event.
     * 
     */
    private Boolean isAlerted;
    /**
     * @return Name of the object affected by the action.
     * 
     */
    private String object;
    /**
     * @return Schema name of object affected but the action.
     * 
     */
    private String objectOwner;
    /**
     * @return Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
     * 
     */
    private String objectType;
    /**
     * @return Name of the action executed by the user on the target database. i.e ALTER, CREATE, DROP.
     * 
     */
    private String operation;
    /**
     * @return Indicates whether the operation was a success or a failure.
     * 
     */
    private String operationStatus;
    /**
     * @return The operating system terminal of the user session.
     * 
     */
    private String osTerminal;
    /**
     * @return Name of the operating system user for the database session.
     * 
     */
    private String osUserName;
    /**
     * @return Class of the target that was audited.
     * 
     */
    private String targetClass;
    /**
     * @return The OCID of the target database that was audited.
     * 
     */
    private String targetId;
    /**
     * @return The name of the target database that was audited.
     * 
     */
    private String targetName;
    /**
     * @return Timestamp when this audit event was collected from the target database by Data Safe.
     * 
     */
    private String timeCollected;

    private GetAuditEventItem() {}
    /**
     * @return The action taken for this audit event.
     * 
     */
    public String actionTaken() {
        return this.actionTaken;
    }
    /**
     * @return Time of audit event occurrence in the target database.
     * 
     */
    public String auditEventTime() {
        return this.auditEventTime;
    }
    /**
     * @return The location of the audit. Currently the value is audit table.
     * 
     */
    public String auditLocation() {
        return this.auditLocation;
    }
    /**
     * @return Comma-seperated list of audit policies that caused the current audit event.
     * 
     */
    public String auditPolicies() {
        return this.auditPolicies;
    }
    /**
     * @return The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
     * 
     */
    public String auditTrailId() {
        return this.auditTrailId;
    }
    /**
     * @return Type of auditing.
     * 
     */
    public String auditType() {
        return this.auditType;
    }
    /**
     * @return Name of the host machine from which the session was spawned.
     * 
     */
    public String clientHostname() {
        return this.clientHostname;
    }
    /**
     * @return The client identifier in each Oracle session.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return IP address of the host from which the session was spawned.
     * 
     */
    public String clientIp() {
        return this.clientIp;
    }
    /**
     * @return The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
     * 
     */
    public String clientProgram() {
        return this.clientProgram;
    }
    /**
     * @return List of bind variables associated with the command text.
     * 
     */
    public String commandParam() {
        return this.commandParam;
    }
    /**
     * @return The SQL associated with the audit event.
     * 
     */
    public String commandText() {
        return this.commandText;
    }
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The type of the target database that was audited. Allowed values are
     * * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
     * * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
     * * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return Name of the database user whose actions were audited.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Oracle Error code generated by the action. Zero indicates the action was successful.
     * 
     */
    public String errorCode() {
        return this.errorCode;
    }
    /**
     * @return Detailed message on why the Error occurred.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
     * 
     */
    public String eventName() {
        return this.eventName;
    }
    /**
     * @return List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
     * 
     */
    public String extendedEventAttributes() {
        return this.extendedEventAttributes;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the audit event.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether an alert was raised for this audit event.
     * 
     */
    public Boolean isAlerted() {
        return this.isAlerted;
    }
    /**
     * @return Name of the object affected by the action.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return Schema name of object affected but the action.
     * 
     */
    public String objectOwner() {
        return this.objectOwner;
    }
    /**
     * @return Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    /**
     * @return Name of the action executed by the user on the target database. i.e ALTER, CREATE, DROP.
     * 
     */
    public String operation() {
        return this.operation;
    }
    /**
     * @return Indicates whether the operation was a success or a failure.
     * 
     */
    public String operationStatus() {
        return this.operationStatus;
    }
    /**
     * @return The operating system terminal of the user session.
     * 
     */
    public String osTerminal() {
        return this.osTerminal;
    }
    /**
     * @return Name of the operating system user for the database session.
     * 
     */
    public String osUserName() {
        return this.osUserName;
    }
    /**
     * @return Class of the target that was audited.
     * 
     */
    public String targetClass() {
        return this.targetClass;
    }
    /**
     * @return The OCID of the target database that was audited.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The name of the target database that was audited.
     * 
     */
    public String targetName() {
        return this.targetName;
    }
    /**
     * @return Timestamp when this audit event was collected from the target database by Data Safe.
     * 
     */
    public String timeCollected() {
        return this.timeCollected;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditEventItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String actionTaken;
        private String auditEventTime;
        private String auditLocation;
        private String auditPolicies;
        private String auditTrailId;
        private String auditType;
        private String clientHostname;
        private String clientId;
        private String clientIp;
        private String clientProgram;
        private String commandParam;
        private String commandText;
        private String compartmentId;
        private String databaseType;
        private String dbUserName;
        private Map<String,String> definedTags;
        private String errorCode;
        private String errorMessage;
        private String eventName;
        private String extendedEventAttributes;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isAlerted;
        private String object;
        private String objectOwner;
        private String objectType;
        private String operation;
        private String operationStatus;
        private String osTerminal;
        private String osUserName;
        private String targetClass;
        private String targetId;
        private String targetName;
        private String timeCollected;
        public Builder() {}
        public Builder(GetAuditEventItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionTaken = defaults.actionTaken;
    	      this.auditEventTime = defaults.auditEventTime;
    	      this.auditLocation = defaults.auditLocation;
    	      this.auditPolicies = defaults.auditPolicies;
    	      this.auditTrailId = defaults.auditTrailId;
    	      this.auditType = defaults.auditType;
    	      this.clientHostname = defaults.clientHostname;
    	      this.clientId = defaults.clientId;
    	      this.clientIp = defaults.clientIp;
    	      this.clientProgram = defaults.clientProgram;
    	      this.commandParam = defaults.commandParam;
    	      this.commandText = defaults.commandText;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseType = defaults.databaseType;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.eventName = defaults.eventName;
    	      this.extendedEventAttributes = defaults.extendedEventAttributes;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isAlerted = defaults.isAlerted;
    	      this.object = defaults.object;
    	      this.objectOwner = defaults.objectOwner;
    	      this.objectType = defaults.objectType;
    	      this.operation = defaults.operation;
    	      this.operationStatus = defaults.operationStatus;
    	      this.osTerminal = defaults.osTerminal;
    	      this.osUserName = defaults.osUserName;
    	      this.targetClass = defaults.targetClass;
    	      this.targetId = defaults.targetId;
    	      this.targetName = defaults.targetName;
    	      this.timeCollected = defaults.timeCollected;
        }

        @CustomType.Setter
        public Builder actionTaken(String actionTaken) {
            if (actionTaken == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "actionTaken");
            }
            this.actionTaken = actionTaken;
            return this;
        }
        @CustomType.Setter
        public Builder auditEventTime(String auditEventTime) {
            if (auditEventTime == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "auditEventTime");
            }
            this.auditEventTime = auditEventTime;
            return this;
        }
        @CustomType.Setter
        public Builder auditLocation(String auditLocation) {
            if (auditLocation == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "auditLocation");
            }
            this.auditLocation = auditLocation;
            return this;
        }
        @CustomType.Setter
        public Builder auditPolicies(String auditPolicies) {
            if (auditPolicies == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "auditPolicies");
            }
            this.auditPolicies = auditPolicies;
            return this;
        }
        @CustomType.Setter
        public Builder auditTrailId(String auditTrailId) {
            if (auditTrailId == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "auditTrailId");
            }
            this.auditTrailId = auditTrailId;
            return this;
        }
        @CustomType.Setter
        public Builder auditType(String auditType) {
            if (auditType == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "auditType");
            }
            this.auditType = auditType;
            return this;
        }
        @CustomType.Setter
        public Builder clientHostname(String clientHostname) {
            if (clientHostname == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "clientHostname");
            }
            this.clientHostname = clientHostname;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientIp(String clientIp) {
            if (clientIp == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "clientIp");
            }
            this.clientIp = clientIp;
            return this;
        }
        @CustomType.Setter
        public Builder clientProgram(String clientProgram) {
            if (clientProgram == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "clientProgram");
            }
            this.clientProgram = clientProgram;
            return this;
        }
        @CustomType.Setter
        public Builder commandParam(String commandParam) {
            if (commandParam == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "commandParam");
            }
            this.commandParam = commandParam;
            return this;
        }
        @CustomType.Setter
        public Builder commandText(String commandText) {
            if (commandText == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "commandText");
            }
            this.commandText = commandText;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(String dbUserName) {
            if (dbUserName == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "dbUserName");
            }
            this.dbUserName = dbUserName;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder errorCode(String errorCode) {
            if (errorCode == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "errorCode");
            }
            this.errorCode = errorCode;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder eventName(String eventName) {
            if (eventName == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "eventName");
            }
            this.eventName = eventName;
            return this;
        }
        @CustomType.Setter
        public Builder extendedEventAttributes(String extendedEventAttributes) {
            if (extendedEventAttributes == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "extendedEventAttributes");
            }
            this.extendedEventAttributes = extendedEventAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAlerted(Boolean isAlerted) {
            if (isAlerted == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "isAlerted");
            }
            this.isAlerted = isAlerted;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectOwner(String objectOwner) {
            if (objectOwner == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "objectOwner");
            }
            this.objectOwner = objectOwner;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(String objectType) {
            if (objectType == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "objectType");
            }
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder operation(String operation) {
            if (operation == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "operation");
            }
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder operationStatus(String operationStatus) {
            if (operationStatus == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "operationStatus");
            }
            this.operationStatus = operationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder osTerminal(String osTerminal) {
            if (osTerminal == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "osTerminal");
            }
            this.osTerminal = osTerminal;
            return this;
        }
        @CustomType.Setter
        public Builder osUserName(String osUserName) {
            if (osUserName == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "osUserName");
            }
            this.osUserName = osUserName;
            return this;
        }
        @CustomType.Setter
        public Builder targetClass(String targetClass) {
            if (targetClass == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "targetClass");
            }
            this.targetClass = targetClass;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetName(String targetName) {
            if (targetName == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "targetName");
            }
            this.targetName = targetName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCollected(String timeCollected) {
            if (timeCollected == null) {
              throw new MissingRequiredPropertyException("GetAuditEventItem", "timeCollected");
            }
            this.timeCollected = timeCollected;
            return this;
        }
        public GetAuditEventItem build() {
            final var _resultValue = new GetAuditEventItem();
            _resultValue.actionTaken = actionTaken;
            _resultValue.auditEventTime = auditEventTime;
            _resultValue.auditLocation = auditLocation;
            _resultValue.auditPolicies = auditPolicies;
            _resultValue.auditTrailId = auditTrailId;
            _resultValue.auditType = auditType;
            _resultValue.clientHostname = clientHostname;
            _resultValue.clientId = clientId;
            _resultValue.clientIp = clientIp;
            _resultValue.clientProgram = clientProgram;
            _resultValue.commandParam = commandParam;
            _resultValue.commandText = commandText;
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseType = databaseType;
            _resultValue.dbUserName = dbUserName;
            _resultValue.definedTags = definedTags;
            _resultValue.errorCode = errorCode;
            _resultValue.errorMessage = errorMessage;
            _resultValue.eventName = eventName;
            _resultValue.extendedEventAttributes = extendedEventAttributes;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isAlerted = isAlerted;
            _resultValue.object = object;
            _resultValue.objectOwner = objectOwner;
            _resultValue.objectType = objectType;
            _resultValue.operation = operation;
            _resultValue.operationStatus = operationStatus;
            _resultValue.osTerminal = osTerminal;
            _resultValue.osUserName = osUserName;
            _resultValue.targetClass = targetClass;
            _resultValue.targetId = targetId;
            _resultValue.targetName = targetName;
            _resultValue.timeCollected = timeCollected;
            return _resultValue;
        }
    }
}
