// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetAuditEventsAuditEventCollection;
import com.pulumi.oci.DataSafe.outputs.GetAuditEventsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuditEventsResult {
    private @Nullable String accessLevel;
    /**
     * @return The list of audit_event_collection.
     * 
     */
    private List<GetAuditEventsAuditEventCollection> auditEventCollections;
    /**
     * @return The OCID of the compartment containing the audit event. The compartment is the same as that of audit profile of the target database resource.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<GetAuditEventsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String scimQuery;

    private GetAuditEventsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The list of audit_event_collection.
     * 
     */
    public List<GetAuditEventsAuditEventCollection> auditEventCollections() {
        return this.auditEventCollections;
    }
    /**
     * @return The OCID of the compartment containing the audit event. The compartment is the same as that of audit profile of the target database resource.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<GetAuditEventsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> scimQuery() {
        return Optional.ofNullable(this.scimQuery);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditEventsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private List<GetAuditEventsAuditEventCollection> auditEventCollections;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<GetAuditEventsFilter> filters;
        private String id;
        private @Nullable String scimQuery;
        public Builder() {}
        public Builder(GetAuditEventsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.auditEventCollections = defaults.auditEventCollections;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.scimQuery = defaults.scimQuery;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder auditEventCollections(List<GetAuditEventsAuditEventCollection> auditEventCollections) {
            if (auditEventCollections == null) {
              throw new MissingRequiredPropertyException("GetAuditEventsResult", "auditEventCollections");
            }
            this.auditEventCollections = auditEventCollections;
            return this;
        }
        public Builder auditEventCollections(GetAuditEventsAuditEventCollection... auditEventCollections) {
            return auditEventCollections(List.of(auditEventCollections));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAuditEventsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAuditEventsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAuditEventsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuditEventsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder scimQuery(@Nullable String scimQuery) {

            this.scimQuery = scimQuery;
            return this;
        }
        public GetAuditEventsResult build() {
            final var _resultValue = new GetAuditEventsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.auditEventCollections = auditEventCollections;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.scimQuery = scimQuery;
            return _resultValue;
        }
    }
}
