// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition {
    /**
     * @return List of users or roles that the policy must be enabled for.
     * 
     */
    private List<String> entityNames;
    /**
     * @return The entity include or exclude selection.
     * 
     */
    private String entitySelection;
    /**
     * @return The entity type that the policy must be enabled for.
     * 
     */
    private String entityType;
    /**
     * @return The operation status that the policy must be enabled for.
     * 
     */
    private String operationStatus;

    private GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition() {}
    /**
     * @return List of users or roles that the policy must be enabled for.
     * 
     */
    public List<String> entityNames() {
        return this.entityNames;
    }
    /**
     * @return The entity include or exclude selection.
     * 
     */
    public String entitySelection() {
        return this.entitySelection;
    }
    /**
     * @return The entity type that the policy must be enabled for.
     * 
     */
    public String entityType() {
        return this.entityType;
    }
    /**
     * @return The operation status that the policy must be enabled for.
     * 
     */
    public String operationStatus() {
        return this.operationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> entityNames;
        private String entitySelection;
        private String entityType;
        private String operationStatus;
        public Builder() {}
        public Builder(GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entityNames = defaults.entityNames;
    	      this.entitySelection = defaults.entitySelection;
    	      this.entityType = defaults.entityType;
    	      this.operationStatus = defaults.operationStatus;
        }

        @CustomType.Setter
        public Builder entityNames(List<String> entityNames) {
            if (entityNames == null) {
              throw new MissingRequiredPropertyException("GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition", "entityNames");
            }
            this.entityNames = entityNames;
            return this;
        }
        public Builder entityNames(String... entityNames) {
            return entityNames(List.of(entityNames));
        }
        @CustomType.Setter
        public Builder entitySelection(String entitySelection) {
            if (entitySelection == null) {
              throw new MissingRequiredPropertyException("GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition", "entitySelection");
            }
            this.entitySelection = entitySelection;
            return this;
        }
        @CustomType.Setter
        public Builder entityType(String entityType) {
            if (entityType == null) {
              throw new MissingRequiredPropertyException("GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition", "entityType");
            }
            this.entityType = entityType;
            return this;
        }
        @CustomType.Setter
        public Builder operationStatus(String operationStatus) {
            if (operationStatus == null) {
              throw new MissingRequiredPropertyException("GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition", "operationStatus");
            }
            this.operationStatus = operationStatus;
            return this;
        }
        public GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition build() {
            final var _resultValue = new GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition();
            _resultValue.entityNames = entityNames;
            _resultValue.entitySelection = entitySelection;
            _resultValue.entityType = entityType;
            _resultValue.operationStatus = operationStatus;
            return _resultValue;
        }
    }
}
