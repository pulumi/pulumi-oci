// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem {
    /**
     * @return The OCID of the audit.
     * 
     */
    private String auditProfileId;
    /**
     * @return The OCID of the audit trail.
     * 
     */
    private String auditTrailId;
    /**
     * @return Unique name of the database associated to the peer target database.
     * 
     */
    private String databaseUniqueName;
    /**
     * @return Represents the month under consideration for which aggregated audit data volume available at the target is computed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
     * 
     */
    private String monthInConsideration;
    /**
     * @return The audit trail location.
     * 
     */
    private String trailLocation;
    /**
     * @return Represents the aggregated audit data volume available in the audit trails on the target database which is yet to be collected by Data Safe for the specified month.
     * 
     */
    private String volume;

    private GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem() {}
    /**
     * @return The OCID of the audit.
     * 
     */
    public String auditProfileId() {
        return this.auditProfileId;
    }
    /**
     * @return The OCID of the audit trail.
     * 
     */
    public String auditTrailId() {
        return this.auditTrailId;
    }
    /**
     * @return Unique name of the database associated to the peer target database.
     * 
     */
    public String databaseUniqueName() {
        return this.databaseUniqueName;
    }
    /**
     * @return Represents the month under consideration for which aggregated audit data volume available at the target is computed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
     * 
     */
    public String monthInConsideration() {
        return this.monthInConsideration;
    }
    /**
     * @return The audit trail location.
     * 
     */
    public String trailLocation() {
        return this.trailLocation;
    }
    /**
     * @return Represents the aggregated audit data volume available in the audit trails on the target database which is yet to be collected by Data Safe for the specified month.
     * 
     */
    public String volume() {
        return this.volume;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String auditProfileId;
        private String auditTrailId;
        private String databaseUniqueName;
        private String monthInConsideration;
        private String trailLocation;
        private String volume;
        public Builder() {}
        public Builder(GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditProfileId = defaults.auditProfileId;
    	      this.auditTrailId = defaults.auditTrailId;
    	      this.databaseUniqueName = defaults.databaseUniqueName;
    	      this.monthInConsideration = defaults.monthInConsideration;
    	      this.trailLocation = defaults.trailLocation;
    	      this.volume = defaults.volume;
        }

        @CustomType.Setter
        public Builder auditProfileId(String auditProfileId) {
            if (auditProfileId == null) {
              throw new MissingRequiredPropertyException("GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem", "auditProfileId");
            }
            this.auditProfileId = auditProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder auditTrailId(String auditTrailId) {
            if (auditTrailId == null) {
              throw new MissingRequiredPropertyException("GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem", "auditTrailId");
            }
            this.auditTrailId = auditTrailId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseUniqueName(String databaseUniqueName) {
            if (databaseUniqueName == null) {
              throw new MissingRequiredPropertyException("GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem", "databaseUniqueName");
            }
            this.databaseUniqueName = databaseUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder monthInConsideration(String monthInConsideration) {
            if (monthInConsideration == null) {
              throw new MissingRequiredPropertyException("GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem", "monthInConsideration");
            }
            this.monthInConsideration = monthInConsideration;
            return this;
        }
        @CustomType.Setter
        public Builder trailLocation(String trailLocation) {
            if (trailLocation == null) {
              throw new MissingRequiredPropertyException("GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem", "trailLocation");
            }
            this.trailLocation = trailLocation;
            return this;
        }
        @CustomType.Setter
        public Builder volume(String volume) {
            if (volume == null) {
              throw new MissingRequiredPropertyException("GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem", "volume");
            }
            this.volume = volume;
            return this;
        }
        public GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem build() {
            final var _resultValue = new GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem();
            _resultValue.auditProfileId = auditProfileId;
            _resultValue.auditTrailId = auditTrailId;
            _resultValue.databaseUniqueName = databaseUniqueName;
            _resultValue.monthInConsideration = monthInConsideration;
            _resultValue.trailLocation = trailLocation;
            _resultValue.volume = volume;
            return _resultValue;
        }
    }
}
