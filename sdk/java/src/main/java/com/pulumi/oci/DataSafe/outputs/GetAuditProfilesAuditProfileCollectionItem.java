// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetAuditProfilesAuditProfileCollectionItemAuditTrail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAuditProfilesAuditProfileCollectionItem {
    /**
     * @return Number of audit records collected in the current calendar month.  Audit records for the Data Safe service account are excluded and are not counted towards your monthly free limit.
     * 
     */
    private String auditCollectedVolume;
    /**
     * @return Contains the list of available audit trails on the target database.
     * 
     */
    private List<GetAuditProfilesAuditProfileCollectionItemAuditTrail> auditTrails;
    private Integer changeRetentionTrigger;
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The description of the audit profile.
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the audit profile.
     * 
     */
    private String id;
    /**
     * @return Indicates whether audit paid usage settings specified at the target database level override both the global settings and the target group level paid usage settings. Enabling paid usage continues the collection of audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. For more information, see [Data Safe Price List](https://www.oracle.com/cloud/price-list/#data-safe).
     * 
     */
    private Boolean isOverrideGlobalPaidUsage;
    /**
     * @return A optional filter to return only resources that match the specified retention configured value.
     * 
     */
    private Boolean isOverrideGlobalRetentionSetting;
    /**
     * @return Indicates if you want to continue audit record collection beyond the free limit of one million audit records per month per target database, incurring additional charges. The default value is inherited from the global settings. You can change at the global level or at the target level.
     * 
     */
    private Boolean isPaidUsageEnabled;
    /**
     * @return Details about the current state of the audit profile in Data Safe.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Number of months the audit records will be stored offline in the offline archive. Minimum: 0; Maximum: 72 months. If you have a requirement to store the audit data even longer in the offline archive, please contact the Oracle Support.
     * 
     */
    private Integer offlineMonths;
    /**
     * @return The name or the OCID of the resource from which the offline month retention setting is sourced. For example, a global setting or a target database group OCID.
     * 
     */
    private String offlineMonthsSource;
    /**
     * @return Number of months the audit records will be stored online in the audit repository for immediate reporting and analysis.  Minimum: 1; Maximum: 12 months
     * 
     */
    private Integer onlineMonths;
    /**
     * @return The name or the OCID of the resource from which the online month retention setting is sourced. For example, a global setting or a target database group OCID.
     * 
     */
    private String onlineMonthsSource;
    /**
     * @return The name or the OCID of the resource from which the paid usage setting is sourced. For example, a global setting or a target database group OCID.
     * 
     */
    private String paidUsageSource;
    /**
     * @return A optional filter to return only resources that match the specified lifecycle state.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private String targetId;
    /**
     * @return A optional filter to return only resources that belong to the specified audit profile type.
     * 
     */
    private String targetType;
    /**
     * @return The date and time the audit profile was created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the audit profile was updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetAuditProfilesAuditProfileCollectionItem() {}
    /**
     * @return Number of audit records collected in the current calendar month.  Audit records for the Data Safe service account are excluded and are not counted towards your monthly free limit.
     * 
     */
    public String auditCollectedVolume() {
        return this.auditCollectedVolume;
    }
    /**
     * @return Contains the list of available audit trails on the target database.
     * 
     */
    public List<GetAuditProfilesAuditProfileCollectionItemAuditTrail> auditTrails() {
        return this.auditTrails;
    }
    public Integer changeRetentionTrigger() {
        return this.changeRetentionTrigger;
    }
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the audit profile.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the audit profile.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether audit paid usage settings specified at the target database level override both the global settings and the target group level paid usage settings. Enabling paid usage continues the collection of audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. For more information, see [Data Safe Price List](https://www.oracle.com/cloud/price-list/#data-safe).
     * 
     */
    public Boolean isOverrideGlobalPaidUsage() {
        return this.isOverrideGlobalPaidUsage;
    }
    /**
     * @return A optional filter to return only resources that match the specified retention configured value.
     * 
     */
    public Boolean isOverrideGlobalRetentionSetting() {
        return this.isOverrideGlobalRetentionSetting;
    }
    /**
     * @return Indicates if you want to continue audit record collection beyond the free limit of one million audit records per month per target database, incurring additional charges. The default value is inherited from the global settings. You can change at the global level or at the target level.
     * 
     */
    public Boolean isPaidUsageEnabled() {
        return this.isPaidUsageEnabled;
    }
    /**
     * @return Details about the current state of the audit profile in Data Safe.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Number of months the audit records will be stored offline in the offline archive. Minimum: 0; Maximum: 72 months. If you have a requirement to store the audit data even longer in the offline archive, please contact the Oracle Support.
     * 
     */
    public Integer offlineMonths() {
        return this.offlineMonths;
    }
    /**
     * @return The name or the OCID of the resource from which the offline month retention setting is sourced. For example, a global setting or a target database group OCID.
     * 
     */
    public String offlineMonthsSource() {
        return this.offlineMonthsSource;
    }
    /**
     * @return Number of months the audit records will be stored online in the audit repository for immediate reporting and analysis.  Minimum: 1; Maximum: 12 months
     * 
     */
    public Integer onlineMonths() {
        return this.onlineMonths;
    }
    /**
     * @return The name or the OCID of the resource from which the online month retention setting is sourced. For example, a global setting or a target database group OCID.
     * 
     */
    public String onlineMonthsSource() {
        return this.onlineMonthsSource;
    }
    /**
     * @return The name or the OCID of the resource from which the paid usage setting is sourced. For example, a global setting or a target database group OCID.
     * 
     */
    public String paidUsageSource() {
        return this.paidUsageSource;
    }
    /**
     * @return A optional filter to return only resources that match the specified lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return A optional filter to return only resources that belong to the specified audit profile type.
     * 
     */
    public String targetType() {
        return this.targetType;
    }
    /**
     * @return The date and time the audit profile was created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the audit profile was updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditProfilesAuditProfileCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String auditCollectedVolume;
        private List<GetAuditProfilesAuditProfileCollectionItemAuditTrail> auditTrails;
        private Integer changeRetentionTrigger;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isOverrideGlobalPaidUsage;
        private Boolean isOverrideGlobalRetentionSetting;
        private Boolean isPaidUsageEnabled;
        private String lifecycleDetails;
        private Integer offlineMonths;
        private String offlineMonthsSource;
        private Integer onlineMonths;
        private String onlineMonthsSource;
        private String paidUsageSource;
        private String state;
        private Map<String,String> systemTags;
        private String targetId;
        private String targetType;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetAuditProfilesAuditProfileCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditCollectedVolume = defaults.auditCollectedVolume;
    	      this.auditTrails = defaults.auditTrails;
    	      this.changeRetentionTrigger = defaults.changeRetentionTrigger;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isOverrideGlobalPaidUsage = defaults.isOverrideGlobalPaidUsage;
    	      this.isOverrideGlobalRetentionSetting = defaults.isOverrideGlobalRetentionSetting;
    	      this.isPaidUsageEnabled = defaults.isPaidUsageEnabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.offlineMonths = defaults.offlineMonths;
    	      this.offlineMonthsSource = defaults.offlineMonthsSource;
    	      this.onlineMonths = defaults.onlineMonths;
    	      this.onlineMonthsSource = defaults.onlineMonthsSource;
    	      this.paidUsageSource = defaults.paidUsageSource;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetId = defaults.targetId;
    	      this.targetType = defaults.targetType;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder auditCollectedVolume(String auditCollectedVolume) {
            if (auditCollectedVolume == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "auditCollectedVolume");
            }
            this.auditCollectedVolume = auditCollectedVolume;
            return this;
        }
        @CustomType.Setter
        public Builder auditTrails(List<GetAuditProfilesAuditProfileCollectionItemAuditTrail> auditTrails) {
            if (auditTrails == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "auditTrails");
            }
            this.auditTrails = auditTrails;
            return this;
        }
        public Builder auditTrails(GetAuditProfilesAuditProfileCollectionItemAuditTrail... auditTrails) {
            return auditTrails(List.of(auditTrails));
        }
        @CustomType.Setter
        public Builder changeRetentionTrigger(Integer changeRetentionTrigger) {
            if (changeRetentionTrigger == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "changeRetentionTrigger");
            }
            this.changeRetentionTrigger = changeRetentionTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isOverrideGlobalPaidUsage(Boolean isOverrideGlobalPaidUsage) {
            if (isOverrideGlobalPaidUsage == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "isOverrideGlobalPaidUsage");
            }
            this.isOverrideGlobalPaidUsage = isOverrideGlobalPaidUsage;
            return this;
        }
        @CustomType.Setter
        public Builder isOverrideGlobalRetentionSetting(Boolean isOverrideGlobalRetentionSetting) {
            if (isOverrideGlobalRetentionSetting == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "isOverrideGlobalRetentionSetting");
            }
            this.isOverrideGlobalRetentionSetting = isOverrideGlobalRetentionSetting;
            return this;
        }
        @CustomType.Setter
        public Builder isPaidUsageEnabled(Boolean isPaidUsageEnabled) {
            if (isPaidUsageEnabled == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "isPaidUsageEnabled");
            }
            this.isPaidUsageEnabled = isPaidUsageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder offlineMonths(Integer offlineMonths) {
            if (offlineMonths == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "offlineMonths");
            }
            this.offlineMonths = offlineMonths;
            return this;
        }
        @CustomType.Setter
        public Builder offlineMonthsSource(String offlineMonthsSource) {
            if (offlineMonthsSource == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "offlineMonthsSource");
            }
            this.offlineMonthsSource = offlineMonthsSource;
            return this;
        }
        @CustomType.Setter
        public Builder onlineMonths(Integer onlineMonths) {
            if (onlineMonths == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "onlineMonths");
            }
            this.onlineMonths = onlineMonths;
            return this;
        }
        @CustomType.Setter
        public Builder onlineMonthsSource(String onlineMonthsSource) {
            if (onlineMonthsSource == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "onlineMonthsSource");
            }
            this.onlineMonthsSource = onlineMonthsSource;
            return this;
        }
        @CustomType.Setter
        public Builder paidUsageSource(String paidUsageSource) {
            if (paidUsageSource == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "paidUsageSource");
            }
            this.paidUsageSource = paidUsageSource;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetType(String targetType) {
            if (targetType == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "targetType");
            }
            this.targetType = targetType;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesAuditProfileCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetAuditProfilesAuditProfileCollectionItem build() {
            final var _resultValue = new GetAuditProfilesAuditProfileCollectionItem();
            _resultValue.auditCollectedVolume = auditCollectedVolume;
            _resultValue.auditTrails = auditTrails;
            _resultValue.changeRetentionTrigger = changeRetentionTrigger;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isOverrideGlobalPaidUsage = isOverrideGlobalPaidUsage;
            _resultValue.isOverrideGlobalRetentionSetting = isOverrideGlobalRetentionSetting;
            _resultValue.isPaidUsageEnabled = isPaidUsageEnabled;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.offlineMonths = offlineMonths;
            _resultValue.offlineMonthsSource = offlineMonthsSource;
            _resultValue.onlineMonths = onlineMonths;
            _resultValue.onlineMonthsSource = onlineMonthsSource;
            _resultValue.paidUsageSource = paidUsageSource;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.targetId = targetId;
            _resultValue.targetType = targetType;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
