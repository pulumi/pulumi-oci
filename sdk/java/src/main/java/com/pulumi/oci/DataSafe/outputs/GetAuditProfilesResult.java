// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetAuditProfilesAuditProfileCollection;
import com.pulumi.oci.DataSafe.outputs.GetAuditProfilesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuditProfilesResult {
    private @Nullable String accessLevel;
    private @Nullable String auditCollectedVolumeGreaterThanOrEqualTo;
    /**
     * @return The list of audit_profile_collection.
     * 
     */
    private List<GetAuditProfilesAuditProfileCollection> auditProfileCollections;
    /**
     * @return The OCID of the  parent audit.
     * 
     */
    private @Nullable String auditProfileId;
    /**
     * @return The OCID of the compartment that contains the audit profile.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The display name of the audit profile.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetAuditProfilesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether audit retention settings like online and offline months set at the  target level override both the global settings and the target group level audit retention settings.
     * 
     */
    private @Nullable Boolean isOverrideGlobalRetentionSetting;
    /**
     * @return Indicates if you want to continue collecting audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. The default value is inherited from the global settings.  You can change at the global level or at the target level.
     * 
     */
    private @Nullable Boolean isPaidUsageEnabled;
    /**
     * @return The current state of the audit profile.
     * 
     */
    private @Nullable String state;
    private @Nullable String targetDatabaseGroupId;
    /**
     * @return The OCID of the target database or target database group for which the audit profile is created.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The resource type that is represented by the audit profile.
     * 
     */
    private @Nullable String targetType;

    private GetAuditProfilesResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    public Optional<String> auditCollectedVolumeGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.auditCollectedVolumeGreaterThanOrEqualTo);
    }
    /**
     * @return The list of audit_profile_collection.
     * 
     */
    public List<GetAuditProfilesAuditProfileCollection> auditProfileCollections() {
        return this.auditProfileCollections;
    }
    /**
     * @return The OCID of the  parent audit.
     * 
     */
    public Optional<String> auditProfileId() {
        return Optional.ofNullable(this.auditProfileId);
    }
    /**
     * @return The OCID of the compartment that contains the audit profile.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The display name of the audit profile.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAuditProfilesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether audit retention settings like online and offline months set at the  target level override both the global settings and the target group level audit retention settings.
     * 
     */
    public Optional<Boolean> isOverrideGlobalRetentionSetting() {
        return Optional.ofNullable(this.isOverrideGlobalRetentionSetting);
    }
    /**
     * @return Indicates if you want to continue collecting audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. The default value is inherited from the global settings.  You can change at the global level or at the target level.
     * 
     */
    public Optional<Boolean> isPaidUsageEnabled() {
        return Optional.ofNullable(this.isPaidUsageEnabled);
    }
    /**
     * @return The current state of the audit profile.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> targetDatabaseGroupId() {
        return Optional.ofNullable(this.targetDatabaseGroupId);
    }
    /**
     * @return The OCID of the target database or target database group for which the audit profile is created.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The resource type that is represented by the audit profile.
     * 
     */
    public Optional<String> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditProfilesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable String auditCollectedVolumeGreaterThanOrEqualTo;
        private List<GetAuditProfilesAuditProfileCollection> auditProfileCollections;
        private @Nullable String auditProfileId;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetAuditProfilesFilter> filters;
        private String id;
        private @Nullable Boolean isOverrideGlobalRetentionSetting;
        private @Nullable Boolean isPaidUsageEnabled;
        private @Nullable String state;
        private @Nullable String targetDatabaseGroupId;
        private @Nullable String targetId;
        private @Nullable String targetType;
        public Builder() {}
        public Builder(GetAuditProfilesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.auditCollectedVolumeGreaterThanOrEqualTo = defaults.auditCollectedVolumeGreaterThanOrEqualTo;
    	      this.auditProfileCollections = defaults.auditProfileCollections;
    	      this.auditProfileId = defaults.auditProfileId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isOverrideGlobalRetentionSetting = defaults.isOverrideGlobalRetentionSetting;
    	      this.isPaidUsageEnabled = defaults.isPaidUsageEnabled;
    	      this.state = defaults.state;
    	      this.targetDatabaseGroupId = defaults.targetDatabaseGroupId;
    	      this.targetId = defaults.targetId;
    	      this.targetType = defaults.targetType;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder auditCollectedVolumeGreaterThanOrEqualTo(@Nullable String auditCollectedVolumeGreaterThanOrEqualTo) {

            this.auditCollectedVolumeGreaterThanOrEqualTo = auditCollectedVolumeGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder auditProfileCollections(List<GetAuditProfilesAuditProfileCollection> auditProfileCollections) {
            if (auditProfileCollections == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesResult", "auditProfileCollections");
            }
            this.auditProfileCollections = auditProfileCollections;
            return this;
        }
        public Builder auditProfileCollections(GetAuditProfilesAuditProfileCollection... auditProfileCollections) {
            return auditProfileCollections(List.of(auditProfileCollections));
        }
        @CustomType.Setter
        public Builder auditProfileId(@Nullable String auditProfileId) {

            this.auditProfileId = auditProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAuditProfilesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAuditProfilesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuditProfilesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isOverrideGlobalRetentionSetting(@Nullable Boolean isOverrideGlobalRetentionSetting) {

            this.isOverrideGlobalRetentionSetting = isOverrideGlobalRetentionSetting;
            return this;
        }
        @CustomType.Setter
        public Builder isPaidUsageEnabled(@Nullable Boolean isPaidUsageEnabled) {

            this.isPaidUsageEnabled = isPaidUsageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseGroupId(@Nullable String targetDatabaseGroupId) {

            this.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetType(@Nullable String targetType) {

            this.targetType = targetType;
            return this;
        }
        public GetAuditProfilesResult build() {
            final var _resultValue = new GetAuditProfilesResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.auditCollectedVolumeGreaterThanOrEqualTo = auditCollectedVolumeGreaterThanOrEqualTo;
            _resultValue.auditProfileCollections = auditProfileCollections;
            _resultValue.auditProfileId = auditProfileId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isOverrideGlobalRetentionSetting = isOverrideGlobalRetentionSetting;
            _resultValue.isPaidUsageEnabled = isPaidUsageEnabled;
            _resultValue.state = state;
            _resultValue.targetDatabaseGroupId = targetDatabaseGroupId;
            _resultValue.targetId = targetId;
            _resultValue.targetType = targetType;
            return _resultValue;
        }
    }
}
