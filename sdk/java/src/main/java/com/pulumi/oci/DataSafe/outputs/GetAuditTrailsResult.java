// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetAuditTrailsAuditTrailCollection;
import com.pulumi.oci.DataSafe.outputs.GetAuditTrailsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuditTrailsResult {
    private @Nullable String accessLevel;
    /**
     * @return The list of audit_trail_collection.
     * 
     */
    private List<GetAuditTrailsAuditTrailCollection> auditTrailCollections;
    private @Nullable String auditTrailId;
    /**
     * @return The OCID of the compartment that contains the audit trail and is the same as the compartment of the audit profile resource.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The display name of the audit trail.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetAuditTrailsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current state of the audit trail.
     * 
     */
    private @Nullable String state;
    /**
     * @return The current sub-state of the audit trail.
     * 
     */
    private @Nullable String status;
    private @Nullable String targetDatabaseGroupId;
    /**
     * @return The OCID of the Data Safe target for which the audit trail is created.
     * 
     */
    private @Nullable String targetId;

    private GetAuditTrailsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The list of audit_trail_collection.
     * 
     */
    public List<GetAuditTrailsAuditTrailCollection> auditTrailCollections() {
        return this.auditTrailCollections;
    }
    public Optional<String> auditTrailId() {
        return Optional.ofNullable(this.auditTrailId);
    }
    /**
     * @return The OCID of the compartment that contains the audit trail and is the same as the compartment of the audit profile resource.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The display name of the audit trail.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAuditTrailsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of the audit trail.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The current sub-state of the audit trail.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public Optional<String> targetDatabaseGroupId() {
        return Optional.ofNullable(this.targetDatabaseGroupId);
    }
    /**
     * @return The OCID of the Data Safe target for which the audit trail is created.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuditTrailsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private List<GetAuditTrailsAuditTrailCollection> auditTrailCollections;
        private @Nullable String auditTrailId;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetAuditTrailsFilter> filters;
        private String id;
        private @Nullable String state;
        private @Nullable String status;
        private @Nullable String targetDatabaseGroupId;
        private @Nullable String targetId;
        public Builder() {}
        public Builder(GetAuditTrailsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.auditTrailCollections = defaults.auditTrailCollections;
    	      this.auditTrailId = defaults.auditTrailId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.targetDatabaseGroupId = defaults.targetDatabaseGroupId;
    	      this.targetId = defaults.targetId;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder auditTrailCollections(List<GetAuditTrailsAuditTrailCollection> auditTrailCollections) {
            if (auditTrailCollections == null) {
              throw new MissingRequiredPropertyException("GetAuditTrailsResult", "auditTrailCollections");
            }
            this.auditTrailCollections = auditTrailCollections;
            return this;
        }
        public Builder auditTrailCollections(GetAuditTrailsAuditTrailCollection... auditTrailCollections) {
            return auditTrailCollections(List.of(auditTrailCollections));
        }
        @CustomType.Setter
        public Builder auditTrailId(@Nullable String auditTrailId) {

            this.auditTrailId = auditTrailId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAuditTrailsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAuditTrailsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAuditTrailsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuditTrailsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseGroupId(@Nullable String targetDatabaseGroupId) {

            this.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        public GetAuditTrailsResult build() {
            final var _resultValue = new GetAuditTrailsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.auditTrailCollections = auditTrailCollections;
            _resultValue.auditTrailId = auditTrailId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.targetDatabaseGroupId = targetDatabaseGroupId;
            _resultValue.targetId = targetId;
            return _resultValue;
        }
    }
}
