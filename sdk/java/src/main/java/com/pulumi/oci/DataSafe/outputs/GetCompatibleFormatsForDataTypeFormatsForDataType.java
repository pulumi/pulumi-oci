// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCompatibleFormatsForDataTypeFormatsForDataType {
    /**
     * @return The data type category, which can be one of the following - Character - Includes CHAR, NCHAR, VARCHAR2, and NVARCHAR2 Numeric - Includes NUMBER, FLOAT, RAW, BINARY_FLOAT, and BINARY_DOUBLE Date - Includes DATE and TIMESTAMP LOB - Includes BLOB, CLOB, and NCLOB All - Includes all the supported data types
     * 
     */
    private @Nullable String dataType;
    /**
     * @return An array of the basic masking formats compatible with the data type category.
     * 
     */
    private @Nullable List<GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat> maskingFormats;

    private GetCompatibleFormatsForDataTypeFormatsForDataType() {}
    /**
     * @return The data type category, which can be one of the following - Character - Includes CHAR, NCHAR, VARCHAR2, and NVARCHAR2 Numeric - Includes NUMBER, FLOAT, RAW, BINARY_FLOAT, and BINARY_DOUBLE Date - Includes DATE and TIMESTAMP LOB - Includes BLOB, CLOB, and NCLOB All - Includes all the supported data types
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return An array of the basic masking formats compatible with the data type category.
     * 
     */
    public List<GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat> maskingFormats() {
        return this.maskingFormats == null ? List.of() : this.maskingFormats;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCompatibleFormatsForDataTypeFormatsForDataType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dataType;
        private @Nullable List<GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat> maskingFormats;
        public Builder() {}
        public Builder(GetCompatibleFormatsForDataTypeFormatsForDataType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataType = defaults.dataType;
    	      this.maskingFormats = defaults.maskingFormats;
        }

        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder maskingFormats(@Nullable List<GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat> maskingFormats) {
            this.maskingFormats = maskingFormats;
            return this;
        }
        public Builder maskingFormats(GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat... maskingFormats) {
            return maskingFormats(List.of(maskingFormats));
        }
        public GetCompatibleFormatsForDataTypeFormatsForDataType build() {
            final var o = new GetCompatibleFormatsForDataTypeFormatsForDataType();
            o.dataType = dataType;
            o.maskingFormats = maskingFormats;
            return o;
        }
    }
}
