// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollection;
import com.pulumi.oci.DataSafe.outputs.GetDiscoveryAnalyticsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDiscoveryAnalyticsResult {
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The list of discovery_analytics_collection.
     * 
     */
    private List<GetDiscoveryAnalyticsDiscoveryAnalyticsCollection> discoveryAnalyticsCollections;
    private @Nullable List<GetDiscoveryAnalyticsFilter> filters;
    private @Nullable String groupBy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isCommon;
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    private @Nullable String sensitiveDataModelId;
    private @Nullable String sensitiveTypeGroupId;
    /**
     * @return The OCID of the sensitive type.
     * 
     */
    private @Nullable String sensitiveTypeId;
    private @Nullable String targetDatabaseGroupId;
    /**
     * @return The OCID of the target database.
     * 
     */
    private @Nullable String targetId;

    private GetDiscoveryAnalyticsResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The list of discovery_analytics_collection.
     * 
     */
    public List<GetDiscoveryAnalyticsDiscoveryAnalyticsCollection> discoveryAnalyticsCollections() {
        return this.discoveryAnalyticsCollections;
    }
    public List<GetDiscoveryAnalyticsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isCommon() {
        return Optional.ofNullable(this.isCommon);
    }
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public Optional<String> sensitiveDataModelId() {
        return Optional.ofNullable(this.sensitiveDataModelId);
    }
    public Optional<String> sensitiveTypeGroupId() {
        return Optional.ofNullable(this.sensitiveTypeGroupId);
    }
    /**
     * @return The OCID of the sensitive type.
     * 
     */
    public Optional<String> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }
    public Optional<String> targetDatabaseGroupId() {
        return Optional.ofNullable(this.targetDatabaseGroupId);
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiscoveryAnalyticsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private List<GetDiscoveryAnalyticsDiscoveryAnalyticsCollection> discoveryAnalyticsCollections;
        private @Nullable List<GetDiscoveryAnalyticsFilter> filters;
        private @Nullable String groupBy;
        private String id;
        private @Nullable Boolean isCommon;
        private @Nullable String sensitiveDataModelId;
        private @Nullable String sensitiveTypeGroupId;
        private @Nullable String sensitiveTypeId;
        private @Nullable String targetDatabaseGroupId;
        private @Nullable String targetId;
        public Builder() {}
        public Builder(GetDiscoveryAnalyticsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.discoveryAnalyticsCollections = defaults.discoveryAnalyticsCollections;
    	      this.filters = defaults.filters;
    	      this.groupBy = defaults.groupBy;
    	      this.id = defaults.id;
    	      this.isCommon = defaults.isCommon;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
    	      this.sensitiveTypeGroupId = defaults.sensitiveTypeGroupId;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.targetDatabaseGroupId = defaults.targetDatabaseGroupId;
    	      this.targetId = defaults.targetId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAnalyticsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryAnalyticsCollections(List<GetDiscoveryAnalyticsDiscoveryAnalyticsCollection> discoveryAnalyticsCollections) {
            if (discoveryAnalyticsCollections == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAnalyticsResult", "discoveryAnalyticsCollections");
            }
            this.discoveryAnalyticsCollections = discoveryAnalyticsCollections;
            return this;
        }
        public Builder discoveryAnalyticsCollections(GetDiscoveryAnalyticsDiscoveryAnalyticsCollection... discoveryAnalyticsCollections) {
            return discoveryAnalyticsCollections(List.of(discoveryAnalyticsCollections));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDiscoveryAnalyticsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDiscoveryAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder groupBy(@Nullable String groupBy) {

            this.groupBy = groupBy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDiscoveryAnalyticsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCommon(@Nullable Boolean isCommon) {

            this.isCommon = isCommon;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveDataModelId(@Nullable String sensitiveDataModelId) {

            this.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeGroupId(@Nullable String sensitiveTypeGroupId) {

            this.sensitiveTypeGroupId = sensitiveTypeGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(@Nullable String sensitiveTypeId) {

            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseGroupId(@Nullable String targetDatabaseGroupId) {

            this.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        public GetDiscoveryAnalyticsResult build() {
            final var _resultValue = new GetDiscoveryAnalyticsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.discoveryAnalyticsCollections = discoveryAnalyticsCollections;
            _resultValue.filters = filters;
            _resultValue.groupBy = groupBy;
            _resultValue.id = id;
            _resultValue.isCommon = isCommon;
            _resultValue.sensitiveDataModelId = sensitiveDataModelId;
            _resultValue.sensitiveTypeGroupId = sensitiveTypeGroupId;
            _resultValue.sensitiveTypeId = sensitiveTypeId;
            _resultValue.targetDatabaseGroupId = targetDatabaseGroupId;
            _resultValue.targetId = targetId;
            return _resultValue;
        }
    }
}
