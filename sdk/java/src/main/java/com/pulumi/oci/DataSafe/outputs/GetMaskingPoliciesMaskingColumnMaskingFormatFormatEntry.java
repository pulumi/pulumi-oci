// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntry {
    /**
     * @return The name of the substitution column.
     * 
     */
    private @Nullable String columnName;
    /**
     * @return The description of the format entry.
     * 
     */
    private @Nullable String description;
    /**
     * @return The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
     * 
     */
    private @Nullable String endDate;
    /**
     * @return The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
     * 
     */
    private @Nullable Integer endLength;
    /**
     * @return The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
     * 
     */
    private @Nullable Double endValue;
    /**
     * @return The constant number to be used for masking.
     * 
     */
    private @Nullable Double fixedNumber;
    /**
     * @return The constant string to be used for masking.
     * 
     */
    private @Nullable String fixedString;
    /**
     * @return One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
     * 
     */
    private @Nullable List<String> groupingColumns;
    /**
     * @return The number of characters that should be there in the substring. It should be an integer and greater than zero.
     * 
     */
    private @Nullable Integer length;
    /**
     * @return The OCID of the library masking format.
     * 
     */
    private @Nullable String libraryMaskingFormatId;
    /**
     * @return The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
     * 
     */
    private @Nullable String postProcessingFunction;
    /**
     * @return A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
     * 
     */
    private @Nullable List<String> randomLists;
    /**
     * @return The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
     * 
     */
    private @Nullable String regularExpression;
    /**
     * @return The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number, null value, or  SQL expression.
     * 
     */
    private @Nullable String replaceWith;
    /**
     * @return The name of the schema that contains the database column.
     * 
     */
    private @Nullable String schemaName;
    /**
     * @return The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
     * 
     */
    private @Nullable String sqlExpression;
    /**
     * @return The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
     * 
     */
    private @Nullable String startDate;
    /**
     * @return The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
     * 
     */
    private @Nullable Integer startLength;
    /**
     * @return The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It&#39;s negative, the counting starts from the end of the string.
     * 
     */
    private @Nullable Integer startPosition;
    /**
     * @return The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
     * 
     */
    private @Nullable Double startValue;
    /**
     * @return The name of the table that contains the substitution column.
     * 
     */
    private @Nullable String tableName;
    /**
     * @return The type of the format entry.
     * 
     */
    private @Nullable String type;
    /**
     * @return The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
     * 
     */
    private @Nullable String userDefinedFunction;

    private GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntry() {}
    /**
     * @return The name of the substitution column.
     * 
     */
    public Optional<String> columnName() {
        return Optional.ofNullable(this.columnName);
    }
    /**
     * @return The description of the format entry.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
     * 
     */
    public Optional<String> endDate() {
        return Optional.ofNullable(this.endDate);
    }
    /**
     * @return The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
     * 
     */
    public Optional<Integer> endLength() {
        return Optional.ofNullable(this.endLength);
    }
    /**
     * @return The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
     * 
     */
    public Optional<Double> endValue() {
        return Optional.ofNullable(this.endValue);
    }
    /**
     * @return The constant number to be used for masking.
     * 
     */
    public Optional<Double> fixedNumber() {
        return Optional.ofNullable(this.fixedNumber);
    }
    /**
     * @return The constant string to be used for masking.
     * 
     */
    public Optional<String> fixedString() {
        return Optional.ofNullable(this.fixedString);
    }
    /**
     * @return One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
     * 
     */
    public List<String> groupingColumns() {
        return this.groupingColumns == null ? List.of() : this.groupingColumns;
    }
    /**
     * @return The number of characters that should be there in the substring. It should be an integer and greater than zero.
     * 
     */
    public Optional<Integer> length() {
        return Optional.ofNullable(this.length);
    }
    /**
     * @return The OCID of the library masking format.
     * 
     */
    public Optional<String> libraryMaskingFormatId() {
        return Optional.ofNullable(this.libraryMaskingFormatId);
    }
    /**
     * @return The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
     * 
     */
    public Optional<String> postProcessingFunction() {
        return Optional.ofNullable(this.postProcessingFunction);
    }
    /**
     * @return A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
     * 
     */
    public List<String> randomLists() {
        return this.randomLists == null ? List.of() : this.randomLists;
    }
    /**
     * @return The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
     * 
     */
    public Optional<String> regularExpression() {
        return Optional.ofNullable(this.regularExpression);
    }
    /**
     * @return The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number, null value, or  SQL expression.
     * 
     */
    public Optional<String> replaceWith() {
        return Optional.ofNullable(this.replaceWith);
    }
    /**
     * @return The name of the schema that contains the database column.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    /**
     * @return The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
     * 
     */
    public Optional<String> sqlExpression() {
        return Optional.ofNullable(this.sqlExpression);
    }
    /**
     * @return The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
     * 
     */
    public Optional<String> startDate() {
        return Optional.ofNullable(this.startDate);
    }
    /**
     * @return The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
     * 
     */
    public Optional<Integer> startLength() {
        return Optional.ofNullable(this.startLength);
    }
    /**
     * @return The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It&#39;s negative, the counting starts from the end of the string.
     * 
     */
    public Optional<Integer> startPosition() {
        return Optional.ofNullable(this.startPosition);
    }
    /**
     * @return The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
     * 
     */
    public Optional<Double> startValue() {
        return Optional.ofNullable(this.startValue);
    }
    /**
     * @return The name of the table that contains the substitution column.
     * 
     */
    public Optional<String> tableName() {
        return Optional.ofNullable(this.tableName);
    }
    /**
     * @return The type of the format entry.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
     * 
     */
    public Optional<String> userDefinedFunction() {
        return Optional.ofNullable(this.userDefinedFunction);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String columnName;
        private @Nullable String description;
        private @Nullable String endDate;
        private @Nullable Integer endLength;
        private @Nullable Double endValue;
        private @Nullable Double fixedNumber;
        private @Nullable String fixedString;
        private @Nullable List<String> groupingColumns;
        private @Nullable Integer length;
        private @Nullable String libraryMaskingFormatId;
        private @Nullable String postProcessingFunction;
        private @Nullable List<String> randomLists;
        private @Nullable String regularExpression;
        private @Nullable String replaceWith;
        private @Nullable String schemaName;
        private @Nullable String sqlExpression;
        private @Nullable String startDate;
        private @Nullable Integer startLength;
        private @Nullable Integer startPosition;
        private @Nullable Double startValue;
        private @Nullable String tableName;
        private @Nullable String type;
        private @Nullable String userDefinedFunction;
        public Builder() {}
        public Builder(GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnName = defaults.columnName;
    	      this.description = defaults.description;
    	      this.endDate = defaults.endDate;
    	      this.endLength = defaults.endLength;
    	      this.endValue = defaults.endValue;
    	      this.fixedNumber = defaults.fixedNumber;
    	      this.fixedString = defaults.fixedString;
    	      this.groupingColumns = defaults.groupingColumns;
    	      this.length = defaults.length;
    	      this.libraryMaskingFormatId = defaults.libraryMaskingFormatId;
    	      this.postProcessingFunction = defaults.postProcessingFunction;
    	      this.randomLists = defaults.randomLists;
    	      this.regularExpression = defaults.regularExpression;
    	      this.replaceWith = defaults.replaceWith;
    	      this.schemaName = defaults.schemaName;
    	      this.sqlExpression = defaults.sqlExpression;
    	      this.startDate = defaults.startDate;
    	      this.startLength = defaults.startLength;
    	      this.startPosition = defaults.startPosition;
    	      this.startValue = defaults.startValue;
    	      this.tableName = defaults.tableName;
    	      this.type = defaults.type;
    	      this.userDefinedFunction = defaults.userDefinedFunction;
        }

        @CustomType.Setter
        public Builder columnName(@Nullable String columnName) {
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endDate(@Nullable String endDate) {
            this.endDate = endDate;
            return this;
        }
        @CustomType.Setter
        public Builder endLength(@Nullable Integer endLength) {
            this.endLength = endLength;
            return this;
        }
        @CustomType.Setter
        public Builder endValue(@Nullable Double endValue) {
            this.endValue = endValue;
            return this;
        }
        @CustomType.Setter
        public Builder fixedNumber(@Nullable Double fixedNumber) {
            this.fixedNumber = fixedNumber;
            return this;
        }
        @CustomType.Setter
        public Builder fixedString(@Nullable String fixedString) {
            this.fixedString = fixedString;
            return this;
        }
        @CustomType.Setter
        public Builder groupingColumns(@Nullable List<String> groupingColumns) {
            this.groupingColumns = groupingColumns;
            return this;
        }
        public Builder groupingColumns(String... groupingColumns) {
            return groupingColumns(List.of(groupingColumns));
        }
        @CustomType.Setter
        public Builder length(@Nullable Integer length) {
            this.length = length;
            return this;
        }
        @CustomType.Setter
        public Builder libraryMaskingFormatId(@Nullable String libraryMaskingFormatId) {
            this.libraryMaskingFormatId = libraryMaskingFormatId;
            return this;
        }
        @CustomType.Setter
        public Builder postProcessingFunction(@Nullable String postProcessingFunction) {
            this.postProcessingFunction = postProcessingFunction;
            return this;
        }
        @CustomType.Setter
        public Builder randomLists(@Nullable List<String> randomLists) {
            this.randomLists = randomLists;
            return this;
        }
        public Builder randomLists(String... randomLists) {
            return randomLists(List.of(randomLists));
        }
        @CustomType.Setter
        public Builder regularExpression(@Nullable String regularExpression) {
            this.regularExpression = regularExpression;
            return this;
        }
        @CustomType.Setter
        public Builder replaceWith(@Nullable String replaceWith) {
            this.replaceWith = replaceWith;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sqlExpression(@Nullable String sqlExpression) {
            this.sqlExpression = sqlExpression;
            return this;
        }
        @CustomType.Setter
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }
        @CustomType.Setter
        public Builder startLength(@Nullable Integer startLength) {
            this.startLength = startLength;
            return this;
        }
        @CustomType.Setter
        public Builder startPosition(@Nullable Integer startPosition) {
            this.startPosition = startPosition;
            return this;
        }
        @CustomType.Setter
        public Builder startValue(@Nullable Double startValue) {
            this.startValue = startValue;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(@Nullable String tableName) {
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder userDefinedFunction(@Nullable String userDefinedFunction) {
            this.userDefinedFunction = userDefinedFunction;
            return this;
        }
        public GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntry build() {
            final var o = new GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntry();
            o.columnName = columnName;
            o.description = description;
            o.endDate = endDate;
            o.endLength = endLength;
            o.endValue = endValue;
            o.fixedNumber = fixedNumber;
            o.fixedString = fixedString;
            o.groupingColumns = groupingColumns;
            o.length = length;
            o.libraryMaskingFormatId = libraryMaskingFormatId;
            o.postProcessingFunction = postProcessingFunction;
            o.randomLists = randomLists;
            o.regularExpression = regularExpression;
            o.replaceWith = replaceWith;
            o.schemaName = schemaName;
            o.sqlExpression = sqlExpression;
            o.startDate = startDate;
            o.startLength = startLength;
            o.startPosition = startPosition;
            o.startValue = startValue;
            o.tableName = tableName;
            o.type = type;
            o.userDefinedFunction = userDefinedFunction;
            return o;
        }
    }
}
