// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPoliciesMaskingColumnMaskingFormat;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMaskingPoliciesMaskingColumnResult {
    /**
     * @return An array of child columns that are in referential relationship with the masking column.
     * 
     */
    private @Nullable List<String> childColumns;
    /**
     * @return The name of the substitution column.
     * 
     */
    private @Nullable String columnName;
    /**
     * @return The data type of the masking column.
     * 
     */
    private @Nullable String dataType;
    private @Nullable String id;
    /**
     * @return Indicates whether data masking is enabled for the masking column.
     * 
     */
    private @Nullable Boolean isMaskingEnabled;
    /**
     * @return The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    private @Nullable String key;
    /**
     * @return Details about the current state of the masking column.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The group of the masking column. All the columns in a group are masked together to ensure  that the masked data across these columns continue to retain the same logical relationship.  For more details, check &lt;a href=https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037&gt;Group Masking in the Data Safe documentation.&lt;/a&gt;
     * 
     */
    private @Nullable String maskingColumnGroup;
    private String maskingColumnKey;
    /**
     * @return An array of masking formats assigned to the masking column.
     * 
     */
    private @Nullable List<GetMaskingPoliciesMaskingColumnMaskingFormat> maskingFormats;
    /**
     * @return The OCID of the masking policy that contains the masking column.
     * 
     */
    private String maskingPolicyId;
    /**
     * @return The name of the object (table or editioning view) that contains the database column.
     * 
     */
    private @Nullable String object;
    /**
     * @return The type of the object that contains the database column.
     * 
     */
    private @Nullable String objectType;
    /**
     * @return The name of the schema that contains the database column.
     * 
     */
    private @Nullable String schemaName;
    /**
     * @return The OCID of the sensitive type associated with the masking column.
     * 
     */
    private @Nullable String sensitiveTypeId;
    /**
     * @return The current state of the masking column.
     * 
     */
    private @Nullable String state;
    /**
     * @return The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeUpdated;

    private GetMaskingPoliciesMaskingColumnResult() {}
    /**
     * @return An array of child columns that are in referential relationship with the masking column.
     * 
     */
    public List<String> childColumns() {
        return this.childColumns == null ? List.of() : this.childColumns;
    }
    /**
     * @return The name of the substitution column.
     * 
     */
    public Optional<String> columnName() {
        return Optional.ofNullable(this.columnName);
    }
    /**
     * @return The data type of the masking column.
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether data masking is enabled for the masking column.
     * 
     */
    public Optional<Boolean> isMaskingEnabled() {
        return Optional.ofNullable(this.isMaskingEnabled);
    }
    /**
     * @return The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Details about the current state of the masking column.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The group of the masking column. All the columns in a group are masked together to ensure  that the masked data across these columns continue to retain the same logical relationship.  For more details, check &lt;a href=https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037&gt;Group Masking in the Data Safe documentation.&lt;/a&gt;
     * 
     */
    public Optional<String> maskingColumnGroup() {
        return Optional.ofNullable(this.maskingColumnGroup);
    }
    public String maskingColumnKey() {
        return this.maskingColumnKey;
    }
    /**
     * @return An array of masking formats assigned to the masking column.
     * 
     */
    public List<GetMaskingPoliciesMaskingColumnMaskingFormat> maskingFormats() {
        return this.maskingFormats == null ? List.of() : this.maskingFormats;
    }
    /**
     * @return The OCID of the masking policy that contains the masking column.
     * 
     */
    public String maskingPolicyId() {
        return this.maskingPolicyId;
    }
    /**
     * @return The name of the object (table or editioning view) that contains the database column.
     * 
     */
    public Optional<String> object() {
        return Optional.ofNullable(this.object);
    }
    /**
     * @return The type of the object that contains the database column.
     * 
     */
    public Optional<String> objectType() {
        return Optional.ofNullable(this.objectType);
    }
    /**
     * @return The name of the schema that contains the database column.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    /**
     * @return The OCID of the sensitive type associated with the masking column.
     * 
     */
    public Optional<String> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }
    /**
     * @return The current state of the masking column.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPoliciesMaskingColumnResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> childColumns;
        private @Nullable String columnName;
        private @Nullable String dataType;
        private @Nullable String id;
        private @Nullable Boolean isMaskingEnabled;
        private @Nullable String key;
        private @Nullable String lifecycleDetails;
        private @Nullable String maskingColumnGroup;
        private String maskingColumnKey;
        private @Nullable List<GetMaskingPoliciesMaskingColumnMaskingFormat> maskingFormats;
        private String maskingPolicyId;
        private @Nullable String object;
        private @Nullable String objectType;
        private @Nullable String schemaName;
        private @Nullable String sensitiveTypeId;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(GetMaskingPoliciesMaskingColumnResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childColumns = defaults.childColumns;
    	      this.columnName = defaults.columnName;
    	      this.dataType = defaults.dataType;
    	      this.id = defaults.id;
    	      this.isMaskingEnabled = defaults.isMaskingEnabled;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maskingColumnGroup = defaults.maskingColumnGroup;
    	      this.maskingColumnKey = defaults.maskingColumnKey;
    	      this.maskingFormats = defaults.maskingFormats;
    	      this.maskingPolicyId = defaults.maskingPolicyId;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder childColumns(@Nullable List<String> childColumns) {
            this.childColumns = childColumns;
            return this;
        }
        public Builder childColumns(String... childColumns) {
            return childColumns(List.of(childColumns));
        }
        @CustomType.Setter
        public Builder columnName(@Nullable String columnName) {
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isMaskingEnabled(@Nullable Boolean isMaskingEnabled) {
            this.isMaskingEnabled = isMaskingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maskingColumnGroup(@Nullable String maskingColumnGroup) {
            this.maskingColumnGroup = maskingColumnGroup;
            return this;
        }
        @CustomType.Setter
        public Builder maskingColumnKey(String maskingColumnKey) {
            this.maskingColumnKey = Objects.requireNonNull(maskingColumnKey);
            return this;
        }
        @CustomType.Setter
        public Builder maskingFormats(@Nullable List<GetMaskingPoliciesMaskingColumnMaskingFormat> maskingFormats) {
            this.maskingFormats = maskingFormats;
            return this;
        }
        public Builder maskingFormats(GetMaskingPoliciesMaskingColumnMaskingFormat... maskingFormats) {
            return maskingFormats(List.of(maskingFormats));
        }
        @CustomType.Setter
        public Builder maskingPolicyId(String maskingPolicyId) {
            this.maskingPolicyId = Objects.requireNonNull(maskingPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder object(@Nullable String object) {
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(@Nullable String objectType) {
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(@Nullable String sensitiveTypeId) {
            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMaskingPoliciesMaskingColumnResult build() {
            final var o = new GetMaskingPoliciesMaskingColumnResult();
            o.childColumns = childColumns;
            o.columnName = columnName;
            o.dataType = dataType;
            o.id = id;
            o.isMaskingEnabled = isMaskingEnabled;
            o.key = key;
            o.lifecycleDetails = lifecycleDetails;
            o.maskingColumnGroup = maskingColumnGroup;
            o.maskingColumnKey = maskingColumnKey;
            o.maskingFormats = maskingFormats;
            o.maskingPolicyId = maskingPolicyId;
            o.object = object;
            o.objectType = objectType;
            o.schemaName = schemaName;
            o.sensitiveTypeId = sensitiveTypeId;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
