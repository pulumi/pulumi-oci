// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem {
    /**
     * @return An array of child columns that are in referential relationship with the masking column.
     * 
     */
    private List<String> childColumns;
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    private String columnName;
    /**
     * @return A filter to return only resources that match the specified data types.
     * 
     */
    private String dataType;
    /**
     * @return A filter to return the masking column resources based on the value of their isMaskingEnabled attribute. A value of true returns only those columns for which masking is enabled. A value of false returns only those columns for which masking is disabled. Omitting this parameter returns all the masking columns in a masking policy.
     * 
     */
    private Boolean isMaskingEnabled;
    /**
     * @return The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    private String key;
    /**
     * @return Details about the current state of the masking column.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A filter to return only the resources that match the specified masking column group.
     * 
     */
    private String maskingColumnGroup;
    /**
     * @return An array of masking formats assigned to the masking column.
     * 
     */
    private List<GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat> maskingFormats;
    /**
     * @return The OCID of the masking policy.
     * 
     */
    private String maskingPolicyId;
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    private String object;
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    private String objectType;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private String schemaName;
    /**
     * @return A filter to return only items related to a specific sensitive type OCID.
     * 
     */
    private String sensitiveTypeId;
    /**
     * @return The current state of the masking column.
     * 
     */
    private String state;
    /**
     * @return The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeUpdated;

    private GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem() {}
    /**
     * @return An array of child columns that are in referential relationship with the masking column.
     * 
     */
    public List<String> childColumns() {
        return this.childColumns;
    }
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return A filter to return only resources that match the specified data types.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return A filter to return the masking column resources based on the value of their isMaskingEnabled attribute. A value of true returns only those columns for which masking is enabled. A value of false returns only those columns for which masking is disabled. Omitting this parameter returns all the masking columns in a masking policy.
     * 
     */
    public Boolean isMaskingEnabled() {
        return this.isMaskingEnabled;
    }
    /**
     * @return The unique key that identifies the masking column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Details about the current state of the masking column.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A filter to return only the resources that match the specified masking column group.
     * 
     */
    public String maskingColumnGroup() {
        return this.maskingColumnGroup;
    }
    /**
     * @return An array of masking formats assigned to the masking column.
     * 
     */
    public List<GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat> maskingFormats() {
        return this.maskingFormats;
    }
    /**
     * @return The OCID of the masking policy.
     * 
     */
    public String maskingPolicyId() {
        return this.maskingPolicyId;
    }
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return A filter to return only items related to a specific sensitive type OCID.
     * 
     */
    public String sensitiveTypeId() {
        return this.sensitiveTypeId;
    }
    /**
     * @return The current state of the masking column.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> childColumns;
        private String columnName;
        private String dataType;
        private Boolean isMaskingEnabled;
        private String key;
        private String lifecycleDetails;
        private String maskingColumnGroup;
        private List<GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat> maskingFormats;
        private String maskingPolicyId;
        private String object;
        private String objectType;
        private String schemaName;
        private String sensitiveTypeId;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childColumns = defaults.childColumns;
    	      this.columnName = defaults.columnName;
    	      this.dataType = defaults.dataType;
    	      this.isMaskingEnabled = defaults.isMaskingEnabled;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maskingColumnGroup = defaults.maskingColumnGroup;
    	      this.maskingFormats = defaults.maskingFormats;
    	      this.maskingPolicyId = defaults.maskingPolicyId;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder childColumns(List<String> childColumns) {
            if (childColumns == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "childColumns");
            }
            this.childColumns = childColumns;
            return this;
        }
        public Builder childColumns(String... childColumns) {
            return childColumns(List.of(childColumns));
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            if (columnName == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "columnName");
            }
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder isMaskingEnabled(Boolean isMaskingEnabled) {
            if (isMaskingEnabled == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "isMaskingEnabled");
            }
            this.isMaskingEnabled = isMaskingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maskingColumnGroup(String maskingColumnGroup) {
            if (maskingColumnGroup == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "maskingColumnGroup");
            }
            this.maskingColumnGroup = maskingColumnGroup;
            return this;
        }
        @CustomType.Setter
        public Builder maskingFormats(List<GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat> maskingFormats) {
            if (maskingFormats == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "maskingFormats");
            }
            this.maskingFormats = maskingFormats;
            return this;
        }
        public Builder maskingFormats(GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat... maskingFormats) {
            return maskingFormats(List.of(maskingFormats));
        }
        @CustomType.Setter
        public Builder maskingPolicyId(String maskingPolicyId) {
            if (maskingPolicyId == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "maskingPolicyId");
            }
            this.maskingPolicyId = maskingPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(String objectType) {
            if (objectType == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "objectType");
            }
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(String sensitiveTypeId) {
            if (sensitiveTypeId == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "sensitiveTypeId");
            }
            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem build() {
            final var _resultValue = new GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem();
            _resultValue.childColumns = childColumns;
            _resultValue.columnName = columnName;
            _resultValue.dataType = dataType;
            _resultValue.isMaskingEnabled = isMaskingEnabled;
            _resultValue.key = key;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.maskingColumnGroup = maskingColumnGroup;
            _resultValue.maskingFormats = maskingFormats;
            _resultValue.maskingPolicyId = maskingPolicyId;
            _resultValue.object = object;
            _resultValue.objectType = objectType;
            _resultValue.schemaName = schemaName;
            _resultValue.sensitiveTypeId = sensitiveTypeId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
