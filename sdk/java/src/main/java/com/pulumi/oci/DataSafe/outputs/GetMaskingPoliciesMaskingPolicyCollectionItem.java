// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPoliciesMaskingPolicyCollectionItemColumnSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMaskingPoliciesMaskingPolicyCollectionItem {
    private Integer addMaskingColumnsFromSdmTrigger;
    /**
     * @return The source of masking columns.
     * 
     */
    private List<GetMaskingPoliciesMaskingPolicyCollectionItemColumnSource> columnSources;
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The description of the masking policy.
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the masking policy.
     * 
     */
    private String id;
    /**
     * @return Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
     * 
     */
    private Boolean isDropTempTablesEnabled;
    /**
     * @return Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
     * 
     */
    private Boolean isRedoLoggingEnabled;
    /**
     * @return Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
     * 
     */
    private Boolean isRefreshStatsEnabled;
    /**
     * @return Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
     * 
     */
    private String parallelDegree;
    /**
     * @return A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
     * 
     */
    private String postMaskingScript;
    /**
     * @return A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
     * 
     */
    private String preMaskingScript;
    /**
     * @return Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
     * 
     */
    private String recompile;
    /**
     * @return A filter to return only the resources that match the specified lifecycle states.
     * 
     */
    private String state;
    /**
     * @return The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    private String timeUpdated;

    private GetMaskingPoliciesMaskingPolicyCollectionItem() {}
    public Integer addMaskingColumnsFromSdmTrigger() {
        return this.addMaskingColumnsFromSdmTrigger;
    }
    /**
     * @return The source of masking columns.
     * 
     */
    public List<GetMaskingPoliciesMaskingPolicyCollectionItemColumnSource> columnSources() {
        return this.columnSources;
    }
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the masking policy.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the masking policy.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
     * 
     */
    public Boolean isDropTempTablesEnabled() {
        return this.isDropTempTablesEnabled;
    }
    /**
     * @return Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
     * 
     */
    public Boolean isRedoLoggingEnabled() {
        return this.isRedoLoggingEnabled;
    }
    /**
     * @return Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
     * 
     */
    public Boolean isRefreshStatsEnabled() {
        return this.isRefreshStatsEnabled;
    }
    /**
     * @return Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
     * 
     */
    public String parallelDegree() {
        return this.parallelDegree;
    }
    /**
     * @return A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
     * 
     */
    public String postMaskingScript() {
        return this.postMaskingScript;
    }
    /**
     * @return A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
     * 
     */
    public String preMaskingScript() {
        return this.preMaskingScript;
    }
    /**
     * @return Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
     * 
     */
    public String recompile() {
        return this.recompile;
    }
    /**
     * @return A filter to return only the resources that match the specified lifecycle states.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPoliciesMaskingPolicyCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer addMaskingColumnsFromSdmTrigger;
        private List<GetMaskingPoliciesMaskingPolicyCollectionItemColumnSource> columnSources;
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isDropTempTablesEnabled;
        private Boolean isRedoLoggingEnabled;
        private Boolean isRefreshStatsEnabled;
        private String parallelDegree;
        private String postMaskingScript;
        private String preMaskingScript;
        private String recompile;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetMaskingPoliciesMaskingPolicyCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addMaskingColumnsFromSdmTrigger = defaults.addMaskingColumnsFromSdmTrigger;
    	      this.columnSources = defaults.columnSources;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isDropTempTablesEnabled = defaults.isDropTempTablesEnabled;
    	      this.isRedoLoggingEnabled = defaults.isRedoLoggingEnabled;
    	      this.isRefreshStatsEnabled = defaults.isRefreshStatsEnabled;
    	      this.parallelDegree = defaults.parallelDegree;
    	      this.postMaskingScript = defaults.postMaskingScript;
    	      this.preMaskingScript = defaults.preMaskingScript;
    	      this.recompile = defaults.recompile;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder addMaskingColumnsFromSdmTrigger(Integer addMaskingColumnsFromSdmTrigger) {
            if (addMaskingColumnsFromSdmTrigger == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "addMaskingColumnsFromSdmTrigger");
            }
            this.addMaskingColumnsFromSdmTrigger = addMaskingColumnsFromSdmTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder columnSources(List<GetMaskingPoliciesMaskingPolicyCollectionItemColumnSource> columnSources) {
            if (columnSources == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "columnSources");
            }
            this.columnSources = columnSources;
            return this;
        }
        public Builder columnSources(GetMaskingPoliciesMaskingPolicyCollectionItemColumnSource... columnSources) {
            return columnSources(List.of(columnSources));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDropTempTablesEnabled(Boolean isDropTempTablesEnabled) {
            if (isDropTempTablesEnabled == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "isDropTempTablesEnabled");
            }
            this.isDropTempTablesEnabled = isDropTempTablesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRedoLoggingEnabled(Boolean isRedoLoggingEnabled) {
            if (isRedoLoggingEnabled == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "isRedoLoggingEnabled");
            }
            this.isRedoLoggingEnabled = isRedoLoggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRefreshStatsEnabled(Boolean isRefreshStatsEnabled) {
            if (isRefreshStatsEnabled == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "isRefreshStatsEnabled");
            }
            this.isRefreshStatsEnabled = isRefreshStatsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder parallelDegree(String parallelDegree) {
            if (parallelDegree == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "parallelDegree");
            }
            this.parallelDegree = parallelDegree;
            return this;
        }
        @CustomType.Setter
        public Builder postMaskingScript(String postMaskingScript) {
            if (postMaskingScript == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "postMaskingScript");
            }
            this.postMaskingScript = postMaskingScript;
            return this;
        }
        @CustomType.Setter
        public Builder preMaskingScript(String preMaskingScript) {
            if (preMaskingScript == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "preMaskingScript");
            }
            this.preMaskingScript = preMaskingScript;
            return this;
        }
        @CustomType.Setter
        public Builder recompile(String recompile) {
            if (recompile == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "recompile");
            }
            this.recompile = recompile;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMaskingPoliciesMaskingPolicyCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMaskingPoliciesMaskingPolicyCollectionItem build() {
            final var _resultValue = new GetMaskingPoliciesMaskingPolicyCollectionItem();
            _resultValue.addMaskingColumnsFromSdmTrigger = addMaskingColumnsFromSdmTrigger;
            _resultValue.columnSources = columnSources;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isDropTempTablesEnabled = isDropTempTablesEnabled;
            _resultValue.isRedoLoggingEnabled = isRedoLoggingEnabled;
            _resultValue.isRefreshStatsEnabled = isRefreshStatsEnabled;
            _resultValue.parallelDegree = parallelDegree;
            _resultValue.postMaskingScript = postMaskingScript;
            _resultValue.preMaskingScript = preMaskingScript;
            _resultValue.recompile = recompile;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
