// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem {
    /**
     * @return A human-readable description for the log entry.
     * 
     */
    private String description;
    /**
     * @return An enum type entry for each health check in the masking policy. Each enum describes a type of health check. INVALID_OBJECT_CHECK checks if there exist any invalid objects in the masking tables. PRIVILEGE_CHECK checks if the masking user has sufficient privilege to run masking. TABLESPACE_CHECK checks if the user has sufficient default and TEMP tablespace. DATABASE_OR_SYSTEM_TRIGGERS_CHECK checks if there exist any database/system triggers available. UNDO_TABLESPACE_CHECK checks if the AUTOEXTEND feature is enabled for the undo tablespace. If it&#39;s not enabled, it further checks if the undo tablespace has any space remaining STATE_STATS_CHECK checks if all the statistics of the masking table is upto date or not. OLS_POLICY_CHECK , VPD_POLICY_CHECK and REDACTION_POLICY_CHECK checks if the masking tables has Oracle Label Security (OLS) or Virtual Private Database (VPD) or Redaction policies enabled. DV_ENABLE_CHECK checks if database has Database Vault(DV) enabled DE_COL_SIZE_CHECK checks if any masking column with DETERMINISTIC ENCRYPTION as masking format has average column size greater than 27 or not. ACTIVE_MASK_JOB_CHECK checks if there is any active masking job running on the target database. DETERMINISTIC_ENCRYPTION_FORMAT_CHECK checks if any masking column has deterministic encryption masking format. COLUMN_EXIST_CHECK checks if the masking columns are available in the target database.
     * 
     */
    private String healthCheckType;
    /**
     * @return A human-readable log entry.
     * 
     */
    private String message;
    /**
     * @return A filter to return only the resources that match the specified log message type.
     * 
     */
    private String messageType;
    /**
     * @return A human-readable log entry to remedy any error or warnings in the masking policy.
     * 
     */
    private String remediation;
    /**
     * @return The date and time the log entry was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timestamp;

    private GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem() {}
    /**
     * @return A human-readable description for the log entry.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return An enum type entry for each health check in the masking policy. Each enum describes a type of health check. INVALID_OBJECT_CHECK checks if there exist any invalid objects in the masking tables. PRIVILEGE_CHECK checks if the masking user has sufficient privilege to run masking. TABLESPACE_CHECK checks if the user has sufficient default and TEMP tablespace. DATABASE_OR_SYSTEM_TRIGGERS_CHECK checks if there exist any database/system triggers available. UNDO_TABLESPACE_CHECK checks if the AUTOEXTEND feature is enabled for the undo tablespace. If it&#39;s not enabled, it further checks if the undo tablespace has any space remaining STATE_STATS_CHECK checks if all the statistics of the masking table is upto date or not. OLS_POLICY_CHECK , VPD_POLICY_CHECK and REDACTION_POLICY_CHECK checks if the masking tables has Oracle Label Security (OLS) or Virtual Private Database (VPD) or Redaction policies enabled. DV_ENABLE_CHECK checks if database has Database Vault(DV) enabled DE_COL_SIZE_CHECK checks if any masking column with DETERMINISTIC ENCRYPTION as masking format has average column size greater than 27 or not. ACTIVE_MASK_JOB_CHECK checks if there is any active masking job running on the target database. DETERMINISTIC_ENCRYPTION_FORMAT_CHECK checks if any masking column has deterministic encryption masking format. COLUMN_EXIST_CHECK checks if the masking columns are available in the target database.
     * 
     */
    public String healthCheckType() {
        return this.healthCheckType;
    }
    /**
     * @return A human-readable log entry.
     * 
     */
    public String message() {
        return this.message;
    }
    /**
     * @return A filter to return only the resources that match the specified log message type.
     * 
     */
    public String messageType() {
        return this.messageType;
    }
    /**
     * @return A human-readable log entry to remedy any error or warnings in the masking policy.
     * 
     */
    public String remediation() {
        return this.remediation;
    }
    /**
     * @return The date and time the log entry was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timestamp() {
        return this.timestamp;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String healthCheckType;
        private String message;
        private String messageType;
        private String remediation;
        private String timestamp;
        public Builder() {}
        public Builder(GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.message = defaults.message;
    	      this.messageType = defaults.messageType;
    	      this.remediation = defaults.remediation;
    	      this.timestamp = defaults.timestamp;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckType(String healthCheckType) {
            if (healthCheckType == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem", "healthCheckType");
            }
            this.healthCheckType = healthCheckType;
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            if (message == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem", "message");
            }
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder messageType(String messageType) {
            if (messageType == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem", "messageType");
            }
            this.messageType = messageType;
            return this;
        }
        @CustomType.Setter
        public Builder remediation(String remediation) {
            if (remediation == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem", "remediation");
            }
            this.remediation = remediation;
            return this;
        }
        @CustomType.Setter
        public Builder timestamp(String timestamp) {
            if (timestamp == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem", "timestamp");
            }
            this.timestamp = timestamp;
            return this;
        }
        public GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem build() {
            final var _resultValue = new GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem();
            _resultValue.description = description;
            _resultValue.healthCheckType = healthCheckType;
            _resultValue.message = message;
            _resultValue.messageType = messageType;
            _resultValue.remediation = remediation;
            _resultValue.timestamp = timestamp;
            return _resultValue;
        }
    }
}
