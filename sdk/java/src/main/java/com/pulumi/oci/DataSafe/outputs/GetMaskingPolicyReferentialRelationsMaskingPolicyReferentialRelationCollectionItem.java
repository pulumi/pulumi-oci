// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChild;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParent;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem {
    /**
     * @return maskingPolicyColumnsInfo object has details of column group with schema details.
     * 
     */
    private List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChild> children;
    /**
     * @return The masking format associated with the parent column.
     * 
     */
    private List<String> maskingFormats;
    /**
     * @return The OCID of the masking policy.
     * 
     */
    private String maskingPolicyId;
    /**
     * @return maskingPolicyColumnsInfo object has details of column group with schema details.
     * 
     */
    private List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParent> parents;
    /**
     * @return A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    private String relationType;

    private GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem() {}
    /**
     * @return maskingPolicyColumnsInfo object has details of column group with schema details.
     * 
     */
    public List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChild> children() {
        return this.children;
    }
    /**
     * @return The masking format associated with the parent column.
     * 
     */
    public List<String> maskingFormats() {
        return this.maskingFormats;
    }
    /**
     * @return The OCID of the masking policy.
     * 
     */
    public String maskingPolicyId() {
        return this.maskingPolicyId;
    }
    /**
     * @return maskingPolicyColumnsInfo object has details of column group with schema details.
     * 
     */
    public List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParent> parents() {
        return this.parents;
    }
    /**
     * @return A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    public String relationType() {
        return this.relationType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChild> children;
        private List<String> maskingFormats;
        private String maskingPolicyId;
        private List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParent> parents;
        private String relationType;
        public Builder() {}
        public Builder(GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.children = defaults.children;
    	      this.maskingFormats = defaults.maskingFormats;
    	      this.maskingPolicyId = defaults.maskingPolicyId;
    	      this.parents = defaults.parents;
    	      this.relationType = defaults.relationType;
        }

        @CustomType.Setter
        public Builder children(List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChild> children) {
            if (children == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem", "children");
            }
            this.children = children;
            return this;
        }
        public Builder children(GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChild... children) {
            return children(List.of(children));
        }
        @CustomType.Setter
        public Builder maskingFormats(List<String> maskingFormats) {
            if (maskingFormats == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem", "maskingFormats");
            }
            this.maskingFormats = maskingFormats;
            return this;
        }
        public Builder maskingFormats(String... maskingFormats) {
            return maskingFormats(List.of(maskingFormats));
        }
        @CustomType.Setter
        public Builder maskingPolicyId(String maskingPolicyId) {
            if (maskingPolicyId == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem", "maskingPolicyId");
            }
            this.maskingPolicyId = maskingPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder parents(List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParent> parents) {
            if (parents == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem", "parents");
            }
            this.parents = parents;
            return this;
        }
        public Builder parents(GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParent... parents) {
            return parents(List.of(parents));
        }
        @CustomType.Setter
        public Builder relationType(String relationType) {
            if (relationType == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem", "relationType");
            }
            this.relationType = relationType;
            return this;
        }
        public GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem build() {
            final var _resultValue = new GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItem();
            _resultValue.children = children;
            _resultValue.maskingFormats = maskingFormats;
            _resultValue.maskingPolicyId = maskingPolicyId;
            _resultValue.parents = parents;
            _resultValue.relationType = relationType;
            return _resultValue;
        }
    }
}
