// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPolicyReferentialRelationsFilter;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetMaskingPolicyReferentialRelationsResult {
    private @Nullable List<String> columnNames;
    private @Nullable List<GetMaskingPolicyReferentialRelationsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The OCID of the masking policy that contains the column.
     * 
     */
    private String maskingPolicyId;
    /**
     * @return The list of masking_policy_referential_relation_collection.
     * 
     */
    private List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollection> maskingPolicyReferentialRelationCollections;
    /**
     * @return The name of the object (table or editioning view) that contains the database column(s).
     * 
     */
    private @Nullable List<String> objects;
    /**
     * @return The type of referential relationship the column has with its parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    private @Nullable List<String> relationTypes;
    /**
     * @return The name of the schema that contains the database column(s).
     * 
     */
    private @Nullable List<String> schemaNames;

    private GetMaskingPolicyReferentialRelationsResult() {}
    public List<String> columnNames() {
        return this.columnNames == null ? List.of() : this.columnNames;
    }
    public List<GetMaskingPolicyReferentialRelationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the masking policy that contains the column.
     * 
     */
    public String maskingPolicyId() {
        return this.maskingPolicyId;
    }
    /**
     * @return The list of masking_policy_referential_relation_collection.
     * 
     */
    public List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollection> maskingPolicyReferentialRelationCollections() {
        return this.maskingPolicyReferentialRelationCollections;
    }
    /**
     * @return The name of the object (table or editioning view) that contains the database column(s).
     * 
     */
    public List<String> objects() {
        return this.objects == null ? List.of() : this.objects;
    }
    /**
     * @return The type of referential relationship the column has with its parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    public List<String> relationTypes() {
        return this.relationTypes == null ? List.of() : this.relationTypes;
    }
    /**
     * @return The name of the schema that contains the database column(s).
     * 
     */
    public List<String> schemaNames() {
        return this.schemaNames == null ? List.of() : this.schemaNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPolicyReferentialRelationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> columnNames;
        private @Nullable List<GetMaskingPolicyReferentialRelationsFilter> filters;
        private String id;
        private String maskingPolicyId;
        private List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollection> maskingPolicyReferentialRelationCollections;
        private @Nullable List<String> objects;
        private @Nullable List<String> relationTypes;
        private @Nullable List<String> schemaNames;
        public Builder() {}
        public Builder(GetMaskingPolicyReferentialRelationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnNames = defaults.columnNames;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.maskingPolicyId = defaults.maskingPolicyId;
    	      this.maskingPolicyReferentialRelationCollections = defaults.maskingPolicyReferentialRelationCollections;
    	      this.objects = defaults.objects;
    	      this.relationTypes = defaults.relationTypes;
    	      this.schemaNames = defaults.schemaNames;
        }

        @CustomType.Setter
        public Builder columnNames(@Nullable List<String> columnNames) {

            this.columnNames = columnNames;
            return this;
        }
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetMaskingPolicyReferentialRelationsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetMaskingPolicyReferentialRelationsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maskingPolicyId(String maskingPolicyId) {
            if (maskingPolicyId == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsResult", "maskingPolicyId");
            }
            this.maskingPolicyId = maskingPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder maskingPolicyReferentialRelationCollections(List<GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollection> maskingPolicyReferentialRelationCollections) {
            if (maskingPolicyReferentialRelationCollections == null) {
              throw new MissingRequiredPropertyException("GetMaskingPolicyReferentialRelationsResult", "maskingPolicyReferentialRelationCollections");
            }
            this.maskingPolicyReferentialRelationCollections = maskingPolicyReferentialRelationCollections;
            return this;
        }
        public Builder maskingPolicyReferentialRelationCollections(GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollection... maskingPolicyReferentialRelationCollections) {
            return maskingPolicyReferentialRelationCollections(List.of(maskingPolicyReferentialRelationCollections));
        }
        @CustomType.Setter
        public Builder objects(@Nullable List<String> objects) {

            this.objects = objects;
            return this;
        }
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }
        @CustomType.Setter
        public Builder relationTypes(@Nullable List<String> relationTypes) {

            this.relationTypes = relationTypes;
            return this;
        }
        public Builder relationTypes(String... relationTypes) {
            return relationTypes(List.of(relationTypes));
        }
        @CustomType.Setter
        public Builder schemaNames(@Nullable List<String> schemaNames) {

            this.schemaNames = schemaNames;
            return this;
        }
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }
        public GetMaskingPolicyReferentialRelationsResult build() {
            final var _resultValue = new GetMaskingPolicyReferentialRelationsResult();
            _resultValue.columnNames = columnNames;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.maskingPolicyId = maskingPolicyId;
            _resultValue.maskingPolicyReferentialRelationCollections = maskingPolicyReferentialRelationCollections;
            _resultValue.objects = objects;
            _resultValue.relationTypes = relationTypes;
            _resultValue.schemaNames = schemaNames;
            return _resultValue;
        }
    }
}
