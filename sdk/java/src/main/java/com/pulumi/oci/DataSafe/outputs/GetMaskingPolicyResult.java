// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetMaskingPolicyColumnSource;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMaskingPolicyResult {
    private @Nullable Integer addMaskingColumnsFromSdmTrigger;
    /**
     * @return The source of masking columns.
     * 
     */
    private @Nullable List<GetMaskingPolicyColumnSource> columnSources;
    /**
     * @return The OCID of the compartment that contains the masking policy.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return The description of the masking policy.
     * 
     */
    private @Nullable String description;
    /**
     * @return The display name of the masking policy.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The OCID of the masking policy.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
     * 
     */
    private @Nullable Boolean isDropTempTablesEnabled;
    /**
     * @return Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
     * 
     */
    private @Nullable Boolean isRedoLoggingEnabled;
    /**
     * @return Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
     * 
     */
    private @Nullable Boolean isRefreshStatsEnabled;
    private String maskingPolicyId;
    /**
     * @return Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
     * 
     */
    private @Nullable String parallelDegree;
    /**
     * @return A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
     * 
     */
    private @Nullable String postMaskingScript;
    /**
     * @return A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
     * 
     */
    private @Nullable String preMaskingScript;
    /**
     * @return Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
     * 
     */
    private @Nullable String recompile;
    /**
     * @return The current state of the masking policy.
     * 
     */
    private @Nullable String state;
    /**
     * @return The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    private @Nullable String timeUpdated;

    private GetMaskingPolicyResult() {}
    public Optional<Integer> addMaskingColumnsFromSdmTrigger() {
        return Optional.ofNullable(this.addMaskingColumnsFromSdmTrigger);
    }
    /**
     * @return The source of masking columns.
     * 
     */
    public List<GetMaskingPolicyColumnSource> columnSources() {
        return this.columnSources == null ? List.of() : this.columnSources;
    }
    /**
     * @return The OCID of the compartment that contains the masking policy.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return The description of the masking policy.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The display name of the masking policy.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The OCID of the masking policy.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates if the temporary tables created during a masking operation should be dropped after masking. It&#39;s enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
     * 
     */
    public Optional<Boolean> isDropTempTablesEnabled() {
        return Optional.ofNullable(this.isDropTempTablesEnabled);
    }
    /**
     * @return Indicates if redo logging is enabled during a masking operation. It&#39;s disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
     * 
     */
    public Optional<Boolean> isRedoLoggingEnabled() {
        return Optional.ofNullable(this.isRedoLoggingEnabled);
    }
    /**
     * @return Indicates if statistics gathering is enabled. It&#39;s enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
     * 
     */
    public Optional<Boolean> isRefreshStatsEnabled() {
        return Optional.ofNullable(this.isRefreshStatsEnabled);
    }
    public String maskingPolicyId() {
        return this.maskingPolicyId;
    }
    /**
     * @return Specifies options to enable parallel execution when running data masking. Allowed values are &#39;NONE&#39; (no parallelism), &#39;DEFAULT&#39; (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
     * 
     */
    public Optional<String> parallelDegree() {
        return Optional.ofNullable(this.parallelDegree);
    }
    /**
     * @return A post-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed after the core masking script generated using the masking policy. It&#39;s usually used to perform additional transformation or cleanup work after masking.
     * 
     */
    public Optional<String> postMaskingScript() {
        return Optional.ofNullable(this.postMaskingScript);
    }
    /**
     * @return A pre-masking script, which can contain SQL and PL/SQL statements. It&#39;s executed before  the core masking script generated using the masking policy. It&#39;s usually used to perform any preparation or prerequisite work before masking data.
     * 
     */
    public Optional<String> preMaskingScript() {
        return Optional.ofNullable(this.preMaskingScript);
    }
    /**
     * @return Specifies how to recompile invalid objects post data masking. Allowed values are &#39;SERIAL&#39; (recompile in serial),  &#39;PARALLEL&#39; (recompile in parallel), &#39;NONE&#39; (do not recompile). If it&#39;s set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
     * 
     */
    public Optional<String> recompile() {
        return Optional.ofNullable(this.recompile);
    }
    /**
     * @return The current state of the masking policy.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer addMaskingColumnsFromSdmTrigger;
        private @Nullable List<GetMaskingPolicyColumnSource> columnSources;
        private @Nullable String compartmentId;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable Boolean isDropTempTablesEnabled;
        private @Nullable Boolean isRedoLoggingEnabled;
        private @Nullable Boolean isRefreshStatsEnabled;
        private String maskingPolicyId;
        private @Nullable String parallelDegree;
        private @Nullable String postMaskingScript;
        private @Nullable String preMaskingScript;
        private @Nullable String recompile;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(GetMaskingPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addMaskingColumnsFromSdmTrigger = defaults.addMaskingColumnsFromSdmTrigger;
    	      this.columnSources = defaults.columnSources;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isDropTempTablesEnabled = defaults.isDropTempTablesEnabled;
    	      this.isRedoLoggingEnabled = defaults.isRedoLoggingEnabled;
    	      this.isRefreshStatsEnabled = defaults.isRefreshStatsEnabled;
    	      this.maskingPolicyId = defaults.maskingPolicyId;
    	      this.parallelDegree = defaults.parallelDegree;
    	      this.postMaskingScript = defaults.postMaskingScript;
    	      this.preMaskingScript = defaults.preMaskingScript;
    	      this.recompile = defaults.recompile;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder addMaskingColumnsFromSdmTrigger(@Nullable Integer addMaskingColumnsFromSdmTrigger) {
            this.addMaskingColumnsFromSdmTrigger = addMaskingColumnsFromSdmTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder columnSources(@Nullable List<GetMaskingPolicyColumnSource> columnSources) {
            this.columnSources = columnSources;
            return this;
        }
        public Builder columnSources(GetMaskingPolicyColumnSource... columnSources) {
            return columnSources(List.of(columnSources));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDropTempTablesEnabled(@Nullable Boolean isDropTempTablesEnabled) {
            this.isDropTempTablesEnabled = isDropTempTablesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRedoLoggingEnabled(@Nullable Boolean isRedoLoggingEnabled) {
            this.isRedoLoggingEnabled = isRedoLoggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRefreshStatsEnabled(@Nullable Boolean isRefreshStatsEnabled) {
            this.isRefreshStatsEnabled = isRefreshStatsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maskingPolicyId(String maskingPolicyId) {
            this.maskingPolicyId = Objects.requireNonNull(maskingPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder parallelDegree(@Nullable String parallelDegree) {
            this.parallelDegree = parallelDegree;
            return this;
        }
        @CustomType.Setter
        public Builder postMaskingScript(@Nullable String postMaskingScript) {
            this.postMaskingScript = postMaskingScript;
            return this;
        }
        @CustomType.Setter
        public Builder preMaskingScript(@Nullable String preMaskingScript) {
            this.preMaskingScript = preMaskingScript;
            return this;
        }
        @CustomType.Setter
        public Builder recompile(@Nullable String recompile) {
            this.recompile = recompile;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetMaskingPolicyResult build() {
            final var o = new GetMaskingPolicyResult();
            o.addMaskingColumnsFromSdmTrigger = addMaskingColumnsFromSdmTrigger;
            o.columnSources = columnSources;
            o.compartmentId = compartmentId;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isDropTempTablesEnabled = isDropTempTablesEnabled;
            o.isRedoLoggingEnabled = isRedoLoggingEnabled;
            o.isRefreshStatsEnabled = isRefreshStatsEnabled;
            o.maskingPolicyId = maskingPolicyId;
            o.parallelDegree = parallelDegree;
            o.postMaskingScript = postMaskingScript;
            o.preMaskingScript = preMaskingScript;
            o.recompile = recompile;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
