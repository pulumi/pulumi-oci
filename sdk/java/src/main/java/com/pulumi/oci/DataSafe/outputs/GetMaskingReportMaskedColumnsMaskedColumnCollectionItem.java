// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMaskingReportMaskedColumnsMaskedColumnCollectionItem {
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    private @Nullable String columnName;
    /**
     * @return The unique key that identifies the masked column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    private @Nullable String key;
    /**
     * @return A filter to return only the resources that match the specified masking column group.
     * 
     */
    private @Nullable String maskingColumnGroup;
    /**
     * @return The masking format used for masking the column.
     * 
     */
    private @Nullable String maskingFormatUsed;
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    private @Nullable String object;
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    private @Nullable String objectType;
    /**
     * @return The unique key that identifies the parent column of the masked column.
     * 
     */
    private @Nullable String parentColumnKey;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private @Nullable String schemaName;
    /**
     * @return A filter to return only items related to a specific sensitive type OCID.
     * 
     */
    private @Nullable String sensitiveTypeId;
    /**
     * @return The total number of values masked in the column.
     * 
     */
    private @Nullable String totalMaskedValues;

    private GetMaskingReportMaskedColumnsMaskedColumnCollectionItem() {}
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public Optional<String> columnName() {
        return Optional.ofNullable(this.columnName);
    }
    /**
     * @return The unique key that identifies the masked column. It&#39;s numeric and unique within a masking policy.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return A filter to return only the resources that match the specified masking column group.
     * 
     */
    public Optional<String> maskingColumnGroup() {
        return Optional.ofNullable(this.maskingColumnGroup);
    }
    /**
     * @return The masking format used for masking the column.
     * 
     */
    public Optional<String> maskingFormatUsed() {
        return Optional.ofNullable(this.maskingFormatUsed);
    }
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public Optional<String> object() {
        return Optional.ofNullable(this.object);
    }
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    public Optional<String> objectType() {
        return Optional.ofNullable(this.objectType);
    }
    /**
     * @return The unique key that identifies the parent column of the masked column.
     * 
     */
    public Optional<String> parentColumnKey() {
        return Optional.ofNullable(this.parentColumnKey);
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    /**
     * @return A filter to return only items related to a specific sensitive type OCID.
     * 
     */
    public Optional<String> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }
    /**
     * @return The total number of values masked in the column.
     * 
     */
    public Optional<String> totalMaskedValues() {
        return Optional.ofNullable(this.totalMaskedValues);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingReportMaskedColumnsMaskedColumnCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String columnName;
        private @Nullable String key;
        private @Nullable String maskingColumnGroup;
        private @Nullable String maskingFormatUsed;
        private @Nullable String object;
        private @Nullable String objectType;
        private @Nullable String parentColumnKey;
        private @Nullable String schemaName;
        private @Nullable String sensitiveTypeId;
        private @Nullable String totalMaskedValues;
        public Builder() {}
        public Builder(GetMaskingReportMaskedColumnsMaskedColumnCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnName = defaults.columnName;
    	      this.key = defaults.key;
    	      this.maskingColumnGroup = defaults.maskingColumnGroup;
    	      this.maskingFormatUsed = defaults.maskingFormatUsed;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.parentColumnKey = defaults.parentColumnKey;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.totalMaskedValues = defaults.totalMaskedValues;
        }

        @CustomType.Setter
        public Builder columnName(@Nullable String columnName) {
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder maskingColumnGroup(@Nullable String maskingColumnGroup) {
            this.maskingColumnGroup = maskingColumnGroup;
            return this;
        }
        @CustomType.Setter
        public Builder maskingFormatUsed(@Nullable String maskingFormatUsed) {
            this.maskingFormatUsed = maskingFormatUsed;
            return this;
        }
        @CustomType.Setter
        public Builder object(@Nullable String object) {
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(@Nullable String objectType) {
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder parentColumnKey(@Nullable String parentColumnKey) {
            this.parentColumnKey = parentColumnKey;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(@Nullable String sensitiveTypeId) {
            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedValues(@Nullable String totalMaskedValues) {
            this.totalMaskedValues = totalMaskedValues;
            return this;
        }
        public GetMaskingReportMaskedColumnsMaskedColumnCollectionItem build() {
            final var o = new GetMaskingReportMaskedColumnsMaskedColumnCollectionItem();
            o.columnName = columnName;
            o.key = key;
            o.maskingColumnGroup = maskingColumnGroup;
            o.maskingFormatUsed = maskingFormatUsed;
            o.object = object;
            o.objectType = objectType;
            o.parentColumnKey = parentColumnKey;
            o.schemaName = schemaName;
            o.sensitiveTypeId = sensitiveTypeId;
            o.totalMaskedValues = totalMaskedValues;
            return o;
        }
    }
}
