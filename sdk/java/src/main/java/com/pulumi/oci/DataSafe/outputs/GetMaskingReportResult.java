// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMaskingReportResult {
    /**
     * @return The OCID of the compartment that contains the masking report.
     * 
     */
    private String compartmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates if the temporary tables created during the masking operation were dropped after masking.
     * 
     */
    private Boolean isDropTempTablesEnabled;
    /**
     * @return Indicates if redo logging was enabled during the masking operation.
     * 
     */
    private Boolean isRedoLoggingEnabled;
    /**
     * @return Indicates if statistics gathering was enabled during the masking operation.
     * 
     */
    private Boolean isRefreshStatsEnabled;
    /**
     * @return The OCID of the masking policy used.
     * 
     */
    private String maskingPolicyId;
    private String maskingReportId;
    /**
     * @return The status of the masking job.
     * 
     */
    private String maskingStatus;
    /**
     * @return The OCID of the masking work request that resulted in this masking report.
     * 
     */
    private String maskingWorkRequestId;
    /**
     * @return Indicates if parallel execution was enabled during the masking operation.
     * 
     */
    private String parallelDegree;
    /**
     * @return Indicates how invalid objects were recompiled post the masking operation.
     * 
     */
    private String recompile;
    /**
     * @return The current state of the masking report.
     * 
     */
    private String state;
    /**
     * @return The OCID of the target database masked.
     * 
     */
    private String targetId;
    /**
     * @return The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    private String timeMaskingFinished;
    /**
     * @return The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    private String timeMaskingStarted;
    /**
     * @return The total number of masked columns.
     * 
     */
    private String totalMaskedColumns;
    /**
     * @return The total number of unique objects (tables and editioning views) that contain the masked columns.
     * 
     */
    private String totalMaskedObjects;
    /**
     * @return The total number of unique schemas that contain the masked columns.
     * 
     */
    private String totalMaskedSchemas;
    /**
     * @return The total number of unique sensitive types associated with the masked columns.
     * 
     */
    private String totalMaskedSensitiveTypes;
    /**
     * @return The total number of masked values.
     * 
     */
    private String totalMaskedValues;
    /**
     * @return The total number of errors in post-masking script.
     * 
     */
    private String totalPostMaskingScriptErrors;
    /**
     * @return The total number of errors in pre-masking script.
     * 
     */
    private String totalPreMaskingScriptErrors;

    private GetMaskingReportResult() {}
    /**
     * @return The OCID of the compartment that contains the masking report.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if the temporary tables created during the masking operation were dropped after masking.
     * 
     */
    public Boolean isDropTempTablesEnabled() {
        return this.isDropTempTablesEnabled;
    }
    /**
     * @return Indicates if redo logging was enabled during the masking operation.
     * 
     */
    public Boolean isRedoLoggingEnabled() {
        return this.isRedoLoggingEnabled;
    }
    /**
     * @return Indicates if statistics gathering was enabled during the masking operation.
     * 
     */
    public Boolean isRefreshStatsEnabled() {
        return this.isRefreshStatsEnabled;
    }
    /**
     * @return The OCID of the masking policy used.
     * 
     */
    public String maskingPolicyId() {
        return this.maskingPolicyId;
    }
    public String maskingReportId() {
        return this.maskingReportId;
    }
    /**
     * @return The status of the masking job.
     * 
     */
    public String maskingStatus() {
        return this.maskingStatus;
    }
    /**
     * @return The OCID of the masking work request that resulted in this masking report.
     * 
     */
    public String maskingWorkRequestId() {
        return this.maskingWorkRequestId;
    }
    /**
     * @return Indicates if parallel execution was enabled during the masking operation.
     * 
     */
    public String parallelDegree() {
        return this.parallelDegree;
    }
    /**
     * @return Indicates how invalid objects were recompiled post the masking operation.
     * 
     */
    public String recompile() {
        return this.recompile;
    }
    /**
     * @return The current state of the masking report.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the target database masked.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public String timeMaskingFinished() {
        return this.timeMaskingFinished;
    }
    /**
     * @return The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public String timeMaskingStarted() {
        return this.timeMaskingStarted;
    }
    /**
     * @return The total number of masked columns.
     * 
     */
    public String totalMaskedColumns() {
        return this.totalMaskedColumns;
    }
    /**
     * @return The total number of unique objects (tables and editioning views) that contain the masked columns.
     * 
     */
    public String totalMaskedObjects() {
        return this.totalMaskedObjects;
    }
    /**
     * @return The total number of unique schemas that contain the masked columns.
     * 
     */
    public String totalMaskedSchemas() {
        return this.totalMaskedSchemas;
    }
    /**
     * @return The total number of unique sensitive types associated with the masked columns.
     * 
     */
    public String totalMaskedSensitiveTypes() {
        return this.totalMaskedSensitiveTypes;
    }
    /**
     * @return The total number of masked values.
     * 
     */
    public String totalMaskedValues() {
        return this.totalMaskedValues;
    }
    /**
     * @return The total number of errors in post-masking script.
     * 
     */
    public String totalPostMaskingScriptErrors() {
        return this.totalPostMaskingScriptErrors;
    }
    /**
     * @return The total number of errors in pre-masking script.
     * 
     */
    public String totalPreMaskingScriptErrors() {
        return this.totalPreMaskingScriptErrors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingReportResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String id;
        private Boolean isDropTempTablesEnabled;
        private Boolean isRedoLoggingEnabled;
        private Boolean isRefreshStatsEnabled;
        private String maskingPolicyId;
        private String maskingReportId;
        private String maskingStatus;
        private String maskingWorkRequestId;
        private String parallelDegree;
        private String recompile;
        private String state;
        private String targetId;
        private String timeCreated;
        private String timeMaskingFinished;
        private String timeMaskingStarted;
        private String totalMaskedColumns;
        private String totalMaskedObjects;
        private String totalMaskedSchemas;
        private String totalMaskedSensitiveTypes;
        private String totalMaskedValues;
        private String totalPostMaskingScriptErrors;
        private String totalPreMaskingScriptErrors;
        public Builder() {}
        public Builder(GetMaskingReportResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.isDropTempTablesEnabled = defaults.isDropTempTablesEnabled;
    	      this.isRedoLoggingEnabled = defaults.isRedoLoggingEnabled;
    	      this.isRefreshStatsEnabled = defaults.isRefreshStatsEnabled;
    	      this.maskingPolicyId = defaults.maskingPolicyId;
    	      this.maskingReportId = defaults.maskingReportId;
    	      this.maskingStatus = defaults.maskingStatus;
    	      this.maskingWorkRequestId = defaults.maskingWorkRequestId;
    	      this.parallelDegree = defaults.parallelDegree;
    	      this.recompile = defaults.recompile;
    	      this.state = defaults.state;
    	      this.targetId = defaults.targetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeMaskingFinished = defaults.timeMaskingFinished;
    	      this.timeMaskingStarted = defaults.timeMaskingStarted;
    	      this.totalMaskedColumns = defaults.totalMaskedColumns;
    	      this.totalMaskedObjects = defaults.totalMaskedObjects;
    	      this.totalMaskedSchemas = defaults.totalMaskedSchemas;
    	      this.totalMaskedSensitiveTypes = defaults.totalMaskedSensitiveTypes;
    	      this.totalMaskedValues = defaults.totalMaskedValues;
    	      this.totalPostMaskingScriptErrors = defaults.totalPostMaskingScriptErrors;
    	      this.totalPreMaskingScriptErrors = defaults.totalPreMaskingScriptErrors;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDropTempTablesEnabled(Boolean isDropTempTablesEnabled) {
            if (isDropTempTablesEnabled == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "isDropTempTablesEnabled");
            }
            this.isDropTempTablesEnabled = isDropTempTablesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRedoLoggingEnabled(Boolean isRedoLoggingEnabled) {
            if (isRedoLoggingEnabled == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "isRedoLoggingEnabled");
            }
            this.isRedoLoggingEnabled = isRedoLoggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRefreshStatsEnabled(Boolean isRefreshStatsEnabled) {
            if (isRefreshStatsEnabled == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "isRefreshStatsEnabled");
            }
            this.isRefreshStatsEnabled = isRefreshStatsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maskingPolicyId(String maskingPolicyId) {
            if (maskingPolicyId == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "maskingPolicyId");
            }
            this.maskingPolicyId = maskingPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder maskingReportId(String maskingReportId) {
            if (maskingReportId == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "maskingReportId");
            }
            this.maskingReportId = maskingReportId;
            return this;
        }
        @CustomType.Setter
        public Builder maskingStatus(String maskingStatus) {
            if (maskingStatus == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "maskingStatus");
            }
            this.maskingStatus = maskingStatus;
            return this;
        }
        @CustomType.Setter
        public Builder maskingWorkRequestId(String maskingWorkRequestId) {
            if (maskingWorkRequestId == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "maskingWorkRequestId");
            }
            this.maskingWorkRequestId = maskingWorkRequestId;
            return this;
        }
        @CustomType.Setter
        public Builder parallelDegree(String parallelDegree) {
            if (parallelDegree == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "parallelDegree");
            }
            this.parallelDegree = parallelDegree;
            return this;
        }
        @CustomType.Setter
        public Builder recompile(String recompile) {
            if (recompile == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "recompile");
            }
            this.recompile = recompile;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaskingFinished(String timeMaskingFinished) {
            if (timeMaskingFinished == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "timeMaskingFinished");
            }
            this.timeMaskingFinished = timeMaskingFinished;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaskingStarted(String timeMaskingStarted) {
            if (timeMaskingStarted == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "timeMaskingStarted");
            }
            this.timeMaskingStarted = timeMaskingStarted;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedColumns(String totalMaskedColumns) {
            if (totalMaskedColumns == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "totalMaskedColumns");
            }
            this.totalMaskedColumns = totalMaskedColumns;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedObjects(String totalMaskedObjects) {
            if (totalMaskedObjects == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "totalMaskedObjects");
            }
            this.totalMaskedObjects = totalMaskedObjects;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedSchemas(String totalMaskedSchemas) {
            if (totalMaskedSchemas == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "totalMaskedSchemas");
            }
            this.totalMaskedSchemas = totalMaskedSchemas;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedSensitiveTypes(String totalMaskedSensitiveTypes) {
            if (totalMaskedSensitiveTypes == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "totalMaskedSensitiveTypes");
            }
            this.totalMaskedSensitiveTypes = totalMaskedSensitiveTypes;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedValues(String totalMaskedValues) {
            if (totalMaskedValues == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "totalMaskedValues");
            }
            this.totalMaskedValues = totalMaskedValues;
            return this;
        }
        @CustomType.Setter
        public Builder totalPostMaskingScriptErrors(String totalPostMaskingScriptErrors) {
            if (totalPostMaskingScriptErrors == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "totalPostMaskingScriptErrors");
            }
            this.totalPostMaskingScriptErrors = totalPostMaskingScriptErrors;
            return this;
        }
        @CustomType.Setter
        public Builder totalPreMaskingScriptErrors(String totalPreMaskingScriptErrors) {
            if (totalPreMaskingScriptErrors == null) {
              throw new MissingRequiredPropertyException("GetMaskingReportResult", "totalPreMaskingScriptErrors");
            }
            this.totalPreMaskingScriptErrors = totalPreMaskingScriptErrors;
            return this;
        }
        public GetMaskingReportResult build() {
            final var _resultValue = new GetMaskingReportResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.id = id;
            _resultValue.isDropTempTablesEnabled = isDropTempTablesEnabled;
            _resultValue.isRedoLoggingEnabled = isRedoLoggingEnabled;
            _resultValue.isRefreshStatsEnabled = isRefreshStatsEnabled;
            _resultValue.maskingPolicyId = maskingPolicyId;
            _resultValue.maskingReportId = maskingReportId;
            _resultValue.maskingStatus = maskingStatus;
            _resultValue.maskingWorkRequestId = maskingWorkRequestId;
            _resultValue.parallelDegree = parallelDegree;
            _resultValue.recompile = recompile;
            _resultValue.state = state;
            _resultValue.targetId = targetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeMaskingFinished = timeMaskingFinished;
            _resultValue.timeMaskingStarted = timeMaskingStarted;
            _resultValue.totalMaskedColumns = totalMaskedColumns;
            _resultValue.totalMaskedObjects = totalMaskedObjects;
            _resultValue.totalMaskedSchemas = totalMaskedSchemas;
            _resultValue.totalMaskedSensitiveTypes = totalMaskedSensitiveTypes;
            _resultValue.totalMaskedValues = totalMaskedValues;
            _resultValue.totalPostMaskingScriptErrors = totalPostMaskingScriptErrors;
            _resultValue.totalPreMaskingScriptErrors = totalPreMaskingScriptErrors;
            return _resultValue;
        }
    }
}
