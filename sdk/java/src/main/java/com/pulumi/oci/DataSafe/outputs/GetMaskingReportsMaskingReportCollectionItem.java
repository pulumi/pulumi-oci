// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMaskingReportsMaskingReportCollectionItem {
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The OCID of the masking report.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates if the temporary tables created during the masking operation were dropped after masking.
     * 
     */
    private @Nullable Boolean isDropTempTablesEnabled;
    /**
     * @return Indicates if redo logging was enabled during the masking operation.
     * 
     */
    private @Nullable Boolean isRedoLoggingEnabled;
    /**
     * @return Indicates if statistics gathering was enabled during the masking operation.
     * 
     */
    private @Nullable Boolean isRefreshStatsEnabled;
    /**
     * @return A filter to return only the resources that match the specified masking policy OCID.
     * 
     */
    private @Nullable String maskingPolicyId;
    /**
     * @return The OCID of the masking work request that resulted in this masking report.
     * 
     */
    private @Nullable String maskingWorkRequestId;
    /**
     * @return Indicates if parallel execution was enabled during the masking operation.
     * 
     */
    private @Nullable String parallelDegree;
    /**
     * @return Indicates how invalid objects were recompiled post the masking operation.
     * 
     */
    private @Nullable String recompile;
    /**
     * @return The current state of the masking report.
     * 
     */
    private @Nullable String state;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    private @Nullable String timeMaskingFinished;
    /**
     * @return The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    private @Nullable String timeMaskingStarted;
    /**
     * @return The total number of masked columns.
     * 
     */
    private @Nullable String totalMaskedColumns;
    /**
     * @return The total number of unique objects (tables and editioning views) that contain the masked columns.
     * 
     */
    private @Nullable String totalMaskedObjects;
    /**
     * @return The total number of unique schemas that contain the masked columns.
     * 
     */
    private @Nullable String totalMaskedSchemas;
    /**
     * @return The total number of unique sensitive types associated with the masked columns.
     * 
     */
    private @Nullable String totalMaskedSensitiveTypes;
    /**
     * @return The total number of masked values.
     * 
     */
    private @Nullable String totalMaskedValues;

    private GetMaskingReportsMaskingReportCollectionItem() {}
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The OCID of the masking report.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates if the temporary tables created during the masking operation were dropped after masking.
     * 
     */
    public Optional<Boolean> isDropTempTablesEnabled() {
        return Optional.ofNullable(this.isDropTempTablesEnabled);
    }
    /**
     * @return Indicates if redo logging was enabled during the masking operation.
     * 
     */
    public Optional<Boolean> isRedoLoggingEnabled() {
        return Optional.ofNullable(this.isRedoLoggingEnabled);
    }
    /**
     * @return Indicates if statistics gathering was enabled during the masking operation.
     * 
     */
    public Optional<Boolean> isRefreshStatsEnabled() {
        return Optional.ofNullable(this.isRefreshStatsEnabled);
    }
    /**
     * @return A filter to return only the resources that match the specified masking policy OCID.
     * 
     */
    public Optional<String> maskingPolicyId() {
        return Optional.ofNullable(this.maskingPolicyId);
    }
    /**
     * @return The OCID of the masking work request that resulted in this masking report.
     * 
     */
    public Optional<String> maskingWorkRequestId() {
        return Optional.ofNullable(this.maskingWorkRequestId);
    }
    /**
     * @return Indicates if parallel execution was enabled during the masking operation.
     * 
     */
    public Optional<String> parallelDegree() {
        return Optional.ofNullable(this.parallelDegree);
    }
    /**
     * @return Indicates how invalid objects were recompiled post the masking operation.
     * 
     */
    public Optional<String> recompile() {
        return Optional.ofNullable(this.recompile);
    }
    /**
     * @return The current state of the masking report.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public Optional<String> timeMaskingFinished() {
        return Optional.ofNullable(this.timeMaskingFinished);
    }
    /**
     * @return The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
     * 
     */
    public Optional<String> timeMaskingStarted() {
        return Optional.ofNullable(this.timeMaskingStarted);
    }
    /**
     * @return The total number of masked columns.
     * 
     */
    public Optional<String> totalMaskedColumns() {
        return Optional.ofNullable(this.totalMaskedColumns);
    }
    /**
     * @return The total number of unique objects (tables and editioning views) that contain the masked columns.
     * 
     */
    public Optional<String> totalMaskedObjects() {
        return Optional.ofNullable(this.totalMaskedObjects);
    }
    /**
     * @return The total number of unique schemas that contain the masked columns.
     * 
     */
    public Optional<String> totalMaskedSchemas() {
        return Optional.ofNullable(this.totalMaskedSchemas);
    }
    /**
     * @return The total number of unique sensitive types associated with the masked columns.
     * 
     */
    public Optional<String> totalMaskedSensitiveTypes() {
        return Optional.ofNullable(this.totalMaskedSensitiveTypes);
    }
    /**
     * @return The total number of masked values.
     * 
     */
    public Optional<String> totalMaskedValues() {
        return Optional.ofNullable(this.totalMaskedValues);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaskingReportsMaskingReportCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String id;
        private @Nullable Boolean isDropTempTablesEnabled;
        private @Nullable Boolean isRedoLoggingEnabled;
        private @Nullable Boolean isRefreshStatsEnabled;
        private @Nullable String maskingPolicyId;
        private @Nullable String maskingWorkRequestId;
        private @Nullable String parallelDegree;
        private @Nullable String recompile;
        private @Nullable String state;
        private @Nullable String targetId;
        private @Nullable String timeCreated;
        private @Nullable String timeMaskingFinished;
        private @Nullable String timeMaskingStarted;
        private @Nullable String totalMaskedColumns;
        private @Nullable String totalMaskedObjects;
        private @Nullable String totalMaskedSchemas;
        private @Nullable String totalMaskedSensitiveTypes;
        private @Nullable String totalMaskedValues;
        public Builder() {}
        public Builder(GetMaskingReportsMaskingReportCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.id = defaults.id;
    	      this.isDropTempTablesEnabled = defaults.isDropTempTablesEnabled;
    	      this.isRedoLoggingEnabled = defaults.isRedoLoggingEnabled;
    	      this.isRefreshStatsEnabled = defaults.isRefreshStatsEnabled;
    	      this.maskingPolicyId = defaults.maskingPolicyId;
    	      this.maskingWorkRequestId = defaults.maskingWorkRequestId;
    	      this.parallelDegree = defaults.parallelDegree;
    	      this.recompile = defaults.recompile;
    	      this.state = defaults.state;
    	      this.targetId = defaults.targetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeMaskingFinished = defaults.timeMaskingFinished;
    	      this.timeMaskingStarted = defaults.timeMaskingStarted;
    	      this.totalMaskedColumns = defaults.totalMaskedColumns;
    	      this.totalMaskedObjects = defaults.totalMaskedObjects;
    	      this.totalMaskedSchemas = defaults.totalMaskedSchemas;
    	      this.totalMaskedSensitiveTypes = defaults.totalMaskedSensitiveTypes;
    	      this.totalMaskedValues = defaults.totalMaskedValues;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDropTempTablesEnabled(@Nullable Boolean isDropTempTablesEnabled) {
            this.isDropTempTablesEnabled = isDropTempTablesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRedoLoggingEnabled(@Nullable Boolean isRedoLoggingEnabled) {
            this.isRedoLoggingEnabled = isRedoLoggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRefreshStatsEnabled(@Nullable Boolean isRefreshStatsEnabled) {
            this.isRefreshStatsEnabled = isRefreshStatsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maskingPolicyId(@Nullable String maskingPolicyId) {
            this.maskingPolicyId = maskingPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder maskingWorkRequestId(@Nullable String maskingWorkRequestId) {
            this.maskingWorkRequestId = maskingWorkRequestId;
            return this;
        }
        @CustomType.Setter
        public Builder parallelDegree(@Nullable String parallelDegree) {
            this.parallelDegree = parallelDegree;
            return this;
        }
        @CustomType.Setter
        public Builder recompile(@Nullable String recompile) {
            this.recompile = recompile;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaskingFinished(@Nullable String timeMaskingFinished) {
            this.timeMaskingFinished = timeMaskingFinished;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaskingStarted(@Nullable String timeMaskingStarted) {
            this.timeMaskingStarted = timeMaskingStarted;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedColumns(@Nullable String totalMaskedColumns) {
            this.totalMaskedColumns = totalMaskedColumns;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedObjects(@Nullable String totalMaskedObjects) {
            this.totalMaskedObjects = totalMaskedObjects;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedSchemas(@Nullable String totalMaskedSchemas) {
            this.totalMaskedSchemas = totalMaskedSchemas;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedSensitiveTypes(@Nullable String totalMaskedSensitiveTypes) {
            this.totalMaskedSensitiveTypes = totalMaskedSensitiveTypes;
            return this;
        }
        @CustomType.Setter
        public Builder totalMaskedValues(@Nullable String totalMaskedValues) {
            this.totalMaskedValues = totalMaskedValues;
            return this;
        }
        public GetMaskingReportsMaskingReportCollectionItem build() {
            final var o = new GetMaskingReportsMaskingReportCollectionItem();
            o.compartmentId = compartmentId;
            o.id = id;
            o.isDropTempTablesEnabled = isDropTempTablesEnabled;
            o.isRedoLoggingEnabled = isRedoLoggingEnabled;
            o.isRefreshStatsEnabled = isRefreshStatsEnabled;
            o.maskingPolicyId = maskingPolicyId;
            o.maskingWorkRequestId = maskingWorkRequestId;
            o.parallelDegree = parallelDegree;
            o.recompile = recompile;
            o.state = state;
            o.targetId = targetId;
            o.timeCreated = timeCreated;
            o.timeMaskingFinished = timeMaskingFinished;
            o.timeMaskingStarted = timeMaskingStarted;
            o.totalMaskedColumns = totalMaskedColumns;
            o.totalMaskedObjects = totalMaskedObjects;
            o.totalMaskedSchemas = totalMaskedSchemas;
            o.totalMaskedSensitiveTypes = totalMaskedSensitiveTypes;
            o.totalMaskedValues = totalMaskedValues;
            return o;
        }
    }
}
