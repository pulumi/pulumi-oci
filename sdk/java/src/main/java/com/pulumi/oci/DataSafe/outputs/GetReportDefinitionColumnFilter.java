// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReportDefinitionColumnFilter {
    /**
     * @return An array of expressions based on the operator type. A filter may have one or more expressions.
     * 
     */
    private @Nullable List<String> expressions;
    /**
     * @return Name of the column that must be sorted.
     * 
     */
    private @Nullable String fieldName;
    /**
     * @return Indicates whether the filter is enabled. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    private @Nullable Boolean isEnabled;
    /**
     * @return Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    private @Nullable Boolean isHidden;
    /**
     * @return Specifies the type of operator that must be applied for example in, eq etc.
     * 
     */
    private @Nullable String operator;

    private GetReportDefinitionColumnFilter() {}
    /**
     * @return An array of expressions based on the operator type. A filter may have one or more expressions.
     * 
     */
    public List<String> expressions() {
        return this.expressions == null ? List.of() : this.expressions;
    }
    /**
     * @return Name of the column that must be sorted.
     * 
     */
    public Optional<String> fieldName() {
        return Optional.ofNullable(this.fieldName);
    }
    /**
     * @return Indicates whether the filter is enabled. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Optional<Boolean> isHidden() {
        return Optional.ofNullable(this.isHidden);
    }
    /**
     * @return Specifies the type of operator that must be applied for example in, eq etc.
     * 
     */
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReportDefinitionColumnFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> expressions;
        private @Nullable String fieldName;
        private @Nullable Boolean isEnabled;
        private @Nullable Boolean isHidden;
        private @Nullable String operator;
        public Builder() {}
        public Builder(GetReportDefinitionColumnFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expressions = defaults.expressions;
    	      this.fieldName = defaults.fieldName;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isHidden = defaults.isHidden;
    	      this.operator = defaults.operator;
        }

        @CustomType.Setter
        public Builder expressions(@Nullable List<String> expressions) {
            this.expressions = expressions;
            return this;
        }
        public Builder expressions(String... expressions) {
            return expressions(List.of(expressions));
        }
        @CustomType.Setter
        public Builder fieldName(@Nullable String fieldName) {
            this.fieldName = fieldName;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isHidden(@Nullable Boolean isHidden) {
            this.isHidden = isHidden;
            return this;
        }
        @CustomType.Setter
        public Builder operator(@Nullable String operator) {
            this.operator = operator;
            return this;
        }
        public GetReportDefinitionColumnFilter build() {
            final var o = new GetReportDefinitionColumnFilter();
            o.expressions = expressions;
            o.fieldName = fieldName;
            o.isEnabled = isEnabled;
            o.isHidden = isHidden;
            o.operator = operator;
            return o;
        }
    }
}
