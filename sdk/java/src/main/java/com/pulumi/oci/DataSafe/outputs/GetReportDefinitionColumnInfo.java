// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetReportDefinitionColumnInfo {
    /**
     * @return An array of operators that can be supported by column fieldName.
     * 
     */
    private List<String> applicableOperators;
    /**
     * @return Specifies the data type of the column.
     * 
     */
    private String dataType;
    /**
     * @return Name of the report definition.
     * 
     */
    private String displayName;
    /**
     * @return Specifies the order in which the summary must be displayed.
     * 
     */
    private Integer displayOrder;
    /**
     * @return Name of the column that must be sorted.
     * 
     */
    private String fieldName;
    /**
     * @return Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    private Boolean isHidden;
    /**
     * @return Specifies if column is virtual and can only be used as column filter.
     * 
     */
    private Boolean isVirtual;

    private GetReportDefinitionColumnInfo() {}
    /**
     * @return An array of operators that can be supported by column fieldName.
     * 
     */
    public List<String> applicableOperators() {
        return this.applicableOperators;
    }
    /**
     * @return Specifies the data type of the column.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Name of the report definition.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Specifies the order in which the summary must be displayed.
     * 
     */
    public Integer displayOrder() {
        return this.displayOrder;
    }
    /**
     * @return Name of the column that must be sorted.
     * 
     */
    public String fieldName() {
        return this.fieldName;
    }
    /**
     * @return Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Boolean isHidden() {
        return this.isHidden;
    }
    /**
     * @return Specifies if column is virtual and can only be used as column filter.
     * 
     */
    public Boolean isVirtual() {
        return this.isVirtual;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReportDefinitionColumnInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> applicableOperators;
        private String dataType;
        private String displayName;
        private Integer displayOrder;
        private String fieldName;
        private Boolean isHidden;
        private Boolean isVirtual;
        public Builder() {}
        public Builder(GetReportDefinitionColumnInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicableOperators = defaults.applicableOperators;
    	      this.dataType = defaults.dataType;
    	      this.displayName = defaults.displayName;
    	      this.displayOrder = defaults.displayOrder;
    	      this.fieldName = defaults.fieldName;
    	      this.isHidden = defaults.isHidden;
    	      this.isVirtual = defaults.isVirtual;
        }

        @CustomType.Setter
        public Builder applicableOperators(List<String> applicableOperators) {
            if (applicableOperators == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionColumnInfo", "applicableOperators");
            }
            this.applicableOperators = applicableOperators;
            return this;
        }
        public Builder applicableOperators(String... applicableOperators) {
            return applicableOperators(List.of(applicableOperators));
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionColumnInfo", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionColumnInfo", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayOrder(Integer displayOrder) {
            if (displayOrder == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionColumnInfo", "displayOrder");
            }
            this.displayOrder = displayOrder;
            return this;
        }
        @CustomType.Setter
        public Builder fieldName(String fieldName) {
            if (fieldName == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionColumnInfo", "fieldName");
            }
            this.fieldName = fieldName;
            return this;
        }
        @CustomType.Setter
        public Builder isHidden(Boolean isHidden) {
            if (isHidden == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionColumnInfo", "isHidden");
            }
            this.isHidden = isHidden;
            return this;
        }
        @CustomType.Setter
        public Builder isVirtual(Boolean isVirtual) {
            if (isVirtual == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionColumnInfo", "isVirtual");
            }
            this.isVirtual = isVirtual;
            return this;
        }
        public GetReportDefinitionColumnInfo build() {
            final var _resultValue = new GetReportDefinitionColumnInfo();
            _resultValue.applicableOperators = applicableOperators;
            _resultValue.dataType = dataType;
            _resultValue.displayName = displayName;
            _resultValue.displayOrder = displayOrder;
            _resultValue.fieldName = fieldName;
            _resultValue.isHidden = isHidden;
            _resultValue.isVirtual = isVirtual;
            return _resultValue;
        }
    }
}
