// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetReportDefinitionColumnFilter;
import com.pulumi.oci.DataSafe.outputs.GetReportDefinitionColumnInfo;
import com.pulumi.oci.DataSafe.outputs.GetReportDefinitionColumnSorting;
import com.pulumi.oci.DataSafe.outputs.GetReportDefinitionSummary;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetReportDefinitionResult {
    /**
     * @return Specifies the name of the category that this report belongs to.
     * 
     */
    private String category;
    /**
     * @return An array of columnFilter objects. A columnFilter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
     * 
     */
    private List<GetReportDefinitionColumnFilter> columnFilters;
    /**
     * @return An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
     * 
     */
    private List<GetReportDefinitionColumnInfo> columnInfos;
    /**
     * @return An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
     * 
     */
    private List<GetReportDefinitionColumnSorting> columnSortings;
    /**
     * @return The OCID of the compartment containing the report definition.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of the data protection regulations/standards used in the report that will help demonstrate compliance.
     * 
     */
    private List<String> complianceStandards;
    /**
     * @return Specifies the name of a resource that provides data for the report. For example alerts, events.
     * 
     */
    private String dataSource;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A description of the report definition.
     * 
     */
    private String description;
    /**
     * @return Name of the report definition.
     * 
     */
    private String displayName;
    /**
     * @return Specifies the order in which the summary must be displayed.
     * 
     */
    private Integer displayOrder;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the report definition.
     * 
     */
    private String id;
    /**
     * @return Signifies whether the definition is seeded or user defined. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    private Boolean isSeeded;
    /**
     * @return Details about the current state of the report definition in Data Safe.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The OCID of the parent report definition. In the case of seeded report definition, this is same as definition OCID.
     * 
     */
    private String parentId;
    /**
     * @return The time span for the records in the report to be scheduled. &lt;period-value&gt;&lt;period&gt; Allowed period strings - &#34;H&#34;,&#34;D&#34;,&#34;M&#34;,&#34;Y&#34; Each of the above fields potentially introduce constraints. A workRequest is created only when period-value satisfies all the constraints. Constraints introduced: 1. period = H (The allowed range for period-value is [1, 23]) 2. period = D (The allowed range for period-value is [1, 30]) 3. period = M (The allowed range for period-value is [1, 11]) 4. period = Y (The minimum period-value is 1)
     * 
     */
    private String recordTimeSpan;
    private String reportDefinitionId;
    /**
     * @return The schedule to generate the report periodically in the specified format: &lt;version-string&gt;;&lt;version-specific-schedule&gt;
     * 
     */
    private String schedule;
    /**
     * @return The OCID of the compartment in which the scheduled resource will be created.
     * 
     */
    private String scheduledReportCompartmentId;
    /**
     * @return Specifies the format of the report ( either .xls or .pdf or .json)
     * 
     */
    private String scheduledReportMimeType;
    /**
     * @return The name of the report to be scheduled.
     * 
     */
    private String scheduledReportName;
    /**
     * @return Specifies the limit on the number of rows in the report.
     * 
     */
    private Integer scheduledReportRowLimit;
    /**
     * @return Additional scim filters used to get the specific summary.
     * 
     */
    private String scimFilter;
    /**
     * @return The current state of the report.
     * 
     */
    private String state;
    /**
     * @return An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
     * 
     */
    private List<GetReportDefinitionSummary> summaries;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return Specifies the date and time the report definition was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the report definition was updated.
     * 
     */
    private String timeUpdated;

    private GetReportDefinitionResult() {}
    /**
     * @return Specifies the name of the category that this report belongs to.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return An array of columnFilter objects. A columnFilter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
     * 
     */
    public List<GetReportDefinitionColumnFilter> columnFilters() {
        return this.columnFilters;
    }
    /**
     * @return An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
     * 
     */
    public List<GetReportDefinitionColumnInfo> columnInfos() {
        return this.columnInfos;
    }
    /**
     * @return An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
     * 
     */
    public List<GetReportDefinitionColumnSorting> columnSortings() {
        return this.columnSortings;
    }
    /**
     * @return The OCID of the compartment containing the report definition.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of the data protection regulations/standards used in the report that will help demonstrate compliance.
     * 
     */
    public List<String> complianceStandards() {
        return this.complianceStandards;
    }
    /**
     * @return Specifies the name of a resource that provides data for the report. For example alerts, events.
     * 
     */
    public String dataSource() {
        return this.dataSource;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A description of the report definition.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Name of the report definition.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Specifies the order in which the summary must be displayed.
     * 
     */
    public Integer displayOrder() {
        return this.displayOrder;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the report definition.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Signifies whether the definition is seeded or user defined. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Boolean isSeeded() {
        return this.isSeeded;
    }
    /**
     * @return Details about the current state of the report definition in Data Safe.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The OCID of the parent report definition. In the case of seeded report definition, this is same as definition OCID.
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return The time span for the records in the report to be scheduled. &lt;period-value&gt;&lt;period&gt; Allowed period strings - &#34;H&#34;,&#34;D&#34;,&#34;M&#34;,&#34;Y&#34; Each of the above fields potentially introduce constraints. A workRequest is created only when period-value satisfies all the constraints. Constraints introduced: 1. period = H (The allowed range for period-value is [1, 23]) 2. period = D (The allowed range for period-value is [1, 30]) 3. period = M (The allowed range for period-value is [1, 11]) 4. period = Y (The minimum period-value is 1)
     * 
     */
    public String recordTimeSpan() {
        return this.recordTimeSpan;
    }
    public String reportDefinitionId() {
        return this.reportDefinitionId;
    }
    /**
     * @return The schedule to generate the report periodically in the specified format: &lt;version-string&gt;;&lt;version-specific-schedule&gt;
     * 
     */
    public String schedule() {
        return this.schedule;
    }
    /**
     * @return The OCID of the compartment in which the scheduled resource will be created.
     * 
     */
    public String scheduledReportCompartmentId() {
        return this.scheduledReportCompartmentId;
    }
    /**
     * @return Specifies the format of the report ( either .xls or .pdf or .json)
     * 
     */
    public String scheduledReportMimeType() {
        return this.scheduledReportMimeType;
    }
    /**
     * @return The name of the report to be scheduled.
     * 
     */
    public String scheduledReportName() {
        return this.scheduledReportName;
    }
    /**
     * @return Specifies the limit on the number of rows in the report.
     * 
     */
    public Integer scheduledReportRowLimit() {
        return this.scheduledReportRowLimit;
    }
    /**
     * @return Additional scim filters used to get the specific summary.
     * 
     */
    public String scimFilter() {
        return this.scimFilter;
    }
    /**
     * @return The current state of the report.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
     * 
     */
    public List<GetReportDefinitionSummary> summaries() {
        return this.summaries;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Specifies the date and time the report definition was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the report definition was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReportDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private List<GetReportDefinitionColumnFilter> columnFilters;
        private List<GetReportDefinitionColumnInfo> columnInfos;
        private List<GetReportDefinitionColumnSorting> columnSortings;
        private String compartmentId;
        private List<String> complianceStandards;
        private String dataSource;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Integer displayOrder;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isSeeded;
        private String lifecycleDetails;
        private String parentId;
        private String recordTimeSpan;
        private String reportDefinitionId;
        private String schedule;
        private String scheduledReportCompartmentId;
        private String scheduledReportMimeType;
        private String scheduledReportName;
        private Integer scheduledReportRowLimit;
        private String scimFilter;
        private String state;
        private List<GetReportDefinitionSummary> summaries;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetReportDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.columnFilters = defaults.columnFilters;
    	      this.columnInfos = defaults.columnInfos;
    	      this.columnSortings = defaults.columnSortings;
    	      this.compartmentId = defaults.compartmentId;
    	      this.complianceStandards = defaults.complianceStandards;
    	      this.dataSource = defaults.dataSource;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.displayOrder = defaults.displayOrder;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isSeeded = defaults.isSeeded;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.parentId = defaults.parentId;
    	      this.recordTimeSpan = defaults.recordTimeSpan;
    	      this.reportDefinitionId = defaults.reportDefinitionId;
    	      this.schedule = defaults.schedule;
    	      this.scheduledReportCompartmentId = defaults.scheduledReportCompartmentId;
    	      this.scheduledReportMimeType = defaults.scheduledReportMimeType;
    	      this.scheduledReportName = defaults.scheduledReportName;
    	      this.scheduledReportRowLimit = defaults.scheduledReportRowLimit;
    	      this.scimFilter = defaults.scimFilter;
    	      this.state = defaults.state;
    	      this.summaries = defaults.summaries;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder columnFilters(List<GetReportDefinitionColumnFilter> columnFilters) {
            if (columnFilters == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "columnFilters");
            }
            this.columnFilters = columnFilters;
            return this;
        }
        public Builder columnFilters(GetReportDefinitionColumnFilter... columnFilters) {
            return columnFilters(List.of(columnFilters));
        }
        @CustomType.Setter
        public Builder columnInfos(List<GetReportDefinitionColumnInfo> columnInfos) {
            if (columnInfos == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "columnInfos");
            }
            this.columnInfos = columnInfos;
            return this;
        }
        public Builder columnInfos(GetReportDefinitionColumnInfo... columnInfos) {
            return columnInfos(List.of(columnInfos));
        }
        @CustomType.Setter
        public Builder columnSortings(List<GetReportDefinitionColumnSorting> columnSortings) {
            if (columnSortings == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "columnSortings");
            }
            this.columnSortings = columnSortings;
            return this;
        }
        public Builder columnSortings(GetReportDefinitionColumnSorting... columnSortings) {
            return columnSortings(List.of(columnSortings));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder complianceStandards(List<String> complianceStandards) {
            if (complianceStandards == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "complianceStandards");
            }
            this.complianceStandards = complianceStandards;
            return this;
        }
        public Builder complianceStandards(String... complianceStandards) {
            return complianceStandards(List.of(complianceStandards));
        }
        @CustomType.Setter
        public Builder dataSource(String dataSource) {
            if (dataSource == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "dataSource");
            }
            this.dataSource = dataSource;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayOrder(Integer displayOrder) {
            if (displayOrder == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "displayOrder");
            }
            this.displayOrder = displayOrder;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSeeded(Boolean isSeeded) {
            if (isSeeded == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "isSeeded");
            }
            this.isSeeded = isSeeded;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            if (parentId == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "parentId");
            }
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder recordTimeSpan(String recordTimeSpan) {
            if (recordTimeSpan == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "recordTimeSpan");
            }
            this.recordTimeSpan = recordTimeSpan;
            return this;
        }
        @CustomType.Setter
        public Builder reportDefinitionId(String reportDefinitionId) {
            if (reportDefinitionId == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "reportDefinitionId");
            }
            this.reportDefinitionId = reportDefinitionId;
            return this;
        }
        @CustomType.Setter
        public Builder schedule(String schedule) {
            if (schedule == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "schedule");
            }
            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledReportCompartmentId(String scheduledReportCompartmentId) {
            if (scheduledReportCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "scheduledReportCompartmentId");
            }
            this.scheduledReportCompartmentId = scheduledReportCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledReportMimeType(String scheduledReportMimeType) {
            if (scheduledReportMimeType == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "scheduledReportMimeType");
            }
            this.scheduledReportMimeType = scheduledReportMimeType;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledReportName(String scheduledReportName) {
            if (scheduledReportName == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "scheduledReportName");
            }
            this.scheduledReportName = scheduledReportName;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledReportRowLimit(Integer scheduledReportRowLimit) {
            if (scheduledReportRowLimit == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "scheduledReportRowLimit");
            }
            this.scheduledReportRowLimit = scheduledReportRowLimit;
            return this;
        }
        @CustomType.Setter
        public Builder scimFilter(String scimFilter) {
            if (scimFilter == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "scimFilter");
            }
            this.scimFilter = scimFilter;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder summaries(List<GetReportDefinitionSummary> summaries) {
            if (summaries == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "summaries");
            }
            this.summaries = summaries;
            return this;
        }
        public Builder summaries(GetReportDefinitionSummary... summaries) {
            return summaries(List.of(summaries));
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetReportDefinitionResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetReportDefinitionResult build() {
            final var _resultValue = new GetReportDefinitionResult();
            _resultValue.category = category;
            _resultValue.columnFilters = columnFilters;
            _resultValue.columnInfos = columnInfos;
            _resultValue.columnSortings = columnSortings;
            _resultValue.compartmentId = compartmentId;
            _resultValue.complianceStandards = complianceStandards;
            _resultValue.dataSource = dataSource;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.displayOrder = displayOrder;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isSeeded = isSeeded;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.parentId = parentId;
            _resultValue.recordTimeSpan = recordTimeSpan;
            _resultValue.reportDefinitionId = reportDefinitionId;
            _resultValue.schedule = schedule;
            _resultValue.scheduledReportCompartmentId = scheduledReportCompartmentId;
            _resultValue.scheduledReportMimeType = scheduledReportMimeType;
            _resultValue.scheduledReportName = scheduledReportName;
            _resultValue.scheduledReportRowLimit = scheduledReportRowLimit;
            _resultValue.scimFilter = scimFilter;
            _resultValue.state = state;
            _resultValue.summaries = summaries;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
