// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetReportsFilter;
import com.pulumi.oci.DataSafe.outputs.GetReportsReportCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReportsResult {
    private @Nullable String accessLevel;
    /**
     * @return The OCID of the compartment containing the report.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return Name of the report.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetReportsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Specifies the format of report to be .xls or .pdf or .json
     * 
     */
    private @Nullable String mimeType;
    /**
     * @return The list of report_collection.
     * 
     */
    private List<GetReportsReportCollection> reportCollections;
    /**
     * @return The OCID of the report definition.
     * 
     */
    private @Nullable String reportDefinitionId;
    /**
     * @return The current state of the audit report.
     * 
     */
    private @Nullable String state;
    private @Nullable String timeGeneratedGreaterThanOrEqualTo;
    private @Nullable String timeGeneratedLessThan;
    /**
     * @return The type of the audit report.
     * 
     */
    private @Nullable String type;

    private GetReportsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The OCID of the compartment containing the report.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return Name of the report.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetReportsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies the format of report to be .xls or .pdf or .json
     * 
     */
    public Optional<String> mimeType() {
        return Optional.ofNullable(this.mimeType);
    }
    /**
     * @return The list of report_collection.
     * 
     */
    public List<GetReportsReportCollection> reportCollections() {
        return this.reportCollections;
    }
    /**
     * @return The OCID of the report definition.
     * 
     */
    public Optional<String> reportDefinitionId() {
        return Optional.ofNullable(this.reportDefinitionId);
    }
    /**
     * @return The current state of the audit report.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> timeGeneratedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeGeneratedGreaterThanOrEqualTo);
    }
    public Optional<String> timeGeneratedLessThan() {
        return Optional.ofNullable(this.timeGeneratedLessThan);
    }
    /**
     * @return The type of the audit report.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReportsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String displayName;
        private @Nullable List<GetReportsFilter> filters;
        private String id;
        private @Nullable String mimeType;
        private List<GetReportsReportCollection> reportCollections;
        private @Nullable String reportDefinitionId;
        private @Nullable String state;
        private @Nullable String timeGeneratedGreaterThanOrEqualTo;
        private @Nullable String timeGeneratedLessThan;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetReportsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.mimeType = defaults.mimeType;
    	      this.reportCollections = defaults.reportCollections;
    	      this.reportDefinitionId = defaults.reportDefinitionId;
    	      this.state = defaults.state;
    	      this.timeGeneratedGreaterThanOrEqualTo = defaults.timeGeneratedGreaterThanOrEqualTo;
    	      this.timeGeneratedLessThan = defaults.timeGeneratedLessThan;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetReportsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetReportsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetReportsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetReportsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mimeType(@Nullable String mimeType) {

            this.mimeType = mimeType;
            return this;
        }
        @CustomType.Setter
        public Builder reportCollections(List<GetReportsReportCollection> reportCollections) {
            if (reportCollections == null) {
              throw new MissingRequiredPropertyException("GetReportsResult", "reportCollections");
            }
            this.reportCollections = reportCollections;
            return this;
        }
        public Builder reportCollections(GetReportsReportCollection... reportCollections) {
            return reportCollections(List.of(reportCollections));
        }
        @CustomType.Setter
        public Builder reportDefinitionId(@Nullable String reportDefinitionId) {

            this.reportDefinitionId = reportDefinitionId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeGeneratedGreaterThanOrEqualTo(@Nullable String timeGeneratedGreaterThanOrEqualTo) {

            this.timeGeneratedGreaterThanOrEqualTo = timeGeneratedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeGeneratedLessThan(@Nullable String timeGeneratedLessThan) {

            this.timeGeneratedLessThan = timeGeneratedLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public GetReportsResult build() {
            final var _resultValue = new GetReportsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.mimeType = mimeType;
            _resultValue.reportCollections = reportCollections;
            _resultValue.reportDefinitionId = reportDefinitionId;
            _resultValue.state = state;
            _resultValue.timeGeneratedGreaterThanOrEqualTo = timeGeneratedGreaterThanOrEqualTo;
            _resultValue.timeGeneratedLessThan = timeGeneratedLessThan;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
