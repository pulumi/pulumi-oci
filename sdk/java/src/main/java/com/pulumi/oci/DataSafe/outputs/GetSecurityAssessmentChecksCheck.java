// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentChecksCheckPatchOperation;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentChecksCheckReference;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentChecksCheck {
    /**
     * @return The category to which the check belongs to.
     * 
     */
    private String category;
    /**
     * @return Each check in security assessment has an associated key (think of key as a check&#39;s name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
     * 
     */
    private String key;
    /**
     * @return Provides a recommended approach to take to remediate the check reported.
     * 
     */
    private String oneline;
    private @Nullable List<GetSecurityAssessmentChecksCheckPatchOperation> patchOperations;
    /**
     * @return Provides information on whether the check is related to a CIS Oracle Database Benchmark recommendation, STIG rule, GDPR Article/Recital or related to the Oracle Best Practice.
     * 
     */
    private List<GetSecurityAssessmentChecksCheckReference> references;
    /**
     * @return The explanation of the issue in this check. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    private String remarks;
    /**
     * @return The OCID of the security assessment.
     * 
     */
    private String securityAssessmentId;
    /**
     * @return A filter to return only checks of a particular risk level.
     * 
     */
    private String suggestedSeverity;
    /**
     * @return The short title for the check.
     * 
     */
    private String title;

    private GetSecurityAssessmentChecksCheck() {}
    /**
     * @return The category to which the check belongs to.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Each check in security assessment has an associated key (think of key as a check&#39;s name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Provides a recommended approach to take to remediate the check reported.
     * 
     */
    public String oneline() {
        return this.oneline;
    }
    public List<GetSecurityAssessmentChecksCheckPatchOperation> patchOperations() {
        return this.patchOperations == null ? List.of() : this.patchOperations;
    }
    /**
     * @return Provides information on whether the check is related to a CIS Oracle Database Benchmark recommendation, STIG rule, GDPR Article/Recital or related to the Oracle Best Practice.
     * 
     */
    public List<GetSecurityAssessmentChecksCheckReference> references() {
        return this.references;
    }
    /**
     * @return The explanation of the issue in this check. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    public String remarks() {
        return this.remarks;
    }
    /**
     * @return The OCID of the security assessment.
     * 
     */
    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }
    /**
     * @return A filter to return only checks of a particular risk level.
     * 
     */
    public String suggestedSeverity() {
        return this.suggestedSeverity;
    }
    /**
     * @return The short title for the check.
     * 
     */
    public String title() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentChecksCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String key;
        private String oneline;
        private @Nullable List<GetSecurityAssessmentChecksCheckPatchOperation> patchOperations;
        private List<GetSecurityAssessmentChecksCheckReference> references;
        private String remarks;
        private String securityAssessmentId;
        private String suggestedSeverity;
        private String title;
        public Builder() {}
        public Builder(GetSecurityAssessmentChecksCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.key = defaults.key;
    	      this.oneline = defaults.oneline;
    	      this.patchOperations = defaults.patchOperations;
    	      this.references = defaults.references;
    	      this.remarks = defaults.remarks;
    	      this.securityAssessmentId = defaults.securityAssessmentId;
    	      this.suggestedSeverity = defaults.suggestedSeverity;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder oneline(String oneline) {
            if (oneline == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "oneline");
            }
            this.oneline = oneline;
            return this;
        }
        @CustomType.Setter
        public Builder patchOperations(@Nullable List<GetSecurityAssessmentChecksCheckPatchOperation> patchOperations) {

            this.patchOperations = patchOperations;
            return this;
        }
        public Builder patchOperations(GetSecurityAssessmentChecksCheckPatchOperation... patchOperations) {
            return patchOperations(List.of(patchOperations));
        }
        @CustomType.Setter
        public Builder references(List<GetSecurityAssessmentChecksCheckReference> references) {
            if (references == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "references");
            }
            this.references = references;
            return this;
        }
        public Builder references(GetSecurityAssessmentChecksCheckReference... references) {
            return references(List.of(references));
        }
        @CustomType.Setter
        public Builder remarks(String remarks) {
            if (remarks == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "remarks");
            }
            this.remarks = remarks;
            return this;
        }
        @CustomType.Setter
        public Builder securityAssessmentId(String securityAssessmentId) {
            if (securityAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "securityAssessmentId");
            }
            this.securityAssessmentId = securityAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder suggestedSeverity(String suggestedSeverity) {
            if (suggestedSeverity == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "suggestedSeverity");
            }
            this.suggestedSeverity = suggestedSeverity;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksCheck", "title");
            }
            this.title = title;
            return this;
        }
        public GetSecurityAssessmentChecksCheck build() {
            final var _resultValue = new GetSecurityAssessmentChecksCheck();
            _resultValue.category = category;
            _resultValue.key = key;
            _resultValue.oneline = oneline;
            _resultValue.patchOperations = patchOperations;
            _resultValue.references = references;
            _resultValue.remarks = remarks;
            _resultValue.securityAssessmentId = securityAssessmentId;
            _resultValue.suggestedSeverity = suggestedSeverity;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
