// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentChecksCheck;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentChecksFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentChecksResult {
    private @Nullable String accessLevel;
    /**
     * @return The list of checks.
     * 
     */
    private List<GetSecurityAssessmentChecksCheck> checks;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<String> containsReferences;
    private @Nullable List<String> containsSeverities;
    private @Nullable List<GetSecurityAssessmentChecksFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A unique identifier for the check.
     * 
     */
    private @Nullable String key;
    private String securityAssessmentId;
    /**
     * @return The severity of the check as suggested by Data Safe security assessment. This will be the default severity in the template baseline security assessment.
     * 
     */
    private @Nullable String suggestedSeverity;

    private GetSecurityAssessmentChecksResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The list of checks.
     * 
     */
    public List<GetSecurityAssessmentChecksCheck> checks() {
        return this.checks;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<String> containsReferences() {
        return this.containsReferences == null ? List.of() : this.containsReferences;
    }
    public List<String> containsSeverities() {
        return this.containsSeverities == null ? List.of() : this.containsSeverities;
    }
    public List<GetSecurityAssessmentChecksFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A unique identifier for the check.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }
    /**
     * @return The severity of the check as suggested by Data Safe security assessment. This will be the default severity in the template baseline security assessment.
     * 
     */
    public Optional<String> suggestedSeverity() {
        return Optional.ofNullable(this.suggestedSeverity);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentChecksResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private List<GetSecurityAssessmentChecksCheck> checks;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<String> containsReferences;
        private @Nullable List<String> containsSeverities;
        private @Nullable List<GetSecurityAssessmentChecksFilter> filters;
        private String id;
        private @Nullable String key;
        private String securityAssessmentId;
        private @Nullable String suggestedSeverity;
        public Builder() {}
        public Builder(GetSecurityAssessmentChecksResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.checks = defaults.checks;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.containsReferences = defaults.containsReferences;
    	      this.containsSeverities = defaults.containsSeverities;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.securityAssessmentId = defaults.securityAssessmentId;
    	      this.suggestedSeverity = defaults.suggestedSeverity;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder checks(List<GetSecurityAssessmentChecksCheck> checks) {
            if (checks == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksResult", "checks");
            }
            this.checks = checks;
            return this;
        }
        public Builder checks(GetSecurityAssessmentChecksCheck... checks) {
            return checks(List.of(checks));
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder containsReferences(@Nullable List<String> containsReferences) {

            this.containsReferences = containsReferences;
            return this;
        }
        public Builder containsReferences(String... containsReferences) {
            return containsReferences(List.of(containsReferences));
        }
        @CustomType.Setter
        public Builder containsSeverities(@Nullable List<String> containsSeverities) {

            this.containsSeverities = containsSeverities;
            return this;
        }
        public Builder containsSeverities(String... containsSeverities) {
            return containsSeverities(List.of(containsSeverities));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSecurityAssessmentChecksFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSecurityAssessmentChecksFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder securityAssessmentId(String securityAssessmentId) {
            if (securityAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentChecksResult", "securityAssessmentId");
            }
            this.securityAssessmentId = securityAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder suggestedSeverity(@Nullable String suggestedSeverity) {

            this.suggestedSeverity = suggestedSeverity;
            return this;
        }
        public GetSecurityAssessmentChecksResult build() {
            final var _resultValue = new GetSecurityAssessmentChecksResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.checks = checks;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.containsReferences = containsReferences;
            _resultValue.containsSeverities = containsSeverities;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.key = key;
            _resultValue.securityAssessmentId = securityAssessmentId;
            _resultValue.suggestedSeverity = suggestedSeverity;
            return _resultValue;
        }
    }
}
