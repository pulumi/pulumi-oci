// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentReference;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityAssessmentComparisonTargetUserAccountCurrent {
    /**
     * @return The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     * 
     */
    private List<String> details;
    /**
     * @return A unique identifier for the finding. This is common for the finding across targets.
     * 
     */
    private String key;
    /**
     * @return Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
     * 
     */
    private List<GetSecurityAssessmentComparisonTargetUserAccountCurrentReference> references;
    /**
     * @return The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    private String remarks;
    /**
     * @return The severity of this diff.
     * 
     */
    private String severity;
    /**
     * @return The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     * 
     */
    private String summary;
    /**
     * @return The short title for the finding.
     * 
     */
    private String title;

    private GetSecurityAssessmentComparisonTargetUserAccountCurrent() {}
    /**
     * @return The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     * 
     */
    public List<String> details() {
        return this.details;
    }
    /**
     * @return A unique identifier for the finding. This is common for the finding across targets.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
     * 
     */
    public List<GetSecurityAssessmentComparisonTargetUserAccountCurrentReference> references() {
        return this.references;
    }
    /**
     * @return The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    public String remarks() {
        return this.remarks;
    }
    /**
     * @return The severity of this diff.
     * 
     */
    public String severity() {
        return this.severity;
    }
    /**
     * @return The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     * 
     */
    public String summary() {
        return this.summary;
    }
    /**
     * @return The short title for the finding.
     * 
     */
    public String title() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentComparisonTargetUserAccountCurrent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> details;
        private String key;
        private List<GetSecurityAssessmentComparisonTargetUserAccountCurrentReference> references;
        private String remarks;
        private String severity;
        private String summary;
        private String title;
        public Builder() {}
        public Builder(GetSecurityAssessmentComparisonTargetUserAccountCurrent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.details = defaults.details;
    	      this.key = defaults.key;
    	      this.references = defaults.references;
    	      this.remarks = defaults.remarks;
    	      this.severity = defaults.severity;
    	      this.summary = defaults.summary;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder details(List<String> details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentComparisonTargetUserAccountCurrent", "details");
            }
            this.details = details;
            return this;
        }
        public Builder details(String... details) {
            return details(List.of(details));
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentComparisonTargetUserAccountCurrent", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder references(List<GetSecurityAssessmentComparisonTargetUserAccountCurrentReference> references) {
            if (references == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentComparisonTargetUserAccountCurrent", "references");
            }
            this.references = references;
            return this;
        }
        public Builder references(GetSecurityAssessmentComparisonTargetUserAccountCurrentReference... references) {
            return references(List.of(references));
        }
        @CustomType.Setter
        public Builder remarks(String remarks) {
            if (remarks == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentComparisonTargetUserAccountCurrent", "remarks");
            }
            this.remarks = remarks;
            return this;
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            if (severity == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentComparisonTargetUserAccountCurrent", "severity");
            }
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder summary(String summary) {
            if (summary == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentComparisonTargetUserAccountCurrent", "summary");
            }
            this.summary = summary;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentComparisonTargetUserAccountCurrent", "title");
            }
            this.title = title;
            return this;
        }
        public GetSecurityAssessmentComparisonTargetUserAccountCurrent build() {
            final var _resultValue = new GetSecurityAssessmentComparisonTargetUserAccountCurrent();
            _resultValue.details = details;
            _resultValue.key = key;
            _resultValue.references = references;
            _resultValue.remarks = remarks;
            _resultValue.severity = severity;
            _resultValue.summary = summary;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
