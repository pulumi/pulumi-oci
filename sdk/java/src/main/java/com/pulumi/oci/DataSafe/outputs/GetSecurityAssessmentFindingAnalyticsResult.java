// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentFindingAnalyticsFilter;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentFindingAnalyticsResult {
    private @Nullable String accessLevel;
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<GetSecurityAssessmentFindingAnalyticsFilter> filters;
    /**
     * @return The list of finding_analytics_collection.
     * 
     */
    private List<GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollection> findingAnalyticsCollections;
    private @Nullable String findingKey;
    private @Nullable String groupBy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isTopFinding;
    /**
     * @return The severity (risk level) of the finding.
     * 
     */
    private @Nullable String severity;
    /**
     * @return The status of the top finding.  All findings will have &#34;severity&#34; to indicate the risk level, but only top findings will have &#34;status&#34;.  Possible status: Pass / Risk (Low, Medium, High)/ Evaluate / Advisory / Deferred Instead of having &#34;Low, Medium, High&#34; in severity, &#34;Risk&#34; will include these three situations in status.
     * 
     */
    private @Nullable String topFindingStatus;

    private GetSecurityAssessmentFindingAnalyticsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<GetSecurityAssessmentFindingAnalyticsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The list of finding_analytics_collection.
     * 
     */
    public List<GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollection> findingAnalyticsCollections() {
        return this.findingAnalyticsCollections;
    }
    public Optional<String> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }
    public Optional<String> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isTopFinding() {
        return Optional.ofNullable(this.isTopFinding);
    }
    /**
     * @return The severity (risk level) of the finding.
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    /**
     * @return The status of the top finding.  All findings will have &#34;severity&#34; to indicate the risk level, but only top findings will have &#34;status&#34;.  Possible status: Pass / Risk (Low, Medium, High)/ Evaluate / Advisory / Deferred Instead of having &#34;Low, Medium, High&#34; in severity, &#34;Risk&#34; will include these three situations in status.
     * 
     */
    public Optional<String> topFindingStatus() {
        return Optional.ofNullable(this.topFindingStatus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentFindingAnalyticsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<GetSecurityAssessmentFindingAnalyticsFilter> filters;
        private List<GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollection> findingAnalyticsCollections;
        private @Nullable String findingKey;
        private @Nullable String groupBy;
        private String id;
        private @Nullable Boolean isTopFinding;
        private @Nullable String severity;
        private @Nullable String topFindingStatus;
        public Builder() {}
        public Builder(GetSecurityAssessmentFindingAnalyticsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.findingAnalyticsCollections = defaults.findingAnalyticsCollections;
    	      this.findingKey = defaults.findingKey;
    	      this.groupBy = defaults.groupBy;
    	      this.id = defaults.id;
    	      this.isTopFinding = defaults.isTopFinding;
    	      this.severity = defaults.severity;
    	      this.topFindingStatus = defaults.topFindingStatus;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingAnalyticsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSecurityAssessmentFindingAnalyticsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSecurityAssessmentFindingAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder findingAnalyticsCollections(List<GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollection> findingAnalyticsCollections) {
            if (findingAnalyticsCollections == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingAnalyticsResult", "findingAnalyticsCollections");
            }
            this.findingAnalyticsCollections = findingAnalyticsCollections;
            return this;
        }
        public Builder findingAnalyticsCollections(GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollection... findingAnalyticsCollections) {
            return findingAnalyticsCollections(List.of(findingAnalyticsCollections));
        }
        @CustomType.Setter
        public Builder findingKey(@Nullable String findingKey) {

            this.findingKey = findingKey;
            return this;
        }
        @CustomType.Setter
        public Builder groupBy(@Nullable String groupBy) {

            this.groupBy = groupBy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingAnalyticsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isTopFinding(@Nullable Boolean isTopFinding) {

            this.isTopFinding = isTopFinding;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {

            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder topFindingStatus(@Nullable String topFindingStatus) {

            this.topFindingStatus = topFindingStatus;
            return this;
        }
        public GetSecurityAssessmentFindingAnalyticsResult build() {
            final var _resultValue = new GetSecurityAssessmentFindingAnalyticsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.findingAnalyticsCollections = findingAnalyticsCollections;
            _resultValue.findingKey = findingKey;
            _resultValue.groupBy = groupBy;
            _resultValue.id = id;
            _resultValue.isTopFinding = isTopFinding;
            _resultValue.severity = severity;
            _resultValue.topFindingStatus = topFindingStatus;
            return _resultValue;
        }
    }
}
