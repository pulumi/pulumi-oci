// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentFindingFilter;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentFindingFinding;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentFindingResult {
    private @Nullable String accessLevel;
    private @Nullable String category;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<String> containsReferences;
    private @Nullable List<String> containsSeverities;
    private @Nullable List<String> fields;
    private @Nullable List<GetSecurityAssessmentFindingFilter> filters;
    private @Nullable String findingKey;
    private List<GetSecurityAssessmentFindingFinding> findings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isTopFinding;
    private @Nullable String references;
    private @Nullable String scimQuery;
    private String securityAssessmentId;
    private @Nullable String severity;
    private @Nullable String state;
    private @Nullable String targetId;
    private @Nullable List<String> targetIds;

    private GetSecurityAssessmentFindingResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<String> containsReferences() {
        return this.containsReferences == null ? List.of() : this.containsReferences;
    }
    public List<String> containsSeverities() {
        return this.containsSeverities == null ? List.of() : this.containsSeverities;
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public List<GetSecurityAssessmentFindingFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public Optional<String> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }
    public List<GetSecurityAssessmentFindingFinding> findings() {
        return this.findings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isTopFinding() {
        return Optional.ofNullable(this.isTopFinding);
    }
    public Optional<String> references() {
        return Optional.ofNullable(this.references);
    }
    public Optional<String> scimQuery() {
        return Optional.ofNullable(this.scimQuery);
    }
    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    public List<String> targetIds() {
        return this.targetIds == null ? List.of() : this.targetIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentFindingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable String category;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<String> containsReferences;
        private @Nullable List<String> containsSeverities;
        private @Nullable List<String> fields;
        private @Nullable List<GetSecurityAssessmentFindingFilter> filters;
        private @Nullable String findingKey;
        private List<GetSecurityAssessmentFindingFinding> findings;
        private String id;
        private @Nullable Boolean isTopFinding;
        private @Nullable String references;
        private @Nullable String scimQuery;
        private String securityAssessmentId;
        private @Nullable String severity;
        private @Nullable String state;
        private @Nullable String targetId;
        private @Nullable List<String> targetIds;
        public Builder() {}
        public Builder(GetSecurityAssessmentFindingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.category = defaults.category;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.containsReferences = defaults.containsReferences;
    	      this.containsSeverities = defaults.containsSeverities;
    	      this.fields = defaults.fields;
    	      this.filters = defaults.filters;
    	      this.findingKey = defaults.findingKey;
    	      this.findings = defaults.findings;
    	      this.id = defaults.id;
    	      this.isTopFinding = defaults.isTopFinding;
    	      this.references = defaults.references;
    	      this.scimQuery = defaults.scimQuery;
    	      this.securityAssessmentId = defaults.securityAssessmentId;
    	      this.severity = defaults.severity;
    	      this.state = defaults.state;
    	      this.targetId = defaults.targetId;
    	      this.targetIds = defaults.targetIds;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder category(@Nullable String category) {

            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder containsReferences(@Nullable List<String> containsReferences) {

            this.containsReferences = containsReferences;
            return this;
        }
        public Builder containsReferences(String... containsReferences) {
            return containsReferences(List.of(containsReferences));
        }
        @CustomType.Setter
        public Builder containsSeverities(@Nullable List<String> containsSeverities) {

            this.containsSeverities = containsSeverities;
            return this;
        }
        public Builder containsSeverities(String... containsSeverities) {
            return containsSeverities(List.of(containsSeverities));
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {

            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSecurityAssessmentFindingFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSecurityAssessmentFindingFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder findingKey(@Nullable String findingKey) {

            this.findingKey = findingKey;
            return this;
        }
        @CustomType.Setter
        public Builder findings(List<GetSecurityAssessmentFindingFinding> findings) {
            if (findings == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingResult", "findings");
            }
            this.findings = findings;
            return this;
        }
        public Builder findings(GetSecurityAssessmentFindingFinding... findings) {
            return findings(List.of(findings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isTopFinding(@Nullable Boolean isTopFinding) {

            this.isTopFinding = isTopFinding;
            return this;
        }
        @CustomType.Setter
        public Builder references(@Nullable String references) {

            this.references = references;
            return this;
        }
        @CustomType.Setter
        public Builder scimQuery(@Nullable String scimQuery) {

            this.scimQuery = scimQuery;
            return this;
        }
        @CustomType.Setter
        public Builder securityAssessmentId(String securityAssessmentId) {
            if (securityAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingResult", "securityAssessmentId");
            }
            this.securityAssessmentId = securityAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {

            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetIds(@Nullable List<String> targetIds) {

            this.targetIds = targetIds;
            return this;
        }
        public Builder targetIds(String... targetIds) {
            return targetIds(List.of(targetIds));
        }
        public GetSecurityAssessmentFindingResult build() {
            final var _resultValue = new GetSecurityAssessmentFindingResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.category = category;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.containsReferences = containsReferences;
            _resultValue.containsSeverities = containsSeverities;
            _resultValue.fields = fields;
            _resultValue.filters = filters;
            _resultValue.findingKey = findingKey;
            _resultValue.findings = findings;
            _resultValue.id = id;
            _resultValue.isTopFinding = isTopFinding;
            _resultValue.references = references;
            _resultValue.scimQuery = scimQuery;
            _resultValue.securityAssessmentId = securityAssessmentId;
            _resultValue.severity = severity;
            _resultValue.state = state;
            _resultValue.targetId = targetId;
            _resultValue.targetIds = targetIds;
            return _resultValue;
        }
    }
}
