// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem {
    /**
     * @return The OCID of the latest security assessment.
     * 
     */
    private String assessmentId;
    /**
     * @return The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    private String findingKey;
    /**
     * @return The unique title that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    private String findingTitle;
    /**
     * @return A filter to check findings whose risks were deferred by the user.
     * 
     */
    private Boolean isRiskDeferred;
    /**
     * @return The justification given by the user for accepting or modifying the risk level.
     * 
     */
    private String justification;
    /**
     * @return The unique key that identifies the finding risk change.
     * 
     */
    private String key;
    /**
     * @return A filter to check which user modified the risk level of the finding.
     * 
     */
    private String modifiedBy;
    /**
     * @return The severity of the finding as determined by security assessment by Oracle.
     * 
     */
    private String oracleDefinedSeverity;
    /**
     * @return If the risk level is changed more than once, the previous modified value.
     * 
     */
    private String previousSeverity;
    /**
     * @return A filter to return only findings of a particular risk level.
     * 
     */
    private String severity;
    /**
     * @return The OCID of the target database.
     * 
     */
    private String targetId;
    /**
     * @return The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeUpdated;
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the risk level change as updated by user is valid until. After this date passes, the risk level will be that of what is determined by the latest security assessment.
     * 
     */
    private String timeValidUntil;

    private GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem() {}
    /**
     * @return The OCID of the latest security assessment.
     * 
     */
    public String assessmentId() {
        return this.assessmentId;
    }
    /**
     * @return The unique key that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    public String findingKey() {
        return this.findingKey;
    }
    /**
     * @return The unique title that identifies the finding. It is a string and unique within a security assessment.
     * 
     */
    public String findingTitle() {
        return this.findingTitle;
    }
    /**
     * @return A filter to check findings whose risks were deferred by the user.
     * 
     */
    public Boolean isRiskDeferred() {
        return this.isRiskDeferred;
    }
    /**
     * @return The justification given by the user for accepting or modifying the risk level.
     * 
     */
    public String justification() {
        return this.justification;
    }
    /**
     * @return The unique key that identifies the finding risk change.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return A filter to check which user modified the risk level of the finding.
     * 
     */
    public String modifiedBy() {
        return this.modifiedBy;
    }
    /**
     * @return The severity of the finding as determined by security assessment by Oracle.
     * 
     */
    public String oracleDefinedSeverity() {
        return this.oracleDefinedSeverity;
    }
    /**
     * @return If the risk level is changed more than once, the previous modified value.
     * 
     */
    public String previousSeverity() {
        return this.previousSeverity;
    }
    /**
     * @return A filter to return only findings of a particular risk level.
     * 
     */
    public String severity() {
        return this.severity;
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the risk level change as updated by user is valid until. After this date passes, the risk level will be that of what is determined by the latest security assessment.
     * 
     */
    public String timeValidUntil() {
        return this.timeValidUntil;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assessmentId;
        private String findingKey;
        private String findingTitle;
        private Boolean isRiskDeferred;
        private String justification;
        private String key;
        private String modifiedBy;
        private String oracleDefinedSeverity;
        private String previousSeverity;
        private String severity;
        private String targetId;
        private String timeUpdated;
        private String timeValidUntil;
        public Builder() {}
        public Builder(GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assessmentId = defaults.assessmentId;
    	      this.findingKey = defaults.findingKey;
    	      this.findingTitle = defaults.findingTitle;
    	      this.isRiskDeferred = defaults.isRiskDeferred;
    	      this.justification = defaults.justification;
    	      this.key = defaults.key;
    	      this.modifiedBy = defaults.modifiedBy;
    	      this.oracleDefinedSeverity = defaults.oracleDefinedSeverity;
    	      this.previousSeverity = defaults.previousSeverity;
    	      this.severity = defaults.severity;
    	      this.targetId = defaults.targetId;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.timeValidUntil = defaults.timeValidUntil;
        }

        @CustomType.Setter
        public Builder assessmentId(String assessmentId) {
            if (assessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "assessmentId");
            }
            this.assessmentId = assessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder findingKey(String findingKey) {
            if (findingKey == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "findingKey");
            }
            this.findingKey = findingKey;
            return this;
        }
        @CustomType.Setter
        public Builder findingTitle(String findingTitle) {
            if (findingTitle == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "findingTitle");
            }
            this.findingTitle = findingTitle;
            return this;
        }
        @CustomType.Setter
        public Builder isRiskDeferred(Boolean isRiskDeferred) {
            if (isRiskDeferred == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "isRiskDeferred");
            }
            this.isRiskDeferred = isRiskDeferred;
            return this;
        }
        @CustomType.Setter
        public Builder justification(String justification) {
            if (justification == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "justification");
            }
            this.justification = justification;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedBy(String modifiedBy) {
            if (modifiedBy == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "modifiedBy");
            }
            this.modifiedBy = modifiedBy;
            return this;
        }
        @CustomType.Setter
        public Builder oracleDefinedSeverity(String oracleDefinedSeverity) {
            if (oracleDefinedSeverity == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "oracleDefinedSeverity");
            }
            this.oracleDefinedSeverity = oracleDefinedSeverity;
            return this;
        }
        @CustomType.Setter
        public Builder previousSeverity(String previousSeverity) {
            if (previousSeverity == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "previousSeverity");
            }
            this.previousSeverity = previousSeverity;
            return this;
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            if (severity == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "severity");
            }
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeValidUntil(String timeValidUntil) {
            if (timeValidUntil == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem", "timeValidUntil");
            }
            this.timeValidUntil = timeValidUntil;
            return this;
        }
        public GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem build() {
            final var _resultValue = new GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem();
            _resultValue.assessmentId = assessmentId;
            _resultValue.findingKey = findingKey;
            _resultValue.findingTitle = findingTitle;
            _resultValue.isRiskDeferred = isRiskDeferred;
            _resultValue.justification = justification;
            _resultValue.key = key;
            _resultValue.modifiedBy = modifiedBy;
            _resultValue.oracleDefinedSeverity = oracleDefinedSeverity;
            _resultValue.previousSeverity = previousSeverity;
            _resultValue.severity = severity;
            _resultValue.targetId = targetId;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.timeValidUntil = timeValidUntil;
            return _resultValue;
        }
    }
}
