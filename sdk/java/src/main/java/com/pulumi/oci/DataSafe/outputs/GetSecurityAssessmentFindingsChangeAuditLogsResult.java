// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentFindingsChangeAuditLogsFilter;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentFindingsChangeAuditLogsResult {
    private @Nullable List<GetSecurityAssessmentFindingsChangeAuditLogsFilter> filters;
    /**
     * @return The unique key that identifies the finding.
     * 
     */
    private @Nullable String findingKey;
    /**
     * @return The short title for the finding whose risk is being modified.
     * 
     */
    private @Nullable String findingTitle;
    /**
     * @return The list of findings_change_audit_log_collection.
     * 
     */
    private List<GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollection> findingsChangeAuditLogCollections;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Determines if the user has deferred the risk level of this finding when he is ok with it  and does not plan to do anything about it.
     * 
     */
    private @Nullable Boolean isRiskDeferred;
    /**
     * @return The user who initiated change of risk level of the finding
     * 
     */
    private @Nullable String modifiedBy;
    private String securityAssessmentId;
    /**
     * @return The original severity / risk level of the finding as determined by security assessment.
     * 
     */
    private @Nullable String severity;
    private @Nullable String timeUpdatedGreaterThanOrEqualTo;
    private @Nullable String timeUpdatedLessThan;
    private @Nullable String timeValidUntilGreaterThanOrEqualTo;
    private @Nullable String timeValidUntilLessThan;

    private GetSecurityAssessmentFindingsChangeAuditLogsResult() {}
    public List<GetSecurityAssessmentFindingsChangeAuditLogsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The unique key that identifies the finding.
     * 
     */
    public Optional<String> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }
    /**
     * @return The short title for the finding whose risk is being modified.
     * 
     */
    public Optional<String> findingTitle() {
        return Optional.ofNullable(this.findingTitle);
    }
    /**
     * @return The list of findings_change_audit_log_collection.
     * 
     */
    public List<GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollection> findingsChangeAuditLogCollections() {
        return this.findingsChangeAuditLogCollections;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Determines if the user has deferred the risk level of this finding when he is ok with it  and does not plan to do anything about it.
     * 
     */
    public Optional<Boolean> isRiskDeferred() {
        return Optional.ofNullable(this.isRiskDeferred);
    }
    /**
     * @return The user who initiated change of risk level of the finding
     * 
     */
    public Optional<String> modifiedBy() {
        return Optional.ofNullable(this.modifiedBy);
    }
    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }
    /**
     * @return The original severity / risk level of the finding as determined by security assessment.
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    public Optional<String> timeUpdatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeUpdatedGreaterThanOrEqualTo);
    }
    public Optional<String> timeUpdatedLessThan() {
        return Optional.ofNullable(this.timeUpdatedLessThan);
    }
    public Optional<String> timeValidUntilGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeValidUntilGreaterThanOrEqualTo);
    }
    public Optional<String> timeValidUntilLessThan() {
        return Optional.ofNullable(this.timeValidUntilLessThan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentFindingsChangeAuditLogsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetSecurityAssessmentFindingsChangeAuditLogsFilter> filters;
        private @Nullable String findingKey;
        private @Nullable String findingTitle;
        private List<GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollection> findingsChangeAuditLogCollections;
        private String id;
        private @Nullable Boolean isRiskDeferred;
        private @Nullable String modifiedBy;
        private String securityAssessmentId;
        private @Nullable String severity;
        private @Nullable String timeUpdatedGreaterThanOrEqualTo;
        private @Nullable String timeUpdatedLessThan;
        private @Nullable String timeValidUntilGreaterThanOrEqualTo;
        private @Nullable String timeValidUntilLessThan;
        public Builder() {}
        public Builder(GetSecurityAssessmentFindingsChangeAuditLogsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.findingKey = defaults.findingKey;
    	      this.findingTitle = defaults.findingTitle;
    	      this.findingsChangeAuditLogCollections = defaults.findingsChangeAuditLogCollections;
    	      this.id = defaults.id;
    	      this.isRiskDeferred = defaults.isRiskDeferred;
    	      this.modifiedBy = defaults.modifiedBy;
    	      this.securityAssessmentId = defaults.securityAssessmentId;
    	      this.severity = defaults.severity;
    	      this.timeUpdatedGreaterThanOrEqualTo = defaults.timeUpdatedGreaterThanOrEqualTo;
    	      this.timeUpdatedLessThan = defaults.timeUpdatedLessThan;
    	      this.timeValidUntilGreaterThanOrEqualTo = defaults.timeValidUntilGreaterThanOrEqualTo;
    	      this.timeValidUntilLessThan = defaults.timeValidUntilLessThan;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetSecurityAssessmentFindingsChangeAuditLogsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSecurityAssessmentFindingsChangeAuditLogsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder findingKey(@Nullable String findingKey) {

            this.findingKey = findingKey;
            return this;
        }
        @CustomType.Setter
        public Builder findingTitle(@Nullable String findingTitle) {

            this.findingTitle = findingTitle;
            return this;
        }
        @CustomType.Setter
        public Builder findingsChangeAuditLogCollections(List<GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollection> findingsChangeAuditLogCollections) {
            if (findingsChangeAuditLogCollections == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsResult", "findingsChangeAuditLogCollections");
            }
            this.findingsChangeAuditLogCollections = findingsChangeAuditLogCollections;
            return this;
        }
        public Builder findingsChangeAuditLogCollections(GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollection... findingsChangeAuditLogCollections) {
            return findingsChangeAuditLogCollections(List.of(findingsChangeAuditLogCollections));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRiskDeferred(@Nullable Boolean isRiskDeferred) {

            this.isRiskDeferred = isRiskDeferred;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedBy(@Nullable String modifiedBy) {

            this.modifiedBy = modifiedBy;
            return this;
        }
        @CustomType.Setter
        public Builder securityAssessmentId(String securityAssessmentId) {
            if (securityAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentFindingsChangeAuditLogsResult", "securityAssessmentId");
            }
            this.securityAssessmentId = securityAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {

            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdatedGreaterThanOrEqualTo(@Nullable String timeUpdatedGreaterThanOrEqualTo) {

            this.timeUpdatedGreaterThanOrEqualTo = timeUpdatedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdatedLessThan(@Nullable String timeUpdatedLessThan) {

            this.timeUpdatedLessThan = timeUpdatedLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder timeValidUntilGreaterThanOrEqualTo(@Nullable String timeValidUntilGreaterThanOrEqualTo) {

            this.timeValidUntilGreaterThanOrEqualTo = timeValidUntilGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeValidUntilLessThan(@Nullable String timeValidUntilLessThan) {

            this.timeValidUntilLessThan = timeValidUntilLessThan;
            return this;
        }
        public GetSecurityAssessmentFindingsChangeAuditLogsResult build() {
            final var _resultValue = new GetSecurityAssessmentFindingsChangeAuditLogsResult();
            _resultValue.filters = filters;
            _resultValue.findingKey = findingKey;
            _resultValue.findingTitle = findingTitle;
            _resultValue.findingsChangeAuditLogCollections = findingsChangeAuditLogCollections;
            _resultValue.id = id;
            _resultValue.isRiskDeferred = isRiskDeferred;
            _resultValue.modifiedBy = modifiedBy;
            _resultValue.securityAssessmentId = securityAssessmentId;
            _resultValue.severity = severity;
            _resultValue.timeUpdatedGreaterThanOrEqualTo = timeUpdatedGreaterThanOrEqualTo;
            _resultValue.timeUpdatedLessThan = timeUpdatedLessThan;
            _resultValue.timeValidUntilGreaterThanOrEqualTo = timeValidUntilGreaterThanOrEqualTo;
            _resultValue.timeValidUntilLessThan = timeValidUntilLessThan;
            return _resultValue;
        }
    }
}
