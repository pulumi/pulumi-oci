// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentFindingsFindingReference;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentFindingsFinding {
    /**
     * @return The OCID of the assessment that generated this finding.
     * 
     */
    private @Nullable String assessmentId;
    /**
     * @return The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     * 
     */
    private @Nullable List<String> details;
    /**
     * @return The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
     * 
     */
    private @Nullable String key;
    /**
     * @return An optional filter to return only findings that match the specified reference.
     * 
     */
    private @Nullable List<GetSecurityAssessmentFindingsFindingReference> references;
    /**
     * @return The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    private @Nullable String remarks;
    /**
     * @return A filter to return only findings of a particular risk level.
     * 
     */
    private @Nullable String severity;
    /**
     * @return The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     * 
     */
    private @Nullable String summary;
    /**
     * @return The OCID of the target database.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The short title for the finding.
     * 
     */
    private @Nullable String title;

    private GetSecurityAssessmentFindingsFinding() {}
    /**
     * @return The OCID of the assessment that generated this finding.
     * 
     */
    public Optional<String> assessmentId() {
        return Optional.ofNullable(this.assessmentId);
    }
    /**
     * @return The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     * 
     */
    public List<String> details() {
        return this.details == null ? List.of() : this.details;
    }
    /**
     * @return The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return An optional filter to return only findings that match the specified reference.
     * 
     */
    public List<GetSecurityAssessmentFindingsFindingReference> references() {
        return this.references == null ? List.of() : this.references;
    }
    /**
     * @return The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     * 
     */
    public Optional<String> remarks() {
        return Optional.ofNullable(this.remarks);
    }
    /**
     * @return A filter to return only findings of a particular risk level.
     * 
     */
    public Optional<String> severity() {
        return Optional.ofNullable(this.severity);
    }
    /**
     * @return The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     * 
     */
    public Optional<String> summary() {
        return Optional.ofNullable(this.summary);
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The short title for the finding.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentFindingsFinding defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assessmentId;
        private @Nullable List<String> details;
        private @Nullable String key;
        private @Nullable List<GetSecurityAssessmentFindingsFindingReference> references;
        private @Nullable String remarks;
        private @Nullable String severity;
        private @Nullable String summary;
        private @Nullable String targetId;
        private @Nullable String title;
        public Builder() {}
        public Builder(GetSecurityAssessmentFindingsFinding defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assessmentId = defaults.assessmentId;
    	      this.details = defaults.details;
    	      this.key = defaults.key;
    	      this.references = defaults.references;
    	      this.remarks = defaults.remarks;
    	      this.severity = defaults.severity;
    	      this.summary = defaults.summary;
    	      this.targetId = defaults.targetId;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder assessmentId(@Nullable String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder details(@Nullable List<String> details) {
            this.details = details;
            return this;
        }
        public Builder details(String... details) {
            return details(List.of(details));
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder references(@Nullable List<GetSecurityAssessmentFindingsFindingReference> references) {
            this.references = references;
            return this;
        }
        public Builder references(GetSecurityAssessmentFindingsFindingReference... references) {
            return references(List.of(references));
        }
        @CustomType.Setter
        public Builder remarks(@Nullable String remarks) {
            this.remarks = remarks;
            return this;
        }
        @CustomType.Setter
        public Builder severity(@Nullable String severity) {
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder summary(@Nullable String summary) {
            this.summary = summary;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }
        public GetSecurityAssessmentFindingsFinding build() {
            final var o = new GetSecurityAssessmentFindingsFinding();
            o.assessmentId = assessmentId;
            o.details = details;
            o.key = key;
            o.references = references;
            o.remarks = remarks;
            o.severity = severity;
            o.summary = summary;
            o.targetId = targetId;
            o.title = title;
            return o;
        }
    }
}
