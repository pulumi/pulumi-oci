// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentSecurityFeaturesFilter;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentSecurityFeaturesResult {
    private @Nullable String accessLevel;
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<GetSecurityAssessmentSecurityFeaturesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of security_feature_collection.
     * 
     */
    private List<GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollection> securityFeatureCollections;
    /**
     * @return The OCID of the target database.
     * 
     */
    private @Nullable String targetId;
    private @Nullable String targetsWithColumnEncryption;
    private @Nullable String targetsWithDatabaseVault;
    private @Nullable String targetsWithExternalAuthentication;
    private @Nullable String targetsWithFineGrainedAudit;
    private @Nullable String targetsWithGlobalAuthentication;
    private @Nullable String targetsWithNetworkEncryption;
    private @Nullable String targetsWithPasswordAuthentication;
    private @Nullable String targetsWithPrivilegeAnalysis;
    private @Nullable String targetsWithTablespaceEncryption;
    private @Nullable String targetsWithTraditionalAudit;
    private @Nullable String targetsWithUnifiedAudit;

    private GetSecurityAssessmentSecurityFeaturesResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<GetSecurityAssessmentSecurityFeaturesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of security_feature_collection.
     * 
     */
    public List<GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollection> securityFeatureCollections() {
        return this.securityFeatureCollections;
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    public Optional<String> targetsWithColumnEncryption() {
        return Optional.ofNullable(this.targetsWithColumnEncryption);
    }
    public Optional<String> targetsWithDatabaseVault() {
        return Optional.ofNullable(this.targetsWithDatabaseVault);
    }
    public Optional<String> targetsWithExternalAuthentication() {
        return Optional.ofNullable(this.targetsWithExternalAuthentication);
    }
    public Optional<String> targetsWithFineGrainedAudit() {
        return Optional.ofNullable(this.targetsWithFineGrainedAudit);
    }
    public Optional<String> targetsWithGlobalAuthentication() {
        return Optional.ofNullable(this.targetsWithGlobalAuthentication);
    }
    public Optional<String> targetsWithNetworkEncryption() {
        return Optional.ofNullable(this.targetsWithNetworkEncryption);
    }
    public Optional<String> targetsWithPasswordAuthentication() {
        return Optional.ofNullable(this.targetsWithPasswordAuthentication);
    }
    public Optional<String> targetsWithPrivilegeAnalysis() {
        return Optional.ofNullable(this.targetsWithPrivilegeAnalysis);
    }
    public Optional<String> targetsWithTablespaceEncryption() {
        return Optional.ofNullable(this.targetsWithTablespaceEncryption);
    }
    public Optional<String> targetsWithTraditionalAudit() {
        return Optional.ofNullable(this.targetsWithTraditionalAudit);
    }
    public Optional<String> targetsWithUnifiedAudit() {
        return Optional.ofNullable(this.targetsWithUnifiedAudit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentSecurityFeaturesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<GetSecurityAssessmentSecurityFeaturesFilter> filters;
        private String id;
        private List<GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollection> securityFeatureCollections;
        private @Nullable String targetId;
        private @Nullable String targetsWithColumnEncryption;
        private @Nullable String targetsWithDatabaseVault;
        private @Nullable String targetsWithExternalAuthentication;
        private @Nullable String targetsWithFineGrainedAudit;
        private @Nullable String targetsWithGlobalAuthentication;
        private @Nullable String targetsWithNetworkEncryption;
        private @Nullable String targetsWithPasswordAuthentication;
        private @Nullable String targetsWithPrivilegeAnalysis;
        private @Nullable String targetsWithTablespaceEncryption;
        private @Nullable String targetsWithTraditionalAudit;
        private @Nullable String targetsWithUnifiedAudit;
        public Builder() {}
        public Builder(GetSecurityAssessmentSecurityFeaturesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.securityFeatureCollections = defaults.securityFeatureCollections;
    	      this.targetId = defaults.targetId;
    	      this.targetsWithColumnEncryption = defaults.targetsWithColumnEncryption;
    	      this.targetsWithDatabaseVault = defaults.targetsWithDatabaseVault;
    	      this.targetsWithExternalAuthentication = defaults.targetsWithExternalAuthentication;
    	      this.targetsWithFineGrainedAudit = defaults.targetsWithFineGrainedAudit;
    	      this.targetsWithGlobalAuthentication = defaults.targetsWithGlobalAuthentication;
    	      this.targetsWithNetworkEncryption = defaults.targetsWithNetworkEncryption;
    	      this.targetsWithPasswordAuthentication = defaults.targetsWithPasswordAuthentication;
    	      this.targetsWithPrivilegeAnalysis = defaults.targetsWithPrivilegeAnalysis;
    	      this.targetsWithTablespaceEncryption = defaults.targetsWithTablespaceEncryption;
    	      this.targetsWithTraditionalAudit = defaults.targetsWithTraditionalAudit;
    	      this.targetsWithUnifiedAudit = defaults.targetsWithUnifiedAudit;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSecurityAssessmentSecurityFeaturesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSecurityAssessmentSecurityFeaturesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder securityFeatureCollections(List<GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollection> securityFeatureCollections) {
            if (securityFeatureCollections == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesResult", "securityFeatureCollections");
            }
            this.securityFeatureCollections = securityFeatureCollections;
            return this;
        }
        public Builder securityFeatureCollections(GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollection... securityFeatureCollections) {
            return securityFeatureCollections(List.of(securityFeatureCollections));
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithColumnEncryption(@Nullable String targetsWithColumnEncryption) {

            this.targetsWithColumnEncryption = targetsWithColumnEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithDatabaseVault(@Nullable String targetsWithDatabaseVault) {

            this.targetsWithDatabaseVault = targetsWithDatabaseVault;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithExternalAuthentication(@Nullable String targetsWithExternalAuthentication) {

            this.targetsWithExternalAuthentication = targetsWithExternalAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithFineGrainedAudit(@Nullable String targetsWithFineGrainedAudit) {

            this.targetsWithFineGrainedAudit = targetsWithFineGrainedAudit;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithGlobalAuthentication(@Nullable String targetsWithGlobalAuthentication) {

            this.targetsWithGlobalAuthentication = targetsWithGlobalAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithNetworkEncryption(@Nullable String targetsWithNetworkEncryption) {

            this.targetsWithNetworkEncryption = targetsWithNetworkEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithPasswordAuthentication(@Nullable String targetsWithPasswordAuthentication) {

            this.targetsWithPasswordAuthentication = targetsWithPasswordAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithPrivilegeAnalysis(@Nullable String targetsWithPrivilegeAnalysis) {

            this.targetsWithPrivilegeAnalysis = targetsWithPrivilegeAnalysis;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithTablespaceEncryption(@Nullable String targetsWithTablespaceEncryption) {

            this.targetsWithTablespaceEncryption = targetsWithTablespaceEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithTraditionalAudit(@Nullable String targetsWithTraditionalAudit) {

            this.targetsWithTraditionalAudit = targetsWithTraditionalAudit;
            return this;
        }
        @CustomType.Setter
        public Builder targetsWithUnifiedAudit(@Nullable String targetsWithUnifiedAudit) {

            this.targetsWithUnifiedAudit = targetsWithUnifiedAudit;
            return this;
        }
        public GetSecurityAssessmentSecurityFeaturesResult build() {
            final var _resultValue = new GetSecurityAssessmentSecurityFeaturesResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.securityFeatureCollections = securityFeatureCollections;
            _resultValue.targetId = targetId;
            _resultValue.targetsWithColumnEncryption = targetsWithColumnEncryption;
            _resultValue.targetsWithDatabaseVault = targetsWithDatabaseVault;
            _resultValue.targetsWithExternalAuthentication = targetsWithExternalAuthentication;
            _resultValue.targetsWithFineGrainedAudit = targetsWithFineGrainedAudit;
            _resultValue.targetsWithGlobalAuthentication = targetsWithGlobalAuthentication;
            _resultValue.targetsWithNetworkEncryption = targetsWithNetworkEncryption;
            _resultValue.targetsWithPasswordAuthentication = targetsWithPasswordAuthentication;
            _resultValue.targetsWithPrivilegeAnalysis = targetsWithPrivilegeAnalysis;
            _resultValue.targetsWithTablespaceEncryption = targetsWithTablespaceEncryption;
            _resultValue.targetsWithTraditionalAudit = targetsWithTraditionalAudit;
            _resultValue.targetsWithUnifiedAudit = targetsWithUnifiedAudit;
            return _resultValue;
        }
    }
}
