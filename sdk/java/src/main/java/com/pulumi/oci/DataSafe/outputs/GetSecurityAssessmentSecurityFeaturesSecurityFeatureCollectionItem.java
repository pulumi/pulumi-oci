// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem {
    /**
     * @return The OCID of the assessment that generates this security feature usage result.
     * 
     */
    private String assessmentId;
    /**
     * @return The usage of security feature - Column Encryption.
     * 
     */
    private String columnEncryption;
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return The usage of security feature - Database Vault.
     * 
     */
    private String databaseVault;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The usage of security feature - External Authentication.
     * 
     */
    private String externalAuthentication;
    /**
     * @return The usage of security feature - Fine Grained Audit.
     * 
     */
    private String fineGrainedAudit;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The usage of security feature - Global Authentication.
     * 
     */
    private String globalAuthentication;
    /**
     * @return The usage of security feature - Network Encryption.
     * 
     */
    private String networkEncryption;
    /**
     * @return The usage of security feature - Password Authentication.
     * 
     */
    private String passwordAuthentication;
    /**
     * @return The usage of security feature - Privilege Analysis.
     * 
     */
    private String privilegeAnalysis;
    /**
     * @return The usage of security feature - Tablespace Encryption.
     * 
     */
    private String tablespaceEncryption;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private String targetId;
    /**
     * @return The usage of security feature - Traditional Audit.
     * 
     */
    private String traditionalAudit;
    /**
     * @return The usage of security feature - Unified Audit.
     * 
     */
    private String unifiedAudit;

    private GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem() {}
    /**
     * @return The OCID of the assessment that generates this security feature usage result.
     * 
     */
    public String assessmentId() {
        return this.assessmentId;
    }
    /**
     * @return The usage of security feature - Column Encryption.
     * 
     */
    public String columnEncryption() {
        return this.columnEncryption;
    }
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The usage of security feature - Database Vault.
     * 
     */
    public String databaseVault() {
        return this.databaseVault;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The usage of security feature - External Authentication.
     * 
     */
    public String externalAuthentication() {
        return this.externalAuthentication;
    }
    /**
     * @return The usage of security feature - Fine Grained Audit.
     * 
     */
    public String fineGrainedAudit() {
        return this.fineGrainedAudit;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The usage of security feature - Global Authentication.
     * 
     */
    public String globalAuthentication() {
        return this.globalAuthentication;
    }
    /**
     * @return The usage of security feature - Network Encryption.
     * 
     */
    public String networkEncryption() {
        return this.networkEncryption;
    }
    /**
     * @return The usage of security feature - Password Authentication.
     * 
     */
    public String passwordAuthentication() {
        return this.passwordAuthentication;
    }
    /**
     * @return The usage of security feature - Privilege Analysis.
     * 
     */
    public String privilegeAnalysis() {
        return this.privilegeAnalysis;
    }
    /**
     * @return The usage of security feature - Tablespace Encryption.
     * 
     */
    public String tablespaceEncryption() {
        return this.tablespaceEncryption;
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The usage of security feature - Traditional Audit.
     * 
     */
    public String traditionalAudit() {
        return this.traditionalAudit;
    }
    /**
     * @return The usage of security feature - Unified Audit.
     * 
     */
    public String unifiedAudit() {
        return this.unifiedAudit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assessmentId;
        private String columnEncryption;
        private String compartmentId;
        private String databaseVault;
        private Map<String,String> definedTags;
        private String externalAuthentication;
        private String fineGrainedAudit;
        private Map<String,String> freeformTags;
        private String globalAuthentication;
        private String networkEncryption;
        private String passwordAuthentication;
        private String privilegeAnalysis;
        private String tablespaceEncryption;
        private String targetId;
        private String traditionalAudit;
        private String unifiedAudit;
        public Builder() {}
        public Builder(GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assessmentId = defaults.assessmentId;
    	      this.columnEncryption = defaults.columnEncryption;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseVault = defaults.databaseVault;
    	      this.definedTags = defaults.definedTags;
    	      this.externalAuthentication = defaults.externalAuthentication;
    	      this.fineGrainedAudit = defaults.fineGrainedAudit;
    	      this.freeformTags = defaults.freeformTags;
    	      this.globalAuthentication = defaults.globalAuthentication;
    	      this.networkEncryption = defaults.networkEncryption;
    	      this.passwordAuthentication = defaults.passwordAuthentication;
    	      this.privilegeAnalysis = defaults.privilegeAnalysis;
    	      this.tablespaceEncryption = defaults.tablespaceEncryption;
    	      this.targetId = defaults.targetId;
    	      this.traditionalAudit = defaults.traditionalAudit;
    	      this.unifiedAudit = defaults.unifiedAudit;
        }

        @CustomType.Setter
        public Builder assessmentId(String assessmentId) {
            if (assessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "assessmentId");
            }
            this.assessmentId = assessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder columnEncryption(String columnEncryption) {
            if (columnEncryption == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "columnEncryption");
            }
            this.columnEncryption = columnEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseVault(String databaseVault) {
            if (databaseVault == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "databaseVault");
            }
            this.databaseVault = databaseVault;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder externalAuthentication(String externalAuthentication) {
            if (externalAuthentication == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "externalAuthentication");
            }
            this.externalAuthentication = externalAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder fineGrainedAudit(String fineGrainedAudit) {
            if (fineGrainedAudit == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "fineGrainedAudit");
            }
            this.fineGrainedAudit = fineGrainedAudit;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder globalAuthentication(String globalAuthentication) {
            if (globalAuthentication == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "globalAuthentication");
            }
            this.globalAuthentication = globalAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder networkEncryption(String networkEncryption) {
            if (networkEncryption == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "networkEncryption");
            }
            this.networkEncryption = networkEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder passwordAuthentication(String passwordAuthentication) {
            if (passwordAuthentication == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "passwordAuthentication");
            }
            this.passwordAuthentication = passwordAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder privilegeAnalysis(String privilegeAnalysis) {
            if (privilegeAnalysis == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "privilegeAnalysis");
            }
            this.privilegeAnalysis = privilegeAnalysis;
            return this;
        }
        @CustomType.Setter
        public Builder tablespaceEncryption(String tablespaceEncryption) {
            if (tablespaceEncryption == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "tablespaceEncryption");
            }
            this.tablespaceEncryption = tablespaceEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder traditionalAudit(String traditionalAudit) {
            if (traditionalAudit == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "traditionalAudit");
            }
            this.traditionalAudit = traditionalAudit;
            return this;
        }
        @CustomType.Setter
        public Builder unifiedAudit(String unifiedAudit) {
            if (unifiedAudit == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem", "unifiedAudit");
            }
            this.unifiedAudit = unifiedAudit;
            return this;
        }
        public GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem build() {
            final var _resultValue = new GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem();
            _resultValue.assessmentId = assessmentId;
            _resultValue.columnEncryption = columnEncryption;
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseVault = databaseVault;
            _resultValue.definedTags = definedTags;
            _resultValue.externalAuthentication = externalAuthentication;
            _resultValue.fineGrainedAudit = fineGrainedAudit;
            _resultValue.freeformTags = freeformTags;
            _resultValue.globalAuthentication = globalAuthentication;
            _resultValue.networkEncryption = networkEncryption;
            _resultValue.passwordAuthentication = passwordAuthentication;
            _resultValue.privilegeAnalysis = privilegeAnalysis;
            _resultValue.tablespaceEncryption = tablespaceEncryption;
            _resultValue.targetId = targetId;
            _resultValue.traditionalAudit = traditionalAudit;
            _resultValue.unifiedAudit = unifiedAudit;
            return _resultValue;
        }
    }
}
