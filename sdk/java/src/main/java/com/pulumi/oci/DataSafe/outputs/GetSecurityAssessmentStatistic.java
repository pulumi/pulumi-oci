// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentStatisticAdvisory;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentStatisticDeferred;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentStatisticEvaluate;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentStatisticHighRisk;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentStatisticLowRisk;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentStatisticMediumRisk;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentStatisticPass;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityAssessmentStatistic {
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private List<GetSecurityAssessmentStatisticAdvisory> advisories;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private List<GetSecurityAssessmentStatisticDeferred> deferreds;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private List<GetSecurityAssessmentStatisticEvaluate> evaluates;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private List<GetSecurityAssessmentStatisticHighRisk> highRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private List<GetSecurityAssessmentStatisticLowRisk> lowRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private List<GetSecurityAssessmentStatisticMediumRisk> mediumRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private List<GetSecurityAssessmentStatisticPass> passes;
    /**
     * @return The total number of targets in this security assessment.
     * 
     */
    private Integer targetsCount;

    private GetSecurityAssessmentStatistic() {}
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<GetSecurityAssessmentStatisticAdvisory> advisories() {
        return this.advisories;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<GetSecurityAssessmentStatisticDeferred> deferreds() {
        return this.deferreds;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<GetSecurityAssessmentStatisticEvaluate> evaluates() {
        return this.evaluates;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<GetSecurityAssessmentStatisticHighRisk> highRisks() {
        return this.highRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<GetSecurityAssessmentStatisticLowRisk> lowRisks() {
        return this.lowRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<GetSecurityAssessmentStatisticMediumRisk> mediumRisks() {
        return this.mediumRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<GetSecurityAssessmentStatisticPass> passes() {
        return this.passes;
    }
    /**
     * @return The total number of targets in this security assessment.
     * 
     */
    public Integer targetsCount() {
        return this.targetsCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentStatistic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSecurityAssessmentStatisticAdvisory> advisories;
        private List<GetSecurityAssessmentStatisticDeferred> deferreds;
        private List<GetSecurityAssessmentStatisticEvaluate> evaluates;
        private List<GetSecurityAssessmentStatisticHighRisk> highRisks;
        private List<GetSecurityAssessmentStatisticLowRisk> lowRisks;
        private List<GetSecurityAssessmentStatisticMediumRisk> mediumRisks;
        private List<GetSecurityAssessmentStatisticPass> passes;
        private Integer targetsCount;
        public Builder() {}
        public Builder(GetSecurityAssessmentStatistic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advisories = defaults.advisories;
    	      this.deferreds = defaults.deferreds;
    	      this.evaluates = defaults.evaluates;
    	      this.highRisks = defaults.highRisks;
    	      this.lowRisks = defaults.lowRisks;
    	      this.mediumRisks = defaults.mediumRisks;
    	      this.passes = defaults.passes;
    	      this.targetsCount = defaults.targetsCount;
        }

        @CustomType.Setter
        public Builder advisories(List<GetSecurityAssessmentStatisticAdvisory> advisories) {
            if (advisories == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "advisories");
            }
            this.advisories = advisories;
            return this;
        }
        public Builder advisories(GetSecurityAssessmentStatisticAdvisory... advisories) {
            return advisories(List.of(advisories));
        }
        @CustomType.Setter
        public Builder deferreds(List<GetSecurityAssessmentStatisticDeferred> deferreds) {
            if (deferreds == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "deferreds");
            }
            this.deferreds = deferreds;
            return this;
        }
        public Builder deferreds(GetSecurityAssessmentStatisticDeferred... deferreds) {
            return deferreds(List.of(deferreds));
        }
        @CustomType.Setter
        public Builder evaluates(List<GetSecurityAssessmentStatisticEvaluate> evaluates) {
            if (evaluates == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "evaluates");
            }
            this.evaluates = evaluates;
            return this;
        }
        public Builder evaluates(GetSecurityAssessmentStatisticEvaluate... evaluates) {
            return evaluates(List.of(evaluates));
        }
        @CustomType.Setter
        public Builder highRisks(List<GetSecurityAssessmentStatisticHighRisk> highRisks) {
            if (highRisks == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "highRisks");
            }
            this.highRisks = highRisks;
            return this;
        }
        public Builder highRisks(GetSecurityAssessmentStatisticHighRisk... highRisks) {
            return highRisks(List.of(highRisks));
        }
        @CustomType.Setter
        public Builder lowRisks(List<GetSecurityAssessmentStatisticLowRisk> lowRisks) {
            if (lowRisks == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "lowRisks");
            }
            this.lowRisks = lowRisks;
            return this;
        }
        public Builder lowRisks(GetSecurityAssessmentStatisticLowRisk... lowRisks) {
            return lowRisks(List.of(lowRisks));
        }
        @CustomType.Setter
        public Builder mediumRisks(List<GetSecurityAssessmentStatisticMediumRisk> mediumRisks) {
            if (mediumRisks == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "mediumRisks");
            }
            this.mediumRisks = mediumRisks;
            return this;
        }
        public Builder mediumRisks(GetSecurityAssessmentStatisticMediumRisk... mediumRisks) {
            return mediumRisks(List.of(mediumRisks));
        }
        @CustomType.Setter
        public Builder passes(List<GetSecurityAssessmentStatisticPass> passes) {
            if (passes == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "passes");
            }
            this.passes = passes;
            return this;
        }
        public Builder passes(GetSecurityAssessmentStatisticPass... passes) {
            return passes(List.of(passes));
        }
        @CustomType.Setter
        public Builder targetsCount(Integer targetsCount) {
            if (targetsCount == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentStatistic", "targetsCount");
            }
            this.targetsCount = targetsCount;
            return this;
        }
        public GetSecurityAssessmentStatistic build() {
            final var _resultValue = new GetSecurityAssessmentStatistic();
            _resultValue.advisories = advisories;
            _resultValue.deferreds = deferreds;
            _resultValue.evaluates = evaluates;
            _resultValue.highRisks = highRisks;
            _resultValue.lowRisks = lowRisks;
            _resultValue.mediumRisks = mediumRisks;
            _resultValue.passes = passes;
            _resultValue.targetsCount = targetsCount;
            return _resultValue;
        }
    }
}
