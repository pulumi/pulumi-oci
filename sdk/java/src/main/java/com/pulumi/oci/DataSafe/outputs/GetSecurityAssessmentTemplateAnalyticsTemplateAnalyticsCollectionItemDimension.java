// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension {
    /**
     * @return A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
     * 
     */
    private Boolean isCompared;
    /**
     * @return A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
     * 
     */
    private Boolean isCompliant;
    /**
     * @return A filter to return only the target group related information if the OCID belongs to a target group.
     * 
     */
    private Boolean isGroup;
    /**
     * @return A filter to return the target database group that matches the specified OCID.
     * 
     */
    private String targetDatabaseGroupId;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private String targetId;
    /**
     * @return The OCID of the security assessment of type TEMPLATE.
     * 
     */
    private String templateAssessmentId;
    /**
     * @return The OCID of the security assessment of type TEMPLATE_BASELINE.
     * 
     */
    private String templateBaselineAssessmentId;
    /**
     * @return The date and time when the comparison was made upon the template baseline. Conforms to the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeLastCompared;
    /**
     * @return The number of checks inside the template assessment.
     * 
     */
    private Integer totalChecks;
    /**
     * @return Indicates how many checks in the template have drifts in the comparison report. This field is only present if isCompliant is false.
     * 
     */
    private Integer totalChecksFailed;
    /**
     * @return The number of the target(s) that have drifts in the comparison report. This field is only present if isCompared is true.
     * 
     */
    private Integer totalNonCompliantTargets;
    /**
     * @return The number of the target(s) inside the target group for which the template baseline assessment was created for. If the isGroup field is false, the value will be 1, representing the single target.
     * 
     */
    private Integer totalTargets;

    private GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension() {}
    /**
     * @return A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
     * 
     */
    public Boolean isCompared() {
        return this.isCompared;
    }
    /**
     * @return A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
     * 
     */
    public Boolean isCompliant() {
        return this.isCompliant;
    }
    /**
     * @return A filter to return only the target group related information if the OCID belongs to a target group.
     * 
     */
    public Boolean isGroup() {
        return this.isGroup;
    }
    /**
     * @return A filter to return the target database group that matches the specified OCID.
     * 
     */
    public String targetDatabaseGroupId() {
        return this.targetDatabaseGroupId;
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The OCID of the security assessment of type TEMPLATE.
     * 
     */
    public String templateAssessmentId() {
        return this.templateAssessmentId;
    }
    /**
     * @return The OCID of the security assessment of type TEMPLATE_BASELINE.
     * 
     */
    public String templateBaselineAssessmentId() {
        return this.templateBaselineAssessmentId;
    }
    /**
     * @return The date and time when the comparison was made upon the template baseline. Conforms to the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeLastCompared() {
        return this.timeLastCompared;
    }
    /**
     * @return The number of checks inside the template assessment.
     * 
     */
    public Integer totalChecks() {
        return this.totalChecks;
    }
    /**
     * @return Indicates how many checks in the template have drifts in the comparison report. This field is only present if isCompliant is false.
     * 
     */
    public Integer totalChecksFailed() {
        return this.totalChecksFailed;
    }
    /**
     * @return The number of the target(s) that have drifts in the comparison report. This field is only present if isCompared is true.
     * 
     */
    public Integer totalNonCompliantTargets() {
        return this.totalNonCompliantTargets;
    }
    /**
     * @return The number of the target(s) inside the target group for which the template baseline assessment was created for. If the isGroup field is false, the value will be 1, representing the single target.
     * 
     */
    public Integer totalTargets() {
        return this.totalTargets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isCompared;
        private Boolean isCompliant;
        private Boolean isGroup;
        private String targetDatabaseGroupId;
        private String targetId;
        private String templateAssessmentId;
        private String templateBaselineAssessmentId;
        private String timeLastCompared;
        private Integer totalChecks;
        private Integer totalChecksFailed;
        private Integer totalNonCompliantTargets;
        private Integer totalTargets;
        public Builder() {}
        public Builder(GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isCompared = defaults.isCompared;
    	      this.isCompliant = defaults.isCompliant;
    	      this.isGroup = defaults.isGroup;
    	      this.targetDatabaseGroupId = defaults.targetDatabaseGroupId;
    	      this.targetId = defaults.targetId;
    	      this.templateAssessmentId = defaults.templateAssessmentId;
    	      this.templateBaselineAssessmentId = defaults.templateBaselineAssessmentId;
    	      this.timeLastCompared = defaults.timeLastCompared;
    	      this.totalChecks = defaults.totalChecks;
    	      this.totalChecksFailed = defaults.totalChecksFailed;
    	      this.totalNonCompliantTargets = defaults.totalNonCompliantTargets;
    	      this.totalTargets = defaults.totalTargets;
        }

        @CustomType.Setter
        public Builder isCompared(Boolean isCompared) {
            if (isCompared == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "isCompared");
            }
            this.isCompared = isCompared;
            return this;
        }
        @CustomType.Setter
        public Builder isCompliant(Boolean isCompliant) {
            if (isCompliant == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "isCompliant");
            }
            this.isCompliant = isCompliant;
            return this;
        }
        @CustomType.Setter
        public Builder isGroup(Boolean isGroup) {
            if (isGroup == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "isGroup");
            }
            this.isGroup = isGroup;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseGroupId(String targetDatabaseGroupId) {
            if (targetDatabaseGroupId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "targetDatabaseGroupId");
            }
            this.targetDatabaseGroupId = targetDatabaseGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder templateAssessmentId(String templateAssessmentId) {
            if (templateAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "templateAssessmentId");
            }
            this.templateAssessmentId = templateAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder templateBaselineAssessmentId(String templateBaselineAssessmentId) {
            if (templateBaselineAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "templateBaselineAssessmentId");
            }
            this.templateBaselineAssessmentId = templateBaselineAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastCompared(String timeLastCompared) {
            if (timeLastCompared == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "timeLastCompared");
            }
            this.timeLastCompared = timeLastCompared;
            return this;
        }
        @CustomType.Setter
        public Builder totalChecks(Integer totalChecks) {
            if (totalChecks == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "totalChecks");
            }
            this.totalChecks = totalChecks;
            return this;
        }
        @CustomType.Setter
        public Builder totalChecksFailed(Integer totalChecksFailed) {
            if (totalChecksFailed == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "totalChecksFailed");
            }
            this.totalChecksFailed = totalChecksFailed;
            return this;
        }
        @CustomType.Setter
        public Builder totalNonCompliantTargets(Integer totalNonCompliantTargets) {
            if (totalNonCompliantTargets == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "totalNonCompliantTargets");
            }
            this.totalNonCompliantTargets = totalNonCompliantTargets;
            return this;
        }
        @CustomType.Setter
        public Builder totalTargets(Integer totalTargets) {
            if (totalTargets == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension", "totalTargets");
            }
            this.totalTargets = totalTargets;
            return this;
        }
        public GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension build() {
            final var _resultValue = new GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionItemDimension();
            _resultValue.isCompared = isCompared;
            _resultValue.isCompliant = isCompliant;
            _resultValue.isGroup = isGroup;
            _resultValue.targetDatabaseGroupId = targetDatabaseGroupId;
            _resultValue.targetId = targetId;
            _resultValue.templateAssessmentId = templateAssessmentId;
            _resultValue.templateBaselineAssessmentId = templateBaselineAssessmentId;
            _resultValue.timeLastCompared = timeLastCompared;
            _resultValue.totalChecks = totalChecks;
            _resultValue.totalChecksFailed = totalChecksFailed;
            _resultValue.totalNonCompliantTargets = totalNonCompliantTargets;
            _resultValue.totalTargets = totalTargets;
            return _resultValue;
        }
    }
}
