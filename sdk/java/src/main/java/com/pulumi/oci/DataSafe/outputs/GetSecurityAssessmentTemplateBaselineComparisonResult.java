// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentTemplateBaselineComparisonAuditing;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentTemplateBaselineComparisonAuthorizationControl;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentTemplateBaselineComparisonDataEncryption;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentTemplateBaselineComparisonDbConfiguration;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentTemplateBaselineComparisonFineGrainedAccessControl;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentTemplateBaselineComparisonPrivilegesAndRole;
import com.pulumi.oci.DataSafe.outputs.GetSecurityAssessmentTemplateBaselineComparisonUserAccount;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityAssessmentTemplateBaselineComparisonResult {
    /**
     * @return A comparison between findings belonging to Auditing category.
     * 
     */
    private List<GetSecurityAssessmentTemplateBaselineComparisonAuditing> auditings;
    /**
     * @return A comparison between findings belonging to Authorization Control category.
     * 
     */
    private List<GetSecurityAssessmentTemplateBaselineComparisonAuthorizationControl> authorizationControls;
    private @Nullable String category;
    private String comparisonSecurityAssessmentId;
    /**
     * @return Comparison between findings belonging to Data Encryption category.
     * 
     */
    private List<GetSecurityAssessmentTemplateBaselineComparisonDataEncryption> dataEncryptions;
    /**
     * @return Comparison between findings belonging to Database Configuration category.
     * 
     */
    private List<GetSecurityAssessmentTemplateBaselineComparisonDbConfiguration> dbConfigurations;
    private @Nullable String findingKey;
    /**
     * @return Comparison between findings belonging to Fine-Grained Access Control category.
     * 
     */
    private List<GetSecurityAssessmentTemplateBaselineComparisonFineGrainedAccessControl> fineGrainedAccessControls;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Comparison between findings belonging to Privileges and Roles category.
     * 
     */
    private List<GetSecurityAssessmentTemplateBaselineComparisonPrivilegesAndRole> privilegesAndRoles;
    private String securityAssessmentId;
    /**
     * @return The current state of the finding.
     * 
     */
    private String state;
    /**
     * @return The OCID of the target database.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The OCID of the security assessment that is set as a template baseline.
     * 
     */
    private String templateBaselineId;
    /**
     * @return The display name of the security assessment that is set as a template baseline.
     * 
     */
    private String templateBaselineName;
    /**
     * @return The date and time when the security assessment comparison was created. Conforms to the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return Comparison between findings belonging to User Accounts category.
     * 
     */
    private List<GetSecurityAssessmentTemplateBaselineComparisonUserAccount> userAccounts;

    private GetSecurityAssessmentTemplateBaselineComparisonResult() {}
    /**
     * @return A comparison between findings belonging to Auditing category.
     * 
     */
    public List<GetSecurityAssessmentTemplateBaselineComparisonAuditing> auditings() {
        return this.auditings;
    }
    /**
     * @return A comparison between findings belonging to Authorization Control category.
     * 
     */
    public List<GetSecurityAssessmentTemplateBaselineComparisonAuthorizationControl> authorizationControls() {
        return this.authorizationControls;
    }
    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }
    public String comparisonSecurityAssessmentId() {
        return this.comparisonSecurityAssessmentId;
    }
    /**
     * @return Comparison between findings belonging to Data Encryption category.
     * 
     */
    public List<GetSecurityAssessmentTemplateBaselineComparisonDataEncryption> dataEncryptions() {
        return this.dataEncryptions;
    }
    /**
     * @return Comparison between findings belonging to Database Configuration category.
     * 
     */
    public List<GetSecurityAssessmentTemplateBaselineComparisonDbConfiguration> dbConfigurations() {
        return this.dbConfigurations;
    }
    public Optional<String> findingKey() {
        return Optional.ofNullable(this.findingKey);
    }
    /**
     * @return Comparison between findings belonging to Fine-Grained Access Control category.
     * 
     */
    public List<GetSecurityAssessmentTemplateBaselineComparisonFineGrainedAccessControl> fineGrainedAccessControls() {
        return this.fineGrainedAccessControls;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Comparison between findings belonging to Privileges and Roles category.
     * 
     */
    public List<GetSecurityAssessmentTemplateBaselineComparisonPrivilegesAndRole> privilegesAndRoles() {
        return this.privilegesAndRoles;
    }
    public String securityAssessmentId() {
        return this.securityAssessmentId;
    }
    /**
     * @return The current state of the finding.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The OCID of the security assessment that is set as a template baseline.
     * 
     */
    public String templateBaselineId() {
        return this.templateBaselineId;
    }
    /**
     * @return The display name of the security assessment that is set as a template baseline.
     * 
     */
    public String templateBaselineName() {
        return this.templateBaselineName;
    }
    /**
     * @return The date and time when the security assessment comparison was created. Conforms to the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Comparison between findings belonging to User Accounts category.
     * 
     */
    public List<GetSecurityAssessmentTemplateBaselineComparisonUserAccount> userAccounts() {
        return this.userAccounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityAssessmentTemplateBaselineComparisonResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSecurityAssessmentTemplateBaselineComparisonAuditing> auditings;
        private List<GetSecurityAssessmentTemplateBaselineComparisonAuthorizationControl> authorizationControls;
        private @Nullable String category;
        private String comparisonSecurityAssessmentId;
        private List<GetSecurityAssessmentTemplateBaselineComparisonDataEncryption> dataEncryptions;
        private List<GetSecurityAssessmentTemplateBaselineComparisonDbConfiguration> dbConfigurations;
        private @Nullable String findingKey;
        private List<GetSecurityAssessmentTemplateBaselineComparisonFineGrainedAccessControl> fineGrainedAccessControls;
        private String id;
        private List<GetSecurityAssessmentTemplateBaselineComparisonPrivilegesAndRole> privilegesAndRoles;
        private String securityAssessmentId;
        private String state;
        private @Nullable String targetId;
        private String templateBaselineId;
        private String templateBaselineName;
        private String timeCreated;
        private List<GetSecurityAssessmentTemplateBaselineComparisonUserAccount> userAccounts;
        public Builder() {}
        public Builder(GetSecurityAssessmentTemplateBaselineComparisonResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditings = defaults.auditings;
    	      this.authorizationControls = defaults.authorizationControls;
    	      this.category = defaults.category;
    	      this.comparisonSecurityAssessmentId = defaults.comparisonSecurityAssessmentId;
    	      this.dataEncryptions = defaults.dataEncryptions;
    	      this.dbConfigurations = defaults.dbConfigurations;
    	      this.findingKey = defaults.findingKey;
    	      this.fineGrainedAccessControls = defaults.fineGrainedAccessControls;
    	      this.id = defaults.id;
    	      this.privilegesAndRoles = defaults.privilegesAndRoles;
    	      this.securityAssessmentId = defaults.securityAssessmentId;
    	      this.state = defaults.state;
    	      this.targetId = defaults.targetId;
    	      this.templateBaselineId = defaults.templateBaselineId;
    	      this.templateBaselineName = defaults.templateBaselineName;
    	      this.timeCreated = defaults.timeCreated;
    	      this.userAccounts = defaults.userAccounts;
        }

        @CustomType.Setter
        public Builder auditings(List<GetSecurityAssessmentTemplateBaselineComparisonAuditing> auditings) {
            if (auditings == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "auditings");
            }
            this.auditings = auditings;
            return this;
        }
        public Builder auditings(GetSecurityAssessmentTemplateBaselineComparisonAuditing... auditings) {
            return auditings(List.of(auditings));
        }
        @CustomType.Setter
        public Builder authorizationControls(List<GetSecurityAssessmentTemplateBaselineComparisonAuthorizationControl> authorizationControls) {
            if (authorizationControls == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "authorizationControls");
            }
            this.authorizationControls = authorizationControls;
            return this;
        }
        public Builder authorizationControls(GetSecurityAssessmentTemplateBaselineComparisonAuthorizationControl... authorizationControls) {
            return authorizationControls(List.of(authorizationControls));
        }
        @CustomType.Setter
        public Builder category(@Nullable String category) {

            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder comparisonSecurityAssessmentId(String comparisonSecurityAssessmentId) {
            if (comparisonSecurityAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "comparisonSecurityAssessmentId");
            }
            this.comparisonSecurityAssessmentId = comparisonSecurityAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dataEncryptions(List<GetSecurityAssessmentTemplateBaselineComparisonDataEncryption> dataEncryptions) {
            if (dataEncryptions == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "dataEncryptions");
            }
            this.dataEncryptions = dataEncryptions;
            return this;
        }
        public Builder dataEncryptions(GetSecurityAssessmentTemplateBaselineComparisonDataEncryption... dataEncryptions) {
            return dataEncryptions(List.of(dataEncryptions));
        }
        @CustomType.Setter
        public Builder dbConfigurations(List<GetSecurityAssessmentTemplateBaselineComparisonDbConfiguration> dbConfigurations) {
            if (dbConfigurations == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "dbConfigurations");
            }
            this.dbConfigurations = dbConfigurations;
            return this;
        }
        public Builder dbConfigurations(GetSecurityAssessmentTemplateBaselineComparisonDbConfiguration... dbConfigurations) {
            return dbConfigurations(List.of(dbConfigurations));
        }
        @CustomType.Setter
        public Builder findingKey(@Nullable String findingKey) {

            this.findingKey = findingKey;
            return this;
        }
        @CustomType.Setter
        public Builder fineGrainedAccessControls(List<GetSecurityAssessmentTemplateBaselineComparisonFineGrainedAccessControl> fineGrainedAccessControls) {
            if (fineGrainedAccessControls == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "fineGrainedAccessControls");
            }
            this.fineGrainedAccessControls = fineGrainedAccessControls;
            return this;
        }
        public Builder fineGrainedAccessControls(GetSecurityAssessmentTemplateBaselineComparisonFineGrainedAccessControl... fineGrainedAccessControls) {
            return fineGrainedAccessControls(List.of(fineGrainedAccessControls));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder privilegesAndRoles(List<GetSecurityAssessmentTemplateBaselineComparisonPrivilegesAndRole> privilegesAndRoles) {
            if (privilegesAndRoles == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "privilegesAndRoles");
            }
            this.privilegesAndRoles = privilegesAndRoles;
            return this;
        }
        public Builder privilegesAndRoles(GetSecurityAssessmentTemplateBaselineComparisonPrivilegesAndRole... privilegesAndRoles) {
            return privilegesAndRoles(List.of(privilegesAndRoles));
        }
        @CustomType.Setter
        public Builder securityAssessmentId(String securityAssessmentId) {
            if (securityAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "securityAssessmentId");
            }
            this.securityAssessmentId = securityAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder templateBaselineId(String templateBaselineId) {
            if (templateBaselineId == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "templateBaselineId");
            }
            this.templateBaselineId = templateBaselineId;
            return this;
        }
        @CustomType.Setter
        public Builder templateBaselineName(String templateBaselineName) {
            if (templateBaselineName == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "templateBaselineName");
            }
            this.templateBaselineName = templateBaselineName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder userAccounts(List<GetSecurityAssessmentTemplateBaselineComparisonUserAccount> userAccounts) {
            if (userAccounts == null) {
              throw new MissingRequiredPropertyException("GetSecurityAssessmentTemplateBaselineComparisonResult", "userAccounts");
            }
            this.userAccounts = userAccounts;
            return this;
        }
        public Builder userAccounts(GetSecurityAssessmentTemplateBaselineComparisonUserAccount... userAccounts) {
            return userAccounts(List.of(userAccounts));
        }
        public GetSecurityAssessmentTemplateBaselineComparisonResult build() {
            final var _resultValue = new GetSecurityAssessmentTemplateBaselineComparisonResult();
            _resultValue.auditings = auditings;
            _resultValue.authorizationControls = authorizationControls;
            _resultValue.category = category;
            _resultValue.comparisonSecurityAssessmentId = comparisonSecurityAssessmentId;
            _resultValue.dataEncryptions = dataEncryptions;
            _resultValue.dbConfigurations = dbConfigurations;
            _resultValue.findingKey = findingKey;
            _resultValue.fineGrainedAccessControls = fineGrainedAccessControls;
            _resultValue.id = id;
            _resultValue.privilegesAndRoles = privilegesAndRoles;
            _resultValue.securityAssessmentId = securityAssessmentId;
            _resultValue.state = state;
            _resultValue.targetId = targetId;
            _resultValue.templateBaselineId = templateBaselineId;
            _resultValue.templateBaselineName = templateBaselineName;
            _resultValue.timeCreated = timeCreated;
            _resultValue.userAccounts = userAccounts;
            return _resultValue;
        }
    }
}
