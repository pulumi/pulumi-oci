// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSecurityPolicyReportDatabaseViewAccessEntryResult {
    /**
     * @return The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT or DELETE.
     * 
     */
    private String accessType;
    /**
     * @return If there are column level privileges on a table or view.
     * 
     */
    private String columnName;
    private String databaseViewAccessEntryKey;
    /**
     * @return This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
     * 
     */
    private String grantFromRole;
    /**
     * @return Grantee is the user who can access the table or view
     * 
     */
    private String grantee;
    /**
     * @return The user who granted the privilege.
     * 
     */
    private String grantor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the table access is constrained via Oracle Database Vault.
     * 
     */
    private Boolean isAccessConstrainedByDatabaseVault;
    /**
     * @return Indicates whether the view access is constrained via Real Application Security.
     * 
     */
    private Boolean isAccessConstrainedByRealApplicationSecurity;
    /**
     * @return Indicates whether the view access is constrained via Oracle Data Redaction.
     * 
     */
    private Boolean isAccessConstrainedByRedaction;
    /**
     * @return Indicates whether the view access is constrained via Oracle Database SQL Firewall.
     * 
     */
    private Boolean isAccessConstrainedBySqlFirewall;
    /**
     * @return Indicates whether the view access is constrained via Virtual Private Database.
     * 
     */
    private Boolean isAccessConstrainedByVirtualPrivateDatabase;
    /**
     * @return The unique key that identifies the table access report. It is numeric and unique within a security policy report.
     * 
     */
    private String key;
    /**
     * @return The name of the privilege.
     * 
     */
    private String privilege;
    /**
     * @return Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
     * 
     */
    private String privilegeGrantable;
    /**
     * @return Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
     * 
     */
    private String privilegeType;
    private String securityPolicyReportId;
    /**
     * @return The name of the database table the user has access to.
     * 
     */
    private String tableName;
    /**
     * @return The name of the schema the table belongs to.
     * 
     */
    private String tableSchema;
    /**
     * @return The OCID of the of the  target database.
     * 
     */
    private String targetId;
    /**
     * @return The name of the view.
     * 
     */
    private String viewName;
    /**
     * @return The name of the schema.
     * 
     */
    private String viewSchema;
    /**
     * @return Definition of the view.
     * 
     */
    private String viewText;

    private GetSecurityPolicyReportDatabaseViewAccessEntryResult() {}
    /**
     * @return The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT or DELETE.
     * 
     */
    public String accessType() {
        return this.accessType;
    }
    /**
     * @return If there are column level privileges on a table or view.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    public String databaseViewAccessEntryKey() {
        return this.databaseViewAccessEntryKey;
    }
    /**
     * @return This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
     * 
     */
    public String grantFromRole() {
        return this.grantFromRole;
    }
    /**
     * @return Grantee is the user who can access the table or view
     * 
     */
    public String grantee() {
        return this.grantee;
    }
    /**
     * @return The user who granted the privilege.
     * 
     */
    public String grantor() {
        return this.grantor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the table access is constrained via Oracle Database Vault.
     * 
     */
    public Boolean isAccessConstrainedByDatabaseVault() {
        return this.isAccessConstrainedByDatabaseVault;
    }
    /**
     * @return Indicates whether the view access is constrained via Real Application Security.
     * 
     */
    public Boolean isAccessConstrainedByRealApplicationSecurity() {
        return this.isAccessConstrainedByRealApplicationSecurity;
    }
    /**
     * @return Indicates whether the view access is constrained via Oracle Data Redaction.
     * 
     */
    public Boolean isAccessConstrainedByRedaction() {
        return this.isAccessConstrainedByRedaction;
    }
    /**
     * @return Indicates whether the view access is constrained via Oracle Database SQL Firewall.
     * 
     */
    public Boolean isAccessConstrainedBySqlFirewall() {
        return this.isAccessConstrainedBySqlFirewall;
    }
    /**
     * @return Indicates whether the view access is constrained via Virtual Private Database.
     * 
     */
    public Boolean isAccessConstrainedByVirtualPrivateDatabase() {
        return this.isAccessConstrainedByVirtualPrivateDatabase;
    }
    /**
     * @return The unique key that identifies the table access report. It is numeric and unique within a security policy report.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The name of the privilege.
     * 
     */
    public String privilege() {
        return this.privilege;
    }
    /**
     * @return Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
     * 
     */
    public String privilegeGrantable() {
        return this.privilegeGrantable;
    }
    /**
     * @return Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
     * 
     */
    public String privilegeType() {
        return this.privilegeType;
    }
    public String securityPolicyReportId() {
        return this.securityPolicyReportId;
    }
    /**
     * @return The name of the database table the user has access to.
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return The name of the schema the table belongs to.
     * 
     */
    public String tableSchema() {
        return this.tableSchema;
    }
    /**
     * @return The OCID of the of the  target database.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The name of the view.
     * 
     */
    public String viewName() {
        return this.viewName;
    }
    /**
     * @return The name of the schema.
     * 
     */
    public String viewSchema() {
        return this.viewSchema;
    }
    /**
     * @return Definition of the view.
     * 
     */
    public String viewText() {
        return this.viewText;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityPolicyReportDatabaseViewAccessEntryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessType;
        private String columnName;
        private String databaseViewAccessEntryKey;
        private String grantFromRole;
        private String grantee;
        private String grantor;
        private String id;
        private Boolean isAccessConstrainedByDatabaseVault;
        private Boolean isAccessConstrainedByRealApplicationSecurity;
        private Boolean isAccessConstrainedByRedaction;
        private Boolean isAccessConstrainedBySqlFirewall;
        private Boolean isAccessConstrainedByVirtualPrivateDatabase;
        private String key;
        private String privilege;
        private String privilegeGrantable;
        private String privilegeType;
        private String securityPolicyReportId;
        private String tableName;
        private String tableSchema;
        private String targetId;
        private String viewName;
        private String viewSchema;
        private String viewText;
        public Builder() {}
        public Builder(GetSecurityPolicyReportDatabaseViewAccessEntryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessType = defaults.accessType;
    	      this.columnName = defaults.columnName;
    	      this.databaseViewAccessEntryKey = defaults.databaseViewAccessEntryKey;
    	      this.grantFromRole = defaults.grantFromRole;
    	      this.grantee = defaults.grantee;
    	      this.grantor = defaults.grantor;
    	      this.id = defaults.id;
    	      this.isAccessConstrainedByDatabaseVault = defaults.isAccessConstrainedByDatabaseVault;
    	      this.isAccessConstrainedByRealApplicationSecurity = defaults.isAccessConstrainedByRealApplicationSecurity;
    	      this.isAccessConstrainedByRedaction = defaults.isAccessConstrainedByRedaction;
    	      this.isAccessConstrainedBySqlFirewall = defaults.isAccessConstrainedBySqlFirewall;
    	      this.isAccessConstrainedByVirtualPrivateDatabase = defaults.isAccessConstrainedByVirtualPrivateDatabase;
    	      this.key = defaults.key;
    	      this.privilege = defaults.privilege;
    	      this.privilegeGrantable = defaults.privilegeGrantable;
    	      this.privilegeType = defaults.privilegeType;
    	      this.securityPolicyReportId = defaults.securityPolicyReportId;
    	      this.tableName = defaults.tableName;
    	      this.tableSchema = defaults.tableSchema;
    	      this.targetId = defaults.targetId;
    	      this.viewName = defaults.viewName;
    	      this.viewSchema = defaults.viewSchema;
    	      this.viewText = defaults.viewText;
        }

        @CustomType.Setter
        public Builder accessType(String accessType) {
            if (accessType == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "accessType");
            }
            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            if (columnName == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "columnName");
            }
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseViewAccessEntryKey(String databaseViewAccessEntryKey) {
            if (databaseViewAccessEntryKey == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "databaseViewAccessEntryKey");
            }
            this.databaseViewAccessEntryKey = databaseViewAccessEntryKey;
            return this;
        }
        @CustomType.Setter
        public Builder grantFromRole(String grantFromRole) {
            if (grantFromRole == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "grantFromRole");
            }
            this.grantFromRole = grantFromRole;
            return this;
        }
        @CustomType.Setter
        public Builder grantee(String grantee) {
            if (grantee == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "grantee");
            }
            this.grantee = grantee;
            return this;
        }
        @CustomType.Setter
        public Builder grantor(String grantor) {
            if (grantor == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "grantor");
            }
            this.grantor = grantor;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessConstrainedByDatabaseVault(Boolean isAccessConstrainedByDatabaseVault) {
            if (isAccessConstrainedByDatabaseVault == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "isAccessConstrainedByDatabaseVault");
            }
            this.isAccessConstrainedByDatabaseVault = isAccessConstrainedByDatabaseVault;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessConstrainedByRealApplicationSecurity(Boolean isAccessConstrainedByRealApplicationSecurity) {
            if (isAccessConstrainedByRealApplicationSecurity == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "isAccessConstrainedByRealApplicationSecurity");
            }
            this.isAccessConstrainedByRealApplicationSecurity = isAccessConstrainedByRealApplicationSecurity;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessConstrainedByRedaction(Boolean isAccessConstrainedByRedaction) {
            if (isAccessConstrainedByRedaction == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "isAccessConstrainedByRedaction");
            }
            this.isAccessConstrainedByRedaction = isAccessConstrainedByRedaction;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessConstrainedBySqlFirewall(Boolean isAccessConstrainedBySqlFirewall) {
            if (isAccessConstrainedBySqlFirewall == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "isAccessConstrainedBySqlFirewall");
            }
            this.isAccessConstrainedBySqlFirewall = isAccessConstrainedBySqlFirewall;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessConstrainedByVirtualPrivateDatabase(Boolean isAccessConstrainedByVirtualPrivateDatabase) {
            if (isAccessConstrainedByVirtualPrivateDatabase == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "isAccessConstrainedByVirtualPrivateDatabase");
            }
            this.isAccessConstrainedByVirtualPrivateDatabase = isAccessConstrainedByVirtualPrivateDatabase;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder privilege(String privilege) {
            if (privilege == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "privilege");
            }
            this.privilege = privilege;
            return this;
        }
        @CustomType.Setter
        public Builder privilegeGrantable(String privilegeGrantable) {
            if (privilegeGrantable == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "privilegeGrantable");
            }
            this.privilegeGrantable = privilegeGrantable;
            return this;
        }
        @CustomType.Setter
        public Builder privilegeType(String privilegeType) {
            if (privilegeType == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "privilegeType");
            }
            this.privilegeType = privilegeType;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicyReportId(String securityPolicyReportId) {
            if (securityPolicyReportId == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "securityPolicyReportId");
            }
            this.securityPolicyReportId = securityPolicyReportId;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder tableSchema(String tableSchema) {
            if (tableSchema == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "tableSchema");
            }
            this.tableSchema = tableSchema;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder viewName(String viewName) {
            if (viewName == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "viewName");
            }
            this.viewName = viewName;
            return this;
        }
        @CustomType.Setter
        public Builder viewSchema(String viewSchema) {
            if (viewSchema == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "viewSchema");
            }
            this.viewSchema = viewSchema;
            return this;
        }
        @CustomType.Setter
        public Builder viewText(String viewText) {
            if (viewText == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportDatabaseViewAccessEntryResult", "viewText");
            }
            this.viewText = viewText;
            return this;
        }
        public GetSecurityPolicyReportDatabaseViewAccessEntryResult build() {
            final var _resultValue = new GetSecurityPolicyReportDatabaseViewAccessEntryResult();
            _resultValue.accessType = accessType;
            _resultValue.columnName = columnName;
            _resultValue.databaseViewAccessEntryKey = databaseViewAccessEntryKey;
            _resultValue.grantFromRole = grantFromRole;
            _resultValue.grantee = grantee;
            _resultValue.grantor = grantor;
            _resultValue.id = id;
            _resultValue.isAccessConstrainedByDatabaseVault = isAccessConstrainedByDatabaseVault;
            _resultValue.isAccessConstrainedByRealApplicationSecurity = isAccessConstrainedByRealApplicationSecurity;
            _resultValue.isAccessConstrainedByRedaction = isAccessConstrainedByRedaction;
            _resultValue.isAccessConstrainedBySqlFirewall = isAccessConstrainedBySqlFirewall;
            _resultValue.isAccessConstrainedByVirtualPrivateDatabase = isAccessConstrainedByVirtualPrivateDatabase;
            _resultValue.key = key;
            _resultValue.privilege = privilege;
            _resultValue.privilegeGrantable = privilegeGrantable;
            _resultValue.privilegeType = privilegeType;
            _resultValue.securityPolicyReportId = securityPolicyReportId;
            _resultValue.tableName = tableName;
            _resultValue.tableSchema = tableSchema;
            _resultValue.targetId = targetId;
            _resultValue.viewName = viewName;
            _resultValue.viewSchema = viewSchema;
            _resultValue.viewText = viewText;
            return _resultValue;
        }
    }
}
