// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem {
    /**
     * @return The grant depth level of the indirect grant. An indirectly granted role/privilege is granted to the user through another role. The depth level indicates how deep a privilege is within the grant hierarchy.
     * 
     */
    private Integer depthLevel;
    /**
     * @return A filter to return only items that match the specified role.
     * 
     */
    private String grantedRole;
    /**
     * @return A filter to return only items that match the specified grantee.
     * 
     */
    private String grantee;
    /**
     * @return The unique key of a role grant.
     * 
     */
    private String key;

    private GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem() {}
    /**
     * @return The grant depth level of the indirect grant. An indirectly granted role/privilege is granted to the user through another role. The depth level indicates how deep a privilege is within the grant hierarchy.
     * 
     */
    public Integer depthLevel() {
        return this.depthLevel;
    }
    /**
     * @return A filter to return only items that match the specified role.
     * 
     */
    public String grantedRole() {
        return this.grantedRole;
    }
    /**
     * @return A filter to return only items that match the specified grantee.
     * 
     */
    public String grantee() {
        return this.grantee;
    }
    /**
     * @return The unique key of a role grant.
     * 
     */
    public String key() {
        return this.key;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer depthLevel;
        private String grantedRole;
        private String grantee;
        private String key;
        public Builder() {}
        public Builder(GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.depthLevel = defaults.depthLevel;
    	      this.grantedRole = defaults.grantedRole;
    	      this.grantee = defaults.grantee;
    	      this.key = defaults.key;
        }

        @CustomType.Setter
        public Builder depthLevel(Integer depthLevel) {
            if (depthLevel == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem", "depthLevel");
            }
            this.depthLevel = depthLevel;
            return this;
        }
        @CustomType.Setter
        public Builder grantedRole(String grantedRole) {
            if (grantedRole == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem", "grantedRole");
            }
            this.grantedRole = grantedRole;
            return this;
        }
        @CustomType.Setter
        public Builder grantee(String grantee) {
            if (grantee == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem", "grantee");
            }
            this.grantee = grantee;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem", "key");
            }
            this.key = key;
            return this;
        }
        public GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem build() {
            final var _resultValue = new GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem();
            _resultValue.depthLevel = depthLevel;
            _resultValue.grantedRole = grantedRole;
            _resultValue.grantee = grantee;
            _resultValue.key = key;
            return _resultValue;
        }
    }
}
