// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveColumnAnalyticsFilter;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSensitiveColumnAnalyticsResult {
    private @Nullable String accessLevel;
    /**
     * @return The name of the sensitive column.
     * 
     */
    private @Nullable List<String> columnNames;
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<GetSensitiveColumnAnalyticsFilter> filters;
    private @Nullable List<String> groupBies;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    private @Nullable List<String> objects;
    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    private @Nullable List<String> schemaNames;
    /**
     * @return The list of sensitive_column_analytics_collection.
     * 
     */
    private List<GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollection> sensitiveColumnAnalyticsCollections;
    /**
     * @return The OCID of the sensitive data model which contains the sensitive column.
     * 
     */
    private @Nullable String sensitiveDataModelId;
    private @Nullable String sensitiveTypeGroupId;
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    private @Nullable List<String> sensitiveTypeIds;
    /**
     * @return The OCID of the target database associated with the sensitive column.
     * 
     */
    private @Nullable String targetId;

    private GetSensitiveColumnAnalyticsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The name of the sensitive column.
     * 
     */
    public List<String> columnNames() {
        return this.columnNames == null ? List.of() : this.columnNames;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<GetSensitiveColumnAnalyticsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public List<String> groupBies() {
        return this.groupBies == null ? List.of() : this.groupBies;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    public List<String> objects() {
        return this.objects == null ? List.of() : this.objects;
    }
    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    public List<String> schemaNames() {
        return this.schemaNames == null ? List.of() : this.schemaNames;
    }
    /**
     * @return The list of sensitive_column_analytics_collection.
     * 
     */
    public List<GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollection> sensitiveColumnAnalyticsCollections() {
        return this.sensitiveColumnAnalyticsCollections;
    }
    /**
     * @return The OCID of the sensitive data model which contains the sensitive column.
     * 
     */
    public Optional<String> sensitiveDataModelId() {
        return Optional.ofNullable(this.sensitiveDataModelId);
    }
    public Optional<String> sensitiveTypeGroupId() {
        return Optional.ofNullable(this.sensitiveTypeGroupId);
    }
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    public List<String> sensitiveTypeIds() {
        return this.sensitiveTypeIds == null ? List.of() : this.sensitiveTypeIds;
    }
    /**
     * @return The OCID of the target database associated with the sensitive column.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveColumnAnalyticsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable List<String> columnNames;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<GetSensitiveColumnAnalyticsFilter> filters;
        private @Nullable List<String> groupBies;
        private String id;
        private @Nullable List<String> objects;
        private @Nullable List<String> schemaNames;
        private List<GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollection> sensitiveColumnAnalyticsCollections;
        private @Nullable String sensitiveDataModelId;
        private @Nullable String sensitiveTypeGroupId;
        private @Nullable List<String> sensitiveTypeIds;
        private @Nullable String targetId;
        public Builder() {}
        public Builder(GetSensitiveColumnAnalyticsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.columnNames = defaults.columnNames;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.groupBies = defaults.groupBies;
    	      this.id = defaults.id;
    	      this.objects = defaults.objects;
    	      this.schemaNames = defaults.schemaNames;
    	      this.sensitiveColumnAnalyticsCollections = defaults.sensitiveColumnAnalyticsCollections;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
    	      this.sensitiveTypeGroupId = defaults.sensitiveTypeGroupId;
    	      this.sensitiveTypeIds = defaults.sensitiveTypeIds;
    	      this.targetId = defaults.targetId;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder columnNames(@Nullable List<String> columnNames) {

            this.columnNames = columnNames;
            return this;
        }
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSensitiveColumnAnalyticsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSensitiveColumnAnalyticsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSensitiveColumnAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder groupBies(@Nullable List<String> groupBies) {

            this.groupBies = groupBies;
            return this;
        }
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSensitiveColumnAnalyticsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder objects(@Nullable List<String> objects) {

            this.objects = objects;
            return this;
        }
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }
        @CustomType.Setter
        public Builder schemaNames(@Nullable List<String> schemaNames) {

            this.schemaNames = schemaNames;
            return this;
        }
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }
        @CustomType.Setter
        public Builder sensitiveColumnAnalyticsCollections(List<GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollection> sensitiveColumnAnalyticsCollections) {
            if (sensitiveColumnAnalyticsCollections == null) {
              throw new MissingRequiredPropertyException("GetSensitiveColumnAnalyticsResult", "sensitiveColumnAnalyticsCollections");
            }
            this.sensitiveColumnAnalyticsCollections = sensitiveColumnAnalyticsCollections;
            return this;
        }
        public Builder sensitiveColumnAnalyticsCollections(GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollection... sensitiveColumnAnalyticsCollections) {
            return sensitiveColumnAnalyticsCollections(List.of(sensitiveColumnAnalyticsCollections));
        }
        @CustomType.Setter
        public Builder sensitiveDataModelId(@Nullable String sensitiveDataModelId) {

            this.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeGroupId(@Nullable String sensitiveTypeGroupId) {

            this.sensitiveTypeGroupId = sensitiveTypeGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeIds(@Nullable List<String> sensitiveTypeIds) {

            this.sensitiveTypeIds = sensitiveTypeIds;
            return this;
        }
        public Builder sensitiveTypeIds(String... sensitiveTypeIds) {
            return sensitiveTypeIds(List.of(sensitiveTypeIds));
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        public GetSensitiveColumnAnalyticsResult build() {
            final var _resultValue = new GetSensitiveColumnAnalyticsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.columnNames = columnNames;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.groupBies = groupBies;
            _resultValue.id = id;
            _resultValue.objects = objects;
            _resultValue.schemaNames = schemaNames;
            _resultValue.sensitiveColumnAnalyticsCollections = sensitiveColumnAnalyticsCollections;
            _resultValue.sensitiveDataModelId = sensitiveDataModelId;
            _resultValue.sensitiveTypeGroupId = sensitiveTypeGroupId;
            _resultValue.sensitiveTypeIds = sensitiveTypeIds;
            _resultValue.targetId = targetId;
            return _resultValue;
        }
    }
}
