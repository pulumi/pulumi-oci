// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParent;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem {
    /**
     * @return columnsInfo object has details of column group with schema details.
     * 
     */
    private GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild child;
    /**
     * @return Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
     * 
     */
    private Boolean isSensitive;
    /**
     * @return The unique key that identifies the referential relation. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    private String key;
    /**
     * @return columnsInfo object has details of column group with schema details.
     * 
     */
    private GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParent parent;
    /**
     * @return A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    private String relationType;
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    private String sensitiveDataModelId;
    /**
     * @return The current state of the referential relation.
     * 
     */
    private String state;

    private GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem() {}
    /**
     * @return columnsInfo object has details of column group with schema details.
     * 
     */
    public GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild child() {
        return this.child;
    }
    /**
     * @return Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
     * 
     */
    public Boolean isSensitive() {
        return this.isSensitive;
    }
    /**
     * @return The unique key that identifies the referential relation. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return columnsInfo object has details of column group with schema details.
     * 
     */
    public GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParent parent() {
        return this.parent;
    }
    /**
     * @return A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    public String relationType() {
        return this.relationType;
    }
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public String sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }
    /**
     * @return The current state of the referential relation.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild child;
        private Boolean isSensitive;
        private String key;
        private GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParent parent;
        private String relationType;
        private String sensitiveDataModelId;
        private String state;
        public Builder() {}
        public Builder(GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.child = defaults.child;
    	      this.isSensitive = defaults.isSensitive;
    	      this.key = defaults.key;
    	      this.parent = defaults.parent;
    	      this.relationType = defaults.relationType;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder child(GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild child) {
            if (child == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem", "child");
            }
            this.child = child;
            return this;
        }
        @CustomType.Setter
        public Builder isSensitive(Boolean isSensitive) {
            if (isSensitive == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem", "isSensitive");
            }
            this.isSensitive = isSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder parent(GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParent parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder relationType(String relationType) {
            if (relationType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem", "relationType");
            }
            this.relationType = relationType;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            if (sensitiveDataModelId == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem", "sensitiveDataModelId");
            }
            this.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        public GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem build() {
            final var _resultValue = new GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItem();
            _resultValue.child = child;
            _resultValue.isSensitive = isSensitive;
            _resultValue.key = key;
            _resultValue.parent = parent;
            _resultValue.relationType = relationType;
            _resultValue.sensitiveDataModelId = sensitiveDataModelId;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
