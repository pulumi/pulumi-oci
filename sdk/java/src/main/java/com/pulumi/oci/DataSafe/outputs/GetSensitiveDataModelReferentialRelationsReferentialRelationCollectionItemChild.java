// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild {
    /**
     * @return The application name.
     * 
     */
    private String appName;
    /**
     * @return Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
     * 
     */
    private List<String> columnGroups;
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    private String object;
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    private String objectType;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private String schemaName;
    /**
     * @return Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
     * 
     */
    private List<String> sensitiveTypeIds;

    private GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild() {}
    /**
     * @return The application name.
     * 
     */
    public String appName() {
        return this.appName;
    }
    /**
     * @return Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
     * 
     */
    public List<String> columnGroups() {
        return this.columnGroups;
    }
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
     * 
     */
    public List<String> sensitiveTypeIds() {
        return this.sensitiveTypeIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appName;
        private List<String> columnGroups;
        private String object;
        private String objectType;
        private String schemaName;
        private List<String> sensitiveTypeIds;
        public Builder() {}
        public Builder(GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appName = defaults.appName;
    	      this.columnGroups = defaults.columnGroups;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveTypeIds = defaults.sensitiveTypeIds;
        }

        @CustomType.Setter
        public Builder appName(String appName) {
            if (appName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild", "appName");
            }
            this.appName = appName;
            return this;
        }
        @CustomType.Setter
        public Builder columnGroups(List<String> columnGroups) {
            if (columnGroups == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild", "columnGroups");
            }
            this.columnGroups = columnGroups;
            return this;
        }
        public Builder columnGroups(String... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(String objectType) {
            if (objectType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild", "objectType");
            }
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeIds(List<String> sensitiveTypeIds) {
            if (sensitiveTypeIds == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild", "sensitiveTypeIds");
            }
            this.sensitiveTypeIds = sensitiveTypeIds;
            return this;
        }
        public Builder sensitiveTypeIds(String... sensitiveTypeIds) {
            return sensitiveTypeIds(List.of(sensitiveTypeIds));
        }
        public GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild build() {
            final var _resultValue = new GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChild();
            _resultValue.appName = appName;
            _resultValue.columnGroups = columnGroups;
            _resultValue.object = object;
            _resultValue.objectType = objectType;
            _resultValue.schemaName = schemaName;
            _resultValue.sensitiveTypeIds = sensitiveTypeIds;
            return _resultValue;
        }
    }
}
