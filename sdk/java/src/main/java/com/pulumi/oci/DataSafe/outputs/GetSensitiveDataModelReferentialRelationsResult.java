// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveDataModelReferentialRelationsFilter;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSensitiveDataModelReferentialRelationsResult {
    private @Nullable List<String> columnNames;
    private @Nullable List<GetSensitiveDataModelReferentialRelationsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Determines if the columns present in the referential relation is present in the sensitive data model
     * 
     */
    private @Nullable Boolean isSensitive;
    /**
     * @return The database object that contains the columns.
     * 
     */
    private @Nullable List<String> objects;
    /**
     * @return The list of referential_relation_collection.
     * 
     */
    private List<GetSensitiveDataModelReferentialRelationsReferentialRelationCollection> referentialRelationCollections;
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    private @Nullable List<String> relationTypes;
    /**
     * @return The schema name.
     * 
     */
    private @Nullable List<String> schemaNames;
    /**
     * @return The OCID of the sensitive data model that contains the sensitive column.
     * 
     */
    private String sensitiveDataModelId;

    private GetSensitiveDataModelReferentialRelationsResult() {}
    public List<String> columnNames() {
        return this.columnNames == null ? List.of() : this.columnNames;
    }
    public List<GetSensitiveDataModelReferentialRelationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Determines if the columns present in the referential relation is present in the sensitive data model
     * 
     */
    public Optional<Boolean> isSensitive() {
        return Optional.ofNullable(this.isSensitive);
    }
    /**
     * @return The database object that contains the columns.
     * 
     */
    public List<String> objects() {
        return this.objects == null ? List.of() : this.objects;
    }
    /**
     * @return The list of referential_relation_collection.
     * 
     */
    public List<GetSensitiveDataModelReferentialRelationsReferentialRelationCollection> referentialRelationCollections() {
        return this.referentialRelationCollections;
    }
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    public List<String> relationTypes() {
        return this.relationTypes == null ? List.of() : this.relationTypes;
    }
    /**
     * @return The schema name.
     * 
     */
    public List<String> schemaNames() {
        return this.schemaNames == null ? List.of() : this.schemaNames;
    }
    /**
     * @return The OCID of the sensitive data model that contains the sensitive column.
     * 
     */
    public String sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveDataModelReferentialRelationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> columnNames;
        private @Nullable List<GetSensitiveDataModelReferentialRelationsFilter> filters;
        private String id;
        private @Nullable Boolean isSensitive;
        private @Nullable List<String> objects;
        private List<GetSensitiveDataModelReferentialRelationsReferentialRelationCollection> referentialRelationCollections;
        private @Nullable List<String> relationTypes;
        private @Nullable List<String> schemaNames;
        private String sensitiveDataModelId;
        public Builder() {}
        public Builder(GetSensitiveDataModelReferentialRelationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnNames = defaults.columnNames;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isSensitive = defaults.isSensitive;
    	      this.objects = defaults.objects;
    	      this.referentialRelationCollections = defaults.referentialRelationCollections;
    	      this.relationTypes = defaults.relationTypes;
    	      this.schemaNames = defaults.schemaNames;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
        }

        @CustomType.Setter
        public Builder columnNames(@Nullable List<String> columnNames) {

            this.columnNames = columnNames;
            return this;
        }
        public Builder columnNames(String... columnNames) {
            return columnNames(List.of(columnNames));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSensitiveDataModelReferentialRelationsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetSensitiveDataModelReferentialRelationsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSensitive(@Nullable Boolean isSensitive) {

            this.isSensitive = isSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder objects(@Nullable List<String> objects) {

            this.objects = objects;
            return this;
        }
        public Builder objects(String... objects) {
            return objects(List.of(objects));
        }
        @CustomType.Setter
        public Builder referentialRelationCollections(List<GetSensitiveDataModelReferentialRelationsReferentialRelationCollection> referentialRelationCollections) {
            if (referentialRelationCollections == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsResult", "referentialRelationCollections");
            }
            this.referentialRelationCollections = referentialRelationCollections;
            return this;
        }
        public Builder referentialRelationCollections(GetSensitiveDataModelReferentialRelationsReferentialRelationCollection... referentialRelationCollections) {
            return referentialRelationCollections(List.of(referentialRelationCollections));
        }
        @CustomType.Setter
        public Builder relationTypes(@Nullable List<String> relationTypes) {

            this.relationTypes = relationTypes;
            return this;
        }
        public Builder relationTypes(String... relationTypes) {
            return relationTypes(List.of(relationTypes));
        }
        @CustomType.Setter
        public Builder schemaNames(@Nullable List<String> schemaNames) {

            this.schemaNames = schemaNames;
            return this;
        }
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }
        @CustomType.Setter
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            if (sensitiveDataModelId == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelReferentialRelationsResult", "sensitiveDataModelId");
            }
            this.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }
        public GetSensitiveDataModelReferentialRelationsResult build() {
            final var _resultValue = new GetSensitiveDataModelReferentialRelationsResult();
            _resultValue.columnNames = columnNames;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isSensitive = isSensitive;
            _resultValue.objects = objects;
            _resultValue.referentialRelationCollections = referentialRelationCollections;
            _resultValue.relationTypes = relationTypes;
            _resultValue.schemaNames = schemaNames;
            _resultValue.sensitiveDataModelId = sensitiveDataModelId;
            return _resultValue;
        }
    }
}
