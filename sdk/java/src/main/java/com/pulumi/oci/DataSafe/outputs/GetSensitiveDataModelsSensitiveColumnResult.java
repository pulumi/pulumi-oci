// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveDataModelsSensitiveColumnConfidenceLevelDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSensitiveDataModelsSensitiveColumnResult {
    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    private List<String> appDefinedChildColumnKeys;
    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored.
     * 
     */
    private String appName;
    /**
     * @return The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    private List<String> columnGroups;
    /**
     * @return The name of the sensitive column.
     * 
     */
    private String columnName;
    /**
     * @return The confidence level of the sensitive column associated with the sensitive type. The confidence level of the discovered sensitive columns can be either HIGH, MEDIUM or LOW. The confidence level will be NONE for manually added sensitive columns.
     * 
     */
    private String confidenceLevel;
    /**
     * @return List containing maps as values. Example: `{&#34;Operations&#34;: [ {&#34;CostCenter&#34;: &#34;42&#34;} ] }`
     * 
     */
    private List<GetSensitiveDataModelsSensitiveColumnConfidenceLevelDetail> confidenceLevelDetails;
    /**
     * @return The data type of the sensitive column.
     * 
     */
    private String dataType;
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    private List<String> dbDefinedChildColumnKeys;
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    private String estimatedDataValueCount;
    private String id;
    /**
     * @return The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    private String key;
    /**
     * @return Details about the current state of the sensitive column.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    private String object;
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    private String objectType;
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    private List<String> parentColumnKeys;
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    private String relationType;
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    private List<String> sampleDataValues;
    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    private String schemaName;
    private String sensitiveColumnKey;
    /**
     * @return The OCID of the sensitive data model that contains the sensitive column.
     * 
     */
    private String sensitiveDataModelId;
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    private String sensitiveTypeId;
    /**
     * @return The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    private String source;
    /**
     * @return The current state of the sensitive column.
     * 
     */
    private String state;
    /**
     * @return The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive again.
     * 
     */
    private String status;
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    private String timeUpdated;

    private GetSensitiveDataModelsSensitiveColumnResult() {}
    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    public List<String> appDefinedChildColumnKeys() {
        return this.appDefinedChildColumnKeys;
    }
    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored.
     * 
     */
    public String appName() {
        return this.appName;
    }
    /**
     * @return The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    public List<String> columnGroups() {
        return this.columnGroups;
    }
    /**
     * @return The name of the sensitive column.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return The confidence level of the sensitive column associated with the sensitive type. The confidence level of the discovered sensitive columns can be either HIGH, MEDIUM or LOW. The confidence level will be NONE for manually added sensitive columns.
     * 
     */
    public String confidenceLevel() {
        return this.confidenceLevel;
    }
    /**
     * @return List containing maps as values. Example: `{&#34;Operations&#34;: [ {&#34;CostCenter&#34;: &#34;42&#34;} ] }`
     * 
     */
    public List<GetSensitiveDataModelsSensitiveColumnConfidenceLevelDetail> confidenceLevelDetails() {
        return this.confidenceLevelDetails;
    }
    /**
     * @return The data type of the sensitive column.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    public List<String> dbDefinedChildColumnKeys() {
        return this.dbDefinedChildColumnKeys;
    }
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    public String estimatedDataValueCount() {
        return this.estimatedDataValueCount;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Details about the current state of the sensitive column.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The database object that contains the sensitive column.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return The type of the database object that contains the sensitive column.
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    public List<String> parentColumnKeys() {
        return this.parentColumnKeys;
    }
    /**
     * @return The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     * 
     */
    public String relationType() {
        return this.relationType;
    }
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    public List<String> sampleDataValues() {
        return this.sampleDataValues;
    }
    /**
     * @return The database schema that contains the sensitive column.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    public String sensitiveColumnKey() {
        return this.sensitiveColumnKey;
    }
    /**
     * @return The OCID of the sensitive data model that contains the sensitive column.
     * 
     */
    public String sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }
    /**
     * @return The OCID of the sensitive type associated with the sensitive column.
     * 
     */
    public String sensitiveTypeId() {
        return this.sensitiveTypeId;
    }
    /**
     * @return The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return The current state of the sensitive column.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive again.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveDataModelsSensitiveColumnResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> appDefinedChildColumnKeys;
        private String appName;
        private List<String> columnGroups;
        private String columnName;
        private String confidenceLevel;
        private List<GetSensitiveDataModelsSensitiveColumnConfidenceLevelDetail> confidenceLevelDetails;
        private String dataType;
        private List<String> dbDefinedChildColumnKeys;
        private String estimatedDataValueCount;
        private String id;
        private String key;
        private String lifecycleDetails;
        private String object;
        private String objectType;
        private List<String> parentColumnKeys;
        private String relationType;
        private List<String> sampleDataValues;
        private String schemaName;
        private String sensitiveColumnKey;
        private String sensitiveDataModelId;
        private String sensitiveTypeId;
        private String source;
        private String state;
        private String status;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSensitiveDataModelsSensitiveColumnResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appDefinedChildColumnKeys = defaults.appDefinedChildColumnKeys;
    	      this.appName = defaults.appName;
    	      this.columnGroups = defaults.columnGroups;
    	      this.columnName = defaults.columnName;
    	      this.confidenceLevel = defaults.confidenceLevel;
    	      this.confidenceLevelDetails = defaults.confidenceLevelDetails;
    	      this.dataType = defaults.dataType;
    	      this.dbDefinedChildColumnKeys = defaults.dbDefinedChildColumnKeys;
    	      this.estimatedDataValueCount = defaults.estimatedDataValueCount;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.parentColumnKeys = defaults.parentColumnKeys;
    	      this.relationType = defaults.relationType;
    	      this.sampleDataValues = defaults.sampleDataValues;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveColumnKey = defaults.sensitiveColumnKey;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.source = defaults.source;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder appDefinedChildColumnKeys(List<String> appDefinedChildColumnKeys) {
            if (appDefinedChildColumnKeys == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "appDefinedChildColumnKeys");
            }
            this.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
            return this;
        }
        public Builder appDefinedChildColumnKeys(String... appDefinedChildColumnKeys) {
            return appDefinedChildColumnKeys(List.of(appDefinedChildColumnKeys));
        }
        @CustomType.Setter
        public Builder appName(String appName) {
            if (appName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "appName");
            }
            this.appName = appName;
            return this;
        }
        @CustomType.Setter
        public Builder columnGroups(List<String> columnGroups) {
            if (columnGroups == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "columnGroups");
            }
            this.columnGroups = columnGroups;
            return this;
        }
        public Builder columnGroups(String... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            if (columnName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "columnName");
            }
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder confidenceLevel(String confidenceLevel) {
            if (confidenceLevel == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "confidenceLevel");
            }
            this.confidenceLevel = confidenceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder confidenceLevelDetails(List<GetSensitiveDataModelsSensitiveColumnConfidenceLevelDetail> confidenceLevelDetails) {
            if (confidenceLevelDetails == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "confidenceLevelDetails");
            }
            this.confidenceLevelDetails = confidenceLevelDetails;
            return this;
        }
        public Builder confidenceLevelDetails(GetSensitiveDataModelsSensitiveColumnConfidenceLevelDetail... confidenceLevelDetails) {
            return confidenceLevelDetails(List.of(confidenceLevelDetails));
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder dbDefinedChildColumnKeys(List<String> dbDefinedChildColumnKeys) {
            if (dbDefinedChildColumnKeys == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "dbDefinedChildColumnKeys");
            }
            this.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
            return this;
        }
        public Builder dbDefinedChildColumnKeys(String... dbDefinedChildColumnKeys) {
            return dbDefinedChildColumnKeys(List.of(dbDefinedChildColumnKeys));
        }
        @CustomType.Setter
        public Builder estimatedDataValueCount(String estimatedDataValueCount) {
            if (estimatedDataValueCount == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "estimatedDataValueCount");
            }
            this.estimatedDataValueCount = estimatedDataValueCount;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(String objectType) {
            if (objectType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "objectType");
            }
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder parentColumnKeys(List<String> parentColumnKeys) {
            if (parentColumnKeys == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "parentColumnKeys");
            }
            this.parentColumnKeys = parentColumnKeys;
            return this;
        }
        public Builder parentColumnKeys(String... parentColumnKeys) {
            return parentColumnKeys(List.of(parentColumnKeys));
        }
        @CustomType.Setter
        public Builder relationType(String relationType) {
            if (relationType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "relationType");
            }
            this.relationType = relationType;
            return this;
        }
        @CustomType.Setter
        public Builder sampleDataValues(List<String> sampleDataValues) {
            if (sampleDataValues == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "sampleDataValues");
            }
            this.sampleDataValues = sampleDataValues;
            return this;
        }
        public Builder sampleDataValues(String... sampleDataValues) {
            return sampleDataValues(List.of(sampleDataValues));
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveColumnKey(String sensitiveColumnKey) {
            if (sensitiveColumnKey == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "sensitiveColumnKey");
            }
            this.sensitiveColumnKey = sensitiveColumnKey;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            if (sensitiveDataModelId == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "sensitiveDataModelId");
            }
            this.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(String sensitiveTypeId) {
            if (sensitiveTypeId == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "sensitiveTypeId");
            }
            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSensitiveDataModelsSensitiveColumnResult build() {
            final var _resultValue = new GetSensitiveDataModelsSensitiveColumnResult();
            _resultValue.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
            _resultValue.appName = appName;
            _resultValue.columnGroups = columnGroups;
            _resultValue.columnName = columnName;
            _resultValue.confidenceLevel = confidenceLevel;
            _resultValue.confidenceLevelDetails = confidenceLevelDetails;
            _resultValue.dataType = dataType;
            _resultValue.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
            _resultValue.estimatedDataValueCount = estimatedDataValueCount;
            _resultValue.id = id;
            _resultValue.key = key;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.object = object;
            _resultValue.objectType = objectType;
            _resultValue.parentColumnKeys = parentColumnKeys;
            _resultValue.relationType = relationType;
            _resultValue.sampleDataValues = sampleDataValues;
            _resultValue.schemaName = schemaName;
            _resultValue.sensitiveColumnKey = sensitiveColumnKey;
            _resultValue.sensitiveDataModelId = sensitiveDataModelId;
            _resultValue.sensitiveTypeId = sensitiveTypeId;
            _resultValue.source = source;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
