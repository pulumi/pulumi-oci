// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem {
    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    private List<String> appDefinedChildColumnKeys;
    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored.
     * 
     */
    private String appName;
    /**
     * @return The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    private List<String> columnGroups;
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    private String columnName;
    /**
     * @return A filter to return only the resources that match the specified data types.
     * 
     */
    private String dataType;
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    private List<String> dbDefinedChildColumnKeys;
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    private String estimatedDataValueCount;
    /**
     * @return The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    private String key;
    /**
     * @return Details about the current state of the sensitive column.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    private String object;
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    private String objectType;
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    private List<String> parentColumnKeys;
    /**
     * @return A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    private String relationType;
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    private List<String> sampleDataValues;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private String schemaName;
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    private String sensitiveDataModelId;
    /**
     * @return A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
     * 
     */
    private String sensitiveTypeId;
    /**
     * @return The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    private String source;
    /**
     * @return The current state of the sensitive column.
     * 
     */
    private String state;
    /**
     * @return A filter to return only the sensitive columns that match the specified status.
     * 
     */
    private String status;
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    private String timeUpdated;

    private GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem() {}
    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    public List<String> appDefinedChildColumnKeys() {
        return this.appDefinedChildColumnKeys;
    }
    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored.
     * 
     */
    public String appName() {
        return this.appName;
    }
    /**
     * @return The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    public List<String> columnGroups() {
        return this.columnGroups;
    }
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return A filter to return only the resources that match the specified data types.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    public List<String> dbDefinedChildColumnKeys() {
        return this.dbDefinedChildColumnKeys;
    }
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    public String estimatedDataValueCount() {
        return this.estimatedDataValueCount;
    }
    /**
     * @return The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Details about the current state of the sensitive column.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    public List<String> parentColumnKeys() {
        return this.parentColumnKeys;
    }
    /**
     * @return A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    public String relationType() {
        return this.relationType;
    }
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    public List<String> sampleDataValues() {
        return this.sampleDataValues;
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public String sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }
    /**
     * @return A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
     * 
     */
    public String sensitiveTypeId() {
        return this.sensitiveTypeId;
    }
    /**
     * @return The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return The current state of the sensitive column.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A filter to return only the sensitive columns that match the specified status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> appDefinedChildColumnKeys;
        private String appName;
        private List<String> columnGroups;
        private String columnName;
        private String dataType;
        private List<String> dbDefinedChildColumnKeys;
        private String estimatedDataValueCount;
        private String key;
        private String lifecycleDetails;
        private String object;
        private String objectType;
        private List<String> parentColumnKeys;
        private String relationType;
        private List<String> sampleDataValues;
        private String schemaName;
        private String sensitiveDataModelId;
        private String sensitiveTypeId;
        private String source;
        private String state;
        private String status;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appDefinedChildColumnKeys = defaults.appDefinedChildColumnKeys;
    	      this.appName = defaults.appName;
    	      this.columnGroups = defaults.columnGroups;
    	      this.columnName = defaults.columnName;
    	      this.dataType = defaults.dataType;
    	      this.dbDefinedChildColumnKeys = defaults.dbDefinedChildColumnKeys;
    	      this.estimatedDataValueCount = defaults.estimatedDataValueCount;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.parentColumnKeys = defaults.parentColumnKeys;
    	      this.relationType = defaults.relationType;
    	      this.sampleDataValues = defaults.sampleDataValues;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.source = defaults.source;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder appDefinedChildColumnKeys(List<String> appDefinedChildColumnKeys) {
            if (appDefinedChildColumnKeys == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "appDefinedChildColumnKeys");
            }
            this.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
            return this;
        }
        public Builder appDefinedChildColumnKeys(String... appDefinedChildColumnKeys) {
            return appDefinedChildColumnKeys(List.of(appDefinedChildColumnKeys));
        }
        @CustomType.Setter
        public Builder appName(String appName) {
            if (appName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "appName");
            }
            this.appName = appName;
            return this;
        }
        @CustomType.Setter
        public Builder columnGroups(List<String> columnGroups) {
            if (columnGroups == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "columnGroups");
            }
            this.columnGroups = columnGroups;
            return this;
        }
        public Builder columnGroups(String... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            if (columnName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "columnName");
            }
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder dbDefinedChildColumnKeys(List<String> dbDefinedChildColumnKeys) {
            if (dbDefinedChildColumnKeys == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "dbDefinedChildColumnKeys");
            }
            this.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
            return this;
        }
        public Builder dbDefinedChildColumnKeys(String... dbDefinedChildColumnKeys) {
            return dbDefinedChildColumnKeys(List.of(dbDefinedChildColumnKeys));
        }
        @CustomType.Setter
        public Builder estimatedDataValueCount(String estimatedDataValueCount) {
            if (estimatedDataValueCount == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "estimatedDataValueCount");
            }
            this.estimatedDataValueCount = estimatedDataValueCount;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(String objectType) {
            if (objectType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "objectType");
            }
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder parentColumnKeys(List<String> parentColumnKeys) {
            if (parentColumnKeys == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "parentColumnKeys");
            }
            this.parentColumnKeys = parentColumnKeys;
            return this;
        }
        public Builder parentColumnKeys(String... parentColumnKeys) {
            return parentColumnKeys(List.of(parentColumnKeys));
        }
        @CustomType.Setter
        public Builder relationType(String relationType) {
            if (relationType == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "relationType");
            }
            this.relationType = relationType;
            return this;
        }
        @CustomType.Setter
        public Builder sampleDataValues(List<String> sampleDataValues) {
            if (sampleDataValues == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "sampleDataValues");
            }
            this.sampleDataValues = sampleDataValues;
            return this;
        }
        public Builder sampleDataValues(String... sampleDataValues) {
            return sampleDataValues(List.of(sampleDataValues));
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            if (sensitiveDataModelId == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "sensitiveDataModelId");
            }
            this.sensitiveDataModelId = sensitiveDataModelId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(String sensitiveTypeId) {
            if (sensitiveTypeId == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "sensitiveTypeId");
            }
            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem build() {
            final var _resultValue = new GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem();
            _resultValue.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
            _resultValue.appName = appName;
            _resultValue.columnGroups = columnGroups;
            _resultValue.columnName = columnName;
            _resultValue.dataType = dataType;
            _resultValue.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
            _resultValue.estimatedDataValueCount = estimatedDataValueCount;
            _resultValue.key = key;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.object = object;
            _resultValue.objectType = objectType;
            _resultValue.parentColumnKeys = parentColumnKeys;
            _resultValue.relationType = relationType;
            _resultValue.sampleDataValues = sampleDataValues;
            _resultValue.schemaName = schemaName;
            _resultValue.sensitiveDataModelId = sensitiveDataModelId;
            _resultValue.sensitiveTypeId = sensitiveTypeId;
            _resultValue.source = source;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
