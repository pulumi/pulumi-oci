// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem {
    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    private @Nullable List<String> appDefinedChildColumnKeys;
    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored.
     * 
     */
    private @Nullable String appName;
    /**
     * @return The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    private @Nullable List<String> columnGroups;
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    private String columnName;
    /**
     * @return A filter to return only the resources that match the specified data types.
     * 
     */
    private @Nullable String dataType;
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    private @Nullable List<String> dbDefinedChildColumnKeys;
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    private @Nullable String estimatedDataValueCount;
    /**
     * @return The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    private @Nullable String key;
    /**
     * @return Details about the current state of the sensitive column.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    private String object;
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    private @Nullable String objectType;
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    private @Nullable List<String> parentColumnKeys;
    /**
     * @return A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    private @Nullable String relationType;
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    private @Nullable List<String> sampleDataValues;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private String schemaName;
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    private String sensitiveDataModelId;
    /**
     * @return A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
     * 
     */
    private @Nullable String sensitiveTypeId;
    /**
     * @return The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    private @Nullable String source;
    /**
     * @return The current state of the sensitive column.
     * 
     */
    private @Nullable String state;
    /**
     * @return A filter to return only the sensitive columns that match the specified status.
     * 
     */
    private @Nullable String status;
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    private @Nullable String timeUpdated;

    private GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem() {}
    /**
     * @return Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * 
     */
    public List<String> appDefinedChildColumnKeys() {
        return this.appDefinedChildColumnKeys == null ? List.of() : this.appDefinedChildColumnKeys;
    }
    /**
     * @return The name of the application associated with the sensitive column. It&#39;s useful when the application name is different from the schema name. Otherwise, it can be ignored.
     * 
     */
    public Optional<String> appName() {
        return Optional.ofNullable(this.appName);
    }
    /**
     * @return The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it&#39;s assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     * 
     */
    public List<String> columnGroups() {
        return this.columnGroups == null ? List.of() : this.columnGroups;
    }
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return A filter to return only the resources that match the specified data types.
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * 
     */
    public List<String> dbDefinedChildColumnKeys() {
        return this.dbDefinedChildColumnKeys == null ? List.of() : this.dbDefinedChildColumnKeys;
    }
    /**
     * @return The estimated number of data values the column has in the associated database.
     * 
     */
    public Optional<String> estimatedDataValueCount() {
        return Optional.ofNullable(this.estimatedDataValueCount);
    }
    /**
     * @return The unique key that identifies the sensitive column. It&#39;s numeric and unique within a sensitive data model.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Details about the current state of the sensitive column.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return A filter to return only items related to a specific object name.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return A filter to return only items related to a specific object type.
     * 
     */
    public Optional<String> objectType() {
        return Optional.ofNullable(this.objectType);
    }
    /**
     * @return Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
     * 
     */
    public List<String> parentColumnKeys() {
        return this.parentColumnKeys == null ? List.of() : this.parentColumnKeys;
    }
    /**
     * @return A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
     * 
     */
    public Optional<String> relationType() {
        return Optional.ofNullable(this.relationType);
    }
    /**
     * @return Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     * 
     */
    public List<String> sampleDataValues() {
        return this.sampleDataValues == null ? List.of() : this.sampleDataValues;
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return The OCID of the sensitive data model.
     * 
     */
    public String sensitiveDataModelId() {
        return this.sensitiveDataModelId;
    }
    /**
     * @return A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
     * 
     */
    public Optional<String> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }
    /**
     * @return The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return The current state of the sensitive column.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return A filter to return only the sensitive columns that match the specified status.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> appDefinedChildColumnKeys;
        private @Nullable String appName;
        private @Nullable List<String> columnGroups;
        private String columnName;
        private @Nullable String dataType;
        private @Nullable List<String> dbDefinedChildColumnKeys;
        private @Nullable String estimatedDataValueCount;
        private @Nullable String key;
        private @Nullable String lifecycleDetails;
        private String object;
        private @Nullable String objectType;
        private @Nullable List<String> parentColumnKeys;
        private @Nullable String relationType;
        private @Nullable List<String> sampleDataValues;
        private String schemaName;
        private String sensitiveDataModelId;
        private @Nullable String sensitiveTypeId;
        private @Nullable String source;
        private @Nullable String state;
        private @Nullable String status;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        public Builder() {}
        public Builder(GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appDefinedChildColumnKeys = defaults.appDefinedChildColumnKeys;
    	      this.appName = defaults.appName;
    	      this.columnGroups = defaults.columnGroups;
    	      this.columnName = defaults.columnName;
    	      this.dataType = defaults.dataType;
    	      this.dbDefinedChildColumnKeys = defaults.dbDefinedChildColumnKeys;
    	      this.estimatedDataValueCount = defaults.estimatedDataValueCount;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.object = defaults.object;
    	      this.objectType = defaults.objectType;
    	      this.parentColumnKeys = defaults.parentColumnKeys;
    	      this.relationType = defaults.relationType;
    	      this.sampleDataValues = defaults.sampleDataValues;
    	      this.schemaName = defaults.schemaName;
    	      this.sensitiveDataModelId = defaults.sensitiveDataModelId;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.source = defaults.source;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder appDefinedChildColumnKeys(@Nullable List<String> appDefinedChildColumnKeys) {
            this.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
            return this;
        }
        public Builder appDefinedChildColumnKeys(String... appDefinedChildColumnKeys) {
            return appDefinedChildColumnKeys(List.of(appDefinedChildColumnKeys));
        }
        @CustomType.Setter
        public Builder appName(@Nullable String appName) {
            this.appName = appName;
            return this;
        }
        @CustomType.Setter
        public Builder columnGroups(@Nullable List<String> columnGroups) {
            this.columnGroups = columnGroups;
            return this;
        }
        public Builder columnGroups(String... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            this.columnName = Objects.requireNonNull(columnName);
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder dbDefinedChildColumnKeys(@Nullable List<String> dbDefinedChildColumnKeys) {
            this.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
            return this;
        }
        public Builder dbDefinedChildColumnKeys(String... dbDefinedChildColumnKeys) {
            return dbDefinedChildColumnKeys(List.of(dbDefinedChildColumnKeys));
        }
        @CustomType.Setter
        public Builder estimatedDataValueCount(@Nullable String estimatedDataValueCount) {
            this.estimatedDataValueCount = estimatedDataValueCount;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            this.object = Objects.requireNonNull(object);
            return this;
        }
        @CustomType.Setter
        public Builder objectType(@Nullable String objectType) {
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder parentColumnKeys(@Nullable List<String> parentColumnKeys) {
            this.parentColumnKeys = parentColumnKeys;
            return this;
        }
        public Builder parentColumnKeys(String... parentColumnKeys) {
            return parentColumnKeys(List.of(parentColumnKeys));
        }
        @CustomType.Setter
        public Builder relationType(@Nullable String relationType) {
            this.relationType = relationType;
            return this;
        }
        @CustomType.Setter
        public Builder sampleDataValues(@Nullable List<String> sampleDataValues) {
            this.sampleDataValues = sampleDataValues;
            return this;
        }
        public Builder sampleDataValues(String... sampleDataValues) {
            return sampleDataValues(List.of(sampleDataValues));
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            this.schemaName = Objects.requireNonNull(schemaName);
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveDataModelId(String sensitiveDataModelId) {
            this.sensitiveDataModelId = Objects.requireNonNull(sensitiveDataModelId);
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(@Nullable String sensitiveTypeId) {
            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem build() {
            final var o = new GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem();
            o.appDefinedChildColumnKeys = appDefinedChildColumnKeys;
            o.appName = appName;
            o.columnGroups = columnGroups;
            o.columnName = columnName;
            o.dataType = dataType;
            o.dbDefinedChildColumnKeys = dbDefinedChildColumnKeys;
            o.estimatedDataValueCount = estimatedDataValueCount;
            o.key = key;
            o.lifecycleDetails = lifecycleDetails;
            o.object = object;
            o.objectType = objectType;
            o.parentColumnKeys = parentColumnKeys;
            o.relationType = relationType;
            o.sampleDataValues = sampleDataValues;
            o.schemaName = schemaName;
            o.sensitiveDataModelId = sensitiveDataModelId;
            o.sensitiveTypeId = sensitiveTypeId;
            o.source = source;
            o.state = state;
            o.status = status;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
