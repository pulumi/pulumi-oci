// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveTypesFilter;
import com.pulumi.oci.DataSafe.outputs.GetSensitiveTypesSensitiveTypeCollection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSensitiveTypesResult {
    private @Nullable String accessLevel;
    /**
     * @return The OCID of the compartment that contains the sensitive type.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    /**
     * @return The OCID of the library masking format that should be used to mask the sensitive columns associated with the sensitive type.
     * 
     */
    private @Nullable String defaultMaskingFormatId;
    /**
     * @return The display name of the sensitive type.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The entity type. It can be either a sensitive type with regular expressions or a sensitive category used for grouping similar sensitive types.
     * 
     */
    private @Nullable String entityType;
    private @Nullable List<GetSensitiveTypesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return The OCID of the parent sensitive category.
     * 
     */
    private @Nullable String parentCategoryId;
    /**
     * @return The list of sensitive_type_collection.
     * 
     */
    private @Nullable List<GetSensitiveTypesSensitiveTypeCollection> sensitiveTypeCollections;
    private @Nullable String sensitiveTypeId;
    private @Nullable String sensitiveTypeSource;
    /**
     * @return The current state of the sensitive type.
     * 
     */
    private @Nullable String state;
    private @Nullable String timeCreatedGreaterThanOrEqualTo;
    private @Nullable String timeCreatedLessThan;

    private GetSensitiveTypesResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The OCID of the compartment that contains the sensitive type.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    /**
     * @return The OCID of the library masking format that should be used to mask the sensitive columns associated with the sensitive type.
     * 
     */
    public Optional<String> defaultMaskingFormatId() {
        return Optional.ofNullable(this.defaultMaskingFormatId);
    }
    /**
     * @return The display name of the sensitive type.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The entity type. It can be either a sensitive type with regular expressions or a sensitive category used for grouping similar sensitive types.
     * 
     */
    public Optional<String> entityType() {
        return Optional.ofNullable(this.entityType);
    }
    public List<GetSensitiveTypesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The OCID of the parent sensitive category.
     * 
     */
    public Optional<String> parentCategoryId() {
        return Optional.ofNullable(this.parentCategoryId);
    }
    /**
     * @return The list of sensitive_type_collection.
     * 
     */
    public List<GetSensitiveTypesSensitiveTypeCollection> sensitiveTypeCollections() {
        return this.sensitiveTypeCollections == null ? List.of() : this.sensitiveTypeCollections;
    }
    public Optional<String> sensitiveTypeId() {
        return Optional.ofNullable(this.sensitiveTypeId);
    }
    public Optional<String> sensitiveTypeSource() {
        return Optional.ofNullable(this.sensitiveTypeSource);
    }
    /**
     * @return The current state of the sensitive type.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> timeCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeCreatedGreaterThanOrEqualTo);
    }
    public Optional<String> timeCreatedLessThan() {
        return Optional.ofNullable(this.timeCreatedLessThan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveTypesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String defaultMaskingFormatId;
        private @Nullable String displayName;
        private @Nullable String entityType;
        private @Nullable List<GetSensitiveTypesFilter> filters;
        private @Nullable String id;
        private @Nullable String parentCategoryId;
        private @Nullable List<GetSensitiveTypesSensitiveTypeCollection> sensitiveTypeCollections;
        private @Nullable String sensitiveTypeId;
        private @Nullable String sensitiveTypeSource;
        private @Nullable String state;
        private @Nullable String timeCreatedGreaterThanOrEqualTo;
        private @Nullable String timeCreatedLessThan;
        public Builder() {}
        public Builder(GetSensitiveTypesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.defaultMaskingFormatId = defaults.defaultMaskingFormatId;
    	      this.displayName = defaults.displayName;
    	      this.entityType = defaults.entityType;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.parentCategoryId = defaults.parentCategoryId;
    	      this.sensitiveTypeCollections = defaults.sensitiveTypeCollections;
    	      this.sensitiveTypeId = defaults.sensitiveTypeId;
    	      this.sensitiveTypeSource = defaults.sensitiveTypeSource;
    	      this.state = defaults.state;
    	      this.timeCreatedGreaterThanOrEqualTo = defaults.timeCreatedGreaterThanOrEqualTo;
    	      this.timeCreatedLessThan = defaults.timeCreatedLessThan;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder defaultMaskingFormatId(@Nullable String defaultMaskingFormatId) {
            this.defaultMaskingFormatId = defaultMaskingFormatId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder entityType(@Nullable String entityType) {
            this.entityType = entityType;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSensitiveTypesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSensitiveTypesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder parentCategoryId(@Nullable String parentCategoryId) {
            this.parentCategoryId = parentCategoryId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeCollections(@Nullable List<GetSensitiveTypesSensitiveTypeCollection> sensitiveTypeCollections) {
            this.sensitiveTypeCollections = sensitiveTypeCollections;
            return this;
        }
        public Builder sensitiveTypeCollections(GetSensitiveTypesSensitiveTypeCollection... sensitiveTypeCollections) {
            return sensitiveTypeCollections(List.of(sensitiveTypeCollections));
        }
        @CustomType.Setter
        public Builder sensitiveTypeId(@Nullable String sensitiveTypeId) {
            this.sensitiveTypeId = sensitiveTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveTypeSource(@Nullable String sensitiveTypeSource) {
            this.sensitiveTypeSource = sensitiveTypeSource;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreatedGreaterThanOrEqualTo(@Nullable String timeCreatedGreaterThanOrEqualTo) {
            this.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreatedLessThan(@Nullable String timeCreatedLessThan) {
            this.timeCreatedLessThan = timeCreatedLessThan;
            return this;
        }
        public GetSensitiveTypesResult build() {
            final var o = new GetSensitiveTypesResult();
            o.accessLevel = accessLevel;
            o.compartmentId = compartmentId;
            o.compartmentIdInSubtree = compartmentIdInSubtree;
            o.defaultMaskingFormatId = defaultMaskingFormatId;
            o.displayName = displayName;
            o.entityType = entityType;
            o.filters = filters;
            o.id = id;
            o.parentCategoryId = parentCategoryId;
            o.sensitiveTypeCollections = sensitiveTypeCollections;
            o.sensitiveTypeId = sensitiveTypeId;
            o.sensitiveTypeSource = sensitiveTypeSource;
            o.state = state;
            o.timeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            o.timeCreatedLessThan = timeCreatedLessThan;
            return o;
        }
    }
}
