// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSqlCollectionResult {
    /**
     * @return The OCID of the compartment containing the SQL collection.
     * 
     */
    private String compartmentId;
    /**
     * @return The database user name.
     * 
     */
    private String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The description of the SQL collection.
     * 
     */
    private String description;
    /**
     * @return The display name of the SQL collection.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    private Boolean generateSqlFirewallPolicyTrigger;
    /**
     * @return The OCID of the SQL collection.
     * 
     */
    private String id;
    /**
     * @return Details about the current state of the SQL collection in Data Safe.
     * 
     */
    private String lifecycleDetails;
    private Boolean purgeLogsTrigger;
    private Boolean refreshLogInsightsTrigger;
    private String sqlCollectionId;
    /**
     * @return Specifies the level of SQL that will be collected. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    private String sqlLevel;
    private Boolean startTrigger;
    /**
     * @return The current state of the SQL collection.
     * 
     */
    private String state;
    /**
     * @return Specifies if the status of the SqlCollection. Enabled indicates that the collecting is in progress.
     * 
     */
    private String status;
    private Boolean stopTrigger;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The OCID of the target corresponding to the security policy deployment.
     * 
     */
    private String targetId;
    /**
     * @return The time that the SQL collection was created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The timestamp of the most recent SqlCollection start operation, in the format defined by RFC3339.
     * 
     */
    private String timeLastStarted;
    /**
     * @return The timestamp of the most recent SqlCollection stop operation, in the format defined by RFC3339.
     * 
     */
    private String timeLastStopped;
    /**
     * @return The last date and time the SQL collection was updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetSqlCollectionResult() {}
    /**
     * @return The OCID of the compartment containing the SQL collection.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The database user name.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the SQL collection.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the SQL collection.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    public Boolean generateSqlFirewallPolicyTrigger() {
        return this.generateSqlFirewallPolicyTrigger;
    }
    /**
     * @return The OCID of the SQL collection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details about the current state of the SQL collection in Data Safe.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public Boolean purgeLogsTrigger() {
        return this.purgeLogsTrigger;
    }
    public Boolean refreshLogInsightsTrigger() {
        return this.refreshLogInsightsTrigger;
    }
    public String sqlCollectionId() {
        return this.sqlCollectionId;
    }
    /**
     * @return Specifies the level of SQL that will be collected. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    public String sqlLevel() {
        return this.sqlLevel;
    }
    public Boolean startTrigger() {
        return this.startTrigger;
    }
    /**
     * @return The current state of the SQL collection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Specifies if the status of the SqlCollection. Enabled indicates that the collecting is in progress.
     * 
     */
    public String status() {
        return this.status;
    }
    public Boolean stopTrigger() {
        return this.stopTrigger;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The OCID of the target corresponding to the security policy deployment.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The time that the SQL collection was created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The timestamp of the most recent SqlCollection start operation, in the format defined by RFC3339.
     * 
     */
    public String timeLastStarted() {
        return this.timeLastStarted;
    }
    /**
     * @return The timestamp of the most recent SqlCollection stop operation, in the format defined by RFC3339.
     * 
     */
    public String timeLastStopped() {
        return this.timeLastStopped;
    }
    /**
     * @return The last date and time the SQL collection was updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlCollectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String dbUserName;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private Boolean generateSqlFirewallPolicyTrigger;
        private String id;
        private String lifecycleDetails;
        private Boolean purgeLogsTrigger;
        private Boolean refreshLogInsightsTrigger;
        private String sqlCollectionId;
        private String sqlLevel;
        private Boolean startTrigger;
        private String state;
        private String status;
        private Boolean stopTrigger;
        private Map<String,Object> systemTags;
        private String targetId;
        private String timeCreated;
        private String timeLastStarted;
        private String timeLastStopped;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSqlCollectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.generateSqlFirewallPolicyTrigger = defaults.generateSqlFirewallPolicyTrigger;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.purgeLogsTrigger = defaults.purgeLogsTrigger;
    	      this.refreshLogInsightsTrigger = defaults.refreshLogInsightsTrigger;
    	      this.sqlCollectionId = defaults.sqlCollectionId;
    	      this.sqlLevel = defaults.sqlLevel;
    	      this.startTrigger = defaults.startTrigger;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.stopTrigger = defaults.stopTrigger;
    	      this.systemTags = defaults.systemTags;
    	      this.targetId = defaults.targetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastStarted = defaults.timeLastStarted;
    	      this.timeLastStopped = defaults.timeLastStopped;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(String dbUserName) {
            this.dbUserName = Objects.requireNonNull(dbUserName);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder generateSqlFirewallPolicyTrigger(Boolean generateSqlFirewallPolicyTrigger) {
            this.generateSqlFirewallPolicyTrigger = Objects.requireNonNull(generateSqlFirewallPolicyTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder purgeLogsTrigger(Boolean purgeLogsTrigger) {
            this.purgeLogsTrigger = Objects.requireNonNull(purgeLogsTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder refreshLogInsightsTrigger(Boolean refreshLogInsightsTrigger) {
            this.refreshLogInsightsTrigger = Objects.requireNonNull(refreshLogInsightsTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder sqlCollectionId(String sqlCollectionId) {
            this.sqlCollectionId = Objects.requireNonNull(sqlCollectionId);
            return this;
        }
        @CustomType.Setter
        public Builder sqlLevel(String sqlLevel) {
            this.sqlLevel = Objects.requireNonNull(sqlLevel);
            return this;
        }
        @CustomType.Setter
        public Builder startTrigger(Boolean startTrigger) {
            this.startTrigger = Objects.requireNonNull(startTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder stopTrigger(Boolean stopTrigger) {
            this.stopTrigger = Objects.requireNonNull(stopTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStarted(String timeLastStarted) {
            this.timeLastStarted = Objects.requireNonNull(timeLastStarted);
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStopped(String timeLastStopped) {
            this.timeLastStopped = Objects.requireNonNull(timeLastStopped);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetSqlCollectionResult build() {
            final var o = new GetSqlCollectionResult();
            o.compartmentId = compartmentId;
            o.dbUserName = dbUserName;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.generateSqlFirewallPolicyTrigger = generateSqlFirewallPolicyTrigger;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.purgeLogsTrigger = purgeLogsTrigger;
            o.refreshLogInsightsTrigger = refreshLogInsightsTrigger;
            o.sqlCollectionId = sqlCollectionId;
            o.sqlLevel = sqlLevel;
            o.startTrigger = startTrigger;
            o.state = state;
            o.status = status;
            o.stopTrigger = stopTrigger;
            o.systemTags = systemTags;
            o.targetId = targetId;
            o.timeCreated = timeCreated;
            o.timeLastStarted = timeLastStarted;
            o.timeLastStopped = timeLastStopped;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
