// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSqlCollectionResult {
    /**
     * @return The OCID of the compartment containing the SQL collection.
     * 
     */
    private String compartmentId;
    /**
     * @return The database user name.
     * 
     */
    private String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The description of the SQL collection.
     * 
     */
    private String description;
    /**
     * @return The display name of the SQL collection.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    private Boolean generateSqlFirewallPolicyTrigger;
    /**
     * @return The OCID of the SQL collection.
     * 
     */
    private String id;
    /**
     * @return Details about the current state of the SQL collection in Data Safe.
     * 
     */
    private String lifecycleDetails;
    private Boolean purgeLogsTrigger;
    private Boolean refreshLogInsightsTrigger;
    private String sqlCollectionId;
    /**
     * @return Specifies the level of SQL that will be collected. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    private String sqlLevel;
    private Boolean startTrigger;
    /**
     * @return The current state of the SQL collection.
     * 
     */
    private String state;
    /**
     * @return Specifies if the status of the SqlCollection. Enabled indicates that the collecting is in progress.
     * 
     */
    private String status;
    private Boolean stopTrigger;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The OCID of the target corresponding to the security policy deployment.
     * 
     */
    private String targetId;
    /**
     * @return The time that the SQL collection was created, in the format defined by RFC3339.
     * 
     */
    private String timeCreated;
    /**
     * @return The timestamp of the most recent SqlCollection start operation, in the format defined by RFC3339.
     * 
     */
    private String timeLastStarted;
    /**
     * @return The timestamp of the most recent SqlCollection stop operation, in the format defined by RFC3339.
     * 
     */
    private String timeLastStopped;
    /**
     * @return The last date and time the SQL collection was updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;

    private GetSqlCollectionResult() {}
    /**
     * @return The OCID of the compartment containing the SQL collection.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The database user name.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the SQL collection.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the SQL collection.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    public Boolean generateSqlFirewallPolicyTrigger() {
        return this.generateSqlFirewallPolicyTrigger;
    }
    /**
     * @return The OCID of the SQL collection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Details about the current state of the SQL collection in Data Safe.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public Boolean purgeLogsTrigger() {
        return this.purgeLogsTrigger;
    }
    public Boolean refreshLogInsightsTrigger() {
        return this.refreshLogInsightsTrigger;
    }
    public String sqlCollectionId() {
        return this.sqlCollectionId;
    }
    /**
     * @return Specifies the level of SQL that will be collected. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    public String sqlLevel() {
        return this.sqlLevel;
    }
    public Boolean startTrigger() {
        return this.startTrigger;
    }
    /**
     * @return The current state of the SQL collection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Specifies if the status of the SqlCollection. Enabled indicates that the collecting is in progress.
     * 
     */
    public String status() {
        return this.status;
    }
    public Boolean stopTrigger() {
        return this.stopTrigger;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The OCID of the target corresponding to the security policy deployment.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The time that the SQL collection was created, in the format defined by RFC3339.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The timestamp of the most recent SqlCollection start operation, in the format defined by RFC3339.
     * 
     */
    public String timeLastStarted() {
        return this.timeLastStarted;
    }
    /**
     * @return The timestamp of the most recent SqlCollection stop operation, in the format defined by RFC3339.
     * 
     */
    public String timeLastStopped() {
        return this.timeLastStopped;
    }
    /**
     * @return The last date and time the SQL collection was updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlCollectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String dbUserName;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private Boolean generateSqlFirewallPolicyTrigger;
        private String id;
        private String lifecycleDetails;
        private Boolean purgeLogsTrigger;
        private Boolean refreshLogInsightsTrigger;
        private String sqlCollectionId;
        private String sqlLevel;
        private Boolean startTrigger;
        private String state;
        private String status;
        private Boolean stopTrigger;
        private Map<String,String> systemTags;
        private String targetId;
        private String timeCreated;
        private String timeLastStarted;
        private String timeLastStopped;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSqlCollectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.generateSqlFirewallPolicyTrigger = defaults.generateSqlFirewallPolicyTrigger;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.purgeLogsTrigger = defaults.purgeLogsTrigger;
    	      this.refreshLogInsightsTrigger = defaults.refreshLogInsightsTrigger;
    	      this.sqlCollectionId = defaults.sqlCollectionId;
    	      this.sqlLevel = defaults.sqlLevel;
    	      this.startTrigger = defaults.startTrigger;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.stopTrigger = defaults.stopTrigger;
    	      this.systemTags = defaults.systemTags;
    	      this.targetId = defaults.targetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastStarted = defaults.timeLastStarted;
    	      this.timeLastStopped = defaults.timeLastStopped;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(String dbUserName) {
            if (dbUserName == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "dbUserName");
            }
            this.dbUserName = dbUserName;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder generateSqlFirewallPolicyTrigger(Boolean generateSqlFirewallPolicyTrigger) {
            if (generateSqlFirewallPolicyTrigger == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "generateSqlFirewallPolicyTrigger");
            }
            this.generateSqlFirewallPolicyTrigger = generateSqlFirewallPolicyTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder purgeLogsTrigger(Boolean purgeLogsTrigger) {
            if (purgeLogsTrigger == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "purgeLogsTrigger");
            }
            this.purgeLogsTrigger = purgeLogsTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder refreshLogInsightsTrigger(Boolean refreshLogInsightsTrigger) {
            if (refreshLogInsightsTrigger == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "refreshLogInsightsTrigger");
            }
            this.refreshLogInsightsTrigger = refreshLogInsightsTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder sqlCollectionId(String sqlCollectionId) {
            if (sqlCollectionId == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "sqlCollectionId");
            }
            this.sqlCollectionId = sqlCollectionId;
            return this;
        }
        @CustomType.Setter
        public Builder sqlLevel(String sqlLevel) {
            if (sqlLevel == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "sqlLevel");
            }
            this.sqlLevel = sqlLevel;
            return this;
        }
        @CustomType.Setter
        public Builder startTrigger(Boolean startTrigger) {
            if (startTrigger == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "startTrigger");
            }
            this.startTrigger = startTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder stopTrigger(Boolean stopTrigger) {
            if (stopTrigger == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "stopTrigger");
            }
            this.stopTrigger = stopTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStarted(String timeLastStarted) {
            if (timeLastStarted == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "timeLastStarted");
            }
            this.timeLastStarted = timeLastStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastStopped(String timeLastStopped) {
            if (timeLastStopped == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "timeLastStopped");
            }
            this.timeLastStopped = timeLastStopped;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSqlCollectionResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSqlCollectionResult build() {
            final var _resultValue = new GetSqlCollectionResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.dbUserName = dbUserName;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.generateSqlFirewallPolicyTrigger = generateSqlFirewallPolicyTrigger;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.purgeLogsTrigger = purgeLogsTrigger;
            _resultValue.refreshLogInsightsTrigger = refreshLogInsightsTrigger;
            _resultValue.sqlCollectionId = sqlCollectionId;
            _resultValue.sqlLevel = sqlLevel;
            _resultValue.startTrigger = startTrigger;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.stopTrigger = stopTrigger;
            _resultValue.systemTags = systemTags;
            _resultValue.targetId = targetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastStarted = timeLastStarted;
            _resultValue.timeLastStopped = timeLastStopped;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
