// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem {
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    private String currentUser;
    /**
     * @return The database user name.
     * 
     */
    private String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The description of the SQL Firewall allowed SQL.
     * 
     */
    private String description;
    /**
     * @return The display name of the SQL Firewall allowed SQL.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the SQL Firewall allowed SQL.
     * 
     */
    private String id;
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    private List<String> sqlAccessedObjects;
    /**
     * @return The OCID of the SQL Firewall policy corresponding to the SQL Firewall allowed SQL.
     * 
     */
    private String sqlFirewallPolicyId;
    /**
     * @return Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    private String sqlLevel;
    /**
     * @return The SQL text of the SQL Firewall allowed SQL.
     * 
     */
    private String sqlText;
    /**
     * @return The current state of the SQL Firewall allowed SQL.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time the the SQL Firewall allowed SQL was collected from the target database, in the format defined by RFC3339.
     * 
     */
    private String timeCollected;
    /**
     * @return The last date and time the SQL Firewall allowed SQL was updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;
    /**
     * @return Version of the associated SQL Firewall policy. This identifies whether the allowed SQLs were added in the same batch or not.
     * 
     */
    private Double version;

    private GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem() {}
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    public String currentUser() {
        return this.currentUser;
    }
    /**
     * @return The database user name.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the SQL Firewall allowed SQL.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the SQL Firewall allowed SQL.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the SQL Firewall allowed SQL.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    public List<String> sqlAccessedObjects() {
        return this.sqlAccessedObjects;
    }
    /**
     * @return The OCID of the SQL Firewall policy corresponding to the SQL Firewall allowed SQL.
     * 
     */
    public String sqlFirewallPolicyId() {
        return this.sqlFirewallPolicyId;
    }
    /**
     * @return Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    public String sqlLevel() {
        return this.sqlLevel;
    }
    /**
     * @return The SQL text of the SQL Firewall allowed SQL.
     * 
     */
    public String sqlText() {
        return this.sqlText;
    }
    /**
     * @return The current state of the SQL Firewall allowed SQL.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the SQL Firewall allowed SQL was collected from the target database, in the format defined by RFC3339.
     * 
     */
    public String timeCollected() {
        return this.timeCollected;
    }
    /**
     * @return The last date and time the SQL Firewall allowed SQL was updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Version of the associated SQL Firewall policy. This identifies whether the allowed SQLs were added in the same batch or not.
     * 
     */
    public Double version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String currentUser;
        private String dbUserName;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<String> sqlAccessedObjects;
        private String sqlFirewallPolicyId;
        private String sqlLevel;
        private String sqlText;
        private String state;
        private Map<String,String> systemTags;
        private String timeCollected;
        private String timeUpdated;
        private Double version;
        public Builder() {}
        public Builder(GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentUser = defaults.currentUser;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.sqlAccessedObjects = defaults.sqlAccessedObjects;
    	      this.sqlFirewallPolicyId = defaults.sqlFirewallPolicyId;
    	      this.sqlLevel = defaults.sqlLevel;
    	      this.sqlText = defaults.sqlText;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCollected = defaults.timeCollected;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currentUser(String currentUser) {
            if (currentUser == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "currentUser");
            }
            this.currentUser = currentUser;
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(String dbUserName) {
            if (dbUserName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "dbUserName");
            }
            this.dbUserName = dbUserName;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder sqlAccessedObjects(List<String> sqlAccessedObjects) {
            if (sqlAccessedObjects == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "sqlAccessedObjects");
            }
            this.sqlAccessedObjects = sqlAccessedObjects;
            return this;
        }
        public Builder sqlAccessedObjects(String... sqlAccessedObjects) {
            return sqlAccessedObjects(List.of(sqlAccessedObjects));
        }
        @CustomType.Setter
        public Builder sqlFirewallPolicyId(String sqlFirewallPolicyId) {
            if (sqlFirewallPolicyId == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "sqlFirewallPolicyId");
            }
            this.sqlFirewallPolicyId = sqlFirewallPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder sqlLevel(String sqlLevel) {
            if (sqlLevel == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "sqlLevel");
            }
            this.sqlLevel = sqlLevel;
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(String sqlText) {
            if (sqlText == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "sqlText");
            }
            this.sqlText = sqlText;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCollected(String timeCollected) {
            if (timeCollected == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "timeCollected");
            }
            this.timeCollected = timeCollected;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(Double version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        public GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem build() {
            final var _resultValue = new GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.currentUser = currentUser;
            _resultValue.dbUserName = dbUserName;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.sqlAccessedObjects = sqlAccessedObjects;
            _resultValue.sqlFirewallPolicyId = sqlFirewallPolicyId;
            _resultValue.sqlLevel = sqlLevel;
            _resultValue.sqlText = sqlText;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCollected = timeCollected;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
