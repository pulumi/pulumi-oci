// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem {
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    private String currentUser;
    /**
     * @return The database user name.
     * 
     */
    private String dbUserName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The description of the SQL firewall allowed SQL.
     * 
     */
    private String description;
    /**
     * @return The display name of the SQL firewall allowed SQL.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the SQL firewall allowed SQL.
     * 
     */
    private String id;
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    private List<String> sqlAccessedObjects;
    /**
     * @return The OCID of the SQL firewall policy corresponding to the SQL firewall allowed SQL.
     * 
     */
    private String sqlFirewallPolicyId;
    /**
     * @return Specifies the level of SQL included for this SQL firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    private String sqlLevel;
    /**
     * @return The SQL text of the SQL firewall allowed SQL.
     * 
     */
    private String sqlText;
    /**
     * @return The current state of the SQL firewall allowed SQL.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the the SQL firewall allowed SQL was collected from the target database, in the format defined by RFC3339.
     * 
     */
    private String timeCollected;
    /**
     * @return The last date and time the SQL firewall allowed SQL was updated, in the format defined by RFC3339.
     * 
     */
    private String timeUpdated;
    /**
     * @return Version of the associated SQL firewall policy. This identifies whether the allowed SQLs were added in the same batch or not.
     * 
     */
    private Double version;

    private GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem() {}
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    public String currentUser() {
        return this.currentUser;
    }
    /**
     * @return The database user name.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The description of the SQL firewall allowed SQL.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the SQL firewall allowed SQL.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the SQL firewall allowed SQL.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    public List<String> sqlAccessedObjects() {
        return this.sqlAccessedObjects;
    }
    /**
     * @return The OCID of the SQL firewall policy corresponding to the SQL firewall allowed SQL.
     * 
     */
    public String sqlFirewallPolicyId() {
        return this.sqlFirewallPolicyId;
    }
    /**
     * @return Specifies the level of SQL included for this SQL firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    public String sqlLevel() {
        return this.sqlLevel;
    }
    /**
     * @return The SQL text of the SQL firewall allowed SQL.
     * 
     */
    public String sqlText() {
        return this.sqlText;
    }
    /**
     * @return The current state of the SQL firewall allowed SQL.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the SQL firewall allowed SQL was collected from the target database, in the format defined by RFC3339.
     * 
     */
    public String timeCollected() {
        return this.timeCollected;
    }
    /**
     * @return The last date and time the SQL firewall allowed SQL was updated, in the format defined by RFC3339.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Version of the associated SQL firewall policy. This identifies whether the allowed SQLs were added in the same batch or not.
     * 
     */
    public Double version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String currentUser;
        private String dbUserName;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<String> sqlAccessedObjects;
        private String sqlFirewallPolicyId;
        private String sqlLevel;
        private String sqlText;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCollected;
        private String timeUpdated;
        private Double version;
        public Builder() {}
        public Builder(GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentUser = defaults.currentUser;
    	      this.dbUserName = defaults.dbUserName;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.sqlAccessedObjects = defaults.sqlAccessedObjects;
    	      this.sqlFirewallPolicyId = defaults.sqlFirewallPolicyId;
    	      this.sqlLevel = defaults.sqlLevel;
    	      this.sqlText = defaults.sqlText;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCollected = defaults.timeCollected;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder currentUser(String currentUser) {
            this.currentUser = Objects.requireNonNull(currentUser);
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(String dbUserName) {
            this.dbUserName = Objects.requireNonNull(dbUserName);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder sqlAccessedObjects(List<String> sqlAccessedObjects) {
            this.sqlAccessedObjects = Objects.requireNonNull(sqlAccessedObjects);
            return this;
        }
        public Builder sqlAccessedObjects(String... sqlAccessedObjects) {
            return sqlAccessedObjects(List.of(sqlAccessedObjects));
        }
        @CustomType.Setter
        public Builder sqlFirewallPolicyId(String sqlFirewallPolicyId) {
            this.sqlFirewallPolicyId = Objects.requireNonNull(sqlFirewallPolicyId);
            return this;
        }
        @CustomType.Setter
        public Builder sqlLevel(String sqlLevel) {
            this.sqlLevel = Objects.requireNonNull(sqlLevel);
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(String sqlText) {
            this.sqlText = Objects.requireNonNull(sqlText);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCollected(String timeCollected) {
            this.timeCollected = Objects.requireNonNull(timeCollected);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder version(Double version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem build() {
            final var o = new GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItem();
            o.compartmentId = compartmentId;
            o.currentUser = currentUser;
            o.dbUserName = dbUserName;
            o.definedTags = definedTags;
            o.description = description;
            o.displayName = displayName;
            o.freeformTags = freeformTags;
            o.id = id;
            o.sqlAccessedObjects = sqlAccessedObjects;
            o.sqlFirewallPolicyId = sqlFirewallPolicyId;
            o.sqlLevel = sqlLevel;
            o.sqlText = sqlText;
            o.state = state;
            o.systemTags = systemTags;
            o.timeCollected = timeCollected;
            o.timeUpdated = timeUpdated;
            o.version = version;
            return o;
        }
    }
}
