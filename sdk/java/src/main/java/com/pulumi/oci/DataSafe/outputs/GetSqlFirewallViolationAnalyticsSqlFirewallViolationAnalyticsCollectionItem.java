// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem {
    /**
     * @return The details of the aggregation dimensions used for summarizing SQL violations.
     * 
     */
    private List<GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension> dimensions;
    /**
     * @return The display name of aggregation field.
     * 
     */
    private String displayName;
    /**
     * @return The name of the aggregation.
     * 
     */
    private String metricName;
    /**
     * @return Total count of aggregated value.
     * 
     */
    private String sqlFirewallViolationAnalyticCount;
    /**
     * @return An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeEnded;
    /**
     * @return An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeStarted;

    private GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem() {}
    /**
     * @return The details of the aggregation dimensions used for summarizing SQL violations.
     * 
     */
    public List<GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension> dimensions() {
        return this.dimensions;
    }
    /**
     * @return The display name of aggregation field.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The name of the aggregation.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return Total count of aggregated value.
     * 
     */
    public String sqlFirewallViolationAnalyticCount() {
        return this.sqlFirewallViolationAnalyticCount;
    }
    /**
     * @return An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension> dimensions;
        private String displayName;
        private String metricName;
        private String sqlFirewallViolationAnalyticCount;
        private String timeEnded;
        private String timeStarted;
        public Builder() {}
        public Builder(GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensions = defaults.dimensions;
    	      this.displayName = defaults.displayName;
    	      this.metricName = defaults.metricName;
    	      this.sqlFirewallViolationAnalyticCount = defaults.sqlFirewallViolationAnalyticCount;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder dimensions(List<GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder sqlFirewallViolationAnalyticCount(String sqlFirewallViolationAnalyticCount) {
            if (sqlFirewallViolationAnalyticCount == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem", "sqlFirewallViolationAnalyticCount");
            }
            this.sqlFirewallViolationAnalyticCount = sqlFirewallViolationAnalyticCount;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            if (timeEnded == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem", "timeEnded");
            }
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        public GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem build() {
            final var _resultValue = new GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItem();
            _resultValue.dimensions = dimensions;
            _resultValue.displayName = displayName;
            _resultValue.metricName = metricName;
            _resultValue.sqlFirewallViolationAnalyticCount = sqlFirewallViolationAnalyticCount;
            _resultValue.timeEnded = timeEnded;
            _resultValue.timeStarted = timeStarted;
            return _resultValue;
        }
    }
}
