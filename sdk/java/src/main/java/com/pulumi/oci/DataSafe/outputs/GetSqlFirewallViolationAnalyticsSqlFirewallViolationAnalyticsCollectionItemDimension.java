// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension {
    /**
     * @return The IP address of the host from which the session was spawned.
     * 
     */
    private List<String> clientIps;
    /**
     * @return The name of the operating system user for the database session.
     * 
     */
    private List<String> clientOsUserNames;
    /**
     * @return The application from which the SQL violation was generated. Examples SQL Plus or SQL Developer.
     * 
     */
    private List<String> clientPrograms;
    /**
     * @return The name of the database user.
     * 
     */
    private List<String> dbUserNames;
    /**
     * @return The time of the SQL violation occurrence in the target database.
     * 
     */
    private List<String> operationTimes;
    /**
     * @return The name of the action executed by the user on the target database, for example, ALTER, CREATE, DROP.
     * 
     */
    private List<String> operations;
    /**
     * @return Specifies the level of SQL included for this SQL firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    private List<String> sqlLevels;
    /**
     * @return The OCID of the target database.
     * 
     */
    private List<String> targetIds;
    /**
     * @return The name of the target database.
     * 
     */
    private List<String> targetNames;
    /**
     * @return The action taken for this SQL violation.
     * 
     */
    private List<String> violationActions;
    /**
     * @return Indicates whether SQL or context violation.
     * 
     */
    private List<String> violationCauses;

    private GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension() {}
    /**
     * @return The IP address of the host from which the session was spawned.
     * 
     */
    public List<String> clientIps() {
        return this.clientIps;
    }
    /**
     * @return The name of the operating system user for the database session.
     * 
     */
    public List<String> clientOsUserNames() {
        return this.clientOsUserNames;
    }
    /**
     * @return The application from which the SQL violation was generated. Examples SQL Plus or SQL Developer.
     * 
     */
    public List<String> clientPrograms() {
        return this.clientPrograms;
    }
    /**
     * @return The name of the database user.
     * 
     */
    public List<String> dbUserNames() {
        return this.dbUserNames;
    }
    /**
     * @return The time of the SQL violation occurrence in the target database.
     * 
     */
    public List<String> operationTimes() {
        return this.operationTimes;
    }
    /**
     * @return The name of the action executed by the user on the target database, for example, ALTER, CREATE, DROP.
     * 
     */
    public List<String> operations() {
        return this.operations;
    }
    /**
     * @return Specifies the level of SQL included for this SQL firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    public List<String> sqlLevels() {
        return this.sqlLevels;
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public List<String> targetIds() {
        return this.targetIds;
    }
    /**
     * @return The name of the target database.
     * 
     */
    public List<String> targetNames() {
        return this.targetNames;
    }
    /**
     * @return The action taken for this SQL violation.
     * 
     */
    public List<String> violationActions() {
        return this.violationActions;
    }
    /**
     * @return Indicates whether SQL or context violation.
     * 
     */
    public List<String> violationCauses() {
        return this.violationCauses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> clientIps;
        private List<String> clientOsUserNames;
        private List<String> clientPrograms;
        private List<String> dbUserNames;
        private List<String> operationTimes;
        private List<String> operations;
        private List<String> sqlLevels;
        private List<String> targetIds;
        private List<String> targetNames;
        private List<String> violationActions;
        private List<String> violationCauses;
        public Builder() {}
        public Builder(GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIps = defaults.clientIps;
    	      this.clientOsUserNames = defaults.clientOsUserNames;
    	      this.clientPrograms = defaults.clientPrograms;
    	      this.dbUserNames = defaults.dbUserNames;
    	      this.operationTimes = defaults.operationTimes;
    	      this.operations = defaults.operations;
    	      this.sqlLevels = defaults.sqlLevels;
    	      this.targetIds = defaults.targetIds;
    	      this.targetNames = defaults.targetNames;
    	      this.violationActions = defaults.violationActions;
    	      this.violationCauses = defaults.violationCauses;
        }

        @CustomType.Setter
        public Builder clientIps(List<String> clientIps) {
            this.clientIps = Objects.requireNonNull(clientIps);
            return this;
        }
        public Builder clientIps(String... clientIps) {
            return clientIps(List.of(clientIps));
        }
        @CustomType.Setter
        public Builder clientOsUserNames(List<String> clientOsUserNames) {
            this.clientOsUserNames = Objects.requireNonNull(clientOsUserNames);
            return this;
        }
        public Builder clientOsUserNames(String... clientOsUserNames) {
            return clientOsUserNames(List.of(clientOsUserNames));
        }
        @CustomType.Setter
        public Builder clientPrograms(List<String> clientPrograms) {
            this.clientPrograms = Objects.requireNonNull(clientPrograms);
            return this;
        }
        public Builder clientPrograms(String... clientPrograms) {
            return clientPrograms(List.of(clientPrograms));
        }
        @CustomType.Setter
        public Builder dbUserNames(List<String> dbUserNames) {
            this.dbUserNames = Objects.requireNonNull(dbUserNames);
            return this;
        }
        public Builder dbUserNames(String... dbUserNames) {
            return dbUserNames(List.of(dbUserNames));
        }
        @CustomType.Setter
        public Builder operationTimes(List<String> operationTimes) {
            this.operationTimes = Objects.requireNonNull(operationTimes);
            return this;
        }
        public Builder operationTimes(String... operationTimes) {
            return operationTimes(List.of(operationTimes));
        }
        @CustomType.Setter
        public Builder operations(List<String> operations) {
            this.operations = Objects.requireNonNull(operations);
            return this;
        }
        public Builder operations(String... operations) {
            return operations(List.of(operations));
        }
        @CustomType.Setter
        public Builder sqlLevels(List<String> sqlLevels) {
            this.sqlLevels = Objects.requireNonNull(sqlLevels);
            return this;
        }
        public Builder sqlLevels(String... sqlLevels) {
            return sqlLevels(List.of(sqlLevels));
        }
        @CustomType.Setter
        public Builder targetIds(List<String> targetIds) {
            this.targetIds = Objects.requireNonNull(targetIds);
            return this;
        }
        public Builder targetIds(String... targetIds) {
            return targetIds(List.of(targetIds));
        }
        @CustomType.Setter
        public Builder targetNames(List<String> targetNames) {
            this.targetNames = Objects.requireNonNull(targetNames);
            return this;
        }
        public Builder targetNames(String... targetNames) {
            return targetNames(List.of(targetNames));
        }
        @CustomType.Setter
        public Builder violationActions(List<String> violationActions) {
            this.violationActions = Objects.requireNonNull(violationActions);
            return this;
        }
        public Builder violationActions(String... violationActions) {
            return violationActions(List.of(violationActions));
        }
        @CustomType.Setter
        public Builder violationCauses(List<String> violationCauses) {
            this.violationCauses = Objects.requireNonNull(violationCauses);
            return this;
        }
        public Builder violationCauses(String... violationCauses) {
            return violationCauses(List.of(violationCauses));
        }
        public GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension build() {
            final var o = new GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimension();
            o.clientIps = clientIps;
            o.clientOsUserNames = clientOsUserNames;
            o.clientPrograms = clientPrograms;
            o.dbUserNames = dbUserNames;
            o.operationTimes = operationTimes;
            o.operations = operations;
            o.sqlLevels = sqlLevels;
            o.targetIds = targetIds;
            o.targetNames = targetNames;
            o.violationActions = violationActions;
            o.violationCauses = violationCauses;
            return o;
        }
    }
}
