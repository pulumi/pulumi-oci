// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem {
    /**
     * @return The IP address of the host machine from which the session was generated.
     * 
     */
    private @Nullable String clientIp;
    /**
     * @return The name of the operating system user for the database session.
     * 
     */
    private @Nullable String clientOsUserName;
    /**
     * @return The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
     * 
     */
    private @Nullable String clientProgram;
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    private @Nullable String currentDbUserName;
    /**
     * @return The name of the database user.
     * 
     */
    private @Nullable String dbUserName;
    /**
     * @return The OCID of the SQL violation.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
     * 
     */
    private @Nullable String operation;
    /**
     * @return The time of the SQL violation occurrence in the target database.
     * 
     */
    private @Nullable String operationTime;
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    private @Nullable String sqlAccessedObjects;
    /**
     * @return Specifies the level of SQL for this violation. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    private @Nullable String sqlLevel;
    /**
     * @return The SQL text caught by the firewall.
     * 
     */
    private @Nullable String sqlText;
    /**
     * @return The OCID of the target database.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The name of the target database.
     * 
     */
    private @Nullable String targetName;
    /**
     * @return The timestamp when this SQL violation was collected from the target database by Data Safe.
     * 
     */
    private @Nullable String timeCollected;
    /**
     * @return The action taken for this SQL violation.
     * 
     */
    private @Nullable String violationAction;
    /**
     * @return Indicates whether SQL or context violation.
     * 
     */
    private @Nullable String violationCause;

    private GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem() {}
    /**
     * @return The IP address of the host machine from which the session was generated.
     * 
     */
    public Optional<String> clientIp() {
        return Optional.ofNullable(this.clientIp);
    }
    /**
     * @return The name of the operating system user for the database session.
     * 
     */
    public Optional<String> clientOsUserName() {
        return Optional.ofNullable(this.clientOsUserName);
    }
    /**
     * @return The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
     * 
     */
    public Optional<String> clientProgram() {
        return Optional.ofNullable(this.clientProgram);
    }
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    public Optional<String> currentDbUserName() {
        return Optional.ofNullable(this.currentDbUserName);
    }
    /**
     * @return The name of the database user.
     * 
     */
    public Optional<String> dbUserName() {
        return Optional.ofNullable(this.dbUserName);
    }
    /**
     * @return The OCID of the SQL violation.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
     * 
     */
    public Optional<String> operation() {
        return Optional.ofNullable(this.operation);
    }
    /**
     * @return The time of the SQL violation occurrence in the target database.
     * 
     */
    public Optional<String> operationTime() {
        return Optional.ofNullable(this.operationTime);
    }
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    public Optional<String> sqlAccessedObjects() {
        return Optional.ofNullable(this.sqlAccessedObjects);
    }
    /**
     * @return Specifies the level of SQL for this violation. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    public Optional<String> sqlLevel() {
        return Optional.ofNullable(this.sqlLevel);
    }
    /**
     * @return The SQL text caught by the firewall.
     * 
     */
    public Optional<String> sqlText() {
        return Optional.ofNullable(this.sqlText);
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The name of the target database.
     * 
     */
    public Optional<String> targetName() {
        return Optional.ofNullable(this.targetName);
    }
    /**
     * @return The timestamp when this SQL violation was collected from the target database by Data Safe.
     * 
     */
    public Optional<String> timeCollected() {
        return Optional.ofNullable(this.timeCollected);
    }
    /**
     * @return The action taken for this SQL violation.
     * 
     */
    public Optional<String> violationAction() {
        return Optional.ofNullable(this.violationAction);
    }
    /**
     * @return Indicates whether SQL or context violation.
     * 
     */
    public Optional<String> violationCause() {
        return Optional.ofNullable(this.violationCause);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientIp;
        private @Nullable String clientOsUserName;
        private @Nullable String clientProgram;
        private @Nullable String compartmentId;
        private @Nullable String currentDbUserName;
        private @Nullable String dbUserName;
        private @Nullable String id;
        private @Nullable String operation;
        private @Nullable String operationTime;
        private @Nullable String sqlAccessedObjects;
        private @Nullable String sqlLevel;
        private @Nullable String sqlText;
        private @Nullable String targetId;
        private @Nullable String targetName;
        private @Nullable String timeCollected;
        private @Nullable String violationAction;
        private @Nullable String violationCause;
        public Builder() {}
        public Builder(GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIp = defaults.clientIp;
    	      this.clientOsUserName = defaults.clientOsUserName;
    	      this.clientProgram = defaults.clientProgram;
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentDbUserName = defaults.currentDbUserName;
    	      this.dbUserName = defaults.dbUserName;
    	      this.id = defaults.id;
    	      this.operation = defaults.operation;
    	      this.operationTime = defaults.operationTime;
    	      this.sqlAccessedObjects = defaults.sqlAccessedObjects;
    	      this.sqlLevel = defaults.sqlLevel;
    	      this.sqlText = defaults.sqlText;
    	      this.targetId = defaults.targetId;
    	      this.targetName = defaults.targetName;
    	      this.timeCollected = defaults.timeCollected;
    	      this.violationAction = defaults.violationAction;
    	      this.violationCause = defaults.violationCause;
        }

        @CustomType.Setter
        public Builder clientIp(@Nullable String clientIp) {
            this.clientIp = clientIp;
            return this;
        }
        @CustomType.Setter
        public Builder clientOsUserName(@Nullable String clientOsUserName) {
            this.clientOsUserName = clientOsUserName;
            return this;
        }
        @CustomType.Setter
        public Builder clientProgram(@Nullable String clientProgram) {
            this.clientProgram = clientProgram;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currentDbUserName(@Nullable String currentDbUserName) {
            this.currentDbUserName = currentDbUserName;
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(@Nullable String dbUserName) {
            this.dbUserName = dbUserName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder operation(@Nullable String operation) {
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder operationTime(@Nullable String operationTime) {
            this.operationTime = operationTime;
            return this;
        }
        @CustomType.Setter
        public Builder sqlAccessedObjects(@Nullable String sqlAccessedObjects) {
            this.sqlAccessedObjects = sqlAccessedObjects;
            return this;
        }
        @CustomType.Setter
        public Builder sqlLevel(@Nullable String sqlLevel) {
            this.sqlLevel = sqlLevel;
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(@Nullable String sqlText) {
            this.sqlText = sqlText;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetName(@Nullable String targetName) {
            this.targetName = targetName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCollected(@Nullable String timeCollected) {
            this.timeCollected = timeCollected;
            return this;
        }
        @CustomType.Setter
        public Builder violationAction(@Nullable String violationAction) {
            this.violationAction = violationAction;
            return this;
        }
        @CustomType.Setter
        public Builder violationCause(@Nullable String violationCause) {
            this.violationCause = violationCause;
            return this;
        }
        public GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem build() {
            final var o = new GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem();
            o.clientIp = clientIp;
            o.clientOsUserName = clientOsUserName;
            o.clientProgram = clientProgram;
            o.compartmentId = compartmentId;
            o.currentDbUserName = currentDbUserName;
            o.dbUserName = dbUserName;
            o.id = id;
            o.operation = operation;
            o.operationTime = operationTime;
            o.sqlAccessedObjects = sqlAccessedObjects;
            o.sqlLevel = sqlLevel;
            o.sqlText = sqlText;
            o.targetId = targetId;
            o.targetName = targetName;
            o.timeCollected = timeCollected;
            o.violationAction = violationAction;
            o.violationCause = violationCause;
            return o;
        }
    }
}
