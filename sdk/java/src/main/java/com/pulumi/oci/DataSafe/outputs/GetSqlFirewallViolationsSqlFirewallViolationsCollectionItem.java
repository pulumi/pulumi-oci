// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem {
    /**
     * @return The IP address of the host machine from which the session was generated.
     * 
     */
    private String clientIp;
    /**
     * @return The name of the operating system user for the database session.
     * 
     */
    private String clientOsUserName;
    /**
     * @return The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
     * 
     */
    private String clientProgram;
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    private String currentDbUserName;
    /**
     * @return The name of the database user.
     * 
     */
    private String dbUserName;
    /**
     * @return The OCID of the SQL violation.
     * 
     */
    private String id;
    /**
     * @return The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
     * 
     */
    private String operation;
    /**
     * @return The time of the SQL violation occurrence in the target database.
     * 
     */
    private String operationTime;
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    private String sqlAccessedObjects;
    /**
     * @return Specifies the level of SQL for this violation. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    private String sqlLevel;
    /**
     * @return The SQL text caught by the firewall.
     * 
     */
    private String sqlText;
    /**
     * @return The OCID of the target database.
     * 
     */
    private String targetId;
    /**
     * @return The name of the target database.
     * 
     */
    private String targetName;
    /**
     * @return The timestamp when this SQL violation was collected from the target database by Data Safe.
     * 
     */
    private String timeCollected;
    /**
     * @return The action taken for this SQL violation.
     * 
     */
    private String violationAction;
    /**
     * @return Indicates whether SQL or context violation.
     * 
     */
    private String violationCause;

    private GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem() {}
    /**
     * @return The IP address of the host machine from which the session was generated.
     * 
     */
    public String clientIp() {
        return this.clientIp;
    }
    /**
     * @return The name of the operating system user for the database session.
     * 
     */
    public String clientOsUserName() {
        return this.clientOsUserName;
    }
    /**
     * @return The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
     * 
     */
    public String clientProgram() {
        return this.clientProgram;
    }
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the user that SQL was executed as.
     * 
     */
    public String currentDbUserName() {
        return this.currentDbUserName;
    }
    /**
     * @return The name of the database user.
     * 
     */
    public String dbUserName() {
        return this.dbUserName;
    }
    /**
     * @return The OCID of the SQL violation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
     * 
     */
    public String operation() {
        return this.operation;
    }
    /**
     * @return The time of the SQL violation occurrence in the target database.
     * 
     */
    public String operationTime() {
        return this.operationTime;
    }
    /**
     * @return The objects accessed by the SQL.
     * 
     */
    public String sqlAccessedObjects() {
        return this.sqlAccessedObjects;
    }
    /**
     * @return Specifies the level of SQL for this violation. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
     * 
     */
    public String sqlLevel() {
        return this.sqlLevel;
    }
    /**
     * @return The SQL text caught by the firewall.
     * 
     */
    public String sqlText() {
        return this.sqlText;
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The name of the target database.
     * 
     */
    public String targetName() {
        return this.targetName;
    }
    /**
     * @return The timestamp when this SQL violation was collected from the target database by Data Safe.
     * 
     */
    public String timeCollected() {
        return this.timeCollected;
    }
    /**
     * @return The action taken for this SQL violation.
     * 
     */
    public String violationAction() {
        return this.violationAction;
    }
    /**
     * @return Indicates whether SQL or context violation.
     * 
     */
    public String violationCause() {
        return this.violationCause;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientIp;
        private String clientOsUserName;
        private String clientProgram;
        private String compartmentId;
        private String currentDbUserName;
        private String dbUserName;
        private String id;
        private String operation;
        private String operationTime;
        private String sqlAccessedObjects;
        private String sqlLevel;
        private String sqlText;
        private String targetId;
        private String targetName;
        private String timeCollected;
        private String violationAction;
        private String violationCause;
        public Builder() {}
        public Builder(GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIp = defaults.clientIp;
    	      this.clientOsUserName = defaults.clientOsUserName;
    	      this.clientProgram = defaults.clientProgram;
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentDbUserName = defaults.currentDbUserName;
    	      this.dbUserName = defaults.dbUserName;
    	      this.id = defaults.id;
    	      this.operation = defaults.operation;
    	      this.operationTime = defaults.operationTime;
    	      this.sqlAccessedObjects = defaults.sqlAccessedObjects;
    	      this.sqlLevel = defaults.sqlLevel;
    	      this.sqlText = defaults.sqlText;
    	      this.targetId = defaults.targetId;
    	      this.targetName = defaults.targetName;
    	      this.timeCollected = defaults.timeCollected;
    	      this.violationAction = defaults.violationAction;
    	      this.violationCause = defaults.violationCause;
        }

        @CustomType.Setter
        public Builder clientIp(String clientIp) {
            if (clientIp == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "clientIp");
            }
            this.clientIp = clientIp;
            return this;
        }
        @CustomType.Setter
        public Builder clientOsUserName(String clientOsUserName) {
            if (clientOsUserName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "clientOsUserName");
            }
            this.clientOsUserName = clientOsUserName;
            return this;
        }
        @CustomType.Setter
        public Builder clientProgram(String clientProgram) {
            if (clientProgram == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "clientProgram");
            }
            this.clientProgram = clientProgram;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currentDbUserName(String currentDbUserName) {
            if (currentDbUserName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "currentDbUserName");
            }
            this.currentDbUserName = currentDbUserName;
            return this;
        }
        @CustomType.Setter
        public Builder dbUserName(String dbUserName) {
            if (dbUserName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "dbUserName");
            }
            this.dbUserName = dbUserName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder operation(String operation) {
            if (operation == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "operation");
            }
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder operationTime(String operationTime) {
            if (operationTime == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "operationTime");
            }
            this.operationTime = operationTime;
            return this;
        }
        @CustomType.Setter
        public Builder sqlAccessedObjects(String sqlAccessedObjects) {
            if (sqlAccessedObjects == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "sqlAccessedObjects");
            }
            this.sqlAccessedObjects = sqlAccessedObjects;
            return this;
        }
        @CustomType.Setter
        public Builder sqlLevel(String sqlLevel) {
            if (sqlLevel == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "sqlLevel");
            }
            this.sqlLevel = sqlLevel;
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(String sqlText) {
            if (sqlText == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "sqlText");
            }
            this.sqlText = sqlText;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            if (targetId == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "targetId");
            }
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetName(String targetName) {
            if (targetName == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "targetName");
            }
            this.targetName = targetName;
            return this;
        }
        @CustomType.Setter
        public Builder timeCollected(String timeCollected) {
            if (timeCollected == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "timeCollected");
            }
            this.timeCollected = timeCollected;
            return this;
        }
        @CustomType.Setter
        public Builder violationAction(String violationAction) {
            if (violationAction == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "violationAction");
            }
            this.violationAction = violationAction;
            return this;
        }
        @CustomType.Setter
        public Builder violationCause(String violationCause) {
            if (violationCause == null) {
              throw new MissingRequiredPropertyException("GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem", "violationCause");
            }
            this.violationCause = violationCause;
            return this;
        }
        public GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem build() {
            final var _resultValue = new GetSqlFirewallViolationsSqlFirewallViolationsCollectionItem();
            _resultValue.clientIp = clientIp;
            _resultValue.clientOsUserName = clientOsUserName;
            _resultValue.clientProgram = clientProgram;
            _resultValue.compartmentId = compartmentId;
            _resultValue.currentDbUserName = currentDbUserName;
            _resultValue.dbUserName = dbUserName;
            _resultValue.id = id;
            _resultValue.operation = operation;
            _resultValue.operationTime = operationTime;
            _resultValue.sqlAccessedObjects = sqlAccessedObjects;
            _resultValue.sqlLevel = sqlLevel;
            _resultValue.sqlText = sqlText;
            _resultValue.targetId = targetId;
            _resultValue.targetName = targetName;
            _resultValue.timeCollected = timeCollected;
            _resultValue.violationAction = violationAction;
            _resultValue.violationCause = violationCause;
            return _resultValue;
        }
    }
}
