// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabaseRolesFilter;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabaseRolesRole;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetDatabaseRolesResult {
    /**
     * @return Type of authentication.
     * 
     */
    private @Nullable String authenticationType;
    private @Nullable List<GetTargetDatabaseRolesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Is the role oracle maintained.
     * 
     */
    private @Nullable Boolean isOracleMaintained;
    private @Nullable String roleNameContains;
    /**
     * @return The name of the role.
     * 
     */
    private @Nullable List<String> roleNames;
    /**
     * @return The list of roles.
     * 
     */
    private List<GetTargetDatabaseRolesRole> roles;
    private String targetDatabaseId;

    private GetTargetDatabaseRolesResult() {}
    /**
     * @return Type of authentication.
     * 
     */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    public List<GetTargetDatabaseRolesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Is the role oracle maintained.
     * 
     */
    public Optional<Boolean> isOracleMaintained() {
        return Optional.ofNullable(this.isOracleMaintained);
    }
    public Optional<String> roleNameContains() {
        return Optional.ofNullable(this.roleNameContains);
    }
    /**
     * @return The name of the role.
     * 
     */
    public List<String> roleNames() {
        return this.roleNames == null ? List.of() : this.roleNames;
    }
    /**
     * @return The list of roles.
     * 
     */
    public List<GetTargetDatabaseRolesRole> roles() {
        return this.roles;
    }
    public String targetDatabaseId() {
        return this.targetDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabaseRolesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authenticationType;
        private @Nullable List<GetTargetDatabaseRolesFilter> filters;
        private String id;
        private @Nullable Boolean isOracleMaintained;
        private @Nullable String roleNameContains;
        private @Nullable List<String> roleNames;
        private List<GetTargetDatabaseRolesRole> roles;
        private String targetDatabaseId;
        public Builder() {}
        public Builder(GetTargetDatabaseRolesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isOracleMaintained = defaults.isOracleMaintained;
    	      this.roleNameContains = defaults.roleNameContains;
    	      this.roleNames = defaults.roleNames;
    	      this.roles = defaults.roles;
    	      this.targetDatabaseId = defaults.targetDatabaseId;
        }

        @CustomType.Setter
        public Builder authenticationType(@Nullable String authenticationType) {

            this.authenticationType = authenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetTargetDatabaseRolesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetTargetDatabaseRolesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabaseRolesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isOracleMaintained(@Nullable Boolean isOracleMaintained) {

            this.isOracleMaintained = isOracleMaintained;
            return this;
        }
        @CustomType.Setter
        public Builder roleNameContains(@Nullable String roleNameContains) {

            this.roleNameContains = roleNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder roleNames(@Nullable List<String> roleNames) {

            this.roleNames = roleNames;
            return this;
        }
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }
        @CustomType.Setter
        public Builder roles(List<GetTargetDatabaseRolesRole> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabaseRolesResult", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(GetTargetDatabaseRolesRole... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder targetDatabaseId(String targetDatabaseId) {
            if (targetDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabaseRolesResult", "targetDatabaseId");
            }
            this.targetDatabaseId = targetDatabaseId;
            return this;
        }
        public GetTargetDatabaseRolesResult build() {
            final var _resultValue = new GetTargetDatabaseRolesResult();
            _resultValue.authenticationType = authenticationType;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isOracleMaintained = isOracleMaintained;
            _resultValue.roleNameContains = roleNameContains;
            _resultValue.roleNames = roleNames;
            _resultValue.roles = roles;
            _resultValue.targetDatabaseId = targetDatabaseId;
            return _resultValue;
        }
    }
}
