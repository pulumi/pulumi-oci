// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetDatabaseRolesRole {
    /**
     * @return A filter to return roles based on authentication type.
     * 
     */
    private @Nullable String authenticationType;
    /**
     * @return Is the role common.
     * 
     */
    private @Nullable Boolean isCommon;
    /**
     * @return Is the role implicit.
     * 
     */
    private @Nullable Boolean isImplicit;
    /**
     * @return Is the role inherited.
     * 
     */
    private @Nullable Boolean isInherited;
    /**
     * @return A filter to return roles based on whether they are maintained by oracle or not.
     * 
     */
    private @Nullable Boolean isOracleMaintained;
    /**
     * @return Is password required.
     * 
     */
    private @Nullable Boolean isPasswordRequired;
    /**
     * @return A filter to return only a specific role based on role name.
     * 
     */
    private @Nullable String roleName;

    private GetTargetDatabaseRolesRole() {}
    /**
     * @return A filter to return roles based on authentication type.
     * 
     */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    /**
     * @return Is the role common.
     * 
     */
    public Optional<Boolean> isCommon() {
        return Optional.ofNullable(this.isCommon);
    }
    /**
     * @return Is the role implicit.
     * 
     */
    public Optional<Boolean> isImplicit() {
        return Optional.ofNullable(this.isImplicit);
    }
    /**
     * @return Is the role inherited.
     * 
     */
    public Optional<Boolean> isInherited() {
        return Optional.ofNullable(this.isInherited);
    }
    /**
     * @return A filter to return roles based on whether they are maintained by oracle or not.
     * 
     */
    public Optional<Boolean> isOracleMaintained() {
        return Optional.ofNullable(this.isOracleMaintained);
    }
    /**
     * @return Is password required.
     * 
     */
    public Optional<Boolean> isPasswordRequired() {
        return Optional.ofNullable(this.isPasswordRequired);
    }
    /**
     * @return A filter to return only a specific role based on role name.
     * 
     */
    public Optional<String> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabaseRolesRole defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authenticationType;
        private @Nullable Boolean isCommon;
        private @Nullable Boolean isImplicit;
        private @Nullable Boolean isInherited;
        private @Nullable Boolean isOracleMaintained;
        private @Nullable Boolean isPasswordRequired;
        private @Nullable String roleName;
        public Builder() {}
        public Builder(GetTargetDatabaseRolesRole defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.isCommon = defaults.isCommon;
    	      this.isImplicit = defaults.isImplicit;
    	      this.isInherited = defaults.isInherited;
    	      this.isOracleMaintained = defaults.isOracleMaintained;
    	      this.isPasswordRequired = defaults.isPasswordRequired;
    	      this.roleName = defaults.roleName;
        }

        @CustomType.Setter
        public Builder authenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder isCommon(@Nullable Boolean isCommon) {
            this.isCommon = isCommon;
            return this;
        }
        @CustomType.Setter
        public Builder isImplicit(@Nullable Boolean isImplicit) {
            this.isImplicit = isImplicit;
            return this;
        }
        @CustomType.Setter
        public Builder isInherited(@Nullable Boolean isInherited) {
            this.isInherited = isInherited;
            return this;
        }
        @CustomType.Setter
        public Builder isOracleMaintained(@Nullable Boolean isOracleMaintained) {
            this.isOracleMaintained = isOracleMaintained;
            return this;
        }
        @CustomType.Setter
        public Builder isPasswordRequired(@Nullable Boolean isPasswordRequired) {
            this.isPasswordRequired = isPasswordRequired;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(@Nullable String roleName) {
            this.roleName = roleName;
            return this;
        }
        public GetTargetDatabaseRolesRole build() {
            final var o = new GetTargetDatabaseRolesRole();
            o.authenticationType = authenticationType;
            o.isCommon = isCommon;
            o.isImplicit = isImplicit;
            o.isInherited = isInherited;
            o.isOracleMaintained = isOracleMaintained;
            o.isPasswordRequired = isPasswordRequired;
            o.roleName = roleName;
            return o;
        }
    }
}
