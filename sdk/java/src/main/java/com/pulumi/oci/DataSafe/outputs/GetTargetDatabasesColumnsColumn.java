// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTargetDatabasesColumnsColumn {
    /**
     * @return Character length.
     * 
     */
    private Integer characterLength;
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    private String columnName;
    /**
     * @return Data type of the column.
     * 
     */
    private String dataType;
    /**
     * @return Length of the data represented by the column.
     * 
     */
    private String length;
    /**
     * @return Precision of the column.
     * 
     */
    private Integer precision;
    /**
     * @return Scale of the column.
     * 
     */
    private Integer scale;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private String schemaName;
    /**
     * @return A filter to return only items related to specific table name.
     * 
     */
    private String tableName;

    private GetTargetDatabasesColumnsColumn() {}
    /**
     * @return Character length.
     * 
     */
    public Integer characterLength() {
        return this.characterLength;
    }
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public String columnName() {
        return this.columnName;
    }
    /**
     * @return Data type of the column.
     * 
     */
    public String dataType() {
        return this.dataType;
    }
    /**
     * @return Length of the data represented by the column.
     * 
     */
    public String length() {
        return this.length;
    }
    /**
     * @return Precision of the column.
     * 
     */
    public Integer precision() {
        return this.precision;
    }
    /**
     * @return Scale of the column.
     * 
     */
    public Integer scale() {
        return this.scale;
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return A filter to return only items related to specific table name.
     * 
     */
    public String tableName() {
        return this.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabasesColumnsColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer characterLength;
        private String columnName;
        private String dataType;
        private String length;
        private Integer precision;
        private Integer scale;
        private String schemaName;
        private String tableName;
        public Builder() {}
        public Builder(GetTargetDatabasesColumnsColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterLength = defaults.characterLength;
    	      this.columnName = defaults.columnName;
    	      this.dataType = defaults.dataType;
    	      this.length = defaults.length;
    	      this.precision = defaults.precision;
    	      this.scale = defaults.scale;
    	      this.schemaName = defaults.schemaName;
    	      this.tableName = defaults.tableName;
        }

        @CustomType.Setter
        public Builder characterLength(Integer characterLength) {
            if (characterLength == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "characterLength");
            }
            this.characterLength = characterLength;
            return this;
        }
        @CustomType.Setter
        public Builder columnName(String columnName) {
            if (columnName == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "columnName");
            }
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(String dataType) {
            if (dataType == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "dataType");
            }
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder length(String length) {
            if (length == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "length");
            }
            this.length = length;
            return this;
        }
        @CustomType.Setter
        public Builder precision(Integer precision) {
            if (precision == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "precision");
            }
            this.precision = precision;
            return this;
        }
        @CustomType.Setter
        public Builder scale(Integer scale) {
            if (scale == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "scale");
            }
            this.scale = scale;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            if (schemaName == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "schemaName");
            }
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesColumnsColumn", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        public GetTargetDatabasesColumnsColumn build() {
            final var _resultValue = new GetTargetDatabasesColumnsColumn();
            _resultValue.characterLength = characterLength;
            _resultValue.columnName = columnName;
            _resultValue.dataType = dataType;
            _resultValue.length = length;
            _resultValue.precision = precision;
            _resultValue.scale = scale;
            _resultValue.schemaName = schemaName;
            _resultValue.tableName = tableName;
            return _resultValue;
        }
    }
}
