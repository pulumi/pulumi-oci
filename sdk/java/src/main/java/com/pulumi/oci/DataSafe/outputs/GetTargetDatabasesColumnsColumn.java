// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetDatabasesColumnsColumn {
    /**
     * @return Character length.
     * 
     */
    private @Nullable Integer characterLength;
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    private @Nullable String columnName;
    /**
     * @return Data type of the column.
     * 
     */
    private @Nullable String dataType;
    /**
     * @return Length of the data represented by the column.
     * 
     */
    private @Nullable String length;
    /**
     * @return Precision of the column.
     * 
     */
    private @Nullable Integer precision;
    /**
     * @return Scale of the column.
     * 
     */
    private @Nullable Integer scale;
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    private @Nullable String schemaName;
    /**
     * @return A filter to return only items related to specific table name.
     * 
     */
    private @Nullable String tableName;

    private GetTargetDatabasesColumnsColumn() {}
    /**
     * @return Character length.
     * 
     */
    public Optional<Integer> characterLength() {
        return Optional.ofNullable(this.characterLength);
    }
    /**
     * @return A filter to return only a specific column based on column name.
     * 
     */
    public Optional<String> columnName() {
        return Optional.ofNullable(this.columnName);
    }
    /**
     * @return Data type of the column.
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return Length of the data represented by the column.
     * 
     */
    public Optional<String> length() {
        return Optional.ofNullable(this.length);
    }
    /**
     * @return Precision of the column.
     * 
     */
    public Optional<Integer> precision() {
        return Optional.ofNullable(this.precision);
    }
    /**
     * @return Scale of the column.
     * 
     */
    public Optional<Integer> scale() {
        return Optional.ofNullable(this.scale);
    }
    /**
     * @return A filter to return only items related to specific schema name.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    /**
     * @return A filter to return only items related to specific table name.
     * 
     */
    public Optional<String> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabasesColumnsColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer characterLength;
        private @Nullable String columnName;
        private @Nullable String dataType;
        private @Nullable String length;
        private @Nullable Integer precision;
        private @Nullable Integer scale;
        private @Nullable String schemaName;
        private @Nullable String tableName;
        public Builder() {}
        public Builder(GetTargetDatabasesColumnsColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterLength = defaults.characterLength;
    	      this.columnName = defaults.columnName;
    	      this.dataType = defaults.dataType;
    	      this.length = defaults.length;
    	      this.precision = defaults.precision;
    	      this.scale = defaults.scale;
    	      this.schemaName = defaults.schemaName;
    	      this.tableName = defaults.tableName;
        }

        @CustomType.Setter
        public Builder characterLength(@Nullable Integer characterLength) {
            this.characterLength = characterLength;
            return this;
        }
        @CustomType.Setter
        public Builder columnName(@Nullable String columnName) {
            this.columnName = columnName;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder length(@Nullable String length) {
            this.length = length;
            return this;
        }
        @CustomType.Setter
        public Builder precision(@Nullable Integer precision) {
            this.precision = precision;
            return this;
        }
        @CustomType.Setter
        public Builder scale(@Nullable Integer scale) {
            this.scale = scale;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(@Nullable String tableName) {
            this.tableName = tableName;
            return this;
        }
        public GetTargetDatabasesColumnsColumn build() {
            final var o = new GetTargetDatabasesColumnsColumn();
            o.characterLength = characterLength;
            o.columnName = columnName;
            o.dataType = dataType;
            o.length = length;
            o.precision = precision;
            o.scale = scale;
            o.schemaName = schemaName;
            o.tableName = tableName;
            return o;
        }
    }
}
