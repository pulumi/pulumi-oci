// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesTablesFilter;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesTablesTable;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTargetDatabasesTablesResult {
    private @Nullable List<GetTargetDatabasesTablesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String schemaNameContains;
    /**
     * @return Name of the schema.
     * 
     */
    private @Nullable List<String> schemaNames;
    private @Nullable String tableNameContains;
    /**
     * @return Name of the table.
     * 
     */
    private @Nullable List<String> tableNames;
    /**
     * @return The list of tables.
     * 
     */
    private List<GetTargetDatabasesTablesTable> tables;
    private String targetDatabaseId;

    private GetTargetDatabasesTablesResult() {}
    public List<GetTargetDatabasesTablesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> schemaNameContains() {
        return Optional.ofNullable(this.schemaNameContains);
    }
    /**
     * @return Name of the schema.
     * 
     */
    public List<String> schemaNames() {
        return this.schemaNames == null ? List.of() : this.schemaNames;
    }
    public Optional<String> tableNameContains() {
        return Optional.ofNullable(this.tableNameContains);
    }
    /**
     * @return Name of the table.
     * 
     */
    public List<String> tableNames() {
        return this.tableNames == null ? List.of() : this.tableNames;
    }
    /**
     * @return The list of tables.
     * 
     */
    public List<GetTargetDatabasesTablesTable> tables() {
        return this.tables;
    }
    public String targetDatabaseId() {
        return this.targetDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabasesTablesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetTargetDatabasesTablesFilter> filters;
        private String id;
        private @Nullable String schemaNameContains;
        private @Nullable List<String> schemaNames;
        private @Nullable String tableNameContains;
        private @Nullable List<String> tableNames;
        private List<GetTargetDatabasesTablesTable> tables;
        private String targetDatabaseId;
        public Builder() {}
        public Builder(GetTargetDatabasesTablesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.schemaNameContains = defaults.schemaNameContains;
    	      this.schemaNames = defaults.schemaNames;
    	      this.tableNameContains = defaults.tableNameContains;
    	      this.tableNames = defaults.tableNames;
    	      this.tables = defaults.tables;
    	      this.targetDatabaseId = defaults.targetDatabaseId;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetTargetDatabasesTablesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetTargetDatabasesTablesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder schemaNameContains(@Nullable String schemaNameContains) {
            this.schemaNameContains = schemaNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder schemaNames(@Nullable List<String> schemaNames) {
            this.schemaNames = schemaNames;
            return this;
        }
        public Builder schemaNames(String... schemaNames) {
            return schemaNames(List.of(schemaNames));
        }
        @CustomType.Setter
        public Builder tableNameContains(@Nullable String tableNameContains) {
            this.tableNameContains = tableNameContains;
            return this;
        }
        @CustomType.Setter
        public Builder tableNames(@Nullable List<String> tableNames) {
            this.tableNames = tableNames;
            return this;
        }
        public Builder tableNames(String... tableNames) {
            return tableNames(List.of(tableNames));
        }
        @CustomType.Setter
        public Builder tables(List<GetTargetDatabasesTablesTable> tables) {
            this.tables = Objects.requireNonNull(tables);
            return this;
        }
        public Builder tables(GetTargetDatabasesTablesTable... tables) {
            return tables(List.of(tables));
        }
        @CustomType.Setter
        public Builder targetDatabaseId(String targetDatabaseId) {
            this.targetDatabaseId = Objects.requireNonNull(targetDatabaseId);
            return this;
        }
        public GetTargetDatabasesTablesResult build() {
            final var _resultValue = new GetTargetDatabasesTablesResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.schemaNameContains = schemaNameContains;
            _resultValue.schemaNames = schemaNames;
            _resultValue.tableNameContains = tableNameContains;
            _resultValue.tableNames = tableNames;
            _resultValue.tables = tables;
            _resultValue.targetDatabaseId = targetDatabaseId;
            return _resultValue;
        }
    }
}
