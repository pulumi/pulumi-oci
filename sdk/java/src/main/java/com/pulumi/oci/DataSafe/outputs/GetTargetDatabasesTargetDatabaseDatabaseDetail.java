// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTargetDatabasesTargetDatabaseDatabaseDetail {
    /**
     * @return The OCID of the autonomous database registered as a target database in Data Safe.
     * 
     */
    private String autonomousDatabaseId;
    /**
     * @return A filter to return target databases that match the database type of the target database.
     * 
     */
    private String databaseType;
    /**
     * @return The OCID of the cloud database system registered as a target database in Data Safe.
     * 
     */
    private String dbSystemId;
    /**
     * @return A filter to return target databases that match the infrastructure type of the target database.
     * 
     */
    private String infrastructureType;
    /**
     * @return The OCID of the compute instance on which the database is running.
     * 
     */
    private String instanceId;
    /**
     * @return The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is &#39;ONPREM_CONNECTOR&#39;.
     * 
     */
    private List<String> ipAddresses;
    /**
     * @return The port number of the database listener.
     * 
     */
    private Integer listenerPort;
    /**
     * @return The service name of the database registered as target database.
     * 
     */
    private String serviceName;
    /**
     * @return The OCID of the VM cluster in which the database is running.
     * 
     */
    private String vmClusterId;

    private GetTargetDatabasesTargetDatabaseDatabaseDetail() {}
    /**
     * @return The OCID of the autonomous database registered as a target database in Data Safe.
     * 
     */
    public String autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }
    /**
     * @return A filter to return target databases that match the database type of the target database.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The OCID of the cloud database system registered as a target database in Data Safe.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return A filter to return target databases that match the infrastructure type of the target database.
     * 
     */
    public String infrastructureType() {
        return this.infrastructureType;
    }
    /**
     * @return The OCID of the compute instance on which the database is running.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is &#39;ONPREM_CONNECTOR&#39;.
     * 
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }
    /**
     * @return The port number of the database listener.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    /**
     * @return The service name of the database registered as target database.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return The OCID of the VM cluster in which the database is running.
     * 
     */
    public String vmClusterId() {
        return this.vmClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabasesTargetDatabaseDatabaseDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autonomousDatabaseId;
        private String databaseType;
        private String dbSystemId;
        private String infrastructureType;
        private String instanceId;
        private List<String> ipAddresses;
        private Integer listenerPort;
        private String serviceName;
        private String vmClusterId;
        public Builder() {}
        public Builder(GetTargetDatabasesTargetDatabaseDatabaseDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousDatabaseId = defaults.autonomousDatabaseId;
    	      this.databaseType = defaults.databaseType;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.infrastructureType = defaults.infrastructureType;
    	      this.instanceId = defaults.instanceId;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.listenerPort = defaults.listenerPort;
    	      this.serviceName = defaults.serviceName;
    	      this.vmClusterId = defaults.vmClusterId;
        }

        @CustomType.Setter
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            this.autonomousDatabaseId = Objects.requireNonNull(autonomousDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder infrastructureType(String infrastructureType) {
            this.infrastructureType = Objects.requireNonNull(infrastructureType);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddresses(List<String> ipAddresses) {
            this.ipAddresses = Objects.requireNonNull(ipAddresses);
            return this;
        }
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            this.listenerPort = Objects.requireNonNull(listenerPort);
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        @CustomType.Setter
        public Builder vmClusterId(String vmClusterId) {
            this.vmClusterId = Objects.requireNonNull(vmClusterId);
            return this;
        }
        public GetTargetDatabasesTargetDatabaseDatabaseDetail build() {
            final var o = new GetTargetDatabasesTargetDatabaseDatabaseDetail();
            o.autonomousDatabaseId = autonomousDatabaseId;
            o.databaseType = databaseType;
            o.dbSystemId = dbSystemId;
            o.infrastructureType = infrastructureType;
            o.instanceId = instanceId;
            o.ipAddresses = ipAddresses;
            o.listenerPort = listenerPort;
            o.serviceName = serviceName;
            o.vmClusterId = vmClusterId;
            return o;
        }
    }
}
