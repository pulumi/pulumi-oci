// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail;
import com.pulumi.oci.DataSafe.outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTargetDatabasesTargetDatabasePeerTargetDatabase {
    /**
     * @return Details of the database for the registration in Data Safe.
     * 
     */
    private List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail> databaseDetails;
    /**
     * @return Unique name of the database associated to the peer target database.
     * 
     */
    private String databaseUniqueName;
    /**
     * @return The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
     * 
     */
    private String dataguardAssociationId;
    /**
     * @return The description of the peer target database in Data Safe.
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    private String displayName;
    /**
     * @return The secondary key assigned for the peer target database in Data Safe.
     * 
     */
    private Integer key;
    /**
     * @return Details about the current state of the peer target database in Data Safe.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Role of the database associated to the peer target database.
     * 
     */
    private String role;
    /**
     * @return A filter to return only target databases that match the specified lifecycle state.
     * 
     */
    private String state;
    /**
     * @return The date and time the database was registered in Data Safe and created as a target database in Data Safe.
     * 
     */
    private String timeCreated;
    /**
     * @return The details required to establish a TLS enabled connection.
     * 
     */
    private List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig> tlsConfigs;

    private GetTargetDatabasesTargetDatabasePeerTargetDatabase() {}
    /**
     * @return Details of the database for the registration in Data Safe.
     * 
     */
    public List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail> databaseDetails() {
        return this.databaseDetails;
    }
    /**
     * @return Unique name of the database associated to the peer target database.
     * 
     */
    public String databaseUniqueName() {
        return this.databaseUniqueName;
    }
    /**
     * @return The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
     * 
     */
    public String dataguardAssociationId() {
        return this.dataguardAssociationId;
    }
    /**
     * @return The description of the peer target database in Data Safe.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the specified display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The secondary key assigned for the peer target database in Data Safe.
     * 
     */
    public Integer key() {
        return this.key;
    }
    /**
     * @return Details about the current state of the peer target database in Data Safe.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Role of the database associated to the peer target database.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return A filter to return only target databases that match the specified lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the database was registered in Data Safe and created as a target database in Data Safe.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The details required to establish a TLS enabled connection.
     * 
     */
    public List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig> tlsConfigs() {
        return this.tlsConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTargetDatabasesTargetDatabasePeerTargetDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail> databaseDetails;
        private String databaseUniqueName;
        private String dataguardAssociationId;
        private String description;
        private String displayName;
        private Integer key;
        private String lifecycleDetails;
        private String role;
        private String state;
        private String timeCreated;
        private List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig> tlsConfigs;
        public Builder() {}
        public Builder(GetTargetDatabasesTargetDatabasePeerTargetDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseDetails = defaults.databaseDetails;
    	      this.databaseUniqueName = defaults.databaseUniqueName;
    	      this.dataguardAssociationId = defaults.dataguardAssociationId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.key = defaults.key;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.tlsConfigs = defaults.tlsConfigs;
        }

        @CustomType.Setter
        public Builder databaseDetails(List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail> databaseDetails) {
            if (databaseDetails == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "databaseDetails");
            }
            this.databaseDetails = databaseDetails;
            return this;
        }
        public Builder databaseDetails(GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail... databaseDetails) {
            return databaseDetails(List.of(databaseDetails));
        }
        @CustomType.Setter
        public Builder databaseUniqueName(String databaseUniqueName) {
            if (databaseUniqueName == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "databaseUniqueName");
            }
            this.databaseUniqueName = databaseUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dataguardAssociationId(String dataguardAssociationId) {
            if (dataguardAssociationId == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "dataguardAssociationId");
            }
            this.dataguardAssociationId = dataguardAssociationId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder key(Integer key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder tlsConfigs(List<GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig> tlsConfigs) {
            if (tlsConfigs == null) {
              throw new MissingRequiredPropertyException("GetTargetDatabasesTargetDatabasePeerTargetDatabase", "tlsConfigs");
            }
            this.tlsConfigs = tlsConfigs;
            return this;
        }
        public Builder tlsConfigs(GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig... tlsConfigs) {
            return tlsConfigs(List.of(tlsConfigs));
        }
        public GetTargetDatabasesTargetDatabasePeerTargetDatabase build() {
            final var _resultValue = new GetTargetDatabasesTargetDatabasePeerTargetDatabase();
            _resultValue.databaseDetails = databaseDetails;
            _resultValue.databaseUniqueName = databaseUniqueName;
            _resultValue.dataguardAssociationId = dataguardAssociationId;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.key = key;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.role = role;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.tlsConfigs = tlsConfigs;
            return _resultValue;
        }
    }
}
