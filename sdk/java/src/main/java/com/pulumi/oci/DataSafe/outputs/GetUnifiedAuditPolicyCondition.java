// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUnifiedAuditPolicyCondition {
    /**
     * @return The OCID of the attribute set.
     * 
     */
    private String attributeSetId;
    /**
     * @return Specifies whether to include or exclude the specified users or roles.
     * 
     */
    private String entitySelection;
    /**
     * @return The type of users or roles that the unified audit policy is applied to.
     * 
     */
    private String entityType;
    /**
     * @return The operation status that the policy must be enabled for.
     * 
     */
    private String operationStatus;
    /**
     * @return List of roles that the policy must be enabled for.
     * 
     */
    private List<String> roleNames;
    /**
     * @return The list of users that the unified audit policy is enabled for.
     * 
     */
    private List<String> userNames;

    private GetUnifiedAuditPolicyCondition() {}
    /**
     * @return The OCID of the attribute set.
     * 
     */
    public String attributeSetId() {
        return this.attributeSetId;
    }
    /**
     * @return Specifies whether to include or exclude the specified users or roles.
     * 
     */
    public String entitySelection() {
        return this.entitySelection;
    }
    /**
     * @return The type of users or roles that the unified audit policy is applied to.
     * 
     */
    public String entityType() {
        return this.entityType;
    }
    /**
     * @return The operation status that the policy must be enabled for.
     * 
     */
    public String operationStatus() {
        return this.operationStatus;
    }
    /**
     * @return List of roles that the policy must be enabled for.
     * 
     */
    public List<String> roleNames() {
        return this.roleNames;
    }
    /**
     * @return The list of users that the unified audit policy is enabled for.
     * 
     */
    public List<String> userNames() {
        return this.userNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUnifiedAuditPolicyCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attributeSetId;
        private String entitySelection;
        private String entityType;
        private String operationStatus;
        private List<String> roleNames;
        private List<String> userNames;
        public Builder() {}
        public Builder(GetUnifiedAuditPolicyCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributeSetId = defaults.attributeSetId;
    	      this.entitySelection = defaults.entitySelection;
    	      this.entityType = defaults.entityType;
    	      this.operationStatus = defaults.operationStatus;
    	      this.roleNames = defaults.roleNames;
    	      this.userNames = defaults.userNames;
        }

        @CustomType.Setter
        public Builder attributeSetId(String attributeSetId) {
            if (attributeSetId == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyCondition", "attributeSetId");
            }
            this.attributeSetId = attributeSetId;
            return this;
        }
        @CustomType.Setter
        public Builder entitySelection(String entitySelection) {
            if (entitySelection == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyCondition", "entitySelection");
            }
            this.entitySelection = entitySelection;
            return this;
        }
        @CustomType.Setter
        public Builder entityType(String entityType) {
            if (entityType == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyCondition", "entityType");
            }
            this.entityType = entityType;
            return this;
        }
        @CustomType.Setter
        public Builder operationStatus(String operationStatus) {
            if (operationStatus == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyCondition", "operationStatus");
            }
            this.operationStatus = operationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder roleNames(List<String> roleNames) {
            if (roleNames == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyCondition", "roleNames");
            }
            this.roleNames = roleNames;
            return this;
        }
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }
        @CustomType.Setter
        public Builder userNames(List<String> userNames) {
            if (userNames == null) {
              throw new MissingRequiredPropertyException("GetUnifiedAuditPolicyCondition", "userNames");
            }
            this.userNames = userNames;
            return this;
        }
        public Builder userNames(String... userNames) {
            return userNames(List.of(userNames));
        }
        public GetUnifiedAuditPolicyCondition build() {
            final var _resultValue = new GetUnifiedAuditPolicyCondition();
            _resultValue.attributeSetId = attributeSetId;
            _resultValue.entitySelection = entitySelection;
            _resultValue.entityType = entityType;
            _resultValue.operationStatus = operationStatus;
            _resultValue.roleNames = roleNames;
            _resultValue.userNames = userNames;
            return _resultValue;
        }
    }
}
