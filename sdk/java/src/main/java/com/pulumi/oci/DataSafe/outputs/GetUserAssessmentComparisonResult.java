// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentComparisonSummary;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserAssessmentComparisonResult {
    private String comparisonUserAssessmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current state of the user assessment comparison.
     * 
     */
    private String state;
    /**
     * @return List containing maps as values. Example: `{&#34;Operations&#34;: [ {&#34;CostCenter&#34;: &#34;42&#34;} ] }`
     * 
     */
    private List<GetUserAssessmentComparisonSummary> summaries;
    /**
     * @return The date and time the user assessment comparison was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    private String userAssessmentId;

    private GetUserAssessmentComparisonResult() {}
    public String comparisonUserAssessmentId() {
        return this.comparisonUserAssessmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of the user assessment comparison.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return List containing maps as values. Example: `{&#34;Operations&#34;: [ {&#34;CostCenter&#34;: &#34;42&#34;} ] }`
     * 
     */
    public List<GetUserAssessmentComparisonSummary> summaries() {
        return this.summaries;
    }
    /**
     * @return The date and time the user assessment comparison was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public String userAssessmentId() {
        return this.userAssessmentId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentComparisonResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comparisonUserAssessmentId;
        private String id;
        private String state;
        private List<GetUserAssessmentComparisonSummary> summaries;
        private String timeCreated;
        private String userAssessmentId;
        public Builder() {}
        public Builder(GetUserAssessmentComparisonResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparisonUserAssessmentId = defaults.comparisonUserAssessmentId;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.summaries = defaults.summaries;
    	      this.timeCreated = defaults.timeCreated;
    	      this.userAssessmentId = defaults.userAssessmentId;
        }

        @CustomType.Setter
        public Builder comparisonUserAssessmentId(String comparisonUserAssessmentId) {
            this.comparisonUserAssessmentId = Objects.requireNonNull(comparisonUserAssessmentId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder summaries(List<GetUserAssessmentComparisonSummary> summaries) {
            this.summaries = Objects.requireNonNull(summaries);
            return this;
        }
        public Builder summaries(GetUserAssessmentComparisonSummary... summaries) {
            return summaries(List.of(summaries));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder userAssessmentId(String userAssessmentId) {
            this.userAssessmentId = Objects.requireNonNull(userAssessmentId);
            return this;
        }
        public GetUserAssessmentComparisonResult build() {
            final var o = new GetUserAssessmentComparisonResult();
            o.comparisonUserAssessmentId = comparisonUserAssessmentId;
            o.id = id;
            o.state = state;
            o.summaries = summaries;
            o.timeCreated = timeCreated;
            o.userAssessmentId = userAssessmentId;
            return o;
        }
    }
}
