// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilter;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserAssessmentPasswordExpiryDateAnalyticsResult {
    private @Nullable String accessLevel;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<GetUserAssessmentPasswordExpiryDateAnalyticsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String timePasswordExpiryLessThan;
    /**
     * @return The list of user_aggregations.
     * 
     */
    private List<GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation> userAggregations;
    private String userAssessmentId;
    private @Nullable String userCategory;

    private GetUserAssessmentPasswordExpiryDateAnalyticsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<GetUserAssessmentPasswordExpiryDateAnalyticsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> timePasswordExpiryLessThan() {
        return Optional.ofNullable(this.timePasswordExpiryLessThan);
    }
    /**
     * @return The list of user_aggregations.
     * 
     */
    public List<GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation> userAggregations() {
        return this.userAggregations;
    }
    public String userAssessmentId() {
        return this.userAssessmentId;
    }
    public Optional<String> userCategory() {
        return Optional.ofNullable(this.userCategory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentPasswordExpiryDateAnalyticsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<GetUserAssessmentPasswordExpiryDateAnalyticsFilter> filters;
        private String id;
        private @Nullable String timePasswordExpiryLessThan;
        private List<GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation> userAggregations;
        private String userAssessmentId;
        private @Nullable String userCategory;
        public Builder() {}
        public Builder(GetUserAssessmentPasswordExpiryDateAnalyticsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.timePasswordExpiryLessThan = defaults.timePasswordExpiryLessThan;
    	      this.userAggregations = defaults.userAggregations;
    	      this.userAssessmentId = defaults.userAssessmentId;
    	      this.userCategory = defaults.userCategory;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetUserAssessmentPasswordExpiryDateAnalyticsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetUserAssessmentPasswordExpiryDateAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentPasswordExpiryDateAnalyticsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder timePasswordExpiryLessThan(@Nullable String timePasswordExpiryLessThan) {

            this.timePasswordExpiryLessThan = timePasswordExpiryLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder userAggregations(List<GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation> userAggregations) {
            if (userAggregations == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentPasswordExpiryDateAnalyticsResult", "userAggregations");
            }
            this.userAggregations = userAggregations;
            return this;
        }
        public Builder userAggregations(GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation... userAggregations) {
            return userAggregations(List.of(userAggregations));
        }
        @CustomType.Setter
        public Builder userAssessmentId(String userAssessmentId) {
            if (userAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentPasswordExpiryDateAnalyticsResult", "userAssessmentId");
            }
            this.userAssessmentId = userAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder userCategory(@Nullable String userCategory) {

            this.userCategory = userCategory;
            return this;
        }
        public GetUserAssessmentPasswordExpiryDateAnalyticsResult build() {
            final var _resultValue = new GetUserAssessmentPasswordExpiryDateAnalyticsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.timePasswordExpiryLessThan = timePasswordExpiryLessThan;
            _resultValue.userAggregations = userAggregations;
            _resultValue.userAssessmentId = userAssessmentId;
            _resultValue.userCategory = userCategory;
            return _resultValue;
        }
    }
}
