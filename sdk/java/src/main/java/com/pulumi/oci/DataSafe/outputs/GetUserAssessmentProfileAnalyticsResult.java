// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentProfileAnalyticsFilter;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentProfileAnalyticsProfileAggregation;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserAssessmentProfileAnalyticsResult {
    private @Nullable String accessLevel;
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<GetUserAssessmentProfileAnalyticsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of profile_aggregations.
     * 
     */
    private List<GetUserAssessmentProfileAnalyticsProfileAggregation> profileAggregations;
    private @Nullable String profileName;
    private @Nullable String targetId;
    private String userAssessmentId;

    private GetUserAssessmentProfileAnalyticsResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<GetUserAssessmentProfileAnalyticsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of profile_aggregations.
     * 
     */
    public List<GetUserAssessmentProfileAnalyticsProfileAggregation> profileAggregations() {
        return this.profileAggregations;
    }
    public Optional<String> profileName() {
        return Optional.ofNullable(this.profileName);
    }
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    public String userAssessmentId() {
        return this.userAssessmentId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentProfileAnalyticsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<GetUserAssessmentProfileAnalyticsFilter> filters;
        private String id;
        private List<GetUserAssessmentProfileAnalyticsProfileAggregation> profileAggregations;
        private @Nullable String profileName;
        private @Nullable String targetId;
        private String userAssessmentId;
        public Builder() {}
        public Builder(GetUserAssessmentProfileAnalyticsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.profileAggregations = defaults.profileAggregations;
    	      this.profileName = defaults.profileName;
    	      this.targetId = defaults.targetId;
    	      this.userAssessmentId = defaults.userAssessmentId;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentProfileAnalyticsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetUserAssessmentProfileAnalyticsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetUserAssessmentProfileAnalyticsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentProfileAnalyticsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder profileAggregations(List<GetUserAssessmentProfileAnalyticsProfileAggregation> profileAggregations) {
            if (profileAggregations == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentProfileAnalyticsResult", "profileAggregations");
            }
            this.profileAggregations = profileAggregations;
            return this;
        }
        public Builder profileAggregations(GetUserAssessmentProfileAnalyticsProfileAggregation... profileAggregations) {
            return profileAggregations(List.of(profileAggregations));
        }
        @CustomType.Setter
        public Builder profileName(@Nullable String profileName) {

            this.profileName = profileName;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder userAssessmentId(String userAssessmentId) {
            if (userAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentProfileAnalyticsResult", "userAssessmentId");
            }
            this.userAssessmentId = userAssessmentId;
            return this;
        }
        public GetUserAssessmentProfileAnalyticsResult build() {
            final var _resultValue = new GetUserAssessmentProfileAnalyticsResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.compartmentId = compartmentId;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.profileAggregations = profileAggregations;
            _resultValue.profileName = profileName;
            _resultValue.targetId = targetId;
            _resultValue.userAssessmentId = userAssessmentId;
            return _resultValue;
        }
    }
}
