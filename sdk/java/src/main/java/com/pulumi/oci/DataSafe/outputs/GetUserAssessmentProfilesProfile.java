// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetUserAssessmentProfilesProfile {
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private String compartmentId;
    /**
     * @return Specify the total resource cost for a session, expressed in service units. Oracle Database calculates the total service units as a weighted sum of CPU_PER_SESSION, CONNECT_TIME, LOGICAL_READS_PER_SESSION, and PRIVATE_SGA.
     * 
     */
    private String compositeLimit;
    /**
     * @return Specify the total elapsed time limit for a session, expressed in minutes.
     * 
     */
    private String connectTime;
    /**
     * @return Specify the CPU time limit for a call (a parse, execute, or fetch), expressed in hundredths of seconds.
     * 
     */
    private String cpuPerCall;
    /**
     * @return Specify the CPU time limit for a session, expressed in hundredth of seconds.
     * 
     */
    private String cpuPerSession;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Maximum times the user is allowed in fail login before the user account is locked.
     * 
     */
    private String failedLoginAttempts;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Specify the permitted periods of continuous inactive time during a  session, expressed in minutes.
     * 
     */
    private String idleTime;
    /**
     * @return The permitted periods of continuous inactive time during a session, expressed in minutes. Long-running queries and other operations are not subjected to this limit.
     * 
     */
    private String inactiveAccountTime;
    /**
     * @return An optional filter to return the user created profiles.
     * 
     */
    private Boolean isUserCreated;
    /**
     * @return Specify the permitted the number of data blocks read for a call to process a SQL statement (a parse, execute, or fetch).
     * 
     */
    private String logicalReadsPerCall;
    /**
     * @return Specify the permitted number of data blocks read in a session, including blocks read from memory and disk.
     * 
     */
    private String logicalReadsPerSession;
    /**
     * @return Number of grace days for user to change password.
     * 
     */
    private String passwordGraceTime;
    /**
     * @return Number of days the password is valid before expiry.
     * 
     */
    private String passwordLifeTime;
    /**
     * @return Number of days the user account remains locked after failed login.
     * 
     */
    private String passwordLockTime;
    /**
     * @return Number of day after the user can use the already used password.
     * 
     */
    private String passwordReuseMax;
    /**
     * @return Number of days before which a password cannot be reused.
     * 
     */
    private String passwordReuseTime;
    /**
     * @return Number of days the password rollover is allowed. Minimum value can be 1/24 day (1 hour) to 60 days.
     * 
     */
    private String passwordRolloverTime;
    /**
     * @return An optional filter to filter the profiles based on password verification function.
     * 
     */
    private String passwordVerificationFunction;
    /**
     * @return Details about the PL/SQL that can be used for password verification.
     * 
     */
    private String passwordVerificationFunctionDetails;
    /**
     * @return Specify the amount of private space a session can allocate in the shared pool of the system global area (SGA), expressed in bytes.
     * 
     */
    private String privateSga;
    /**
     * @return A filter to return only items that match the specified profile name.
     * 
     */
    private String profileName;
    /**
     * @return Specify the number of concurrent sessions to which you want to limit the user.
     * 
     */
    private String sessionsPerUser;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private String targetId;
    /**
     * @return The OCID of the user assessment.
     * 
     */
    private String userAssessmentId;
    /**
     * @return The number of users having a given profile.
     * 
     */
    private Integer userCount;

    private GetUserAssessmentProfilesProfile() {}
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Specify the total resource cost for a session, expressed in service units. Oracle Database calculates the total service units as a weighted sum of CPU_PER_SESSION, CONNECT_TIME, LOGICAL_READS_PER_SESSION, and PRIVATE_SGA.
     * 
     */
    public String compositeLimit() {
        return this.compositeLimit;
    }
    /**
     * @return Specify the total elapsed time limit for a session, expressed in minutes.
     * 
     */
    public String connectTime() {
        return this.connectTime;
    }
    /**
     * @return Specify the CPU time limit for a call (a parse, execute, or fetch), expressed in hundredths of seconds.
     * 
     */
    public String cpuPerCall() {
        return this.cpuPerCall;
    }
    /**
     * @return Specify the CPU time limit for a session, expressed in hundredth of seconds.
     * 
     */
    public String cpuPerSession() {
        return this.cpuPerSession;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Maximum times the user is allowed in fail login before the user account is locked.
     * 
     */
    public String failedLoginAttempts() {
        return this.failedLoginAttempts;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Specify the permitted periods of continuous inactive time during a  session, expressed in minutes.
     * 
     */
    public String idleTime() {
        return this.idleTime;
    }
    /**
     * @return The permitted periods of continuous inactive time during a session, expressed in minutes. Long-running queries and other operations are not subjected to this limit.
     * 
     */
    public String inactiveAccountTime() {
        return this.inactiveAccountTime;
    }
    /**
     * @return An optional filter to return the user created profiles.
     * 
     */
    public Boolean isUserCreated() {
        return this.isUserCreated;
    }
    /**
     * @return Specify the permitted the number of data blocks read for a call to process a SQL statement (a parse, execute, or fetch).
     * 
     */
    public String logicalReadsPerCall() {
        return this.logicalReadsPerCall;
    }
    /**
     * @return Specify the permitted number of data blocks read in a session, including blocks read from memory and disk.
     * 
     */
    public String logicalReadsPerSession() {
        return this.logicalReadsPerSession;
    }
    /**
     * @return Number of grace days for user to change password.
     * 
     */
    public String passwordGraceTime() {
        return this.passwordGraceTime;
    }
    /**
     * @return Number of days the password is valid before expiry.
     * 
     */
    public String passwordLifeTime() {
        return this.passwordLifeTime;
    }
    /**
     * @return Number of days the user account remains locked after failed login.
     * 
     */
    public String passwordLockTime() {
        return this.passwordLockTime;
    }
    /**
     * @return Number of day after the user can use the already used password.
     * 
     */
    public String passwordReuseMax() {
        return this.passwordReuseMax;
    }
    /**
     * @return Number of days before which a password cannot be reused.
     * 
     */
    public String passwordReuseTime() {
        return this.passwordReuseTime;
    }
    /**
     * @return Number of days the password rollover is allowed. Minimum value can be 1/24 day (1 hour) to 60 days.
     * 
     */
    public String passwordRolloverTime() {
        return this.passwordRolloverTime;
    }
    /**
     * @return An optional filter to filter the profiles based on password verification function.
     * 
     */
    public String passwordVerificationFunction() {
        return this.passwordVerificationFunction;
    }
    /**
     * @return Details about the PL/SQL that can be used for password verification.
     * 
     */
    public String passwordVerificationFunctionDetails() {
        return this.passwordVerificationFunctionDetails;
    }
    /**
     * @return Specify the amount of private space a session can allocate in the shared pool of the system global area (SGA), expressed in bytes.
     * 
     */
    public String privateSga() {
        return this.privateSga;
    }
    /**
     * @return A filter to return only items that match the specified profile name.
     * 
     */
    public String profileName() {
        return this.profileName;
    }
    /**
     * @return Specify the number of concurrent sessions to which you want to limit the user.
     * 
     */
    public String sessionsPerUser() {
        return this.sessionsPerUser;
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The OCID of the user assessment.
     * 
     */
    public String userAssessmentId() {
        return this.userAssessmentId;
    }
    /**
     * @return The number of users having a given profile.
     * 
     */
    public Integer userCount() {
        return this.userCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentProfilesProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String compositeLimit;
        private String connectTime;
        private String cpuPerCall;
        private String cpuPerSession;
        private Map<String,Object> definedTags;
        private String failedLoginAttempts;
        private Map<String,Object> freeformTags;
        private String idleTime;
        private String inactiveAccountTime;
        private Boolean isUserCreated;
        private String logicalReadsPerCall;
        private String logicalReadsPerSession;
        private String passwordGraceTime;
        private String passwordLifeTime;
        private String passwordLockTime;
        private String passwordReuseMax;
        private String passwordReuseTime;
        private String passwordRolloverTime;
        private String passwordVerificationFunction;
        private String passwordVerificationFunctionDetails;
        private String privateSga;
        private String profileName;
        private String sessionsPerUser;
        private String targetId;
        private String userAssessmentId;
        private Integer userCount;
        public Builder() {}
        public Builder(GetUserAssessmentProfilesProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compositeLimit = defaults.compositeLimit;
    	      this.connectTime = defaults.connectTime;
    	      this.cpuPerCall = defaults.cpuPerCall;
    	      this.cpuPerSession = defaults.cpuPerSession;
    	      this.definedTags = defaults.definedTags;
    	      this.failedLoginAttempts = defaults.failedLoginAttempts;
    	      this.freeformTags = defaults.freeformTags;
    	      this.idleTime = defaults.idleTime;
    	      this.inactiveAccountTime = defaults.inactiveAccountTime;
    	      this.isUserCreated = defaults.isUserCreated;
    	      this.logicalReadsPerCall = defaults.logicalReadsPerCall;
    	      this.logicalReadsPerSession = defaults.logicalReadsPerSession;
    	      this.passwordGraceTime = defaults.passwordGraceTime;
    	      this.passwordLifeTime = defaults.passwordLifeTime;
    	      this.passwordLockTime = defaults.passwordLockTime;
    	      this.passwordReuseMax = defaults.passwordReuseMax;
    	      this.passwordReuseTime = defaults.passwordReuseTime;
    	      this.passwordRolloverTime = defaults.passwordRolloverTime;
    	      this.passwordVerificationFunction = defaults.passwordVerificationFunction;
    	      this.passwordVerificationFunctionDetails = defaults.passwordVerificationFunctionDetails;
    	      this.privateSga = defaults.privateSga;
    	      this.profileName = defaults.profileName;
    	      this.sessionsPerUser = defaults.sessionsPerUser;
    	      this.targetId = defaults.targetId;
    	      this.userAssessmentId = defaults.userAssessmentId;
    	      this.userCount = defaults.userCount;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compositeLimit(String compositeLimit) {
            this.compositeLimit = Objects.requireNonNull(compositeLimit);
            return this;
        }
        @CustomType.Setter
        public Builder connectTime(String connectTime) {
            this.connectTime = Objects.requireNonNull(connectTime);
            return this;
        }
        @CustomType.Setter
        public Builder cpuPerCall(String cpuPerCall) {
            this.cpuPerCall = Objects.requireNonNull(cpuPerCall);
            return this;
        }
        @CustomType.Setter
        public Builder cpuPerSession(String cpuPerSession) {
            this.cpuPerSession = Objects.requireNonNull(cpuPerSession);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder failedLoginAttempts(String failedLoginAttempts) {
            this.failedLoginAttempts = Objects.requireNonNull(failedLoginAttempts);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder idleTime(String idleTime) {
            this.idleTime = Objects.requireNonNull(idleTime);
            return this;
        }
        @CustomType.Setter
        public Builder inactiveAccountTime(String inactiveAccountTime) {
            this.inactiveAccountTime = Objects.requireNonNull(inactiveAccountTime);
            return this;
        }
        @CustomType.Setter
        public Builder isUserCreated(Boolean isUserCreated) {
            this.isUserCreated = Objects.requireNonNull(isUserCreated);
            return this;
        }
        @CustomType.Setter
        public Builder logicalReadsPerCall(String logicalReadsPerCall) {
            this.logicalReadsPerCall = Objects.requireNonNull(logicalReadsPerCall);
            return this;
        }
        @CustomType.Setter
        public Builder logicalReadsPerSession(String logicalReadsPerSession) {
            this.logicalReadsPerSession = Objects.requireNonNull(logicalReadsPerSession);
            return this;
        }
        @CustomType.Setter
        public Builder passwordGraceTime(String passwordGraceTime) {
            this.passwordGraceTime = Objects.requireNonNull(passwordGraceTime);
            return this;
        }
        @CustomType.Setter
        public Builder passwordLifeTime(String passwordLifeTime) {
            this.passwordLifeTime = Objects.requireNonNull(passwordLifeTime);
            return this;
        }
        @CustomType.Setter
        public Builder passwordLockTime(String passwordLockTime) {
            this.passwordLockTime = Objects.requireNonNull(passwordLockTime);
            return this;
        }
        @CustomType.Setter
        public Builder passwordReuseMax(String passwordReuseMax) {
            this.passwordReuseMax = Objects.requireNonNull(passwordReuseMax);
            return this;
        }
        @CustomType.Setter
        public Builder passwordReuseTime(String passwordReuseTime) {
            this.passwordReuseTime = Objects.requireNonNull(passwordReuseTime);
            return this;
        }
        @CustomType.Setter
        public Builder passwordRolloverTime(String passwordRolloverTime) {
            this.passwordRolloverTime = Objects.requireNonNull(passwordRolloverTime);
            return this;
        }
        @CustomType.Setter
        public Builder passwordVerificationFunction(String passwordVerificationFunction) {
            this.passwordVerificationFunction = Objects.requireNonNull(passwordVerificationFunction);
            return this;
        }
        @CustomType.Setter
        public Builder passwordVerificationFunctionDetails(String passwordVerificationFunctionDetails) {
            this.passwordVerificationFunctionDetails = Objects.requireNonNull(passwordVerificationFunctionDetails);
            return this;
        }
        @CustomType.Setter
        public Builder privateSga(String privateSga) {
            this.privateSga = Objects.requireNonNull(privateSga);
            return this;
        }
        @CustomType.Setter
        public Builder profileName(String profileName) {
            this.profileName = Objects.requireNonNull(profileName);
            return this;
        }
        @CustomType.Setter
        public Builder sessionsPerUser(String sessionsPerUser) {
            this.sessionsPerUser = Objects.requireNonNull(sessionsPerUser);
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        @CustomType.Setter
        public Builder userAssessmentId(String userAssessmentId) {
            this.userAssessmentId = Objects.requireNonNull(userAssessmentId);
            return this;
        }
        @CustomType.Setter
        public Builder userCount(Integer userCount) {
            this.userCount = Objects.requireNonNull(userCount);
            return this;
        }
        public GetUserAssessmentProfilesProfile build() {
            final var _resultValue = new GetUserAssessmentProfilesProfile();
            _resultValue.compartmentId = compartmentId;
            _resultValue.compositeLimit = compositeLimit;
            _resultValue.connectTime = connectTime;
            _resultValue.cpuPerCall = cpuPerCall;
            _resultValue.cpuPerSession = cpuPerSession;
            _resultValue.definedTags = definedTags;
            _resultValue.failedLoginAttempts = failedLoginAttempts;
            _resultValue.freeformTags = freeformTags;
            _resultValue.idleTime = idleTime;
            _resultValue.inactiveAccountTime = inactiveAccountTime;
            _resultValue.isUserCreated = isUserCreated;
            _resultValue.logicalReadsPerCall = logicalReadsPerCall;
            _resultValue.logicalReadsPerSession = logicalReadsPerSession;
            _resultValue.passwordGraceTime = passwordGraceTime;
            _resultValue.passwordLifeTime = passwordLifeTime;
            _resultValue.passwordLockTime = passwordLockTime;
            _resultValue.passwordReuseMax = passwordReuseMax;
            _resultValue.passwordReuseTime = passwordReuseTime;
            _resultValue.passwordRolloverTime = passwordRolloverTime;
            _resultValue.passwordVerificationFunction = passwordVerificationFunction;
            _resultValue.passwordVerificationFunctionDetails = passwordVerificationFunctionDetails;
            _resultValue.privateSga = privateSga;
            _resultValue.profileName = profileName;
            _resultValue.sessionsPerUser = sessionsPerUser;
            _resultValue.targetId = targetId;
            _resultValue.userAssessmentId = userAssessmentId;
            _resultValue.userCount = userCount;
            return _resultValue;
        }
    }
}
