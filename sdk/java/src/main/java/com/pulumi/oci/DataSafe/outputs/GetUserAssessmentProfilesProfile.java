// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserAssessmentProfilesProfile {
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Specify the total resource cost for a session, expressed in service units. Oracle Database calculates the total service units as a weighted sum of CPU_PER_SESSION, CONNECT_TIME, LOGICAL_READS_PER_SESSION, and PRIVATE_SGA.
     * 
     */
    private @Nullable String compositeLimit;
    /**
     * @return Specify the total elapsed time limit for a session, expressed in minutes.
     * 
     */
    private @Nullable String connectTime;
    /**
     * @return Specify the CPU time limit for a call (a parse, execute, or fetch), expressed in hundredths of seconds.
     * 
     */
    private @Nullable String cpuPerCall;
    /**
     * @return Specify the CPU time limit for a session, expressed in hundredth of seconds.
     * 
     */
    private @Nullable String cpuPerSession;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Maximum times the user is allowed in fail login before the user account is locked.
     * 
     */
    private @Nullable String failedLoginAttempts;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return Specify the permitted periods of continuous inactive time during a  session, expressed in minutes.
     * 
     */
    private @Nullable String idleTime;
    /**
     * @return The permitted periods of continuous inactive time during a session, expressed in minutes. Long-running queries and other operations are not subjected to this limit.
     * 
     */
    private @Nullable String inactiveAccountTime;
    /**
     * @return An optional filter to return the user created profiles.
     * 
     */
    private @Nullable Boolean isUserCreated;
    /**
     * @return Specify the permitted the number of data blocks read for a call to process a SQL statement (a parse, execute, or fetch).
     * 
     */
    private @Nullable String logicalReadsPerCall;
    /**
     * @return Specify the permitted number of data blocks read in a session, including blocks read from memory and disk.
     * 
     */
    private @Nullable String logicalReadsPerSession;
    /**
     * @return Number of grace days for user to change password.
     * 
     */
    private @Nullable String passwordGraceTime;
    /**
     * @return Number of days the password is valid before expiry.
     * 
     */
    private @Nullable String passwordLifeTime;
    /**
     * @return Number of days the user account remains locked after failed login.
     * 
     */
    private @Nullable String passwordLockTime;
    /**
     * @return Number of day after the user can use the already used password.
     * 
     */
    private @Nullable String passwordReuseMax;
    /**
     * @return Number of days before which a password cannot be reused.
     * 
     */
    private @Nullable String passwordReuseTime;
    /**
     * @return Number of days the password rollover is allowed. Minimum value can be 1/24 day (1 hour) to 60 days.
     * 
     */
    private @Nullable String passwordRolloverTime;
    /**
     * @return An optional filter to filter the profiles based on password verification function.
     * 
     */
    private @Nullable String passwordVerificationFunction;
    /**
     * @return Details about the PL/SQL that can be used for password verification.
     * 
     */
    private @Nullable String passwordVerificationFunctionDetails;
    /**
     * @return Specify the amount of private space a session can allocate in the shared pool of the system global area (SGA), expressed in bytes.
     * 
     */
    private @Nullable String privateSga;
    /**
     * @return A filter to return only items that match the specified profile name.
     * 
     */
    private @Nullable String profileName;
    /**
     * @return Specify the number of concurrent sessions to which you want to limit the user.
     * 
     */
    private @Nullable String sessionsPerUser;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The OCID of the user assessment.
     * 
     */
    private @Nullable String userAssessmentId;
    /**
     * @return The number of users that have a given profile.
     * 
     */
    private @Nullable Integer userCount;

    private GetUserAssessmentProfilesProfile() {}
    /**
     * @return A filter to return only resources that match the specified compartment OCID.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Specify the total resource cost for a session, expressed in service units. Oracle Database calculates the total service units as a weighted sum of CPU_PER_SESSION, CONNECT_TIME, LOGICAL_READS_PER_SESSION, and PRIVATE_SGA.
     * 
     */
    public Optional<String> compositeLimit() {
        return Optional.ofNullable(this.compositeLimit);
    }
    /**
     * @return Specify the total elapsed time limit for a session, expressed in minutes.
     * 
     */
    public Optional<String> connectTime() {
        return Optional.ofNullable(this.connectTime);
    }
    /**
     * @return Specify the CPU time limit for a call (a parse, execute, or fetch), expressed in hundredths of seconds.
     * 
     */
    public Optional<String> cpuPerCall() {
        return Optional.ofNullable(this.cpuPerCall);
    }
    /**
     * @return Specify the CPU time limit for a session, expressed in hundredth of seconds.
     * 
     */
    public Optional<String> cpuPerSession() {
        return Optional.ofNullable(this.cpuPerSession);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Maximum times the user is allowed in fail login before the user account is locked.
     * 
     */
    public Optional<String> failedLoginAttempts() {
        return Optional.ofNullable(this.failedLoginAttempts);
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return Specify the permitted periods of continuous inactive time during a  session, expressed in minutes.
     * 
     */
    public Optional<String> idleTime() {
        return Optional.ofNullable(this.idleTime);
    }
    /**
     * @return The permitted periods of continuous inactive time during a session, expressed in minutes. Long-running queries and other operations are not subjected to this limit.
     * 
     */
    public Optional<String> inactiveAccountTime() {
        return Optional.ofNullable(this.inactiveAccountTime);
    }
    /**
     * @return An optional filter to return the user created profiles.
     * 
     */
    public Optional<Boolean> isUserCreated() {
        return Optional.ofNullable(this.isUserCreated);
    }
    /**
     * @return Specify the permitted the number of data blocks read for a call to process a SQL statement (a parse, execute, or fetch).
     * 
     */
    public Optional<String> logicalReadsPerCall() {
        return Optional.ofNullable(this.logicalReadsPerCall);
    }
    /**
     * @return Specify the permitted number of data blocks read in a session, including blocks read from memory and disk.
     * 
     */
    public Optional<String> logicalReadsPerSession() {
        return Optional.ofNullable(this.logicalReadsPerSession);
    }
    /**
     * @return Number of grace days for user to change password.
     * 
     */
    public Optional<String> passwordGraceTime() {
        return Optional.ofNullable(this.passwordGraceTime);
    }
    /**
     * @return Number of days the password is valid before expiry.
     * 
     */
    public Optional<String> passwordLifeTime() {
        return Optional.ofNullable(this.passwordLifeTime);
    }
    /**
     * @return Number of days the user account remains locked after failed login.
     * 
     */
    public Optional<String> passwordLockTime() {
        return Optional.ofNullable(this.passwordLockTime);
    }
    /**
     * @return Number of day after the user can use the already used password.
     * 
     */
    public Optional<String> passwordReuseMax() {
        return Optional.ofNullable(this.passwordReuseMax);
    }
    /**
     * @return Number of days before which a password cannot be reused.
     * 
     */
    public Optional<String> passwordReuseTime() {
        return Optional.ofNullable(this.passwordReuseTime);
    }
    /**
     * @return Number of days the password rollover is allowed. Minimum value can be 1/24 day (1 hour) to 60 days.
     * 
     */
    public Optional<String> passwordRolloverTime() {
        return Optional.ofNullable(this.passwordRolloverTime);
    }
    /**
     * @return An optional filter to filter the profiles based on password verification function.
     * 
     */
    public Optional<String> passwordVerificationFunction() {
        return Optional.ofNullable(this.passwordVerificationFunction);
    }
    /**
     * @return Details about the PL/SQL that can be used for password verification.
     * 
     */
    public Optional<String> passwordVerificationFunctionDetails() {
        return Optional.ofNullable(this.passwordVerificationFunctionDetails);
    }
    /**
     * @return Specify the amount of private space a session can allocate in the shared pool of the system global area (SGA), expressed in bytes.
     * 
     */
    public Optional<String> privateSga() {
        return Optional.ofNullable(this.privateSga);
    }
    /**
     * @return A filter to return only items that match the specified profile name.
     * 
     */
    public Optional<String> profileName() {
        return Optional.ofNullable(this.profileName);
    }
    /**
     * @return Specify the number of concurrent sessions to which you want to limit the user.
     * 
     */
    public Optional<String> sessionsPerUser() {
        return Optional.ofNullable(this.sessionsPerUser);
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The OCID of the user assessment.
     * 
     */
    public Optional<String> userAssessmentId() {
        return Optional.ofNullable(this.userAssessmentId);
    }
    /**
     * @return The number of users that have a given profile.
     * 
     */
    public Optional<Integer> userCount() {
        return Optional.ofNullable(this.userCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentProfilesProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String compositeLimit;
        private @Nullable String connectTime;
        private @Nullable String cpuPerCall;
        private @Nullable String cpuPerSession;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String failedLoginAttempts;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String idleTime;
        private @Nullable String inactiveAccountTime;
        private @Nullable Boolean isUserCreated;
        private @Nullable String logicalReadsPerCall;
        private @Nullable String logicalReadsPerSession;
        private @Nullable String passwordGraceTime;
        private @Nullable String passwordLifeTime;
        private @Nullable String passwordLockTime;
        private @Nullable String passwordReuseMax;
        private @Nullable String passwordReuseTime;
        private @Nullable String passwordRolloverTime;
        private @Nullable String passwordVerificationFunction;
        private @Nullable String passwordVerificationFunctionDetails;
        private @Nullable String privateSga;
        private @Nullable String profileName;
        private @Nullable String sessionsPerUser;
        private @Nullable String targetId;
        private @Nullable String userAssessmentId;
        private @Nullable Integer userCount;
        public Builder() {}
        public Builder(GetUserAssessmentProfilesProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.compositeLimit = defaults.compositeLimit;
    	      this.connectTime = defaults.connectTime;
    	      this.cpuPerCall = defaults.cpuPerCall;
    	      this.cpuPerSession = defaults.cpuPerSession;
    	      this.definedTags = defaults.definedTags;
    	      this.failedLoginAttempts = defaults.failedLoginAttempts;
    	      this.freeformTags = defaults.freeformTags;
    	      this.idleTime = defaults.idleTime;
    	      this.inactiveAccountTime = defaults.inactiveAccountTime;
    	      this.isUserCreated = defaults.isUserCreated;
    	      this.logicalReadsPerCall = defaults.logicalReadsPerCall;
    	      this.logicalReadsPerSession = defaults.logicalReadsPerSession;
    	      this.passwordGraceTime = defaults.passwordGraceTime;
    	      this.passwordLifeTime = defaults.passwordLifeTime;
    	      this.passwordLockTime = defaults.passwordLockTime;
    	      this.passwordReuseMax = defaults.passwordReuseMax;
    	      this.passwordReuseTime = defaults.passwordReuseTime;
    	      this.passwordRolloverTime = defaults.passwordRolloverTime;
    	      this.passwordVerificationFunction = defaults.passwordVerificationFunction;
    	      this.passwordVerificationFunctionDetails = defaults.passwordVerificationFunctionDetails;
    	      this.privateSga = defaults.privateSga;
    	      this.profileName = defaults.profileName;
    	      this.sessionsPerUser = defaults.sessionsPerUser;
    	      this.targetId = defaults.targetId;
    	      this.userAssessmentId = defaults.userAssessmentId;
    	      this.userCount = defaults.userCount;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder compositeLimit(@Nullable String compositeLimit) {
            this.compositeLimit = compositeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder connectTime(@Nullable String connectTime) {
            this.connectTime = connectTime;
            return this;
        }
        @CustomType.Setter
        public Builder cpuPerCall(@Nullable String cpuPerCall) {
            this.cpuPerCall = cpuPerCall;
            return this;
        }
        @CustomType.Setter
        public Builder cpuPerSession(@Nullable String cpuPerSession) {
            this.cpuPerSession = cpuPerSession;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder failedLoginAttempts(@Nullable String failedLoginAttempts) {
            this.failedLoginAttempts = failedLoginAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder idleTime(@Nullable String idleTime) {
            this.idleTime = idleTime;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveAccountTime(@Nullable String inactiveAccountTime) {
            this.inactiveAccountTime = inactiveAccountTime;
            return this;
        }
        @CustomType.Setter
        public Builder isUserCreated(@Nullable Boolean isUserCreated) {
            this.isUserCreated = isUserCreated;
            return this;
        }
        @CustomType.Setter
        public Builder logicalReadsPerCall(@Nullable String logicalReadsPerCall) {
            this.logicalReadsPerCall = logicalReadsPerCall;
            return this;
        }
        @CustomType.Setter
        public Builder logicalReadsPerSession(@Nullable String logicalReadsPerSession) {
            this.logicalReadsPerSession = logicalReadsPerSession;
            return this;
        }
        @CustomType.Setter
        public Builder passwordGraceTime(@Nullable String passwordGraceTime) {
            this.passwordGraceTime = passwordGraceTime;
            return this;
        }
        @CustomType.Setter
        public Builder passwordLifeTime(@Nullable String passwordLifeTime) {
            this.passwordLifeTime = passwordLifeTime;
            return this;
        }
        @CustomType.Setter
        public Builder passwordLockTime(@Nullable String passwordLockTime) {
            this.passwordLockTime = passwordLockTime;
            return this;
        }
        @CustomType.Setter
        public Builder passwordReuseMax(@Nullable String passwordReuseMax) {
            this.passwordReuseMax = passwordReuseMax;
            return this;
        }
        @CustomType.Setter
        public Builder passwordReuseTime(@Nullable String passwordReuseTime) {
            this.passwordReuseTime = passwordReuseTime;
            return this;
        }
        @CustomType.Setter
        public Builder passwordRolloverTime(@Nullable String passwordRolloverTime) {
            this.passwordRolloverTime = passwordRolloverTime;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVerificationFunction(@Nullable String passwordVerificationFunction) {
            this.passwordVerificationFunction = passwordVerificationFunction;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVerificationFunctionDetails(@Nullable String passwordVerificationFunctionDetails) {
            this.passwordVerificationFunctionDetails = passwordVerificationFunctionDetails;
            return this;
        }
        @CustomType.Setter
        public Builder privateSga(@Nullable String privateSga) {
            this.privateSga = privateSga;
            return this;
        }
        @CustomType.Setter
        public Builder profileName(@Nullable String profileName) {
            this.profileName = profileName;
            return this;
        }
        @CustomType.Setter
        public Builder sessionsPerUser(@Nullable String sessionsPerUser) {
            this.sessionsPerUser = sessionsPerUser;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder userAssessmentId(@Nullable String userAssessmentId) {
            this.userAssessmentId = userAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder userCount(@Nullable Integer userCount) {
            this.userCount = userCount;
            return this;
        }
        public GetUserAssessmentProfilesProfile build() {
            final var o = new GetUserAssessmentProfilesProfile();
            o.compartmentId = compartmentId;
            o.compositeLimit = compositeLimit;
            o.connectTime = connectTime;
            o.cpuPerCall = cpuPerCall;
            o.cpuPerSession = cpuPerSession;
            o.definedTags = definedTags;
            o.failedLoginAttempts = failedLoginAttempts;
            o.freeformTags = freeformTags;
            o.idleTime = idleTime;
            o.inactiveAccountTime = inactiveAccountTime;
            o.isUserCreated = isUserCreated;
            o.logicalReadsPerCall = logicalReadsPerCall;
            o.logicalReadsPerSession = logicalReadsPerSession;
            o.passwordGraceTime = passwordGraceTime;
            o.passwordLifeTime = passwordLifeTime;
            o.passwordLockTime = passwordLockTime;
            o.passwordReuseMax = passwordReuseMax;
            o.passwordReuseTime = passwordReuseTime;
            o.passwordRolloverTime = passwordRolloverTime;
            o.passwordVerificationFunction = passwordVerificationFunction;
            o.passwordVerificationFunctionDetails = passwordVerificationFunctionDetails;
            o.privateSga = privateSga;
            o.profileName = profileName;
            o.sessionsPerUser = sessionsPerUser;
            o.targetId = targetId;
            o.userAssessmentId = userAssessmentId;
            o.userCount = userCount;
            return o;
        }
    }
}
