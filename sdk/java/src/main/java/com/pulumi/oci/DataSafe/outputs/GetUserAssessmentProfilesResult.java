// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentProfilesFilter;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentProfilesProfile;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserAssessmentProfilesResult {
    private @Nullable String accessLevel;
    /**
     * @return The OCID of the compartment that contains the user assessment.
     * 
     */
    private String compartmentId;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable String failedLoginAttemptsGreaterThanOrEqual;
    private @Nullable String failedLoginAttemptsLessThan;
    private @Nullable List<GetUserAssessmentProfilesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private @Nullable String inactiveAccountTimeGreaterThanOrEqual;
    private @Nullable String inactiveAccountTimeLessThan;
    /**
     * @return Represents if the profile is created by user.
     * 
     */
    private @Nullable Boolean isUserCreated;
    private @Nullable String passwordLockTimeGreaterThanOrEqual;
    private @Nullable String passwordLockTimeLessThan;
    /**
     * @return Name of the PL/SQL that can be used for password verification.
     * 
     */
    private @Nullable String passwordVerificationFunction;
    /**
     * @return The name of the profile.
     * 
     */
    private @Nullable String profileName;
    /**
     * @return The list of profiles.
     * 
     */
    private @Nullable List<GetUserAssessmentProfilesProfile> profiles;
    private @Nullable String sessionsPerUserGreaterThanOrEqual;
    private @Nullable String sessionsPerUserLessThan;
    /**
     * @return The OCID of the target database.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The OCID of the latest user assessment corresponding to the target under consideration. A compartment  type assessment can also be passed to profiles from all the targets from the corresponding compartment.
     * 
     */
    private String userAssessmentId;
    private @Nullable String userCountGreaterThanOrEqual;
    private @Nullable String userCountLessThan;

    private GetUserAssessmentProfilesResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The OCID of the compartment that contains the user assessment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public Optional<String> failedLoginAttemptsGreaterThanOrEqual() {
        return Optional.ofNullable(this.failedLoginAttemptsGreaterThanOrEqual);
    }
    public Optional<String> failedLoginAttemptsLessThan() {
        return Optional.ofNullable(this.failedLoginAttemptsLessThan);
    }
    public List<GetUserAssessmentProfilesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<String> inactiveAccountTimeGreaterThanOrEqual() {
        return Optional.ofNullable(this.inactiveAccountTimeGreaterThanOrEqual);
    }
    public Optional<String> inactiveAccountTimeLessThan() {
        return Optional.ofNullable(this.inactiveAccountTimeLessThan);
    }
    /**
     * @return Represents if the profile is created by user.
     * 
     */
    public Optional<Boolean> isUserCreated() {
        return Optional.ofNullable(this.isUserCreated);
    }
    public Optional<String> passwordLockTimeGreaterThanOrEqual() {
        return Optional.ofNullable(this.passwordLockTimeGreaterThanOrEqual);
    }
    public Optional<String> passwordLockTimeLessThan() {
        return Optional.ofNullable(this.passwordLockTimeLessThan);
    }
    /**
     * @return Name of the PL/SQL that can be used for password verification.
     * 
     */
    public Optional<String> passwordVerificationFunction() {
        return Optional.ofNullable(this.passwordVerificationFunction);
    }
    /**
     * @return The name of the profile.
     * 
     */
    public Optional<String> profileName() {
        return Optional.ofNullable(this.profileName);
    }
    /**
     * @return The list of profiles.
     * 
     */
    public List<GetUserAssessmentProfilesProfile> profiles() {
        return this.profiles == null ? List.of() : this.profiles;
    }
    public Optional<String> sessionsPerUserGreaterThanOrEqual() {
        return Optional.ofNullable(this.sessionsPerUserGreaterThanOrEqual);
    }
    public Optional<String> sessionsPerUserLessThan() {
        return Optional.ofNullable(this.sessionsPerUserLessThan);
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The OCID of the latest user assessment corresponding to the target under consideration. A compartment  type assessment can also be passed to profiles from all the targets from the corresponding compartment.
     * 
     */
    public String userAssessmentId() {
        return this.userAssessmentId;
    }
    public Optional<String> userCountGreaterThanOrEqual() {
        return Optional.ofNullable(this.userCountGreaterThanOrEqual);
    }
    public Optional<String> userCountLessThan() {
        return Optional.ofNullable(this.userCountLessThan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentProfilesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private String compartmentId;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable String failedLoginAttemptsGreaterThanOrEqual;
        private @Nullable String failedLoginAttemptsLessThan;
        private @Nullable List<GetUserAssessmentProfilesFilter> filters;
        private @Nullable String id;
        private @Nullable String inactiveAccountTimeGreaterThanOrEqual;
        private @Nullable String inactiveAccountTimeLessThan;
        private @Nullable Boolean isUserCreated;
        private @Nullable String passwordLockTimeGreaterThanOrEqual;
        private @Nullable String passwordLockTimeLessThan;
        private @Nullable String passwordVerificationFunction;
        private @Nullable String profileName;
        private @Nullable List<GetUserAssessmentProfilesProfile> profiles;
        private @Nullable String sessionsPerUserGreaterThanOrEqual;
        private @Nullable String sessionsPerUserLessThan;
        private @Nullable String targetId;
        private String userAssessmentId;
        private @Nullable String userCountGreaterThanOrEqual;
        private @Nullable String userCountLessThan;
        public Builder() {}
        public Builder(GetUserAssessmentProfilesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.compartmentId = defaults.compartmentId;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.failedLoginAttemptsGreaterThanOrEqual = defaults.failedLoginAttemptsGreaterThanOrEqual;
    	      this.failedLoginAttemptsLessThan = defaults.failedLoginAttemptsLessThan;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.inactiveAccountTimeGreaterThanOrEqual = defaults.inactiveAccountTimeGreaterThanOrEqual;
    	      this.inactiveAccountTimeLessThan = defaults.inactiveAccountTimeLessThan;
    	      this.isUserCreated = defaults.isUserCreated;
    	      this.passwordLockTimeGreaterThanOrEqual = defaults.passwordLockTimeGreaterThanOrEqual;
    	      this.passwordLockTimeLessThan = defaults.passwordLockTimeLessThan;
    	      this.passwordVerificationFunction = defaults.passwordVerificationFunction;
    	      this.profileName = defaults.profileName;
    	      this.profiles = defaults.profiles;
    	      this.sessionsPerUserGreaterThanOrEqual = defaults.sessionsPerUserGreaterThanOrEqual;
    	      this.sessionsPerUserLessThan = defaults.sessionsPerUserLessThan;
    	      this.targetId = defaults.targetId;
    	      this.userAssessmentId = defaults.userAssessmentId;
    	      this.userCountGreaterThanOrEqual = defaults.userCountGreaterThanOrEqual;
    	      this.userCountLessThan = defaults.userCountLessThan;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder failedLoginAttemptsGreaterThanOrEqual(@Nullable String failedLoginAttemptsGreaterThanOrEqual) {
            this.failedLoginAttemptsGreaterThanOrEqual = failedLoginAttemptsGreaterThanOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder failedLoginAttemptsLessThan(@Nullable String failedLoginAttemptsLessThan) {
            this.failedLoginAttemptsLessThan = failedLoginAttemptsLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetUserAssessmentProfilesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetUserAssessmentProfilesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveAccountTimeGreaterThanOrEqual(@Nullable String inactiveAccountTimeGreaterThanOrEqual) {
            this.inactiveAccountTimeGreaterThanOrEqual = inactiveAccountTimeGreaterThanOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveAccountTimeLessThan(@Nullable String inactiveAccountTimeLessThan) {
            this.inactiveAccountTimeLessThan = inactiveAccountTimeLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder isUserCreated(@Nullable Boolean isUserCreated) {
            this.isUserCreated = isUserCreated;
            return this;
        }
        @CustomType.Setter
        public Builder passwordLockTimeGreaterThanOrEqual(@Nullable String passwordLockTimeGreaterThanOrEqual) {
            this.passwordLockTimeGreaterThanOrEqual = passwordLockTimeGreaterThanOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder passwordLockTimeLessThan(@Nullable String passwordLockTimeLessThan) {
            this.passwordLockTimeLessThan = passwordLockTimeLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVerificationFunction(@Nullable String passwordVerificationFunction) {
            this.passwordVerificationFunction = passwordVerificationFunction;
            return this;
        }
        @CustomType.Setter
        public Builder profileName(@Nullable String profileName) {
            this.profileName = profileName;
            return this;
        }
        @CustomType.Setter
        public Builder profiles(@Nullable List<GetUserAssessmentProfilesProfile> profiles) {
            this.profiles = profiles;
            return this;
        }
        public Builder profiles(GetUserAssessmentProfilesProfile... profiles) {
            return profiles(List.of(profiles));
        }
        @CustomType.Setter
        public Builder sessionsPerUserGreaterThanOrEqual(@Nullable String sessionsPerUserGreaterThanOrEqual) {
            this.sessionsPerUserGreaterThanOrEqual = sessionsPerUserGreaterThanOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder sessionsPerUserLessThan(@Nullable String sessionsPerUserLessThan) {
            this.sessionsPerUserLessThan = sessionsPerUserLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder userAssessmentId(String userAssessmentId) {
            this.userAssessmentId = Objects.requireNonNull(userAssessmentId);
            return this;
        }
        @CustomType.Setter
        public Builder userCountGreaterThanOrEqual(@Nullable String userCountGreaterThanOrEqual) {
            this.userCountGreaterThanOrEqual = userCountGreaterThanOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder userCountLessThan(@Nullable String userCountLessThan) {
            this.userCountLessThan = userCountLessThan;
            return this;
        }
        public GetUserAssessmentProfilesResult build() {
            final var o = new GetUserAssessmentProfilesResult();
            o.accessLevel = accessLevel;
            o.compartmentId = compartmentId;
            o.compartmentIdInSubtree = compartmentIdInSubtree;
            o.failedLoginAttemptsGreaterThanOrEqual = failedLoginAttemptsGreaterThanOrEqual;
            o.failedLoginAttemptsLessThan = failedLoginAttemptsLessThan;
            o.filters = filters;
            o.id = id;
            o.inactiveAccountTimeGreaterThanOrEqual = inactiveAccountTimeGreaterThanOrEqual;
            o.inactiveAccountTimeLessThan = inactiveAccountTimeLessThan;
            o.isUserCreated = isUserCreated;
            o.passwordLockTimeGreaterThanOrEqual = passwordLockTimeGreaterThanOrEqual;
            o.passwordLockTimeLessThan = passwordLockTimeLessThan;
            o.passwordVerificationFunction = passwordVerificationFunction;
            o.profileName = profileName;
            o.profiles = profiles;
            o.sessionsPerUserGreaterThanOrEqual = sessionsPerUserGreaterThanOrEqual;
            o.sessionsPerUserLessThan = sessionsPerUserLessThan;
            o.targetId = targetId;
            o.userAssessmentId = userAssessmentId;
            o.userCountGreaterThanOrEqual = userCountGreaterThanOrEqual;
            o.userCountLessThan = userCountLessThan;
            return o;
        }
    }
}
