// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentUsersFilter;
import com.pulumi.oci.DataSafe.outputs.GetUserAssessmentUsersUser;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserAssessmentUsersResult {
    private @Nullable String accessLevel;
    /**
     * @return The status of the user account.
     * 
     */
    private @Nullable String accountStatus;
    /**
     * @return Indicates whether the user has access to all the schemas.
     * 
     */
    private @Nullable Boolean areAllSchemasAccessible;
    /**
     * @return The user authentication method.
     * 
     */
    private @Nullable String authenticationType;
    private @Nullable Boolean compartmentIdInSubtree;
    private @Nullable List<GetUserAssessmentUsersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of database schemas current user can access.
     * 
     */
    private @Nullable List<String> schemaLists;
    /**
     * @return The OCID of the target database.
     * 
     */
    private @Nullable String targetId;
    private @Nullable String timeLastLoginGreaterThanOrEqualTo;
    private @Nullable String timeLastLoginLessThan;
    private @Nullable String timePasswordLastChangedGreaterThanOrEqualTo;
    private @Nullable String timePasswordLastChangedLessThan;
    private @Nullable String timeUserCreatedGreaterThanOrEqualTo;
    private @Nullable String timeUserCreatedLessThan;
    private String userAssessmentId;
    /**
     * @return The user category based on the privileges and other details of the user.
     * 
     */
    private @Nullable String userCategory;
    private @Nullable String userKey;
    /**
     * @return The database user name.
     * 
     */
    private @Nullable String userName;
    /**
     * @return The user profile name.
     * 
     */
    private @Nullable String userProfile;
    private @Nullable String userRole;
    private @Nullable String userType;
    /**
     * @return The list of users.
     * 
     */
    private List<GetUserAssessmentUsersUser> users;

    private GetUserAssessmentUsersResult() {}
    public Optional<String> accessLevel() {
        return Optional.ofNullable(this.accessLevel);
    }
    /**
     * @return The status of the user account.
     * 
     */
    public Optional<String> accountStatus() {
        return Optional.ofNullable(this.accountStatus);
    }
    /**
     * @return Indicates whether the user has access to all the schemas.
     * 
     */
    public Optional<Boolean> areAllSchemasAccessible() {
        return Optional.ofNullable(this.areAllSchemasAccessible);
    }
    /**
     * @return The user authentication method.
     * 
     */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }
    public List<GetUserAssessmentUsersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of database schemas current user can access.
     * 
     */
    public List<String> schemaLists() {
        return this.schemaLists == null ? List.of() : this.schemaLists;
    }
    /**
     * @return The OCID of the target database.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    public Optional<String> timeLastLoginGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeLastLoginGreaterThanOrEqualTo);
    }
    public Optional<String> timeLastLoginLessThan() {
        return Optional.ofNullable(this.timeLastLoginLessThan);
    }
    public Optional<String> timePasswordLastChangedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timePasswordLastChangedGreaterThanOrEqualTo);
    }
    public Optional<String> timePasswordLastChangedLessThan() {
        return Optional.ofNullable(this.timePasswordLastChangedLessThan);
    }
    public Optional<String> timeUserCreatedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeUserCreatedGreaterThanOrEqualTo);
    }
    public Optional<String> timeUserCreatedLessThan() {
        return Optional.ofNullable(this.timeUserCreatedLessThan);
    }
    public String userAssessmentId() {
        return this.userAssessmentId;
    }
    /**
     * @return The user category based on the privileges and other details of the user.
     * 
     */
    public Optional<String> userCategory() {
        return Optional.ofNullable(this.userCategory);
    }
    public Optional<String> userKey() {
        return Optional.ofNullable(this.userKey);
    }
    /**
     * @return The database user name.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }
    /**
     * @return The user profile name.
     * 
     */
    public Optional<String> userProfile() {
        return Optional.ofNullable(this.userProfile);
    }
    public Optional<String> userRole() {
        return Optional.ofNullable(this.userRole);
    }
    public Optional<String> userType() {
        return Optional.ofNullable(this.userType);
    }
    /**
     * @return The list of users.
     * 
     */
    public List<GetUserAssessmentUsersUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentUsersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessLevel;
        private @Nullable String accountStatus;
        private @Nullable Boolean areAllSchemasAccessible;
        private @Nullable String authenticationType;
        private @Nullable Boolean compartmentIdInSubtree;
        private @Nullable List<GetUserAssessmentUsersFilter> filters;
        private String id;
        private @Nullable List<String> schemaLists;
        private @Nullable String targetId;
        private @Nullable String timeLastLoginGreaterThanOrEqualTo;
        private @Nullable String timeLastLoginLessThan;
        private @Nullable String timePasswordLastChangedGreaterThanOrEqualTo;
        private @Nullable String timePasswordLastChangedLessThan;
        private @Nullable String timeUserCreatedGreaterThanOrEqualTo;
        private @Nullable String timeUserCreatedLessThan;
        private String userAssessmentId;
        private @Nullable String userCategory;
        private @Nullable String userKey;
        private @Nullable String userName;
        private @Nullable String userProfile;
        private @Nullable String userRole;
        private @Nullable String userType;
        private List<GetUserAssessmentUsersUser> users;
        public Builder() {}
        public Builder(GetUserAssessmentUsersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevel = defaults.accessLevel;
    	      this.accountStatus = defaults.accountStatus;
    	      this.areAllSchemasAccessible = defaults.areAllSchemasAccessible;
    	      this.authenticationType = defaults.authenticationType;
    	      this.compartmentIdInSubtree = defaults.compartmentIdInSubtree;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.schemaLists = defaults.schemaLists;
    	      this.targetId = defaults.targetId;
    	      this.timeLastLoginGreaterThanOrEqualTo = defaults.timeLastLoginGreaterThanOrEqualTo;
    	      this.timeLastLoginLessThan = defaults.timeLastLoginLessThan;
    	      this.timePasswordLastChangedGreaterThanOrEqualTo = defaults.timePasswordLastChangedGreaterThanOrEqualTo;
    	      this.timePasswordLastChangedLessThan = defaults.timePasswordLastChangedLessThan;
    	      this.timeUserCreatedGreaterThanOrEqualTo = defaults.timeUserCreatedGreaterThanOrEqualTo;
    	      this.timeUserCreatedLessThan = defaults.timeUserCreatedLessThan;
    	      this.userAssessmentId = defaults.userAssessmentId;
    	      this.userCategory = defaults.userCategory;
    	      this.userKey = defaults.userKey;
    	      this.userName = defaults.userName;
    	      this.userProfile = defaults.userProfile;
    	      this.userRole = defaults.userRole;
    	      this.userType = defaults.userType;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder accessLevel(@Nullable String accessLevel) {

            this.accessLevel = accessLevel;
            return this;
        }
        @CustomType.Setter
        public Builder accountStatus(@Nullable String accountStatus) {

            this.accountStatus = accountStatus;
            return this;
        }
        @CustomType.Setter
        public Builder areAllSchemasAccessible(@Nullable Boolean areAllSchemasAccessible) {

            this.areAllSchemasAccessible = areAllSchemasAccessible;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationType(@Nullable String authenticationType) {

            this.authenticationType = authenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {

            this.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetUserAssessmentUsersFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetUserAssessmentUsersFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentUsersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder schemaLists(@Nullable List<String> schemaLists) {

            this.schemaLists = schemaLists;
            return this;
        }
        public Builder schemaLists(String... schemaLists) {
            return schemaLists(List.of(schemaLists));
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {

            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastLoginGreaterThanOrEqualTo(@Nullable String timeLastLoginGreaterThanOrEqualTo) {

            this.timeLastLoginGreaterThanOrEqualTo = timeLastLoginGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastLoginLessThan(@Nullable String timeLastLoginLessThan) {

            this.timeLastLoginLessThan = timeLastLoginLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder timePasswordLastChangedGreaterThanOrEqualTo(@Nullable String timePasswordLastChangedGreaterThanOrEqualTo) {

            this.timePasswordLastChangedGreaterThanOrEqualTo = timePasswordLastChangedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timePasswordLastChangedLessThan(@Nullable String timePasswordLastChangedLessThan) {

            this.timePasswordLastChangedLessThan = timePasswordLastChangedLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder timeUserCreatedGreaterThanOrEqualTo(@Nullable String timeUserCreatedGreaterThanOrEqualTo) {

            this.timeUserCreatedGreaterThanOrEqualTo = timeUserCreatedGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder timeUserCreatedLessThan(@Nullable String timeUserCreatedLessThan) {

            this.timeUserCreatedLessThan = timeUserCreatedLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder userAssessmentId(String userAssessmentId) {
            if (userAssessmentId == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentUsersResult", "userAssessmentId");
            }
            this.userAssessmentId = userAssessmentId;
            return this;
        }
        @CustomType.Setter
        public Builder userCategory(@Nullable String userCategory) {

            this.userCategory = userCategory;
            return this;
        }
        @CustomType.Setter
        public Builder userKey(@Nullable String userKey) {

            this.userKey = userKey;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {

            this.userName = userName;
            return this;
        }
        @CustomType.Setter
        public Builder userProfile(@Nullable String userProfile) {

            this.userProfile = userProfile;
            return this;
        }
        @CustomType.Setter
        public Builder userRole(@Nullable String userRole) {

            this.userRole = userRole;
            return this;
        }
        @CustomType.Setter
        public Builder userType(@Nullable String userType) {

            this.userType = userType;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetUserAssessmentUsersUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetUserAssessmentUsersResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetUserAssessmentUsersUser... users) {
            return users(List.of(users));
        }
        public GetUserAssessmentUsersResult build() {
            final var _resultValue = new GetUserAssessmentUsersResult();
            _resultValue.accessLevel = accessLevel;
            _resultValue.accountStatus = accountStatus;
            _resultValue.areAllSchemasAccessible = areAllSchemasAccessible;
            _resultValue.authenticationType = authenticationType;
            _resultValue.compartmentIdInSubtree = compartmentIdInSubtree;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.schemaLists = schemaLists;
            _resultValue.targetId = targetId;
            _resultValue.timeLastLoginGreaterThanOrEqualTo = timeLastLoginGreaterThanOrEqualTo;
            _resultValue.timeLastLoginLessThan = timeLastLoginLessThan;
            _resultValue.timePasswordLastChangedGreaterThanOrEqualTo = timePasswordLastChangedGreaterThanOrEqualTo;
            _resultValue.timePasswordLastChangedLessThan = timePasswordLastChangedLessThan;
            _resultValue.timeUserCreatedGreaterThanOrEqualTo = timeUserCreatedGreaterThanOrEqualTo;
            _resultValue.timeUserCreatedLessThan = timeUserCreatedLessThan;
            _resultValue.userAssessmentId = userAssessmentId;
            _resultValue.userCategory = userCategory;
            _resultValue.userKey = userKey;
            _resultValue.userName = userName;
            _resultValue.userProfile = userProfile;
            _resultValue.userRole = userRole;
            _resultValue.userType = userType;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
