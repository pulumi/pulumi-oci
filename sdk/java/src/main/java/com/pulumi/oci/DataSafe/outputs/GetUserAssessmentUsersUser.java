// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserAssessmentUsersUser {
    /**
     * @return A filter to return only items that match the specified account status.
     * 
     */
    private @Nullable String accountStatus;
    /**
     * @return The admin roles granted to the user.
     * 
     */
    private @Nullable List<String> adminRoles;
    /**
     * @return A filter to return only items that match the specified authentication type.
     * 
     */
    private @Nullable String authenticationType;
    /**
     * @return The unique user key. This is a system-generated identifier. Use ListUsers to get the user key for a user.
     * 
     */
    private @Nullable String key;
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    private @Nullable String targetId;
    /**
     * @return The date and time the user last logged in, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeLastLogin;
    /**
     * @return The date and time the user password was last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timePasswordChanged;
    /**
     * @return The date and time the user was created in the database, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeUserCreated;
    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    private @Nullable String userCategory;
    /**
     * @return A filter to return only items that match the specified user name.
     * 
     */
    private @Nullable String userName;
    /**
     * @return A filter to return only items that match the specified user profile.
     * 
     */
    private @Nullable String userProfile;
    /**
     * @return The user type, which can be a combination of the following:
     * 
     */
    private @Nullable List<String> userTypes;

    private GetUserAssessmentUsersUser() {}
    /**
     * @return A filter to return only items that match the specified account status.
     * 
     */
    public Optional<String> accountStatus() {
        return Optional.ofNullable(this.accountStatus);
    }
    /**
     * @return The admin roles granted to the user.
     * 
     */
    public List<String> adminRoles() {
        return this.adminRoles == null ? List.of() : this.adminRoles;
    }
    /**
     * @return A filter to return only items that match the specified authentication type.
     * 
     */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    /**
     * @return The unique user key. This is a system-generated identifier. Use ListUsers to get the user key for a user.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return A filter to return only items related to a specific target OCID.
     * 
     */
    public Optional<String> targetId() {
        return Optional.ofNullable(this.targetId);
    }
    /**
     * @return The date and time the user last logged in, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeLastLogin() {
        return Optional.ofNullable(this.timeLastLogin);
    }
    /**
     * @return The date and time the user password was last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timePasswordChanged() {
        return Optional.ofNullable(this.timePasswordChanged);
    }
    /**
     * @return The date and time the user was created in the database, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeUserCreated() {
        return Optional.ofNullable(this.timeUserCreated);
    }
    /**
     * @return A filter to return only items that match the specified user category.
     * 
     */
    public Optional<String> userCategory() {
        return Optional.ofNullable(this.userCategory);
    }
    /**
     * @return A filter to return only items that match the specified user name.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }
    /**
     * @return A filter to return only items that match the specified user profile.
     * 
     */
    public Optional<String> userProfile() {
        return Optional.ofNullable(this.userProfile);
    }
    /**
     * @return The user type, which can be a combination of the following:
     * 
     */
    public List<String> userTypes() {
        return this.userTypes == null ? List.of() : this.userTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserAssessmentUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountStatus;
        private @Nullable List<String> adminRoles;
        private @Nullable String authenticationType;
        private @Nullable String key;
        private @Nullable String targetId;
        private @Nullable String timeLastLogin;
        private @Nullable String timePasswordChanged;
        private @Nullable String timeUserCreated;
        private @Nullable String userCategory;
        private @Nullable String userName;
        private @Nullable String userProfile;
        private @Nullable List<String> userTypes;
        public Builder() {}
        public Builder(GetUserAssessmentUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountStatus = defaults.accountStatus;
    	      this.adminRoles = defaults.adminRoles;
    	      this.authenticationType = defaults.authenticationType;
    	      this.key = defaults.key;
    	      this.targetId = defaults.targetId;
    	      this.timeLastLogin = defaults.timeLastLogin;
    	      this.timePasswordChanged = defaults.timePasswordChanged;
    	      this.timeUserCreated = defaults.timeUserCreated;
    	      this.userCategory = defaults.userCategory;
    	      this.userName = defaults.userName;
    	      this.userProfile = defaults.userProfile;
    	      this.userTypes = defaults.userTypes;
        }

        @CustomType.Setter
        public Builder accountStatus(@Nullable String accountStatus) {
            this.accountStatus = accountStatus;
            return this;
        }
        @CustomType.Setter
        public Builder adminRoles(@Nullable List<String> adminRoles) {
            this.adminRoles = adminRoles;
            return this;
        }
        public Builder adminRoles(String... adminRoles) {
            return adminRoles(List.of(adminRoles));
        }
        @CustomType.Setter
        public Builder authenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(@Nullable String targetId) {
            this.targetId = targetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastLogin(@Nullable String timeLastLogin) {
            this.timeLastLogin = timeLastLogin;
            return this;
        }
        @CustomType.Setter
        public Builder timePasswordChanged(@Nullable String timePasswordChanged) {
            this.timePasswordChanged = timePasswordChanged;
            return this;
        }
        @CustomType.Setter
        public Builder timeUserCreated(@Nullable String timeUserCreated) {
            this.timeUserCreated = timeUserCreated;
            return this;
        }
        @CustomType.Setter
        public Builder userCategory(@Nullable String userCategory) {
            this.userCategory = userCategory;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        @CustomType.Setter
        public Builder userProfile(@Nullable String userProfile) {
            this.userProfile = userProfile;
            return this;
        }
        @CustomType.Setter
        public Builder userTypes(@Nullable List<String> userTypes) {
            this.userTypes = userTypes;
            return this;
        }
        public Builder userTypes(String... userTypes) {
            return userTypes(List.of(userTypes));
        }
        public GetUserAssessmentUsersUser build() {
            final var o = new GetUserAssessmentUsersUser();
            o.accountStatus = accountStatus;
            o.adminRoles = adminRoles;
            o.authenticationType = authenticationType;
            o.key = key;
            o.targetId = targetId;
            o.timeLastLogin = timeLastLogin;
            o.timePasswordChanged = timePasswordChanged;
            o.timeUserCreated = timeUserCreated;
            o.userCategory = userCategory;
            o.userName = userName;
            o.userProfile = userProfile;
            o.userTypes = userTypes;
            return o;
        }
    }
}
