// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReportDefinitionSummary {
    /**
     * @return (Updatable) Name of the key or count of object.
     * 
     */
    private @Nullable String countOf;
    /**
     * @return (Updatable) Specifies the order in which the summary must be displayed.
     * 
     */
    private Integer displayOrder;
    /**
     * @return (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
     * 
     */
    private @Nullable String groupByFieldName;
    /**
     * @return (Updatable) Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    private @Nullable Boolean isHidden;
    /**
     * @return (Updatable) Name of the report summary.
     * 
     */
    private String name;
    /**
     * @return (Updatable) Additional scim filters used to get the specific summary.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private @Nullable String scimFilter;

    private ReportDefinitionSummary() {}
    /**
     * @return (Updatable) Name of the key or count of object.
     * 
     */
    public Optional<String> countOf() {
        return Optional.ofNullable(this.countOf);
    }
    /**
     * @return (Updatable) Specifies the order in which the summary must be displayed.
     * 
     */
    public Integer displayOrder() {
        return this.displayOrder;
    }
    /**
     * @return (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
     * 
     */
    public Optional<String> groupByFieldName() {
        return Optional.ofNullable(this.groupByFieldName);
    }
    /**
     * @return (Updatable) Indicates if the summary is hidden. Values can either be &#39;true&#39; or &#39;false&#39;.
     * 
     */
    public Optional<Boolean> isHidden() {
        return Optional.ofNullable(this.isHidden);
    }
    /**
     * @return (Updatable) Name of the report summary.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Updatable) Additional scim filters used to get the specific summary.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<String> scimFilter() {
        return Optional.ofNullable(this.scimFilter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportDefinitionSummary defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String countOf;
        private Integer displayOrder;
        private @Nullable String groupByFieldName;
        private @Nullable Boolean isHidden;
        private String name;
        private @Nullable String scimFilter;
        public Builder() {}
        public Builder(ReportDefinitionSummary defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.countOf = defaults.countOf;
    	      this.displayOrder = defaults.displayOrder;
    	      this.groupByFieldName = defaults.groupByFieldName;
    	      this.isHidden = defaults.isHidden;
    	      this.name = defaults.name;
    	      this.scimFilter = defaults.scimFilter;
        }

        @CustomType.Setter
        public Builder countOf(@Nullable String countOf) {
            this.countOf = countOf;
            return this;
        }
        @CustomType.Setter
        public Builder displayOrder(Integer displayOrder) {
            this.displayOrder = Objects.requireNonNull(displayOrder);
            return this;
        }
        @CustomType.Setter
        public Builder groupByFieldName(@Nullable String groupByFieldName) {
            this.groupByFieldName = groupByFieldName;
            return this;
        }
        @CustomType.Setter
        public Builder isHidden(@Nullable Boolean isHidden) {
            this.isHidden = isHidden;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder scimFilter(@Nullable String scimFilter) {
            this.scimFilter = scimFilter;
            return this;
        }
        public ReportDefinitionSummary build() {
            final var _resultValue = new ReportDefinitionSummary();
            _resultValue.countOf = countOf;
            _resultValue.displayOrder = displayOrder;
            _resultValue.groupByFieldName = groupByFieldName;
            _resultValue.isHidden = isHidden;
            _resultValue.name = name;
            _resultValue.scimFilter = scimFilter;
            return _resultValue;
        }
    }
}
