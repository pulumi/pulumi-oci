// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticAdvisory;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticDeferred;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticEvaluate;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticHighRisk;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticLowRisk;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticMediumRisk;
import com.pulumi.oci.DataSafe.outputs.SecurityAssessmentStatisticPass;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityAssessmentStatistic {
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private @Nullable List<SecurityAssessmentStatisticAdvisory> advisories;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private @Nullable List<SecurityAssessmentStatisticDeferred> deferreds;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private @Nullable List<SecurityAssessmentStatisticEvaluate> evaluates;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private @Nullable List<SecurityAssessmentStatisticHighRisk> highRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private @Nullable List<SecurityAssessmentStatisticLowRisk> lowRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private @Nullable List<SecurityAssessmentStatisticMediumRisk> mediumRisks;
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    private @Nullable List<SecurityAssessmentStatisticPass> passes;
    /**
     * @return The total number of targets in this security assessment.
     * 
     */
    private @Nullable Integer targetsCount;

    private SecurityAssessmentStatistic() {}
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticAdvisory> advisories() {
        return this.advisories == null ? List.of() : this.advisories;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticDeferred> deferreds() {
        return this.deferreds == null ? List.of() : this.deferreds;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticEvaluate> evaluates() {
        return this.evaluates == null ? List.of() : this.evaluates;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticHighRisk> highRisks() {
        return this.highRisks == null ? List.of() : this.highRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticLowRisk> lowRisks() {
        return this.lowRisks == null ? List.of() : this.lowRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticMediumRisk> mediumRisks() {
        return this.mediumRisks == null ? List.of() : this.mediumRisks;
    }
    /**
     * @return Statistics showing the number of findings with a particular risk level for each category.
     * 
     */
    public List<SecurityAssessmentStatisticPass> passes() {
        return this.passes == null ? List.of() : this.passes;
    }
    /**
     * @return The total number of targets in this security assessment.
     * 
     */
    public Optional<Integer> targetsCount() {
        return Optional.ofNullable(this.targetsCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityAssessmentStatistic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<SecurityAssessmentStatisticAdvisory> advisories;
        private @Nullable List<SecurityAssessmentStatisticDeferred> deferreds;
        private @Nullable List<SecurityAssessmentStatisticEvaluate> evaluates;
        private @Nullable List<SecurityAssessmentStatisticHighRisk> highRisks;
        private @Nullable List<SecurityAssessmentStatisticLowRisk> lowRisks;
        private @Nullable List<SecurityAssessmentStatisticMediumRisk> mediumRisks;
        private @Nullable List<SecurityAssessmentStatisticPass> passes;
        private @Nullable Integer targetsCount;
        public Builder() {}
        public Builder(SecurityAssessmentStatistic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advisories = defaults.advisories;
    	      this.deferreds = defaults.deferreds;
    	      this.evaluates = defaults.evaluates;
    	      this.highRisks = defaults.highRisks;
    	      this.lowRisks = defaults.lowRisks;
    	      this.mediumRisks = defaults.mediumRisks;
    	      this.passes = defaults.passes;
    	      this.targetsCount = defaults.targetsCount;
        }

        @CustomType.Setter
        public Builder advisories(@Nullable List<SecurityAssessmentStatisticAdvisory> advisories) {

            this.advisories = advisories;
            return this;
        }
        public Builder advisories(SecurityAssessmentStatisticAdvisory... advisories) {
            return advisories(List.of(advisories));
        }
        @CustomType.Setter
        public Builder deferreds(@Nullable List<SecurityAssessmentStatisticDeferred> deferreds) {

            this.deferreds = deferreds;
            return this;
        }
        public Builder deferreds(SecurityAssessmentStatisticDeferred... deferreds) {
            return deferreds(List.of(deferreds));
        }
        @CustomType.Setter
        public Builder evaluates(@Nullable List<SecurityAssessmentStatisticEvaluate> evaluates) {

            this.evaluates = evaluates;
            return this;
        }
        public Builder evaluates(SecurityAssessmentStatisticEvaluate... evaluates) {
            return evaluates(List.of(evaluates));
        }
        @CustomType.Setter
        public Builder highRisks(@Nullable List<SecurityAssessmentStatisticHighRisk> highRisks) {

            this.highRisks = highRisks;
            return this;
        }
        public Builder highRisks(SecurityAssessmentStatisticHighRisk... highRisks) {
            return highRisks(List.of(highRisks));
        }
        @CustomType.Setter
        public Builder lowRisks(@Nullable List<SecurityAssessmentStatisticLowRisk> lowRisks) {

            this.lowRisks = lowRisks;
            return this;
        }
        public Builder lowRisks(SecurityAssessmentStatisticLowRisk... lowRisks) {
            return lowRisks(List.of(lowRisks));
        }
        @CustomType.Setter
        public Builder mediumRisks(@Nullable List<SecurityAssessmentStatisticMediumRisk> mediumRisks) {

            this.mediumRisks = mediumRisks;
            return this;
        }
        public Builder mediumRisks(SecurityAssessmentStatisticMediumRisk... mediumRisks) {
            return mediumRisks(List.of(mediumRisks));
        }
        @CustomType.Setter
        public Builder passes(@Nullable List<SecurityAssessmentStatisticPass> passes) {

            this.passes = passes;
            return this;
        }
        public Builder passes(SecurityAssessmentStatisticPass... passes) {
            return passes(List.of(passes));
        }
        @CustomType.Setter
        public Builder targetsCount(@Nullable Integer targetsCount) {

            this.targetsCount = targetsCount;
            return this;
        }
        public SecurityAssessmentStatistic build() {
            final var _resultValue = new SecurityAssessmentStatistic();
            _resultValue.advisories = advisories;
            _resultValue.deferreds = deferreds;
            _resultValue.evaluates = evaluates;
            _resultValue.highRisks = highRisks;
            _resultValue.lowRisks = lowRisks;
            _resultValue.mediumRisks = mediumRisks;
            _resultValue.passes = passes;
            _resultValue.targetsCount = targetsCount;
            return _resultValue;
        }
    }
}
