// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TargetDatabaseDatabaseDetails {
    /**
     * @return (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
     * 
     */
    private @Nullable String autonomousDatabaseId;
    /**
     * @return (Updatable) The database type.
     * 
     */
    private String databaseType;
    /**
     * @return (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return (Updatable) The infrastructure type the database is running on.
     * 
     */
    private String infrastructureType;
    /**
     * @return (Updatable) The OCID of the compute instance on which the database is running.
     * 
     */
    private @Nullable String instanceId;
    /**
     * @return (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is &#39;ONPREM_CONNECTOR&#39;.
     * 
     */
    private @Nullable List<String> ipAddresses;
    /**
     * @return (Updatable) The port number of the database listener.
     * 
     */
    private @Nullable Integer listenerPort;
    /**
     * @return (Updatable) The OCID of the pluggable database registered as a target database in Data Safe.
     * 
     */
    private @Nullable String pluggableDatabaseId;
    /**
     * @return (Updatable) The service name of the database registered as target database.
     * 
     */
    private @Nullable String serviceName;
    /**
     * @return (Updatable) The OCID of the VM cluster in which the database is running.
     * 
     */
    private @Nullable String vmClusterId;

    private TargetDatabaseDatabaseDetails() {}
    /**
     * @return (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
     * 
     */
    public Optional<String> autonomousDatabaseId() {
        return Optional.ofNullable(this.autonomousDatabaseId);
    }
    /**
     * @return (Updatable) The database type.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return (Updatable) The infrastructure type the database is running on.
     * 
     */
    public String infrastructureType() {
        return this.infrastructureType;
    }
    /**
     * @return (Updatable) The OCID of the compute instance on which the database is running.
     * 
     */
    public Optional<String> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }
    /**
     * @return (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is &#39;ONPREM_CONNECTOR&#39;.
     * 
     */
    public List<String> ipAddresses() {
        return this.ipAddresses == null ? List.of() : this.ipAddresses;
    }
    /**
     * @return (Updatable) The port number of the database listener.
     * 
     */
    public Optional<Integer> listenerPort() {
        return Optional.ofNullable(this.listenerPort);
    }
    /**
     * @return (Updatable) The OCID of the pluggable database registered as a target database in Data Safe.
     * 
     */
    public Optional<String> pluggableDatabaseId() {
        return Optional.ofNullable(this.pluggableDatabaseId);
    }
    /**
     * @return (Updatable) The service name of the database registered as target database.
     * 
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }
    /**
     * @return (Updatable) The OCID of the VM cluster in which the database is running.
     * 
     */
    public Optional<String> vmClusterId() {
        return Optional.ofNullable(this.vmClusterId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetDatabaseDatabaseDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String autonomousDatabaseId;
        private String databaseType;
        private @Nullable String dbSystemId;
        private String infrastructureType;
        private @Nullable String instanceId;
        private @Nullable List<String> ipAddresses;
        private @Nullable Integer listenerPort;
        private @Nullable String pluggableDatabaseId;
        private @Nullable String serviceName;
        private @Nullable String vmClusterId;
        public Builder() {}
        public Builder(TargetDatabaseDatabaseDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousDatabaseId = defaults.autonomousDatabaseId;
    	      this.databaseType = defaults.databaseType;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.infrastructureType = defaults.infrastructureType;
    	      this.instanceId = defaults.instanceId;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.listenerPort = defaults.listenerPort;
    	      this.pluggableDatabaseId = defaults.pluggableDatabaseId;
    	      this.serviceName = defaults.serviceName;
    	      this.vmClusterId = defaults.vmClusterId;
        }

        @CustomType.Setter
        public Builder autonomousDatabaseId(@Nullable String autonomousDatabaseId) {

            this.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("TargetDatabaseDatabaseDetails", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {

            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder infrastructureType(String infrastructureType) {
            if (infrastructureType == null) {
              throw new MissingRequiredPropertyException("TargetDatabaseDatabaseDetails", "infrastructureType");
            }
            this.infrastructureType = infrastructureType;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(@Nullable String instanceId) {

            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddresses(@Nullable List<String> ipAddresses) {

            this.ipAddresses = ipAddresses;
            return this;
        }
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        @CustomType.Setter
        public Builder listenerPort(@Nullable Integer listenerPort) {

            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder pluggableDatabaseId(@Nullable String pluggableDatabaseId) {

            this.pluggableDatabaseId = pluggableDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(@Nullable String serviceName) {

            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder vmClusterId(@Nullable String vmClusterId) {

            this.vmClusterId = vmClusterId;
            return this;
        }
        public TargetDatabaseDatabaseDetails build() {
            final var _resultValue = new TargetDatabaseDatabaseDetails();
            _resultValue.autonomousDatabaseId = autonomousDatabaseId;
            _resultValue.databaseType = databaseType;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.infrastructureType = infrastructureType;
            _resultValue.instanceId = instanceId;
            _resultValue.ipAddresses = ipAddresses;
            _resultValue.listenerPort = listenerPort;
            _resultValue.pluggableDatabaseId = pluggableDatabaseId;
            _resultValue.serviceName = serviceName;
            _resultValue.vmClusterId = vmClusterId;
            return _resultValue;
        }
    }
}
