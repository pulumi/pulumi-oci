// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataSafe.outputs.TargetDatabaseGroupMatchingCriteriaExclude;
import com.pulumi.oci.DataSafe.outputs.TargetDatabaseGroupMatchingCriteriaInclude;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TargetDatabaseGroupMatchingCriteria {
    /**
     * @return (Updatable) Criteria to exclude certain target databases from the target database group.
     * 
     */
    private @Nullable TargetDatabaseGroupMatchingCriteriaExclude exclude;
    /**
     * @return (Updatable) Criteria to determine whether a target database should be included in the target database group. If the database satisfies any of compartments, targetDatabaseIds, freeformTags, or definedTags criteria, it qualifies for inclusion in the target database group
     * 
     */
    private TargetDatabaseGroupMatchingCriteriaInclude include;

    private TargetDatabaseGroupMatchingCriteria() {}
    /**
     * @return (Updatable) Criteria to exclude certain target databases from the target database group.
     * 
     */
    public Optional<TargetDatabaseGroupMatchingCriteriaExclude> exclude() {
        return Optional.ofNullable(this.exclude);
    }
    /**
     * @return (Updatable) Criteria to determine whether a target database should be included in the target database group. If the database satisfies any of compartments, targetDatabaseIds, freeformTags, or definedTags criteria, it qualifies for inclusion in the target database group
     * 
     */
    public TargetDatabaseGroupMatchingCriteriaInclude include() {
        return this.include;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetDatabaseGroupMatchingCriteria defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable TargetDatabaseGroupMatchingCriteriaExclude exclude;
        private TargetDatabaseGroupMatchingCriteriaInclude include;
        public Builder() {}
        public Builder(TargetDatabaseGroupMatchingCriteria defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclude = defaults.exclude;
    	      this.include = defaults.include;
        }

        @CustomType.Setter
        public Builder exclude(@Nullable TargetDatabaseGroupMatchingCriteriaExclude exclude) {

            this.exclude = exclude;
            return this;
        }
        @CustomType.Setter
        public Builder include(TargetDatabaseGroupMatchingCriteriaInclude include) {
            if (include == null) {
              throw new MissingRequiredPropertyException("TargetDatabaseGroupMatchingCriteria", "include");
            }
            this.include = include;
            return this;
        }
        public TargetDatabaseGroupMatchingCriteria build() {
            final var _resultValue = new TargetDatabaseGroupMatchingCriteria();
            _resultValue.exclude = exclude;
            _resultValue.include = include;
            return _resultValue;
        }
    }
}
