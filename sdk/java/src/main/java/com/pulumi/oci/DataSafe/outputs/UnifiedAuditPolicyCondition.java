// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataSafe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UnifiedAuditPolicyCondition {
    /**
     * @return (Updatable) The OCID of the attribute set.
     * 
     */
    private @Nullable String attributeSetId;
    /**
     * @return (Updatable) Specifies whether to include or exclude the specified users or roles.
     * 
     */
    private String entitySelection;
    /**
     * @return (Updatable) The type of users or roles that the unified audit policy is applied to.
     * 
     */
    private String entityType;
    /**
     * @return (Updatable) The operation status that the policy must be enabled for.
     * 
     */
    private String operationStatus;
    /**
     * @return (Updatable) List of roles that the policy must be enabled for.
     * 
     */
    private @Nullable List<String> roleNames;
    /**
     * @return (Updatable) The list of users that the unified audit policy is enabled for.
     * 
     */
    private @Nullable List<String> userNames;

    private UnifiedAuditPolicyCondition() {}
    /**
     * @return (Updatable) The OCID of the attribute set.
     * 
     */
    public Optional<String> attributeSetId() {
        return Optional.ofNullable(this.attributeSetId);
    }
    /**
     * @return (Updatable) Specifies whether to include or exclude the specified users or roles.
     * 
     */
    public String entitySelection() {
        return this.entitySelection;
    }
    /**
     * @return (Updatable) The type of users or roles that the unified audit policy is applied to.
     * 
     */
    public String entityType() {
        return this.entityType;
    }
    /**
     * @return (Updatable) The operation status that the policy must be enabled for.
     * 
     */
    public String operationStatus() {
        return this.operationStatus;
    }
    /**
     * @return (Updatable) List of roles that the policy must be enabled for.
     * 
     */
    public List<String> roleNames() {
        return this.roleNames == null ? List.of() : this.roleNames;
    }
    /**
     * @return (Updatable) The list of users that the unified audit policy is enabled for.
     * 
     */
    public List<String> userNames() {
        return this.userNames == null ? List.of() : this.userNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UnifiedAuditPolicyCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String attributeSetId;
        private String entitySelection;
        private String entityType;
        private String operationStatus;
        private @Nullable List<String> roleNames;
        private @Nullable List<String> userNames;
        public Builder() {}
        public Builder(UnifiedAuditPolicyCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributeSetId = defaults.attributeSetId;
    	      this.entitySelection = defaults.entitySelection;
    	      this.entityType = defaults.entityType;
    	      this.operationStatus = defaults.operationStatus;
    	      this.roleNames = defaults.roleNames;
    	      this.userNames = defaults.userNames;
        }

        @CustomType.Setter
        public Builder attributeSetId(@Nullable String attributeSetId) {

            this.attributeSetId = attributeSetId;
            return this;
        }
        @CustomType.Setter
        public Builder entitySelection(String entitySelection) {
            if (entitySelection == null) {
              throw new MissingRequiredPropertyException("UnifiedAuditPolicyCondition", "entitySelection");
            }
            this.entitySelection = entitySelection;
            return this;
        }
        @CustomType.Setter
        public Builder entityType(String entityType) {
            if (entityType == null) {
              throw new MissingRequiredPropertyException("UnifiedAuditPolicyCondition", "entityType");
            }
            this.entityType = entityType;
            return this;
        }
        @CustomType.Setter
        public Builder operationStatus(String operationStatus) {
            if (operationStatus == null) {
              throw new MissingRequiredPropertyException("UnifiedAuditPolicyCondition", "operationStatus");
            }
            this.operationStatus = operationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder roleNames(@Nullable List<String> roleNames) {

            this.roleNames = roleNames;
            return this;
        }
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }
        @CustomType.Setter
        public Builder userNames(@Nullable List<String> userNames) {

            this.userNames = userNames;
            return this;
        }
        public Builder userNames(String... userNames) {
            return userNames(List.of(userNames));
        }
        public UnifiedAuditPolicyCondition build() {
            final var _resultValue = new UnifiedAuditPolicyCondition();
            _resultValue.attributeSetId = attributeSetId;
            _resultValue.entitySelection = entitySelection;
            _resultValue.entityType = entityType;
            _resultValue.operationStatus = operationStatus;
            _resultValue.roleNames = roleNames;
            _resultValue.userNames = userNames;
            return _resultValue;
        }
    }
}
