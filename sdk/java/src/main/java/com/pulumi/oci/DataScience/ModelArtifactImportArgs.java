// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ModelArtifactImportArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelArtifactImportArgs Empty = new ModelArtifactImportArgs();

    @Import(name="artifactSourceType", required=true)
    private Output<String> artifactSourceType;

    public Output<String> artifactSourceType() {
        return this.artifactSourceType;
    }

    @Import(name="destinationBucket", required=true)
    private Output<String> destinationBucket;

    public Output<String> destinationBucket() {
        return this.destinationBucket;
    }

    @Import(name="destinationObjectName", required=true)
    private Output<String> destinationObjectName;

    public Output<String> destinationObjectName() {
        return this.destinationObjectName;
    }

    @Import(name="destinationRegion", required=true)
    private Output<String> destinationRegion;

    public Output<String> destinationRegion() {
        return this.destinationRegion;
    }

    @Import(name="modelId", required=true)
    private Output<String> modelId;

    public Output<String> modelId() {
        return this.modelId;
    }

    @Import(name="namespace", required=true)
    private Output<String> namespace;

    public Output<String> namespace() {
        return this.namespace;
    }

    private ModelArtifactImportArgs() {}

    private ModelArtifactImportArgs(ModelArtifactImportArgs $) {
        this.artifactSourceType = $.artifactSourceType;
        this.destinationBucket = $.destinationBucket;
        this.destinationObjectName = $.destinationObjectName;
        this.destinationRegion = $.destinationRegion;
        this.modelId = $.modelId;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelArtifactImportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelArtifactImportArgs $;

        public Builder() {
            $ = new ModelArtifactImportArgs();
        }

        public Builder(ModelArtifactImportArgs defaults) {
            $ = new ModelArtifactImportArgs(Objects.requireNonNull(defaults));
        }

        public Builder artifactSourceType(Output<String> artifactSourceType) {
            $.artifactSourceType = artifactSourceType;
            return this;
        }

        public Builder artifactSourceType(String artifactSourceType) {
            return artifactSourceType(Output.of(artifactSourceType));
        }

        public Builder destinationBucket(Output<String> destinationBucket) {
            $.destinationBucket = destinationBucket;
            return this;
        }

        public Builder destinationBucket(String destinationBucket) {
            return destinationBucket(Output.of(destinationBucket));
        }

        public Builder destinationObjectName(Output<String> destinationObjectName) {
            $.destinationObjectName = destinationObjectName;
            return this;
        }

        public Builder destinationObjectName(String destinationObjectName) {
            return destinationObjectName(Output.of(destinationObjectName));
        }

        public Builder destinationRegion(Output<String> destinationRegion) {
            $.destinationRegion = destinationRegion;
            return this;
        }

        public Builder destinationRegion(String destinationRegion) {
            return destinationRegion(Output.of(destinationRegion));
        }

        public Builder modelId(Output<String> modelId) {
            $.modelId = modelId;
            return this;
        }

        public Builder modelId(String modelId) {
            return modelId(Output.of(modelId));
        }

        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public ModelArtifactImportArgs build() {
            $.artifactSourceType = Objects.requireNonNull($.artifactSourceType, "expected parameter 'artifactSourceType' to be non-null");
            $.destinationBucket = Objects.requireNonNull($.destinationBucket, "expected parameter 'destinationBucket' to be non-null");
            $.destinationObjectName = Objects.requireNonNull($.destinationObjectName, "expected parameter 'destinationObjectName' to be non-null");
            $.destinationRegion = Objects.requireNonNull($.destinationRegion, "expected parameter 'destinationRegion' to be non-null");
            $.modelId = Objects.requireNonNull($.modelId, "expected parameter 'modelId' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            return $;
        }
    }

}
