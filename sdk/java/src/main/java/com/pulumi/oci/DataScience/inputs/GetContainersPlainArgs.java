// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DataScience.inputs.GetContainersFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetContainersPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetContainersPlainArgs Empty = new GetContainersPlainArgs();

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by the container name.
     * 
     */
    @Import(name="containerName")
    private @Nullable String containerName;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by the container name.
     * 
     */
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by its user-friendly name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by its user-friendly name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetContainersFilter> filters;

    public Optional<List<GetContainersFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * if true, this returns latest version of container.
     * 
     */
    @Import(name="isLatest")
    private @Nullable Boolean isLatest;

    /**
     * @return if true, this returns latest version of container.
     * 
     */
    public Optional<Boolean> isLatest() {
        return Optional.ofNullable(this.isLatest);
    }

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by the container version tag.
     * 
     */
    @Import(name="tagQueryParam")
    private @Nullable String tagQueryParam;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by the container version tag.
     * 
     */
    public Optional<String> tagQueryParam() {
        return Optional.ofNullable(this.tagQueryParam);
    }

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by the target workload.
     * 
     */
    @Import(name="targetWorkload")
    private @Nullable String targetWorkload;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by the target workload.
     * 
     */
    public Optional<String> targetWorkload() {
        return Optional.ofNullable(this.targetWorkload);
    }

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by the usage.
     * 
     */
    @Import(name="usageQueryParam")
    private @Nullable String usageQueryParam;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by the usage.
     * 
     */
    public Optional<String> usageQueryParam() {
        return Optional.ofNullable(this.usageQueryParam);
    }

    private GetContainersPlainArgs() {}

    private GetContainersPlainArgs(GetContainersPlainArgs $) {
        this.containerName = $.containerName;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.isLatest = $.isLatest;
        this.state = $.state;
        this.tagQueryParam = $.tagQueryParam;
        this.targetWorkload = $.targetWorkload;
        this.usageQueryParam = $.usageQueryParam;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetContainersPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetContainersPlainArgs $;

        public Builder() {
            $ = new GetContainersPlainArgs();
        }

        public Builder(GetContainersPlainArgs defaults) {
            $ = new GetContainersPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerName &lt;b&gt;Filter&lt;/b&gt; results by the container name.
         * 
         * @return builder
         * 
         */
        public Builder containerName(@Nullable String containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param displayName &lt;b&gt;Filter&lt;/b&gt; results by its user-friendly name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetContainersFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetContainersFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isLatest if true, this returns latest version of container.
         * 
         * @return builder
         * 
         */
        public Builder isLatest(@Nullable Boolean isLatest) {
            $.isLatest = isLatest;
            return this;
        }

        /**
         * @param state &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param tagQueryParam &lt;b&gt;Filter&lt;/b&gt; results by the container version tag.
         * 
         * @return builder
         * 
         */
        public Builder tagQueryParam(@Nullable String tagQueryParam) {
            $.tagQueryParam = tagQueryParam;
            return this;
        }

        /**
         * @param targetWorkload &lt;b&gt;Filter&lt;/b&gt; results by the target workload.
         * 
         * @return builder
         * 
         */
        public Builder targetWorkload(@Nullable String targetWorkload) {
            $.targetWorkload = targetWorkload;
            return this;
        }

        /**
         * @param usageQueryParam &lt;b&gt;Filter&lt;/b&gt; results by the usage.
         * 
         * @return builder
         * 
         */
        public Builder usageQueryParam(@Nullable String usageQueryParam) {
            $.usageQueryParam = usageQueryParam;
            return this;
        }

        public GetContainersPlainArgs build() {
            return $;
        }
    }

}
