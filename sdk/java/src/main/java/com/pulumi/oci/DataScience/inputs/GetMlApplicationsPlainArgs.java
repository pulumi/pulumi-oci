// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.inputs.GetMlApplicationsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMlApplicationsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMlApplicationsPlainArgs Empty = new GetMlApplicationsPlainArgs();

    /**
     * &lt;b&gt;Filter&lt;/b&gt; results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return &lt;b&gt;Filter&lt;/b&gt; results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * If it is true search must include all results from descendant compartments. Value true is allowed only if compartmentId refers to root compartment.
     * 
     */
    @Import(name="compartmentIdInSubtree")
    private @Nullable Boolean compartmentIdInSubtree;

    /**
     * @return If it is true search must include all results from descendant compartments. Value true is allowed only if compartmentId refers to root compartment.
     * 
     */
    public Optional<Boolean> compartmentIdInSubtree() {
        return Optional.ofNullable(this.compartmentIdInSubtree);
    }

    @Import(name="filters")
    private @Nullable List<GetMlApplicationsFilter> filters;

    public Optional<List<GetMlApplicationsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * unique MlApplication identifier
     * 
     */
    @Import(name="mlApplicationId")
    private @Nullable String mlApplicationId;

    /**
     * @return unique MlApplication identifier
     * 
     */
    public Optional<String> mlApplicationId() {
        return Optional.ofNullable(this.mlApplicationId);
    }

    /**
     * A filter to return only resources that match the entire name given.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only resources with lifecycleState matching the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources with lifecycleState matching the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetMlApplicationsPlainArgs() {}

    private GetMlApplicationsPlainArgs(GetMlApplicationsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.compartmentIdInSubtree = $.compartmentIdInSubtree;
        this.filters = $.filters;
        this.mlApplicationId = $.mlApplicationId;
        this.name = $.name;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMlApplicationsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMlApplicationsPlainArgs $;

        public Builder() {
            $ = new GetMlApplicationsPlainArgs();
        }

        public Builder(GetMlApplicationsPlainArgs defaults) {
            $ = new GetMlApplicationsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId &lt;b&gt;Filter&lt;/b&gt; results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentIdInSubtree If it is true search must include all results from descendant compartments. Value true is allowed only if compartmentId refers to root compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentIdInSubtree(@Nullable Boolean compartmentIdInSubtree) {
            $.compartmentIdInSubtree = compartmentIdInSubtree;
            return this;
        }

        public Builder filters(@Nullable List<GetMlApplicationsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetMlApplicationsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param mlApplicationId unique MlApplication identifier
         * 
         * @return builder
         * 
         */
        public Builder mlApplicationId(@Nullable String mlApplicationId) {
            $.mlApplicationId = mlApplicationId;
            return this;
        }

        /**
         * @param name A filter to return only resources that match the entire name given.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param state A filter to return only resources with lifecycleState matching the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetMlApplicationsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetMlApplicationsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
