// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs Empty = new JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs();

    /**
     * The commands to run in the target job run to perform the startup probe
     * 
     */
    @Import(name="commands", required=true)
    private Output<List<String>> commands;

    /**
     * @return The commands to run in the target job run to perform the startup probe
     * 
     */
    public Output<List<String>> commands() {
        return this.commands;
    }

    /**
     * How many times the job will try before giving up when a probe fails.
     * 
     */
    @Import(name="failureThreshold")
    private @Nullable Output<Integer> failureThreshold;

    /**
     * @return How many times the job will try before giving up when a probe fails.
     * 
     */
    public Optional<Output<Integer>> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }

    /**
     * Number of seconds after the job run has started before a startup probe is initiated.
     * 
     */
    @Import(name="initialDelayInSeconds")
    private @Nullable Output<Integer> initialDelayInSeconds;

    /**
     * @return Number of seconds after the job run has started before a startup probe is initiated.
     * 
     */
    public Optional<Output<Integer>> initialDelayInSeconds() {
        return Optional.ofNullable(this.initialDelayInSeconds);
    }

    /**
     * The probe check type to perform the startup probe and specifies the type of health check for a job.
     * 
     */
    @Import(name="jobProbeCheckType", required=true)
    private Output<String> jobProbeCheckType;

    /**
     * @return The probe check type to perform the startup probe and specifies the type of health check for a job.
     * 
     */
    public Output<String> jobProbeCheckType() {
        return this.jobProbeCheckType;
    }

    /**
     * Number of seconds how often the job run should perform a startup probe
     * 
     */
    @Import(name="periodInSeconds")
    private @Nullable Output<Integer> periodInSeconds;

    /**
     * @return Number of seconds how often the job run should perform a startup probe
     * 
     */
    public Optional<Output<Integer>> periodInSeconds() {
        return Optional.ofNullable(this.periodInSeconds);
    }

    private JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs() {}

    private JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs(JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs $) {
        this.commands = $.commands;
        this.failureThreshold = $.failureThreshold;
        this.initialDelayInSeconds = $.initialDelayInSeconds;
        this.jobProbeCheckType = $.jobProbeCheckType;
        this.periodInSeconds = $.periodInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs $;

        public Builder() {
            $ = new JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs();
        }

        public Builder(JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs defaults) {
            $ = new JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commands The commands to run in the target job run to perform the startup probe
         * 
         * @return builder
         * 
         */
        public Builder commands(Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands The commands to run in the target job run to perform the startup probe
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands The commands to run in the target job run to perform the startup probe
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param failureThreshold How many times the job will try before giving up when a probe fails.
         * 
         * @return builder
         * 
         */
        public Builder failureThreshold(@Nullable Output<Integer> failureThreshold) {
            $.failureThreshold = failureThreshold;
            return this;
        }

        /**
         * @param failureThreshold How many times the job will try before giving up when a probe fails.
         * 
         * @return builder
         * 
         */
        public Builder failureThreshold(Integer failureThreshold) {
            return failureThreshold(Output.of(failureThreshold));
        }

        /**
         * @param initialDelayInSeconds Number of seconds after the job run has started before a startup probe is initiated.
         * 
         * @return builder
         * 
         */
        public Builder initialDelayInSeconds(@Nullable Output<Integer> initialDelayInSeconds) {
            $.initialDelayInSeconds = initialDelayInSeconds;
            return this;
        }

        /**
         * @param initialDelayInSeconds Number of seconds after the job run has started before a startup probe is initiated.
         * 
         * @return builder
         * 
         */
        public Builder initialDelayInSeconds(Integer initialDelayInSeconds) {
            return initialDelayInSeconds(Output.of(initialDelayInSeconds));
        }

        /**
         * @param jobProbeCheckType The probe check type to perform the startup probe and specifies the type of health check for a job.
         * 
         * @return builder
         * 
         */
        public Builder jobProbeCheckType(Output<String> jobProbeCheckType) {
            $.jobProbeCheckType = jobProbeCheckType;
            return this;
        }

        /**
         * @param jobProbeCheckType The probe check type to perform the startup probe and specifies the type of health check for a job.
         * 
         * @return builder
         * 
         */
        public Builder jobProbeCheckType(String jobProbeCheckType) {
            return jobProbeCheckType(Output.of(jobProbeCheckType));
        }

        /**
         * @param periodInSeconds Number of seconds how often the job run should perform a startup probe
         * 
         * @return builder
         * 
         */
        public Builder periodInSeconds(@Nullable Output<Integer> periodInSeconds) {
            $.periodInSeconds = periodInSeconds;
            return this;
        }

        /**
         * @param periodInSeconds Number of seconds how often the job run should perform a startup probe
         * 
         * @return builder
         * 
         */
        public Builder periodInSeconds(Integer periodInSeconds) {
            return periodInSeconds(Output.of(periodInSeconds));
        }

        public JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs build() {
            if ($.commands == null) {
                throw new MissingRequiredPropertyException("JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs", "commands");
            }
            if ($.jobProbeCheckType == null) {
                throw new MissingRequiredPropertyException("JobRunJobNodeConfigurationOverrideDetailsJobNodeGroupConfigurationDetailsListJobConfigurationDetailsStartupProbeDetailsArgs", "jobProbeCheckType");
            }
            return $;
        }
    }

}
