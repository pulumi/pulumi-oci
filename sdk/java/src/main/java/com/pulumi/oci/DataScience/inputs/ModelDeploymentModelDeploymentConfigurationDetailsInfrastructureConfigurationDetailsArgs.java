// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.inputs.ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsInstanceConfigurationArgs;
import com.pulumi.oci.DataScience.inputs.ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs Empty = new ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs();

    /**
     * The minimum network bandwidth for the model deployment.
     * 
     */
    @Import(name="bandwidthMbps")
    private @Nullable Output<Integer> bandwidthMbps;

    /**
     * @return The minimum network bandwidth for the model deployment.
     * 
     */
    public Optional<Output<Integer>> bandwidthMbps() {
        return Optional.ofNullable(this.bandwidthMbps);
    }

    @Import(name="infrastructureType", required=true)
    private Output<String> infrastructureType;

    public Output<String> infrastructureType() {
        return this.infrastructureType;
    }

    /**
     * The model deployment instance configuration.
     * 
     */
    @Import(name="instanceConfiguration", required=true)
    private Output<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsInstanceConfigurationArgs> instanceConfiguration;

    /**
     * @return The model deployment instance configuration.
     * 
     */
    public Output<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsInstanceConfigurationArgs> instanceConfiguration() {
        return this.instanceConfiguration;
    }

    /**
     * The maximum network bandwidth for the model deployment.
     * 
     */
    @Import(name="maximumBandwidthMbps")
    private @Nullable Output<Integer> maximumBandwidthMbps;

    /**
     * @return The maximum network bandwidth for the model deployment.
     * 
     */
    public Optional<Output<Integer>> maximumBandwidthMbps() {
        return Optional.ofNullable(this.maximumBandwidthMbps);
    }

    /**
     * The scaling policy to apply to each model of the deployment.
     * 
     */
    @Import(name="scalingPolicy")
    private @Nullable Output<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyArgs> scalingPolicy;

    /**
     * @return The scaling policy to apply to each model of the deployment.
     * 
     */
    public Optional<Output<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyArgs>> scalingPolicy() {
        return Optional.ofNullable(this.scalingPolicy);
    }

    private ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs() {}

    private ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs $) {
        this.bandwidthMbps = $.bandwidthMbps;
        this.infrastructureType = $.infrastructureType;
        this.instanceConfiguration = $.instanceConfiguration;
        this.maximumBandwidthMbps = $.maximumBandwidthMbps;
        this.scalingPolicy = $.scalingPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs $;

        public Builder() {
            $ = new ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs();
        }

        public Builder(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs defaults) {
            $ = new ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthMbps The minimum network bandwidth for the model deployment.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMbps(@Nullable Output<Integer> bandwidthMbps) {
            $.bandwidthMbps = bandwidthMbps;
            return this;
        }

        /**
         * @param bandwidthMbps The minimum network bandwidth for the model deployment.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMbps(Integer bandwidthMbps) {
            return bandwidthMbps(Output.of(bandwidthMbps));
        }

        public Builder infrastructureType(Output<String> infrastructureType) {
            $.infrastructureType = infrastructureType;
            return this;
        }

        public Builder infrastructureType(String infrastructureType) {
            return infrastructureType(Output.of(infrastructureType));
        }

        /**
         * @param instanceConfiguration The model deployment instance configuration.
         * 
         * @return builder
         * 
         */
        public Builder instanceConfiguration(Output<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsInstanceConfigurationArgs> instanceConfiguration) {
            $.instanceConfiguration = instanceConfiguration;
            return this;
        }

        /**
         * @param instanceConfiguration The model deployment instance configuration.
         * 
         * @return builder
         * 
         */
        public Builder instanceConfiguration(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsInstanceConfigurationArgs instanceConfiguration) {
            return instanceConfiguration(Output.of(instanceConfiguration));
        }

        /**
         * @param maximumBandwidthMbps The maximum network bandwidth for the model deployment.
         * 
         * @return builder
         * 
         */
        public Builder maximumBandwidthMbps(@Nullable Output<Integer> maximumBandwidthMbps) {
            $.maximumBandwidthMbps = maximumBandwidthMbps;
            return this;
        }

        /**
         * @param maximumBandwidthMbps The maximum network bandwidth for the model deployment.
         * 
         * @return builder
         * 
         */
        public Builder maximumBandwidthMbps(Integer maximumBandwidthMbps) {
            return maximumBandwidthMbps(Output.of(maximumBandwidthMbps));
        }

        /**
         * @param scalingPolicy The scaling policy to apply to each model of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder scalingPolicy(@Nullable Output<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyArgs> scalingPolicy) {
            $.scalingPolicy = scalingPolicy;
            return this;
        }

        /**
         * @param scalingPolicy The scaling policy to apply to each model of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder scalingPolicy(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyArgs scalingPolicy) {
            return scalingPolicy(Output.of(scalingPolicy));
        }

        public ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs build() {
            if ($.infrastructureType == null) {
                throw new MissingRequiredPropertyException("ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs", "infrastructureType");
            }
            if ($.instanceConfiguration == null) {
                throw new MissingRequiredPropertyException("ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsArgs", "instanceConfiguration");
            }
            return $;
        }
    }

}
