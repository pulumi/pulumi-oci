// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.inputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetailsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineStepDetailStepInfrastructureConfigurationDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineStepDetailStepInfrastructureConfigurationDetailsArgs Empty = new PipelineStepDetailStepInfrastructureConfigurationDetailsArgs();

    /**
     * (Updatable) The size of the block storage volume to attach to the instance.
     * 
     */
    @Import(name="blockStorageSizeInGbs", required=true)
    private Output<Integer> blockStorageSizeInGbs;

    /**
     * @return (Updatable) The size of the block storage volume to attach to the instance.
     * 
     */
    public Output<Integer> blockStorageSizeInGbs() {
        return this.blockStorageSizeInGbs;
    }

    /**
     * (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
     * 
     */
    @Import(name="shapeConfigDetails")
    private @Nullable Output<PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetailsArgs> shapeConfigDetails;

    /**
     * @return (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
     * 
     */
    public Optional<Output<PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetailsArgs>> shapeConfigDetails() {
        return Optional.ofNullable(this.shapeConfigDetails);
    }

    /**
     * (Updatable) The shape used to launch the instance for all step runs in the pipeline.
     * 
     */
    @Import(name="shapeName", required=true)
    private Output<String> shapeName;

    /**
     * @return (Updatable) The shape used to launch the instance for all step runs in the pipeline.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }

    /**
     * (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private PipelineStepDetailStepInfrastructureConfigurationDetailsArgs() {}

    private PipelineStepDetailStepInfrastructureConfigurationDetailsArgs(PipelineStepDetailStepInfrastructureConfigurationDetailsArgs $) {
        this.blockStorageSizeInGbs = $.blockStorageSizeInGbs;
        this.shapeConfigDetails = $.shapeConfigDetails;
        this.shapeName = $.shapeName;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineStepDetailStepInfrastructureConfigurationDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineStepDetailStepInfrastructureConfigurationDetailsArgs $;

        public Builder() {
            $ = new PipelineStepDetailStepInfrastructureConfigurationDetailsArgs();
        }

        public Builder(PipelineStepDetailStepInfrastructureConfigurationDetailsArgs defaults) {
            $ = new PipelineStepDetailStepInfrastructureConfigurationDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockStorageSizeInGbs (Updatable) The size of the block storage volume to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder blockStorageSizeInGbs(Output<Integer> blockStorageSizeInGbs) {
            $.blockStorageSizeInGbs = blockStorageSizeInGbs;
            return this;
        }

        /**
         * @param blockStorageSizeInGbs (Updatable) The size of the block storage volume to attach to the instance.
         * 
         * @return builder
         * 
         */
        public Builder blockStorageSizeInGbs(Integer blockStorageSizeInGbs) {
            return blockStorageSizeInGbs(Output.of(blockStorageSizeInGbs));
        }

        /**
         * @param shapeConfigDetails (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfigDetails(@Nullable Output<PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetailsArgs> shapeConfigDetails) {
            $.shapeConfigDetails = shapeConfigDetails;
            return this;
        }

        /**
         * @param shapeConfigDetails (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfigDetails(PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetailsArgs shapeConfigDetails) {
            return shapeConfigDetails(Output.of(shapeConfigDetails));
        }

        /**
         * @param shapeName (Updatable) The shape used to launch the instance for all step runs in the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName (Updatable) The shape used to launch the instance for all step runs in the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param subnetId (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public PipelineStepDetailStepInfrastructureConfigurationDetailsArgs build() {
            if ($.blockStorageSizeInGbs == null) {
                throw new MissingRequiredPropertyException("PipelineStepDetailStepInfrastructureConfigurationDetailsArgs", "blockStorageSizeInGbs");
            }
            if ($.shapeName == null) {
                throw new MissingRequiredPropertyException("PipelineStepDetailStepInfrastructureConfigurationDetailsArgs", "shapeName");
            }
            return $;
        }
    }

}
