// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.outputs.GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfiguration;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetContainersContainerWorkloadConfigurationDetailsList {
    /**
     * @return The additional configurations
     * 
     */
    private Map<String,String> additionalConfigurations;
    /**
     * @return The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
     * 
     */
    private String cmd;
    /**
     * @return The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    private Integer healthCheckPort;
    /**
     * @return The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    private Integer serverPort;
    /**
     * @return The use-case configuration details
     * 
     */
    private List<GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfiguration> useCaseConfigurations;
    /**
     * @return The workload use case.
     * 
     */
    private String workloadType;

    private GetContainersContainerWorkloadConfigurationDetailsList() {}
    /**
     * @return The additional configurations
     * 
     */
    public Map<String,String> additionalConfigurations() {
        return this.additionalConfigurations;
    }
    /**
     * @return The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
     * 
     */
    public String cmd() {
        return this.cmd;
    }
    /**
     * @return The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    public Integer healthCheckPort() {
        return this.healthCheckPort;
    }
    /**
     * @return The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    public Integer serverPort() {
        return this.serverPort;
    }
    /**
     * @return The use-case configuration details
     * 
     */
    public List<GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfiguration> useCaseConfigurations() {
        return this.useCaseConfigurations;
    }
    /**
     * @return The workload use case.
     * 
     */
    public String workloadType() {
        return this.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainersContainerWorkloadConfigurationDetailsList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> additionalConfigurations;
        private String cmd;
        private Integer healthCheckPort;
        private Integer serverPort;
        private List<GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfiguration> useCaseConfigurations;
        private String workloadType;
        public Builder() {}
        public Builder(GetContainersContainerWorkloadConfigurationDetailsList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalConfigurations = defaults.additionalConfigurations;
    	      this.cmd = defaults.cmd;
    	      this.healthCheckPort = defaults.healthCheckPort;
    	      this.serverPort = defaults.serverPort;
    	      this.useCaseConfigurations = defaults.useCaseConfigurations;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder additionalConfigurations(Map<String,String> additionalConfigurations) {
            if (additionalConfigurations == null) {
              throw new MissingRequiredPropertyException("GetContainersContainerWorkloadConfigurationDetailsList", "additionalConfigurations");
            }
            this.additionalConfigurations = additionalConfigurations;
            return this;
        }
        @CustomType.Setter
        public Builder cmd(String cmd) {
            if (cmd == null) {
              throw new MissingRequiredPropertyException("GetContainersContainerWorkloadConfigurationDetailsList", "cmd");
            }
            this.cmd = cmd;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPort(Integer healthCheckPort) {
            if (healthCheckPort == null) {
              throw new MissingRequiredPropertyException("GetContainersContainerWorkloadConfigurationDetailsList", "healthCheckPort");
            }
            this.healthCheckPort = healthCheckPort;
            return this;
        }
        @CustomType.Setter
        public Builder serverPort(Integer serverPort) {
            if (serverPort == null) {
              throw new MissingRequiredPropertyException("GetContainersContainerWorkloadConfigurationDetailsList", "serverPort");
            }
            this.serverPort = serverPort;
            return this;
        }
        @CustomType.Setter
        public Builder useCaseConfigurations(List<GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfiguration> useCaseConfigurations) {
            if (useCaseConfigurations == null) {
              throw new MissingRequiredPropertyException("GetContainersContainerWorkloadConfigurationDetailsList", "useCaseConfigurations");
            }
            this.useCaseConfigurations = useCaseConfigurations;
            return this;
        }
        public Builder useCaseConfigurations(GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfiguration... useCaseConfigurations) {
            return useCaseConfigurations(List.of(useCaseConfigurations));
        }
        @CustomType.Setter
        public Builder workloadType(String workloadType) {
            if (workloadType == null) {
              throw new MissingRequiredPropertyException("GetContainersContainerWorkloadConfigurationDetailsList", "workloadType");
            }
            this.workloadType = workloadType;
            return this;
        }
        public GetContainersContainerWorkloadConfigurationDetailsList build() {
            final var _resultValue = new GetContainersContainerWorkloadConfigurationDetailsList();
            _resultValue.additionalConfigurations = additionalConfigurations;
            _resultValue.cmd = cmd;
            _resultValue.healthCheckPort = healthCheckPort;
            _resultValue.serverPort = serverPort;
            _resultValue.useCaseConfigurations = useCaseConfigurations;
            _resultValue.workloadType = workloadType;
            return _resultValue;
        }
    }
}
