// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.outputs.GetContainersContainer;
import com.pulumi.oci.DataScience.outputs.GetContainersFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainersResult {
    /**
     * @return The name of the container. This can be same for different tags
     * 
     */
    private @Nullable String containerName;
    /**
     * @return The list of containers.
     * 
     */
    private List<GetContainersContainer> containers;
    /**
     * @return The display name of the container.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetContainersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The latest tag of the container.
     * 
     */
    private @Nullable Boolean isLatest;
    /**
     * @return Container Version LifecycleState.
     * 
     */
    private @Nullable String state;
    private @Nullable String tagQueryParam;
    private @Nullable String targetWorkload;
    private @Nullable String usageQueryParam;

    private GetContainersResult() {}
    /**
     * @return The name of the container. This can be same for different tags
     * 
     */
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }
    /**
     * @return The list of containers.
     * 
     */
    public List<GetContainersContainer> containers() {
        return this.containers;
    }
    /**
     * @return The display name of the container.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetContainersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The latest tag of the container.
     * 
     */
    public Optional<Boolean> isLatest() {
        return Optional.ofNullable(this.isLatest);
    }
    /**
     * @return Container Version LifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> tagQueryParam() {
        return Optional.ofNullable(this.tagQueryParam);
    }
    public Optional<String> targetWorkload() {
        return Optional.ofNullable(this.targetWorkload);
    }
    public Optional<String> usageQueryParam() {
        return Optional.ofNullable(this.usageQueryParam);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String containerName;
        private List<GetContainersContainer> containers;
        private @Nullable String displayName;
        private @Nullable List<GetContainersFilter> filters;
        private String id;
        private @Nullable Boolean isLatest;
        private @Nullable String state;
        private @Nullable String tagQueryParam;
        private @Nullable String targetWorkload;
        private @Nullable String usageQueryParam;
        public Builder() {}
        public Builder(GetContainersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerName = defaults.containerName;
    	      this.containers = defaults.containers;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isLatest = defaults.isLatest;
    	      this.state = defaults.state;
    	      this.tagQueryParam = defaults.tagQueryParam;
    	      this.targetWorkload = defaults.targetWorkload;
    	      this.usageQueryParam = defaults.usageQueryParam;
        }

        @CustomType.Setter
        public Builder containerName(@Nullable String containerName) {

            this.containerName = containerName;
            return this;
        }
        @CustomType.Setter
        public Builder containers(List<GetContainersContainer> containers) {
            if (containers == null) {
              throw new MissingRequiredPropertyException("GetContainersResult", "containers");
            }
            this.containers = containers;
            return this;
        }
        public Builder containers(GetContainersContainer... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetContainersFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetContainersFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetContainersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isLatest(@Nullable Boolean isLatest) {

            this.isLatest = isLatest;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tagQueryParam(@Nullable String tagQueryParam) {

            this.tagQueryParam = tagQueryParam;
            return this;
        }
        @CustomType.Setter
        public Builder targetWorkload(@Nullable String targetWorkload) {

            this.targetWorkload = targetWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder usageQueryParam(@Nullable String usageQueryParam) {

            this.usageQueryParam = usageQueryParam;
            return this;
        }
        public GetContainersResult build() {
            final var _resultValue = new GetContainersResult();
            _resultValue.containerName = containerName;
            _resultValue.containers = containers;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isLatest = isLatest;
            _resultValue.state = state;
            _resultValue.tagQueryParam = tagQueryParam;
            _resultValue.targetWorkload = targetWorkload;
            _resultValue.usageQueryParam = usageQueryParam;
            return _resultValue;
        }
    }
}
