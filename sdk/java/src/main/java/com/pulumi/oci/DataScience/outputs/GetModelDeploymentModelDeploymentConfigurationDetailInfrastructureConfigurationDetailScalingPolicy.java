// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.outputs.GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicyAutoScalingPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy {
    /**
     * @return The list of autoscaling policy details.
     * 
     */
    private List<GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicyAutoScalingPolicy> autoScalingPolicies;
    /**
     * @return For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
     * 
     */
    private Integer coolDownInSeconds;
    /**
     * @return The number of instances for the model deployment.
     * 
     */
    private Integer instanceCount;
    /**
     * @return Whether the autoscaling policy is enabled.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return The type of scaling policy.
     * 
     */
    private String policyType;

    private GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy() {}
    /**
     * @return The list of autoscaling policy details.
     * 
     */
    public List<GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicyAutoScalingPolicy> autoScalingPolicies() {
        return this.autoScalingPolicies;
    }
    /**
     * @return For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
     * 
     */
    public Integer coolDownInSeconds() {
        return this.coolDownInSeconds;
    }
    /**
     * @return The number of instances for the model deployment.
     * 
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }
    /**
     * @return Whether the autoscaling policy is enabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return The type of scaling policy.
     * 
     */
    public String policyType() {
        return this.policyType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicyAutoScalingPolicy> autoScalingPolicies;
        private Integer coolDownInSeconds;
        private Integer instanceCount;
        private Boolean isEnabled;
        private String policyType;
        public Builder() {}
        public Builder(GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingPolicies = defaults.autoScalingPolicies;
    	      this.coolDownInSeconds = defaults.coolDownInSeconds;
    	      this.instanceCount = defaults.instanceCount;
    	      this.isEnabled = defaults.isEnabled;
    	      this.policyType = defaults.policyType;
        }

        @CustomType.Setter
        public Builder autoScalingPolicies(List<GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicyAutoScalingPolicy> autoScalingPolicies) {
            if (autoScalingPolicies == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy", "autoScalingPolicies");
            }
            this.autoScalingPolicies = autoScalingPolicies;
            return this;
        }
        public Builder autoScalingPolicies(GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicyAutoScalingPolicy... autoScalingPolicies) {
            return autoScalingPolicies(List.of(autoScalingPolicies));
        }
        @CustomType.Setter
        public Builder coolDownInSeconds(Integer coolDownInSeconds) {
            if (coolDownInSeconds == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy", "coolDownInSeconds");
            }
            this.coolDownInSeconds = coolDownInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder instanceCount(Integer instanceCount) {
            if (instanceCount == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy", "instanceCount");
            }
            this.instanceCount = instanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            if (isEnabled == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy", "isEnabled");
            }
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder policyType(String policyType) {
            if (policyType == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy", "policyType");
            }
            this.policyType = policyType;
            return this;
        }
        public GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy build() {
            final var _resultValue = new GetModelDeploymentModelDeploymentConfigurationDetailInfrastructureConfigurationDetailScalingPolicy();
            _resultValue.autoScalingPolicies = autoScalingPolicies;
            _resultValue.coolDownInSeconds = coolDownInSeconds;
            _resultValue.instanceCount = instanceCount;
            _resultValue.isEnabled = isEnabled;
            _resultValue.policyType = policyType;
            return _resultValue;
        }
    }
}
