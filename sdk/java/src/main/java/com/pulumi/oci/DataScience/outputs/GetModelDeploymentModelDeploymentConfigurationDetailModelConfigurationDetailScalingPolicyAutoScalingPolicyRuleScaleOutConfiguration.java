// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration {
    /**
     * @return The value is used for adjusting the count of instances by.
     * 
     */
    private Integer instanceCountAdjustment;
    /**
     * @return The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
     * 
     */
    private String pendingDuration;
    /**
     * @return The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     */
    private String query;
    /**
     * @return The type of scaling configuration.
     * 
     */
    private String scalingConfigurationType;
    /**
     * @return A metric value at which the scaling operation will be triggered.
     * 
     */
    private Integer threshold;

    private GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration() {}
    /**
     * @return The value is used for adjusting the count of instances by.
     * 
     */
    public Integer instanceCountAdjustment() {
        return this.instanceCountAdjustment;
    }
    /**
     * @return The period of time that the condition defined in the alarm must persist before the alarm state changes from &#34;OK&#34; to &#34;FIRING&#34; or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to &#34;FIRING&#34;; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to &#34;OK.&#34;
     * 
     */
    public String pendingDuration() {
        return this.pendingDuration;
    }
    /**
     * @return The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return The type of scaling configuration.
     * 
     */
    public String scalingConfigurationType() {
        return this.scalingConfigurationType;
    }
    /**
     * @return A metric value at which the scaling operation will be triggered.
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer instanceCountAdjustment;
        private String pendingDuration;
        private String query;
        private String scalingConfigurationType;
        private Integer threshold;
        public Builder() {}
        public Builder(GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.instanceCountAdjustment = defaults.instanceCountAdjustment;
    	      this.pendingDuration = defaults.pendingDuration;
    	      this.query = defaults.query;
    	      this.scalingConfigurationType = defaults.scalingConfigurationType;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder instanceCountAdjustment(Integer instanceCountAdjustment) {
            if (instanceCountAdjustment == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration", "instanceCountAdjustment");
            }
            this.instanceCountAdjustment = instanceCountAdjustment;
            return this;
        }
        @CustomType.Setter
        public Builder pendingDuration(String pendingDuration) {
            if (pendingDuration == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration", "pendingDuration");
            }
            this.pendingDuration = pendingDuration;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder scalingConfigurationType(String scalingConfigurationType) {
            if (scalingConfigurationType == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration", "scalingConfigurationType");
            }
            this.scalingConfigurationType = scalingConfigurationType;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration build() {
            final var _resultValue = new GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration();
            _resultValue.instanceCountAdjustment = instanceCountAdjustment;
            _resultValue.pendingDuration = pendingDuration;
            _resultValue.query = query;
            _resultValue.scalingConfigurationType = scalingConfigurationType;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
