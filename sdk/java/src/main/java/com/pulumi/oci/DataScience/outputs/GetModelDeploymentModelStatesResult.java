// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.outputs.GetModelDeploymentModelStatesFilter;
import com.pulumi.oci.DataScience.outputs.GetModelDeploymentModelStatesModelDeploymentModelState;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetModelDeploymentModelStatesResult {
    private String compartmentId;
    /**
     * @return A user-friendly display name for the resource.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetModelDeploymentModelStatesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return SaaS friendly name for the model OCID.
     * 
     */
    private @Nullable String inferenceKey;
    private String modelDeploymentId;
    /**
     * @return The list of model_deployment_model_states.
     * 
     */
    private List<GetModelDeploymentModelStatesModelDeploymentModelState> modelDeploymentModelStates;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployed model in model deployment.
     * 
     */
    private @Nullable String modelId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project associated with the model.
     * 
     */
    private @Nullable String projectId;

    private GetModelDeploymentModelStatesResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A user-friendly display name for the resource.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetModelDeploymentModelStatesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return SaaS friendly name for the model OCID.
     * 
     */
    public Optional<String> inferenceKey() {
        return Optional.ofNullable(this.inferenceKey);
    }
    public String modelDeploymentId() {
        return this.modelDeploymentId;
    }
    /**
     * @return The list of model_deployment_model_states.
     * 
     */
    public List<GetModelDeploymentModelStatesModelDeploymentModelState> modelDeploymentModelStates() {
        return this.modelDeploymentModelStates;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployed model in model deployment.
     * 
     */
    public Optional<String> modelId() {
        return Optional.ofNullable(this.modelId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project associated with the model.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetModelDeploymentModelStatesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetModelDeploymentModelStatesFilter> filters;
        private String id;
        private @Nullable String inferenceKey;
        private String modelDeploymentId;
        private List<GetModelDeploymentModelStatesModelDeploymentModelState> modelDeploymentModelStates;
        private @Nullable String modelId;
        private @Nullable String projectId;
        public Builder() {}
        public Builder(GetModelDeploymentModelStatesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.inferenceKey = defaults.inferenceKey;
    	      this.modelDeploymentId = defaults.modelDeploymentId;
    	      this.modelDeploymentModelStates = defaults.modelDeploymentModelStates;
    	      this.modelId = defaults.modelId;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelStatesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetModelDeploymentModelStatesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetModelDeploymentModelStatesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelStatesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inferenceKey(@Nullable String inferenceKey) {

            this.inferenceKey = inferenceKey;
            return this;
        }
        @CustomType.Setter
        public Builder modelDeploymentId(String modelDeploymentId) {
            if (modelDeploymentId == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelStatesResult", "modelDeploymentId");
            }
            this.modelDeploymentId = modelDeploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder modelDeploymentModelStates(List<GetModelDeploymentModelStatesModelDeploymentModelState> modelDeploymentModelStates) {
            if (modelDeploymentModelStates == null) {
              throw new MissingRequiredPropertyException("GetModelDeploymentModelStatesResult", "modelDeploymentModelStates");
            }
            this.modelDeploymentModelStates = modelDeploymentModelStates;
            return this;
        }
        public Builder modelDeploymentModelStates(GetModelDeploymentModelStatesModelDeploymentModelState... modelDeploymentModelStates) {
            return modelDeploymentModelStates(List.of(modelDeploymentModelStates));
        }
        @CustomType.Setter
        public Builder modelId(@Nullable String modelId) {

            this.modelId = modelId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        public GetModelDeploymentModelStatesResult build() {
            final var _resultValue = new GetModelDeploymentModelStatesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.inferenceKey = inferenceKey;
            _resultValue.modelDeploymentId = modelDeploymentId;
            _resultValue.modelDeploymentModelStates = modelDeploymentModelStates;
            _resultValue.modelId = modelId;
            _resultValue.projectId = projectId;
            return _resultValue;
        }
    }
}
