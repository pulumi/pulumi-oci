// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetail;
import com.pulumi.oci.DataScience.outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail {
    /**
     * @return The Spark configuration passed to the running process.
     * 
     */
    private Map<String,String> configuration;
    /**
     * @return The VM shape for the driver.
     * 
     */
    private String driverShape;
    /**
     * @return Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
     * 
     */
    private List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetail> driverShapeConfigDetails;
    /**
     * @return The VM shape for the executors.
     * 
     */
    private String executorShape;
    /**
     * @return Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
     * 
     */
    private List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetail> executorShapeConfigDetails;
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
     * 
     */
    private String logsBucketUri;
    /**
     * @return The number of executor VMs requested.
     * 
     */
    private Integer numExecutors;
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
     * 
     */
    private String warehouseBucketUri;

    private GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail() {}
    /**
     * @return The Spark configuration passed to the running process.
     * 
     */
    public Map<String,String> configuration() {
        return this.configuration;
    }
    /**
     * @return The VM shape for the driver.
     * 
     */
    public String driverShape() {
        return this.driverShape;
    }
    /**
     * @return Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
     * 
     */
    public List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetail> driverShapeConfigDetails() {
        return this.driverShapeConfigDetails;
    }
    /**
     * @return The VM shape for the executors.
     * 
     */
    public String executorShape() {
        return this.executorShape;
    }
    /**
     * @return Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
     * 
     */
    public List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetail> executorShapeConfigDetails() {
        return this.executorShapeConfigDetails;
    }
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
     * 
     */
    public String logsBucketUri() {
        return this.logsBucketUri;
    }
    /**
     * @return The number of executor VMs requested.
     * 
     */
    public Integer numExecutors() {
        return this.numExecutors;
    }
    /**
     * @return An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
     * 
     */
    public String warehouseBucketUri() {
        return this.warehouseBucketUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> configuration;
        private String driverShape;
        private List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetail> driverShapeConfigDetails;
        private String executorShape;
        private List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetail> executorShapeConfigDetails;
        private String logsBucketUri;
        private Integer numExecutors;
        private String warehouseBucketUri;
        public Builder() {}
        public Builder(GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configuration = defaults.configuration;
    	      this.driverShape = defaults.driverShape;
    	      this.driverShapeConfigDetails = defaults.driverShapeConfigDetails;
    	      this.executorShape = defaults.executorShape;
    	      this.executorShapeConfigDetails = defaults.executorShapeConfigDetails;
    	      this.logsBucketUri = defaults.logsBucketUri;
    	      this.numExecutors = defaults.numExecutors;
    	      this.warehouseBucketUri = defaults.warehouseBucketUri;
        }

        @CustomType.Setter
        public Builder configuration(Map<String,String> configuration) {
            if (configuration == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "configuration");
            }
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder driverShape(String driverShape) {
            if (driverShape == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "driverShape");
            }
            this.driverShape = driverShape;
            return this;
        }
        @CustomType.Setter
        public Builder driverShapeConfigDetails(List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetail> driverShapeConfigDetails) {
            if (driverShapeConfigDetails == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "driverShapeConfigDetails");
            }
            this.driverShapeConfigDetails = driverShapeConfigDetails;
            return this;
        }
        public Builder driverShapeConfigDetails(GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetail... driverShapeConfigDetails) {
            return driverShapeConfigDetails(List.of(driverShapeConfigDetails));
        }
        @CustomType.Setter
        public Builder executorShape(String executorShape) {
            if (executorShape == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "executorShape");
            }
            this.executorShape = executorShape;
            return this;
        }
        @CustomType.Setter
        public Builder executorShapeConfigDetails(List<GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetail> executorShapeConfigDetails) {
            if (executorShapeConfigDetails == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "executorShapeConfigDetails");
            }
            this.executorShapeConfigDetails = executorShapeConfigDetails;
            return this;
        }
        public Builder executorShapeConfigDetails(GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetail... executorShapeConfigDetails) {
            return executorShapeConfigDetails(List.of(executorShapeConfigDetails));
        }
        @CustomType.Setter
        public Builder logsBucketUri(String logsBucketUri) {
            if (logsBucketUri == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "logsBucketUri");
            }
            this.logsBucketUri = logsBucketUri;
            return this;
        }
        @CustomType.Setter
        public Builder numExecutors(Integer numExecutors) {
            if (numExecutors == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "numExecutors");
            }
            this.numExecutors = numExecutors;
            return this;
        }
        @CustomType.Setter
        public Builder warehouseBucketUri(String warehouseBucketUri) {
            if (warehouseBucketUri == null) {
              throw new MissingRequiredPropertyException("GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail", "warehouseBucketUri");
            }
            this.warehouseBucketUri = warehouseBucketUri;
            return this;
        }
        public GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail build() {
            final var _resultValue = new GetPipelinesPipelineStepDetailStepDataflowConfigurationDetail();
            _resultValue.configuration = configuration;
            _resultValue.driverShape = driverShape;
            _resultValue.driverShapeConfigDetails = driverShapeConfigDetails;
            _resultValue.executorShape = executorShape;
            _resultValue.executorShapeConfigDetails = executorShapeConfigDetails;
            _resultValue.logsBucketUri = logsBucketUri;
            _resultValue.numExecutors = numExecutors;
            _resultValue.warehouseBucketUri = warehouseBucketUri;
            return _resultValue;
        }
    }
}
