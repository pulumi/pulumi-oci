// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails {
    /**
     * @return (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
     * 
     */
    private @Nullable List<String> cmds;
    /**
     * @return (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
     * 
     */
    private @Nullable List<String> entrypoints;
    /**
     * @return (Updatable) The environment configuration type
     * 
     */
    private String environmentConfigurationType;
    /**
     * @return (Updatable) Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can&#39;t be reserved Model Deployment environment variables.
     * 
     */
    private @Nullable Map<String,Object> environmentVariables;
    /**
     * @return (Updatable) The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    private @Nullable Integer healthCheckPort;
    /**
     * @return (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `&lt;region&gt;.ocir.io/&lt;registry&gt;/&lt;image&gt;:&lt;tag&gt;` `&lt;region&gt;.ocir.io/&lt;registry&gt;/&lt;image&gt;:&lt;tag&gt;@digest`
     * 
     */
    private @Nullable String image;
    /**
     * @return (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
     * 
     */
    private @Nullable String imageDigest;
    /**
     * @return (Updatable) The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    private @Nullable Integer serverPort;

    private ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails() {}
    /**
     * @return (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
     * 
     */
    public List<String> cmds() {
        return this.cmds == null ? List.of() : this.cmds;
    }
    /**
     * @return (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
     * 
     */
    public List<String> entrypoints() {
        return this.entrypoints == null ? List.of() : this.entrypoints;
    }
    /**
     * @return (Updatable) The environment configuration type
     * 
     */
    public String environmentConfigurationType() {
        return this.environmentConfigurationType;
    }
    /**
     * @return (Updatable) Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can&#39;t be reserved Model Deployment environment variables.
     * 
     */
    public Map<String,Object> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }
    /**
     * @return (Updatable) The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    public Optional<Integer> healthCheckPort() {
        return Optional.ofNullable(this.healthCheckPort);
    }
    /**
     * @return (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `&lt;region&gt;.ocir.io/&lt;registry&gt;/&lt;image&gt;:&lt;tag&gt;` `&lt;region&gt;.ocir.io/&lt;registry&gt;/&lt;image&gt;:&lt;tag&gt;@digest`
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
     * 
     */
    public Optional<String> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }
    /**
     * @return (Updatable) The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
     * 
     */
    public Optional<Integer> serverPort() {
        return Optional.ofNullable(this.serverPort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> cmds;
        private @Nullable List<String> entrypoints;
        private String environmentConfigurationType;
        private @Nullable Map<String,Object> environmentVariables;
        private @Nullable Integer healthCheckPort;
        private @Nullable String image;
        private @Nullable String imageDigest;
        private @Nullable Integer serverPort;
        public Builder() {}
        public Builder(ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cmds = defaults.cmds;
    	      this.entrypoints = defaults.entrypoints;
    	      this.environmentConfigurationType = defaults.environmentConfigurationType;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.healthCheckPort = defaults.healthCheckPort;
    	      this.image = defaults.image;
    	      this.imageDigest = defaults.imageDigest;
    	      this.serverPort = defaults.serverPort;
        }

        @CustomType.Setter
        public Builder cmds(@Nullable List<String> cmds) {
            this.cmds = cmds;
            return this;
        }
        public Builder cmds(String... cmds) {
            return cmds(List.of(cmds));
        }
        @CustomType.Setter
        public Builder entrypoints(@Nullable List<String> entrypoints) {
            this.entrypoints = entrypoints;
            return this;
        }
        public Builder entrypoints(String... entrypoints) {
            return entrypoints(List.of(entrypoints));
        }
        @CustomType.Setter
        public Builder environmentConfigurationType(String environmentConfigurationType) {
            this.environmentConfigurationType = Objects.requireNonNull(environmentConfigurationType);
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(@Nullable Map<String,Object> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPort(@Nullable Integer healthCheckPort) {
            this.healthCheckPort = healthCheckPort;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imageDigest(@Nullable String imageDigest) {
            this.imageDigest = imageDigest;
            return this;
        }
        @CustomType.Setter
        public Builder serverPort(@Nullable Integer serverPort) {
            this.serverPort = serverPort;
            return this;
        }
        public ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails build() {
            final var o = new ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails();
            o.cmds = cmds;
            o.entrypoints = entrypoints;
            o.environmentConfigurationType = environmentConfigurationType;
            o.environmentVariables = environmentVariables;
            o.healthCheckPort = healthCheckPort;
            o.image = image;
            o.imageDigest = imageDigest;
            o.serverPort = serverPort;
            return o;
        }
    }
}
