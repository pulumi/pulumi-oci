// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DataScience.outputs.ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicyRule;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy {
    /**
     * @return The type of autoscaling policy.
     * 
     */
    private String autoScalingPolicyType;
    /**
     * @return For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
     * 
     */
    private Integer initialInstanceCount;
    /**
     * @return For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
     * 
     */
    private Integer maximumInstanceCount;
    /**
     * @return For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
     * 
     */
    private Integer minimumInstanceCount;
    /**
     * @return The list of autoscaling policy rules.
     * 
     */
    private List<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicyRule> rules;

    private ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy() {}
    /**
     * @return The type of autoscaling policy.
     * 
     */
    public String autoScalingPolicyType() {
        return this.autoScalingPolicyType;
    }
    /**
     * @return For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
     * 
     */
    public Integer initialInstanceCount() {
        return this.initialInstanceCount;
    }
    /**
     * @return For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
     * 
     */
    public Integer maximumInstanceCount() {
        return this.maximumInstanceCount;
    }
    /**
     * @return For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
     * 
     */
    public Integer minimumInstanceCount() {
        return this.minimumInstanceCount;
    }
    /**
     * @return The list of autoscaling policy rules.
     * 
     */
    public List<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicyRule> rules() {
        return this.rules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoScalingPolicyType;
        private Integer initialInstanceCount;
        private Integer maximumInstanceCount;
        private Integer minimumInstanceCount;
        private List<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicyRule> rules;
        public Builder() {}
        public Builder(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingPolicyType = defaults.autoScalingPolicyType;
    	      this.initialInstanceCount = defaults.initialInstanceCount;
    	      this.maximumInstanceCount = defaults.maximumInstanceCount;
    	      this.minimumInstanceCount = defaults.minimumInstanceCount;
    	      this.rules = defaults.rules;
        }

        @CustomType.Setter
        public Builder autoScalingPolicyType(String autoScalingPolicyType) {
            if (autoScalingPolicyType == null) {
              throw new MissingRequiredPropertyException("ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy", "autoScalingPolicyType");
            }
            this.autoScalingPolicyType = autoScalingPolicyType;
            return this;
        }
        @CustomType.Setter
        public Builder initialInstanceCount(Integer initialInstanceCount) {
            if (initialInstanceCount == null) {
              throw new MissingRequiredPropertyException("ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy", "initialInstanceCount");
            }
            this.initialInstanceCount = initialInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder maximumInstanceCount(Integer maximumInstanceCount) {
            if (maximumInstanceCount == null) {
              throw new MissingRequiredPropertyException("ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy", "maximumInstanceCount");
            }
            this.maximumInstanceCount = maximumInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumInstanceCount(Integer minimumInstanceCount) {
            if (minimumInstanceCount == null) {
              throw new MissingRequiredPropertyException("ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy", "minimumInstanceCount");
            }
            this.minimumInstanceCount = minimumInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder rules(List<ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicyRule> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy", "rules");
            }
            this.rules = rules;
            return this;
        }
        public Builder rules(ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicyRule... rules) {
            return rules(List.of(rules));
        }
        public ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy build() {
            final var _resultValue = new ModelDeploymentModelDeploymentConfigurationDetailsInfrastructureConfigurationDetailsScalingPolicyAutoScalingPolicy();
            _resultValue.autoScalingPolicyType = autoScalingPolicyType;
            _resultValue.initialInstanceCount = initialInstanceCount;
            _resultValue.maximumInstanceCount = maximumInstanceCount;
            _resultValue.minimumInstanceCount = minimumInstanceCount;
            _resultValue.rules = rules;
            return _resultValue;
        }
    }
}
