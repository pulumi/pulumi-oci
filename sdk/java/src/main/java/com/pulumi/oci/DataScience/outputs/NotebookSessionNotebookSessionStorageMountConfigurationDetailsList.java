// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotebookSessionNotebookSessionStorageMountConfigurationDetailsList {
    /**
     * @return (Updatable) The object storage bucket
     * 
     */
    private @Nullable String bucket;
    /**
     * @return (Updatable) The local directory name to be mounted
     * 
     */
    private String destinationDirectoryName;
    /**
     * @return (Updatable) The local path of the mounted directory, excluding directory name.
     * 
     */
    private @Nullable String destinationPath;
    /**
     * @return (Updatable) OCID of the export
     * 
     */
    private @Nullable String exportId;
    /**
     * @return (Updatable) OCID of the mount target
     * 
     */
    private @Nullable String mountTargetId;
    /**
     * @return (Updatable) The object storage namespace
     * 
     */
    private @Nullable String namespace;
    /**
     * @return (Updatable) Prefix in the bucket to mount
     * 
     */
    private @Nullable String prefix;
    /**
     * @return (Updatable) The type of storage.
     * 
     */
    private String storageType;

    private NotebookSessionNotebookSessionStorageMountConfigurationDetailsList() {}
    /**
     * @return (Updatable) The object storage bucket
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }
    /**
     * @return (Updatable) The local directory name to be mounted
     * 
     */
    public String destinationDirectoryName() {
        return this.destinationDirectoryName;
    }
    /**
     * @return (Updatable) The local path of the mounted directory, excluding directory name.
     * 
     */
    public Optional<String> destinationPath() {
        return Optional.ofNullable(this.destinationPath);
    }
    /**
     * @return (Updatable) OCID of the export
     * 
     */
    public Optional<String> exportId() {
        return Optional.ofNullable(this.exportId);
    }
    /**
     * @return (Updatable) OCID of the mount target
     * 
     */
    public Optional<String> mountTargetId() {
        return Optional.ofNullable(this.mountTargetId);
    }
    /**
     * @return (Updatable) The object storage namespace
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return (Updatable) Prefix in the bucket to mount
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return (Updatable) The type of storage.
     * 
     */
    public String storageType() {
        return this.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotebookSessionNotebookSessionStorageMountConfigurationDetailsList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bucket;
        private String destinationDirectoryName;
        private @Nullable String destinationPath;
        private @Nullable String exportId;
        private @Nullable String mountTargetId;
        private @Nullable String namespace;
        private @Nullable String prefix;
        private String storageType;
        public Builder() {}
        public Builder(NotebookSessionNotebookSessionStorageMountConfigurationDetailsList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.destinationDirectoryName = defaults.destinationDirectoryName;
    	      this.destinationPath = defaults.destinationPath;
    	      this.exportId = defaults.exportId;
    	      this.mountTargetId = defaults.mountTargetId;
    	      this.namespace = defaults.namespace;
    	      this.prefix = defaults.prefix;
    	      this.storageType = defaults.storageType;
        }

        @CustomType.Setter
        public Builder bucket(@Nullable String bucket) {
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDirectoryName(String destinationDirectoryName) {
            this.destinationDirectoryName = Objects.requireNonNull(destinationDirectoryName);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPath(@Nullable String destinationPath) {
            this.destinationPath = destinationPath;
            return this;
        }
        @CustomType.Setter
        public Builder exportId(@Nullable String exportId) {
            this.exportId = exportId;
            return this;
        }
        @CustomType.Setter
        public Builder mountTargetId(@Nullable String mountTargetId) {
            this.mountTargetId = mountTargetId;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        public NotebookSessionNotebookSessionStorageMountConfigurationDetailsList build() {
            final var o = new NotebookSessionNotebookSessionStorageMountConfigurationDetailsList();
            o.bucket = bucket;
            o.destinationDirectoryName = destinationDirectoryName;
            o.destinationPath = destinationPath;
            o.exportId = exportId;
            o.mountTargetId = mountTargetId;
            o.namespace = namespace;
            o.prefix = prefix;
            o.storageType = storageType;
            return o;
        }
    }
}
