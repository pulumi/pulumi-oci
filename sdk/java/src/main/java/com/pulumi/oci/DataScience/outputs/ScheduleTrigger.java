// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DataScience.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ScheduleTrigger {
    /**
     * @return (Updatable) Schedule cron expression
     * 
     */
    private @Nullable String cronExpression;
    /**
     * @return (Updatable) The type of frequency
     * 
     */
    private @Nullable String frequency;
    /**
     * @return (Updatable) The interval of frequency.
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return (Updatable) when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
     * 
     */
    private @Nullable Boolean isRandomStartTime;
    /**
     * @return (Updatable) This recurrence field conforms to RFC-5545 formatting
     * 
     */
    private @Nullable String recurrence;
    /**
     * @return (Updatable) The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeEnd;
    /**
     * @return (Updatable) The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private @Nullable String timeStart;
    /**
     * @return (Updatable) The schedule trigger type
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private String triggerType;

    private ScheduleTrigger() {}
    /**
     * @return (Updatable) Schedule cron expression
     * 
     */
    public Optional<String> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }
    /**
     * @return (Updatable) The type of frequency
     * 
     */
    public Optional<String> frequency() {
        return Optional.ofNullable(this.frequency);
    }
    /**
     * @return (Updatable) The interval of frequency.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return (Updatable) when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
     * 
     */
    public Optional<Boolean> isRandomStartTime() {
        return Optional.ofNullable(this.isRandomStartTime);
    }
    /**
     * @return (Updatable) This recurrence field conforms to RFC-5545 formatting
     * 
     */
    public Optional<String> recurrence() {
        return Optional.ofNullable(this.recurrence);
    }
    /**
     * @return (Updatable) The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeEnd() {
        return Optional.ofNullable(this.timeEnd);
    }
    /**
     * @return (Updatable) The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Optional<String> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }
    /**
     * @return (Updatable) The schedule trigger type
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public String triggerType() {
        return this.triggerType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleTrigger defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cronExpression;
        private @Nullable String frequency;
        private @Nullable Integer interval;
        private @Nullable Boolean isRandomStartTime;
        private @Nullable String recurrence;
        private @Nullable String timeEnd;
        private @Nullable String timeStart;
        private String triggerType;
        public Builder() {}
        public Builder(ScheduleTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronExpression = defaults.cronExpression;
    	      this.frequency = defaults.frequency;
    	      this.interval = defaults.interval;
    	      this.isRandomStartTime = defaults.isRandomStartTime;
    	      this.recurrence = defaults.recurrence;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.triggerType = defaults.triggerType;
        }

        @CustomType.Setter
        public Builder cronExpression(@Nullable String cronExpression) {

            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(@Nullable String frequency) {

            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder isRandomStartTime(@Nullable Boolean isRandomStartTime) {

            this.isRandomStartTime = isRandomStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder recurrence(@Nullable String recurrence) {

            this.recurrence = recurrence;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(@Nullable String timeEnd) {

            this.timeEnd = timeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(@Nullable String timeStart) {

            this.timeStart = timeStart;
            return this;
        }
        @CustomType.Setter
        public Builder triggerType(String triggerType) {
            if (triggerType == null) {
              throw new MissingRequiredPropertyException("ScheduleTrigger", "triggerType");
            }
            this.triggerType = triggerType;
            return this;
        }
        public ScheduleTrigger build() {
            final var _resultValue = new ScheduleTrigger();
            _resultValue.cronExpression = cronExpression;
            _resultValue.frequency = frequency;
            _resultValue.interval = interval;
            _resultValue.isRandomStartTime = isRandomStartTime;
            _resultValue.recurrence = recurrence;
            _resultValue.timeEnd = timeEnd;
            _resultValue.timeStart = timeStart;
            _resultValue.triggerType = triggerType;
            return _resultValue;
        }
    }
}
