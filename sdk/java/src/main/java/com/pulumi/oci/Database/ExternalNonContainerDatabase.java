// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Database.ExternalNonContainerDatabaseArgs;
import com.pulumi.oci.Database.inputs.ExternalNonContainerDatabaseState;
import com.pulumi.oci.Database.outputs.ExternalNonContainerDatabaseDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.ExternalNonContainerDatabaseOperationsInsightsConfig;
import com.pulumi.oci.Database.outputs.ExternalNonContainerDatabaseStackMonitoringConfig;
import com.pulumi.oci.Utilities;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the External Non Container Database resource in Oracle Cloud Infrastructure Database service.
 * 
 * Creates a new ExternalNonContainerDatabase resource
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.Database.ExternalNonContainerDatabase;
 * import com.pulumi.oci.Database.ExternalNonContainerDatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testExternalNonContainerDatabase = new ExternalNonContainerDatabase(&#34;testExternalNonContainerDatabase&#34;, ExternalNonContainerDatabaseArgs.builder()        
 *             .compartmentId(var_.compartment_id())
 *             .displayName(var_.external_non_container_database_display_name())
 *             .definedTags(var_.external_non_container_database_defined_tags())
 *             .freeformTags(Map.of(&#34;Department&#34;, &#34;Finance&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ExternalNonContainerDatabases can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:Database/externalNonContainerDatabase:ExternalNonContainerDatabase test_external_non_container_database &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Database/externalNonContainerDatabase:ExternalNonContainerDatabase")
public class ExternalNonContainerDatabase extends com.pulumi.resources.CustomResource {
    /**
     * The character set of the external database.
     * 
     */
    @Export(name="characterSet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> characterSet;

    /**
     * @return The character set of the external database.
     * 
     */
    public Output<Optional<String>> characterSet() {
        return Codegen.optional(this.characterSet);
    }
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * The Oracle Database configuration
     * 
     */
    @Export(name="databaseConfiguration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> databaseConfiguration;

    /**
     * @return The Oracle Database configuration
     * 
     */
    public Output<Optional<String>> databaseConfiguration() {
        return Codegen.optional(this.databaseConfiguration);
    }
    /**
     * The Oracle Database edition.
     * 
     */
    @Export(name="databaseEdition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> databaseEdition;

    /**
     * @return The Oracle Database edition.
     * 
     */
    public Output<Optional<String>> databaseEdition() {
        return Codegen.optional(this.databaseEdition);
    }
    /**
     * The configuration of the Database Management service.
     * 
     */
    @Export(name="databaseManagementConfigs", refs={List.class,ExternalNonContainerDatabaseDatabaseManagementConfig.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ExternalNonContainerDatabaseDatabaseManagementConfig>> databaseManagementConfigs;

    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public Output<Optional<List<ExternalNonContainerDatabaseDatabaseManagementConfig>>> databaseManagementConfigs() {
        return Codegen.optional(this.databaseManagementConfigs);
    }
    /**
     * The Oracle Database version.
     * 
     */
    @Export(name="databaseVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> databaseVersion;

    /**
     * @return The Oracle Database version.
     * 
     */
    public Output<Optional<String>> databaseVersion() {
        return Codegen.optional(this.databaseVersion);
    }
    /**
     * The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    @Export(name="dbId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dbId;

    /**
     * @return The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    public Output<Optional<String>> dbId() {
        return Codegen.optional(this.dbId);
    }
    /**
     * The database packs licensed for the external Oracle Database.
     * 
     */
    @Export(name="dbPacks", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dbPacks;

    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    public Output<Optional<String>> dbPacks() {
        return Codegen.optional(this.dbPacks);
    }
    /**
     * The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    @Export(name="dbUniqueName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dbUniqueName;

    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public Output<Optional<String>> dbUniqueName() {
        return Codegen.optional(this.dbUniqueName);
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Output<Optional<Map<String,Object>>> definedTags() {
        return Codegen.optional(this.definedTags);
    }
    /**
     * (Updatable) The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Optional<Map<String,Object>>> freeformTags() {
        return Codegen.optional(this.freeformTags);
    }
    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Export(name="lifecycleDetails", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Output<Optional<String>> lifecycleDetails() {
        return Codegen.optional(this.lifecycleDetails);
    }
    /**
     * The national character of the external database.
     * 
     */
    @Export(name="ncharacterSet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ncharacterSet;

    /**
     * @return The national character of the external database.
     * 
     */
    public Output<Optional<String>> ncharacterSet() {
        return Codegen.optional(this.ncharacterSet);
    }
    /**
     * The configuration of Operations Insights for the external database
     * 
     */
    @Export(name="operationsInsightsConfigs", refs={List.class,ExternalNonContainerDatabaseOperationsInsightsConfig.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ExternalNonContainerDatabaseOperationsInsightsConfig>> operationsInsightsConfigs;

    /**
     * @return The configuration of Operations Insights for the external database
     * 
     */
    public Output<Optional<List<ExternalNonContainerDatabaseOperationsInsightsConfig>>> operationsInsightsConfigs() {
        return Codegen.optional(this.operationsInsightsConfigs);
    }
    /**
     * The configuration of Stack Monitoring for the external database.
     * 
     */
    @Export(name="stackMonitoringConfigs", refs={List.class,ExternalNonContainerDatabaseStackMonitoringConfig.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ExternalNonContainerDatabaseStackMonitoringConfig>> stackMonitoringConfigs;

    /**
     * @return The configuration of Stack Monitoring for the external database.
     * 
     */
    public Output<Optional<List<ExternalNonContainerDatabaseStackMonitoringConfig>>> stackMonitoringConfigs() {
        return Codegen.optional(this.stackMonitoringConfigs);
    }
    /**
     * The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * The date and time the database was created.
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeCreated;

    /**
     * @return The date and time the database was created.
     * 
     */
    public Output<Optional<String>> timeCreated() {
        return Codegen.optional(this.timeCreated);
    }
    /**
     * The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    @Export(name="timeZone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeZone;

    /**
     * @return The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    public Output<Optional<String>> timeZone() {
        return Codegen.optional(this.timeZone);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ExternalNonContainerDatabase(String name) {
        this(name, ExternalNonContainerDatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ExternalNonContainerDatabase(String name, ExternalNonContainerDatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ExternalNonContainerDatabase(String name, ExternalNonContainerDatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/externalNonContainerDatabase:ExternalNonContainerDatabase", name, args == null ? ExternalNonContainerDatabaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ExternalNonContainerDatabase(String name, Output<String> id, @Nullable ExternalNonContainerDatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Database/externalNonContainerDatabase:ExternalNonContainerDatabase", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ExternalNonContainerDatabase get(String name, Output<String> id, @Nullable ExternalNonContainerDatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ExternalNonContainerDatabase(name, id, state, options);
    }
}
