// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.inputs.PluggableDatabasePdbCreationTypeDetailsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabaseArgs Empty = new PluggableDatabaseArgs();

    /**
     * The DB system administrator password of the Container Database.
     * 
     */
    @Import(name="containerDatabaseAdminPassword")
    private @Nullable Output<String> containerDatabaseAdminPassword;

    /**
     * @return The DB system administrator password of the Container Database.
     * 
     */
    public Optional<Output<String>> containerDatabaseAdminPassword() {
        return Optional.ofNullable(this.containerDatabaseAdminPassword);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    @Import(name="containerDatabaseId", required=true)
    private Output<String> containerDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    public Output<String> containerDatabaseId() {
        return this.containerDatabaseId;
    }

    /**
     * (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
     * 
     */
    @Import(name="convertToRegularTrigger")
    private @Nullable Output<Integer> convertToRegularTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
     * 
     */
    public Optional<Output<Integer>> convertToRegularTrigger() {
        return Optional.ofNullable(this.convertToRegularTrigger);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    @Import(name="pdbAdminPassword")
    private @Nullable Output<String> pdbAdminPassword;

    /**
     * @return A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<Output<String>> pdbAdminPassword() {
        return Optional.ofNullable(this.pdbAdminPassword);
    }

    /**
     * The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone.
     * 
     * Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     * 
     */
    @Import(name="pdbCreationTypeDetails")
    private @Nullable Output<PluggableDatabasePdbCreationTypeDetailsArgs> pdbCreationTypeDetails;

    /**
     * @return The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone.
     * 
     * Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     * 
     */
    public Optional<Output<PluggableDatabasePdbCreationTypeDetailsArgs>> pdbCreationTypeDetails() {
        return Optional.ofNullable(this.pdbCreationTypeDetails);
    }

    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    @Import(name="pdbName", required=true)
    private Output<String> pdbName;

    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    public Output<String> pdbName() {
        return this.pdbName;
    }

    /**
     * (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
     * 
     */
    @Import(name="refreshTrigger")
    private @Nullable Output<Integer> refreshTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
     * 
     */
    public Optional<Output<Integer>> refreshTrigger() {
        return Optional.ofNullable(this.refreshTrigger);
    }

    /**
     * (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="rotateKeyTrigger")
    private @Nullable Output<Integer> rotateKeyTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> rotateKeyTrigger() {
        return Optional.ofNullable(this.rotateKeyTrigger);
    }

    /**
     * Indicates whether to take Pluggable Database Backup after the operation.
     * 
     */
    @Import(name="shouldCreatePdbBackup")
    private @Nullable Output<Boolean> shouldCreatePdbBackup;

    /**
     * @return Indicates whether to take Pluggable Database Backup after the operation.
     * 
     */
    public Optional<Output<Boolean>> shouldCreatePdbBackup() {
        return Optional.ofNullable(this.shouldCreatePdbBackup);
    }

    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    @Import(name="shouldPdbAdminAccountBeLocked")
    private @Nullable Output<Boolean> shouldPdbAdminAccountBeLocked;

    /**
     * @return The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    public Optional<Output<Boolean>> shouldPdbAdminAccountBeLocked() {
        return Optional.ofNullable(this.shouldPdbAdminAccountBeLocked);
    }

    /**
     * The existing TDE wallet password of the CDB.
     * 
     */
    @Import(name="tdeWalletPassword")
    private @Nullable Output<String> tdeWalletPassword;

    /**
     * @return The existing TDE wallet password of the CDB.
     * 
     */
    public Optional<Output<String>> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }

    private PluggableDatabaseArgs() {}

    private PluggableDatabaseArgs(PluggableDatabaseArgs $) {
        this.containerDatabaseAdminPassword = $.containerDatabaseAdminPassword;
        this.containerDatabaseId = $.containerDatabaseId;
        this.convertToRegularTrigger = $.convertToRegularTrigger;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.pdbAdminPassword = $.pdbAdminPassword;
        this.pdbCreationTypeDetails = $.pdbCreationTypeDetails;
        this.pdbName = $.pdbName;
        this.refreshTrigger = $.refreshTrigger;
        this.rotateKeyTrigger = $.rotateKeyTrigger;
        this.shouldCreatePdbBackup = $.shouldCreatePdbBackup;
        this.shouldPdbAdminAccountBeLocked = $.shouldPdbAdminAccountBeLocked;
        this.tdeWalletPassword = $.tdeWalletPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabaseArgs $;

        public Builder() {
            $ = new PluggableDatabaseArgs();
        }

        public Builder(PluggableDatabaseArgs defaults) {
            $ = new PluggableDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerDatabaseAdminPassword The DB system administrator password of the Container Database.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseAdminPassword(@Nullable Output<String> containerDatabaseAdminPassword) {
            $.containerDatabaseAdminPassword = containerDatabaseAdminPassword;
            return this;
        }

        /**
         * @param containerDatabaseAdminPassword The DB system administrator password of the Container Database.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseAdminPassword(String containerDatabaseAdminPassword) {
            return containerDatabaseAdminPassword(Output.of(containerDatabaseAdminPassword));
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(Output<String> containerDatabaseId) {
            $.containerDatabaseId = containerDatabaseId;
            return this;
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(String containerDatabaseId) {
            return containerDatabaseId(Output.of(containerDatabaseId));
        }

        /**
         * @param convertToRegularTrigger (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder convertToRegularTrigger(@Nullable Output<Integer> convertToRegularTrigger) {
            $.convertToRegularTrigger = convertToRegularTrigger;
            return this;
        }

        /**
         * @param convertToRegularTrigger (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder convertToRegularTrigger(Integer convertToRegularTrigger) {
            return convertToRegularTrigger(Output.of(convertToRegularTrigger));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(@Nullable Output<String> pdbAdminPassword) {
            $.pdbAdminPassword = pdbAdminPassword;
            return this;
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(String pdbAdminPassword) {
            return pdbAdminPassword(Output.of(pdbAdminPassword));
        }

        /**
         * @param pdbCreationTypeDetails The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone.
         * 
         * Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
         * 
         * @return builder
         * 
         */
        public Builder pdbCreationTypeDetails(@Nullable Output<PluggableDatabasePdbCreationTypeDetailsArgs> pdbCreationTypeDetails) {
            $.pdbCreationTypeDetails = pdbCreationTypeDetails;
            return this;
        }

        /**
         * @param pdbCreationTypeDetails The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone.
         * 
         * Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
         * 
         * @return builder
         * 
         */
        public Builder pdbCreationTypeDetails(PluggableDatabasePdbCreationTypeDetailsArgs pdbCreationTypeDetails) {
            return pdbCreationTypeDetails(Output.of(pdbCreationTypeDetails));
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        /**
         * @param refreshTrigger (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder refreshTrigger(@Nullable Output<Integer> refreshTrigger) {
            $.refreshTrigger = refreshTrigger;
            return this;
        }

        /**
         * @param refreshTrigger (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder refreshTrigger(Integer refreshTrigger) {
            return refreshTrigger(Output.of(refreshTrigger));
        }

        /**
         * @param rotateKeyTrigger (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder rotateKeyTrigger(@Nullable Output<Integer> rotateKeyTrigger) {
            $.rotateKeyTrigger = rotateKeyTrigger;
            return this;
        }

        /**
         * @param rotateKeyTrigger (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder rotateKeyTrigger(Integer rotateKeyTrigger) {
            return rotateKeyTrigger(Output.of(rotateKeyTrigger));
        }

        /**
         * @param shouldCreatePdbBackup Indicates whether to take Pluggable Database Backup after the operation.
         * 
         * @return builder
         * 
         */
        public Builder shouldCreatePdbBackup(@Nullable Output<Boolean> shouldCreatePdbBackup) {
            $.shouldCreatePdbBackup = shouldCreatePdbBackup;
            return this;
        }

        /**
         * @param shouldCreatePdbBackup Indicates whether to take Pluggable Database Backup after the operation.
         * 
         * @return builder
         * 
         */
        public Builder shouldCreatePdbBackup(Boolean shouldCreatePdbBackup) {
            return shouldCreatePdbBackup(Output.of(shouldCreatePdbBackup));
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(@Nullable Output<Boolean> shouldPdbAdminAccountBeLocked) {
            $.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            return this;
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(Boolean shouldPdbAdminAccountBeLocked) {
            return shouldPdbAdminAccountBeLocked(Output.of(shouldPdbAdminAccountBeLocked));
        }

        /**
         * @param tdeWalletPassword The existing TDE wallet password of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(@Nullable Output<String> tdeWalletPassword) {
            $.tdeWalletPassword = tdeWalletPassword;
            return this;
        }

        /**
         * @param tdeWalletPassword The existing TDE wallet password of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            return tdeWalletPassword(Output.of(tdeWalletPassword));
        }

        public PluggableDatabaseArgs build() {
            if ($.containerDatabaseId == null) {
                throw new MissingRequiredPropertyException("PluggableDatabaseArgs", "containerDatabaseId");
            }
            if ($.pdbName == null) {
                throw new MissingRequiredPropertyException("PluggableDatabaseArgs", "pdbName");
            }
            return $;
        }
    }

}
