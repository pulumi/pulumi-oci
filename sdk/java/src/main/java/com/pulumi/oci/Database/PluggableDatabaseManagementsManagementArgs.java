// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.inputs.PluggableDatabaseManagementsManagementCredentialDetailsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabaseManagementsManagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabaseManagementsManagementArgs Empty = new PluggableDatabaseManagementsManagementArgs();

    /**
     * Data for the credential used to connect to the database.
     * 
     */
    @Import(name="credentialDetails", required=true)
    private Output<PluggableDatabaseManagementsManagementCredentialDetailsArgs> credentialDetails;

    /**
     * @return Data for the credential used to connect to the database.
     * 
     */
    public Output<PluggableDatabaseManagementsManagementCredentialDetailsArgs> credentialDetails() {
        return this.credentialDetails;
    }

    /**
     * (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="enablePluggabledatabasemanagement", required=true)
    private Output<Boolean> enablePluggabledatabasemanagement;

    /**
     * @return (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Boolean> enablePluggabledatabasemanagement() {
        return this.enablePluggabledatabasemanagement;
    }

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="pluggableDatabaseId", required=true)
    private Output<String> pluggableDatabaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Output<String> pluggableDatabaseId() {
        return this.pluggableDatabaseId;
    }

    /**
     * The port used to connect to the pluggable database.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port used to connect to the pluggable database.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
     * 
     */
    @Import(name="privateEndPointId", required=true)
    private Output<String> privateEndPointId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
     * 
     */
    public Output<String> privateEndPointId() {
        return this.privateEndPointId;
    }

    /**
     * Protocol used by the database connection.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol used by the database connection.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The role of the user that will be connecting to the pluggable database.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the user that will be connecting to the pluggable database.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The name of the Oracle Database service that will be used to connect to the database.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the Oracle Database service that will be used to connect to the database.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    @Import(name="sslSecretId")
    private @Nullable Output<String> sslSecretId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Optional<Output<String>> sslSecretId() {
        return Optional.ofNullable(this.sslSecretId);
    }

    private PluggableDatabaseManagementsManagementArgs() {}

    private PluggableDatabaseManagementsManagementArgs(PluggableDatabaseManagementsManagementArgs $) {
        this.credentialDetails = $.credentialDetails;
        this.enablePluggabledatabasemanagement = $.enablePluggabledatabasemanagement;
        this.pluggableDatabaseId = $.pluggableDatabaseId;
        this.port = $.port;
        this.privateEndPointId = $.privateEndPointId;
        this.protocol = $.protocol;
        this.role = $.role;
        this.serviceName = $.serviceName;
        this.sslSecretId = $.sslSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabaseManagementsManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabaseManagementsManagementArgs $;

        public Builder() {
            $ = new PluggableDatabaseManagementsManagementArgs();
        }

        public Builder(PluggableDatabaseManagementsManagementArgs defaults) {
            $ = new PluggableDatabaseManagementsManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialDetails Data for the credential used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder credentialDetails(Output<PluggableDatabaseManagementsManagementCredentialDetailsArgs> credentialDetails) {
            $.credentialDetails = credentialDetails;
            return this;
        }

        /**
         * @param credentialDetails Data for the credential used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder credentialDetails(PluggableDatabaseManagementsManagementCredentialDetailsArgs credentialDetails) {
            return credentialDetails(Output.of(credentialDetails));
        }

        /**
         * @param enablePluggabledatabasemanagement (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder enablePluggabledatabasemanagement(Output<Boolean> enablePluggabledatabasemanagement) {
            $.enablePluggabledatabasemanagement = enablePluggabledatabasemanagement;
            return this;
        }

        /**
         * @param enablePluggabledatabasemanagement (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder enablePluggabledatabasemanagement(Boolean enablePluggabledatabasemanagement) {
            return enablePluggabledatabasemanagement(Output.of(enablePluggabledatabasemanagement));
        }

        /**
         * @param pluggableDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseId(Output<String> pluggableDatabaseId) {
            $.pluggableDatabaseId = pluggableDatabaseId;
            return this;
        }

        /**
         * @param pluggableDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseId(String pluggableDatabaseId) {
            return pluggableDatabaseId(Output.of(pluggableDatabaseId));
        }

        /**
         * @param port The port used to connect to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port used to connect to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateEndPointId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateEndPointId(Output<String> privateEndPointId) {
            $.privateEndPointId = privateEndPointId;
            return this;
        }

        /**
         * @param privateEndPointId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateEndPointId(String privateEndPointId) {
            return privateEndPointId(Output.of(privateEndPointId));
        }

        /**
         * @param protocol Protocol used by the database connection.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol used by the database connection.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param role The role of the user that will be connecting to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the user that will be connecting to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param serviceName The name of the Oracle Database service that will be used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the Oracle Database service that will be used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sslSecretId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(@Nullable Output<String> sslSecretId) {
            $.sslSecretId = sslSecretId;
            return this;
        }

        /**
         * @param sslSecretId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(String sslSecretId) {
            return sslSecretId(Output.of(sslSecretId));
        }

        public PluggableDatabaseManagementsManagementArgs build() {
            if ($.credentialDetails == null) {
                throw new MissingRequiredPropertyException("PluggableDatabaseManagementsManagementArgs", "credentialDetails");
            }
            if ($.enablePluggabledatabasemanagement == null) {
                throw new MissingRequiredPropertyException("PluggableDatabaseManagementsManagementArgs", "enablePluggabledatabasemanagement");
            }
            if ($.pluggableDatabaseId == null) {
                throw new MissingRequiredPropertyException("PluggableDatabaseManagementsManagementArgs", "pluggableDatabaseId");
            }
            if ($.privateEndPointId == null) {
                throw new MissingRequiredPropertyException("PluggableDatabaseManagementsManagementArgs", "privateEndPointId");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("PluggableDatabaseManagementsManagementArgs", "serviceName");
            }
            return $;
        }
    }

}
