// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousContainerDatabaseRecoveryApplianceDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousContainerDatabaseRecoveryApplianceDetailArgs Empty = new AutonomousContainerDatabaseRecoveryApplianceDetailArgs();

    /**
     * The storage size of the backup destination allocated for an Autonomous Container Database to store backups on the recovery appliance, in GBs, rounded to the nearest integer.
     * 
     */
    @Import(name="allocatedStorageSizeInGbs")
    private @Nullable Output<Integer> allocatedStorageSizeInGbs;

    /**
     * @return The storage size of the backup destination allocated for an Autonomous Container Database to store backups on the recovery appliance, in GBs, rounded to the nearest integer.
     * 
     */
    public Optional<Output<Integer>> allocatedStorageSizeInGbs() {
        return Optional.ofNullable(this.allocatedStorageSizeInGbs);
    }

    /**
     * Number of days between the current and earliest point of recoverability covered by automatic backups.
     * 
     */
    @Import(name="recoveryWindowInDays")
    private @Nullable Output<Integer> recoveryWindowInDays;

    /**
     * @return Number of days between the current and earliest point of recoverability covered by automatic backups.
     * 
     */
    public Optional<Output<Integer>> recoveryWindowInDays() {
        return Optional.ofNullable(this.recoveryWindowInDays);
    }

    /**
     * The time when the recovery appliance details are updated.
     * ===
     * 
     */
    @Import(name="timeRecoveryApplianceDetailsUpdated")
    private @Nullable Output<String> timeRecoveryApplianceDetailsUpdated;

    /**
     * @return The time when the recovery appliance details are updated.
     * ===
     * 
     */
    public Optional<Output<String>> timeRecoveryApplianceDetailsUpdated() {
        return Optional.ofNullable(this.timeRecoveryApplianceDetailsUpdated);
    }

    private AutonomousContainerDatabaseRecoveryApplianceDetailArgs() {}

    private AutonomousContainerDatabaseRecoveryApplianceDetailArgs(AutonomousContainerDatabaseRecoveryApplianceDetailArgs $) {
        this.allocatedStorageSizeInGbs = $.allocatedStorageSizeInGbs;
        this.recoveryWindowInDays = $.recoveryWindowInDays;
        this.timeRecoveryApplianceDetailsUpdated = $.timeRecoveryApplianceDetailsUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousContainerDatabaseRecoveryApplianceDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousContainerDatabaseRecoveryApplianceDetailArgs $;

        public Builder() {
            $ = new AutonomousContainerDatabaseRecoveryApplianceDetailArgs();
        }

        public Builder(AutonomousContainerDatabaseRecoveryApplianceDetailArgs defaults) {
            $ = new AutonomousContainerDatabaseRecoveryApplianceDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocatedStorageSizeInGbs The storage size of the backup destination allocated for an Autonomous Container Database to store backups on the recovery appliance, in GBs, rounded to the nearest integer.
         * 
         * @return builder
         * 
         */
        public Builder allocatedStorageSizeInGbs(@Nullable Output<Integer> allocatedStorageSizeInGbs) {
            $.allocatedStorageSizeInGbs = allocatedStorageSizeInGbs;
            return this;
        }

        /**
         * @param allocatedStorageSizeInGbs The storage size of the backup destination allocated for an Autonomous Container Database to store backups on the recovery appliance, in GBs, rounded to the nearest integer.
         * 
         * @return builder
         * 
         */
        public Builder allocatedStorageSizeInGbs(Integer allocatedStorageSizeInGbs) {
            return allocatedStorageSizeInGbs(Output.of(allocatedStorageSizeInGbs));
        }

        /**
         * @param recoveryWindowInDays Number of days between the current and earliest point of recoverability covered by automatic backups.
         * 
         * @return builder
         * 
         */
        public Builder recoveryWindowInDays(@Nullable Output<Integer> recoveryWindowInDays) {
            $.recoveryWindowInDays = recoveryWindowInDays;
            return this;
        }

        /**
         * @param recoveryWindowInDays Number of days between the current and earliest point of recoverability covered by automatic backups.
         * 
         * @return builder
         * 
         */
        public Builder recoveryWindowInDays(Integer recoveryWindowInDays) {
            return recoveryWindowInDays(Output.of(recoveryWindowInDays));
        }

        /**
         * @param timeRecoveryApplianceDetailsUpdated The time when the recovery appliance details are updated.
         * ===
         * 
         * @return builder
         * 
         */
        public Builder timeRecoveryApplianceDetailsUpdated(@Nullable Output<String> timeRecoveryApplianceDetailsUpdated) {
            $.timeRecoveryApplianceDetailsUpdated = timeRecoveryApplianceDetailsUpdated;
            return this;
        }

        /**
         * @param timeRecoveryApplianceDetailsUpdated The time when the recovery appliance details are updated.
         * ===
         * 
         * @return builder
         * 
         */
        public Builder timeRecoveryApplianceDetailsUpdated(String timeRecoveryApplianceDetailsUpdated) {
            return timeRecoveryApplianceDetailsUpdated(Output.of(timeRecoveryApplianceDetailsUpdated));
        }

        public AutonomousContainerDatabaseRecoveryApplianceDetailArgs build() {
            return $;
        }
    }

}
