// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabaseDbToolsDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabaseDbToolsDetailArgs Empty = new AutonomousDatabaseDbToolsDetailArgs();

    /**
     * (Updatable) Compute used by database tools.
     * 
     */
    @Import(name="computeCount")
    private @Nullable Output<Double> computeCount;

    /**
     * @return (Updatable) Compute used by database tools.
     * 
     */
    public Optional<Output<Double>> computeCount() {
        return Optional.ofNullable(this.computeCount);
    }

    /**
     * (Updatable) Indicates whether tool is enabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Indicates whether tool is enabled.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * (Updatable) The max idle time, in minutes, after which the VM used by database tools will be terminated.
     * 
     */
    @Import(name="maxIdleTimeInMinutes")
    private @Nullable Output<Integer> maxIdleTimeInMinutes;

    /**
     * @return (Updatable) The max idle time, in minutes, after which the VM used by database tools will be terminated.
     * 
     */
    public Optional<Output<Integer>> maxIdleTimeInMinutes() {
        return Optional.ofNullable(this.maxIdleTimeInMinutes);
    }

    /**
     * (Updatable) Name of database tool.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) Name of database tool.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private AutonomousDatabaseDbToolsDetailArgs() {}

    private AutonomousDatabaseDbToolsDetailArgs(AutonomousDatabaseDbToolsDetailArgs $) {
        this.computeCount = $.computeCount;
        this.isEnabled = $.isEnabled;
        this.maxIdleTimeInMinutes = $.maxIdleTimeInMinutes;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabaseDbToolsDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabaseDbToolsDetailArgs $;

        public Builder() {
            $ = new AutonomousDatabaseDbToolsDetailArgs();
        }

        public Builder(AutonomousDatabaseDbToolsDetailArgs defaults) {
            $ = new AutonomousDatabaseDbToolsDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeCount (Updatable) Compute used by database tools.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(@Nullable Output<Double> computeCount) {
            $.computeCount = computeCount;
            return this;
        }

        /**
         * @param computeCount (Updatable) Compute used by database tools.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Double computeCount) {
            return computeCount(Output.of(computeCount));
        }

        /**
         * @param isEnabled (Updatable) Indicates whether tool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Indicates whether tool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param maxIdleTimeInMinutes (Updatable) The max idle time, in minutes, after which the VM used by database tools will be terminated.
         * 
         * @return builder
         * 
         */
        public Builder maxIdleTimeInMinutes(@Nullable Output<Integer> maxIdleTimeInMinutes) {
            $.maxIdleTimeInMinutes = maxIdleTimeInMinutes;
            return this;
        }

        /**
         * @param maxIdleTimeInMinutes (Updatable) The max idle time, in minutes, after which the VM used by database tools will be terminated.
         * 
         * @return builder
         * 
         */
        public Builder maxIdleTimeInMinutes(Integer maxIdleTimeInMinutes) {
            return maxIdleTimeInMinutes(Output.of(maxIdleTimeInMinutes));
        }

        /**
         * @param name (Updatable) Name of database tool.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name of database tool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public AutonomousDatabaseDbToolsDetailArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("AutonomousDatabaseDbToolsDetailArgs", "name");
            }
            return $;
        }
    }

}
