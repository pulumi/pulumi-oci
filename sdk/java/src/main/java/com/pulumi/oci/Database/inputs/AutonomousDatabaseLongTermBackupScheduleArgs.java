// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabaseLongTermBackupScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabaseLongTermBackupScheduleArgs Empty = new AutonomousDatabaseLongTermBackupScheduleArgs();

    /**
     * (Updatable) Indicates if the resource pool should be deleted for the Autonomous Database.
     * 
     */
    @Import(name="isDisabled")
    private @Nullable Output<Boolean> isDisabled;

    /**
     * @return (Updatable) Indicates if the resource pool should be deleted for the Autonomous Database.
     * 
     */
    public Optional<Output<Boolean>> isDisabled() {
        return Optional.ofNullable(this.isDisabled);
    }

    /**
     * The frequency of the long-term backup schedule
     * 
     */
    @Import(name="repeatCadence")
    private @Nullable Output<String> repeatCadence;

    /**
     * @return The frequency of the long-term backup schedule
     * 
     */
    public Optional<Output<String>> repeatCadence() {
        return Optional.ofNullable(this.repeatCadence);
    }

    /**
     * Retention period, in days, for long-term backups
     * 
     */
    @Import(name="retentionPeriodInDays")
    private @Nullable Output<Integer> retentionPeriodInDays;

    /**
     * @return Retention period, in days, for long-term backups
     * 
     */
    public Optional<Output<Integer>> retentionPeriodInDays() {
        return Optional.ofNullable(this.retentionPeriodInDays);
    }

    /**
     * The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.
     * 
     */
    @Import(name="timeOfBackup")
    private @Nullable Output<String> timeOfBackup;

    /**
     * @return The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.
     * 
     */
    public Optional<Output<String>> timeOfBackup() {
        return Optional.ofNullable(this.timeOfBackup);
    }

    private AutonomousDatabaseLongTermBackupScheduleArgs() {}

    private AutonomousDatabaseLongTermBackupScheduleArgs(AutonomousDatabaseLongTermBackupScheduleArgs $) {
        this.isDisabled = $.isDisabled;
        this.repeatCadence = $.repeatCadence;
        this.retentionPeriodInDays = $.retentionPeriodInDays;
        this.timeOfBackup = $.timeOfBackup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabaseLongTermBackupScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabaseLongTermBackupScheduleArgs $;

        public Builder() {
            $ = new AutonomousDatabaseLongTermBackupScheduleArgs();
        }

        public Builder(AutonomousDatabaseLongTermBackupScheduleArgs defaults) {
            $ = new AutonomousDatabaseLongTermBackupScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isDisabled (Updatable) Indicates if the resource pool should be deleted for the Autonomous Database.
         * 
         * @return builder
         * 
         */
        public Builder isDisabled(@Nullable Output<Boolean> isDisabled) {
            $.isDisabled = isDisabled;
            return this;
        }

        /**
         * @param isDisabled (Updatable) Indicates if the resource pool should be deleted for the Autonomous Database.
         * 
         * @return builder
         * 
         */
        public Builder isDisabled(Boolean isDisabled) {
            return isDisabled(Output.of(isDisabled));
        }

        /**
         * @param repeatCadence The frequency of the long-term backup schedule
         * 
         * @return builder
         * 
         */
        public Builder repeatCadence(@Nullable Output<String> repeatCadence) {
            $.repeatCadence = repeatCadence;
            return this;
        }

        /**
         * @param repeatCadence The frequency of the long-term backup schedule
         * 
         * @return builder
         * 
         */
        public Builder repeatCadence(String repeatCadence) {
            return repeatCadence(Output.of(repeatCadence));
        }

        /**
         * @param retentionPeriodInDays Retention period, in days, for long-term backups
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(@Nullable Output<Integer> retentionPeriodInDays) {
            $.retentionPeriodInDays = retentionPeriodInDays;
            return this;
        }

        /**
         * @param retentionPeriodInDays Retention period, in days, for long-term backups
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(Integer retentionPeriodInDays) {
            return retentionPeriodInDays(Output.of(retentionPeriodInDays));
        }

        /**
         * @param timeOfBackup The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.
         * 
         * @return builder
         * 
         */
        public Builder timeOfBackup(@Nullable Output<String> timeOfBackup) {
            $.timeOfBackup = timeOfBackup;
            return this;
        }

        /**
         * @param timeOfBackup The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.
         * 
         * @return builder
         * 
         */
        public Builder timeOfBackup(String timeOfBackup) {
            return timeOfBackup(Output.of(timeOfBackup));
        }

        public AutonomousDatabaseLongTermBackupScheduleArgs build() {
            return $;
        }
    }

}
