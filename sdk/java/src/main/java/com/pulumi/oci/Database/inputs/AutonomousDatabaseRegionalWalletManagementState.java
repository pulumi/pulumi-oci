// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutonomousDatabaseRegionalWalletManagementState extends com.pulumi.resources.ResourceArgs {

    public static final AutonomousDatabaseRegionalWalletManagementState Empty = new AutonomousDatabaseRegionalWalletManagementState();

    /**
     * (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
     * 
     */
    @Import(name="gracePeriod")
    private @Nullable Output<Integer> gracePeriod;

    /**
     * @return (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
     * 
     */
    public Optional<Output<Integer>> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }

    /**
     * (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="shouldRotate")
    private @Nullable Output<Boolean> shouldRotate;

    /**
     * @return (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Boolean>> shouldRotate() {
        return Optional.ofNullable(this.shouldRotate);
    }

    /**
     * The current lifecycle state of the Autonomous Database wallet.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the Autonomous Database wallet.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the wallet was last rotated.
     * 
     */
    @Import(name="timeRotated")
    private @Nullable Output<String> timeRotated;

    /**
     * @return The date and time the wallet was last rotated.
     * 
     */
    public Optional<Output<String>> timeRotated() {
        return Optional.ofNullable(this.timeRotated);
    }

    private AutonomousDatabaseRegionalWalletManagementState() {}

    private AutonomousDatabaseRegionalWalletManagementState(AutonomousDatabaseRegionalWalletManagementState $) {
        this.gracePeriod = $.gracePeriod;
        this.shouldRotate = $.shouldRotate;
        this.state = $.state;
        this.timeRotated = $.timeRotated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutonomousDatabaseRegionalWalletManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutonomousDatabaseRegionalWalletManagementState $;

        public Builder() {
            $ = new AutonomousDatabaseRegionalWalletManagementState();
        }

        public Builder(AutonomousDatabaseRegionalWalletManagementState defaults) {
            $ = new AutonomousDatabaseRegionalWalletManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param gracePeriod (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(@Nullable Output<Integer> gracePeriod) {
            $.gracePeriod = gracePeriod;
            return this;
        }

        /**
         * @param gracePeriod (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(Integer gracePeriod) {
            return gracePeriod(Output.of(gracePeriod));
        }

        /**
         * @param shouldRotate (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder shouldRotate(@Nullable Output<Boolean> shouldRotate) {
            $.shouldRotate = shouldRotate;
            return this;
        }

        /**
         * @param shouldRotate (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder shouldRotate(Boolean shouldRotate) {
            return shouldRotate(Output.of(shouldRotate));
        }

        /**
         * @param state The current lifecycle state of the Autonomous Database wallet.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the Autonomous Database wallet.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeRotated The date and time the wallet was last rotated.
         * 
         * @return builder
         * 
         */
        public Builder timeRotated(@Nullable Output<String> timeRotated) {
            $.timeRotated = timeRotated;
            return this;
        }

        /**
         * @param timeRotated The date and time the wallet was last rotated.
         * 
         * @return builder
         * 
         */
        public Builder timeRotated(String timeRotated) {
            return timeRotated(Output.of(timeRotated));
        }

        public AutonomousDatabaseRegionalWalletManagementState build() {
            return $;
        }
    }

}
