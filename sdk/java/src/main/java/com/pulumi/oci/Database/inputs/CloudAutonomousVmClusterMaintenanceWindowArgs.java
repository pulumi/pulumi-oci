// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekArgs;
import com.pulumi.oci.Database.inputs.CloudAutonomousVmClusterMaintenanceWindowMonthArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudAutonomousVmClusterMaintenanceWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudAutonomousVmClusterMaintenanceWindowArgs Empty = new CloudAutonomousVmClusterMaintenanceWindowArgs();

    /**
     * Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).
     * 
     */
    @Import(name="customActionTimeoutInMins")
    private @Nullable Output<Integer> customActionTimeoutInMins;

    /**
     * @return Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).
     * 
     */
    public Optional<Output<Integer>> customActionTimeoutInMins() {
        return Optional.ofNullable(this.customActionTimeoutInMins);
    }

    /**
     * Days during the week when maintenance should be performed.
     * 
     */
    @Import(name="daysOfWeeks")
    private @Nullable Output<List<CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekArgs>> daysOfWeeks;

    /**
     * @return Days during the week when maintenance should be performed.
     * 
     */
    public Optional<Output<List<CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekArgs>>> daysOfWeeks() {
        return Optional.ofNullable(this.daysOfWeeks);
    }

    /**
     * The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
     * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    @Import(name="hoursOfDays")
    private @Nullable Output<List<Integer>> hoursOfDays;

    /**
     * @return The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
     * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    public Optional<Output<List<Integer>>> hoursOfDays() {
        return Optional.ofNullable(this.hoursOfDays);
    }

    /**
     * If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
     * 
     */
    @Import(name="isCustomActionTimeoutEnabled")
    private @Nullable Output<Boolean> isCustomActionTimeoutEnabled;

    /**
     * @return If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
     * 
     */
    public Optional<Output<Boolean>> isCustomActionTimeoutEnabled() {
        return Optional.ofNullable(this.isCustomActionTimeoutEnabled);
    }

    /**
     * If true, enables the monthly patching option.
     * 
     */
    @Import(name="isMonthlyPatchingEnabled")
    private @Nullable Output<Boolean> isMonthlyPatchingEnabled;

    /**
     * @return If true, enables the monthly patching option.
     * 
     */
    public Optional<Output<Boolean>> isMonthlyPatchingEnabled() {
        return Optional.ofNullable(this.isMonthlyPatchingEnabled);
    }

    /**
     * Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    @Import(name="leadTimeInWeeks")
    private @Nullable Output<Integer> leadTimeInWeeks;

    /**
     * @return Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    public Optional<Output<Integer>> leadTimeInWeeks() {
        return Optional.ofNullable(this.leadTimeInWeeks);
    }

    /**
     * Months during the year when maintenance should be performed.
     * 
     */
    @Import(name="months")
    private @Nullable Output<List<CloudAutonomousVmClusterMaintenanceWindowMonthArgs>> months;

    /**
     * @return Months during the year when maintenance should be performed.
     * 
     */
    public Optional<Output<List<CloudAutonomousVmClusterMaintenanceWindowMonthArgs>>> months() {
        return Optional.ofNullable(this.months);
    }

    /**
     * Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    @Import(name="patchingMode")
    private @Nullable Output<String> patchingMode;

    /**
     * @return Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    public Optional<Output<String>> patchingMode() {
        return Optional.ofNullable(this.patchingMode);
    }

    /**
     * The maintenance window scheduling preference.
     * 
     */
    @Import(name="preference")
    private @Nullable Output<String> preference;

    /**
     * @return The maintenance window scheduling preference.
     * 
     */
    public Optional<Output<String>> preference() {
        return Optional.ofNullable(this.preference);
    }

    /**
     * If true, skips the release update (RU) for the quarter. You cannot skip two consecutive quarters. An RU skip request will only be honoured if the current version of the Autonomous Container Database is supported for current quarter.
     * 
     */
    @Import(name="skipRus")
    private @Nullable Output<List<Boolean>> skipRus;

    /**
     * @return If true, skips the release update (RU) for the quarter. You cannot skip two consecutive quarters. An RU skip request will only be honoured if the current version of the Autonomous Container Database is supported for current quarter.
     * 
     */
    public Optional<Output<List<Boolean>>> skipRus() {
        return Optional.ofNullable(this.skipRus);
    }

    /**
     * Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
     * 
     */
    @Import(name="weeksOfMonths")
    private @Nullable Output<List<Integer>> weeksOfMonths;

    /**
     * @return Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
     * 
     */
    public Optional<Output<List<Integer>>> weeksOfMonths() {
        return Optional.ofNullable(this.weeksOfMonths);
    }

    private CloudAutonomousVmClusterMaintenanceWindowArgs() {}

    private CloudAutonomousVmClusterMaintenanceWindowArgs(CloudAutonomousVmClusterMaintenanceWindowArgs $) {
        this.customActionTimeoutInMins = $.customActionTimeoutInMins;
        this.daysOfWeeks = $.daysOfWeeks;
        this.hoursOfDays = $.hoursOfDays;
        this.isCustomActionTimeoutEnabled = $.isCustomActionTimeoutEnabled;
        this.isMonthlyPatchingEnabled = $.isMonthlyPatchingEnabled;
        this.leadTimeInWeeks = $.leadTimeInWeeks;
        this.months = $.months;
        this.patchingMode = $.patchingMode;
        this.preference = $.preference;
        this.skipRus = $.skipRus;
        this.weeksOfMonths = $.weeksOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudAutonomousVmClusterMaintenanceWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudAutonomousVmClusterMaintenanceWindowArgs $;

        public Builder() {
            $ = new CloudAutonomousVmClusterMaintenanceWindowArgs();
        }

        public Builder(CloudAutonomousVmClusterMaintenanceWindowArgs defaults) {
            $ = new CloudAutonomousVmClusterMaintenanceWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customActionTimeoutInMins Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutInMins(@Nullable Output<Integer> customActionTimeoutInMins) {
            $.customActionTimeoutInMins = customActionTimeoutInMins;
            return this;
        }

        /**
         * @param customActionTimeoutInMins Determines the amount of time the system will wait before the start of each database server patching operation. Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutInMins(Integer customActionTimeoutInMins) {
            return customActionTimeoutInMins(Output.of(customActionTimeoutInMins));
        }

        /**
         * @param daysOfWeeks Days during the week when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(@Nullable Output<List<CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekArgs>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks Days during the week when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekArgs> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks Days during the week when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekArgs... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param hoursOfDays The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
         * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
         * 
         * @return builder
         * 
         */
        public Builder hoursOfDays(@Nullable Output<List<Integer>> hoursOfDays) {
            $.hoursOfDays = hoursOfDays;
            return this;
        }

        /**
         * @param hoursOfDays The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
         * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
         * 
         * @return builder
         * 
         */
        public Builder hoursOfDays(List<Integer> hoursOfDays) {
            return hoursOfDays(Output.of(hoursOfDays));
        }

        /**
         * @param hoursOfDays The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
         * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
         * 
         * @return builder
         * 
         */
        public Builder hoursOfDays(Integer... hoursOfDays) {
            return hoursOfDays(List.of(hoursOfDays));
        }

        /**
         * @param isCustomActionTimeoutEnabled If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(@Nullable Output<Boolean> isCustomActionTimeoutEnabled) {
            $.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            return this;
        }

        /**
         * @param isCustomActionTimeoutEnabled If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(Boolean isCustomActionTimeoutEnabled) {
            return isCustomActionTimeoutEnabled(Output.of(isCustomActionTimeoutEnabled));
        }

        /**
         * @param isMonthlyPatchingEnabled If true, enables the monthly patching option.
         * 
         * @return builder
         * 
         */
        public Builder isMonthlyPatchingEnabled(@Nullable Output<Boolean> isMonthlyPatchingEnabled) {
            $.isMonthlyPatchingEnabled = isMonthlyPatchingEnabled;
            return this;
        }

        /**
         * @param isMonthlyPatchingEnabled If true, enables the monthly patching option.
         * 
         * @return builder
         * 
         */
        public Builder isMonthlyPatchingEnabled(Boolean isMonthlyPatchingEnabled) {
            return isMonthlyPatchingEnabled(Output.of(isMonthlyPatchingEnabled));
        }

        /**
         * @param leadTimeInWeeks Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
         * 
         * @return builder
         * 
         */
        public Builder leadTimeInWeeks(@Nullable Output<Integer> leadTimeInWeeks) {
            $.leadTimeInWeeks = leadTimeInWeeks;
            return this;
        }

        /**
         * @param leadTimeInWeeks Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
         * 
         * @return builder
         * 
         */
        public Builder leadTimeInWeeks(Integer leadTimeInWeeks) {
            return leadTimeInWeeks(Output.of(leadTimeInWeeks));
        }

        /**
         * @param months Months during the year when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder months(@Nullable Output<List<CloudAutonomousVmClusterMaintenanceWindowMonthArgs>> months) {
            $.months = months;
            return this;
        }

        /**
         * @param months Months during the year when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder months(List<CloudAutonomousVmClusterMaintenanceWindowMonthArgs> months) {
            return months(Output.of(months));
        }

        /**
         * @param months Months during the year when maintenance should be performed.
         * 
         * @return builder
         * 
         */
        public Builder months(CloudAutonomousVmClusterMaintenanceWindowMonthArgs... months) {
            return months(List.of(months));
        }

        /**
         * @param patchingMode Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(@Nullable Output<String> patchingMode) {
            $.patchingMode = patchingMode;
            return this;
        }

        /**
         * @param patchingMode Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(String patchingMode) {
            return patchingMode(Output.of(patchingMode));
        }

        /**
         * @param preference The maintenance window scheduling preference.
         * 
         * @return builder
         * 
         */
        public Builder preference(@Nullable Output<String> preference) {
            $.preference = preference;
            return this;
        }

        /**
         * @param preference The maintenance window scheduling preference.
         * 
         * @return builder
         * 
         */
        public Builder preference(String preference) {
            return preference(Output.of(preference));
        }

        /**
         * @param skipRus If true, skips the release update (RU) for the quarter. You cannot skip two consecutive quarters. An RU skip request will only be honoured if the current version of the Autonomous Container Database is supported for current quarter.
         * 
         * @return builder
         * 
         */
        public Builder skipRus(@Nullable Output<List<Boolean>> skipRus) {
            $.skipRus = skipRus;
            return this;
        }

        /**
         * @param skipRus If true, skips the release update (RU) for the quarter. You cannot skip two consecutive quarters. An RU skip request will only be honoured if the current version of the Autonomous Container Database is supported for current quarter.
         * 
         * @return builder
         * 
         */
        public Builder skipRus(List<Boolean> skipRus) {
            return skipRus(Output.of(skipRus));
        }

        /**
         * @param skipRus If true, skips the release update (RU) for the quarter. You cannot skip two consecutive quarters. An RU skip request will only be honoured if the current version of the Autonomous Container Database is supported for current quarter.
         * 
         * @return builder
         * 
         */
        public Builder skipRus(Boolean... skipRus) {
            return skipRus(List.of(skipRus));
        }

        /**
         * @param weeksOfMonths Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(@Nullable Output<List<Integer>> weeksOfMonths) {
            $.weeksOfMonths = weeksOfMonths;
            return this;
        }

        /**
         * @param weeksOfMonths Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(List<Integer> weeksOfMonths) {
            return weeksOfMonths(Output.of(weeksOfMonths));
        }

        /**
         * @param weeksOfMonths Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(Integer... weeksOfMonths) {
            return weeksOfMonths(List.of(weeksOfMonths));
        }

        public CloudAutonomousVmClusterMaintenanceWindowArgs build() {
            return $;
        }
    }

}
