// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.DatabaseDatabaseDbBackupConfigBackupDestinationDetailArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseDatabaseDbBackupConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseDatabaseDbBackupConfigArgs Empty = new DatabaseDatabaseDbBackupConfigArgs();

    /**
     * (Updatable) If set to true, configures automatic backups. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
     * 
     */
    @Import(name="autoBackupEnabled")
    private @Nullable Output<Boolean> autoBackupEnabled;

    /**
     * @return (Updatable) If set to true, configures automatic backups. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
     * 
     */
    public Optional<Output<Boolean>> autoBackupEnabled() {
        return Optional.ofNullable(this.autoBackupEnabled);
    }

    /**
     * (Updatable) Time window selected for initiating automatic backup for the database system. There are twelve available two-hour time windows. If no option is selected, a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    @Import(name="autoBackupWindow")
    private @Nullable Output<String> autoBackupWindow;

    /**
     * @return (Updatable) Time window selected for initiating automatic backup for the database system. There are twelve available two-hour time windows. If no option is selected, a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    public Optional<Output<String>> autoBackupWindow() {
        return Optional.ofNullable(this.autoBackupWindow);
    }

    /**
     * Day of the week the full backup should be applied on the database system. If no option is selected, the value is null and we will default to Sunday.
     * 
     */
    @Import(name="autoFullBackupDay")
    private @Nullable Output<String> autoFullBackupDay;

    /**
     * @return Day of the week the full backup should be applied on the database system. If no option is selected, the value is null and we will default to Sunday.
     * 
     */
    public Optional<Output<String>> autoFullBackupDay() {
        return Optional.ofNullable(this.autoFullBackupDay);
    }

    /**
     * Time window selected for initiating full backup for the database system. There are twelve available two-hour time windows. If no option is selected, the value is null and a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    @Import(name="autoFullBackupWindow")
    private @Nullable Output<String> autoFullBackupWindow;

    /**
     * @return Time window selected for initiating full backup for the database system. There are twelve available two-hour time windows. If no option is selected, the value is null and a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    public Optional<Output<String>> autoFullBackupWindow() {
        return Optional.ofNullable(this.autoFullBackupWindow);
    }

    /**
     * This defines when the backups will be deleted. - IMMEDIATE option keep the backup for predefined time i.e 72 hours and then delete permanently... - RETAIN will keep the backups as per the policy defined for database backups.
     * 
     */
    @Import(name="backupDeletionPolicy")
    private @Nullable Output<String> backupDeletionPolicy;

    /**
     * @return This defines when the backups will be deleted. - IMMEDIATE option keep the backup for predefined time i.e 72 hours and then delete permanently... - RETAIN will keep the backups as per the policy defined for database backups.
     * 
     */
    public Optional<Output<String>> backupDeletionPolicy() {
        return Optional.ofNullable(this.backupDeletionPolicy);
    }

    /**
     * Backup destination details.
     * 
     */
    @Import(name="backupDestinationDetails")
    private @Nullable Output<List<DatabaseDatabaseDbBackupConfigBackupDestinationDetailArgs>> backupDestinationDetails;

    /**
     * @return Backup destination details.
     * 
     */
    public Optional<Output<List<DatabaseDatabaseDbBackupConfigBackupDestinationDetailArgs>>> backupDestinationDetails() {
        return Optional.ofNullable(this.backupDestinationDetails);
    }

    /**
     * (Updatable) Number of days between the current and the earliest point of recoverability covered by automatic backups. This value applies to automatic backups only. After a new automatic backup has been created, Oracle removes old automatic backups that are created before the window. When the value is updated, it is applied to all existing automatic backups.
     * 
     */
    @Import(name="recoveryWindowInDays")
    private @Nullable Output<Integer> recoveryWindowInDays;

    /**
     * @return (Updatable) Number of days between the current and the earliest point of recoverability covered by automatic backups. This value applies to automatic backups only. After a new automatic backup has been created, Oracle removes old automatic backups that are created before the window. When the value is updated, it is applied to all existing automatic backups.
     * 
     */
    public Optional<Output<Integer>> recoveryWindowInDays() {
        return Optional.ofNullable(this.recoveryWindowInDays);
    }

    /**
     * If set to true, configures automatic full backups in the local region (the region of the DB system) for the first backup run immediately.
     * 
     */
    @Import(name="runImmediateFullBackup")
    private @Nullable Output<Boolean> runImmediateFullBackup;

    /**
     * @return If set to true, configures automatic full backups in the local region (the region of the DB system) for the first backup run immediately.
     * 
     */
    public Optional<Output<Boolean>> runImmediateFullBackup() {
        return Optional.ofNullable(this.runImmediateFullBackup);
    }

    private DatabaseDatabaseDbBackupConfigArgs() {}

    private DatabaseDatabaseDbBackupConfigArgs(DatabaseDatabaseDbBackupConfigArgs $) {
        this.autoBackupEnabled = $.autoBackupEnabled;
        this.autoBackupWindow = $.autoBackupWindow;
        this.autoFullBackupDay = $.autoFullBackupDay;
        this.autoFullBackupWindow = $.autoFullBackupWindow;
        this.backupDeletionPolicy = $.backupDeletionPolicy;
        this.backupDestinationDetails = $.backupDestinationDetails;
        this.recoveryWindowInDays = $.recoveryWindowInDays;
        this.runImmediateFullBackup = $.runImmediateFullBackup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseDatabaseDbBackupConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseDatabaseDbBackupConfigArgs $;

        public Builder() {
            $ = new DatabaseDatabaseDbBackupConfigArgs();
        }

        public Builder(DatabaseDatabaseDbBackupConfigArgs defaults) {
            $ = new DatabaseDatabaseDbBackupConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoBackupEnabled (Updatable) If set to true, configures automatic backups. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
         * 
         * @return builder
         * 
         */
        public Builder autoBackupEnabled(@Nullable Output<Boolean> autoBackupEnabled) {
            $.autoBackupEnabled = autoBackupEnabled;
            return this;
        }

        /**
         * @param autoBackupEnabled (Updatable) If set to true, configures automatic backups. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
         * 
         * @return builder
         * 
         */
        public Builder autoBackupEnabled(Boolean autoBackupEnabled) {
            return autoBackupEnabled(Output.of(autoBackupEnabled));
        }

        /**
         * @param autoBackupWindow (Updatable) Time window selected for initiating automatic backup for the database system. There are twelve available two-hour time windows. If no option is selected, a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
         * 
         * @return builder
         * 
         */
        public Builder autoBackupWindow(@Nullable Output<String> autoBackupWindow) {
            $.autoBackupWindow = autoBackupWindow;
            return this;
        }

        /**
         * @param autoBackupWindow (Updatable) Time window selected for initiating automatic backup for the database system. There are twelve available two-hour time windows. If no option is selected, a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
         * 
         * @return builder
         * 
         */
        public Builder autoBackupWindow(String autoBackupWindow) {
            return autoBackupWindow(Output.of(autoBackupWindow));
        }

        /**
         * @param autoFullBackupDay Day of the week the full backup should be applied on the database system. If no option is selected, the value is null and we will default to Sunday.
         * 
         * @return builder
         * 
         */
        public Builder autoFullBackupDay(@Nullable Output<String> autoFullBackupDay) {
            $.autoFullBackupDay = autoFullBackupDay;
            return this;
        }

        /**
         * @param autoFullBackupDay Day of the week the full backup should be applied on the database system. If no option is selected, the value is null and we will default to Sunday.
         * 
         * @return builder
         * 
         */
        public Builder autoFullBackupDay(String autoFullBackupDay) {
            return autoFullBackupDay(Output.of(autoFullBackupDay));
        }

        /**
         * @param autoFullBackupWindow Time window selected for initiating full backup for the database system. There are twelve available two-hour time windows. If no option is selected, the value is null and a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
         * 
         * @return builder
         * 
         */
        public Builder autoFullBackupWindow(@Nullable Output<String> autoFullBackupWindow) {
            $.autoFullBackupWindow = autoFullBackupWindow;
            return this;
        }

        /**
         * @param autoFullBackupWindow Time window selected for initiating full backup for the database system. There are twelve available two-hour time windows. If no option is selected, the value is null and a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
         * 
         * @return builder
         * 
         */
        public Builder autoFullBackupWindow(String autoFullBackupWindow) {
            return autoFullBackupWindow(Output.of(autoFullBackupWindow));
        }

        /**
         * @param backupDeletionPolicy This defines when the backups will be deleted. - IMMEDIATE option keep the backup for predefined time i.e 72 hours and then delete permanently... - RETAIN will keep the backups as per the policy defined for database backups.
         * 
         * @return builder
         * 
         */
        public Builder backupDeletionPolicy(@Nullable Output<String> backupDeletionPolicy) {
            $.backupDeletionPolicy = backupDeletionPolicy;
            return this;
        }

        /**
         * @param backupDeletionPolicy This defines when the backups will be deleted. - IMMEDIATE option keep the backup for predefined time i.e 72 hours and then delete permanently... - RETAIN will keep the backups as per the policy defined for database backups.
         * 
         * @return builder
         * 
         */
        public Builder backupDeletionPolicy(String backupDeletionPolicy) {
            return backupDeletionPolicy(Output.of(backupDeletionPolicy));
        }

        /**
         * @param backupDestinationDetails Backup destination details.
         * 
         * @return builder
         * 
         */
        public Builder backupDestinationDetails(@Nullable Output<List<DatabaseDatabaseDbBackupConfigBackupDestinationDetailArgs>> backupDestinationDetails) {
            $.backupDestinationDetails = backupDestinationDetails;
            return this;
        }

        /**
         * @param backupDestinationDetails Backup destination details.
         * 
         * @return builder
         * 
         */
        public Builder backupDestinationDetails(List<DatabaseDatabaseDbBackupConfigBackupDestinationDetailArgs> backupDestinationDetails) {
            return backupDestinationDetails(Output.of(backupDestinationDetails));
        }

        /**
         * @param backupDestinationDetails Backup destination details.
         * 
         * @return builder
         * 
         */
        public Builder backupDestinationDetails(DatabaseDatabaseDbBackupConfigBackupDestinationDetailArgs... backupDestinationDetails) {
            return backupDestinationDetails(List.of(backupDestinationDetails));
        }

        /**
         * @param recoveryWindowInDays (Updatable) Number of days between the current and the earliest point of recoverability covered by automatic backups. This value applies to automatic backups only. After a new automatic backup has been created, Oracle removes old automatic backups that are created before the window. When the value is updated, it is applied to all existing automatic backups.
         * 
         * @return builder
         * 
         */
        public Builder recoveryWindowInDays(@Nullable Output<Integer> recoveryWindowInDays) {
            $.recoveryWindowInDays = recoveryWindowInDays;
            return this;
        }

        /**
         * @param recoveryWindowInDays (Updatable) Number of days between the current and the earliest point of recoverability covered by automatic backups. This value applies to automatic backups only. After a new automatic backup has been created, Oracle removes old automatic backups that are created before the window. When the value is updated, it is applied to all existing automatic backups.
         * 
         * @return builder
         * 
         */
        public Builder recoveryWindowInDays(Integer recoveryWindowInDays) {
            return recoveryWindowInDays(Output.of(recoveryWindowInDays));
        }

        /**
         * @param runImmediateFullBackup If set to true, configures automatic full backups in the local region (the region of the DB system) for the first backup run immediately.
         * 
         * @return builder
         * 
         */
        public Builder runImmediateFullBackup(@Nullable Output<Boolean> runImmediateFullBackup) {
            $.runImmediateFullBackup = runImmediateFullBackup;
            return this;
        }

        /**
         * @param runImmediateFullBackup If set to true, configures automatic full backups in the local region (the region of the DB system) for the first backup run immediately.
         * 
         * @return builder
         * 
         */
        public Builder runImmediateFullBackup(Boolean runImmediateFullBackup) {
            return runImmediateFullBackup(Output.of(runImmediateFullBackup));
        }

        public DatabaseDatabaseDbBackupConfigArgs build() {
            return $;
        }
    }

}
