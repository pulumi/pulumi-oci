// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs Empty = new DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs();

    /**
     * Provide the HSM password as you would in RDBMS for External HSM.
     * 
     */
    @Import(name="hsmPassword", required=true)
    private Output<String> hsmPassword;

    /**
     * @return Provide the HSM password as you would in RDBMS for External HSM.
     * 
     */
    public Output<String> hsmPassword() {
        return this.hsmPassword;
    }

    /**
     * Use &#39;EXTERNAL&#39; for creating a new database or migrating a database key to an External HSM. Use &#39;AZURE&#39; for creating a new database or migrating a database key to Azure.
     * 
     */
    @Import(name="providerType", required=true)
    private Output<String> providerType;

    /**
     * @return Use &#39;EXTERNAL&#39; for creating a new database or migrating a database key to an External HSM. Use &#39;AZURE&#39; for creating a new database or migrating a database key to Azure.
     * 
     */
    public Output<String> providerType() {
        return this.providerType;
    }

    private DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs() {}

    private DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs(DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs $) {
        this.hsmPassword = $.hsmPassword;
        this.providerType = $.providerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs $;

        public Builder() {
            $ = new DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs();
        }

        public Builder(DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs defaults) {
            $ = new DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hsmPassword Provide the HSM password as you would in RDBMS for External HSM.
         * 
         * @return builder
         * 
         */
        public Builder hsmPassword(Output<String> hsmPassword) {
            $.hsmPassword = hsmPassword;
            return this;
        }

        /**
         * @param hsmPassword Provide the HSM password as you would in RDBMS for External HSM.
         * 
         * @return builder
         * 
         */
        public Builder hsmPassword(String hsmPassword) {
            return hsmPassword(Output.of(hsmPassword));
        }

        /**
         * @param providerType Use &#39;EXTERNAL&#39; for creating a new database or migrating a database key to an External HSM. Use &#39;AZURE&#39; for creating a new database or migrating a database key to Azure.
         * 
         * @return builder
         * 
         */
        public Builder providerType(Output<String> providerType) {
            $.providerType = providerType;
            return this;
        }

        /**
         * @param providerType Use &#39;EXTERNAL&#39; for creating a new database or migrating a database key to an External HSM. Use &#39;AZURE&#39; for creating a new database or migrating a database key to Azure.
         * 
         * @return builder
         * 
         */
        public Builder providerType(String providerType) {
            return providerType(Output.of(providerType));
        }

        public DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs build() {
            if ($.hsmPassword == null) {
                throw new MissingRequiredPropertyException("DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs", "hsmPassword");
            }
            if ($.providerType == null) {
                throw new MissingRequiredPropertyException("DatabaseDatabaseSourceEncryptionKeyLocationDetailsArgs", "providerType");
            }
            return $;
        }
    }

}
