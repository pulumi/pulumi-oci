// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseUpgradeDataGuardGroupMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseUpgradeDataGuardGroupMemberArgs Empty = new DatabaseUpgradeDataGuardGroupMemberArgs();

    /**
     * The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
     * 
     */
    @Import(name="applyLag")
    private @Nullable Output<String> applyLag;

    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
     * 
     */
    public Optional<Output<String>> applyLag() {
        return Optional.ofNullable(this.applyLag);
    }

    /**
     * The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
     * 
     */
    @Import(name="applyRate")
    private @Nullable Output<String> applyRate;

    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
     * 
     */
    public Optional<Output<String>> applyRate() {
        return Optional.ofNullable(this.applyRate);
    }

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    /**
     * True if active Data Guard is enabled.
     * 
     */
    @Import(name="isActiveDataGuardEnabled")
    private @Nullable Output<Boolean> isActiveDataGuardEnabled;

    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    public Optional<Output<Boolean>> isActiveDataGuardEnabled() {
        return Optional.ofNullable(this.isActiveDataGuardEnabled);
    }

    /**
     * The role of the reporting database in this Data Guard association.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The rate at which redo logs are transported between the associated databases.  Example: `1 second`
     * 
     */
    @Import(name="transportLag")
    private @Nullable Output<String> transportLag;

    /**
     * @return The rate at which redo logs are transported between the associated databases.  Example: `1 second`
     * 
     */
    public Optional<Output<String>> transportLag() {
        return Optional.ofNullable(this.transportLag);
    }

    /**
     * The date and time when last redo transport has been done.
     * 
     */
    @Import(name="transportLagRefresh")
    private @Nullable Output<String> transportLagRefresh;

    /**
     * @return The date and time when last redo transport has been done.
     * 
     */
    public Optional<Output<String>> transportLagRefresh() {
        return Optional.ofNullable(this.transportLagRefresh);
    }

    /**
     * The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     */
    @Import(name="transportType")
    private @Nullable Output<String> transportType;

    /**
     * @return The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     */
    public Optional<Output<String>> transportType() {
        return Optional.ofNullable(this.transportType);
    }

    private DatabaseUpgradeDataGuardGroupMemberArgs() {}

    private DatabaseUpgradeDataGuardGroupMemberArgs(DatabaseUpgradeDataGuardGroupMemberArgs $) {
        this.applyLag = $.applyLag;
        this.applyRate = $.applyRate;
        this.databaseId = $.databaseId;
        this.dbSystemId = $.dbSystemId;
        this.isActiveDataGuardEnabled = $.isActiveDataGuardEnabled;
        this.role = $.role;
        this.transportLag = $.transportLag;
        this.transportLagRefresh = $.transportLagRefresh;
        this.transportType = $.transportType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseUpgradeDataGuardGroupMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseUpgradeDataGuardGroupMemberArgs $;

        public Builder() {
            $ = new DatabaseUpgradeDataGuardGroupMemberArgs();
        }

        public Builder(DatabaseUpgradeDataGuardGroupMemberArgs defaults) {
            $ = new DatabaseUpgradeDataGuardGroupMemberArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applyLag The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
         * 
         * @return builder
         * 
         */
        public Builder applyLag(@Nullable Output<String> applyLag) {
            $.applyLag = applyLag;
            return this;
        }

        /**
         * @param applyLag The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
         * 
         * @return builder
         * 
         */
        public Builder applyLag(String applyLag) {
            return applyLag(Output.of(applyLag));
        }

        /**
         * @param applyRate The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
         * 
         * @return builder
         * 
         */
        public Builder applyRate(@Nullable Output<String> applyRate) {
            $.applyRate = applyRate;
            return this;
        }

        /**
         * @param applyRate The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
         * 
         * @return builder
         * 
         */
        public Builder applyRate(String applyRate) {
            return applyRate(Output.of(applyRate));
        }

        /**
         * @param databaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param dbSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param isActiveDataGuardEnabled True if active Data Guard is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isActiveDataGuardEnabled(@Nullable Output<Boolean> isActiveDataGuardEnabled) {
            $.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            return this;
        }

        /**
         * @param isActiveDataGuardEnabled True if active Data Guard is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isActiveDataGuardEnabled(Boolean isActiveDataGuardEnabled) {
            return isActiveDataGuardEnabled(Output.of(isActiveDataGuardEnabled));
        }

        /**
         * @param role The role of the reporting database in this Data Guard association.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the reporting database in this Data Guard association.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param transportLag The rate at which redo logs are transported between the associated databases.  Example: `1 second`
         * 
         * @return builder
         * 
         */
        public Builder transportLag(@Nullable Output<String> transportLag) {
            $.transportLag = transportLag;
            return this;
        }

        /**
         * @param transportLag The rate at which redo logs are transported between the associated databases.  Example: `1 second`
         * 
         * @return builder
         * 
         */
        public Builder transportLag(String transportLag) {
            return transportLag(Output.of(transportLag));
        }

        /**
         * @param transportLagRefresh The date and time when last redo transport has been done.
         * 
         * @return builder
         * 
         */
        public Builder transportLagRefresh(@Nullable Output<String> transportLagRefresh) {
            $.transportLagRefresh = transportLagRefresh;
            return this;
        }

        /**
         * @param transportLagRefresh The date and time when last redo transport has been done.
         * 
         * @return builder
         * 
         */
        public Builder transportLagRefresh(String transportLagRefresh) {
            return transportLagRefresh(Output.of(transportLagRefresh));
        }

        /**
         * @param transportType The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
         * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
         * * MAXIMUM_PERFORMANCE - ASYNC
         * * MAXIMUM_PROTECTION - SYNC
         * 
         * @return builder
         * 
         */
        public Builder transportType(@Nullable Output<String> transportType) {
            $.transportType = transportType;
            return this;
        }

        /**
         * @param transportType The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
         * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
         * * MAXIMUM_PERFORMANCE - ASYNC
         * * MAXIMUM_PROTECTION - SYNC
         * 
         * @return builder
         * 
         */
        public Builder transportType(String transportType) {
            return transportType(Output.of(transportType));
        }

        public DatabaseUpgradeDataGuardGroupMemberArgs build() {
            return $;
        }
    }

}
