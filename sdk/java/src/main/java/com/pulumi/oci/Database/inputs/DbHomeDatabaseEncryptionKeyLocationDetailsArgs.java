// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DbHomeDatabaseEncryptionKeyLocationDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbHomeDatabaseEncryptionKeyLocationDetailsArgs Empty = new DbHomeDatabaseEncryptionKeyLocationDetailsArgs();

    /**
     * Provide the HSM password as you would in RDBMS for External HSM.
     * 
     */
    @Import(name="hsmPassword", required=true)
    private Output<String> hsmPassword;

    /**
     * @return Provide the HSM password as you would in RDBMS for External HSM.
     * 
     */
    public Output<String> hsmPassword() {
        return this.hsmPassword;
    }

    /**
     * Use &#39;EXTERNAL&#39; for creating a new database or migrate database key with External HSM.
     * 
     */
    @Import(name="providerType", required=true)
    private Output<String> providerType;

    /**
     * @return Use &#39;EXTERNAL&#39; for creating a new database or migrate database key with External HSM.
     * 
     */
    public Output<String> providerType() {
        return this.providerType;
    }

    private DbHomeDatabaseEncryptionKeyLocationDetailsArgs() {}

    private DbHomeDatabaseEncryptionKeyLocationDetailsArgs(DbHomeDatabaseEncryptionKeyLocationDetailsArgs $) {
        this.hsmPassword = $.hsmPassword;
        this.providerType = $.providerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbHomeDatabaseEncryptionKeyLocationDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbHomeDatabaseEncryptionKeyLocationDetailsArgs $;

        public Builder() {
            $ = new DbHomeDatabaseEncryptionKeyLocationDetailsArgs();
        }

        public Builder(DbHomeDatabaseEncryptionKeyLocationDetailsArgs defaults) {
            $ = new DbHomeDatabaseEncryptionKeyLocationDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hsmPassword Provide the HSM password as you would in RDBMS for External HSM.
         * 
         * @return builder
         * 
         */
        public Builder hsmPassword(Output<String> hsmPassword) {
            $.hsmPassword = hsmPassword;
            return this;
        }

        /**
         * @param hsmPassword Provide the HSM password as you would in RDBMS for External HSM.
         * 
         * @return builder
         * 
         */
        public Builder hsmPassword(String hsmPassword) {
            return hsmPassword(Output.of(hsmPassword));
        }

        /**
         * @param providerType Use &#39;EXTERNAL&#39; for creating a new database or migrate database key with External HSM.
         * 
         * @return builder
         * 
         */
        public Builder providerType(Output<String> providerType) {
            $.providerType = providerType;
            return this;
        }

        /**
         * @param providerType Use &#39;EXTERNAL&#39; for creating a new database or migrate database key with External HSM.
         * 
         * @return builder
         * 
         */
        public Builder providerType(String providerType) {
            return providerType(Output.of(providerType));
        }

        public DbHomeDatabaseEncryptionKeyLocationDetailsArgs build() {
            if ($.hsmPassword == null) {
                throw new MissingRequiredPropertyException("DbHomeDatabaseEncryptionKeyLocationDetailsArgs", "hsmPassword");
            }
            if ($.providerType == null) {
                throw new MissingRequiredPropertyException("DbHomeDatabaseEncryptionKeyLocationDetailsArgs", "providerType");
            }
            return $;
        }
    }

}
