// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs Empty = new ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs();

    /**
     * If true, the file system is used to create a backup prior to Exadata VM OS update.
     * 
     */
    @Import(name="isBackupPartition")
    private @Nullable Output<Boolean> isBackupPartition;

    /**
     * @return If true, the file system is used to create a backup prior to Exadata VM OS update.
     * 
     */
    public Optional<Output<Boolean>> isBackupPartition() {
        return Optional.ofNullable(this.isBackupPartition);
    }

    /**
     * If true, the file system resize is allowed for the Exadata Infrastructure cluster. If false, the file system resize is not allowed.
     * 
     */
    @Import(name="isResizable")
    private @Nullable Output<Boolean> isResizable;

    /**
     * @return If true, the file system resize is allowed for the Exadata Infrastructure cluster. If false, the file system resize is not allowed.
     * 
     */
    public Optional<Output<Boolean>> isResizable() {
        return Optional.ofNullable(this.isResizable);
    }

    /**
     * The minimum size of file system.
     * 
     */
    @Import(name="minSizeGb")
    private @Nullable Output<Integer> minSizeGb;

    /**
     * @return The minimum size of file system.
     * 
     */
    public Optional<Output<Integer>> minSizeGb() {
        return Optional.ofNullable(this.minSizeGb);
    }

    /**
     * The mount point of file system.
     * 
     */
    @Import(name="mountPoint")
    private @Nullable Output<String> mountPoint;

    /**
     * @return The mount point of file system.
     * 
     */
    public Optional<Output<String>> mountPoint() {
        return Optional.ofNullable(this.mountPoint);
    }

    private ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs() {}

    private ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs(ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs $) {
        this.isBackupPartition = $.isBackupPartition;
        this.isResizable = $.isResizable;
        this.minSizeGb = $.minSizeGb;
        this.mountPoint = $.mountPoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs $;

        public Builder() {
            $ = new ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs();
        }

        public Builder(ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs defaults) {
            $ = new ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isBackupPartition If true, the file system is used to create a backup prior to Exadata VM OS update.
         * 
         * @return builder
         * 
         */
        public Builder isBackupPartition(@Nullable Output<Boolean> isBackupPartition) {
            $.isBackupPartition = isBackupPartition;
            return this;
        }

        /**
         * @param isBackupPartition If true, the file system is used to create a backup prior to Exadata VM OS update.
         * 
         * @return builder
         * 
         */
        public Builder isBackupPartition(Boolean isBackupPartition) {
            return isBackupPartition(Output.of(isBackupPartition));
        }

        /**
         * @param isResizable If true, the file system resize is allowed for the Exadata Infrastructure cluster. If false, the file system resize is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder isResizable(@Nullable Output<Boolean> isResizable) {
            $.isResizable = isResizable;
            return this;
        }

        /**
         * @param isResizable If true, the file system resize is allowed for the Exadata Infrastructure cluster. If false, the file system resize is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder isResizable(Boolean isResizable) {
            return isResizable(Output.of(isResizable));
        }

        /**
         * @param minSizeGb The minimum size of file system.
         * 
         * @return builder
         * 
         */
        public Builder minSizeGb(@Nullable Output<Integer> minSizeGb) {
            $.minSizeGb = minSizeGb;
            return this;
        }

        /**
         * @param minSizeGb The minimum size of file system.
         * 
         * @return builder
         * 
         */
        public Builder minSizeGb(Integer minSizeGb) {
            return minSizeGb(Output.of(minSizeGb));
        }

        /**
         * @param mountPoint The mount point of file system.
         * 
         * @return builder
         * 
         */
        public Builder mountPoint(@Nullable Output<String> mountPoint) {
            $.mountPoint = mountPoint;
            return this;
        }

        /**
         * @param mountPoint The mount point of file system.
         * 
         * @return builder
         * 
         */
        public Builder mountPoint(String mountPoint) {
            return mountPoint(Output.of(mountPoint));
        }

        public ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArgs build() {
            return $;
        }
    }

}
