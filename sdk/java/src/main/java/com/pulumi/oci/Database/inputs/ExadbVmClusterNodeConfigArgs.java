// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExadbVmClusterNodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExadbVmClusterNodeConfigArgs Empty = new ExadbVmClusterNodeConfigArgs();

    /**
     * (Updatable) The number of ECPUs to enable for each node.
     * 
     */
    @Import(name="enabledEcpuCountPerNode", required=true)
    private Output<Integer> enabledEcpuCountPerNode;

    /**
     * @return (Updatable) The number of ECPUs to enable for each node.
     * 
     */
    public Output<Integer> enabledEcpuCountPerNode() {
        return this.enabledEcpuCountPerNode;
    }

    /**
     * The memory that you want to be allocated in GBs to each node. Memory is calculated based on 11 GB per VM core reserved.
     * 
     */
    @Import(name="memorySizeInGbsPerNode")
    private @Nullable Output<Integer> memorySizeInGbsPerNode;

    /**
     * @return The memory that you want to be allocated in GBs to each node. Memory is calculated based on 11 GB per VM core reserved.
     * 
     */
    public Optional<Output<Integer>> memorySizeInGbsPerNode() {
        return Optional.ofNullable(this.memorySizeInGbsPerNode);
    }

    /**
     * The file system storage in GBs for snapshot for each node.
     * 
     */
    @Import(name="snapshotFileSystemStorageSizeGbsPerNode")
    private @Nullable Output<Integer> snapshotFileSystemStorageSizeGbsPerNode;

    /**
     * @return The file system storage in GBs for snapshot for each node.
     * 
     */
    public Optional<Output<Integer>> snapshotFileSystemStorageSizeGbsPerNode() {
        return Optional.ofNullable(this.snapshotFileSystemStorageSizeGbsPerNode);
    }

    /**
     * (Updatable) The number of Total ECPUs for each node.
     * 
     */
    @Import(name="totalEcpuCountPerNode", required=true)
    private Output<Integer> totalEcpuCountPerNode;

    /**
     * @return (Updatable) The number of Total ECPUs for each node.
     * 
     */
    public Output<Integer> totalEcpuCountPerNode() {
        return this.totalEcpuCountPerNode;
    }

    /**
     * Total file system storage in GBs for each node.
     * 
     */
    @Import(name="totalFileSystemStorageSizeGbsPerNode")
    private @Nullable Output<Integer> totalFileSystemStorageSizeGbsPerNode;

    /**
     * @return Total file system storage in GBs for each node.
     * 
     */
    public Optional<Output<Integer>> totalFileSystemStorageSizeGbsPerNode() {
        return Optional.ofNullable(this.totalFileSystemStorageSizeGbsPerNode);
    }

    /**
     * (Updatable) The file system storage in GBs for each node.
     * 
     */
    @Import(name="vmFileSystemStorageSizeGbsPerNode", required=true)
    private Output<Integer> vmFileSystemStorageSizeGbsPerNode;

    /**
     * @return (Updatable) The file system storage in GBs for each node.
     * 
     */
    public Output<Integer> vmFileSystemStorageSizeGbsPerNode() {
        return this.vmFileSystemStorageSizeGbsPerNode;
    }

    private ExadbVmClusterNodeConfigArgs() {}

    private ExadbVmClusterNodeConfigArgs(ExadbVmClusterNodeConfigArgs $) {
        this.enabledEcpuCountPerNode = $.enabledEcpuCountPerNode;
        this.memorySizeInGbsPerNode = $.memorySizeInGbsPerNode;
        this.snapshotFileSystemStorageSizeGbsPerNode = $.snapshotFileSystemStorageSizeGbsPerNode;
        this.totalEcpuCountPerNode = $.totalEcpuCountPerNode;
        this.totalFileSystemStorageSizeGbsPerNode = $.totalFileSystemStorageSizeGbsPerNode;
        this.vmFileSystemStorageSizeGbsPerNode = $.vmFileSystemStorageSizeGbsPerNode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExadbVmClusterNodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExadbVmClusterNodeConfigArgs $;

        public Builder() {
            $ = new ExadbVmClusterNodeConfigArgs();
        }

        public Builder(ExadbVmClusterNodeConfigArgs defaults) {
            $ = new ExadbVmClusterNodeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabledEcpuCountPerNode (Updatable) The number of ECPUs to enable for each node.
         * 
         * @return builder
         * 
         */
        public Builder enabledEcpuCountPerNode(Output<Integer> enabledEcpuCountPerNode) {
            $.enabledEcpuCountPerNode = enabledEcpuCountPerNode;
            return this;
        }

        /**
         * @param enabledEcpuCountPerNode (Updatable) The number of ECPUs to enable for each node.
         * 
         * @return builder
         * 
         */
        public Builder enabledEcpuCountPerNode(Integer enabledEcpuCountPerNode) {
            return enabledEcpuCountPerNode(Output.of(enabledEcpuCountPerNode));
        }

        /**
         * @param memorySizeInGbsPerNode The memory that you want to be allocated in GBs to each node. Memory is calculated based on 11 GB per VM core reserved.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeInGbsPerNode(@Nullable Output<Integer> memorySizeInGbsPerNode) {
            $.memorySizeInGbsPerNode = memorySizeInGbsPerNode;
            return this;
        }

        /**
         * @param memorySizeInGbsPerNode The memory that you want to be allocated in GBs to each node. Memory is calculated based on 11 GB per VM core reserved.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeInGbsPerNode(Integer memorySizeInGbsPerNode) {
            return memorySizeInGbsPerNode(Output.of(memorySizeInGbsPerNode));
        }

        /**
         * @param snapshotFileSystemStorageSizeGbsPerNode The file system storage in GBs for snapshot for each node.
         * 
         * @return builder
         * 
         */
        public Builder snapshotFileSystemStorageSizeGbsPerNode(@Nullable Output<Integer> snapshotFileSystemStorageSizeGbsPerNode) {
            $.snapshotFileSystemStorageSizeGbsPerNode = snapshotFileSystemStorageSizeGbsPerNode;
            return this;
        }

        /**
         * @param snapshotFileSystemStorageSizeGbsPerNode The file system storage in GBs for snapshot for each node.
         * 
         * @return builder
         * 
         */
        public Builder snapshotFileSystemStorageSizeGbsPerNode(Integer snapshotFileSystemStorageSizeGbsPerNode) {
            return snapshotFileSystemStorageSizeGbsPerNode(Output.of(snapshotFileSystemStorageSizeGbsPerNode));
        }

        /**
         * @param totalEcpuCountPerNode (Updatable) The number of Total ECPUs for each node.
         * 
         * @return builder
         * 
         */
        public Builder totalEcpuCountPerNode(Output<Integer> totalEcpuCountPerNode) {
            $.totalEcpuCountPerNode = totalEcpuCountPerNode;
            return this;
        }

        /**
         * @param totalEcpuCountPerNode (Updatable) The number of Total ECPUs for each node.
         * 
         * @return builder
         * 
         */
        public Builder totalEcpuCountPerNode(Integer totalEcpuCountPerNode) {
            return totalEcpuCountPerNode(Output.of(totalEcpuCountPerNode));
        }

        /**
         * @param totalFileSystemStorageSizeGbsPerNode Total file system storage in GBs for each node.
         * 
         * @return builder
         * 
         */
        public Builder totalFileSystemStorageSizeGbsPerNode(@Nullable Output<Integer> totalFileSystemStorageSizeGbsPerNode) {
            $.totalFileSystemStorageSizeGbsPerNode = totalFileSystemStorageSizeGbsPerNode;
            return this;
        }

        /**
         * @param totalFileSystemStorageSizeGbsPerNode Total file system storage in GBs for each node.
         * 
         * @return builder
         * 
         */
        public Builder totalFileSystemStorageSizeGbsPerNode(Integer totalFileSystemStorageSizeGbsPerNode) {
            return totalFileSystemStorageSizeGbsPerNode(Output.of(totalFileSystemStorageSizeGbsPerNode));
        }

        /**
         * @param vmFileSystemStorageSizeGbsPerNode (Updatable) The file system storage in GBs for each node.
         * 
         * @return builder
         * 
         */
        public Builder vmFileSystemStorageSizeGbsPerNode(Output<Integer> vmFileSystemStorageSizeGbsPerNode) {
            $.vmFileSystemStorageSizeGbsPerNode = vmFileSystemStorageSizeGbsPerNode;
            return this;
        }

        /**
         * @param vmFileSystemStorageSizeGbsPerNode (Updatable) The file system storage in GBs for each node.
         * 
         * @return builder
         * 
         */
        public Builder vmFileSystemStorageSizeGbsPerNode(Integer vmFileSystemStorageSizeGbsPerNode) {
            return vmFileSystemStorageSizeGbsPerNode(Output.of(vmFileSystemStorageSizeGbsPerNode));
        }

        public ExadbVmClusterNodeConfigArgs build() {
            if ($.enabledEcpuCountPerNode == null) {
                throw new MissingRequiredPropertyException("ExadbVmClusterNodeConfigArgs", "enabledEcpuCountPerNode");
            }
            if ($.totalEcpuCountPerNode == null) {
                throw new MissingRequiredPropertyException("ExadbVmClusterNodeConfigArgs", "totalEcpuCountPerNode");
            }
            if ($.vmFileSystemStorageSizeGbsPerNode == null) {
                throw new MissingRequiredPropertyException("ExadbVmClusterNodeConfigArgs", "vmFileSystemStorageSizeGbsPerNode");
            }
            return $;
        }
    }

}
