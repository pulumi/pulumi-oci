// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ExternalDatabaseConnectorConnectionStringArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalDatabaseConnectorConnectionStringArgs Empty = new ExternalDatabaseConnectorConnectionStringArgs();

    /**
     * (Updatable) The host name of the database.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return (Updatable) The host name of the database.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * (Updatable) The port used to connect to the database.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return (Updatable) The port used to connect to the database.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * (Updatable) The protocol used to connect to the database.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return (Updatable) The protocol used to connect to the database.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * (Updatable) The name of the service alias used to connect to the database.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return (Updatable) The name of the service alias used to connect to the database.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private ExternalDatabaseConnectorConnectionStringArgs() {}

    private ExternalDatabaseConnectorConnectionStringArgs(ExternalDatabaseConnectorConnectionStringArgs $) {
        this.hostname = $.hostname;
        this.port = $.port;
        this.protocol = $.protocol;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalDatabaseConnectorConnectionStringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalDatabaseConnectorConnectionStringArgs $;

        public Builder() {
            $ = new ExternalDatabaseConnectorConnectionStringArgs();
        }

        public Builder(ExternalDatabaseConnectorConnectionStringArgs defaults) {
            $ = new ExternalDatabaseConnectorConnectionStringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname (Updatable) The host name of the database.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname (Updatable) The host name of the database.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param port (Updatable) The port used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The port used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol (Updatable) The protocol used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) The protocol used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param service (Updatable) The name of the service alias used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service (Updatable) The name of the service alias used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ExternalDatabaseConnectorConnectionStringArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("ExternalDatabaseConnectorConnectionStringArgs", "hostname");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ExternalDatabaseConnectorConnectionStringArgs", "port");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ExternalDatabaseConnectorConnectionStringArgs", "protocol");
            }
            if ($.service == null) {
                throw new MissingRequiredPropertyException("ExternalDatabaseConnectorConnectionStringArgs", "service");
            }
            return $;
        }
    }

}
