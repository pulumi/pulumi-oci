// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.inputs.GetDbSystemStoragePerformancesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDbSystemStoragePerformancesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDbSystemStoragePerformancesArgs Empty = new GetDbSystemStoragePerformancesArgs();

    /**
     * Optional. The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return Optional. The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Optional. Filters the performance results by database edition. Valid values are:
     * * STANDARD_EDITION
     * * ENTERPRISE_EDITION
     * * ENTERPRISE_EDITION_HIGH_PERFORMANCE
     * * ENTERPRISE_EDITION_EXTREME_PERFORMANCE
     * * ENTERPRISE_EDITION_DEVELOPER
     * 
     */
    @Import(name="databaseEdition")
    private @Nullable Output<String> databaseEdition;

    /**
     * @return Optional. Filters the performance results by database edition. Valid values are:
     * * STANDARD_EDITION
     * * ENTERPRISE_EDITION
     * * ENTERPRISE_EDITION_HIGH_PERFORMANCE
     * * ENTERPRISE_EDITION_EXTREME_PERFORMANCE
     * * ENTERPRISE_EDITION_DEVELOPER
     * 
     */
    public Optional<Output<String>> databaseEdition() {
        return Optional.ofNullable(this.databaseEdition);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDbSystemStoragePerformancesFilterArgs>> filters;

    public Optional<Output<List<GetDbSystemStoragePerformancesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Optional. Filters the performance results by shape type.
     * 
     */
    @Import(name="shapeType")
    private @Nullable Output<String> shapeType;

    /**
     * @return Optional. Filters the performance results by shape type.
     * 
     */
    public Optional<Output<String>> shapeType() {
        return Optional.ofNullable(this.shapeType);
    }

    /**
     * The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
     * * ASM specifies Oracle Automatic Storage Management
     * * LVM specifies logical volume manager, sometimes called logical disk manager.
     * 
     */
    @Import(name="storageManagement", required=true)
    private Output<String> storageManagement;

    /**
     * @return The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
     * * ASM specifies Oracle Automatic Storage Management
     * * LVM specifies logical volume manager, sometimes called logical disk manager.
     * 
     */
    public Output<String> storageManagement() {
        return this.storageManagement;
    }

    private GetDbSystemStoragePerformancesArgs() {}

    private GetDbSystemStoragePerformancesArgs(GetDbSystemStoragePerformancesArgs $) {
        this.compartmentId = $.compartmentId;
        this.databaseEdition = $.databaseEdition;
        this.filters = $.filters;
        this.shapeType = $.shapeType;
        this.storageManagement = $.storageManagement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbSystemStoragePerformancesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbSystemStoragePerformancesArgs $;

        public Builder() {
            $ = new GetDbSystemStoragePerformancesArgs();
        }

        public Builder(GetDbSystemStoragePerformancesArgs defaults) {
            $ = new GetDbSystemStoragePerformancesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId Optional. The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId Optional. The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param databaseEdition Optional. Filters the performance results by database edition. Valid values are:
         * * STANDARD_EDITION
         * * ENTERPRISE_EDITION
         * * ENTERPRISE_EDITION_HIGH_PERFORMANCE
         * * ENTERPRISE_EDITION_EXTREME_PERFORMANCE
         * * ENTERPRISE_EDITION_DEVELOPER
         * 
         * @return builder
         * 
         */
        public Builder databaseEdition(@Nullable Output<String> databaseEdition) {
            $.databaseEdition = databaseEdition;
            return this;
        }

        /**
         * @param databaseEdition Optional. Filters the performance results by database edition. Valid values are:
         * * STANDARD_EDITION
         * * ENTERPRISE_EDITION
         * * ENTERPRISE_EDITION_HIGH_PERFORMANCE
         * * ENTERPRISE_EDITION_EXTREME_PERFORMANCE
         * * ENTERPRISE_EDITION_DEVELOPER
         * 
         * @return builder
         * 
         */
        public Builder databaseEdition(String databaseEdition) {
            return databaseEdition(Output.of(databaseEdition));
        }

        public Builder filters(@Nullable Output<List<GetDbSystemStoragePerformancesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDbSystemStoragePerformancesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDbSystemStoragePerformancesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param shapeType Optional. Filters the performance results by shape type.
         * 
         * @return builder
         * 
         */
        public Builder shapeType(@Nullable Output<String> shapeType) {
            $.shapeType = shapeType;
            return this;
        }

        /**
         * @param shapeType Optional. Filters the performance results by shape type.
         * 
         * @return builder
         * 
         */
        public Builder shapeType(String shapeType) {
            return shapeType(Output.of(shapeType));
        }

        /**
         * @param storageManagement The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
         * * ASM specifies Oracle Automatic Storage Management
         * * LVM specifies logical volume manager, sometimes called logical disk manager.
         * 
         * @return builder
         * 
         */
        public Builder storageManagement(Output<String> storageManagement) {
            $.storageManagement = storageManagement;
            return this;
        }

        /**
         * @param storageManagement The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
         * * ASM specifies Oracle Automatic Storage Management
         * * LVM specifies logical volume manager, sometimes called logical disk manager.
         * 
         * @return builder
         * 
         */
        public Builder storageManagement(String storageManagement) {
            return storageManagement(Output.of(storageManagement));
        }

        public GetDbSystemStoragePerformancesArgs build() {
            if ($.storageManagement == null) {
                throw new MissingRequiredPropertyException("GetDbSystemStoragePerformancesArgs", "storageManagement");
            }
            return $;
        }
    }

}
