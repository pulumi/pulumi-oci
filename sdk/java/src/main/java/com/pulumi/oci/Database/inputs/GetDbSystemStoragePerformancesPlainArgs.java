// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.GetDbSystemStoragePerformancesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDbSystemStoragePerformancesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDbSystemStoragePerformancesPlainArgs Empty = new GetDbSystemStoragePerformancesPlainArgs();

    @Import(name="filters")
    private @Nullable List<GetDbSystemStoragePerformancesFilter> filters;

    public Optional<List<GetDbSystemStoragePerformancesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Optional. Filters the performance results by shape type.
     * 
     */
    @Import(name="shapeType")
    private @Nullable String shapeType;

    /**
     * @return Optional. Filters the performance results by shape type.
     * 
     */
    public Optional<String> shapeType() {
        return Optional.ofNullable(this.shapeType);
    }

    /**
     * The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
     * * ASM specifies Oracle Automatic Storage Management
     * * LVM specifies logical volume manager, sometimes called logical disk manager.
     * 
     */
    @Import(name="storageManagement", required=true)
    private String storageManagement;

    /**
     * @return The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
     * * ASM specifies Oracle Automatic Storage Management
     * * LVM specifies logical volume manager, sometimes called logical disk manager.
     * 
     */
    public String storageManagement() {
        return this.storageManagement;
    }

    private GetDbSystemStoragePerformancesPlainArgs() {}

    private GetDbSystemStoragePerformancesPlainArgs(GetDbSystemStoragePerformancesPlainArgs $) {
        this.filters = $.filters;
        this.shapeType = $.shapeType;
        this.storageManagement = $.storageManagement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbSystemStoragePerformancesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbSystemStoragePerformancesPlainArgs $;

        public Builder() {
            $ = new GetDbSystemStoragePerformancesPlainArgs();
        }

        public Builder(GetDbSystemStoragePerformancesPlainArgs defaults) {
            $ = new GetDbSystemStoragePerformancesPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable List<GetDbSystemStoragePerformancesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDbSystemStoragePerformancesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param shapeType Optional. Filters the performance results by shape type.
         * 
         * @return builder
         * 
         */
        public Builder shapeType(@Nullable String shapeType) {
            $.shapeType = shapeType;
            return this;
        }

        /**
         * @param storageManagement The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
         * * ASM specifies Oracle Automatic Storage Management
         * * LVM specifies logical volume manager, sometimes called logical disk manager.
         * 
         * @return builder
         * 
         */
        public Builder storageManagement(String storageManagement) {
            $.storageManagement = storageManagement;
            return this;
        }

        public GetDbSystemStoragePerformancesPlainArgs build() {
            $.storageManagement = Objects.requireNonNull($.storageManagement, "expected parameter 'storageManagement' to be non-null");
            return $;
        }
    }

}
