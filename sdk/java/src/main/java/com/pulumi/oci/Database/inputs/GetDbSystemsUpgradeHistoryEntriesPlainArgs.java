// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.inputs.GetDbSystemsUpgradeHistoryEntriesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDbSystemsUpgradeHistoryEntriesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDbSystemsUpgradeHistoryEntriesPlainArgs Empty = new GetDbSystemsUpgradeHistoryEntriesPlainArgs();

    /**
     * The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="dbSystemId", required=true)
    private String dbSystemId;

    /**
     * @return The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }

    @Import(name="filters")
    private @Nullable List<GetDbSystemsUpgradeHistoryEntriesFilter> filters;

    public Optional<List<GetDbSystemsUpgradeHistoryEntriesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only upgrade history entries that match the given lifecycle state exactly.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only upgrade history entries that match the given lifecycle state exactly.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
     * 
     */
    @Import(name="upgradeAction")
    private @Nullable String upgradeAction;

    /**
     * @return A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
     * 
     */
    public Optional<String> upgradeAction() {
        return Optional.ofNullable(this.upgradeAction);
    }

    private GetDbSystemsUpgradeHistoryEntriesPlainArgs() {}

    private GetDbSystemsUpgradeHistoryEntriesPlainArgs(GetDbSystemsUpgradeHistoryEntriesPlainArgs $) {
        this.dbSystemId = $.dbSystemId;
        this.filters = $.filters;
        this.state = $.state;
        this.upgradeAction = $.upgradeAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbSystemsUpgradeHistoryEntriesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbSystemsUpgradeHistoryEntriesPlainArgs $;

        public Builder() {
            $ = new GetDbSystemsUpgradeHistoryEntriesPlainArgs();
        }

        public Builder(GetDbSystemsUpgradeHistoryEntriesPlainArgs defaults) {
            $ = new GetDbSystemsUpgradeHistoryEntriesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbSystemId The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        public Builder filters(@Nullable List<GetDbSystemsUpgradeHistoryEntriesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDbSystemsUpgradeHistoryEntriesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only upgrade history entries that match the given lifecycle state exactly.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param upgradeAction A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
         * 
         * @return builder
         * 
         */
        public Builder upgradeAction(@Nullable String upgradeAction) {
            $.upgradeAction = upgradeAction;
            return this;
        }

        public GetDbSystemsUpgradeHistoryEntriesPlainArgs build() {
            if ($.dbSystemId == null) {
                throw new MissingRequiredPropertyException("GetDbSystemsUpgradeHistoryEntriesPlainArgs", "dbSystemId");
            }
            return $;
        }
    }

}
