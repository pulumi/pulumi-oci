// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.MaintenanceRunEstimatedPatchingTimeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceRunState extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceRunState Empty = new MaintenanceRunState();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Maintenance Run.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Maintenance Run.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
     * 
     */
    @Import(name="currentCustomActionTimeoutInMins")
    private @Nullable Output<Integer> currentCustomActionTimeoutInMins;

    /**
     * @return Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
     * 
     */
    public Optional<Output<Integer>> currentCustomActionTimeoutInMins() {
        return Optional.ofNullable(this.currentCustomActionTimeoutInMins);
    }

    /**
     * The name of the current infrastruture component that is getting patched.
     * 
     */
    @Import(name="currentPatchingComponent")
    private @Nullable Output<String> currentPatchingComponent;

    /**
     * @return The name of the current infrastruture component that is getting patched.
     * 
     */
    public Optional<Output<String>> currentPatchingComponent() {
        return Optional.ofNullable(this.currentPatchingComponent);
    }

    /**
     * Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
     * 
     */
    @Import(name="customActionTimeoutInMins")
    private @Nullable Output<Integer> customActionTimeoutInMins;

    /**
     * @return Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
     * 
     */
    public Optional<Output<Integer>> customActionTimeoutInMins() {
        return Optional.ofNullable(this.customActionTimeoutInMins);
    }

    /**
     * The Autonomous Database Software Image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    @Import(name="databaseSoftwareImageId")
    private @Nullable Output<String> databaseSoftwareImageId;

    /**
     * @return The Autonomous Database Software Image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public Optional<Output<String>> databaseSoftwareImageId() {
        return Optional.ofNullable(this.databaseSoftwareImageId);
    }

    /**
     * Description of the maintenance run.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the maintenance run.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The user-friendly name for the maintenance run.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The user-friendly name for the maintenance run.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The estimated start time of the next infrastruture component patching operation.
     * 
     */
    @Import(name="estimatedComponentPatchingStartTime")
    private @Nullable Output<String> estimatedComponentPatchingStartTime;

    /**
     * @return The estimated start time of the next infrastruture component patching operation.
     * 
     */
    public Optional<Output<String>> estimatedComponentPatchingStartTime() {
        return Optional.ofNullable(this.estimatedComponentPatchingStartTime);
    }

    /**
     * The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
     * 
     */
    @Import(name="estimatedPatchingTimes")
    private @Nullable Output<List<MaintenanceRunEstimatedPatchingTimeArgs>> estimatedPatchingTimes;

    /**
     * @return The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
     * 
     */
    public Optional<Output<List<MaintenanceRunEstimatedPatchingTimeArgs>>> estimatedPatchingTimes() {
        return Optional.ofNullable(this.estimatedPatchingTimes);
    }

    /**
     * If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     * 
     */
    @Import(name="isCustomActionTimeoutEnabled")
    private @Nullable Output<Boolean> isCustomActionTimeoutEnabled;

    /**
     * @return If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     * 
     */
    public Optional<Output<Boolean>> isCustomActionTimeoutEnabled() {
        return Optional.ofNullable(this.isCustomActionTimeoutEnabled);
    }

    /**
     * Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
     * 
     */
    @Import(name="isDstFileUpdateEnabled")
    private @Nullable Output<Boolean> isDstFileUpdateEnabled;

    /**
     * @return Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
     * 
     */
    public Optional<Output<Boolean>> isDstFileUpdateEnabled() {
        return Optional.ofNullable(this.isDstFileUpdateEnabled);
    }

    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * Maintenance sub-type.
     * 
     */
    @Import(name="maintenanceSubtype")
    private @Nullable Output<String> maintenanceSubtype;

    /**
     * @return Maintenance sub-type.
     * 
     */
    public Optional<Output<String>> maintenanceSubtype() {
        return Optional.ofNullable(this.maintenanceSubtype);
    }

    /**
     * Maintenance type.
     * 
     */
    @Import(name="maintenanceType")
    private @Nullable Output<String> maintenanceType;

    /**
     * @return Maintenance type.
     * 
     */
    public Optional<Output<String>> maintenanceType() {
        return Optional.ofNullable(this.maintenanceType);
    }

    /**
     * Contain the patch failure count.
     * 
     */
    @Import(name="patchFailureCount")
    private @Nullable Output<Integer> patchFailureCount;

    /**
     * @return Contain the patch failure count.
     * 
     */
    public Optional<Output<Integer>> patchFailureCount() {
        return Optional.ofNullable(this.patchFailureCount);
    }

    /**
     * The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
     * 
     */
    @Import(name="patchId")
    private @Nullable Output<String> patchId;

    /**
     * @return The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
     * 
     */
    public Optional<Output<String>> patchId() {
        return Optional.ofNullable(this.patchId);
    }

    /**
     * Patch type, either &#34;QUARTERLY&#34;, &#34;TIMEZONE&#34; or &#34;CUSTOM_DATABASE_SOFTWARE_IMAGE&#34;.
     * 
     */
    @Import(name="patchType")
    private @Nullable Output<String> patchType;

    /**
     * @return Patch type, either &#34;QUARTERLY&#34;, &#34;TIMEZONE&#34; or &#34;CUSTOM_DATABASE_SOFTWARE_IMAGE&#34;.
     * 
     */
    public Optional<Output<String>> patchType() {
        return Optional.ofNullable(this.patchType);
    }

    /**
     * The time when the patching operation ended.
     * 
     */
    @Import(name="patchingEndTime")
    private @Nullable Output<String> patchingEndTime;

    /**
     * @return The time when the patching operation ended.
     * 
     */
    public Optional<Output<String>> patchingEndTime() {
        return Optional.ofNullable(this.patchingEndTime);
    }

    /**
     * (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     * *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
     * 
     */
    @Import(name="patchingMode")
    private @Nullable Output<String> patchingMode;

    /**
     * @return (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     * *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
     * 
     */
    public Optional<Output<String>> patchingMode() {
        return Optional.ofNullable(this.patchingMode);
    }

    /**
     * The time when the patching operation started.
     * 
     */
    @Import(name="patchingStartTime")
    private @Nullable Output<String> patchingStartTime;

    /**
     * @return The time when the patching operation started.
     * 
     */
    public Optional<Output<String>> patchingStartTime() {
        return Optional.ofNullable(this.patchingStartTime);
    }

    /**
     * The status of the patching operation.
     * 
     */
    @Import(name="patchingStatus")
    private @Nullable Output<String> patchingStatus;

    /**
     * @return The status of the patching operation.
     * 
     */
    public Optional<Output<String>> patchingStatus() {
        return Optional.ofNullable(this.patchingStatus);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association&#39;s peer container database.
     * 
     */
    @Import(name="peerMaintenanceRunId")
    private @Nullable Output<String> peerMaintenanceRunId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association&#39;s peer container database.
     * 
     */
    public Optional<Output<String>> peerMaintenanceRunId() {
        return Optional.ofNullable(this.peerMaintenanceRunId);
    }

    /**
     * The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The target software version for the database server patching operation.
     * 
     */
    @Import(name="targetDbServerVersion")
    private @Nullable Output<String> targetDbServerVersion;

    /**
     * @return The target software version for the database server patching operation.
     * 
     */
    public Optional<Output<String>> targetDbServerVersion() {
        return Optional.ofNullable(this.targetDbServerVersion);
    }

    /**
     * The ID of the target resource for which the maintenance run should be created.
     * 
     */
    @Import(name="targetResourceId")
    private @Nullable Output<String> targetResourceId;

    /**
     * @return The ID of the target resource for which the maintenance run should be created.
     * 
     */
    public Optional<Output<String>> targetResourceId() {
        return Optional.ofNullable(this.targetResourceId);
    }

    /**
     * The type of the target resource on which the maintenance run occurs.
     * 
     */
    @Import(name="targetResourceType")
    private @Nullable Output<String> targetResourceType;

    /**
     * @return The type of the target resource on which the maintenance run occurs.
     * 
     */
    public Optional<Output<String>> targetResourceType() {
        return Optional.ofNullable(this.targetResourceType);
    }

    /**
     * The target Cell version that is to be patched to.
     * 
     */
    @Import(name="targetStorageServerVersion")
    private @Nullable Output<String> targetStorageServerVersion;

    /**
     * @return The target Cell version that is to be patched to.
     * 
     */
    public Optional<Output<String>> targetStorageServerVersion() {
        return Optional.ofNullable(this.targetStorageServerVersion);
    }

    /**
     * The date and time the maintenance run was completed.
     * 
     */
    @Import(name="timeEnded")
    private @Nullable Output<String> timeEnded;

    /**
     * @return The date and time the maintenance run was completed.
     * 
     */
    public Optional<Output<String>> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }

    /**
     * (Updatable) The date and time that update should be scheduled.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="timeScheduled")
    private @Nullable Output<String> timeScheduled;

    /**
     * @return (Updatable) The date and time that update should be scheduled.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> timeScheduled() {
        return Optional.ofNullable(this.timeScheduled);
    }

    /**
     * The date and time the maintenance run starts.
     * 
     */
    @Import(name="timeStarted")
    private @Nullable Output<String> timeStarted;

    /**
     * @return The date and time the maintenance run starts.
     * 
     */
    public Optional<Output<String>> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }

    private MaintenanceRunState() {}

    private MaintenanceRunState(MaintenanceRunState $) {
        this.compartmentId = $.compartmentId;
        this.currentCustomActionTimeoutInMins = $.currentCustomActionTimeoutInMins;
        this.currentPatchingComponent = $.currentPatchingComponent;
        this.customActionTimeoutInMins = $.customActionTimeoutInMins;
        this.databaseSoftwareImageId = $.databaseSoftwareImageId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.estimatedComponentPatchingStartTime = $.estimatedComponentPatchingStartTime;
        this.estimatedPatchingTimes = $.estimatedPatchingTimes;
        this.isCustomActionTimeoutEnabled = $.isCustomActionTimeoutEnabled;
        this.isDstFileUpdateEnabled = $.isDstFileUpdateEnabled;
        this.lifecycleDetails = $.lifecycleDetails;
        this.maintenanceSubtype = $.maintenanceSubtype;
        this.maintenanceType = $.maintenanceType;
        this.patchFailureCount = $.patchFailureCount;
        this.patchId = $.patchId;
        this.patchType = $.patchType;
        this.patchingEndTime = $.patchingEndTime;
        this.patchingMode = $.patchingMode;
        this.patchingStartTime = $.patchingStartTime;
        this.patchingStatus = $.patchingStatus;
        this.peerMaintenanceRunId = $.peerMaintenanceRunId;
        this.state = $.state;
        this.targetDbServerVersion = $.targetDbServerVersion;
        this.targetResourceId = $.targetResourceId;
        this.targetResourceType = $.targetResourceType;
        this.targetStorageServerVersion = $.targetStorageServerVersion;
        this.timeEnded = $.timeEnded;
        this.timeScheduled = $.timeScheduled;
        this.timeStarted = $.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceRunState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceRunState $;

        public Builder() {
            $ = new MaintenanceRunState();
        }

        public Builder(MaintenanceRunState defaults) {
            $ = new MaintenanceRunState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Maintenance Run.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Maintenance Run.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param currentCustomActionTimeoutInMins Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder currentCustomActionTimeoutInMins(@Nullable Output<Integer> currentCustomActionTimeoutInMins) {
            $.currentCustomActionTimeoutInMins = currentCustomActionTimeoutInMins;
            return this;
        }

        /**
         * @param currentCustomActionTimeoutInMins Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder currentCustomActionTimeoutInMins(Integer currentCustomActionTimeoutInMins) {
            return currentCustomActionTimeoutInMins(Output.of(currentCustomActionTimeoutInMins));
        }

        /**
         * @param currentPatchingComponent The name of the current infrastruture component that is getting patched.
         * 
         * @return builder
         * 
         */
        public Builder currentPatchingComponent(@Nullable Output<String> currentPatchingComponent) {
            $.currentPatchingComponent = currentPatchingComponent;
            return this;
        }

        /**
         * @param currentPatchingComponent The name of the current infrastruture component that is getting patched.
         * 
         * @return builder
         * 
         */
        public Builder currentPatchingComponent(String currentPatchingComponent) {
            return currentPatchingComponent(Output.of(currentPatchingComponent));
        }

        /**
         * @param customActionTimeoutInMins Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutInMins(@Nullable Output<Integer> customActionTimeoutInMins) {
            $.customActionTimeoutInMins = customActionTimeoutInMins;
            return this;
        }

        /**
         * @param customActionTimeoutInMins Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
         * 
         * @return builder
         * 
         */
        public Builder customActionTimeoutInMins(Integer customActionTimeoutInMins) {
            return customActionTimeoutInMins(Output.of(customActionTimeoutInMins));
        }

        /**
         * @param databaseSoftwareImageId The Autonomous Database Software Image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder databaseSoftwareImageId(@Nullable Output<String> databaseSoftwareImageId) {
            $.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }

        /**
         * @param databaseSoftwareImageId The Autonomous Database Software Image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
         * 
         * @return builder
         * 
         */
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            return databaseSoftwareImageId(Output.of(databaseSoftwareImageId));
        }

        /**
         * @param description Description of the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The user-friendly name for the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-friendly name for the maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param estimatedComponentPatchingStartTime The estimated start time of the next infrastruture component patching operation.
         * 
         * @return builder
         * 
         */
        public Builder estimatedComponentPatchingStartTime(@Nullable Output<String> estimatedComponentPatchingStartTime) {
            $.estimatedComponentPatchingStartTime = estimatedComponentPatchingStartTime;
            return this;
        }

        /**
         * @param estimatedComponentPatchingStartTime The estimated start time of the next infrastruture component patching operation.
         * 
         * @return builder
         * 
         */
        public Builder estimatedComponentPatchingStartTime(String estimatedComponentPatchingStartTime) {
            return estimatedComponentPatchingStartTime(Output.of(estimatedComponentPatchingStartTime));
        }

        /**
         * @param estimatedPatchingTimes The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
         * 
         * @return builder
         * 
         */
        public Builder estimatedPatchingTimes(@Nullable Output<List<MaintenanceRunEstimatedPatchingTimeArgs>> estimatedPatchingTimes) {
            $.estimatedPatchingTimes = estimatedPatchingTimes;
            return this;
        }

        /**
         * @param estimatedPatchingTimes The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
         * 
         * @return builder
         * 
         */
        public Builder estimatedPatchingTimes(List<MaintenanceRunEstimatedPatchingTimeArgs> estimatedPatchingTimes) {
            return estimatedPatchingTimes(Output.of(estimatedPatchingTimes));
        }

        /**
         * @param estimatedPatchingTimes The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
         * 
         * @return builder
         * 
         */
        public Builder estimatedPatchingTimes(MaintenanceRunEstimatedPatchingTimeArgs... estimatedPatchingTimes) {
            return estimatedPatchingTimes(List.of(estimatedPatchingTimes));
        }

        /**
         * @param isCustomActionTimeoutEnabled If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(@Nullable Output<Boolean> isCustomActionTimeoutEnabled) {
            $.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            return this;
        }

        /**
         * @param isCustomActionTimeoutEnabled If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
         * 
         * @return builder
         * 
         */
        public Builder isCustomActionTimeoutEnabled(Boolean isCustomActionTimeoutEnabled) {
            return isCustomActionTimeoutEnabled(Output.of(isCustomActionTimeoutEnabled));
        }

        /**
         * @param isDstFileUpdateEnabled Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
         * 
         * @return builder
         * 
         */
        public Builder isDstFileUpdateEnabled(@Nullable Output<Boolean> isDstFileUpdateEnabled) {
            $.isDstFileUpdateEnabled = isDstFileUpdateEnabled;
            return this;
        }

        /**
         * @param isDstFileUpdateEnabled Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
         * 
         * @return builder
         * 
         */
        public Builder isDstFileUpdateEnabled(Boolean isDstFileUpdateEnabled) {
            return isDstFileUpdateEnabled(Output.of(isDstFileUpdateEnabled));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param maintenanceSubtype Maintenance sub-type.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceSubtype(@Nullable Output<String> maintenanceSubtype) {
            $.maintenanceSubtype = maintenanceSubtype;
            return this;
        }

        /**
         * @param maintenanceSubtype Maintenance sub-type.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceSubtype(String maintenanceSubtype) {
            return maintenanceSubtype(Output.of(maintenanceSubtype));
        }

        /**
         * @param maintenanceType Maintenance type.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceType(@Nullable Output<String> maintenanceType) {
            $.maintenanceType = maintenanceType;
            return this;
        }

        /**
         * @param maintenanceType Maintenance type.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceType(String maintenanceType) {
            return maintenanceType(Output.of(maintenanceType));
        }

        /**
         * @param patchFailureCount Contain the patch failure count.
         * 
         * @return builder
         * 
         */
        public Builder patchFailureCount(@Nullable Output<Integer> patchFailureCount) {
            $.patchFailureCount = patchFailureCount;
            return this;
        }

        /**
         * @param patchFailureCount Contain the patch failure count.
         * 
         * @return builder
         * 
         */
        public Builder patchFailureCount(Integer patchFailureCount) {
            return patchFailureCount(Output.of(patchFailureCount));
        }

        /**
         * @param patchId The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
         * 
         * @return builder
         * 
         */
        public Builder patchId(@Nullable Output<String> patchId) {
            $.patchId = patchId;
            return this;
        }

        /**
         * @param patchId The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
         * 
         * @return builder
         * 
         */
        public Builder patchId(String patchId) {
            return patchId(Output.of(patchId));
        }

        /**
         * @param patchType Patch type, either &#34;QUARTERLY&#34;, &#34;TIMEZONE&#34; or &#34;CUSTOM_DATABASE_SOFTWARE_IMAGE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder patchType(@Nullable Output<String> patchType) {
            $.patchType = patchType;
            return this;
        }

        /**
         * @param patchType Patch type, either &#34;QUARTERLY&#34;, &#34;TIMEZONE&#34; or &#34;CUSTOM_DATABASE_SOFTWARE_IMAGE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder patchType(String patchType) {
            return patchType(Output.of(patchType));
        }

        /**
         * @param patchingEndTime The time when the patching operation ended.
         * 
         * @return builder
         * 
         */
        public Builder patchingEndTime(@Nullable Output<String> patchingEndTime) {
            $.patchingEndTime = patchingEndTime;
            return this;
        }

        /**
         * @param patchingEndTime The time when the patching operation ended.
         * 
         * @return builder
         * 
         */
        public Builder patchingEndTime(String patchingEndTime) {
            return patchingEndTime(Output.of(patchingEndTime));
        }

        /**
         * @param patchingMode (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
         * 
         * *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(@Nullable Output<String> patchingMode) {
            $.patchingMode = patchingMode;
            return this;
        }

        /**
         * @param patchingMode (Updatable) Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
         * 
         * *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
         * 
         * @return builder
         * 
         */
        public Builder patchingMode(String patchingMode) {
            return patchingMode(Output.of(patchingMode));
        }

        /**
         * @param patchingStartTime The time when the patching operation started.
         * 
         * @return builder
         * 
         */
        public Builder patchingStartTime(@Nullable Output<String> patchingStartTime) {
            $.patchingStartTime = patchingStartTime;
            return this;
        }

        /**
         * @param patchingStartTime The time when the patching operation started.
         * 
         * @return builder
         * 
         */
        public Builder patchingStartTime(String patchingStartTime) {
            return patchingStartTime(Output.of(patchingStartTime));
        }

        /**
         * @param patchingStatus The status of the patching operation.
         * 
         * @return builder
         * 
         */
        public Builder patchingStatus(@Nullable Output<String> patchingStatus) {
            $.patchingStatus = patchingStatus;
            return this;
        }

        /**
         * @param patchingStatus The status of the patching operation.
         * 
         * @return builder
         * 
         */
        public Builder patchingStatus(String patchingStatus) {
            return patchingStatus(Output.of(patchingStatus));
        }

        /**
         * @param peerMaintenanceRunId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association&#39;s peer container database.
         * 
         * @return builder
         * 
         */
        public Builder peerMaintenanceRunId(@Nullable Output<String> peerMaintenanceRunId) {
            $.peerMaintenanceRunId = peerMaintenanceRunId;
            return this;
        }

        /**
         * @param peerMaintenanceRunId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association&#39;s peer container database.
         * 
         * @return builder
         * 
         */
        public Builder peerMaintenanceRunId(String peerMaintenanceRunId) {
            return peerMaintenanceRunId(Output.of(peerMaintenanceRunId));
        }

        /**
         * @param state The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetDbServerVersion The target software version for the database server patching operation.
         * 
         * @return builder
         * 
         */
        public Builder targetDbServerVersion(@Nullable Output<String> targetDbServerVersion) {
            $.targetDbServerVersion = targetDbServerVersion;
            return this;
        }

        /**
         * @param targetDbServerVersion The target software version for the database server patching operation.
         * 
         * @return builder
         * 
         */
        public Builder targetDbServerVersion(String targetDbServerVersion) {
            return targetDbServerVersion(Output.of(targetDbServerVersion));
        }

        /**
         * @param targetResourceId The ID of the target resource for which the maintenance run should be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(@Nullable Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId The ID of the target resource for which the maintenance run should be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        /**
         * @param targetResourceType The type of the target resource on which the maintenance run occurs.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(@Nullable Output<String> targetResourceType) {
            $.targetResourceType = targetResourceType;
            return this;
        }

        /**
         * @param targetResourceType The type of the target resource on which the maintenance run occurs.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(String targetResourceType) {
            return targetResourceType(Output.of(targetResourceType));
        }

        /**
         * @param targetStorageServerVersion The target Cell version that is to be patched to.
         * 
         * @return builder
         * 
         */
        public Builder targetStorageServerVersion(@Nullable Output<String> targetStorageServerVersion) {
            $.targetStorageServerVersion = targetStorageServerVersion;
            return this;
        }

        /**
         * @param targetStorageServerVersion The target Cell version that is to be patched to.
         * 
         * @return builder
         * 
         */
        public Builder targetStorageServerVersion(String targetStorageServerVersion) {
            return targetStorageServerVersion(Output.of(targetStorageServerVersion));
        }

        /**
         * @param timeEnded The date and time the maintenance run was completed.
         * 
         * @return builder
         * 
         */
        public Builder timeEnded(@Nullable Output<String> timeEnded) {
            $.timeEnded = timeEnded;
            return this;
        }

        /**
         * @param timeEnded The date and time the maintenance run was completed.
         * 
         * @return builder
         * 
         */
        public Builder timeEnded(String timeEnded) {
            return timeEnded(Output.of(timeEnded));
        }

        /**
         * @param timeScheduled (Updatable) The date and time that update should be scheduled.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder timeScheduled(@Nullable Output<String> timeScheduled) {
            $.timeScheduled = timeScheduled;
            return this;
        }

        /**
         * @param timeScheduled (Updatable) The date and time that update should be scheduled.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder timeScheduled(String timeScheduled) {
            return timeScheduled(Output.of(timeScheduled));
        }

        /**
         * @param timeStarted The date and time the maintenance run starts.
         * 
         * @return builder
         * 
         */
        public Builder timeStarted(@Nullable Output<String> timeStarted) {
            $.timeStarted = timeStarted;
            return this;
        }

        /**
         * @param timeStarted The date and time the maintenance run starts.
         * 
         * @return builder
         * 
         */
        public Builder timeStarted(String timeStarted) {
            return timeStarted(Output.of(timeStarted));
        }

        public MaintenanceRunState build() {
            return $;
        }
    }

}
