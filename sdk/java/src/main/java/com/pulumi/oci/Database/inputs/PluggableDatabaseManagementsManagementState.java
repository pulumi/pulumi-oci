// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.PluggableDatabaseManagementsManagementConnectionStringArgs;
import com.pulumi.oci.Database.inputs.PluggableDatabaseManagementsManagementCredentialDetailsArgs;
import com.pulumi.oci.Database.inputs.PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabaseManagementsManagementState extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabaseManagementsManagementState Empty = new PluggableDatabaseManagementsManagementState();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<List<PluggableDatabaseManagementsManagementConnectionStringArgs>> connectionStrings;

    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    public Optional<Output<List<PluggableDatabaseManagementsManagementConnectionStringArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    @Import(name="containerDatabaseId")
    private @Nullable Output<String> containerDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    public Optional<Output<String>> containerDatabaseId() {
        return Optional.ofNullable(this.containerDatabaseId);
    }

    /**
     * Data for the credential used to connect to the database.
     * 
     */
    @Import(name="credentialDetails")
    private @Nullable Output<PluggableDatabaseManagementsManagementCredentialDetailsArgs> credentialDetails;

    /**
     * @return Data for the credential used to connect to the database.
     * 
     */
    public Optional<Output<PluggableDatabaseManagementsManagementCredentialDetailsArgs>> credentialDetails() {
        return Optional.ofNullable(this.credentialDetails);
    }

    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="enablePluggabledatabasemanagement")
    private @Nullable Output<Boolean> enablePluggabledatabasemanagement;

    /**
     * @return (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Boolean>> enablePluggabledatabasemanagement() {
        return Optional.ofNullable(this.enablePluggabledatabasemanagement);
    }

    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    @Import(name="isRestricted")
    private @Nullable Output<Boolean> isRestricted;

    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    public Optional<Output<Boolean>> isRestricted() {
        return Optional.ofNullable(this.isRestricted);
    }

    /**
     * Detailed message for the lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    @Import(name="openMode")
    private @Nullable Output<String> openMode;

    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    public Optional<Output<String>> openMode() {
        return Optional.ofNullable(this.openMode);
    }

    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    @Import(name="pdbName")
    private @Nullable Output<String> pdbName;

    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    public Optional<Output<String>> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }

    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    @Import(name="pluggableDatabaseId")
    private @Nullable Output<String> pluggableDatabaseId;

    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Output<String>> pluggableDatabaseId() {
        return Optional.ofNullable(this.pluggableDatabaseId);
    }

    /**
     * The configuration of the Pluggable Database Management service.
     * 
     */
    @Import(name="pluggableDatabaseManagementConfigs")
    private @Nullable Output<List<PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArgs>> pluggableDatabaseManagementConfigs;

    /**
     * @return The configuration of the Pluggable Database Management service.
     * 
     */
    public Optional<Output<List<PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArgs>>> pluggableDatabaseManagementConfigs() {
        return Optional.ofNullable(this.pluggableDatabaseManagementConfigs);
    }

    /**
     * The port used to connect to the pluggable database.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port used to connect to the pluggable database.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
     * 
     */
    @Import(name="privateEndPointId")
    private @Nullable Output<String> privateEndPointId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
     * 
     */
    public Optional<Output<String>> privateEndPointId() {
        return Optional.ofNullable(this.privateEndPointId);
    }

    /**
     * Protocol used by the database connection.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol used by the database connection.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The role of the user that will be connecting to the pluggable database.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the user that will be connecting to the pluggable database.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The name of the Oracle Database service that will be used to connect to the database.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The name of the Oracle Database service that will be used to connect to the database.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    @Import(name="sslSecretId")
    private @Nullable Output<String> sslSecretId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Optional<Output<String>> sslSecretId() {
        return Optional.ofNullable(this.sslSecretId);
    }

    /**
     * The current state of the pluggable database.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the pluggable database.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the pluggable database was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    private PluggableDatabaseManagementsManagementState() {}

    private PluggableDatabaseManagementsManagementState(PluggableDatabaseManagementsManagementState $) {
        this.compartmentId = $.compartmentId;
        this.connectionStrings = $.connectionStrings;
        this.containerDatabaseId = $.containerDatabaseId;
        this.credentialDetails = $.credentialDetails;
        this.definedTags = $.definedTags;
        this.enablePluggabledatabasemanagement = $.enablePluggabledatabasemanagement;
        this.freeformTags = $.freeformTags;
        this.isRestricted = $.isRestricted;
        this.lifecycleDetails = $.lifecycleDetails;
        this.openMode = $.openMode;
        this.pdbName = $.pdbName;
        this.pluggableDatabaseId = $.pluggableDatabaseId;
        this.pluggableDatabaseManagementConfigs = $.pluggableDatabaseManagementConfigs;
        this.port = $.port;
        this.privateEndPointId = $.privateEndPointId;
        this.protocol = $.protocol;
        this.role = $.role;
        this.serviceName = $.serviceName;
        this.sslSecretId = $.sslSecretId;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabaseManagementsManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabaseManagementsManagementState $;

        public Builder() {
            $ = new PluggableDatabaseManagementsManagementState();
        }

        public Builder(PluggableDatabaseManagementsManagementState defaults) {
            $ = new PluggableDatabaseManagementsManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionStrings Connection strings to connect to an Oracle Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(@Nullable Output<List<PluggableDatabaseManagementsManagementConnectionStringArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        /**
         * @param connectionStrings Connection strings to connect to an Oracle Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(List<PluggableDatabaseManagementsManagementConnectionStringArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        /**
         * @param connectionStrings Connection strings to connect to an Oracle Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(PluggableDatabaseManagementsManagementConnectionStringArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(@Nullable Output<String> containerDatabaseId) {
            $.containerDatabaseId = containerDatabaseId;
            return this;
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(String containerDatabaseId) {
            return containerDatabaseId(Output.of(containerDatabaseId));
        }

        /**
         * @param credentialDetails Data for the credential used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder credentialDetails(@Nullable Output<PluggableDatabaseManagementsManagementCredentialDetailsArgs> credentialDetails) {
            $.credentialDetails = credentialDetails;
            return this;
        }

        /**
         * @param credentialDetails Data for the credential used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder credentialDetails(PluggableDatabaseManagementsManagementCredentialDetailsArgs credentialDetails) {
            return credentialDetails(Output.of(credentialDetails));
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param enablePluggabledatabasemanagement (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder enablePluggabledatabasemanagement(@Nullable Output<Boolean> enablePluggabledatabasemanagement) {
            $.enablePluggabledatabasemanagement = enablePluggabledatabasemanagement;
            return this;
        }

        /**
         * @param enablePluggabledatabasemanagement (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder enablePluggabledatabasemanagement(Boolean enablePluggabledatabasemanagement) {
            return enablePluggabledatabasemanagement(Output.of(enablePluggabledatabasemanagement));
        }

        /**
         * @param freeformTags Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isRestricted The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
         * 
         * @return builder
         * 
         */
        public Builder isRestricted(@Nullable Output<Boolean> isRestricted) {
            $.isRestricted = isRestricted;
            return this;
        }

        /**
         * @param isRestricted The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
         * 
         * @return builder
         * 
         */
        public Builder isRestricted(Boolean isRestricted) {
            return isRestricted(Output.of(isRestricted));
        }

        /**
         * @param lifecycleDetails Detailed message for the lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Detailed message for the lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param openMode The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
         * 
         * @return builder
         * 
         */
        public Builder openMode(@Nullable Output<String> openMode) {
            $.openMode = openMode;
            return this;
        }

        /**
         * @param openMode The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
         * 
         * @return builder
         * 
         */
        public Builder openMode(String openMode) {
            return openMode(Output.of(openMode));
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(@Nullable Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        /**
         * @param pluggableDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseId(@Nullable Output<String> pluggableDatabaseId) {
            $.pluggableDatabaseId = pluggableDatabaseId;
            return this;
        }

        /**
         * @param pluggableDatabaseId The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseId(String pluggableDatabaseId) {
            return pluggableDatabaseId(Output.of(pluggableDatabaseId));
        }

        /**
         * @param pluggableDatabaseManagementConfigs The configuration of the Pluggable Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseManagementConfigs(@Nullable Output<List<PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArgs>> pluggableDatabaseManagementConfigs) {
            $.pluggableDatabaseManagementConfigs = pluggableDatabaseManagementConfigs;
            return this;
        }

        /**
         * @param pluggableDatabaseManagementConfigs The configuration of the Pluggable Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseManagementConfigs(List<PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArgs> pluggableDatabaseManagementConfigs) {
            return pluggableDatabaseManagementConfigs(Output.of(pluggableDatabaseManagementConfigs));
        }

        /**
         * @param pluggableDatabaseManagementConfigs The configuration of the Pluggable Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseManagementConfigs(PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArgs... pluggableDatabaseManagementConfigs) {
            return pluggableDatabaseManagementConfigs(List.of(pluggableDatabaseManagementConfigs));
        }

        /**
         * @param port The port used to connect to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port used to connect to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateEndPointId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateEndPointId(@Nullable Output<String> privateEndPointId) {
            $.privateEndPointId = privateEndPointId;
            return this;
        }

        /**
         * @param privateEndPointId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateEndPointId(String privateEndPointId) {
            return privateEndPointId(Output.of(privateEndPointId));
        }

        /**
         * @param protocol Protocol used by the database connection.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol used by the database connection.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param role The role of the user that will be connecting to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the user that will be connecting to the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param serviceName The name of the Oracle Database service that will be used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the Oracle Database service that will be used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sslSecretId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(@Nullable Output<String> sslSecretId) {
            $.sslSecretId = sslSecretId;
            return this;
        }

        /**
         * @param sslSecretId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(String sslSecretId) {
            return sslSecretId(Output.of(sslSecretId));
        }

        /**
         * @param state The current state of the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the pluggable database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the pluggable database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        public PluggableDatabaseManagementsManagementState build() {
            return $;
        }
    }

}
