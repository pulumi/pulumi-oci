// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.inputs.PluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabasePdbCreationTypeDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabasePdbCreationTypeDetailsArgs Empty = new PluggableDatabasePdbCreationTypeDetailsArgs();

    /**
     * The Pluggable Database creation type.
     * 
     */
    @Import(name="creationType", required=true)
    private Output<String> creationType;

    /**
     * @return The Pluggable Database creation type.
     * 
     */
    public Output<String> creationType() {
        return this.creationType;
    }

    /**
     * The DB link user password.
     * 
     */
    @Import(name="dblinkUserPassword")
    private @Nullable Output<String> dblinkUserPassword;

    /**
     * @return The DB link user password.
     * 
     */
    public Optional<Output<String>> dblinkUserPassword() {
        return Optional.ofNullable(this.dblinkUserPassword);
    }

    /**
     * The name of the DB link user.
     * 
     */
    @Import(name="dblinkUsername")
    private @Nullable Output<String> dblinkUsername;

    /**
     * @return The name of the DB link user.
     * 
     */
    public Optional<Output<String>> dblinkUsername() {
        return Optional.ofNullable(this.dblinkUsername);
    }

    /**
     * True if Pluggable Database needs to be thin cloned and false if Pluggable Database needs to be thick cloned.
     * 
     */
    @Import(name="isThinClone")
    private @Nullable Output<Boolean> isThinClone;

    /**
     * @return True if Pluggable Database needs to be thin cloned and false if Pluggable Database needs to be thick cloned.
     * 
     */
    public Optional<Output<Boolean>> isThinClone() {
        return Optional.ofNullable(this.isThinClone);
    }

    /**
     * Parameters for creating Pluggable Database Refreshable Clone. **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    @Import(name="refreshableCloneDetails")
    private @Nullable Output<PluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetailsArgs> refreshableCloneDetails;

    /**
     * @return Parameters for creating Pluggable Database Refreshable Clone. **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
     * 
     */
    public Optional<Output<PluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetailsArgs>> refreshableCloneDetails() {
        return Optional.ofNullable(this.refreshableCloneDetails);
    }

    /**
     * The DB system administrator password of the source Container Database.
     * 
     */
    @Import(name="sourceContainerDatabaseAdminPassword")
    private @Nullable Output<String> sourceContainerDatabaseAdminPassword;

    /**
     * @return The DB system administrator password of the source Container Database.
     * 
     */
    public Optional<Output<String>> sourceContainerDatabaseAdminPassword() {
        return Optional.ofNullable(this.sourceContainerDatabaseAdminPassword);
    }

    /**
     * The OCID of the Source Pluggable Database.
     * 
     */
    @Import(name="sourcePluggableDatabaseId", required=true)
    private Output<String> sourcePluggableDatabaseId;

    /**
     * @return The OCID of the Source Pluggable Database.
     * 
     */
    public Output<String> sourcePluggableDatabaseId() {
        return this.sourcePluggableDatabaseId;
    }

    private PluggableDatabasePdbCreationTypeDetailsArgs() {}

    private PluggableDatabasePdbCreationTypeDetailsArgs(PluggableDatabasePdbCreationTypeDetailsArgs $) {
        this.creationType = $.creationType;
        this.dblinkUserPassword = $.dblinkUserPassword;
        this.dblinkUsername = $.dblinkUsername;
        this.isThinClone = $.isThinClone;
        this.refreshableCloneDetails = $.refreshableCloneDetails;
        this.sourceContainerDatabaseAdminPassword = $.sourceContainerDatabaseAdminPassword;
        this.sourcePluggableDatabaseId = $.sourcePluggableDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabasePdbCreationTypeDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabasePdbCreationTypeDetailsArgs $;

        public Builder() {
            $ = new PluggableDatabasePdbCreationTypeDetailsArgs();
        }

        public Builder(PluggableDatabasePdbCreationTypeDetailsArgs defaults) {
            $ = new PluggableDatabasePdbCreationTypeDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param creationType The Pluggable Database creation type.
         * 
         * @return builder
         * 
         */
        public Builder creationType(Output<String> creationType) {
            $.creationType = creationType;
            return this;
        }

        /**
         * @param creationType The Pluggable Database creation type.
         * 
         * @return builder
         * 
         */
        public Builder creationType(String creationType) {
            return creationType(Output.of(creationType));
        }

        /**
         * @param dblinkUserPassword The DB link user password.
         * 
         * @return builder
         * 
         */
        public Builder dblinkUserPassword(@Nullable Output<String> dblinkUserPassword) {
            $.dblinkUserPassword = dblinkUserPassword;
            return this;
        }

        /**
         * @param dblinkUserPassword The DB link user password.
         * 
         * @return builder
         * 
         */
        public Builder dblinkUserPassword(String dblinkUserPassword) {
            return dblinkUserPassword(Output.of(dblinkUserPassword));
        }

        /**
         * @param dblinkUsername The name of the DB link user.
         * 
         * @return builder
         * 
         */
        public Builder dblinkUsername(@Nullable Output<String> dblinkUsername) {
            $.dblinkUsername = dblinkUsername;
            return this;
        }

        /**
         * @param dblinkUsername The name of the DB link user.
         * 
         * @return builder
         * 
         */
        public Builder dblinkUsername(String dblinkUsername) {
            return dblinkUsername(Output.of(dblinkUsername));
        }

        /**
         * @param isThinClone True if Pluggable Database needs to be thin cloned and false if Pluggable Database needs to be thick cloned.
         * 
         * @return builder
         * 
         */
        public Builder isThinClone(@Nullable Output<Boolean> isThinClone) {
            $.isThinClone = isThinClone;
            return this;
        }

        /**
         * @param isThinClone True if Pluggable Database needs to be thin cloned and false if Pluggable Database needs to be thick cloned.
         * 
         * @return builder
         * 
         */
        public Builder isThinClone(Boolean isThinClone) {
            return isThinClone(Output.of(isThinClone));
        }

        /**
         * @param refreshableCloneDetails Parameters for creating Pluggable Database Refreshable Clone. **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
         * 
         * @return builder
         * 
         */
        public Builder refreshableCloneDetails(@Nullable Output<PluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetailsArgs> refreshableCloneDetails) {
            $.refreshableCloneDetails = refreshableCloneDetails;
            return this;
        }

        /**
         * @param refreshableCloneDetails Parameters for creating Pluggable Database Refreshable Clone. **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
         * 
         * @return builder
         * 
         */
        public Builder refreshableCloneDetails(PluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetailsArgs refreshableCloneDetails) {
            return refreshableCloneDetails(Output.of(refreshableCloneDetails));
        }

        /**
         * @param sourceContainerDatabaseAdminPassword The DB system administrator password of the source Container Database.
         * 
         * @return builder
         * 
         */
        public Builder sourceContainerDatabaseAdminPassword(@Nullable Output<String> sourceContainerDatabaseAdminPassword) {
            $.sourceContainerDatabaseAdminPassword = sourceContainerDatabaseAdminPassword;
            return this;
        }

        /**
         * @param sourceContainerDatabaseAdminPassword The DB system administrator password of the source Container Database.
         * 
         * @return builder
         * 
         */
        public Builder sourceContainerDatabaseAdminPassword(String sourceContainerDatabaseAdminPassword) {
            return sourceContainerDatabaseAdminPassword(Output.of(sourceContainerDatabaseAdminPassword));
        }

        /**
         * @param sourcePluggableDatabaseId The OCID of the Source Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder sourcePluggableDatabaseId(Output<String> sourcePluggableDatabaseId) {
            $.sourcePluggableDatabaseId = sourcePluggableDatabaseId;
            return this;
        }

        /**
         * @param sourcePluggableDatabaseId The OCID of the Source Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder sourcePluggableDatabaseId(String sourcePluggableDatabaseId) {
            return sourcePluggableDatabaseId(Output.of(sourcePluggableDatabaseId));
        }

        public PluggableDatabasePdbCreationTypeDetailsArgs build() {
            if ($.creationType == null) {
                throw new MissingRequiredPropertyException("PluggableDatabasePdbCreationTypeDetailsArgs", "creationType");
            }
            if ($.sourcePluggableDatabaseId == null) {
                throw new MissingRequiredPropertyException("PluggableDatabasePdbCreationTypeDetailsArgs", "sourcePluggableDatabaseId");
            }
            return $;
        }
    }

}
