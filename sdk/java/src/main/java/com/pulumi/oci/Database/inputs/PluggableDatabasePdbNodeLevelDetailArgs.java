// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabasePdbNodeLevelDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabasePdbNodeLevelDetailArgs Empty = new PluggableDatabasePdbNodeLevelDetailArgs();

    /**
     * The Node name of the Database Instance.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return The Node name of the Database Instance.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    @Import(name="openMode")
    private @Nullable Output<String> openMode;

    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    public Optional<Output<String>> openMode() {
        return Optional.ofNullable(this.openMode);
    }

    private PluggableDatabasePdbNodeLevelDetailArgs() {}

    private PluggableDatabasePdbNodeLevelDetailArgs(PluggableDatabasePdbNodeLevelDetailArgs $) {
        this.nodeName = $.nodeName;
        this.openMode = $.openMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabasePdbNodeLevelDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabasePdbNodeLevelDetailArgs $;

        public Builder() {
            $ = new PluggableDatabasePdbNodeLevelDetailArgs();
        }

        public Builder(PluggableDatabasePdbNodeLevelDetailArgs defaults) {
            $ = new PluggableDatabasePdbNodeLevelDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeName The Node name of the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The Node name of the Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param openMode The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
         * 
         * @return builder
         * 
         */
        public Builder openMode(@Nullable Output<String> openMode) {
            $.openMode = openMode;
            return this;
        }

        /**
         * @param openMode The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
         * 
         * @return builder
         * 
         */
        public Builder openMode(String openMode) {
            return openMode(Output.of(openMode));
        }

        public PluggableDatabasePdbNodeLevelDetailArgs build() {
            return $;
        }
    }

}
