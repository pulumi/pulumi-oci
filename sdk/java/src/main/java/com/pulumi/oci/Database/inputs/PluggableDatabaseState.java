// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Database.inputs.PluggableDatabaseConnectionStringArgs;
import com.pulumi.oci.Database.inputs.PluggableDatabasePdbCreationTypeDetailsArgs;
import com.pulumi.oci.Database.inputs.PluggableDatabasePdbNodeLevelDetailArgs;
import com.pulumi.oci.Database.inputs.PluggableDatabasePluggableDatabaseManagementConfigArgs;
import com.pulumi.oci.Database.inputs.PluggableDatabaseRefreshableCloneConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluggableDatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final PluggableDatabaseState Empty = new PluggableDatabaseState();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<List<PluggableDatabaseConnectionStringArgs>> connectionStrings;

    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    public Optional<Output<List<PluggableDatabaseConnectionStringArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * The DB system administrator password of the Container Database.
     * 
     */
    @Import(name="containerDatabaseAdminPassword")
    private @Nullable Output<String> containerDatabaseAdminPassword;

    /**
     * @return The DB system administrator password of the Container Database.
     * 
     */
    public Optional<Output<String>> containerDatabaseAdminPassword() {
        return Optional.ofNullable(this.containerDatabaseAdminPassword);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    @Import(name="containerDatabaseId")
    private @Nullable Output<String> containerDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     * 
     */
    public Optional<Output<String>> containerDatabaseId() {
        return Optional.ofNullable(this.containerDatabaseId);
    }

    /**
     * (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
     * 
     */
    @Import(name="convertToRegularTrigger")
    private @Nullable Output<Integer> convertToRegularTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
     * 
     */
    public Optional<Output<Integer>> convertToRegularTrigger() {
        return Optional.ofNullable(this.convertToRegularTrigger);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    @Import(name="isRestricted")
    private @Nullable Output<Boolean> isRestricted;

    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    public Optional<Output<Boolean>> isRestricted() {
        return Optional.ofNullable(this.isRestricted);
    }

    @Import(name="kmsKeyVersionId")
    private @Nullable Output<String> kmsKeyVersionId;

    public Optional<Output<String>> kmsKeyVersionId() {
        return Optional.ofNullable(this.kmsKeyVersionId);
    }

    /**
     * Detailed message for the lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    @Import(name="openMode")
    private @Nullable Output<String> openMode;

    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    public Optional<Output<String>> openMode() {
        return Optional.ofNullable(this.openMode);
    }

    /**
     * A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    @Import(name="pdbAdminPassword")
    private @Nullable Output<String> pdbAdminPassword;

    /**
     * @return A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<Output<String>> pdbAdminPassword() {
        return Optional.ofNullable(this.pdbAdminPassword);
    }

    /**
     * The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure. Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     * 
     */
    @Import(name="pdbCreationTypeDetails")
    private @Nullable Output<PluggableDatabasePdbCreationTypeDetailsArgs> pdbCreationTypeDetails;

    /**
     * @return The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure. Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     * 
     */
    public Optional<Output<PluggableDatabasePdbCreationTypeDetailsArgs>> pdbCreationTypeDetails() {
        return Optional.ofNullable(this.pdbCreationTypeDetails);
    }

    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    @Import(name="pdbName")
    private @Nullable Output<String> pdbName;

    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    public Optional<Output<String>> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }

    /**
     * Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
     * 
     */
    @Import(name="pdbNodeLevelDetails")
    private @Nullable Output<List<PluggableDatabasePdbNodeLevelDetailArgs>> pdbNodeLevelDetails;

    /**
     * @return Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
     * 
     */
    public Optional<Output<List<PluggableDatabasePdbNodeLevelDetailArgs>>> pdbNodeLevelDetails() {
        return Optional.ofNullable(this.pdbNodeLevelDetails);
    }

    /**
     * The configuration of the Pluggable Database Management service.
     * 
     */
    @Import(name="pluggableDatabaseManagementConfigs")
    private @Nullable Output<List<PluggableDatabasePluggableDatabaseManagementConfigArgs>> pluggableDatabaseManagementConfigs;

    /**
     * @return The configuration of the Pluggable Database Management service.
     * 
     */
    public Optional<Output<List<PluggableDatabasePluggableDatabaseManagementConfigArgs>>> pluggableDatabaseManagementConfigs() {
        return Optional.ofNullable(this.pluggableDatabaseManagementConfigs);
    }

    /**
     * (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
     * 
     */
    @Import(name="refreshTrigger")
    private @Nullable Output<Integer> refreshTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
     * 
     */
    public Optional<Output<Integer>> refreshTrigger() {
        return Optional.ofNullable(this.refreshTrigger);
    }

    /**
     * Pluggable Database Refreshable Clone Configuration.
     * 
     */
    @Import(name="refreshableCloneConfigs")
    private @Nullable Output<List<PluggableDatabaseRefreshableCloneConfigArgs>> refreshableCloneConfigs;

    /**
     * @return Pluggable Database Refreshable Clone Configuration.
     * 
     */
    public Optional<Output<List<PluggableDatabaseRefreshableCloneConfigArgs>>> refreshableCloneConfigs() {
        return Optional.ofNullable(this.refreshableCloneConfigs);
    }

    /**
     * (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="rotateKeyTrigger")
    private @Nullable Output<Integer> rotateKeyTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> rotateKeyTrigger() {
        return Optional.ofNullable(this.rotateKeyTrigger);
    }

    /**
     * Indicates whether to take Pluggable Database Backup after the operation.
     * 
     */
    @Import(name="shouldCreatePdbBackup")
    private @Nullable Output<Boolean> shouldCreatePdbBackup;

    /**
     * @return Indicates whether to take Pluggable Database Backup after the operation.
     * 
     */
    public Optional<Output<Boolean>> shouldCreatePdbBackup() {
        return Optional.ofNullable(this.shouldCreatePdbBackup);
    }

    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    @Import(name="shouldPdbAdminAccountBeLocked")
    private @Nullable Output<Boolean> shouldPdbAdminAccountBeLocked;

    /**
     * @return The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     * 
     */
    public Optional<Output<Boolean>> shouldPdbAdminAccountBeLocked() {
        return Optional.ofNullable(this.shouldPdbAdminAccountBeLocked);
    }

    /**
     * The current state of the pluggable database.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the pluggable database.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The existing TDE wallet password of the CDB.
     * 
     */
    @Import(name="tdeWalletPassword")
    private @Nullable Output<String> tdeWalletPassword;

    /**
     * @return The existing TDE wallet password of the CDB.
     * 
     */
    public Optional<Output<String>> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }

    /**
     * The date and time the pluggable database was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    private PluggableDatabaseState() {}

    private PluggableDatabaseState(PluggableDatabaseState $) {
        this.compartmentId = $.compartmentId;
        this.connectionStrings = $.connectionStrings;
        this.containerDatabaseAdminPassword = $.containerDatabaseAdminPassword;
        this.containerDatabaseId = $.containerDatabaseId;
        this.convertToRegularTrigger = $.convertToRegularTrigger;
        this.definedTags = $.definedTags;
        this.freeformTags = $.freeformTags;
        this.isRestricted = $.isRestricted;
        this.kmsKeyVersionId = $.kmsKeyVersionId;
        this.lifecycleDetails = $.lifecycleDetails;
        this.openMode = $.openMode;
        this.pdbAdminPassword = $.pdbAdminPassword;
        this.pdbCreationTypeDetails = $.pdbCreationTypeDetails;
        this.pdbName = $.pdbName;
        this.pdbNodeLevelDetails = $.pdbNodeLevelDetails;
        this.pluggableDatabaseManagementConfigs = $.pluggableDatabaseManagementConfigs;
        this.refreshTrigger = $.refreshTrigger;
        this.refreshableCloneConfigs = $.refreshableCloneConfigs;
        this.rotateKeyTrigger = $.rotateKeyTrigger;
        this.shouldCreatePdbBackup = $.shouldCreatePdbBackup;
        this.shouldPdbAdminAccountBeLocked = $.shouldPdbAdminAccountBeLocked;
        this.state = $.state;
        this.systemTags = $.systemTags;
        this.tdeWalletPassword = $.tdeWalletPassword;
        this.timeCreated = $.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluggableDatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluggableDatabaseState $;

        public Builder() {
            $ = new PluggableDatabaseState();
        }

        public Builder(PluggableDatabaseState defaults) {
            $ = new PluggableDatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionStrings Connection strings to connect to an Oracle Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(@Nullable Output<List<PluggableDatabaseConnectionStringArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        /**
         * @param connectionStrings Connection strings to connect to an Oracle Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(List<PluggableDatabaseConnectionStringArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        /**
         * @param connectionStrings Connection strings to connect to an Oracle Pluggable Database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(PluggableDatabaseConnectionStringArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        /**
         * @param containerDatabaseAdminPassword The DB system administrator password of the Container Database.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseAdminPassword(@Nullable Output<String> containerDatabaseAdminPassword) {
            $.containerDatabaseAdminPassword = containerDatabaseAdminPassword;
            return this;
        }

        /**
         * @param containerDatabaseAdminPassword The DB system administrator password of the Container Database.
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseAdminPassword(String containerDatabaseAdminPassword) {
            return containerDatabaseAdminPassword(Output.of(containerDatabaseAdminPassword));
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(@Nullable Output<String> containerDatabaseId) {
            $.containerDatabaseId = containerDatabaseId;
            return this;
        }

        /**
         * @param containerDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(String containerDatabaseId) {
            return containerDatabaseId(Output.of(containerDatabaseId));
        }

        /**
         * @param convertToRegularTrigger (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder convertToRegularTrigger(@Nullable Output<Integer> convertToRegularTrigger) {
            $.convertToRegularTrigger = convertToRegularTrigger;
            return this;
        }

        /**
         * @param convertToRegularTrigger (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder convertToRegularTrigger(Integer convertToRegularTrigger) {
            return convertToRegularTrigger(Output.of(convertToRegularTrigger));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param isRestricted The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
         * 
         * @return builder
         * 
         */
        public Builder isRestricted(@Nullable Output<Boolean> isRestricted) {
            $.isRestricted = isRestricted;
            return this;
        }

        /**
         * @param isRestricted The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
         * 
         * @return builder
         * 
         */
        public Builder isRestricted(Boolean isRestricted) {
            return isRestricted(Output.of(isRestricted));
        }

        public Builder kmsKeyVersionId(@Nullable Output<String> kmsKeyVersionId) {
            $.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }

        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            return kmsKeyVersionId(Output.of(kmsKeyVersionId));
        }

        /**
         * @param lifecycleDetails Detailed message for the lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Detailed message for the lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param openMode The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
         * 
         * @return builder
         * 
         */
        public Builder openMode(@Nullable Output<String> openMode) {
            $.openMode = openMode;
            return this;
        }

        /**
         * @param openMode The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
         * 
         * @return builder
         * 
         */
        public Builder openMode(String openMode) {
            return openMode(Output.of(openMode));
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(@Nullable Output<String> pdbAdminPassword) {
            $.pdbAdminPassword = pdbAdminPassword;
            return this;
        }

        /**
         * @param pdbAdminPassword A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
         * 
         * @return builder
         * 
         */
        public Builder pdbAdminPassword(String pdbAdminPassword) {
            return pdbAdminPassword(Output.of(pdbAdminPassword));
        }

        /**
         * @param pdbCreationTypeDetails The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure. Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
         * 
         * @return builder
         * 
         */
        public Builder pdbCreationTypeDetails(@Nullable Output<PluggableDatabasePdbCreationTypeDetailsArgs> pdbCreationTypeDetails) {
            $.pdbCreationTypeDetails = pdbCreationTypeDetails;
            return this;
        }

        /**
         * @param pdbCreationTypeDetails The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud{@literal @}Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud{@literal @}Customer VM Cluster on Exadata Cloud{@literal @}Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure. Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
         * 
         * @return builder
         * 
         */
        public Builder pdbCreationTypeDetails(PluggableDatabasePdbCreationTypeDetailsArgs pdbCreationTypeDetails) {
            return pdbCreationTypeDetails(Output.of(pdbCreationTypeDetails));
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(@Nullable Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        /**
         * @param pdbName The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
         * 
         * @return builder
         * 
         */
        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        /**
         * @param pdbNodeLevelDetails Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
         * 
         * @return builder
         * 
         */
        public Builder pdbNodeLevelDetails(@Nullable Output<List<PluggableDatabasePdbNodeLevelDetailArgs>> pdbNodeLevelDetails) {
            $.pdbNodeLevelDetails = pdbNodeLevelDetails;
            return this;
        }

        /**
         * @param pdbNodeLevelDetails Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
         * 
         * @return builder
         * 
         */
        public Builder pdbNodeLevelDetails(List<PluggableDatabasePdbNodeLevelDetailArgs> pdbNodeLevelDetails) {
            return pdbNodeLevelDetails(Output.of(pdbNodeLevelDetails));
        }

        /**
         * @param pdbNodeLevelDetails Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
         * 
         * @return builder
         * 
         */
        public Builder pdbNodeLevelDetails(PluggableDatabasePdbNodeLevelDetailArgs... pdbNodeLevelDetails) {
            return pdbNodeLevelDetails(List.of(pdbNodeLevelDetails));
        }

        /**
         * @param pluggableDatabaseManagementConfigs The configuration of the Pluggable Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseManagementConfigs(@Nullable Output<List<PluggableDatabasePluggableDatabaseManagementConfigArgs>> pluggableDatabaseManagementConfigs) {
            $.pluggableDatabaseManagementConfigs = pluggableDatabaseManagementConfigs;
            return this;
        }

        /**
         * @param pluggableDatabaseManagementConfigs The configuration of the Pluggable Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseManagementConfigs(List<PluggableDatabasePluggableDatabaseManagementConfigArgs> pluggableDatabaseManagementConfigs) {
            return pluggableDatabaseManagementConfigs(Output.of(pluggableDatabaseManagementConfigs));
        }

        /**
         * @param pluggableDatabaseManagementConfigs The configuration of the Pluggable Database Management service.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabaseManagementConfigs(PluggableDatabasePluggableDatabaseManagementConfigArgs... pluggableDatabaseManagementConfigs) {
            return pluggableDatabaseManagementConfigs(List.of(pluggableDatabaseManagementConfigs));
        }

        /**
         * @param refreshTrigger (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder refreshTrigger(@Nullable Output<Integer> refreshTrigger) {
            $.refreshTrigger = refreshTrigger;
            return this;
        }

        /**
         * @param refreshTrigger (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
         * 
         * @return builder
         * 
         */
        public Builder refreshTrigger(Integer refreshTrigger) {
            return refreshTrigger(Output.of(refreshTrigger));
        }

        /**
         * @param refreshableCloneConfigs Pluggable Database Refreshable Clone Configuration.
         * 
         * @return builder
         * 
         */
        public Builder refreshableCloneConfigs(@Nullable Output<List<PluggableDatabaseRefreshableCloneConfigArgs>> refreshableCloneConfigs) {
            $.refreshableCloneConfigs = refreshableCloneConfigs;
            return this;
        }

        /**
         * @param refreshableCloneConfigs Pluggable Database Refreshable Clone Configuration.
         * 
         * @return builder
         * 
         */
        public Builder refreshableCloneConfigs(List<PluggableDatabaseRefreshableCloneConfigArgs> refreshableCloneConfigs) {
            return refreshableCloneConfigs(Output.of(refreshableCloneConfigs));
        }

        /**
         * @param refreshableCloneConfigs Pluggable Database Refreshable Clone Configuration.
         * 
         * @return builder
         * 
         */
        public Builder refreshableCloneConfigs(PluggableDatabaseRefreshableCloneConfigArgs... refreshableCloneConfigs) {
            return refreshableCloneConfigs(List.of(refreshableCloneConfigs));
        }

        /**
         * @param rotateKeyTrigger (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder rotateKeyTrigger(@Nullable Output<Integer> rotateKeyTrigger) {
            $.rotateKeyTrigger = rotateKeyTrigger;
            return this;
        }

        /**
         * @param rotateKeyTrigger (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder rotateKeyTrigger(Integer rotateKeyTrigger) {
            return rotateKeyTrigger(Output.of(rotateKeyTrigger));
        }

        /**
         * @param shouldCreatePdbBackup Indicates whether to take Pluggable Database Backup after the operation.
         * 
         * @return builder
         * 
         */
        public Builder shouldCreatePdbBackup(@Nullable Output<Boolean> shouldCreatePdbBackup) {
            $.shouldCreatePdbBackup = shouldCreatePdbBackup;
            return this;
        }

        /**
         * @param shouldCreatePdbBackup Indicates whether to take Pluggable Database Backup after the operation.
         * 
         * @return builder
         * 
         */
        public Builder shouldCreatePdbBackup(Boolean shouldCreatePdbBackup) {
            return shouldCreatePdbBackup(Output.of(shouldCreatePdbBackup));
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(@Nullable Output<Boolean> shouldPdbAdminAccountBeLocked) {
            $.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            return this;
        }

        /**
         * @param shouldPdbAdminAccountBeLocked The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
         * 
         * @return builder
         * 
         */
        public Builder shouldPdbAdminAccountBeLocked(Boolean shouldPdbAdminAccountBeLocked) {
            return shouldPdbAdminAccountBeLocked(Output.of(shouldPdbAdminAccountBeLocked));
        }

        /**
         * @param state The current state of the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the pluggable database.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param tdeWalletPassword The existing TDE wallet password of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(@Nullable Output<String> tdeWalletPassword) {
            $.tdeWalletPassword = tdeWalletPassword;
            return this;
        }

        /**
         * @param tdeWalletPassword The existing TDE wallet password of the CDB.
         * 
         * @return builder
         * 
         */
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            return tdeWalletPassword(Output.of(tdeWalletPassword));
        }

        /**
         * @param timeCreated The date and time the pluggable database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the pluggable database was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        public PluggableDatabaseState build() {
            return $;
        }
    }

}
