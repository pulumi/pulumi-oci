// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.DatabaseDatabaseDbBackupConfig;
import com.pulumi.oci.Database.outputs.DatabaseDatabaseEncryptionKeyLocationDetails;
import com.pulumi.oci.Database.outputs.DatabaseDatabaseSourceEncryptionKeyLocationDetails;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseDatabase {
    /**
     * @return A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    private @Nullable String adminPassword;
    /**
     * @return The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String backupId;
    /**
     * @return The password to open the TDE wallet.
     * 
     */
    private @Nullable String backupTdePassword;
    /**
     * @return The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     * AL32UTF8, AR8ADOS710, AR8ADOS720, AR8APTEC715, AR8ARABICMACS, AR8ASMO8X, AR8ISO8859P6, AR8MSWIN1256, AR8MUSSAD768, AR8NAFITHA711, AR8NAFITHA721, AR8SAKHR706, AR8SAKHR707, AZ8ISO8859P9E, BG8MSWIN, BG8PC437S, BLT8CP921, BLT8ISO8859P13, BLT8MSWIN1257, BLT8PC775, BN8BSCII, CDN8PC863, CEL8ISO8859P14, CL8ISO8859P5, CL8ISOIR111, CL8KOI8R, CL8KOI8U, CL8MACCYRILLICS, CL8MSWIN1251, EE8ISO8859P2, EE8MACCES, EE8MACCROATIANS, EE8MSWIN1250, EE8PC852, EL8DEC, EL8ISO8859P7, EL8MACGREEKS, EL8MSWIN1253, EL8PC437S, EL8PC851, EL8PC869, ET8MSWIN923, HU8ABMOD, HU8CWI2, IN8ISCII, IS8PC861, IW8ISO8859P8, IW8MACHEBREWS, IW8MSWIN1255, IW8PC1507, JA16EUC, JA16EUCTILDE, JA16SJIS, JA16SJISTILDE, JA16VMS, KO16KSC5601, KO16KSCCS, KO16MSWIN949, LA8ISO6937, LA8PASSPORT, LT8MSWIN921, LT8PC772, LT8PC774, LV8PC1117, LV8PC8LR, LV8RST104090, N8PC865, NE8ISO8859P10, NEE8ISO8859P4, RU8BESTA, RU8PC855, RU8PC866, SE8ISO8859P3, TH8MACTHAIS, TH8TISASCII, TR8DEC, TR8MACTURKISHS, TR8MSWIN1254, TR8PC857, US7ASCII, US8PC437, UTF8, VN8MSWIN1258, VN8VN3, WE8DEC, WE8DG, WE8ISO8859P1, WE8ISO8859P15, WE8ISO8859P9, WE8MACROMAN8S, WE8MSWIN1252, WE8NCR4970, WE8NEXTSTEP, WE8PC850, WE8PC858, WE8PC860, WE8ROMAN8, ZHS16CGB231280, ZHS16GBK, ZHT16BIG5, ZHT16CCDC, ZHT16DBT, ZHT16HKSCS, ZHT16MSWIN950, ZHT32EUC, ZHT32SOPS, ZHT32TRIS
     * 
     */
    private @Nullable String characterSet;
    /**
     * @return The administrator password of the primary database in this Data Guard association.
     * 
     * **The password MUST be the same as the primary admin password.**
     * 
     */
    private @Nullable String databaseAdminPassword;
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private @Nullable String databaseSoftwareImageId;
    /**
     * @return (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    private @Nullable DatabaseDatabaseDbBackupConfig dbBackupConfig;
    /**
     * @return The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    private @Nullable String dbName;
    /**
     * @return Specifies the `DB_UNIQUE_NAME` of the peer database to be created.
     * 
     */
    private @Nullable String dbUniqueName;
    /**
     * @return **Deprecated.** The dbWorkload field has been deprecated for Exadata Database Service on Dedicated Infrastructure, Exadata Database Service on Cloud{@literal @}Customer, and Base Database Service. Support for this attribute will end in November 2023. You may choose to update your custom scripts to exclude the dbWorkload attribute. After November 2023 if you pass a value to the dbWorkload attribute, it will be ignored.
     * 
     * The database workload type.
     * 
     */
    private @Nullable String dbWorkload;
    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private @Nullable Map<String,String> definedTags;
    /**
     * @return Types of providers supported for managing database encryption keys
     * 
     */
    private @Nullable DatabaseDatabaseEncryptionKeyLocationDetails encryptionKeyLocationDetails;
    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,String> freeformTags;
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    private @Nullable Boolean isActiveDataGuardEnabled;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation. Autonomous Database Serverless does not use key versions, hence is not applicable for Autonomous Database Serverless instances.
     * 
     */
    private @Nullable String kmsKeyVersionId;
    /**
     * @return The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    private @Nullable String ncharacterSet;
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    private @Nullable String pdbName;
    /**
     * @return The list of pluggable databases that needs to be restored into new database.
     * 
     */
    private @Nullable List<String> pluggableDatabases;
    /**
     * @return The protection mode of this Data Guard. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    private @Nullable String protectionMode;
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    private @Nullable String sidPrefix;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the source database.
     * 
     */
    private @Nullable String sourceDatabaseId;
    /**
     * @return Types of providers supported for managing database encryption keys
     * 
     */
    private @Nullable DatabaseDatabaseSourceEncryptionKeyLocationDetails sourceEncryptionKeyLocationDetails;
    /**
     * @return The TDE wallet password of the source database specified by &#39;sourceDatabaseId&#39;.
     * 
     */
    private @Nullable String sourceTdeWalletPassword;
    /**
     * @return The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    private @Nullable String tdeWalletPassword;
    /**
     * @return The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     * For more information, see [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400) in the Oracle Data Guard documentation.
     * 
     * **IMPORTANT** - The only transport type currently supported by the Database service is ASYNC.
     * 
     */
    private @Nullable String transportType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `secretId` are required for Customer Managed Keys.
     * 
     */
    private @Nullable String vaultId;

    private DatabaseDatabase() {}
    /**
     * @return A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    /**
     * @return The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> backupId() {
        return Optional.ofNullable(this.backupId);
    }
    /**
     * @return The password to open the TDE wallet.
     * 
     */
    public Optional<String> backupTdePassword() {
        return Optional.ofNullable(this.backupTdePassword);
    }
    /**
     * @return The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     * AL32UTF8, AR8ADOS710, AR8ADOS720, AR8APTEC715, AR8ARABICMACS, AR8ASMO8X, AR8ISO8859P6, AR8MSWIN1256, AR8MUSSAD768, AR8NAFITHA711, AR8NAFITHA721, AR8SAKHR706, AR8SAKHR707, AZ8ISO8859P9E, BG8MSWIN, BG8PC437S, BLT8CP921, BLT8ISO8859P13, BLT8MSWIN1257, BLT8PC775, BN8BSCII, CDN8PC863, CEL8ISO8859P14, CL8ISO8859P5, CL8ISOIR111, CL8KOI8R, CL8KOI8U, CL8MACCYRILLICS, CL8MSWIN1251, EE8ISO8859P2, EE8MACCES, EE8MACCROATIANS, EE8MSWIN1250, EE8PC852, EL8DEC, EL8ISO8859P7, EL8MACGREEKS, EL8MSWIN1253, EL8PC437S, EL8PC851, EL8PC869, ET8MSWIN923, HU8ABMOD, HU8CWI2, IN8ISCII, IS8PC861, IW8ISO8859P8, IW8MACHEBREWS, IW8MSWIN1255, IW8PC1507, JA16EUC, JA16EUCTILDE, JA16SJIS, JA16SJISTILDE, JA16VMS, KO16KSC5601, KO16KSCCS, KO16MSWIN949, LA8ISO6937, LA8PASSPORT, LT8MSWIN921, LT8PC772, LT8PC774, LV8PC1117, LV8PC8LR, LV8RST104090, N8PC865, NE8ISO8859P10, NEE8ISO8859P4, RU8BESTA, RU8PC855, RU8PC866, SE8ISO8859P3, TH8MACTHAIS, TH8TISASCII, TR8DEC, TR8MACTURKISHS, TR8MSWIN1254, TR8PC857, US7ASCII, US8PC437, UTF8, VN8MSWIN1258, VN8VN3, WE8DEC, WE8DG, WE8ISO8859P1, WE8ISO8859P15, WE8ISO8859P9, WE8MACROMAN8S, WE8MSWIN1252, WE8NCR4970, WE8NEXTSTEP, WE8PC850, WE8PC858, WE8PC860, WE8ROMAN8, ZHS16CGB231280, ZHS16GBK, ZHT16BIG5, ZHT16CCDC, ZHT16DBT, ZHT16HKSCS, ZHT16MSWIN950, ZHT32EUC, ZHT32SOPS, ZHT32TRIS
     * 
     */
    public Optional<String> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }
    /**
     * @return The administrator password of the primary database in this Data Guard association.
     * 
     * **The password MUST be the same as the primary admin password.**
     * 
     */
    public Optional<String> databaseAdminPassword() {
        return Optional.ofNullable(this.databaseAdminPassword);
    }
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public Optional<String> databaseSoftwareImageId() {
        return Optional.ofNullable(this.databaseSoftwareImageId);
    }
    /**
     * @return (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public Optional<DatabaseDatabaseDbBackupConfig> dbBackupConfig() {
        return Optional.ofNullable(this.dbBackupConfig);
    }
    /**
     * @return The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    /**
     * @return Specifies the `DB_UNIQUE_NAME` of the peer database to be created.
     * 
     */
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return **Deprecated.** The dbWorkload field has been deprecated for Exadata Database Service on Dedicated Infrastructure, Exadata Database Service on Cloud{@literal @}Customer, and Base Database Service. Support for this attribute will end in November 2023. You may choose to update your custom scripts to exclude the dbWorkload attribute. After November 2023 if you pass a value to the dbWorkload attribute, it will be ignored.
     * 
     * The database workload type.
     * 
     */
    public Optional<String> dbWorkload() {
        return Optional.ofNullable(this.dbWorkload);
    }
    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Types of providers supported for managing database encryption keys
     * 
     */
    public Optional<DatabaseDatabaseEncryptionKeyLocationDetails> encryptionKeyLocationDetails() {
        return Optional.ofNullable(this.encryptionKeyLocationDetails);
    }
    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    public Optional<Boolean> isActiveDataGuardEnabled() {
        return Optional.ofNullable(this.isActiveDataGuardEnabled);
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation. Autonomous Database Serverless does not use key versions, hence is not applicable for Autonomous Database Serverless instances.
     * 
     */
    public Optional<String> kmsKeyVersionId() {
        return Optional.ofNullable(this.kmsKeyVersionId);
    }
    /**
     * @return The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    public Optional<String> ncharacterSet() {
        return Optional.ofNullable(this.ncharacterSet);
    }
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public Optional<String> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }
    /**
     * @return The list of pluggable databases that needs to be restored into new database.
     * 
     */
    public List<String> pluggableDatabases() {
        return this.pluggableDatabases == null ? List.of() : this.pluggableDatabases;
    }
    /**
     * @return The protection mode of this Data Guard. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    public Optional<String> protectionMode() {
        return Optional.ofNullable(this.protectionMode);
    }
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    public Optional<String> sidPrefix() {
        return Optional.ofNullable(this.sidPrefix);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the source database.
     * 
     */
    public Optional<String> sourceDatabaseId() {
        return Optional.ofNullable(this.sourceDatabaseId);
    }
    /**
     * @return Types of providers supported for managing database encryption keys
     * 
     */
    public Optional<DatabaseDatabaseSourceEncryptionKeyLocationDetails> sourceEncryptionKeyLocationDetails() {
        return Optional.ofNullable(this.sourceEncryptionKeyLocationDetails);
    }
    /**
     * @return The TDE wallet password of the source database specified by &#39;sourceDatabaseId&#39;.
     * 
     */
    public Optional<String> sourceTdeWalletPassword() {
        return Optional.ofNullable(this.sourceTdeWalletPassword);
    }
    /**
     * @return The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<String> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }
    /**
     * @return The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     * For more information, see [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400) in the Oracle Data Guard documentation.
     * 
     * **IMPORTANT** - The only transport type currently supported by the Database service is ASYNC.
     * 
     */
    public Optional<String> transportType() {
        return Optional.ofNullable(this.transportType);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `secretId` are required for Customer Managed Keys.
     * 
     */
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String backupId;
        private @Nullable String backupTdePassword;
        private @Nullable String characterSet;
        private @Nullable String databaseAdminPassword;
        private @Nullable String databaseSoftwareImageId;
        private @Nullable DatabaseDatabaseDbBackupConfig dbBackupConfig;
        private @Nullable String dbName;
        private @Nullable String dbUniqueName;
        private @Nullable String dbWorkload;
        private @Nullable Map<String,String> definedTags;
        private @Nullable DatabaseDatabaseEncryptionKeyLocationDetails encryptionKeyLocationDetails;
        private @Nullable Map<String,String> freeformTags;
        private @Nullable Boolean isActiveDataGuardEnabled;
        private @Nullable String kmsKeyId;
        private @Nullable String kmsKeyVersionId;
        private @Nullable String ncharacterSet;
        private @Nullable String pdbName;
        private @Nullable List<String> pluggableDatabases;
        private @Nullable String protectionMode;
        private @Nullable String sidPrefix;
        private @Nullable String sourceDatabaseId;
        private @Nullable DatabaseDatabaseSourceEncryptionKeyLocationDetails sourceEncryptionKeyLocationDetails;
        private @Nullable String sourceTdeWalletPassword;
        private @Nullable String tdeWalletPassword;
        private @Nullable String transportType;
        private @Nullable String vaultId;
        public Builder() {}
        public Builder(DatabaseDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.backupId = defaults.backupId;
    	      this.backupTdePassword = defaults.backupTdePassword;
    	      this.characterSet = defaults.characterSet;
    	      this.databaseAdminPassword = defaults.databaseAdminPassword;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.dbBackupConfig = defaults.dbBackupConfig;
    	      this.dbName = defaults.dbName;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.encryptionKeyLocationDetails = defaults.encryptionKeyLocationDetails;
    	      this.freeformTags = defaults.freeformTags;
    	      this.isActiveDataGuardEnabled = defaults.isActiveDataGuardEnabled;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.pdbName = defaults.pdbName;
    	      this.pluggableDatabases = defaults.pluggableDatabases;
    	      this.protectionMode = defaults.protectionMode;
    	      this.sidPrefix = defaults.sidPrefix;
    	      this.sourceDatabaseId = defaults.sourceDatabaseId;
    	      this.sourceEncryptionKeyLocationDetails = defaults.sourceEncryptionKeyLocationDetails;
    	      this.sourceTdeWalletPassword = defaults.sourceTdeWalletPassword;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.transportType = defaults.transportType;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder adminPassword(@Nullable String adminPassword) {

            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder backupId(@Nullable String backupId) {

            this.backupId = backupId;
            return this;
        }
        @CustomType.Setter
        public Builder backupTdePassword(@Nullable String backupTdePassword) {

            this.backupTdePassword = backupTdePassword;
            return this;
        }
        @CustomType.Setter
        public Builder characterSet(@Nullable String characterSet) {

            this.characterSet = characterSet;
            return this;
        }
        @CustomType.Setter
        public Builder databaseAdminPassword(@Nullable String databaseAdminPassword) {

            this.databaseAdminPassword = databaseAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(@Nullable String databaseSoftwareImageId) {

            this.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }
        @CustomType.Setter
        public Builder dbBackupConfig(@Nullable DatabaseDatabaseDbBackupConfig dbBackupConfig) {

            this.dbBackupConfig = dbBackupConfig;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {

            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {

            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dbWorkload(@Nullable String dbWorkload) {

            this.dbWorkload = dbWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,String> definedTags) {

            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKeyLocationDetails(@Nullable DatabaseDatabaseEncryptionKeyLocationDetails encryptionKeyLocationDetails) {

            this.encryptionKeyLocationDetails = encryptionKeyLocationDetails;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,String> freeformTags) {

            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder isActiveDataGuardEnabled(@Nullable Boolean isActiveDataGuardEnabled) {

            this.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {

            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(@Nullable String kmsKeyVersionId) {

            this.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(@Nullable String ncharacterSet) {

            this.ncharacterSet = ncharacterSet;
            return this;
        }
        @CustomType.Setter
        public Builder pdbName(@Nullable String pdbName) {

            this.pdbName = pdbName;
            return this;
        }
        @CustomType.Setter
        public Builder pluggableDatabases(@Nullable List<String> pluggableDatabases) {

            this.pluggableDatabases = pluggableDatabases;
            return this;
        }
        public Builder pluggableDatabases(String... pluggableDatabases) {
            return pluggableDatabases(List.of(pluggableDatabases));
        }
        @CustomType.Setter
        public Builder protectionMode(@Nullable String protectionMode) {

            this.protectionMode = protectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder sidPrefix(@Nullable String sidPrefix) {

            this.sidPrefix = sidPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabaseId(@Nullable String sourceDatabaseId) {

            this.sourceDatabaseId = sourceDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceEncryptionKeyLocationDetails(@Nullable DatabaseDatabaseSourceEncryptionKeyLocationDetails sourceEncryptionKeyLocationDetails) {

            this.sourceEncryptionKeyLocationDetails = sourceEncryptionKeyLocationDetails;
            return this;
        }
        @CustomType.Setter
        public Builder sourceTdeWalletPassword(@Nullable String sourceTdeWalletPassword) {

            this.sourceTdeWalletPassword = sourceTdeWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder tdeWalletPassword(@Nullable String tdeWalletPassword) {

            this.tdeWalletPassword = tdeWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder transportType(@Nullable String transportType) {

            this.transportType = transportType;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {

            this.vaultId = vaultId;
            return this;
        }
        public DatabaseDatabase build() {
            final var _resultValue = new DatabaseDatabase();
            _resultValue.adminPassword = adminPassword;
            _resultValue.backupId = backupId;
            _resultValue.backupTdePassword = backupTdePassword;
            _resultValue.characterSet = characterSet;
            _resultValue.databaseAdminPassword = databaseAdminPassword;
            _resultValue.databaseSoftwareImageId = databaseSoftwareImageId;
            _resultValue.dbBackupConfig = dbBackupConfig;
            _resultValue.dbName = dbName;
            _resultValue.dbUniqueName = dbUniqueName;
            _resultValue.dbWorkload = dbWorkload;
            _resultValue.definedTags = definedTags;
            _resultValue.encryptionKeyLocationDetails = encryptionKeyLocationDetails;
            _resultValue.freeformTags = freeformTags;
            _resultValue.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.kmsKeyVersionId = kmsKeyVersionId;
            _resultValue.ncharacterSet = ncharacterSet;
            _resultValue.pdbName = pdbName;
            _resultValue.pluggableDatabases = pluggableDatabases;
            _resultValue.protectionMode = protectionMode;
            _resultValue.sidPrefix = sidPrefix;
            _resultValue.sourceDatabaseId = sourceDatabaseId;
            _resultValue.sourceEncryptionKeyLocationDetails = sourceEncryptionKeyLocationDetails;
            _resultValue.sourceTdeWalletPassword = sourceTdeWalletPassword;
            _resultValue.tdeWalletPassword = tdeWalletPassword;
            _resultValue.transportType = transportType;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
