// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseUpgradeDataGuardGroupMember {
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
     * 
     */
    private @Nullable String applyLag;
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
     * 
     */
    private @Nullable String applyRate;
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String databaseId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    private @Nullable Boolean isActiveDataGuardEnabled;
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    private @Nullable String role;
    /**
     * @return The rate at which redo logs are transported between the associated databases.  Example: `1 second`
     * 
     */
    private @Nullable String transportLag;
    /**
     * @return The date and time when last redo transport has been done.
     * 
     */
    private @Nullable String transportLagRefresh;
    /**
     * @return The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     */
    private @Nullable String transportType;

    private DatabaseUpgradeDataGuardGroupMember() {}
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
     * 
     */
    public Optional<String> applyLag() {
        return Optional.ofNullable(this.applyLag);
    }
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
     * 
     */
    public Optional<String> applyRate() {
        return Optional.ofNullable(this.applyRate);
    }
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    public Optional<Boolean> isActiveDataGuardEnabled() {
        return Optional.ofNullable(this.isActiveDataGuardEnabled);
    }
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    /**
     * @return The rate at which redo logs are transported between the associated databases.  Example: `1 second`
     * 
     */
    public Optional<String> transportLag() {
        return Optional.ofNullable(this.transportLag);
    }
    /**
     * @return The date and time when last redo transport has been done.
     * 
     */
    public Optional<String> transportLagRefresh() {
        return Optional.ofNullable(this.transportLagRefresh);
    }
    /**
     * @return The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     */
    public Optional<String> transportType() {
        return Optional.ofNullable(this.transportType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseUpgradeDataGuardGroupMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applyLag;
        private @Nullable String applyRate;
        private @Nullable String databaseId;
        private @Nullable String dbSystemId;
        private @Nullable Boolean isActiveDataGuardEnabled;
        private @Nullable String role;
        private @Nullable String transportLag;
        private @Nullable String transportLagRefresh;
        private @Nullable String transportType;
        public Builder() {}
        public Builder(DatabaseUpgradeDataGuardGroupMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyLag = defaults.applyLag;
    	      this.applyRate = defaults.applyRate;
    	      this.databaseId = defaults.databaseId;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.isActiveDataGuardEnabled = defaults.isActiveDataGuardEnabled;
    	      this.role = defaults.role;
    	      this.transportLag = defaults.transportLag;
    	      this.transportLagRefresh = defaults.transportLagRefresh;
    	      this.transportType = defaults.transportType;
        }

        @CustomType.Setter
        public Builder applyLag(@Nullable String applyLag) {

            this.applyLag = applyLag;
            return this;
        }
        @CustomType.Setter
        public Builder applyRate(@Nullable String applyRate) {

            this.applyRate = applyRate;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(@Nullable String databaseId) {

            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {

            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder isActiveDataGuardEnabled(@Nullable Boolean isActiveDataGuardEnabled) {

            this.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {

            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder transportLag(@Nullable String transportLag) {

            this.transportLag = transportLag;
            return this;
        }
        @CustomType.Setter
        public Builder transportLagRefresh(@Nullable String transportLagRefresh) {

            this.transportLagRefresh = transportLagRefresh;
            return this;
        }
        @CustomType.Setter
        public Builder transportType(@Nullable String transportType) {

            this.transportType = transportType;
            return this;
        }
        public DatabaseUpgradeDataGuardGroupMember build() {
            final var _resultValue = new DatabaseUpgradeDataGuardGroupMember();
            _resultValue.applyLag = applyLag;
            _resultValue.applyRate = applyRate;
            _resultValue.databaseId = databaseId;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            _resultValue.role = role;
            _resultValue.transportLag = transportLag;
            _resultValue.transportLagRefresh = transportLagRefresh;
            _resultValue.transportType = transportType;
            return _resultValue;
        }
    }
}
