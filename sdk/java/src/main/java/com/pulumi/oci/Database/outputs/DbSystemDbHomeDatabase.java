// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.DbSystemDbHomeDatabaseConnectionString;
import com.pulumi.oci.Database.outputs.DbSystemDbHomeDatabaseDbBackupConfig;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DbSystemDbHomeDatabase {
    /**
     * @return A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    private String adminPassword;
    /**
     * @return The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String backupId;
    /**
     * @return The password to open the TDE wallet.
     * 
     */
    private @Nullable String backupTdePassword;
    /**
     * @return The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     */
    private @Nullable String characterSet;
    private @Nullable List<DbSystemDbHomeDatabaseConnectionString> connectionStrings;
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String databaseId;
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to restore a database.
     * 
     */
    private @Nullable String databaseSoftwareImageId;
    /**
     * @return (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    private @Nullable DbSystemDbHomeDatabaseDbBackupConfig dbBackupConfig;
    /**
     * @return The database domain. In a distributed database system, DB_DOMAIN specifies the logical location of the database within the network structure.
     * 
     */
    private @Nullable String dbDomain;
    /**
     * @return The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    private @Nullable String dbName;
    private @Nullable String dbUniqueName;
    /**
     * @return The database workload type.
     * 
     */
    private @Nullable String dbWorkload;
    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    private @Nullable String id;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    private @Nullable String kmsKeyVersionId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    private @Nullable String ncharacterSet;
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    private @Nullable String pdbName;
    /**
     * @return The current state of the DB system.
     * 
     */
    private @Nullable String state;
    /**
     * @return The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    private @Nullable String tdeWalletPassword;
    /**
     * @return The date and time the DB system was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The point in time of the original database from which the new database is created. If not specifed, the latest backup is used to create the database.
     * 
     */
    private @Nullable String timeStampForPointInTimeRecovery;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private @Nullable String vaultId;

    private DbSystemDbHomeDatabase() {}
    /**
     * @return A strong password for SYS, SYSTEM, PDB Admin and TDE Wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public String adminPassword() {
        return this.adminPassword;
    }
    /**
     * @return The backup [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> backupId() {
        return Optional.ofNullable(this.backupId);
    }
    /**
     * @return The password to open the TDE wallet.
     * 
     */
    public Optional<String> backupTdePassword() {
        return Optional.ofNullable(this.backupTdePassword);
    }
    /**
     * @return The character set for the database.  The default is AL32UTF8. Allowed values are:
     * 
     */
    public Optional<String> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }
    public List<DbSystemDbHomeDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings == null ? List.of() : this.connectionStrings;
    }
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the image to be used to restore a database.
     * 
     */
    public Optional<String> databaseSoftwareImageId() {
        return Optional.ofNullable(this.databaseSoftwareImageId);
    }
    /**
     * @return (Updatable) Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public Optional<DbSystemDbHomeDatabaseDbBackupConfig> dbBackupConfig() {
        return Optional.ofNullable(this.dbBackupConfig);
    }
    /**
     * @return The database domain. In a distributed database system, DB_DOMAIN specifies the logical location of the database within the network structure.
     * 
     */
    public Optional<String> dbDomain() {
        return Optional.ofNullable(this.dbDomain);
    }
    /**
     * @return The display name of the database to be created from the backup. It must begin with an alphabetic character and can contain a maximum of eight alphanumeric characters. Special characters are not permitted.
     * 
     */
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return The database workload type.
     * 
     */
    public Optional<String> dbWorkload() {
        return Optional.ofNullable(this.dbWorkload);
    }
    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public Optional<String> kmsKeyVersionId() {
        return Optional.ofNullable(this.kmsKeyVersionId);
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The national character set for the database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
     * 
     */
    public Optional<String> ncharacterSet() {
        return Optional.ofNullable(this.ncharacterSet);
    }
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public Optional<String> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }
    /**
     * @return The current state of the DB system.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The optional password to open the TDE wallet. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numeric, and two special characters. The special characters must be _, \#, or -.
     * 
     */
    public Optional<String> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }
    /**
     * @return The date and time the DB system was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The point in time of the original database from which the new database is created. If not specifed, the latest backup is used to create the database.
     * 
     */
    public Optional<String> timeStampForPointInTimeRecovery() {
        return Optional.ofNullable(this.timeStampForPointInTimeRecovery);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DbSystemDbHomeDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminPassword;
        private @Nullable String backupId;
        private @Nullable String backupTdePassword;
        private @Nullable String characterSet;
        private @Nullable List<DbSystemDbHomeDatabaseConnectionString> connectionStrings;
        private @Nullable String databaseId;
        private @Nullable String databaseSoftwareImageId;
        private @Nullable DbSystemDbHomeDatabaseDbBackupConfig dbBackupConfig;
        private @Nullable String dbDomain;
        private @Nullable String dbName;
        private @Nullable String dbUniqueName;
        private @Nullable String dbWorkload;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String kmsKeyId;
        private @Nullable String kmsKeyVersionId;
        private @Nullable String lifecycleDetails;
        private @Nullable String ncharacterSet;
        private @Nullable String pdbName;
        private @Nullable String state;
        private @Nullable String tdeWalletPassword;
        private @Nullable String timeCreated;
        private @Nullable String timeStampForPointInTimeRecovery;
        private @Nullable String vaultId;
        public Builder() {}
        public Builder(DbSystemDbHomeDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.backupId = defaults.backupId;
    	      this.backupTdePassword = defaults.backupTdePassword;
    	      this.characterSet = defaults.characterSet;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.dbBackupConfig = defaults.dbBackupConfig;
    	      this.dbDomain = defaults.dbDomain;
    	      this.dbName = defaults.dbName;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.pdbName = defaults.pdbName;
    	      this.state = defaults.state;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStampForPointInTimeRecovery = defaults.timeStampForPointInTimeRecovery;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder adminPassword(String adminPassword) {
            this.adminPassword = Objects.requireNonNull(adminPassword);
            return this;
        }
        @CustomType.Setter
        public Builder backupId(@Nullable String backupId) {
            this.backupId = backupId;
            return this;
        }
        @CustomType.Setter
        public Builder backupTdePassword(@Nullable String backupTdePassword) {
            this.backupTdePassword = backupTdePassword;
            return this;
        }
        @CustomType.Setter
        public Builder characterSet(@Nullable String characterSet) {
            this.characterSet = characterSet;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(@Nullable List<DbSystemDbHomeDatabaseConnectionString> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(DbSystemDbHomeDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder databaseId(@Nullable String databaseId) {
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(@Nullable String databaseSoftwareImageId) {
            this.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }
        @CustomType.Setter
        public Builder dbBackupConfig(@Nullable DbSystemDbHomeDatabaseDbBackupConfig dbBackupConfig) {
            this.dbBackupConfig = dbBackupConfig;
            return this;
        }
        @CustomType.Setter
        public Builder dbDomain(@Nullable String dbDomain) {
            this.dbDomain = dbDomain;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dbWorkload(@Nullable String dbWorkload) {
            this.dbWorkload = dbWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(@Nullable String kmsKeyVersionId) {
            this.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(@Nullable String ncharacterSet) {
            this.ncharacterSet = ncharacterSet;
            return this;
        }
        @CustomType.Setter
        public Builder pdbName(@Nullable String pdbName) {
            this.pdbName = pdbName;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tdeWalletPassword(@Nullable String tdeWalletPassword) {
            this.tdeWalletPassword = tdeWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeStampForPointInTimeRecovery(@Nullable String timeStampForPointInTimeRecovery) {
            this.timeStampForPointInTimeRecovery = timeStampForPointInTimeRecovery;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {
            this.vaultId = vaultId;
            return this;
        }
        public DbSystemDbHomeDatabase build() {
            final var o = new DbSystemDbHomeDatabase();
            o.adminPassword = adminPassword;
            o.backupId = backupId;
            o.backupTdePassword = backupTdePassword;
            o.characterSet = characterSet;
            o.connectionStrings = connectionStrings;
            o.databaseId = databaseId;
            o.databaseSoftwareImageId = databaseSoftwareImageId;
            o.dbBackupConfig = dbBackupConfig;
            o.dbDomain = dbDomain;
            o.dbName = dbName;
            o.dbUniqueName = dbUniqueName;
            o.dbWorkload = dbWorkload;
            o.definedTags = definedTags;
            o.freeformTags = freeformTags;
            o.id = id;
            o.kmsKeyId = kmsKeyId;
            o.kmsKeyVersionId = kmsKeyVersionId;
            o.lifecycleDetails = lifecycleDetails;
            o.ncharacterSet = ncharacterSet;
            o.pdbName = pdbName;
            o.state = state;
            o.tdeWalletPassword = tdeWalletPassword;
            o.timeCreated = timeCreated;
            o.timeStampForPointInTimeRecovery = timeStampForPointInTimeRecovery;
            o.vaultId = vaultId;
            return o;
        }
    }
}
