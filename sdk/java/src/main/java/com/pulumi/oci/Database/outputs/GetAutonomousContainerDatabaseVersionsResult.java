// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersion;
import com.pulumi.oci.Database.outputs.GetAutonomousContainerDatabaseVersionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetAutonomousContainerDatabaseVersionsResult {
    /**
     * @return The list of autonomous_container_database_versions.
     * 
     */
    private List<GetAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersion> autonomousContainerDatabaseVersions;
    private String compartmentId;
    private @Nullable List<GetAutonomousContainerDatabaseVersionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String serviceComponent;

    private GetAutonomousContainerDatabaseVersionsResult() {}
    /**
     * @return The list of autonomous_container_database_versions.
     * 
     */
    public List<GetAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersion> autonomousContainerDatabaseVersions() {
        return this.autonomousContainerDatabaseVersions;
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetAutonomousContainerDatabaseVersionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String serviceComponent() {
        return this.serviceComponent;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousContainerDatabaseVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersion> autonomousContainerDatabaseVersions;
        private String compartmentId;
        private @Nullable List<GetAutonomousContainerDatabaseVersionsFilter> filters;
        private String id;
        private String serviceComponent;
        public Builder() {}
        public Builder(GetAutonomousContainerDatabaseVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousContainerDatabaseVersions = defaults.autonomousContainerDatabaseVersions;
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.serviceComponent = defaults.serviceComponent;
        }

        @CustomType.Setter
        public Builder autonomousContainerDatabaseVersions(List<GetAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersion> autonomousContainerDatabaseVersions) {
            if (autonomousContainerDatabaseVersions == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabaseVersionsResult", "autonomousContainerDatabaseVersions");
            }
            this.autonomousContainerDatabaseVersions = autonomousContainerDatabaseVersions;
            return this;
        }
        public Builder autonomousContainerDatabaseVersions(GetAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersion... autonomousContainerDatabaseVersions) {
            return autonomousContainerDatabaseVersions(List.of(autonomousContainerDatabaseVersions));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabaseVersionsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAutonomousContainerDatabaseVersionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAutonomousContainerDatabaseVersionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabaseVersionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder serviceComponent(String serviceComponent) {
            if (serviceComponent == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabaseVersionsResult", "serviceComponent");
            }
            this.serviceComponent = serviceComponent;
            return this;
        }
        public GetAutonomousContainerDatabaseVersionsResult build() {
            final var _resultValue = new GetAutonomousContainerDatabaseVersionsResult();
            _resultValue.autonomousContainerDatabaseVersions = autonomousContainerDatabaseVersions;
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.serviceComponent = serviceComponent;
            return _resultValue;
        }
    }
}
