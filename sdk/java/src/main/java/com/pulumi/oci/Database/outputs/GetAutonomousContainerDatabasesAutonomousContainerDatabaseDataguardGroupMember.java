// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember {
    /**
     * @return The lag time between updates to the primary Autonomous Container Database and application of the redo data on the standby Autonomous Container Database, as computed by the reporting database. Example: `9 seconds`
     * 
     */
    private String applyLag;
    /**
     * @return The rate at which redo logs are synchronized between the associated Autonomous Container Databases. Example: `180 Mb per second`
     * 
     */
    private String applyRate;
    /**
     * @return Automatically selected by backend when observer is enabled.
     * 
     */
    private String automaticFailoverTarget;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous Container Database that has a relationship with the peer Autonomous Container Database. Used only by Autonomous Database on Dedicated Exadata Infrastructure.
     * 
     */
    private String autonomousContainerDatabaseId;
    /**
     * @return A filter to return only resources that match the given availability domain exactly.
     * 
     */
    private String availabilityDomain;
    /**
     * @return The lag time for my preference based on data loss tolerance in seconds.
     * 
     */
    private Integer fastStartFailOverLagLimitInSeconds;
    /**
     * @return Indicates whether Automatic Failover is enabled for Autonomous Container Database Dataguard Association
     * 
     */
    private Boolean isAutomaticFailoverEnabled;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The protection mode of this Autonomous Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    private String protectionMode;
    /**
     * @return Automatically selected by backend based on the protection mode.
     * 
     */
    private String redoTransportMode;
    /**
     * @return The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
     * 
     */
    private String role;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    /**
     * @return The date and time the Autonomous Container Database was created.
     * 
     */
    private String timeCreated;
    /**
     * @return Timestamp when the lags were last calculated for a standby.
     * 
     */
    private String timeLagRefreshedOn;
    /**
     * @return The date and time when the last role change action happened.
     * 
     */
    private String timeLastRoleChanged;
    /**
     * @return The date and time of the last update to the apply lag, apply rate, and transport lag values.
     * 
     */
    private String timeLastSynced;
    /**
     * @return The approximate number of seconds of redo data not yet available on the standby Autonomous Container Database, as computed by the reporting database. Example: `7 seconds`
     * 
     */
    private String transportLag;

    private GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember() {}
    /**
     * @return The lag time between updates to the primary Autonomous Container Database and application of the redo data on the standby Autonomous Container Database, as computed by the reporting database. Example: `9 seconds`
     * 
     */
    public String applyLag() {
        return this.applyLag;
    }
    /**
     * @return The rate at which redo logs are synchronized between the associated Autonomous Container Databases. Example: `180 Mb per second`
     * 
     */
    public String applyRate() {
        return this.applyRate;
    }
    /**
     * @return Automatically selected by backend when observer is enabled.
     * 
     */
    public String automaticFailoverTarget() {
        return this.automaticFailoverTarget;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous Container Database that has a relationship with the peer Autonomous Container Database. Used only by Autonomous Database on Dedicated Exadata Infrastructure.
     * 
     */
    public String autonomousContainerDatabaseId() {
        return this.autonomousContainerDatabaseId;
    }
    /**
     * @return A filter to return only resources that match the given availability domain exactly.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The lag time for my preference based on data loss tolerance in seconds.
     * 
     */
    public Integer fastStartFailOverLagLimitInSeconds() {
        return this.fastStartFailOverLagLimitInSeconds;
    }
    /**
     * @return Indicates whether Automatic Failover is enabled for Autonomous Container Database Dataguard Association
     * 
     */
    public Boolean isAutomaticFailoverEnabled() {
        return this.isAutomaticFailoverEnabled;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The protection mode of this Autonomous Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    public String protectionMode() {
        return this.protectionMode;
    }
    /**
     * @return Automatically selected by backend based on the protection mode.
     * 
     */
    public String redoTransportMode() {
        return this.redoTransportMode;
    }
    /**
     * @return The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the Autonomous Container Database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Timestamp when the lags were last calculated for a standby.
     * 
     */
    public String timeLagRefreshedOn() {
        return this.timeLagRefreshedOn;
    }
    /**
     * @return The date and time when the last role change action happened.
     * 
     */
    public String timeLastRoleChanged() {
        return this.timeLastRoleChanged;
    }
    /**
     * @return The date and time of the last update to the apply lag, apply rate, and transport lag values.
     * 
     */
    public String timeLastSynced() {
        return this.timeLastSynced;
    }
    /**
     * @return The approximate number of seconds of redo data not yet available on the standby Autonomous Container Database, as computed by the reporting database. Example: `7 seconds`
     * 
     */
    public String transportLag() {
        return this.transportLag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applyLag;
        private String applyRate;
        private String automaticFailoverTarget;
        private String autonomousContainerDatabaseId;
        private String availabilityDomain;
        private Integer fastStartFailOverLagLimitInSeconds;
        private Boolean isAutomaticFailoverEnabled;
        private String lifecycleDetails;
        private String protectionMode;
        private String redoTransportMode;
        private String role;
        private String state;
        private String timeCreated;
        private String timeLagRefreshedOn;
        private String timeLastRoleChanged;
        private String timeLastSynced;
        private String transportLag;
        public Builder() {}
        public Builder(GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyLag = defaults.applyLag;
    	      this.applyRate = defaults.applyRate;
    	      this.automaticFailoverTarget = defaults.automaticFailoverTarget;
    	      this.autonomousContainerDatabaseId = defaults.autonomousContainerDatabaseId;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.fastStartFailOverLagLimitInSeconds = defaults.fastStartFailOverLagLimitInSeconds;
    	      this.isAutomaticFailoverEnabled = defaults.isAutomaticFailoverEnabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.protectionMode = defaults.protectionMode;
    	      this.redoTransportMode = defaults.redoTransportMode;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLagRefreshedOn = defaults.timeLagRefreshedOn;
    	      this.timeLastRoleChanged = defaults.timeLastRoleChanged;
    	      this.timeLastSynced = defaults.timeLastSynced;
    	      this.transportLag = defaults.transportLag;
        }

        @CustomType.Setter
        public Builder applyLag(String applyLag) {
            if (applyLag == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "applyLag");
            }
            this.applyLag = applyLag;
            return this;
        }
        @CustomType.Setter
        public Builder applyRate(String applyRate) {
            if (applyRate == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "applyRate");
            }
            this.applyRate = applyRate;
            return this;
        }
        @CustomType.Setter
        public Builder automaticFailoverTarget(String automaticFailoverTarget) {
            if (automaticFailoverTarget == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "automaticFailoverTarget");
            }
            this.automaticFailoverTarget = automaticFailoverTarget;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousContainerDatabaseId(String autonomousContainerDatabaseId) {
            if (autonomousContainerDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "autonomousContainerDatabaseId");
            }
            this.autonomousContainerDatabaseId = autonomousContainerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder fastStartFailOverLagLimitInSeconds(Integer fastStartFailOverLagLimitInSeconds) {
            if (fastStartFailOverLagLimitInSeconds == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "fastStartFailOverLagLimitInSeconds");
            }
            this.fastStartFailOverLagLimitInSeconds = fastStartFailOverLagLimitInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder isAutomaticFailoverEnabled(Boolean isAutomaticFailoverEnabled) {
            if (isAutomaticFailoverEnabled == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "isAutomaticFailoverEnabled");
            }
            this.isAutomaticFailoverEnabled = isAutomaticFailoverEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder protectionMode(String protectionMode) {
            if (protectionMode == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "protectionMode");
            }
            this.protectionMode = protectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder redoTransportMode(String redoTransportMode) {
            if (redoTransportMode == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "redoTransportMode");
            }
            this.redoTransportMode = redoTransportMode;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLagRefreshedOn(String timeLagRefreshedOn) {
            if (timeLagRefreshedOn == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "timeLagRefreshedOn");
            }
            this.timeLagRefreshedOn = timeLagRefreshedOn;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastRoleChanged(String timeLastRoleChanged) {
            if (timeLastRoleChanged == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "timeLastRoleChanged");
            }
            this.timeLastRoleChanged = timeLastRoleChanged;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastSynced(String timeLastSynced) {
            if (timeLastSynced == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "timeLastSynced");
            }
            this.timeLastSynced = timeLastSynced;
            return this;
        }
        @CustomType.Setter
        public Builder transportLag(String transportLag) {
            if (transportLag == null) {
              throw new MissingRequiredPropertyException("GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember", "transportLag");
            }
            this.transportLag = transportLag;
            return this;
        }
        public GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember build() {
            final var _resultValue = new GetAutonomousContainerDatabasesAutonomousContainerDatabaseDataguardGroupMember();
            _resultValue.applyLag = applyLag;
            _resultValue.applyRate = applyRate;
            _resultValue.automaticFailoverTarget = automaticFailoverTarget;
            _resultValue.autonomousContainerDatabaseId = autonomousContainerDatabaseId;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.fastStartFailOverLagLimitInSeconds = fastStartFailOverLagLimitInSeconds;
            _resultValue.isAutomaticFailoverEnabled = isAutomaticFailoverEnabled;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.protectionMode = protectionMode;
            _resultValue.redoTransportMode = redoTransportMode;
            _resultValue.role = role;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLagRefreshedOn = timeLagRefreshedOn;
            _resultValue.timeLastRoleChanged = timeLastRoleChanged;
            _resultValue.timeLastSynced = timeLastSynced;
            _resultValue.transportLag = transportLag;
            return _resultValue;
        }
    }
}
