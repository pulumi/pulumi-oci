// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation {
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `9 seconds`
     * 
     */
    private String applyLag;
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `180 Mb per second`
     * 
     */
    private String applyRate;
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String autonomousDatabaseId;
    /**
     * @return The OCID of the Autonomous Dataguard created for Autonomous Container Database where given Autonomous Database resides in.
     * 
     */
    private String id;
    /**
     * @return Indicates whether Automatic Failover is enabled for Autonomous Container Database Dataguard Association. Output DataType: boolean. Example : `is_automatic_failover_enabled = true`.
     * 
     */
    private Boolean isAutomaticFailoverEnabled;
    /**
     * @return Additional information about the current lifecycleState, if available.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer Autonomous Database.
     * 
     */
    private String peerAutonomousDatabaseId;
    /**
     * @return The current state of Autonomous Data Guard.
     * 
     */
    private String peerAutonomousDatabaseLifeCycleState;
    /**
     * @return The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
     * 
     */
    private String peerRole;
    /**
     * @return The protection mode of this Autonomous Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    private String protectionMode;
    /**
     * @return The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
     * 
     */
    private String role;
    /**
     * @return The current state of Autonomous Data Guard.
     * 
     */
    private String state;
    /**
     * @return The date and time the Data Guard association was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time when the last role change action happened.
     * 
     */
    private String timeLastRoleChanged;
    /**
     * @return The date and time of the last update to the apply lag, apply rate, and transport lag values.
     * 
     */
    private String timeLastSynced;
    /**
     * @return The approximate number of seconds of redo data not yet available on the standby Autonomous Container Database, as computed by the reporting database.  Example: `7 seconds`
     * 
     */
    private String transportLag;

    private GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation() {}
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `9 seconds`
     * 
     */
    public String applyLag() {
        return this.applyLag;
    }
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `180 Mb per second`
     * 
     */
    public String applyRate() {
        return this.applyRate;
    }
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }
    /**
     * @return The OCID of the Autonomous Dataguard created for Autonomous Container Database where given Autonomous Database resides in.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether Automatic Failover is enabled for Autonomous Container Database Dataguard Association. Output DataType: boolean. Example : `is_automatic_failover_enabled = true`.
     * 
     */
    public Boolean isAutomaticFailoverEnabled() {
        return this.isAutomaticFailoverEnabled;
    }
    /**
     * @return Additional information about the current lifecycleState, if available.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer Autonomous Database.
     * 
     */
    public String peerAutonomousDatabaseId() {
        return this.peerAutonomousDatabaseId;
    }
    /**
     * @return The current state of Autonomous Data Guard.
     * 
     */
    public String peerAutonomousDatabaseLifeCycleState() {
        return this.peerAutonomousDatabaseLifeCycleState;
    }
    /**
     * @return The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
     * 
     */
    public String peerRole() {
        return this.peerRole;
    }
    /**
     * @return The protection mode of this Autonomous Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    public String protectionMode() {
        return this.protectionMode;
    }
    /**
     * @return The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The current state of Autonomous Data Guard.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the Data Guard association was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time when the last role change action happened.
     * 
     */
    public String timeLastRoleChanged() {
        return this.timeLastRoleChanged;
    }
    /**
     * @return The date and time of the last update to the apply lag, apply rate, and transport lag values.
     * 
     */
    public String timeLastSynced() {
        return this.timeLastSynced;
    }
    /**
     * @return The approximate number of seconds of redo data not yet available on the standby Autonomous Container Database, as computed by the reporting database.  Example: `7 seconds`
     * 
     */
    public String transportLag() {
        return this.transportLag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applyLag;
        private String applyRate;
        private String autonomousDatabaseId;
        private String id;
        private Boolean isAutomaticFailoverEnabled;
        private String lifecycleDetails;
        private String peerAutonomousDatabaseId;
        private String peerAutonomousDatabaseLifeCycleState;
        private String peerRole;
        private String protectionMode;
        private String role;
        private String state;
        private String timeCreated;
        private String timeLastRoleChanged;
        private String timeLastSynced;
        private String transportLag;
        public Builder() {}
        public Builder(GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyLag = defaults.applyLag;
    	      this.applyRate = defaults.applyRate;
    	      this.autonomousDatabaseId = defaults.autonomousDatabaseId;
    	      this.id = defaults.id;
    	      this.isAutomaticFailoverEnabled = defaults.isAutomaticFailoverEnabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.peerAutonomousDatabaseId = defaults.peerAutonomousDatabaseId;
    	      this.peerAutonomousDatabaseLifeCycleState = defaults.peerAutonomousDatabaseLifeCycleState;
    	      this.peerRole = defaults.peerRole;
    	      this.protectionMode = defaults.protectionMode;
    	      this.role = defaults.role;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastRoleChanged = defaults.timeLastRoleChanged;
    	      this.timeLastSynced = defaults.timeLastSynced;
    	      this.transportLag = defaults.transportLag;
        }

        @CustomType.Setter
        public Builder applyLag(String applyLag) {
            if (applyLag == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "applyLag");
            }
            this.applyLag = applyLag;
            return this;
        }
        @CustomType.Setter
        public Builder applyRate(String applyRate) {
            if (applyRate == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "applyRate");
            }
            this.applyRate = applyRate;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            if (autonomousDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "autonomousDatabaseId");
            }
            this.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAutomaticFailoverEnabled(Boolean isAutomaticFailoverEnabled) {
            if (isAutomaticFailoverEnabled == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "isAutomaticFailoverEnabled");
            }
            this.isAutomaticFailoverEnabled = isAutomaticFailoverEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder peerAutonomousDatabaseId(String peerAutonomousDatabaseId) {
            if (peerAutonomousDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "peerAutonomousDatabaseId");
            }
            this.peerAutonomousDatabaseId = peerAutonomousDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder peerAutonomousDatabaseLifeCycleState(String peerAutonomousDatabaseLifeCycleState) {
            if (peerAutonomousDatabaseLifeCycleState == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "peerAutonomousDatabaseLifeCycleState");
            }
            this.peerAutonomousDatabaseLifeCycleState = peerAutonomousDatabaseLifeCycleState;
            return this;
        }
        @CustomType.Setter
        public Builder peerRole(String peerRole) {
            if (peerRole == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "peerRole");
            }
            this.peerRole = peerRole;
            return this;
        }
        @CustomType.Setter
        public Builder protectionMode(String protectionMode) {
            if (protectionMode == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "protectionMode");
            }
            this.protectionMode = protectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastRoleChanged(String timeLastRoleChanged) {
            if (timeLastRoleChanged == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "timeLastRoleChanged");
            }
            this.timeLastRoleChanged = timeLastRoleChanged;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastSynced(String timeLastSynced) {
            if (timeLastSynced == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "timeLastSynced");
            }
            this.timeLastSynced = timeLastSynced;
            return this;
        }
        @CustomType.Setter
        public Builder transportLag(String transportLag) {
            if (transportLag == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation", "transportLag");
            }
            this.transportLag = transportLag;
            return this;
        }
        public GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation build() {
            final var _resultValue = new GetAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation();
            _resultValue.applyLag = applyLag;
            _resultValue.applyRate = applyRate;
            _resultValue.autonomousDatabaseId = autonomousDatabaseId;
            _resultValue.id = id;
            _resultValue.isAutomaticFailoverEnabled = isAutomaticFailoverEnabled;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.peerAutonomousDatabaseId = peerAutonomousDatabaseId;
            _resultValue.peerAutonomousDatabaseLifeCycleState = peerAutonomousDatabaseLifeCycleState;
            _resultValue.peerRole = peerRole;
            _resultValue.protectionMode = protectionMode;
            _resultValue.role = role;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastRoleChanged = timeLastRoleChanged;
            _resultValue.timeLastSynced = timeLastSynced;
            _resultValue.transportLag = transportLag;
            return _resultValue;
        }
    }
}
