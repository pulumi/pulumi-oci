// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration {
    /**
     * @return Indicates the disaster recovery (DR) type of the Shared Autonomous Database. Autonomous Data Guard (ADG) DR type provides business critical DR with a faster recovery time objective (RTO) during failover or switchover. Backup-based DR type provides lower cost DR with a slower RTO during failover or switchover.
     * 
     */
    private String disasterRecoveryType;
    /**
     * @return If true, 7 days worth of backups are replicated across regions for Cross-Region ADB or Backup-Based DR between Primary and Standby. If false, the backups taken on the Primary are not replicated to the Standby database.
     * 
     */
    private Boolean isReplicateAutomaticBackups;
    private Boolean isSnapshotStandby;
    private String timeSnapshotStandbyEnabledTill;

    private GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration() {}
    /**
     * @return Indicates the disaster recovery (DR) type of the Shared Autonomous Database. Autonomous Data Guard (ADG) DR type provides business critical DR with a faster recovery time objective (RTO) during failover or switchover. Backup-based DR type provides lower cost DR with a slower RTO during failover or switchover.
     * 
     */
    public String disasterRecoveryType() {
        return this.disasterRecoveryType;
    }
    /**
     * @return If true, 7 days worth of backups are replicated across regions for Cross-Region ADB or Backup-Based DR between Primary and Standby. If false, the backups taken on the Primary are not replicated to the Standby database.
     * 
     */
    public Boolean isReplicateAutomaticBackups() {
        return this.isReplicateAutomaticBackups;
    }
    public Boolean isSnapshotStandby() {
        return this.isSnapshotStandby;
    }
    public String timeSnapshotStandbyEnabledTill() {
        return this.timeSnapshotStandbyEnabledTill;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String disasterRecoveryType;
        private Boolean isReplicateAutomaticBackups;
        private Boolean isSnapshotStandby;
        private String timeSnapshotStandbyEnabledTill;
        public Builder() {}
        public Builder(GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disasterRecoveryType = defaults.disasterRecoveryType;
    	      this.isReplicateAutomaticBackups = defaults.isReplicateAutomaticBackups;
    	      this.isSnapshotStandby = defaults.isSnapshotStandby;
    	      this.timeSnapshotStandbyEnabledTill = defaults.timeSnapshotStandbyEnabledTill;
        }

        @CustomType.Setter
        public Builder disasterRecoveryType(String disasterRecoveryType) {
            if (disasterRecoveryType == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration", "disasterRecoveryType");
            }
            this.disasterRecoveryType = disasterRecoveryType;
            return this;
        }
        @CustomType.Setter
        public Builder isReplicateAutomaticBackups(Boolean isReplicateAutomaticBackups) {
            if (isReplicateAutomaticBackups == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration", "isReplicateAutomaticBackups");
            }
            this.isReplicateAutomaticBackups = isReplicateAutomaticBackups;
            return this;
        }
        @CustomType.Setter
        public Builder isSnapshotStandby(Boolean isSnapshotStandby) {
            if (isSnapshotStandby == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration", "isSnapshotStandby");
            }
            this.isSnapshotStandby = isSnapshotStandby;
            return this;
        }
        @CustomType.Setter
        public Builder timeSnapshotStandbyEnabledTill(String timeSnapshotStandbyEnabledTill) {
            if (timeSnapshotStandbyEnabledTill == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration", "timeSnapshotStandbyEnabledTill");
            }
            this.timeSnapshotStandbyEnabledTill = timeSnapshotStandbyEnabledTill;
            return this;
        }
        public GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration build() {
            final var _resultValue = new GetAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration();
            _resultValue.disasterRecoveryType = disasterRecoveryType;
            _resultValue.isReplicateAutomaticBackups = isReplicateAutomaticBackups;
            _resultValue.isSnapshotStandby = isSnapshotStandby;
            _resultValue.timeSnapshotStandbyEnabledTill = timeSnapshotStandbyEnabledTill;
            return _resultValue;
        }
    }
}
