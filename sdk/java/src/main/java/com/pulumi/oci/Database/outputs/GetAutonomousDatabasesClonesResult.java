// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetAutonomousDatabasesClonesAutonomousDatabase;
import com.pulumi.oci.Database.outputs.GetAutonomousDatabasesClonesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAutonomousDatabasesClonesResult {
    private String autonomousDatabaseId;
    /**
     * @return The list of autonomous_databases.
     * 
     */
    private List<GetAutonomousDatabasesClonesAutonomousDatabase> autonomousDatabases;
    private @Nullable String cloneType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The user-friendly name for the Autonomous Database. The name does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetAutonomousDatabasesClonesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current state of the Autonomous Database.
     * 
     */
    private @Nullable String state;

    private GetAutonomousDatabasesClonesResult() {}
    public String autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }
    /**
     * @return The list of autonomous_databases.
     * 
     */
    public List<GetAutonomousDatabasesClonesAutonomousDatabase> autonomousDatabases() {
        return this.autonomousDatabases;
    }
    public Optional<String> cloneType() {
        return Optional.ofNullable(this.cloneType);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The user-friendly name for the Autonomous Database. The name does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetAutonomousDatabasesClonesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of the Autonomous Database.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousDatabasesClonesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autonomousDatabaseId;
        private List<GetAutonomousDatabasesClonesAutonomousDatabase> autonomousDatabases;
        private @Nullable String cloneType;
        private String compartmentId;
        private @Nullable String displayName;
        private @Nullable List<GetAutonomousDatabasesClonesFilter> filters;
        private String id;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetAutonomousDatabasesClonesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousDatabaseId = defaults.autonomousDatabaseId;
    	      this.autonomousDatabases = defaults.autonomousDatabases;
    	      this.cloneType = defaults.cloneType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder autonomousDatabaseId(String autonomousDatabaseId) {
            if (autonomousDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesClonesResult", "autonomousDatabaseId");
            }
            this.autonomousDatabaseId = autonomousDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder autonomousDatabases(List<GetAutonomousDatabasesClonesAutonomousDatabase> autonomousDatabases) {
            if (autonomousDatabases == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesClonesResult", "autonomousDatabases");
            }
            this.autonomousDatabases = autonomousDatabases;
            return this;
        }
        public Builder autonomousDatabases(GetAutonomousDatabasesClonesAutonomousDatabase... autonomousDatabases) {
            return autonomousDatabases(List.of(autonomousDatabases));
        }
        @CustomType.Setter
        public Builder cloneType(@Nullable String cloneType) {

            this.cloneType = cloneType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesClonesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetAutonomousDatabasesClonesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetAutonomousDatabasesClonesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAutonomousDatabasesClonesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetAutonomousDatabasesClonesResult build() {
            final var _resultValue = new GetAutonomousDatabasesClonesResult();
            _resultValue.autonomousDatabaseId = autonomousDatabaseId;
            _resultValue.autonomousDatabases = autonomousDatabases;
            _resultValue.cloneType = cloneType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
