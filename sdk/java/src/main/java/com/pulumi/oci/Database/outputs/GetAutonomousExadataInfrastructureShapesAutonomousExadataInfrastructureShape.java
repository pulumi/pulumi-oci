// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAutonomousExadataInfrastructureShapesAutonomousExadataInfrastructureShape {
    /**
     * @return The maximum number of CPU cores that can be enabled on the Autonomous Exadata Infrastructure.
     * 
     */
    private @Nullable Integer availableCoreCount;
    /**
     * @return The increment in which core count can be increased or decreased.
     * 
     */
    private @Nullable Integer coreCountIncrement;
    /**
     * @return The maximum number of nodes available for the shape.
     * 
     */
    private @Nullable Integer maximumNodeCount;
    /**
     * @return The minimum number of CPU cores that can be enabled on the Autonomous Exadata Infrastructure.
     * 
     */
    private @Nullable Integer minimumCoreCount;
    /**
     * @return The minimum number of nodes available for the shape.
     * 
     */
    private @Nullable Integer minimumNodeCount;
    /**
     * @return The name of the shape used for the Autonomous Exadata Infrastructure.
     * 
     */
    private @Nullable String name;

    private GetAutonomousExadataInfrastructureShapesAutonomousExadataInfrastructureShape() {}
    /**
     * @return The maximum number of CPU cores that can be enabled on the Autonomous Exadata Infrastructure.
     * 
     */
    public Optional<Integer> availableCoreCount() {
        return Optional.ofNullable(this.availableCoreCount);
    }
    /**
     * @return The increment in which core count can be increased or decreased.
     * 
     */
    public Optional<Integer> coreCountIncrement() {
        return Optional.ofNullable(this.coreCountIncrement);
    }
    /**
     * @return The maximum number of nodes available for the shape.
     * 
     */
    public Optional<Integer> maximumNodeCount() {
        return Optional.ofNullable(this.maximumNodeCount);
    }
    /**
     * @return The minimum number of CPU cores that can be enabled on the Autonomous Exadata Infrastructure.
     * 
     */
    public Optional<Integer> minimumCoreCount() {
        return Optional.ofNullable(this.minimumCoreCount);
    }
    /**
     * @return The minimum number of nodes available for the shape.
     * 
     */
    public Optional<Integer> minimumNodeCount() {
        return Optional.ofNullable(this.minimumNodeCount);
    }
    /**
     * @return The name of the shape used for the Autonomous Exadata Infrastructure.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousExadataInfrastructureShapesAutonomousExadataInfrastructureShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer availableCoreCount;
        private @Nullable Integer coreCountIncrement;
        private @Nullable Integer maximumNodeCount;
        private @Nullable Integer minimumCoreCount;
        private @Nullable Integer minimumNodeCount;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetAutonomousExadataInfrastructureShapesAutonomousExadataInfrastructureShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableCoreCount = defaults.availableCoreCount;
    	      this.coreCountIncrement = defaults.coreCountIncrement;
    	      this.maximumNodeCount = defaults.maximumNodeCount;
    	      this.minimumCoreCount = defaults.minimumCoreCount;
    	      this.minimumNodeCount = defaults.minimumNodeCount;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder availableCoreCount(@Nullable Integer availableCoreCount) {
            this.availableCoreCount = availableCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder coreCountIncrement(@Nullable Integer coreCountIncrement) {
            this.coreCountIncrement = coreCountIncrement;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNodeCount(@Nullable Integer maximumNodeCount) {
            this.maximumNodeCount = maximumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumCoreCount(@Nullable Integer minimumCoreCount) {
            this.minimumCoreCount = minimumCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumNodeCount(@Nullable Integer minimumNodeCount) {
            this.minimumNodeCount = minimumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public GetAutonomousExadataInfrastructureShapesAutonomousExadataInfrastructureShape build() {
            final var o = new GetAutonomousExadataInfrastructureShapesAutonomousExadataInfrastructureShape();
            o.availableCoreCount = availableCoreCount;
            o.coreCountIncrement = coreCountIncrement;
            o.maximumNodeCount = maximumNodeCount;
            o.minimumCoreCount = minimumCoreCount;
            o.minimumNodeCount = minimumNodeCount;
            o.name = name;
            return o;
        }
    }
}
