// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsage {
    /**
     * @return associated autonomous container database usages
     * 
     */
    private @Nullable List<GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage> autonomousContainerDatabaseUsages;
    /**
     * @return The number of CPU cores available.
     * 
     */
    private @Nullable Double availableCpus;
    /**
     * @return The user-friendly name for the Autonomous VM cluster. The name does not need to be unique.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous VM cluster.
     * 
     */
    private @Nullable String id;
    /**
     * @return The number of CPUs provisioned in an Autonomous VM Cluster.
     * 
     */
    private @Nullable Double provisionedCpus;
    /**
     * @return CPU cores that continue to be included in the count of OCPUs available to the Autonomous Container Database even after one of its Autonomous Database is terminated or scaled down. You can release them to the available OCPUs at its parent AVMC level by restarting the Autonomous Container Database.
     * 
     */
    private @Nullable Double reclaimableCpus;
    /**
     * @return The number of CPUs reserved in an Autonomous VM Cluster.
     * 
     */
    private @Nullable Double reservedCpus;
    /**
     * @return The number of CPU cores alloted to the Autonomous Container Databases in an Autonomous VM cluster.
     * 
     */
    private @Nullable Double usedCpus;

    private GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsage() {}
    /**
     * @return associated autonomous container database usages
     * 
     */
    public List<GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage> autonomousContainerDatabaseUsages() {
        return this.autonomousContainerDatabaseUsages == null ? List.of() : this.autonomousContainerDatabaseUsages;
    }
    /**
     * @return The number of CPU cores available.
     * 
     */
    public Optional<Double> availableCpus() {
        return Optional.ofNullable(this.availableCpus);
    }
    /**
     * @return The user-friendly name for the Autonomous VM cluster. The name does not need to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Autonomous VM cluster.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The number of CPUs provisioned in an Autonomous VM Cluster.
     * 
     */
    public Optional<Double> provisionedCpus() {
        return Optional.ofNullable(this.provisionedCpus);
    }
    /**
     * @return CPU cores that continue to be included in the count of OCPUs available to the Autonomous Container Database even after one of its Autonomous Database is terminated or scaled down. You can release them to the available OCPUs at its parent AVMC level by restarting the Autonomous Container Database.
     * 
     */
    public Optional<Double> reclaimableCpus() {
        return Optional.ofNullable(this.reclaimableCpus);
    }
    /**
     * @return The number of CPUs reserved in an Autonomous VM Cluster.
     * 
     */
    public Optional<Double> reservedCpus() {
        return Optional.ofNullable(this.reservedCpus);
    }
    /**
     * @return The number of CPU cores alloted to the Autonomous Container Databases in an Autonomous VM cluster.
     * 
     */
    public Optional<Double> usedCpus() {
        return Optional.ofNullable(this.usedCpus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage> autonomousContainerDatabaseUsages;
        private @Nullable Double availableCpus;
        private @Nullable String displayName;
        private @Nullable String id;
        private @Nullable Double provisionedCpus;
        private @Nullable Double reclaimableCpus;
        private @Nullable Double reservedCpus;
        private @Nullable Double usedCpus;
        public Builder() {}
        public Builder(GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autonomousContainerDatabaseUsages = defaults.autonomousContainerDatabaseUsages;
    	      this.availableCpus = defaults.availableCpus;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.provisionedCpus = defaults.provisionedCpus;
    	      this.reclaimableCpus = defaults.reclaimableCpus;
    	      this.reservedCpus = defaults.reservedCpus;
    	      this.usedCpus = defaults.usedCpus;
        }

        @CustomType.Setter
        public Builder autonomousContainerDatabaseUsages(@Nullable List<GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage> autonomousContainerDatabaseUsages) {
            this.autonomousContainerDatabaseUsages = autonomousContainerDatabaseUsages;
            return this;
        }
        public Builder autonomousContainerDatabaseUsages(GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage... autonomousContainerDatabaseUsages) {
            return autonomousContainerDatabaseUsages(List.of(autonomousContainerDatabaseUsages));
        }
        @CustomType.Setter
        public Builder availableCpus(@Nullable Double availableCpus) {
            this.availableCpus = availableCpus;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder provisionedCpus(@Nullable Double provisionedCpus) {
            this.provisionedCpus = provisionedCpus;
            return this;
        }
        @CustomType.Setter
        public Builder reclaimableCpus(@Nullable Double reclaimableCpus) {
            this.reclaimableCpus = reclaimableCpus;
            return this;
        }
        @CustomType.Setter
        public Builder reservedCpus(@Nullable Double reservedCpus) {
            this.reservedCpus = reservedCpus;
            return this;
        }
        @CustomType.Setter
        public Builder usedCpus(@Nullable Double usedCpus) {
            this.usedCpus = usedCpus;
            return this;
        }
        public GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsage build() {
            final var o = new GetAutonomousVmClusterResourceUsageAutonomousVmResourceUsage();
            o.autonomousContainerDatabaseUsages = autonomousContainerDatabaseUsages;
            o.availableCpus = availableCpus;
            o.displayName = displayName;
            o.id = id;
            o.provisionedCpus = provisionedCpus;
            o.reclaimableCpus = reclaimableCpus;
            o.reservedCpus = reservedCpus;
            o.usedCpus = usedCpus;
            return o;
        }
    }
}
