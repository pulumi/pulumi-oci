// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek;
import com.pulumi.oci.Database.outputs.GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail {
    private Integer customActionTimeoutInMins;
    /**
     * @return Days during the week when maintenance should be performed.
     * 
     */
    private List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek> daysOfWeeks;
    /**
     * @return The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
     * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    private List<Integer> hoursOfDays;
    private Boolean isCustomActionTimeoutEnabled;
    private Boolean isMonthlyPatchingEnabled;
    /**
     * @return Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    private Integer leadTimeInWeeks;
    /**
     * @return Months during the year when maintenance should be performed.
     * 
     */
    private List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth> months;
    private String patchingMode;
    /**
     * @return The maintenance window scheduling preference.
     * 
     */
    private String preference;
    /**
     * @return Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
     * 
     */
    private List<Integer> weeksOfMonths;

    private GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail() {}
    public Integer customActionTimeoutInMins() {
        return this.customActionTimeoutInMins;
    }
    /**
     * @return Days during the week when maintenance should be performed.
     * 
     */
    public List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek> daysOfWeeks() {
        return this.daysOfWeeks;
    }
    /**
     * @return The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
     * * 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    public List<Integer> hoursOfDays() {
        return this.hoursOfDays;
    }
    public Boolean isCustomActionTimeoutEnabled() {
        return this.isCustomActionTimeoutEnabled;
    }
    public Boolean isMonthlyPatchingEnabled() {
        return this.isMonthlyPatchingEnabled;
    }
    /**
     * @return Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    public Integer leadTimeInWeeks() {
        return this.leadTimeInWeeks;
    }
    /**
     * @return Months during the year when maintenance should be performed.
     * 
     */
    public List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth> months() {
        return this.months;
    }
    public String patchingMode() {
        return this.patchingMode;
    }
    /**
     * @return The maintenance window scheduling preference.
     * 
     */
    public String preference() {
        return this.preference;
    }
    /**
     * @return Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
     * 
     */
    public List<Integer> weeksOfMonths() {
        return this.weeksOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer customActionTimeoutInMins;
        private List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek> daysOfWeeks;
        private List<Integer> hoursOfDays;
        private Boolean isCustomActionTimeoutEnabled;
        private Boolean isMonthlyPatchingEnabled;
        private Integer leadTimeInWeeks;
        private List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth> months;
        private String patchingMode;
        private String preference;
        private List<Integer> weeksOfMonths;
        public Builder() {}
        public Builder(GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customActionTimeoutInMins = defaults.customActionTimeoutInMins;
    	      this.daysOfWeeks = defaults.daysOfWeeks;
    	      this.hoursOfDays = defaults.hoursOfDays;
    	      this.isCustomActionTimeoutEnabled = defaults.isCustomActionTimeoutEnabled;
    	      this.isMonthlyPatchingEnabled = defaults.isMonthlyPatchingEnabled;
    	      this.leadTimeInWeeks = defaults.leadTimeInWeeks;
    	      this.months = defaults.months;
    	      this.patchingMode = defaults.patchingMode;
    	      this.preference = defaults.preference;
    	      this.weeksOfMonths = defaults.weeksOfMonths;
        }

        @CustomType.Setter
        public Builder customActionTimeoutInMins(Integer customActionTimeoutInMins) {
            this.customActionTimeoutInMins = Objects.requireNonNull(customActionTimeoutInMins);
            return this;
        }
        @CustomType.Setter
        public Builder daysOfWeeks(List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek> daysOfWeeks) {
            this.daysOfWeeks = Objects.requireNonNull(daysOfWeeks);
            return this;
        }
        public Builder daysOfWeeks(GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }
        @CustomType.Setter
        public Builder hoursOfDays(List<Integer> hoursOfDays) {
            this.hoursOfDays = Objects.requireNonNull(hoursOfDays);
            return this;
        }
        public Builder hoursOfDays(Integer... hoursOfDays) {
            return hoursOfDays(List.of(hoursOfDays));
        }
        @CustomType.Setter
        public Builder isCustomActionTimeoutEnabled(Boolean isCustomActionTimeoutEnabled) {
            this.isCustomActionTimeoutEnabled = Objects.requireNonNull(isCustomActionTimeoutEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isMonthlyPatchingEnabled(Boolean isMonthlyPatchingEnabled) {
            this.isMonthlyPatchingEnabled = Objects.requireNonNull(isMonthlyPatchingEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder leadTimeInWeeks(Integer leadTimeInWeeks) {
            this.leadTimeInWeeks = Objects.requireNonNull(leadTimeInWeeks);
            return this;
        }
        @CustomType.Setter
        public Builder months(List<GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth> months) {
            this.months = Objects.requireNonNull(months);
            return this;
        }
        public Builder months(GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth... months) {
            return months(List.of(months));
        }
        @CustomType.Setter
        public Builder patchingMode(String patchingMode) {
            this.patchingMode = Objects.requireNonNull(patchingMode);
            return this;
        }
        @CustomType.Setter
        public Builder preference(String preference) {
            this.preference = Objects.requireNonNull(preference);
            return this;
        }
        @CustomType.Setter
        public Builder weeksOfMonths(List<Integer> weeksOfMonths) {
            this.weeksOfMonths = Objects.requireNonNull(weeksOfMonths);
            return this;
        }
        public Builder weeksOfMonths(Integer... weeksOfMonths) {
            return weeksOfMonths(List.of(weeksOfMonths));
        }
        public GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail build() {
            final var _resultValue = new GetAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail();
            _resultValue.customActionTimeoutInMins = customActionTimeoutInMins;
            _resultValue.daysOfWeeks = daysOfWeeks;
            _resultValue.hoursOfDays = hoursOfDays;
            _resultValue.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            _resultValue.isMonthlyPatchingEnabled = isMonthlyPatchingEnabled;
            _resultValue.leadTimeInWeeks = leadTimeInWeeks;
            _resultValue.months = months;
            _resultValue.patchingMode = patchingMode;
            _resultValue.preference = preference;
            _resultValue.weeksOfMonths = weeksOfMonths;
            return _resultValue;
        }
    }
}
