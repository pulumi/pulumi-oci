// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackupDestinationMountTypeDetail {
    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     */
    private @Nullable String localMountPointPath;
    private @Nullable String mountType;
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    private @Nullable String nfsServerExport;
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    private @Nullable List<String> nfsServers;

    private GetBackupDestinationMountTypeDetail() {}
    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     */
    public Optional<String> localMountPointPath() {
        return Optional.ofNullable(this.localMountPointPath);
    }
    public Optional<String> mountType() {
        return Optional.ofNullable(this.mountType);
    }
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    public Optional<String> nfsServerExport() {
        return Optional.ofNullable(this.nfsServerExport);
    }
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    public List<String> nfsServers() {
        return this.nfsServers == null ? List.of() : this.nfsServers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupDestinationMountTypeDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String localMountPointPath;
        private @Nullable String mountType;
        private @Nullable String nfsServerExport;
        private @Nullable List<String> nfsServers;
        public Builder() {}
        public Builder(GetBackupDestinationMountTypeDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.localMountPointPath = defaults.localMountPointPath;
    	      this.mountType = defaults.mountType;
    	      this.nfsServerExport = defaults.nfsServerExport;
    	      this.nfsServers = defaults.nfsServers;
        }

        @CustomType.Setter
        public Builder localMountPointPath(@Nullable String localMountPointPath) {
            this.localMountPointPath = localMountPointPath;
            return this;
        }
        @CustomType.Setter
        public Builder mountType(@Nullable String mountType) {
            this.mountType = mountType;
            return this;
        }
        @CustomType.Setter
        public Builder nfsServerExport(@Nullable String nfsServerExport) {
            this.nfsServerExport = nfsServerExport;
            return this;
        }
        @CustomType.Setter
        public Builder nfsServers(@Nullable List<String> nfsServers) {
            this.nfsServers = nfsServers;
            return this;
        }
        public Builder nfsServers(String... nfsServers) {
            return nfsServers(List.of(nfsServers));
        }
        public GetBackupDestinationMountTypeDetail build() {
            final var o = new GetBackupDestinationMountTypeDetail();
            o.localMountPointPath = localMountPointPath;
            o.mountType = mountType;
            o.nfsServerExport = nfsServerExport;
            o.nfsServers = nfsServers;
            return o;
        }
    }
}
