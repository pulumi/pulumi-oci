// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetBackupDestinationsBackupDestinationAssociatedDatabase;
import com.pulumi.oci.Database.outputs.GetBackupDestinationsBackupDestinationMountTypeDetail;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBackupDestinationsBackupDestination {
    /**
     * @return List of databases associated with the backup destination.
     * 
     */
    private List<GetBackupDestinationsBackupDestinationAssociatedDatabase> associatedDatabases;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the connection string for connecting to the Recovery Appliance.
     * 
     */
    private String connectionString;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The user-provided name of the backup destination.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    private String id;
    /**
     * @return A descriptive text associated with the lifecycleState. Typically contains additional displayable text
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     * @deprecated
     * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
     * 
     */
    @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
    private String localMountPointPath;
    private List<GetBackupDestinationsBackupDestinationMountTypeDetail> mountTypeDetails;
    /**
     * @return NFS Mount type for backup destination.
     * 
     */
    private String nfsMountType;
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    private String nfsServerExport;
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    private List<String> nfsServers;
    /**
     * @return The current lifecycle state of the backup destination.
     * 
     */
    private String state;
    /**
     * @return The time when the total storage size and the utilized storage size of the backup destination are updated.
     * 
     */
    private String timeAtWhichStorageDetailsAreUpdated;
    /**
     * @return The date and time the backup destination was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The total storage size of the backup destination in GBs, rounded to the nearest integer.
     * 
     */
    private Integer totalStorageSizeInGbs;
    /**
     * @return A filter to return only resources that match the given type of the Backup Destination.
     * 
     */
    private String type;
    /**
     * @return The total amount of space utilized on the backup destination (in GBs), rounded to the nearest integer.
     * 
     */
    private Integer utilizedStorageSizeInGbs;
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
     * 
     */
    private List<String> vpcUsers;

    private GetBackupDestinationsBackupDestination() {}
    /**
     * @return List of databases associated with the backup destination.
     * 
     */
    public List<GetBackupDestinationsBackupDestinationAssociatedDatabase> associatedDatabases() {
        return this.associatedDatabases;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the connection string for connecting to the Recovery Appliance.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The user-provided name of the backup destination.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup destination.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A descriptive text associated with the lifecycleState. Typically contains additional displayable text
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The local directory path on each VM cluster node where the NFS server location is mounted. The local directory path and the NFS server location must each be the same across all of the VM cluster nodes. Ensure that the NFS mount is maintained continuously on all of the VM cluster nodes.
     * 
     * @deprecated
     * The &#39;local_mount_point_path&#39; field has been deprecated. Please use &#39;local_mount_point_path under mount_type_details&#39; instead.
     * 
     */
    @Deprecated /* The 'local_mount_point_path' field has been deprecated. Please use 'local_mount_point_path under mount_type_details' instead. */
    public String localMountPointPath() {
        return this.localMountPointPath;
    }
    public List<GetBackupDestinationsBackupDestinationMountTypeDetail> mountTypeDetails() {
        return this.mountTypeDetails;
    }
    /**
     * @return NFS Mount type for backup destination.
     * 
     */
    public String nfsMountType() {
        return this.nfsMountType;
    }
    /**
     * @return Specifies the directory on which to mount the file system
     * 
     */
    public String nfsServerExport() {
        return this.nfsServerExport;
    }
    /**
     * @return Host names or IP addresses for NFS Auto mount.
     * 
     */
    public List<String> nfsServers() {
        return this.nfsServers;
    }
    /**
     * @return The current lifecycle state of the backup destination.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time when the total storage size and the utilized storage size of the backup destination are updated.
     * 
     */
    public String timeAtWhichStorageDetailsAreUpdated() {
        return this.timeAtWhichStorageDetailsAreUpdated;
    }
    /**
     * @return The date and time the backup destination was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The total storage size of the backup destination in GBs, rounded to the nearest integer.
     * 
     */
    public Integer totalStorageSizeInGbs() {
        return this.totalStorageSizeInGbs;
    }
    /**
     * @return A filter to return only resources that match the given type of the Backup Destination.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The total amount of space utilized on the backup destination (in GBs), rounded to the nearest integer.
     * 
     */
    public Integer utilizedStorageSizeInGbs() {
        return this.utilizedStorageSizeInGbs;
    }
    /**
     * @return For a RECOVERY_APPLIANCE backup destination, the Virtual Private Catalog (VPC) users that are used to access the Recovery Appliance.
     * 
     */
    public List<String> vpcUsers() {
        return this.vpcUsers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupDestinationsBackupDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBackupDestinationsBackupDestinationAssociatedDatabase> associatedDatabases;
        private String compartmentId;
        private String connectionString;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String localMountPointPath;
        private List<GetBackupDestinationsBackupDestinationMountTypeDetail> mountTypeDetails;
        private String nfsMountType;
        private String nfsServerExport;
        private List<String> nfsServers;
        private String state;
        private String timeAtWhichStorageDetailsAreUpdated;
        private String timeCreated;
        private Integer totalStorageSizeInGbs;
        private String type;
        private Integer utilizedStorageSizeInGbs;
        private List<String> vpcUsers;
        public Builder() {}
        public Builder(GetBackupDestinationsBackupDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associatedDatabases = defaults.associatedDatabases;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.localMountPointPath = defaults.localMountPointPath;
    	      this.mountTypeDetails = defaults.mountTypeDetails;
    	      this.nfsMountType = defaults.nfsMountType;
    	      this.nfsServerExport = defaults.nfsServerExport;
    	      this.nfsServers = defaults.nfsServers;
    	      this.state = defaults.state;
    	      this.timeAtWhichStorageDetailsAreUpdated = defaults.timeAtWhichStorageDetailsAreUpdated;
    	      this.timeCreated = defaults.timeCreated;
    	      this.totalStorageSizeInGbs = defaults.totalStorageSizeInGbs;
    	      this.type = defaults.type;
    	      this.utilizedStorageSizeInGbs = defaults.utilizedStorageSizeInGbs;
    	      this.vpcUsers = defaults.vpcUsers;
        }

        @CustomType.Setter
        public Builder associatedDatabases(List<GetBackupDestinationsBackupDestinationAssociatedDatabase> associatedDatabases) {
            if (associatedDatabases == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "associatedDatabases");
            }
            this.associatedDatabases = associatedDatabases;
            return this;
        }
        public Builder associatedDatabases(GetBackupDestinationsBackupDestinationAssociatedDatabase... associatedDatabases) {
            return associatedDatabases(List.of(associatedDatabases));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder localMountPointPath(String localMountPointPath) {
            if (localMountPointPath == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "localMountPointPath");
            }
            this.localMountPointPath = localMountPointPath;
            return this;
        }
        @CustomType.Setter
        public Builder mountTypeDetails(List<GetBackupDestinationsBackupDestinationMountTypeDetail> mountTypeDetails) {
            if (mountTypeDetails == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "mountTypeDetails");
            }
            this.mountTypeDetails = mountTypeDetails;
            return this;
        }
        public Builder mountTypeDetails(GetBackupDestinationsBackupDestinationMountTypeDetail... mountTypeDetails) {
            return mountTypeDetails(List.of(mountTypeDetails));
        }
        @CustomType.Setter
        public Builder nfsMountType(String nfsMountType) {
            if (nfsMountType == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "nfsMountType");
            }
            this.nfsMountType = nfsMountType;
            return this;
        }
        @CustomType.Setter
        public Builder nfsServerExport(String nfsServerExport) {
            if (nfsServerExport == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "nfsServerExport");
            }
            this.nfsServerExport = nfsServerExport;
            return this;
        }
        @CustomType.Setter
        public Builder nfsServers(List<String> nfsServers) {
            if (nfsServers == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "nfsServers");
            }
            this.nfsServers = nfsServers;
            return this;
        }
        public Builder nfsServers(String... nfsServers) {
            return nfsServers(List.of(nfsServers));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeAtWhichStorageDetailsAreUpdated(String timeAtWhichStorageDetailsAreUpdated) {
            if (timeAtWhichStorageDetailsAreUpdated == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "timeAtWhichStorageDetailsAreUpdated");
            }
            this.timeAtWhichStorageDetailsAreUpdated = timeAtWhichStorageDetailsAreUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder totalStorageSizeInGbs(Integer totalStorageSizeInGbs) {
            if (totalStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "totalStorageSizeInGbs");
            }
            this.totalStorageSizeInGbs = totalStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder utilizedStorageSizeInGbs(Integer utilizedStorageSizeInGbs) {
            if (utilizedStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "utilizedStorageSizeInGbs");
            }
            this.utilizedStorageSizeInGbs = utilizedStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder vpcUsers(List<String> vpcUsers) {
            if (vpcUsers == null) {
              throw new MissingRequiredPropertyException("GetBackupDestinationsBackupDestination", "vpcUsers");
            }
            this.vpcUsers = vpcUsers;
            return this;
        }
        public Builder vpcUsers(String... vpcUsers) {
            return vpcUsers(List.of(vpcUsers));
        }
        public GetBackupDestinationsBackupDestination build() {
            final var _resultValue = new GetBackupDestinationsBackupDestination();
            _resultValue.associatedDatabases = associatedDatabases;
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionString = connectionString;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.localMountPointPath = localMountPointPath;
            _resultValue.mountTypeDetails = mountTypeDetails;
            _resultValue.nfsMountType = nfsMountType;
            _resultValue.nfsServerExport = nfsServerExport;
            _resultValue.nfsServers = nfsServers;
            _resultValue.state = state;
            _resultValue.timeAtWhichStorageDetailsAreUpdated = timeAtWhichStorageDetailsAreUpdated;
            _resultValue.timeCreated = timeCreated;
            _resultValue.totalStorageSizeInGbs = totalStorageSizeInGbs;
            _resultValue.type = type;
            _resultValue.utilizedStorageSizeInGbs = utilizedStorageSizeInGbs;
            _resultValue.vpcUsers = vpcUsers;
            return _resultValue;
        }
    }
}
