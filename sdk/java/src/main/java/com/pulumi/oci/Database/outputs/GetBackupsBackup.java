// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackupsBackup {
    /**
     * @return The name of the availability domain where the database backup is stored.
     * 
     */
    private @Nullable String availabilityDomain;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The Oracle Database edition of the DB system from which the database backup was taken.
     * 
     */
    private @Nullable String databaseEdition;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private @Nullable String databaseId;
    /**
     * @return The size of the database in gigabytes at the time the backup was taken.
     * 
     */
    private @Nullable Double databaseSizeInGbs;
    /**
     * @return The user-friendly name for the backup. The name does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup.
     * 
     */
    private @Nullable String id;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
     * 
     */
    private @Nullable String keyStoreId;
    /**
     * @return The wallet name for Oracle Key Vault.
     * 
     */
    private @Nullable String keyStoreWalletName;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    private @Nullable String kmsKeyVersionId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return Shape of the backup&#39;s source database.
     * 
     */
    private @Nullable String shape;
    /**
     * @return The current state of the backup.
     * 
     */
    private @Nullable String state;
    /**
     * @return The date and time the backup was completed.
     * 
     */
    private @Nullable String timeEnded;
    /**
     * @return The date and time the backup started.
     * 
     */
    private @Nullable String timeStarted;
    /**
     * @return The type of backup.
     * 
     */
    private @Nullable String type;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private @Nullable String vaultId;
    /**
     * @return Version of the backup&#39;s source database
     * 
     */
    private @Nullable String version;

    private GetBackupsBackup() {}
    /**
     * @return The name of the availability domain where the database backup is stored.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The Oracle Database edition of the DB system from which the database backup was taken.
     * 
     */
    public Optional<String> databaseEdition() {
        return Optional.ofNullable(this.databaseEdition);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public Optional<String> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }
    /**
     * @return The size of the database in gigabytes at the time the backup was taken.
     * 
     */
    public Optional<Double> databaseSizeInGbs() {
        return Optional.ofNullable(this.databaseSizeInGbs);
    }
    /**
     * @return The user-friendly name for the backup. The name does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
     * 
     */
    public Optional<String> keyStoreId() {
        return Optional.ofNullable(this.keyStoreId);
    }
    /**
     * @return The wallet name for Oracle Key Vault.
     * 
     */
    public Optional<String> keyStoreWalletName() {
        return Optional.ofNullable(this.keyStoreWalletName);
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public Optional<String> kmsKeyVersionId() {
        return Optional.ofNullable(this.kmsKeyVersionId);
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return Shape of the backup&#39;s source database.
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return The current state of the backup.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The date and time the backup was completed.
     * 
     */
    public Optional<String> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }
    /**
     * @return The date and time the backup started.
     * 
     */
    public Optional<String> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }
    /**
     * @return The type of backup.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }
    /**
     * @return Version of the backup&#39;s source database
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupsBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityDomain;
        private @Nullable String compartmentId;
        private @Nullable String databaseEdition;
        private @Nullable String databaseId;
        private @Nullable Double databaseSizeInGbs;
        private @Nullable String displayName;
        private @Nullable String id;
        private @Nullable String keyStoreId;
        private @Nullable String keyStoreWalletName;
        private @Nullable String kmsKeyId;
        private @Nullable String kmsKeyVersionId;
        private @Nullable String lifecycleDetails;
        private @Nullable String shape;
        private @Nullable String state;
        private @Nullable String timeEnded;
        private @Nullable String timeStarted;
        private @Nullable String type;
        private @Nullable String vaultId;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetBackupsBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseEdition = defaults.databaseEdition;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSizeInGbs = defaults.databaseSizeInGbs;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.keyStoreId = defaults.keyStoreId;
    	      this.keyStoreWalletName = defaults.keyStoreWalletName;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.type = defaults.type;
    	      this.vaultId = defaults.vaultId;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseEdition(@Nullable String databaseEdition) {
            this.databaseEdition = databaseEdition;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(@Nullable String databaseId) {
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSizeInGbs(@Nullable Double databaseSizeInGbs) {
            this.databaseSizeInGbs = databaseSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyStoreId(@Nullable String keyStoreId) {
            this.keyStoreId = keyStoreId;
            return this;
        }
        @CustomType.Setter
        public Builder keyStoreWalletName(@Nullable String keyStoreWalletName) {
            this.keyStoreWalletName = keyStoreWalletName;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(@Nullable String kmsKeyVersionId) {
            this.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(@Nullable String timeEnded) {
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(@Nullable String timeStarted) {
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {
            this.vaultId = vaultId;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public GetBackupsBackup build() {
            final var o = new GetBackupsBackup();
            o.availabilityDomain = availabilityDomain;
            o.compartmentId = compartmentId;
            o.databaseEdition = databaseEdition;
            o.databaseId = databaseId;
            o.databaseSizeInGbs = databaseSizeInGbs;
            o.displayName = displayName;
            o.id = id;
            o.keyStoreId = keyStoreId;
            o.keyStoreWalletName = keyStoreWalletName;
            o.kmsKeyId = kmsKeyId;
            o.kmsKeyVersionId = kmsKeyVersionId;
            o.lifecycleDetails = lifecycleDetails;
            o.shape = shape;
            o.state = state;
            o.timeEnded = timeEnded;
            o.timeStarted = timeStarted;
            o.type = type;
            o.vaultId = vaultId;
            o.version = version;
            return o;
        }
    }
}
