// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDataGuardAssociationDataCollectionOption;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDataGuardAssociationResult {
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `9 seconds`
     * 
     */
    private String applyLag;
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `180 Mb per second`
     * 
     */
    private String applyRate;
    private String availabilityDomain;
    private List<String> backupNetworkNsgIds;
    private Integer cpuCoreCount;
    private Boolean createAsync;
    private String creationType;
    private List<GetDataGuardAssociationDataCollectionOption> dataCollectionOptions;
    private String dataGuardAssociationId;
    private String databaseAdminPassword;
    private Map<String,Object> databaseDefinedTags;
    private Map<String,Object> databaseFreeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the reporting database.
     * 
     */
    private String databaseId;
    private String databaseSoftwareImageId;
    private Map<String,Object> dbSystemDefinedTags;
    private Map<String,Object> dbSystemFreeformTags;
    private String deleteStandbyDbHomeOnDelete;
    private String displayName;
    private List<String> faultDomains;
    private String hostname;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Data Guard association.
     * 
     */
    private String id;
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    private Boolean isActiveDataGuardEnabled;
    private String licenseModel;
    /**
     * @return Additional information about the current lifecycleState, if available.
     * 
     */
    private String lifecycleDetails;
    private Integer nodeCount;
    private List<String> nsgIds;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer database&#39;s Data Guard association.
     * 
     */
    private String peerDataGuardAssociationId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated peer database.
     * 
     */
    private String peerDatabaseId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home containing the associated peer database.
     * 
     */
    private String peerDbHomeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system containing the associated peer database.
     * 
     */
    private String peerDbSystemId;
    private String peerDbUniqueName;
    /**
     * @return The role of the peer database in this Data Guard association.
     * 
     */
    private String peerRole;
    private String peerSidPrefix;
    private String peerVmClusterId;
    private String privateIp;
    /**
     * @return The protection mode of this Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    private String protectionMode;
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    private String role;
    private String shape;
    /**
     * @return The current state of the Data Guard association.
     * 
     */
    private String state;
    private String storageVolumePerformanceMode;
    private String subnetId;
    /**
     * @return The date and time the Data Guard association was created.
     * 
     */
    private String timeCreated;
    private String timeZone;
    /**
     * @return The redo transport type used by this Data Guard association.  For more information, see [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400) in the Oracle Data Guard documentation.
     * 
     */
    private String transportType;

    private GetDataGuardAssociationResult() {}
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `9 seconds`
     * 
     */
    public String applyLag() {
        return this.applyLag;
    }
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `180 Mb per second`
     * 
     */
    public String applyRate() {
        return this.applyRate;
    }
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    public List<String> backupNetworkNsgIds() {
        return this.backupNetworkNsgIds;
    }
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    public Boolean createAsync() {
        return this.createAsync;
    }
    public String creationType() {
        return this.creationType;
    }
    public List<GetDataGuardAssociationDataCollectionOption> dataCollectionOptions() {
        return this.dataCollectionOptions;
    }
    public String dataGuardAssociationId() {
        return this.dataGuardAssociationId;
    }
    public String databaseAdminPassword() {
        return this.databaseAdminPassword;
    }
    public Map<String,Object> databaseDefinedTags() {
        return this.databaseDefinedTags;
    }
    public Map<String,Object> databaseFreeformTags() {
        return this.databaseFreeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the reporting database.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    public String databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    public Map<String,Object> dbSystemDefinedTags() {
        return this.dbSystemDefinedTags;
    }
    public Map<String,Object> dbSystemFreeformTags() {
        return this.dbSystemFreeformTags;
    }
    public String deleteStandbyDbHomeOnDelete() {
        return this.deleteStandbyDbHomeOnDelete;
    }
    public String displayName() {
        return this.displayName;
    }
    public List<String> faultDomains() {
        return this.faultDomains;
    }
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Data Guard association.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    public Boolean isActiveDataGuardEnabled() {
        return this.isActiveDataGuardEnabled;
    }
    public String licenseModel() {
        return this.licenseModel;
    }
    /**
     * @return Additional information about the current lifecycleState, if available.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public Integer nodeCount() {
        return this.nodeCount;
    }
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer database&#39;s Data Guard association.
     * 
     */
    public String peerDataGuardAssociationId() {
        return this.peerDataGuardAssociationId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated peer database.
     * 
     */
    public String peerDatabaseId() {
        return this.peerDatabaseId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home containing the associated peer database.
     * 
     */
    public String peerDbHomeId() {
        return this.peerDbHomeId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system containing the associated peer database.
     * 
     */
    public String peerDbSystemId() {
        return this.peerDbSystemId;
    }
    public String peerDbUniqueName() {
        return this.peerDbUniqueName;
    }
    /**
     * @return The role of the peer database in this Data Guard association.
     * 
     */
    public String peerRole() {
        return this.peerRole;
    }
    public String peerSidPrefix() {
        return this.peerSidPrefix;
    }
    public String peerVmClusterId() {
        return this.peerVmClusterId;
    }
    public String privateIp() {
        return this.privateIp;
    }
    /**
     * @return The protection mode of this Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    public String protectionMode() {
        return this.protectionMode;
    }
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    public String role() {
        return this.role;
    }
    public String shape() {
        return this.shape;
    }
    /**
     * @return The current state of the Data Guard association.
     * 
     */
    public String state() {
        return this.state;
    }
    public String storageVolumePerformanceMode() {
        return this.storageVolumePerformanceMode;
    }
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The date and time the Data Guard association was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return The redo transport type used by this Data Guard association.  For more information, see [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400) in the Oracle Data Guard documentation.
     * 
     */
    public String transportType() {
        return this.transportType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataGuardAssociationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applyLag;
        private String applyRate;
        private String availabilityDomain;
        private List<String> backupNetworkNsgIds;
        private Integer cpuCoreCount;
        private Boolean createAsync;
        private String creationType;
        private List<GetDataGuardAssociationDataCollectionOption> dataCollectionOptions;
        private String dataGuardAssociationId;
        private String databaseAdminPassword;
        private Map<String,Object> databaseDefinedTags;
        private Map<String,Object> databaseFreeformTags;
        private String databaseId;
        private String databaseSoftwareImageId;
        private Map<String,Object> dbSystemDefinedTags;
        private Map<String,Object> dbSystemFreeformTags;
        private String deleteStandbyDbHomeOnDelete;
        private String displayName;
        private List<String> faultDomains;
        private String hostname;
        private String id;
        private Boolean isActiveDataGuardEnabled;
        private String licenseModel;
        private String lifecycleDetails;
        private Integer nodeCount;
        private List<String> nsgIds;
        private String peerDataGuardAssociationId;
        private String peerDatabaseId;
        private String peerDbHomeId;
        private String peerDbSystemId;
        private String peerDbUniqueName;
        private String peerRole;
        private String peerSidPrefix;
        private String peerVmClusterId;
        private String privateIp;
        private String protectionMode;
        private String role;
        private String shape;
        private String state;
        private String storageVolumePerformanceMode;
        private String subnetId;
        private String timeCreated;
        private String timeZone;
        private String transportType;
        public Builder() {}
        public Builder(GetDataGuardAssociationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyLag = defaults.applyLag;
    	      this.applyRate = defaults.applyRate;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupNetworkNsgIds = defaults.backupNetworkNsgIds;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.createAsync = defaults.createAsync;
    	      this.creationType = defaults.creationType;
    	      this.dataCollectionOptions = defaults.dataCollectionOptions;
    	      this.dataGuardAssociationId = defaults.dataGuardAssociationId;
    	      this.databaseAdminPassword = defaults.databaseAdminPassword;
    	      this.databaseDefinedTags = defaults.databaseDefinedTags;
    	      this.databaseFreeformTags = defaults.databaseFreeformTags;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.dbSystemDefinedTags = defaults.dbSystemDefinedTags;
    	      this.dbSystemFreeformTags = defaults.dbSystemFreeformTags;
    	      this.deleteStandbyDbHomeOnDelete = defaults.deleteStandbyDbHomeOnDelete;
    	      this.displayName = defaults.displayName;
    	      this.faultDomains = defaults.faultDomains;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.isActiveDataGuardEnabled = defaults.isActiveDataGuardEnabled;
    	      this.licenseModel = defaults.licenseModel;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nsgIds = defaults.nsgIds;
    	      this.peerDataGuardAssociationId = defaults.peerDataGuardAssociationId;
    	      this.peerDatabaseId = defaults.peerDatabaseId;
    	      this.peerDbHomeId = defaults.peerDbHomeId;
    	      this.peerDbSystemId = defaults.peerDbSystemId;
    	      this.peerDbUniqueName = defaults.peerDbUniqueName;
    	      this.peerRole = defaults.peerRole;
    	      this.peerSidPrefix = defaults.peerSidPrefix;
    	      this.peerVmClusterId = defaults.peerVmClusterId;
    	      this.privateIp = defaults.privateIp;
    	      this.protectionMode = defaults.protectionMode;
    	      this.role = defaults.role;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.storageVolumePerformanceMode = defaults.storageVolumePerformanceMode;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
    	      this.transportType = defaults.transportType;
        }

        @CustomType.Setter
        public Builder applyLag(String applyLag) {
            this.applyLag = Objects.requireNonNull(applyLag);
            return this;
        }
        @CustomType.Setter
        public Builder applyRate(String applyRate) {
            this.applyRate = Objects.requireNonNull(applyRate);
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            this.availabilityDomain = Objects.requireNonNull(availabilityDomain);
            return this;
        }
        @CustomType.Setter
        public Builder backupNetworkNsgIds(List<String> backupNetworkNsgIds) {
            this.backupNetworkNsgIds = Objects.requireNonNull(backupNetworkNsgIds);
            return this;
        }
        public Builder backupNetworkNsgIds(String... backupNetworkNsgIds) {
            return backupNetworkNsgIds(List.of(backupNetworkNsgIds));
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            this.cpuCoreCount = Objects.requireNonNull(cpuCoreCount);
            return this;
        }
        @CustomType.Setter
        public Builder createAsync(Boolean createAsync) {
            this.createAsync = Objects.requireNonNull(createAsync);
            return this;
        }
        @CustomType.Setter
        public Builder creationType(String creationType) {
            this.creationType = Objects.requireNonNull(creationType);
            return this;
        }
        @CustomType.Setter
        public Builder dataCollectionOptions(List<GetDataGuardAssociationDataCollectionOption> dataCollectionOptions) {
            this.dataCollectionOptions = Objects.requireNonNull(dataCollectionOptions);
            return this;
        }
        public Builder dataCollectionOptions(GetDataGuardAssociationDataCollectionOption... dataCollectionOptions) {
            return dataCollectionOptions(List.of(dataCollectionOptions));
        }
        @CustomType.Setter
        public Builder dataGuardAssociationId(String dataGuardAssociationId) {
            this.dataGuardAssociationId = Objects.requireNonNull(dataGuardAssociationId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseAdminPassword(String databaseAdminPassword) {
            this.databaseAdminPassword = Objects.requireNonNull(databaseAdminPassword);
            return this;
        }
        @CustomType.Setter
        public Builder databaseDefinedTags(Map<String,Object> databaseDefinedTags) {
            this.databaseDefinedTags = Objects.requireNonNull(databaseDefinedTags);
            return this;
        }
        @CustomType.Setter
        public Builder databaseFreeformTags(Map<String,Object> databaseFreeformTags) {
            this.databaseFreeformTags = Objects.requireNonNull(databaseFreeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            this.databaseSoftwareImageId = Objects.requireNonNull(databaseSoftwareImageId);
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemDefinedTags(Map<String,Object> dbSystemDefinedTags) {
            this.dbSystemDefinedTags = Objects.requireNonNull(dbSystemDefinedTags);
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemFreeformTags(Map<String,Object> dbSystemFreeformTags) {
            this.dbSystemFreeformTags = Objects.requireNonNull(dbSystemFreeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder deleteStandbyDbHomeOnDelete(String deleteStandbyDbHomeOnDelete) {
            this.deleteStandbyDbHomeOnDelete = Objects.requireNonNull(deleteStandbyDbHomeOnDelete);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder faultDomains(List<String> faultDomains) {
            this.faultDomains = Objects.requireNonNull(faultDomains);
            return this;
        }
        public Builder faultDomains(String... faultDomains) {
            return faultDomains(List.of(faultDomains));
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isActiveDataGuardEnabled(Boolean isActiveDataGuardEnabled) {
            this.isActiveDataGuardEnabled = Objects.requireNonNull(isActiveDataGuardEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            this.licenseModel = Objects.requireNonNull(licenseModel);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            this.nsgIds = Objects.requireNonNull(nsgIds);
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder peerDataGuardAssociationId(String peerDataGuardAssociationId) {
            this.peerDataGuardAssociationId = Objects.requireNonNull(peerDataGuardAssociationId);
            return this;
        }
        @CustomType.Setter
        public Builder peerDatabaseId(String peerDatabaseId) {
            this.peerDatabaseId = Objects.requireNonNull(peerDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder peerDbHomeId(String peerDbHomeId) {
            this.peerDbHomeId = Objects.requireNonNull(peerDbHomeId);
            return this;
        }
        @CustomType.Setter
        public Builder peerDbSystemId(String peerDbSystemId) {
            this.peerDbSystemId = Objects.requireNonNull(peerDbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder peerDbUniqueName(String peerDbUniqueName) {
            this.peerDbUniqueName = Objects.requireNonNull(peerDbUniqueName);
            return this;
        }
        @CustomType.Setter
        public Builder peerRole(String peerRole) {
            this.peerRole = Objects.requireNonNull(peerRole);
            return this;
        }
        @CustomType.Setter
        public Builder peerSidPrefix(String peerSidPrefix) {
            this.peerSidPrefix = Objects.requireNonNull(peerSidPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder peerVmClusterId(String peerVmClusterId) {
            this.peerVmClusterId = Objects.requireNonNull(peerVmClusterId);
            return this;
        }
        @CustomType.Setter
        public Builder privateIp(String privateIp) {
            this.privateIp = Objects.requireNonNull(privateIp);
            return this;
        }
        @CustomType.Setter
        public Builder protectionMode(String protectionMode) {
            this.protectionMode = Objects.requireNonNull(protectionMode);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder storageVolumePerformanceMode(String storageVolumePerformanceMode) {
            this.storageVolumePerformanceMode = Objects.requireNonNull(storageVolumePerformanceMode);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }
        @CustomType.Setter
        public Builder transportType(String transportType) {
            this.transportType = Objects.requireNonNull(transportType);
            return this;
        }
        public GetDataGuardAssociationResult build() {
            final var o = new GetDataGuardAssociationResult();
            o.applyLag = applyLag;
            o.applyRate = applyRate;
            o.availabilityDomain = availabilityDomain;
            o.backupNetworkNsgIds = backupNetworkNsgIds;
            o.cpuCoreCount = cpuCoreCount;
            o.createAsync = createAsync;
            o.creationType = creationType;
            o.dataCollectionOptions = dataCollectionOptions;
            o.dataGuardAssociationId = dataGuardAssociationId;
            o.databaseAdminPassword = databaseAdminPassword;
            o.databaseDefinedTags = databaseDefinedTags;
            o.databaseFreeformTags = databaseFreeformTags;
            o.databaseId = databaseId;
            o.databaseSoftwareImageId = databaseSoftwareImageId;
            o.dbSystemDefinedTags = dbSystemDefinedTags;
            o.dbSystemFreeformTags = dbSystemFreeformTags;
            o.deleteStandbyDbHomeOnDelete = deleteStandbyDbHomeOnDelete;
            o.displayName = displayName;
            o.faultDomains = faultDomains;
            o.hostname = hostname;
            o.id = id;
            o.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            o.licenseModel = licenseModel;
            o.lifecycleDetails = lifecycleDetails;
            o.nodeCount = nodeCount;
            o.nsgIds = nsgIds;
            o.peerDataGuardAssociationId = peerDataGuardAssociationId;
            o.peerDatabaseId = peerDatabaseId;
            o.peerDbHomeId = peerDbHomeId;
            o.peerDbSystemId = peerDbSystemId;
            o.peerDbUniqueName = peerDbUniqueName;
            o.peerRole = peerRole;
            o.peerSidPrefix = peerSidPrefix;
            o.peerVmClusterId = peerVmClusterId;
            o.privateIp = privateIp;
            o.protectionMode = protectionMode;
            o.role = role;
            o.shape = shape;
            o.state = state;
            o.storageVolumePerformanceMode = storageVolumePerformanceMode;
            o.subnetId = subnetId;
            o.timeCreated = timeCreated;
            o.timeZone = timeZone;
            o.transportType = transportType;
            return o;
        }
    }
}
