// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetDataGuardAssociationsDataGuardAssociationDataCollectionOption;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDataGuardAssociationsDataGuardAssociation {
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `9 seconds`
     * 
     */
    private String applyLag;
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `180 Mb per second`
     * 
     */
    private String applyRate;
    private String availabilityDomain;
    private List<String> backupNetworkNsgIds;
    private Integer cpuCoreCount;
    private Boolean createAsync;
    private String creationType;
    private List<GetDataGuardAssociationsDataGuardAssociationDataCollectionOption> dataCollectionOptions;
    private String databaseAdminPassword;
    private Map<String,String> databaseDefinedTags;
    private Map<String,String> databaseFreeformTags;
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String databaseId;
    private String databaseSoftwareImageId;
    private Map<String,String> dbSystemDefinedTags;
    private Map<String,String> dbSystemFreeformTags;
    private String deleteStandbyDbHomeOnDelete;
    private String displayName;
    private String domain;
    private List<String> faultDomains;
    private String hostname;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Data Guard association.
     * 
     */
    private String id;
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    private Boolean isActiveDataGuardEnabled;
    private String licenseModel;
    /**
     * @return Additional information about the current lifecycleState, if available.
     * 
     */
    private String lifecycleDetails;
    private Integer nodeCount;
    private List<String> nsgIds;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer database&#39;s Data Guard association.
     * 
     */
    private String peerDataGuardAssociationId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated peer database.
     * 
     */
    private String peerDatabaseId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home containing the associated peer database.
     * 
     */
    private String peerDbHomeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system containing the associated peer database.
     * 
     */
    private String peerDbSystemId;
    private String peerDbUniqueName;
    /**
     * @return The role of the peer database in this Data Guard association.
     * 
     */
    private String peerRole;
    private String peerSidPrefix;
    private String peerVmClusterId;
    private String privateIp;
    /**
     * @return The protection mode of this Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    private String protectionMode;
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    private String role;
    private String shape;
    /**
     * @return The current state of the Data Guard association.
     * 
     */
    private String state;
    private String storageVolumePerformanceMode;
    private String subnetId;
    /**
     * @return The date and time the Data Guard association was created.
     * 
     */
    private String timeCreated;
    private String timeZone;
    /**
     * @return The redo transport type used by this Data Guard association.  For more information, see [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400) in the Oracle Data Guard documentation.
     * 
     */
    private String transportType;

    private GetDataGuardAssociationsDataGuardAssociation() {}
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `9 seconds`
     * 
     */
    public String applyLag() {
        return this.applyLag;
    }
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `180 Mb per second`
     * 
     */
    public String applyRate() {
        return this.applyRate;
    }
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    public List<String> backupNetworkNsgIds() {
        return this.backupNetworkNsgIds;
    }
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    public Boolean createAsync() {
        return this.createAsync;
    }
    public String creationType() {
        return this.creationType;
    }
    public List<GetDataGuardAssociationsDataGuardAssociationDataCollectionOption> dataCollectionOptions() {
        return this.dataCollectionOptions;
    }
    public String databaseAdminPassword() {
        return this.databaseAdminPassword;
    }
    public Map<String,String> databaseDefinedTags() {
        return this.databaseDefinedTags;
    }
    public Map<String,String> databaseFreeformTags() {
        return this.databaseFreeformTags;
    }
    /**
     * @return The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    public String databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    public Map<String,String> dbSystemDefinedTags() {
        return this.dbSystemDefinedTags;
    }
    public Map<String,String> dbSystemFreeformTags() {
        return this.dbSystemFreeformTags;
    }
    public String deleteStandbyDbHomeOnDelete() {
        return this.deleteStandbyDbHomeOnDelete;
    }
    public String displayName() {
        return this.displayName;
    }
    public String domain() {
        return this.domain;
    }
    public List<String> faultDomains() {
        return this.faultDomains;
    }
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Data Guard association.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    public Boolean isActiveDataGuardEnabled() {
        return this.isActiveDataGuardEnabled;
    }
    public String licenseModel() {
        return this.licenseModel;
    }
    /**
     * @return Additional information about the current lifecycleState, if available.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public Integer nodeCount() {
        return this.nodeCount;
    }
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the peer database&#39;s Data Guard association.
     * 
     */
    public String peerDataGuardAssociationId() {
        return this.peerDataGuardAssociationId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated peer database.
     * 
     */
    public String peerDatabaseId() {
        return this.peerDatabaseId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home containing the associated peer database.
     * 
     */
    public String peerDbHomeId() {
        return this.peerDbHomeId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system containing the associated peer database.
     * 
     */
    public String peerDbSystemId() {
        return this.peerDbSystemId;
    }
    public String peerDbUniqueName() {
        return this.peerDbUniqueName;
    }
    /**
     * @return The role of the peer database in this Data Guard association.
     * 
     */
    public String peerRole() {
        return this.peerRole;
    }
    public String peerSidPrefix() {
        return this.peerSidPrefix;
    }
    public String peerVmClusterId() {
        return this.peerVmClusterId;
    }
    public String privateIp() {
        return this.privateIp;
    }
    /**
     * @return The protection mode of this Data Guard association. For more information, see [Oracle Data Guard Protection Modes](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-protection-modes.htm#SBYDB02000) in the Oracle Data Guard documentation.
     * 
     */
    public String protectionMode() {
        return this.protectionMode;
    }
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    public String role() {
        return this.role;
    }
    public String shape() {
        return this.shape;
    }
    /**
     * @return The current state of the Data Guard association.
     * 
     */
    public String state() {
        return this.state;
    }
    public String storageVolumePerformanceMode() {
        return this.storageVolumePerformanceMode;
    }
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The date and time the Data Guard association was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return The redo transport type used by this Data Guard association.  For more information, see [Redo Transport Services](http://docs.oracle.com/database/122/SBYDB/oracle-data-guard-redo-transport-services.htm#SBYDB00400) in the Oracle Data Guard documentation.
     * 
     */
    public String transportType() {
        return this.transportType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataGuardAssociationsDataGuardAssociation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applyLag;
        private String applyRate;
        private String availabilityDomain;
        private List<String> backupNetworkNsgIds;
        private Integer cpuCoreCount;
        private Boolean createAsync;
        private String creationType;
        private List<GetDataGuardAssociationsDataGuardAssociationDataCollectionOption> dataCollectionOptions;
        private String databaseAdminPassword;
        private Map<String,String> databaseDefinedTags;
        private Map<String,String> databaseFreeformTags;
        private String databaseId;
        private String databaseSoftwareImageId;
        private Map<String,String> dbSystemDefinedTags;
        private Map<String,String> dbSystemFreeformTags;
        private String deleteStandbyDbHomeOnDelete;
        private String displayName;
        private String domain;
        private List<String> faultDomains;
        private String hostname;
        private String id;
        private Boolean isActiveDataGuardEnabled;
        private String licenseModel;
        private String lifecycleDetails;
        private Integer nodeCount;
        private List<String> nsgIds;
        private String peerDataGuardAssociationId;
        private String peerDatabaseId;
        private String peerDbHomeId;
        private String peerDbSystemId;
        private String peerDbUniqueName;
        private String peerRole;
        private String peerSidPrefix;
        private String peerVmClusterId;
        private String privateIp;
        private String protectionMode;
        private String role;
        private String shape;
        private String state;
        private String storageVolumePerformanceMode;
        private String subnetId;
        private String timeCreated;
        private String timeZone;
        private String transportType;
        public Builder() {}
        public Builder(GetDataGuardAssociationsDataGuardAssociation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyLag = defaults.applyLag;
    	      this.applyRate = defaults.applyRate;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupNetworkNsgIds = defaults.backupNetworkNsgIds;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.createAsync = defaults.createAsync;
    	      this.creationType = defaults.creationType;
    	      this.dataCollectionOptions = defaults.dataCollectionOptions;
    	      this.databaseAdminPassword = defaults.databaseAdminPassword;
    	      this.databaseDefinedTags = defaults.databaseDefinedTags;
    	      this.databaseFreeformTags = defaults.databaseFreeformTags;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.dbSystemDefinedTags = defaults.dbSystemDefinedTags;
    	      this.dbSystemFreeformTags = defaults.dbSystemFreeformTags;
    	      this.deleteStandbyDbHomeOnDelete = defaults.deleteStandbyDbHomeOnDelete;
    	      this.displayName = defaults.displayName;
    	      this.domain = defaults.domain;
    	      this.faultDomains = defaults.faultDomains;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.isActiveDataGuardEnabled = defaults.isActiveDataGuardEnabled;
    	      this.licenseModel = defaults.licenseModel;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nsgIds = defaults.nsgIds;
    	      this.peerDataGuardAssociationId = defaults.peerDataGuardAssociationId;
    	      this.peerDatabaseId = defaults.peerDatabaseId;
    	      this.peerDbHomeId = defaults.peerDbHomeId;
    	      this.peerDbSystemId = defaults.peerDbSystemId;
    	      this.peerDbUniqueName = defaults.peerDbUniqueName;
    	      this.peerRole = defaults.peerRole;
    	      this.peerSidPrefix = defaults.peerSidPrefix;
    	      this.peerVmClusterId = defaults.peerVmClusterId;
    	      this.privateIp = defaults.privateIp;
    	      this.protectionMode = defaults.protectionMode;
    	      this.role = defaults.role;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.storageVolumePerformanceMode = defaults.storageVolumePerformanceMode;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
    	      this.transportType = defaults.transportType;
        }

        @CustomType.Setter
        public Builder applyLag(String applyLag) {
            if (applyLag == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "applyLag");
            }
            this.applyLag = applyLag;
            return this;
        }
        @CustomType.Setter
        public Builder applyRate(String applyRate) {
            if (applyRate == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "applyRate");
            }
            this.applyRate = applyRate;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder backupNetworkNsgIds(List<String> backupNetworkNsgIds) {
            if (backupNetworkNsgIds == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "backupNetworkNsgIds");
            }
            this.backupNetworkNsgIds = backupNetworkNsgIds;
            return this;
        }
        public Builder backupNetworkNsgIds(String... backupNetworkNsgIds) {
            return backupNetworkNsgIds(List.of(backupNetworkNsgIds));
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder createAsync(Boolean createAsync) {
            if (createAsync == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "createAsync");
            }
            this.createAsync = createAsync;
            return this;
        }
        @CustomType.Setter
        public Builder creationType(String creationType) {
            if (creationType == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "creationType");
            }
            this.creationType = creationType;
            return this;
        }
        @CustomType.Setter
        public Builder dataCollectionOptions(List<GetDataGuardAssociationsDataGuardAssociationDataCollectionOption> dataCollectionOptions) {
            if (dataCollectionOptions == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "dataCollectionOptions");
            }
            this.dataCollectionOptions = dataCollectionOptions;
            return this;
        }
        public Builder dataCollectionOptions(GetDataGuardAssociationsDataGuardAssociationDataCollectionOption... dataCollectionOptions) {
            return dataCollectionOptions(List.of(dataCollectionOptions));
        }
        @CustomType.Setter
        public Builder databaseAdminPassword(String databaseAdminPassword) {
            if (databaseAdminPassword == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "databaseAdminPassword");
            }
            this.databaseAdminPassword = databaseAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder databaseDefinedTags(Map<String,String> databaseDefinedTags) {
            if (databaseDefinedTags == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "databaseDefinedTags");
            }
            this.databaseDefinedTags = databaseDefinedTags;
            return this;
        }
        @CustomType.Setter
        public Builder databaseFreeformTags(Map<String,String> databaseFreeformTags) {
            if (databaseFreeformTags == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "databaseFreeformTags");
            }
            this.databaseFreeformTags = databaseFreeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            if (databaseSoftwareImageId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "databaseSoftwareImageId");
            }
            this.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemDefinedTags(Map<String,String> dbSystemDefinedTags) {
            if (dbSystemDefinedTags == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "dbSystemDefinedTags");
            }
            this.dbSystemDefinedTags = dbSystemDefinedTags;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemFreeformTags(Map<String,String> dbSystemFreeformTags) {
            if (dbSystemFreeformTags == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "dbSystemFreeformTags");
            }
            this.dbSystemFreeformTags = dbSystemFreeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder deleteStandbyDbHomeOnDelete(String deleteStandbyDbHomeOnDelete) {
            if (deleteStandbyDbHomeOnDelete == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "deleteStandbyDbHomeOnDelete");
            }
            this.deleteStandbyDbHomeOnDelete = deleteStandbyDbHomeOnDelete;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomains(List<String> faultDomains) {
            if (faultDomains == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "faultDomains");
            }
            this.faultDomains = faultDomains;
            return this;
        }
        public Builder faultDomains(String... faultDomains) {
            return faultDomains(List.of(faultDomains));
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isActiveDataGuardEnabled(Boolean isActiveDataGuardEnabled) {
            if (isActiveDataGuardEnabled == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "isActiveDataGuardEnabled");
            }
            this.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            if (licenseModel == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "licenseModel");
            }
            this.licenseModel = licenseModel;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder peerDataGuardAssociationId(String peerDataGuardAssociationId) {
            if (peerDataGuardAssociationId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerDataGuardAssociationId");
            }
            this.peerDataGuardAssociationId = peerDataGuardAssociationId;
            return this;
        }
        @CustomType.Setter
        public Builder peerDatabaseId(String peerDatabaseId) {
            if (peerDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerDatabaseId");
            }
            this.peerDatabaseId = peerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder peerDbHomeId(String peerDbHomeId) {
            if (peerDbHomeId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerDbHomeId");
            }
            this.peerDbHomeId = peerDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder peerDbSystemId(String peerDbSystemId) {
            if (peerDbSystemId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerDbSystemId");
            }
            this.peerDbSystemId = peerDbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder peerDbUniqueName(String peerDbUniqueName) {
            if (peerDbUniqueName == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerDbUniqueName");
            }
            this.peerDbUniqueName = peerDbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder peerRole(String peerRole) {
            if (peerRole == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerRole");
            }
            this.peerRole = peerRole;
            return this;
        }
        @CustomType.Setter
        public Builder peerSidPrefix(String peerSidPrefix) {
            if (peerSidPrefix == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerSidPrefix");
            }
            this.peerSidPrefix = peerSidPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder peerVmClusterId(String peerVmClusterId) {
            if (peerVmClusterId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "peerVmClusterId");
            }
            this.peerVmClusterId = peerVmClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder privateIp(String privateIp) {
            if (privateIp == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "privateIp");
            }
            this.privateIp = privateIp;
            return this;
        }
        @CustomType.Setter
        public Builder protectionMode(String protectionMode) {
            if (protectionMode == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "protectionMode");
            }
            this.protectionMode = protectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageVolumePerformanceMode(String storageVolumePerformanceMode) {
            if (storageVolumePerformanceMode == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "storageVolumePerformanceMode");
            }
            this.storageVolumePerformanceMode = storageVolumePerformanceMode;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder transportType(String transportType) {
            if (transportType == null) {
              throw new MissingRequiredPropertyException("GetDataGuardAssociationsDataGuardAssociation", "transportType");
            }
            this.transportType = transportType;
            return this;
        }
        public GetDataGuardAssociationsDataGuardAssociation build() {
            final var _resultValue = new GetDataGuardAssociationsDataGuardAssociation();
            _resultValue.applyLag = applyLag;
            _resultValue.applyRate = applyRate;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.backupNetworkNsgIds = backupNetworkNsgIds;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.createAsync = createAsync;
            _resultValue.creationType = creationType;
            _resultValue.dataCollectionOptions = dataCollectionOptions;
            _resultValue.databaseAdminPassword = databaseAdminPassword;
            _resultValue.databaseDefinedTags = databaseDefinedTags;
            _resultValue.databaseFreeformTags = databaseFreeformTags;
            _resultValue.databaseId = databaseId;
            _resultValue.databaseSoftwareImageId = databaseSoftwareImageId;
            _resultValue.dbSystemDefinedTags = dbSystemDefinedTags;
            _resultValue.dbSystemFreeformTags = dbSystemFreeformTags;
            _resultValue.deleteStandbyDbHomeOnDelete = deleteStandbyDbHomeOnDelete;
            _resultValue.displayName = displayName;
            _resultValue.domain = domain;
            _resultValue.faultDomains = faultDomains;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            _resultValue.licenseModel = licenseModel;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.nodeCount = nodeCount;
            _resultValue.nsgIds = nsgIds;
            _resultValue.peerDataGuardAssociationId = peerDataGuardAssociationId;
            _resultValue.peerDatabaseId = peerDatabaseId;
            _resultValue.peerDbHomeId = peerDbHomeId;
            _resultValue.peerDbSystemId = peerDbSystemId;
            _resultValue.peerDbUniqueName = peerDbUniqueName;
            _resultValue.peerRole = peerRole;
            _resultValue.peerSidPrefix = peerSidPrefix;
            _resultValue.peerVmClusterId = peerVmClusterId;
            _resultValue.privateIp = privateIp;
            _resultValue.protectionMode = protectionMode;
            _resultValue.role = role;
            _resultValue.shape = shape;
            _resultValue.state = state;
            _resultValue.storageVolumePerformanceMode = storageVolumePerformanceMode;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeZone = timeZone;
            _resultValue.transportType = transportType;
            return _resultValue;
        }
    }
}
