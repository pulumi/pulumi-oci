// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Description of the maintenance run.
     * 
     */
    private String description;
    /**
     * @return The user-friendly name for the maintenance run.
     * 
     */
    private String displayName;
    /**
     * @return The estimated time of the execution window in minutes.
     * 
     */
    private Integer estimatedTimeInMins;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
     * 
     */
    private String executionResourceId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The OCID of the maintenance run.
     * 
     */
    private String id;
    /**
     * @return Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
     * 
     */
    private Boolean isEnforcedDuration;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
     * 
     */
    private String lifecycleSubstate;
    /**
     * @return The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
     * 
     */
    private String state;
    /**
     * @return The date and time the execution window was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the maintenance run was completed.
     * 
     */
    private String timeEnded;
    /**
     * @return The date and time the maintenance run is scheduled to occur.
     * 
     */
    private String timeScheduled;
    /**
     * @return The date and time the maintenance run starts.
     * 
     */
    private String timeStarted;
    /**
     * @return The last date and time that the execution window was updated.
     * 
     */
    private String timeUpdated;
    /**
     * @return The total time taken by corresponding resource activity in minutes.
     * 
     */
    private Integer totalTimeTakenInMins;
    /**
     * @return Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
     * 
     */
    private Integer windowDurationInMins;
    /**
     * @return The execution window is of PLANNED or UNPLANNED type.
     * 
     */
    private String windowType;

    private GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow() {}
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Description of the maintenance run.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The user-friendly name for the maintenance run.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The estimated time of the execution window in minutes.
     * 
     */
    public Integer estimatedTimeInMins() {
        return this.estimatedTimeInMins;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
     * 
     */
    public String executionResourceId() {
        return this.executionResourceId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the maintenance run.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
     * 
     */
    public Boolean isEnforcedDuration() {
        return this.isEnforcedDuration;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
     * 
     */
    public String lifecycleSubstate() {
        return this.lifecycleSubstate;
    }
    /**
     * @return The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the execution window was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the maintenance run was completed.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The date and time the maintenance run is scheduled to occur.
     * 
     */
    public String timeScheduled() {
        return this.timeScheduled;
    }
    /**
     * @return The date and time the maintenance run starts.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    /**
     * @return The last date and time that the execution window was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The total time taken by corresponding resource activity in minutes.
     * 
     */
    public Integer totalTimeTakenInMins() {
        return this.totalTimeTakenInMins;
    }
    /**
     * @return Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
     * 
     */
    public Integer windowDurationInMins() {
        return this.windowDurationInMins;
    }
    /**
     * @return The execution window is of PLANNED or UNPLANNED type.
     * 
     */
    public String windowType() {
        return this.windowType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Integer estimatedTimeInMins;
        private String executionResourceId;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isEnforcedDuration;
        private String lifecycleDetails;
        private String lifecycleSubstate;
        private String state;
        private String timeCreated;
        private String timeEnded;
        private String timeScheduled;
        private String timeStarted;
        private String timeUpdated;
        private Integer totalTimeTakenInMins;
        private Integer windowDurationInMins;
        private String windowType;
        public Builder() {}
        public Builder(GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.estimatedTimeInMins = defaults.estimatedTimeInMins;
    	      this.executionResourceId = defaults.executionResourceId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isEnforcedDuration = defaults.isEnforcedDuration;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lifecycleSubstate = defaults.lifecycleSubstate;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeScheduled = defaults.timeScheduled;
    	      this.timeStarted = defaults.timeStarted;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.totalTimeTakenInMins = defaults.totalTimeTakenInMins;
    	      this.windowDurationInMins = defaults.windowDurationInMins;
    	      this.windowType = defaults.windowType;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedTimeInMins(Integer estimatedTimeInMins) {
            if (estimatedTimeInMins == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "estimatedTimeInMins");
            }
            this.estimatedTimeInMins = estimatedTimeInMins;
            return this;
        }
        @CustomType.Setter
        public Builder executionResourceId(String executionResourceId) {
            if (executionResourceId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "executionResourceId");
            }
            this.executionResourceId = executionResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEnforcedDuration(Boolean isEnforcedDuration) {
            if (isEnforcedDuration == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "isEnforcedDuration");
            }
            this.isEnforcedDuration = isEnforcedDuration;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleSubstate(String lifecycleSubstate) {
            if (lifecycleSubstate == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "lifecycleSubstate");
            }
            this.lifecycleSubstate = lifecycleSubstate;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            if (timeEnded == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "timeEnded");
            }
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduled(String timeScheduled) {
            if (timeScheduled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "timeScheduled");
            }
            this.timeScheduled = timeScheduled;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder totalTimeTakenInMins(Integer totalTimeTakenInMins) {
            if (totalTimeTakenInMins == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "totalTimeTakenInMins");
            }
            this.totalTimeTakenInMins = totalTimeTakenInMins;
            return this;
        }
        @CustomType.Setter
        public Builder windowDurationInMins(Integer windowDurationInMins) {
            if (windowDurationInMins == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "windowDurationInMins");
            }
            this.windowDurationInMins = windowDurationInMins;
            return this;
        }
        @CustomType.Setter
        public Builder windowType(String windowType) {
            if (windowType == null) {
              throw new MissingRequiredPropertyException("GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow", "windowType");
            }
            this.windowType = windowType;
            return this;
        }
        public GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow build() {
            final var _resultValue = new GetDatabaseMaintenanceRunHistoryGranularMaintenanceHistoryExecutionWindow();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.estimatedTimeInMins = estimatedTimeInMins;
            _resultValue.executionResourceId = executionResourceId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isEnforcedDuration = isEnforcedDuration;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lifecycleSubstate = lifecycleSubstate;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeEnded = timeEnded;
            _resultValue.timeScheduled = timeScheduled;
            _resultValue.timeStarted = timeStarted;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.totalTimeTakenInMins = totalTimeTakenInMins;
            _resultValue.windowDurationInMins = windowDurationInMins;
            _resultValue.windowType = windowType;
            return _resultValue;
        }
    }
}
