// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabasePdbConversionHistoryEntryResult {
    /**
     * @return The operations used to convert a non-container database to a pluggable database.
     * * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
     * * Use `CONVERT` to convert a non-container database into a pluggable database.
     * * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
     * * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
     * 
     */
    private @Nullable String action;
    /**
     * @return Additional container database parameter.
     * 
     */
    private @Nullable String additionalCdbParams;
    /**
     * @return The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
     * 
     */
    private @Nullable String cdbName;
    private String databaseId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Additional information about the current lifecycle state for the conversion operation.
     * 
     */
    private @Nullable String lifecycleDetails;
    private String pdbConversionHistoryEntryId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private @Nullable String sourceDatabaseId;
    /**
     * @return Status of an operation performed during the conversion of a non-container database to a pluggable database.
     * 
     */
    private @Nullable String state;
    /**
     * @return The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
     * * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
     * 
     */
    private @Nullable String target;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private @Nullable String targetDatabaseId;
    /**
     * @return The date and time when the database conversion operation ended.
     * 
     */
    private @Nullable String timeEnded;
    /**
     * @return The date and time when the database conversion operation started.
     * 
     */
    private @Nullable String timeStarted;

    private GetDatabasePdbConversionHistoryEntryResult() {}
    /**
     * @return The operations used to convert a non-container database to a pluggable database.
     * * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
     * * Use `CONVERT` to convert a non-container database into a pluggable database.
     * * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
     * * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return Additional container database parameter.
     * 
     */
    public Optional<String> additionalCdbParams() {
        return Optional.ofNullable(this.additionalCdbParams);
    }
    /**
     * @return The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
     * 
     */
    public Optional<String> cdbName() {
        return Optional.ofNullable(this.cdbName);
    }
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Additional information about the current lifecycle state for the conversion operation.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    public String pdbConversionHistoryEntryId() {
        return this.pdbConversionHistoryEntryId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public Optional<String> sourceDatabaseId() {
        return Optional.ofNullable(this.sourceDatabaseId);
    }
    /**
     * @return Status of an operation performed during the conversion of a non-container database to a pluggable database.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
     * * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public Optional<String> targetDatabaseId() {
        return Optional.ofNullable(this.targetDatabaseId);
    }
    /**
     * @return The date and time when the database conversion operation ended.
     * 
     */
    public Optional<String> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }
    /**
     * @return The date and time when the database conversion operation started.
     * 
     */
    public Optional<String> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasePdbConversionHistoryEntryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable String additionalCdbParams;
        private @Nullable String cdbName;
        private String databaseId;
        private @Nullable String id;
        private @Nullable String lifecycleDetails;
        private String pdbConversionHistoryEntryId;
        private @Nullable String sourceDatabaseId;
        private @Nullable String state;
        private @Nullable String target;
        private @Nullable String targetDatabaseId;
        private @Nullable String timeEnded;
        private @Nullable String timeStarted;
        public Builder() {}
        public Builder(GetDatabasePdbConversionHistoryEntryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.additionalCdbParams = defaults.additionalCdbParams;
    	      this.cdbName = defaults.cdbName;
    	      this.databaseId = defaults.databaseId;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.pdbConversionHistoryEntryId = defaults.pdbConversionHistoryEntryId;
    	      this.sourceDatabaseId = defaults.sourceDatabaseId;
    	      this.state = defaults.state;
    	      this.target = defaults.target;
    	      this.targetDatabaseId = defaults.targetDatabaseId;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder additionalCdbParams(@Nullable String additionalCdbParams) {
            this.additionalCdbParams = additionalCdbParams;
            return this;
        }
        @CustomType.Setter
        public Builder cdbName(@Nullable String cdbName) {
            this.cdbName = cdbName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder pdbConversionHistoryEntryId(String pdbConversionHistoryEntryId) {
            this.pdbConversionHistoryEntryId = Objects.requireNonNull(pdbConversionHistoryEntryId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabaseId(@Nullable String sourceDatabaseId) {
            this.sourceDatabaseId = sourceDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseId(@Nullable String targetDatabaseId) {
            this.targetDatabaseId = targetDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(@Nullable String timeEnded) {
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(@Nullable String timeStarted) {
            this.timeStarted = timeStarted;
            return this;
        }
        public GetDatabasePdbConversionHistoryEntryResult build() {
            final var o = new GetDatabasePdbConversionHistoryEntryResult();
            o.action = action;
            o.additionalCdbParams = additionalCdbParams;
            o.cdbName = cdbName;
            o.databaseId = databaseId;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.pdbConversionHistoryEntryId = pdbConversionHistoryEntryId;
            o.sourceDatabaseId = sourceDatabaseId;
            o.state = state;
            o.target = target;
            o.targetDatabaseId = targetDatabaseId;
            o.timeEnded = timeEnded;
            o.timeStarted = timeStarted;
            return o;
        }
    }
}
