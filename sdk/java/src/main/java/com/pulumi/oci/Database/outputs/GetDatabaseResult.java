// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDatabaseConnectionString;
import com.pulumi.oci.Database.outputs.GetDatabaseDatabase;
import com.pulumi.oci.Database.outputs.GetDatabaseDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.GetDatabaseDbBackupConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return The character set for the database.
     * 
     */
    private String characterSet;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The Connection strings used to connect to the Oracle Database.
     * 
     */
    private List<GetDatabaseConnectionString> connectionStrings;
    private String databaseId;
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    private List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs;
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private String databaseSoftwareImageId;
    private List<GetDatabaseDatabase> databases;
    /**
     * @return Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    private List<GetDatabaseDbBackupConfig> dbBackupConfigs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private String dbHomeId;
    /**
     * @return The database name.
     * 
     */
    private String dbName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private String dbSystemId;
    /**
     * @return A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    private String dbUniqueName;
    private String dbVersion;
    /**
     * @return **Deprecated.** The dbWorkload field has been deprecated for Exadata Database Service on Dedicated Infrastructure, Exadata Database Service on Cloud@Customer, and Base Database Service. Support for this attribute will end in November 2023. You may choose to update your custom scripts to exclude the dbWorkload attribute. After November 2023 if you pass a value to the dbWorkload attribute, it will be ignored.
     * 
     */
    private String dbWorkload;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    private String id;
    /**
     * @return True if the database is a container database.
     * 
     */
    private Boolean isCdb;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private String kmsKeyId;
    private Boolean kmsKeyMigration;
    private Integer kmsKeyRotation;
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    private String kmsKeyVersionId;
    /**
     * @return The duration when the latest database backup created.
     * 
     */
    private Integer lastBackupDurationInSeconds;
    /**
     * @return The date and time when the latest database backup was created.
     * 
     */
    private String lastBackupTimestamp;
    /**
     * @return The date and time when the latest database backup failed.
     * 
     */
    private String lastFailedBackupTimestamp;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The national character set for the database.
     * 
     */
    private String ncharacterSet;
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    private String pdbName;
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    private String sidPrefix;
    private String source;
    /**
     * @return Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private String sourceDatabasePointInTimeRecoveryTimestamp;
    /**
     * @return The current state of the database.
     * 
     */
    private String state;
    /**
     * @return The date and time the database was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private String vaultId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    private String vmClusterId;

    private GetDatabaseResult() {}
    /**
     * @return The character set for the database.
     * 
     */
    public String characterSet() {
        return this.characterSet;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The Connection strings used to connect to the Oracle Database.
     * 
     */
    public List<GetDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs() {
        return this.databaseManagementConfigs;
    }
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    public List<GetDatabaseDatabase> databases() {
        return this.databases;
    }
    /**
     * @return Backup Options To use any of the API operations, you must be authorized in an IAM policy. If you&#39;re not authorized, talk to an administrator. If you&#39;re an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     * 
     */
    public List<GetDatabaseDbBackupConfig> dbBackupConfigs() {
        return this.dbBackupConfigs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public String dbHomeId() {
        return this.dbHomeId;
    }
    /**
     * @return The database name.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return A system-generated name for the database to ensure uniqueness within an Oracle Data Guard group (a primary database and its standby databases). The unique name cannot be changed.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return **Deprecated.** The dbWorkload field has been deprecated for Exadata Database Service on Dedicated Infrastructure, Exadata Database Service on Cloud@Customer, and Base Database Service. Support for this attribute will end in November 2023. You may choose to update your custom scripts to exclude the dbWorkload attribute. After November 2023 if you pass a value to the dbWorkload attribute, it will be ignored.
     * 
     */
    public String dbWorkload() {
        return this.dbWorkload;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return True if the database is a container database.
     * 
     */
    public Boolean isCdb() {
        return this.isCdb;
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public Boolean kmsKeyMigration() {
        return this.kmsKeyMigration;
    }
    public Integer kmsKeyRotation() {
        return this.kmsKeyRotation;
    }
    /**
     * @return The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
     * 
     */
    public String kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * @return The duration when the latest database backup created.
     * 
     */
    public Integer lastBackupDurationInSeconds() {
        return this.lastBackupDurationInSeconds;
    }
    /**
     * @return The date and time when the latest database backup was created.
     * 
     */
    public String lastBackupTimestamp() {
        return this.lastBackupTimestamp;
    }
    /**
     * @return The date and time when the latest database backup failed.
     * 
     */
    public String lastFailedBackupTimestamp() {
        return this.lastFailedBackupTimestamp;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The national character set for the database.
     * 
     */
    public String ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * @return The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as database name.
     * 
     */
    public String pdbName() {
        return this.pdbName;
    }
    /**
     * @return Specifies a prefix for the `Oracle SID` of the database to be created.
     * 
     */
    public String sidPrefix() {
        return this.sidPrefix;
    }
    public String source() {
        return this.source;
    }
    /**
     * @return Point in time recovery timeStamp of the source database at which cloned database system is cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String sourceDatabasePointInTimeRecoveryTimestamp() {
        return this.sourceDatabasePointInTimeRecoveryTimestamp;
    }
    /**
     * @return The current state of the database.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    public String vmClusterId() {
        return this.vmClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String characterSet;
        private String compartmentId;
        private List<GetDatabaseConnectionString> connectionStrings;
        private String databaseId;
        private List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs;
        private String databaseSoftwareImageId;
        private List<GetDatabaseDatabase> databases;
        private List<GetDatabaseDbBackupConfig> dbBackupConfigs;
        private String dbHomeId;
        private String dbName;
        private String dbSystemId;
        private String dbUniqueName;
        private String dbVersion;
        private String dbWorkload;
        private Map<String,Object> definedTags;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isCdb;
        private String kmsKeyId;
        private Boolean kmsKeyMigration;
        private Integer kmsKeyRotation;
        private String kmsKeyVersionId;
        private Integer lastBackupDurationInSeconds;
        private String lastBackupTimestamp;
        private String lastFailedBackupTimestamp;
        private String lifecycleDetails;
        private String ncharacterSet;
        private String pdbName;
        private String sidPrefix;
        private String source;
        private String sourceDatabasePointInTimeRecoveryTimestamp;
        private String state;
        private String timeCreated;
        private String vaultId;
        private String vmClusterId;
        public Builder() {}
        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterSet = defaults.characterSet;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseManagementConfigs = defaults.databaseManagementConfigs;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.databases = defaults.databases;
    	      this.dbBackupConfigs = defaults.dbBackupConfigs;
    	      this.dbHomeId = defaults.dbHomeId;
    	      this.dbName = defaults.dbName;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbVersion = defaults.dbVersion;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isCdb = defaults.isCdb;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyMigration = defaults.kmsKeyMigration;
    	      this.kmsKeyRotation = defaults.kmsKeyRotation;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lastBackupDurationInSeconds = defaults.lastBackupDurationInSeconds;
    	      this.lastBackupTimestamp = defaults.lastBackupTimestamp;
    	      this.lastFailedBackupTimestamp = defaults.lastFailedBackupTimestamp;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.pdbName = defaults.pdbName;
    	      this.sidPrefix = defaults.sidPrefix;
    	      this.source = defaults.source;
    	      this.sourceDatabasePointInTimeRecoveryTimestamp = defaults.sourceDatabasePointInTimeRecoveryTimestamp;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.vaultId = defaults.vaultId;
    	      this.vmClusterId = defaults.vmClusterId;
        }

        @CustomType.Setter
        public Builder characterSet(String characterSet) {
            this.characterSet = Objects.requireNonNull(characterSet);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(List<GetDatabaseConnectionString> connectionStrings) {
            this.connectionStrings = Objects.requireNonNull(connectionStrings);
            return this;
        }
        public Builder connectionStrings(GetDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseManagementConfigs(List<GetDatabaseDatabaseManagementConfig> databaseManagementConfigs) {
            this.databaseManagementConfigs = Objects.requireNonNull(databaseManagementConfigs);
            return this;
        }
        public Builder databaseManagementConfigs(GetDatabaseDatabaseManagementConfig... databaseManagementConfigs) {
            return databaseManagementConfigs(List.of(databaseManagementConfigs));
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            this.databaseSoftwareImageId = Objects.requireNonNull(databaseSoftwareImageId);
            return this;
        }
        @CustomType.Setter
        public Builder databases(List<GetDatabaseDatabase> databases) {
            this.databases = Objects.requireNonNull(databases);
            return this;
        }
        public Builder databases(GetDatabaseDatabase... databases) {
            return databases(List.of(databases));
        }
        @CustomType.Setter
        public Builder dbBackupConfigs(List<GetDatabaseDbBackupConfig> dbBackupConfigs) {
            this.dbBackupConfigs = Objects.requireNonNull(dbBackupConfigs);
            return this;
        }
        public Builder dbBackupConfigs(GetDatabaseDbBackupConfig... dbBackupConfigs) {
            return dbBackupConfigs(List.of(dbBackupConfigs));
        }
        @CustomType.Setter
        public Builder dbHomeId(String dbHomeId) {
            this.dbHomeId = Objects.requireNonNull(dbHomeId);
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            this.dbName = Objects.requireNonNull(dbName);
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(String dbUniqueName) {
            this.dbUniqueName = Objects.requireNonNull(dbUniqueName);
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            this.dbVersion = Objects.requireNonNull(dbVersion);
            return this;
        }
        @CustomType.Setter
        public Builder dbWorkload(String dbWorkload) {
            this.dbWorkload = Objects.requireNonNull(dbWorkload);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isCdb(Boolean isCdb) {
            this.isCdb = Objects.requireNonNull(isCdb);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyMigration(Boolean kmsKeyMigration) {
            this.kmsKeyMigration = Objects.requireNonNull(kmsKeyMigration);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyRotation(Integer kmsKeyRotation) {
            this.kmsKeyRotation = Objects.requireNonNull(kmsKeyRotation);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            this.kmsKeyVersionId = Objects.requireNonNull(kmsKeyVersionId);
            return this;
        }
        @CustomType.Setter
        public Builder lastBackupDurationInSeconds(Integer lastBackupDurationInSeconds) {
            this.lastBackupDurationInSeconds = Objects.requireNonNull(lastBackupDurationInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder lastBackupTimestamp(String lastBackupTimestamp) {
            this.lastBackupTimestamp = Objects.requireNonNull(lastBackupTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder lastFailedBackupTimestamp(String lastFailedBackupTimestamp) {
            this.lastFailedBackupTimestamp = Objects.requireNonNull(lastFailedBackupTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(String ncharacterSet) {
            this.ncharacterSet = Objects.requireNonNull(ncharacterSet);
            return this;
        }
        @CustomType.Setter
        public Builder pdbName(String pdbName) {
            this.pdbName = Objects.requireNonNull(pdbName);
            return this;
        }
        @CustomType.Setter
        public Builder sidPrefix(String sidPrefix) {
            this.sidPrefix = Objects.requireNonNull(sidPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabasePointInTimeRecoveryTimestamp(String sourceDatabasePointInTimeRecoveryTimestamp) {
            this.sourceDatabasePointInTimeRecoveryTimestamp = Objects.requireNonNull(sourceDatabasePointInTimeRecoveryTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            this.vaultId = Objects.requireNonNull(vaultId);
            return this;
        }
        @CustomType.Setter
        public Builder vmClusterId(String vmClusterId) {
            this.vmClusterId = Objects.requireNonNull(vmClusterId);
            return this;
        }
        public GetDatabaseResult build() {
            final var o = new GetDatabaseResult();
            o.characterSet = characterSet;
            o.compartmentId = compartmentId;
            o.connectionStrings = connectionStrings;
            o.databaseId = databaseId;
            o.databaseManagementConfigs = databaseManagementConfigs;
            o.databaseSoftwareImageId = databaseSoftwareImageId;
            o.databases = databases;
            o.dbBackupConfigs = dbBackupConfigs;
            o.dbHomeId = dbHomeId;
            o.dbName = dbName;
            o.dbSystemId = dbSystemId;
            o.dbUniqueName = dbUniqueName;
            o.dbVersion = dbVersion;
            o.dbWorkload = dbWorkload;
            o.definedTags = definedTags;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isCdb = isCdb;
            o.kmsKeyId = kmsKeyId;
            o.kmsKeyMigration = kmsKeyMigration;
            o.kmsKeyRotation = kmsKeyRotation;
            o.kmsKeyVersionId = kmsKeyVersionId;
            o.lastBackupDurationInSeconds = lastBackupDurationInSeconds;
            o.lastBackupTimestamp = lastBackupTimestamp;
            o.lastFailedBackupTimestamp = lastFailedBackupTimestamp;
            o.lifecycleDetails = lifecycleDetails;
            o.ncharacterSet = ncharacterSet;
            o.pdbName = pdbName;
            o.sidPrefix = sidPrefix;
            o.source = source;
            o.sourceDatabasePointInTimeRecoveryTimestamp = sourceDatabasePointInTimeRecoveryTimestamp;
            o.state = state;
            o.timeCreated = timeCreated;
            o.vaultId = vaultId;
            o.vmClusterId = vmClusterId;
            return o;
        }
    }
}
