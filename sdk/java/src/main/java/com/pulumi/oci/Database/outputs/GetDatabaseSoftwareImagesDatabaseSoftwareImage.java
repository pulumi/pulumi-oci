// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseSoftwareImagesDatabaseSoftwareImage {
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return List of one-off patches for Database Homes.
     * 
     */
    private List<String> databaseSoftwareImageIncludedPatches;
    /**
     * @return List of one-off patches for Database Homes.
     * 
     */
    private List<String> databaseSoftwareImageOneOffPatches;
    /**
     * @return The database version with which the database software image is to be built.
     * 
     */
    private String databaseVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database software image.
     * 
     */
    private String id;
    /**
     * @return A filter to return only resources that match the given image shape family exactly.
     * 
     */
    private String imageShapeFamily;
    /**
     * @return A filter to return only resources that match the given image type exactly.
     * 
     */
    private String imageType;
    /**
     * @return The patches included in the image and the version of the image.
     * 
     */
    private String includedPatchesSummary;
    /**
     * @return If provided, filters the results to the set of database versions which are supported for Upgrade.
     * 
     */
    private Boolean isUpgradeSupported;
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The output from the OPatch lsInventory command, which is passed as a string.
     * 
     */
    private String lsInventory;
    /**
     * @return The PSU or PBP or Release Updates. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
     * 
     */
    private String patchSet;
    private String sourceDbHomeId;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    /**
     * @return The date and time the database software image was created.
     * 
     */
    private String timeCreated;

    private GetDatabaseSoftwareImagesDatabaseSoftwareImage() {}
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return List of one-off patches for Database Homes.
     * 
     */
    public List<String> databaseSoftwareImageIncludedPatches() {
        return this.databaseSoftwareImageIncludedPatches;
    }
    /**
     * @return List of one-off patches for Database Homes.
     * 
     */
    public List<String> databaseSoftwareImageOneOffPatches() {
        return this.databaseSoftwareImageOneOffPatches;
    }
    /**
     * @return The database version with which the database software image is to be built.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database software image.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A filter to return only resources that match the given image shape family exactly.
     * 
     */
    public String imageShapeFamily() {
        return this.imageShapeFamily;
    }
    /**
     * @return A filter to return only resources that match the given image type exactly.
     * 
     */
    public String imageType() {
        return this.imageType;
    }
    /**
     * @return The patches included in the image and the version of the image.
     * 
     */
    public String includedPatchesSummary() {
        return this.includedPatchesSummary;
    }
    /**
     * @return If provided, filters the results to the set of database versions which are supported for Upgrade.
     * 
     */
    public Boolean isUpgradeSupported() {
        return this.isUpgradeSupported;
    }
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The output from the OPatch lsInventory command, which is passed as a string.
     * 
     */
    public String lsInventory() {
        return this.lsInventory;
    }
    /**
     * @return The PSU or PBP or Release Updates. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
     * 
     */
    public String patchSet() {
        return this.patchSet;
    }
    public String sourceDbHomeId() {
        return this.sourceDbHomeId;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the database software image was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseSoftwareImagesDatabaseSoftwareImage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<String> databaseSoftwareImageIncludedPatches;
        private List<String> databaseSoftwareImageOneOffPatches;
        private String databaseVersion;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String imageShapeFamily;
        private String imageType;
        private String includedPatchesSummary;
        private Boolean isUpgradeSupported;
        private String lifecycleDetails;
        private String lsInventory;
        private String patchSet;
        private String sourceDbHomeId;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetDatabaseSoftwareImagesDatabaseSoftwareImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSoftwareImageIncludedPatches = defaults.databaseSoftwareImageIncludedPatches;
    	      this.databaseSoftwareImageOneOffPatches = defaults.databaseSoftwareImageOneOffPatches;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.imageShapeFamily = defaults.imageShapeFamily;
    	      this.imageType = defaults.imageType;
    	      this.includedPatchesSummary = defaults.includedPatchesSummary;
    	      this.isUpgradeSupported = defaults.isUpgradeSupported;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lsInventory = defaults.lsInventory;
    	      this.patchSet = defaults.patchSet;
    	      this.sourceDbHomeId = defaults.sourceDbHomeId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageIncludedPatches(List<String> databaseSoftwareImageIncludedPatches) {
            if (databaseSoftwareImageIncludedPatches == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "databaseSoftwareImageIncludedPatches");
            }
            this.databaseSoftwareImageIncludedPatches = databaseSoftwareImageIncludedPatches;
            return this;
        }
        public Builder databaseSoftwareImageIncludedPatches(String... databaseSoftwareImageIncludedPatches) {
            return databaseSoftwareImageIncludedPatches(List.of(databaseSoftwareImageIncludedPatches));
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageOneOffPatches(List<String> databaseSoftwareImageOneOffPatches) {
            if (databaseSoftwareImageOneOffPatches == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "databaseSoftwareImageOneOffPatches");
            }
            this.databaseSoftwareImageOneOffPatches = databaseSoftwareImageOneOffPatches;
            return this;
        }
        public Builder databaseSoftwareImageOneOffPatches(String... databaseSoftwareImageOneOffPatches) {
            return databaseSoftwareImageOneOffPatches(List.of(databaseSoftwareImageOneOffPatches));
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            if (databaseVersion == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "databaseVersion");
            }
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageShapeFamily(String imageShapeFamily) {
            if (imageShapeFamily == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "imageShapeFamily");
            }
            this.imageShapeFamily = imageShapeFamily;
            return this;
        }
        @CustomType.Setter
        public Builder imageType(String imageType) {
            if (imageType == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "imageType");
            }
            this.imageType = imageType;
            return this;
        }
        @CustomType.Setter
        public Builder includedPatchesSummary(String includedPatchesSummary) {
            if (includedPatchesSummary == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "includedPatchesSummary");
            }
            this.includedPatchesSummary = includedPatchesSummary;
            return this;
        }
        @CustomType.Setter
        public Builder isUpgradeSupported(Boolean isUpgradeSupported) {
            if (isUpgradeSupported == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "isUpgradeSupported");
            }
            this.isUpgradeSupported = isUpgradeSupported;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lsInventory(String lsInventory) {
            if (lsInventory == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "lsInventory");
            }
            this.lsInventory = lsInventory;
            return this;
        }
        @CustomType.Setter
        public Builder patchSet(String patchSet) {
            if (patchSet == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "patchSet");
            }
            this.patchSet = patchSet;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDbHomeId(String sourceDbHomeId) {
            if (sourceDbHomeId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "sourceDbHomeId");
            }
            this.sourceDbHomeId = sourceDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDatabaseSoftwareImagesDatabaseSoftwareImage", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetDatabaseSoftwareImagesDatabaseSoftwareImage build() {
            final var _resultValue = new GetDatabaseSoftwareImagesDatabaseSoftwareImage();
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseSoftwareImageIncludedPatches = databaseSoftwareImageIncludedPatches;
            _resultValue.databaseSoftwareImageOneOffPatches = databaseSoftwareImageOneOffPatches;
            _resultValue.databaseVersion = databaseVersion;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.imageShapeFamily = imageShapeFamily;
            _resultValue.imageType = imageType;
            _resultValue.includedPatchesSummary = includedPatchesSummary;
            _resultValue.isUpgradeSupported = isUpgradeSupported;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lsInventory = lsInventory;
            _resultValue.patchSet = patchSet;
            _resultValue.sourceDbHomeId = sourceDbHomeId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
