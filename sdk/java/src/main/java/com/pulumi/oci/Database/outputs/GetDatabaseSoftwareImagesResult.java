// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDatabaseSoftwareImagesDatabaseSoftwareImage;
import com.pulumi.oci.Database.outputs.GetDatabaseSoftwareImagesFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseSoftwareImagesResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of database_software_images.
     * 
     */
    private @Nullable List<GetDatabaseSoftwareImagesDatabaseSoftwareImage> databaseSoftwareImages;
    /**
     * @return The user-friendly name for the database software image. The name does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetDatabaseSoftwareImagesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return To what shape the image is meant for.
     * 
     */
    private @Nullable String imageShapeFamily;
    /**
     * @return The type of software image. Can be grid or database.
     * 
     */
    private @Nullable String imageType;
    /**
     * @return True if this Database software image is supported for Upgrade.
     * 
     */
    private @Nullable Boolean isUpgradeSupported;
    /**
     * @return The current state of the database software image.
     * 
     */
    private @Nullable String state;

    private GetDatabaseSoftwareImagesResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of database_software_images.
     * 
     */
    public List<GetDatabaseSoftwareImagesDatabaseSoftwareImage> databaseSoftwareImages() {
        return this.databaseSoftwareImages == null ? List.of() : this.databaseSoftwareImages;
    }
    /**
     * @return The user-friendly name for the database software image. The name does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetDatabaseSoftwareImagesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return To what shape the image is meant for.
     * 
     */
    public Optional<String> imageShapeFamily() {
        return Optional.ofNullable(this.imageShapeFamily);
    }
    /**
     * @return The type of software image. Can be grid or database.
     * 
     */
    public Optional<String> imageType() {
        return Optional.ofNullable(this.imageType);
    }
    /**
     * @return True if this Database software image is supported for Upgrade.
     * 
     */
    public Optional<Boolean> isUpgradeSupported() {
        return Optional.ofNullable(this.isUpgradeSupported);
    }
    /**
     * @return The current state of the database software image.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseSoftwareImagesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetDatabaseSoftwareImagesDatabaseSoftwareImage> databaseSoftwareImages;
        private @Nullable String displayName;
        private @Nullable List<GetDatabaseSoftwareImagesFilter> filters;
        private @Nullable String id;
        private @Nullable String imageShapeFamily;
        private @Nullable String imageType;
        private @Nullable Boolean isUpgradeSupported;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetDatabaseSoftwareImagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSoftwareImages = defaults.databaseSoftwareImages;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.imageShapeFamily = defaults.imageShapeFamily;
    	      this.imageType = defaults.imageType;
    	      this.isUpgradeSupported = defaults.isUpgradeSupported;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImages(@Nullable List<GetDatabaseSoftwareImagesDatabaseSoftwareImage> databaseSoftwareImages) {
            this.databaseSoftwareImages = databaseSoftwareImages;
            return this;
        }
        public Builder databaseSoftwareImages(GetDatabaseSoftwareImagesDatabaseSoftwareImage... databaseSoftwareImages) {
            return databaseSoftwareImages(List.of(databaseSoftwareImages));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDatabaseSoftwareImagesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetDatabaseSoftwareImagesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageShapeFamily(@Nullable String imageShapeFamily) {
            this.imageShapeFamily = imageShapeFamily;
            return this;
        }
        @CustomType.Setter
        public Builder imageType(@Nullable String imageType) {
            this.imageType = imageType;
            return this;
        }
        @CustomType.Setter
        public Builder isUpgradeSupported(@Nullable Boolean isUpgradeSupported) {
            this.isUpgradeSupported = isUpgradeSupported;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public GetDatabaseSoftwareImagesResult build() {
            final var o = new GetDatabaseSoftwareImagesResult();
            o.compartmentId = compartmentId;
            o.databaseSoftwareImages = databaseSoftwareImages;
            o.displayName = displayName;
            o.filters = filters;
            o.id = id;
            o.imageShapeFamily = imageShapeFamily;
            o.imageType = imageType;
            o.isUpgradeSupported = isUpgradeSupported;
            o.state = state;
            return o;
        }
    }
}
