// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseUpgradeHistoryEntryResult {
    /**
     * @return The database upgrade action.
     * 
     */
    private String action;
    private String databaseId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Additional upgrade options supported by DBUA(Database Upgrade Assistant). Example: &#34;-upgradeTimezone false -keepEvents&#34;
     * 
     */
    private String options;
    /**
     * @return The source of the Oracle Database software to be used for the upgrade.
     * * Use `DB_VERSION` to specify a generally-available Oracle Database software version to upgrade the database.
     * * Use `DB_SOFTWARE_IMAGE` to specify a [database software image](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/databasesoftwareimage.htm) to upgrade the database.
     * 
     */
    private String source;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private String sourceDbHomeId;
    /**
     * @return Status of database upgrade history SUCCEEDED|IN_PROGRESS|FAILED.
     * 
     */
    private String state;
    /**
     * @return the database software image used for upgrading database.
     * 
     */
    private String targetDatabaseSoftwareImageId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private String targetDbHomeId;
    /**
     * @return A valid Oracle Database version. For a list of supported versions, use the ListDbVersions operation.
     * 
     */
    private String targetDbVersion;
    /**
     * @return The date and time when the database upgrade ended.
     * 
     */
    private String timeEnded;
    /**
     * @return The date and time when the database upgrade started.
     * 
     */
    private String timeStarted;
    private String upgradeHistoryEntryId;

    private GetDatabaseUpgradeHistoryEntryResult() {}
    /**
     * @return The database upgrade action.
     * 
     */
    public String action() {
        return this.action;
    }
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Additional upgrade options supported by DBUA(Database Upgrade Assistant). Example: &#34;-upgradeTimezone false -keepEvents&#34;
     * 
     */
    public String options() {
        return this.options;
    }
    /**
     * @return The source of the Oracle Database software to be used for the upgrade.
     * * Use `DB_VERSION` to specify a generally-available Oracle Database software version to upgrade the database.
     * * Use `DB_SOFTWARE_IMAGE` to specify a [database software image](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/databasesoftwareimage.htm) to upgrade the database.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public String sourceDbHomeId() {
        return this.sourceDbHomeId;
    }
    /**
     * @return Status of database upgrade history SUCCEEDED|IN_PROGRESS|FAILED.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return the database software image used for upgrading database.
     * 
     */
    public String targetDatabaseSoftwareImageId() {
        return this.targetDatabaseSoftwareImageId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public String targetDbHomeId() {
        return this.targetDbHomeId;
    }
    /**
     * @return A valid Oracle Database version. For a list of supported versions, use the ListDbVersions operation.
     * 
     */
    public String targetDbVersion() {
        return this.targetDbVersion;
    }
    /**
     * @return The date and time when the database upgrade ended.
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The date and time when the database upgrade started.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }
    public String upgradeHistoryEntryId() {
        return this.upgradeHistoryEntryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseUpgradeHistoryEntryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String databaseId;
        private String id;
        private String lifecycleDetails;
        private String options;
        private String source;
        private String sourceDbHomeId;
        private String state;
        private String targetDatabaseSoftwareImageId;
        private String targetDbHomeId;
        private String targetDbVersion;
        private String timeEnded;
        private String timeStarted;
        private String upgradeHistoryEntryId;
        public Builder() {}
        public Builder(GetDatabaseUpgradeHistoryEntryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.databaseId = defaults.databaseId;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.options = defaults.options;
    	      this.source = defaults.source;
    	      this.sourceDbHomeId = defaults.sourceDbHomeId;
    	      this.state = defaults.state;
    	      this.targetDatabaseSoftwareImageId = defaults.targetDatabaseSoftwareImageId;
    	      this.targetDbHomeId = defaults.targetDbHomeId;
    	      this.targetDbVersion = defaults.targetDbVersion;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.upgradeHistoryEntryId = defaults.upgradeHistoryEntryId;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder options(String options) {
            if (options == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "options");
            }
            this.options = options;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDbHomeId(String sourceDbHomeId) {
            if (sourceDbHomeId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "sourceDbHomeId");
            }
            this.sourceDbHomeId = sourceDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseSoftwareImageId(String targetDatabaseSoftwareImageId) {
            if (targetDatabaseSoftwareImageId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "targetDatabaseSoftwareImageId");
            }
            this.targetDatabaseSoftwareImageId = targetDatabaseSoftwareImageId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDbHomeId(String targetDbHomeId) {
            if (targetDbHomeId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "targetDbHomeId");
            }
            this.targetDbHomeId = targetDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDbVersion(String targetDbVersion) {
            if (targetDbVersion == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "targetDbVersion");
            }
            this.targetDbVersion = targetDbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            if (timeEnded == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "timeEnded");
            }
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            if (timeStarted == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "timeStarted");
            }
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeHistoryEntryId(String upgradeHistoryEntryId) {
            if (upgradeHistoryEntryId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUpgradeHistoryEntryResult", "upgradeHistoryEntryId");
            }
            this.upgradeHistoryEntryId = upgradeHistoryEntryId;
            return this;
        }
        public GetDatabaseUpgradeHistoryEntryResult build() {
            final var _resultValue = new GetDatabaseUpgradeHistoryEntryResult();
            _resultValue.action = action;
            _resultValue.databaseId = databaseId;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.options = options;
            _resultValue.source = source;
            _resultValue.sourceDbHomeId = sourceDbHomeId;
            _resultValue.state = state;
            _resultValue.targetDatabaseSoftwareImageId = targetDatabaseSoftwareImageId;
            _resultValue.targetDbHomeId = targetDbHomeId;
            _resultValue.targetDbVersion = targetDbVersion;
            _resultValue.timeEnded = timeEnded;
            _resultValue.timeStarted = timeStarted;
            _resultValue.upgradeHistoryEntryId = upgradeHistoryEntryId;
            return _resultValue;
        }
    }
}
