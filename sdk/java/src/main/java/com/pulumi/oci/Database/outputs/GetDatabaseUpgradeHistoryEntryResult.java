// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseUpgradeHistoryEntryResult {
    /**
     * @return The database upgrade action.
     * 
     */
    private @Nullable String action;
    private String databaseId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return Additional upgrade options supported by DBUA(Database Upgrade Assistant). Example: &#34;-upgradeTimezone false -keepEvents&#34;
     * 
     */
    private @Nullable String options;
    /**
     * @return The source of the Oracle Database software to be used for the upgrade.
     * * Use `DB_VERSION` to specify a generally-available Oracle Database software version to upgrade the database.
     * * Use `DB_SOFTWARE_IMAGE` to specify a [database software image](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/databasesoftwareimage.htm) to upgrade the database.
     * 
     */
    private @Nullable String source;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private @Nullable String sourceDbHomeId;
    /**
     * @return Status of database upgrade history SUCCEEDED|IN_PROGRESS|FAILED.
     * 
     */
    private @Nullable String state;
    /**
     * @return the database software image used for upgrading database.
     * 
     */
    private @Nullable String targetDatabaseSoftwareImageId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private @Nullable String targetDbHomeId;
    /**
     * @return A valid Oracle Database version. For a list of supported versions, use the ListDbVersions operation.
     * 
     */
    private @Nullable String targetDbVersion;
    /**
     * @return The date and time when the database upgrade ended.
     * 
     */
    private @Nullable String timeEnded;
    /**
     * @return The date and time when the database upgrade started.
     * 
     */
    private @Nullable String timeStarted;
    private String upgradeHistoryEntryId;

    private GetDatabaseUpgradeHistoryEntryResult() {}
    /**
     * @return The database upgrade action.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return Additional upgrade options supported by DBUA(Database Upgrade Assistant). Example: &#34;-upgradeTimezone false -keepEvents&#34;
     * 
     */
    public Optional<String> options() {
        return Optional.ofNullable(this.options);
    }
    /**
     * @return The source of the Oracle Database software to be used for the upgrade.
     * * Use `DB_VERSION` to specify a generally-available Oracle Database software version to upgrade the database.
     * * Use `DB_SOFTWARE_IMAGE` to specify a [database software image](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/databasesoftwareimage.htm) to upgrade the database.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public Optional<String> sourceDbHomeId() {
        return Optional.ofNullable(this.sourceDbHomeId);
    }
    /**
     * @return Status of database upgrade history SUCCEEDED|IN_PROGRESS|FAILED.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return the database software image used for upgrading database.
     * 
     */
    public Optional<String> targetDatabaseSoftwareImageId() {
        return Optional.ofNullable(this.targetDatabaseSoftwareImageId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public Optional<String> targetDbHomeId() {
        return Optional.ofNullable(this.targetDbHomeId);
    }
    /**
     * @return A valid Oracle Database version. For a list of supported versions, use the ListDbVersions operation.
     * 
     */
    public Optional<String> targetDbVersion() {
        return Optional.ofNullable(this.targetDbVersion);
    }
    /**
     * @return The date and time when the database upgrade ended.
     * 
     */
    public Optional<String> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }
    /**
     * @return The date and time when the database upgrade started.
     * 
     */
    public Optional<String> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }
    public String upgradeHistoryEntryId() {
        return this.upgradeHistoryEntryId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseUpgradeHistoryEntryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private String databaseId;
        private @Nullable String id;
        private @Nullable String lifecycleDetails;
        private @Nullable String options;
        private @Nullable String source;
        private @Nullable String sourceDbHomeId;
        private @Nullable String state;
        private @Nullable String targetDatabaseSoftwareImageId;
        private @Nullable String targetDbHomeId;
        private @Nullable String targetDbVersion;
        private @Nullable String timeEnded;
        private @Nullable String timeStarted;
        private String upgradeHistoryEntryId;
        public Builder() {}
        public Builder(GetDatabaseUpgradeHistoryEntryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.databaseId = defaults.databaseId;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.options = defaults.options;
    	      this.source = defaults.source;
    	      this.sourceDbHomeId = defaults.sourceDbHomeId;
    	      this.state = defaults.state;
    	      this.targetDatabaseSoftwareImageId = defaults.targetDatabaseSoftwareImageId;
    	      this.targetDbHomeId = defaults.targetDbHomeId;
    	      this.targetDbVersion = defaults.targetDbVersion;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
    	      this.upgradeHistoryEntryId = defaults.upgradeHistoryEntryId;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder options(@Nullable String options) {
            this.options = options;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDbHomeId(@Nullable String sourceDbHomeId) {
            this.sourceDbHomeId = sourceDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseSoftwareImageId(@Nullable String targetDatabaseSoftwareImageId) {
            this.targetDatabaseSoftwareImageId = targetDatabaseSoftwareImageId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDbHomeId(@Nullable String targetDbHomeId) {
            this.targetDbHomeId = targetDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDbVersion(@Nullable String targetDbVersion) {
            this.targetDbVersion = targetDbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(@Nullable String timeEnded) {
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(@Nullable String timeStarted) {
            this.timeStarted = timeStarted;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeHistoryEntryId(String upgradeHistoryEntryId) {
            this.upgradeHistoryEntryId = Objects.requireNonNull(upgradeHistoryEntryId);
            return this;
        }
        public GetDatabaseUpgradeHistoryEntryResult build() {
            final var o = new GetDatabaseUpgradeHistoryEntryResult();
            o.action = action;
            o.databaseId = databaseId;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.options = options;
            o.source = source;
            o.sourceDbHomeId = sourceDbHomeId;
            o.state = state;
            o.targetDatabaseSoftwareImageId = targetDatabaseSoftwareImageId;
            o.targetDbHomeId = targetDbHomeId;
            o.targetDbVersion = targetDbVersion;
            o.timeEnded = timeEnded;
            o.timeStarted = timeStarted;
            o.upgradeHistoryEntryId = upgradeHistoryEntryId;
            return o;
        }
    }
}
