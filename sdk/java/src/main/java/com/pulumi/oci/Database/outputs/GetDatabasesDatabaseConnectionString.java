// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabasesDatabaseConnectionString {
    /**
     * @return All connection strings to use to connect to the Database.
     * 
     */
    private Map<String,Object> allConnectionStrings;
    /**
     * @return Host name based CDB Connection String.
     * 
     */
    private String cdbDefault;
    /**
     * @return IP based CDB Connection String.
     * 
     */
    private String cdbIpDefault;

    private GetDatabasesDatabaseConnectionString() {}
    /**
     * @return All connection strings to use to connect to the Database.
     * 
     */
    public Map<String,Object> allConnectionStrings() {
        return this.allConnectionStrings;
    }
    /**
     * @return Host name based CDB Connection String.
     * 
     */
    public String cdbDefault() {
        return this.cdbDefault;
    }
    /**
     * @return IP based CDB Connection String.
     * 
     */
    public String cdbIpDefault() {
        return this.cdbIpDefault;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasesDatabaseConnectionString defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> allConnectionStrings;
        private String cdbDefault;
        private String cdbIpDefault;
        public Builder() {}
        public Builder(GetDatabasesDatabaseConnectionString defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allConnectionStrings = defaults.allConnectionStrings;
    	      this.cdbDefault = defaults.cdbDefault;
    	      this.cdbIpDefault = defaults.cdbIpDefault;
        }

        @CustomType.Setter
        public Builder allConnectionStrings(Map<String,Object> allConnectionStrings) {
            if (allConnectionStrings == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseConnectionString", "allConnectionStrings");
            }
            this.allConnectionStrings = allConnectionStrings;
            return this;
        }
        @CustomType.Setter
        public Builder cdbDefault(String cdbDefault) {
            if (cdbDefault == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseConnectionString", "cdbDefault");
            }
            this.cdbDefault = cdbDefault;
            return this;
        }
        @CustomType.Setter
        public Builder cdbIpDefault(String cdbIpDefault) {
            if (cdbIpDefault == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseConnectionString", "cdbIpDefault");
            }
            this.cdbIpDefault = cdbIpDefault;
            return this;
        }
        public GetDatabasesDatabaseConnectionString build() {
            final var _resultValue = new GetDatabasesDatabaseConnectionString();
            _resultValue.allConnectionStrings = allConnectionStrings;
            _resultValue.cdbDefault = cdbDefault;
            _resultValue.cdbIpDefault = cdbIpDefault;
            return _resultValue;
        }
    }
}
