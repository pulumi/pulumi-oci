// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabasesDatabaseDataGuardGroupMember {
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
     * 
     */
    private String applyLag;
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
     * 
     */
    private String applyRate;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database.
     * 
     */
    private String databaseId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private String dbSystemId;
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    private Boolean isActiveDataGuardEnabled;
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    private String role;
    /**
     * @return The rate at which redo logs are transported between the associated databases.  Example: `1 second`
     * 
     */
    private String transportLag;
    /**
     * @return The date and time when last redo transport has been done.
     * 
     */
    private String transportLagRefresh;
    /**
     * @return The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     */
    private String transportType;

    private GetDatabasesDatabaseDataGuardGroupMember() {}
    /**
     * @return The lag time between updates to the primary database and application of the redo data on the standby database, as computed by the reporting database.  Example: `1 second`
     * 
     */
    public String applyLag() {
        return this.applyLag;
    }
    /**
     * @return The rate at which redo logs are synced between the associated databases.  Example: `102.96 MByte/s`
     * 
     */
    public String applyRate() {
        return this.applyRate;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return True if active Data Guard is enabled.
     * 
     */
    public Boolean isActiveDataGuardEnabled() {
        return this.isActiveDataGuardEnabled;
    }
    /**
     * @return The role of the reporting database in this Data Guard association.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The rate at which redo logs are transported between the associated databases.  Example: `1 second`
     * 
     */
    public String transportLag() {
        return this.transportLag;
    }
    /**
     * @return The date and time when last redo transport has been done.
     * 
     */
    public String transportLagRefresh() {
        return this.transportLagRefresh;
    }
    /**
     * @return The redo transport type to use for this Data Guard association.  Valid values depend on the specified `protectionMode`:
     * * MAXIMUM_AVAILABILITY - SYNC or FASTSYNC
     * * MAXIMUM_PERFORMANCE - ASYNC
     * * MAXIMUM_PROTECTION - SYNC
     * 
     */
    public String transportType() {
        return this.transportType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasesDatabaseDataGuardGroupMember defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applyLag;
        private String applyRate;
        private String databaseId;
        private String dbSystemId;
        private Boolean isActiveDataGuardEnabled;
        private String role;
        private String transportLag;
        private String transportLagRefresh;
        private String transportType;
        public Builder() {}
        public Builder(GetDatabasesDatabaseDataGuardGroupMember defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyLag = defaults.applyLag;
    	      this.applyRate = defaults.applyRate;
    	      this.databaseId = defaults.databaseId;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.isActiveDataGuardEnabled = defaults.isActiveDataGuardEnabled;
    	      this.role = defaults.role;
    	      this.transportLag = defaults.transportLag;
    	      this.transportLagRefresh = defaults.transportLagRefresh;
    	      this.transportType = defaults.transportType;
        }

        @CustomType.Setter
        public Builder applyLag(String applyLag) {
            if (applyLag == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "applyLag");
            }
            this.applyLag = applyLag;
            return this;
        }
        @CustomType.Setter
        public Builder applyRate(String applyRate) {
            if (applyRate == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "applyRate");
            }
            this.applyRate = applyRate;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder isActiveDataGuardEnabled(Boolean isActiveDataGuardEnabled) {
            if (isActiveDataGuardEnabled == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "isActiveDataGuardEnabled");
            }
            this.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder transportLag(String transportLag) {
            if (transportLag == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "transportLag");
            }
            this.transportLag = transportLag;
            return this;
        }
        @CustomType.Setter
        public Builder transportLagRefresh(String transportLagRefresh) {
            if (transportLagRefresh == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "transportLagRefresh");
            }
            this.transportLagRefresh = transportLagRefresh;
            return this;
        }
        @CustomType.Setter
        public Builder transportType(String transportType) {
            if (transportType == null) {
              throw new MissingRequiredPropertyException("GetDatabasesDatabaseDataGuardGroupMember", "transportType");
            }
            this.transportType = transportType;
            return this;
        }
        public GetDatabasesDatabaseDataGuardGroupMember build() {
            final var _resultValue = new GetDatabasesDatabaseDataGuardGroupMember();
            _resultValue.applyLag = applyLag;
            _resultValue.applyRate = applyRate;
            _resultValue.databaseId = databaseId;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.isActiveDataGuardEnabled = isActiveDataGuardEnabled;
            _resultValue.role = role;
            _resultValue.transportLag = transportLag;
            _resultValue.transportLagRefresh = transportLagRefresh;
            _resultValue.transportType = transportType;
            return _resultValue;
        }
    }
}
