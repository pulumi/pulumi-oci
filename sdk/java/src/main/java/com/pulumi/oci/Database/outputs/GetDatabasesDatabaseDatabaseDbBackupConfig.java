// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabasesDatabaseDatabaseDbBackupConfig {
    /**
     * @return If set to true, configures automatic backups. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
     * 
     */
    private Boolean autoBackupEnabled;
    /**
     * @return Time window selected for initiating automatic backup for the database system. There are twelve available two-hour time windows. If no option is selected, a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    private String autoBackupWindow;
    /**
     * @return Day of the week the full backup should be applied on the database system. If no option is selected, the value is null and we will default to Sunday.
     * 
     */
    private String autoFullBackupDay;
    /**
     * @return Time window selected for initiating full backup for the database system. There are twelve available two-hour time windows. If no option is selected, the value is null and a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    private String autoFullBackupWindow;
    /**
     * @return This defines when the backups will be deleted. - IMMEDIATE option keep the backup for predefined time i.e 72 hours and then delete permanently... - RETAIN will keep the backups as per the policy defined for database backups.
     * 
     */
    private String backupDeletionPolicy;
    /**
     * @return Backup destination details.
     * 
     */
    private List<GetDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail> backupDestinationDetails;
    /**
     * @return Number of days between the current and the earliest point of recoverability covered by automatic backups. This value applies to automatic backups only. After a new automatic backup has been created, Oracle removes old automatic backups that are created before the window. When the value is updated, it is applied to all existing automatic backups.
     * 
     */
    private Integer recoveryWindowInDays;
    /**
     * @return If set to true, configures automatic full backups in the local region (the region of the DB system) for the first backup run immediately.
     * 
     */
    private Boolean runImmediateFullBackup;

    private GetDatabasesDatabaseDatabaseDbBackupConfig() {}
    /**
     * @return If set to true, configures automatic backups. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
     * 
     */
    public Boolean autoBackupEnabled() {
        return this.autoBackupEnabled;
    }
    /**
     * @return Time window selected for initiating automatic backup for the database system. There are twelve available two-hour time windows. If no option is selected, a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    public String autoBackupWindow() {
        return this.autoBackupWindow;
    }
    /**
     * @return Day of the week the full backup should be applied on the database system. If no option is selected, the value is null and we will default to Sunday.
     * 
     */
    public String autoFullBackupDay() {
        return this.autoFullBackupDay;
    }
    /**
     * @return Time window selected for initiating full backup for the database system. There are twelve available two-hour time windows. If no option is selected, the value is null and a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).  Example: `SLOT_TWO`
     * 
     */
    public String autoFullBackupWindow() {
        return this.autoFullBackupWindow;
    }
    /**
     * @return This defines when the backups will be deleted. - IMMEDIATE option keep the backup for predefined time i.e 72 hours and then delete permanently... - RETAIN will keep the backups as per the policy defined for database backups.
     * 
     */
    public String backupDeletionPolicy() {
        return this.backupDeletionPolicy;
    }
    /**
     * @return Backup destination details.
     * 
     */
    public List<GetDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail> backupDestinationDetails() {
        return this.backupDestinationDetails;
    }
    /**
     * @return Number of days between the current and the earliest point of recoverability covered by automatic backups. This value applies to automatic backups only. After a new automatic backup has been created, Oracle removes old automatic backups that are created before the window. When the value is updated, it is applied to all existing automatic backups.
     * 
     */
    public Integer recoveryWindowInDays() {
        return this.recoveryWindowInDays;
    }
    /**
     * @return If set to true, configures automatic full backups in the local region (the region of the DB system) for the first backup run immediately.
     * 
     */
    public Boolean runImmediateFullBackup() {
        return this.runImmediateFullBackup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasesDatabaseDatabaseDbBackupConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autoBackupEnabled;
        private String autoBackupWindow;
        private String autoFullBackupDay;
        private String autoFullBackupWindow;
        private String backupDeletionPolicy;
        private List<GetDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail> backupDestinationDetails;
        private Integer recoveryWindowInDays;
        private Boolean runImmediateFullBackup;
        public Builder() {}
        public Builder(GetDatabasesDatabaseDatabaseDbBackupConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoBackupEnabled = defaults.autoBackupEnabled;
    	      this.autoBackupWindow = defaults.autoBackupWindow;
    	      this.autoFullBackupDay = defaults.autoFullBackupDay;
    	      this.autoFullBackupWindow = defaults.autoFullBackupWindow;
    	      this.backupDeletionPolicy = defaults.backupDeletionPolicy;
    	      this.backupDestinationDetails = defaults.backupDestinationDetails;
    	      this.recoveryWindowInDays = defaults.recoveryWindowInDays;
    	      this.runImmediateFullBackup = defaults.runImmediateFullBackup;
        }

        @CustomType.Setter
        public Builder autoBackupEnabled(Boolean autoBackupEnabled) {
            this.autoBackupEnabled = Objects.requireNonNull(autoBackupEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder autoBackupWindow(String autoBackupWindow) {
            this.autoBackupWindow = Objects.requireNonNull(autoBackupWindow);
            return this;
        }
        @CustomType.Setter
        public Builder autoFullBackupDay(String autoFullBackupDay) {
            this.autoFullBackupDay = Objects.requireNonNull(autoFullBackupDay);
            return this;
        }
        @CustomType.Setter
        public Builder autoFullBackupWindow(String autoFullBackupWindow) {
            this.autoFullBackupWindow = Objects.requireNonNull(autoFullBackupWindow);
            return this;
        }
        @CustomType.Setter
        public Builder backupDeletionPolicy(String backupDeletionPolicy) {
            this.backupDeletionPolicy = Objects.requireNonNull(backupDeletionPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder backupDestinationDetails(List<GetDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail> backupDestinationDetails) {
            this.backupDestinationDetails = Objects.requireNonNull(backupDestinationDetails);
            return this;
        }
        public Builder backupDestinationDetails(GetDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail... backupDestinationDetails) {
            return backupDestinationDetails(List.of(backupDestinationDetails));
        }
        @CustomType.Setter
        public Builder recoveryWindowInDays(Integer recoveryWindowInDays) {
            this.recoveryWindowInDays = Objects.requireNonNull(recoveryWindowInDays);
            return this;
        }
        @CustomType.Setter
        public Builder runImmediateFullBackup(Boolean runImmediateFullBackup) {
            this.runImmediateFullBackup = Objects.requireNonNull(runImmediateFullBackup);
            return this;
        }
        public GetDatabasesDatabaseDatabaseDbBackupConfig build() {
            final var o = new GetDatabasesDatabaseDatabaseDbBackupConfig();
            o.autoBackupEnabled = autoBackupEnabled;
            o.autoBackupWindow = autoBackupWindow;
            o.autoFullBackupDay = autoFullBackupDay;
            o.autoFullBackupWindow = autoFullBackupWindow;
            o.backupDeletionPolicy = backupDeletionPolicy;
            o.backupDestinationDetails = backupDestinationDetails;
            o.recoveryWindowInDays = recoveryWindowInDays;
            o.runImmediateFullBackup = runImmediateFullBackup;
            return o;
        }
    }
}
