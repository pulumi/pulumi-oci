// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDbHomesDbHomeDatabase;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDbHomesDbHome {
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private String databaseSoftwareImageId;
    private List<GetDbHomesDbHomeDatabase> databases;
    private String dbHomeId;
    /**
     * @return The location of the Oracle Database Home.
     * 
     */
    private String dbHomeLocation;
    /**
     * @return The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
     * 
     */
    private String dbSystemId;
    /**
     * @return A filter to return only DB Homes that match the specified dbVersion.
     * 
     */
    private String dbVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    private String displayName;
    private Boolean enableDatabaseDelete;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private String id;
    private Boolean isDesupportedVersion;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private String kmsKeyId;
    private String kmsKeyVersionId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last patch history. This value is updated as soon as a patch operation is started.
     * 
     */
    private String lastPatchHistoryEntryId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    private String source;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    /**
     * @return The date and time the Database Home was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    private String vmClusterId;

    private GetDbHomesDbHome() {}
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    public List<GetDbHomesDbHomeDatabase> databases() {
        return this.databases;
    }
    public String dbHomeId() {
        return this.dbHomeId;
    }
    /**
     * @return The location of the Oracle Database Home.
     * 
     */
    public String dbHomeLocation() {
        return this.dbHomeLocation;
    }
    /**
     * @return The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return A filter to return only DB Homes that match the specified dbVersion.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public Boolean enableDatabaseDelete() {
        return this.enableDatabaseDelete;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isDesupportedVersion() {
        return this.isDesupportedVersion;
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public String kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last patch history. This value is updated as soon as a patch operation is started.
     * 
     */
    public String lastPatchHistoryEntryId() {
        return this.lastPatchHistoryEntryId;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String source() {
        return this.source;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the Database Home was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    public String vmClusterId() {
        return this.vmClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbHomesDbHome defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String databaseSoftwareImageId;
        private List<GetDbHomesDbHomeDatabase> databases;
        private String dbHomeId;
        private String dbHomeLocation;
        private String dbSystemId;
        private String dbVersion;
        private Map<String,Object> definedTags;
        private String displayName;
        private Boolean enableDatabaseDelete;
        private Map<String,Object> freeformTags;
        private String id;
        private Boolean isDesupportedVersion;
        private String kmsKeyId;
        private String kmsKeyVersionId;
        private String lastPatchHistoryEntryId;
        private String lifecycleDetails;
        private String source;
        private String state;
        private String timeCreated;
        private String vmClusterId;
        public Builder() {}
        public Builder(GetDbHomesDbHome defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.databases = defaults.databases;
    	      this.dbHomeId = defaults.dbHomeId;
    	      this.dbHomeLocation = defaults.dbHomeLocation;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbVersion = defaults.dbVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.enableDatabaseDelete = defaults.enableDatabaseDelete;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isDesupportedVersion = defaults.isDesupportedVersion;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lastPatchHistoryEntryId = defaults.lastPatchHistoryEntryId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.source = defaults.source;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.vmClusterId = defaults.vmClusterId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            this.databaseSoftwareImageId = Objects.requireNonNull(databaseSoftwareImageId);
            return this;
        }
        @CustomType.Setter
        public Builder databases(List<GetDbHomesDbHomeDatabase> databases) {
            this.databases = Objects.requireNonNull(databases);
            return this;
        }
        public Builder databases(GetDbHomesDbHomeDatabase... databases) {
            return databases(List.of(databases));
        }
        @CustomType.Setter
        public Builder dbHomeId(String dbHomeId) {
            this.dbHomeId = Objects.requireNonNull(dbHomeId);
            return this;
        }
        @CustomType.Setter
        public Builder dbHomeLocation(String dbHomeLocation) {
            this.dbHomeLocation = Objects.requireNonNull(dbHomeLocation);
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            this.dbSystemId = Objects.requireNonNull(dbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            this.dbVersion = Objects.requireNonNull(dbVersion);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder enableDatabaseDelete(Boolean enableDatabaseDelete) {
            this.enableDatabaseDelete = Objects.requireNonNull(enableDatabaseDelete);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDesupportedVersion(Boolean isDesupportedVersion) {
            this.isDesupportedVersion = Objects.requireNonNull(isDesupportedVersion);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            this.kmsKeyId = Objects.requireNonNull(kmsKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            this.kmsKeyVersionId = Objects.requireNonNull(kmsKeyVersionId);
            return this;
        }
        @CustomType.Setter
        public Builder lastPatchHistoryEntryId(String lastPatchHistoryEntryId) {
            this.lastPatchHistoryEntryId = Objects.requireNonNull(lastPatchHistoryEntryId);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder vmClusterId(String vmClusterId) {
            this.vmClusterId = Objects.requireNonNull(vmClusterId);
            return this;
        }
        public GetDbHomesDbHome build() {
            final var o = new GetDbHomesDbHome();
            o.compartmentId = compartmentId;
            o.databaseSoftwareImageId = databaseSoftwareImageId;
            o.databases = databases;
            o.dbHomeId = dbHomeId;
            o.dbHomeLocation = dbHomeLocation;
            o.dbSystemId = dbSystemId;
            o.dbVersion = dbVersion;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.enableDatabaseDelete = enableDatabaseDelete;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isDesupportedVersion = isDesupportedVersion;
            o.kmsKeyId = kmsKeyId;
            o.kmsKeyVersionId = kmsKeyVersionId;
            o.lastPatchHistoryEntryId = lastPatchHistoryEntryId;
            o.lifecycleDetails = lifecycleDetails;
            o.source = source;
            o.state = state;
            o.timeCreated = timeCreated;
            o.vmClusterId = vmClusterId;
            return o;
        }
    }
}
