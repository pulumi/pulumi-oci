// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetDbHomesDbHomeDatabaseConnectionString;
import com.pulumi.oci.Database.outputs.GetDbHomesDbHomeDatabaseDbBackupConfig;
import com.pulumi.oci.Database.outputs.GetDbHomesDbHomeDatabaseEncryptionKeyLocationDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDbHomesDbHomeDatabase {
    private String adminPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup. Specify a backupId to list only the DB systems or DB homes that support creating a database using this backup in this compartment.
     * 
     */
    private String backupId;
    private String backupTdePassword;
    private String characterSet;
    private List<GetDbHomesDbHomeDatabaseConnectionString> connectionStrings;
    private String databaseId;
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    private String databaseSoftwareImageId;
    private List<GetDbHomesDbHomeDatabaseDbBackupConfig> dbBackupConfigs;
    private String dbName;
    private String dbUniqueName;
    private String dbWorkload;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> definedTags;
    private List<GetDbHomesDbHomeDatabaseEncryptionKeyLocationDetail> encryptionKeyLocationDetails;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    private String id;
    private String keyStoreId;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private String kmsKeyId;
    private String kmsKeyVersionId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    private String ncharacterSet;
    /**
     * @return List of one-off patches for Database Homes.
     * 
     */
    private List<String> oneOffPatches;
    private String pdbName;
    private List<String> pluggableDatabases;
    private String sidPrefix;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    private String tdeWalletPassword;
    /**
     * @return The date and time the Database Home was created.
     * 
     */
    private String timeCreated;
    private String timeStampForPointInTimeRecovery;
    private String vaultId;

    private GetDbHomesDbHomeDatabase() {}
    public String adminPassword() {
        return this.adminPassword;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup. Specify a backupId to list only the DB systems or DB homes that support creating a database using this backup in this compartment.
     * 
     */
    public String backupId() {
        return this.backupId;
    }
    public String backupTdePassword() {
        return this.backupTdePassword;
    }
    public String characterSet() {
        return this.characterSet;
    }
    public List<GetDbHomesDbHomeDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The database software image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     * 
     */
    public String databaseSoftwareImageId() {
        return this.databaseSoftwareImageId;
    }
    public List<GetDbHomesDbHomeDatabaseDbBackupConfig> dbBackupConfigs() {
        return this.dbBackupConfigs;
    }
    public String dbName() {
        return this.dbName;
    }
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    public String dbWorkload() {
        return this.dbWorkload;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    public List<GetDbHomesDbHomeDatabaseEncryptionKeyLocationDetail> encryptionKeyLocationDetails() {
        return this.encryptionKeyLocationDetails;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     * 
     */
    public String id() {
        return this.id;
    }
    public String keyStoreId() {
        return this.keyStoreId;
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public String kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * @return List of one-off patches for Database Homes.
     * 
     */
    public List<String> oneOffPatches() {
        return this.oneOffPatches;
    }
    public String pdbName() {
        return this.pdbName;
    }
    public List<String> pluggableDatabases() {
        return this.pluggableDatabases;
    }
    public String sidPrefix() {
        return this.sidPrefix;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    public String tdeWalletPassword() {
        return this.tdeWalletPassword;
    }
    /**
     * @return The date and time the Database Home was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    public String timeStampForPointInTimeRecovery() {
        return this.timeStampForPointInTimeRecovery;
    }
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbHomesDbHomeDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminPassword;
        private String backupId;
        private String backupTdePassword;
        private String characterSet;
        private List<GetDbHomesDbHomeDatabaseConnectionString> connectionStrings;
        private String databaseId;
        private String databaseSoftwareImageId;
        private List<GetDbHomesDbHomeDatabaseDbBackupConfig> dbBackupConfigs;
        private String dbName;
        private String dbUniqueName;
        private String dbWorkload;
        private Map<String,String> definedTags;
        private List<GetDbHomesDbHomeDatabaseEncryptionKeyLocationDetail> encryptionKeyLocationDetails;
        private Map<String,String> freeformTags;
        private String id;
        private String keyStoreId;
        private String kmsKeyId;
        private String kmsKeyVersionId;
        private String lifecycleDetails;
        private String ncharacterSet;
        private List<String> oneOffPatches;
        private String pdbName;
        private List<String> pluggableDatabases;
        private String sidPrefix;
        private String state;
        private String tdeWalletPassword;
        private String timeCreated;
        private String timeStampForPointInTimeRecovery;
        private String vaultId;
        public Builder() {}
        public Builder(GetDbHomesDbHomeDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.backupId = defaults.backupId;
    	      this.backupTdePassword = defaults.backupTdePassword;
    	      this.characterSet = defaults.characterSet;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.dbBackupConfigs = defaults.dbBackupConfigs;
    	      this.dbName = defaults.dbName;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.encryptionKeyLocationDetails = defaults.encryptionKeyLocationDetails;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.keyStoreId = defaults.keyStoreId;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.oneOffPatches = defaults.oneOffPatches;
    	      this.pdbName = defaults.pdbName;
    	      this.pluggableDatabases = defaults.pluggableDatabases;
    	      this.sidPrefix = defaults.sidPrefix;
    	      this.state = defaults.state;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStampForPointInTimeRecovery = defaults.timeStampForPointInTimeRecovery;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder adminPassword(String adminPassword) {
            if (adminPassword == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "adminPassword");
            }
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder backupId(String backupId) {
            if (backupId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "backupId");
            }
            this.backupId = backupId;
            return this;
        }
        @CustomType.Setter
        public Builder backupTdePassword(String backupTdePassword) {
            if (backupTdePassword == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "backupTdePassword");
            }
            this.backupTdePassword = backupTdePassword;
            return this;
        }
        @CustomType.Setter
        public Builder characterSet(String characterSet) {
            if (characterSet == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "characterSet");
            }
            this.characterSet = characterSet;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(List<GetDbHomesDbHomeDatabaseConnectionString> connectionStrings) {
            if (connectionStrings == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "connectionStrings");
            }
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(GetDbHomesDbHomeDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(String databaseSoftwareImageId) {
            if (databaseSoftwareImageId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "databaseSoftwareImageId");
            }
            this.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }
        @CustomType.Setter
        public Builder dbBackupConfigs(List<GetDbHomesDbHomeDatabaseDbBackupConfig> dbBackupConfigs) {
            if (dbBackupConfigs == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "dbBackupConfigs");
            }
            this.dbBackupConfigs = dbBackupConfigs;
            return this;
        }
        public Builder dbBackupConfigs(GetDbHomesDbHomeDatabaseDbBackupConfig... dbBackupConfigs) {
            return dbBackupConfigs(List.of(dbBackupConfigs));
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            if (dbName == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "dbName");
            }
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(String dbUniqueName) {
            if (dbUniqueName == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "dbUniqueName");
            }
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dbWorkload(String dbWorkload) {
            if (dbWorkload == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "dbWorkload");
            }
            this.dbWorkload = dbWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKeyLocationDetails(List<GetDbHomesDbHomeDatabaseEncryptionKeyLocationDetail> encryptionKeyLocationDetails) {
            if (encryptionKeyLocationDetails == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "encryptionKeyLocationDetails");
            }
            this.encryptionKeyLocationDetails = encryptionKeyLocationDetails;
            return this;
        }
        public Builder encryptionKeyLocationDetails(GetDbHomesDbHomeDatabaseEncryptionKeyLocationDetail... encryptionKeyLocationDetails) {
            return encryptionKeyLocationDetails(List.of(encryptionKeyLocationDetails));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyStoreId(String keyStoreId) {
            if (keyStoreId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "keyStoreId");
            }
            this.keyStoreId = keyStoreId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            if (kmsKeyVersionId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "kmsKeyVersionId");
            }
            this.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(String ncharacterSet) {
            if (ncharacterSet == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "ncharacterSet");
            }
            this.ncharacterSet = ncharacterSet;
            return this;
        }
        @CustomType.Setter
        public Builder oneOffPatches(List<String> oneOffPatches) {
            if (oneOffPatches == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "oneOffPatches");
            }
            this.oneOffPatches = oneOffPatches;
            return this;
        }
        public Builder oneOffPatches(String... oneOffPatches) {
            return oneOffPatches(List.of(oneOffPatches));
        }
        @CustomType.Setter
        public Builder pdbName(String pdbName) {
            if (pdbName == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "pdbName");
            }
            this.pdbName = pdbName;
            return this;
        }
        @CustomType.Setter
        public Builder pluggableDatabases(List<String> pluggableDatabases) {
            if (pluggableDatabases == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "pluggableDatabases");
            }
            this.pluggableDatabases = pluggableDatabases;
            return this;
        }
        public Builder pluggableDatabases(String... pluggableDatabases) {
            return pluggableDatabases(List.of(pluggableDatabases));
        }
        @CustomType.Setter
        public Builder sidPrefix(String sidPrefix) {
            if (sidPrefix == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "sidPrefix");
            }
            this.sidPrefix = sidPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            if (tdeWalletPassword == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "tdeWalletPassword");
            }
            this.tdeWalletPassword = tdeWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeStampForPointInTimeRecovery(String timeStampForPointInTimeRecovery) {
            if (timeStampForPointInTimeRecovery == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "timeStampForPointInTimeRecovery");
            }
            this.timeStampForPointInTimeRecovery = timeStampForPointInTimeRecovery;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            if (vaultId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesDbHomeDatabase", "vaultId");
            }
            this.vaultId = vaultId;
            return this;
        }
        public GetDbHomesDbHomeDatabase build() {
            final var _resultValue = new GetDbHomesDbHomeDatabase();
            _resultValue.adminPassword = adminPassword;
            _resultValue.backupId = backupId;
            _resultValue.backupTdePassword = backupTdePassword;
            _resultValue.characterSet = characterSet;
            _resultValue.connectionStrings = connectionStrings;
            _resultValue.databaseId = databaseId;
            _resultValue.databaseSoftwareImageId = databaseSoftwareImageId;
            _resultValue.dbBackupConfigs = dbBackupConfigs;
            _resultValue.dbName = dbName;
            _resultValue.dbUniqueName = dbUniqueName;
            _resultValue.dbWorkload = dbWorkload;
            _resultValue.definedTags = definedTags;
            _resultValue.encryptionKeyLocationDetails = encryptionKeyLocationDetails;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.keyStoreId = keyStoreId;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.kmsKeyVersionId = kmsKeyVersionId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.ncharacterSet = ncharacterSet;
            _resultValue.oneOffPatches = oneOffPatches;
            _resultValue.pdbName = pdbName;
            _resultValue.pluggableDatabases = pluggableDatabases;
            _resultValue.sidPrefix = sidPrefix;
            _resultValue.state = state;
            _resultValue.tdeWalletPassword = tdeWalletPassword;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeStampForPointInTimeRecovery = timeStampForPointInTimeRecovery;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
