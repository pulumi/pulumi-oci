// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetDbHomesDbHome;
import com.pulumi.oci.Database.outputs.GetDbHomesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbHomesResult {
    private @Nullable String backupId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of db_homes.
     * 
     */
    private List<GetDbHomesDbHome> dbHomes;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return The Oracle Database version.
     * 
     */
    private @Nullable String dbVersion;
    /**
     * @return The user-provided name for the Database Home. The name does not need to be unique.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetDbHomesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current state of the Database Home.
     * 
     */
    private @Nullable String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    private @Nullable String vmClusterId;

    private GetDbHomesResult() {}
    public Optional<String> backupId() {
        return Optional.ofNullable(this.backupId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of db_homes.
     * 
     */
    public List<GetDbHomesDbHome> dbHomes() {
        return this.dbHomes;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public Optional<String> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }
    /**
     * @return The user-provided name for the Database Home. The name does not need to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetDbHomesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of the Database Home.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
     * 
     */
    public Optional<String> vmClusterId() {
        return Optional.ofNullable(this.vmClusterId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbHomesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backupId;
        private String compartmentId;
        private List<GetDbHomesDbHome> dbHomes;
        private @Nullable String dbSystemId;
        private @Nullable String dbVersion;
        private @Nullable String displayName;
        private @Nullable List<GetDbHomesFilter> filters;
        private String id;
        private @Nullable String state;
        private @Nullable String vmClusterId;
        public Builder() {}
        public Builder(GetDbHomesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupId = defaults.backupId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbHomes = defaults.dbHomes;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbVersion = defaults.dbVersion;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.vmClusterId = defaults.vmClusterId;
        }

        @CustomType.Setter
        public Builder backupId(@Nullable String backupId) {

            this.backupId = backupId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDbHomesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbHomes(List<GetDbHomesDbHome> dbHomes) {
            if (dbHomes == null) {
              throw new MissingRequiredPropertyException("GetDbHomesResult", "dbHomes");
            }
            this.dbHomes = dbHomes;
            return this;
        }
        public Builder dbHomes(GetDbHomesDbHome... dbHomes) {
            return dbHomes(List.of(dbHomes));
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {

            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(@Nullable String dbVersion) {

            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDbHomesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDbHomesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbHomesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder vmClusterId(@Nullable String vmClusterId) {

            this.vmClusterId = vmClusterId;
            return this;
        }
        public GetDbHomesResult build() {
            final var _resultValue = new GetDbHomesResult();
            _resultValue.backupId = backupId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.dbHomes = dbHomes;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.dbVersion = dbVersion;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.vmClusterId = vmClusterId;
            return _resultValue;
        }
    }
}
