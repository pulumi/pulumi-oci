// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetDbNodeConsoleConnectionsConsoleConnection;
import com.pulumi.oci.Database.outputs.GetDbNodeConsoleConnectionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetDbNodeConsoleConnectionsResult {
    /**
     * @return The list of console_connections.
     * 
     */
    private List<GetDbNodeConsoleConnectionsConsoleConnection> consoleConnections;
    /**
     * @return The OCID of the database node.
     * 
     */
    private String dbNodeId;
    private @Nullable List<GetDbNodeConsoleConnectionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;

    private GetDbNodeConsoleConnectionsResult() {}
    /**
     * @return The list of console_connections.
     * 
     */
    public List<GetDbNodeConsoleConnectionsConsoleConnection> consoleConnections() {
        return this.consoleConnections;
    }
    /**
     * @return The OCID of the database node.
     * 
     */
    public String dbNodeId() {
        return this.dbNodeId;
    }
    public List<GetDbNodeConsoleConnectionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbNodeConsoleConnectionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDbNodeConsoleConnectionsConsoleConnection> consoleConnections;
        private String dbNodeId;
        private @Nullable List<GetDbNodeConsoleConnectionsFilter> filters;
        private String id;
        public Builder() {}
        public Builder(GetDbNodeConsoleConnectionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consoleConnections = defaults.consoleConnections;
    	      this.dbNodeId = defaults.dbNodeId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
        }

        @CustomType.Setter
        public Builder consoleConnections(List<GetDbNodeConsoleConnectionsConsoleConnection> consoleConnections) {
            if (consoleConnections == null) {
              throw new MissingRequiredPropertyException("GetDbNodeConsoleConnectionsResult", "consoleConnections");
            }
            this.consoleConnections = consoleConnections;
            return this;
        }
        public Builder consoleConnections(GetDbNodeConsoleConnectionsConsoleConnection... consoleConnections) {
            return consoleConnections(List.of(consoleConnections));
        }
        @CustomType.Setter
        public Builder dbNodeId(String dbNodeId) {
            if (dbNodeId == null) {
              throw new MissingRequiredPropertyException("GetDbNodeConsoleConnectionsResult", "dbNodeId");
            }
            this.dbNodeId = dbNodeId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDbNodeConsoleConnectionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDbNodeConsoleConnectionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbNodeConsoleConnectionsResult", "id");
            }
            this.id = id;
            return this;
        }
        public GetDbNodeConsoleConnectionsResult build() {
            final var _resultValue = new GetDbNodeConsoleConnectionsResult();
            _resultValue.consoleConnections = consoleConnections;
            _resultValue.dbNodeId = dbNodeId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            return _resultValue;
        }
    }
}
