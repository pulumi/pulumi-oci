// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbSystemShapesDbSystemShape {
    /**
     * @return The maximum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    private Integer availableCoreCount;
    /**
     * @return The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.
     * 
     */
    private Integer availableCoreCountPerNode;
    /**
     * @return The maximum DATA storage that can be enabled for this shape.
     * 
     */
    private Integer availableDataStorageInTbs;
    /**
     * @return The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private Double availableDataStoragePerServerInTbs;
    /**
     * @return The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private Integer availableDbNodePerNodeInGbs;
    /**
     * @return The maximum Db Node storage that can be enabled for this shape.
     * 
     */
    private Integer availableDbNodeStorageInGbs;
    /**
     * @return The maximum memory that can be enabled for this shape.
     * 
     */
    private Integer availableMemoryInGbs;
    /**
     * @return The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private Integer availableMemoryPerNodeInGbs;
    /**
     * @return The discrete number by which the CPU core count for this shape can be increased or decreased.
     * 
     */
    private Integer coreCountIncrement;
    /**
     * @return The maximum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    private Integer maxStorageCount;
    /**
     * @return The maximum number of compute servers available for this shape.
     * 
     */
    private Integer maximumNodeCount;
    /**
     * @return The minimum number of CPU cores that can be enabled per node for this shape.
     * 
     */
    private Integer minCoreCountPerNode;
    /**
     * @return The minimum data storage that need be allocated for this shape.
     * 
     */
    private Integer minDataStorageInTbs;
    /**
     * @return The minimum Db Node storage that need be allocated per node for this shape.
     * 
     */
    private Integer minDbNodeStoragePerNodeInGbs;
    /**
     * @return The minimum memory that need be allocated per node for this shape.
     * 
     */
    private Integer minMemoryPerNodeInGbs;
    /**
     * @return The minimum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    private Integer minStorageCount;
    /**
     * @return The minimum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    private Integer minimumCoreCount;
    /**
     * @return The minimum number of compute servers available for this shape.
     * 
     */
    private Integer minimumNodeCount;
    /**
     * @return The name of the shape used for the DB system.
     * 
     */
    private String name;
    /**
     * @return Deprecated. Use `name` instead of `shape`.
     * 
     * @deprecated
     * The &#39;shape&#39; field has been deprecated. Please use &#39;name&#39; instead.
     * 
     */
    @Deprecated /* The 'shape' field has been deprecated. Please use 'name' instead. */
    private String shape;
    /**
     * @return The family of the shape used for the DB system.
     * 
     */
    private String shapeFamily;
    /**
     * @return The shape type for the virtual machine DB system. Shape type is determined by CPU hardware. Valid values are `AMD` , `INTEL` or `INTEL_FLEX_X9`.
     * 
     */
    private String shapeType;

    private GetDbSystemShapesDbSystemShape() {}
    /**
     * @return The maximum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    public Integer availableCoreCount() {
        return this.availableCoreCount;
    }
    /**
     * @return The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.
     * 
     */
    public Integer availableCoreCountPerNode() {
        return this.availableCoreCountPerNode;
    }
    /**
     * @return The maximum DATA storage that can be enabled for this shape.
     * 
     */
    public Integer availableDataStorageInTbs() {
        return this.availableDataStorageInTbs;
    }
    /**
     * @return The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Double availableDataStoragePerServerInTbs() {
        return this.availableDataStoragePerServerInTbs;
    }
    /**
     * @return The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Integer availableDbNodePerNodeInGbs() {
        return this.availableDbNodePerNodeInGbs;
    }
    /**
     * @return The maximum Db Node storage that can be enabled for this shape.
     * 
     */
    public Integer availableDbNodeStorageInGbs() {
        return this.availableDbNodeStorageInGbs;
    }
    /**
     * @return The maximum memory that can be enabled for this shape.
     * 
     */
    public Integer availableMemoryInGbs() {
        return this.availableMemoryInGbs;
    }
    /**
     * @return The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Integer availableMemoryPerNodeInGbs() {
        return this.availableMemoryPerNodeInGbs;
    }
    /**
     * @return The discrete number by which the CPU core count for this shape can be increased or decreased.
     * 
     */
    public Integer coreCountIncrement() {
        return this.coreCountIncrement;
    }
    /**
     * @return The maximum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    public Integer maxStorageCount() {
        return this.maxStorageCount;
    }
    /**
     * @return The maximum number of compute servers available for this shape.
     * 
     */
    public Integer maximumNodeCount() {
        return this.maximumNodeCount;
    }
    /**
     * @return The minimum number of CPU cores that can be enabled per node for this shape.
     * 
     */
    public Integer minCoreCountPerNode() {
        return this.minCoreCountPerNode;
    }
    /**
     * @return The minimum data storage that need be allocated for this shape.
     * 
     */
    public Integer minDataStorageInTbs() {
        return this.minDataStorageInTbs;
    }
    /**
     * @return The minimum Db Node storage that need be allocated per node for this shape.
     * 
     */
    public Integer minDbNodeStoragePerNodeInGbs() {
        return this.minDbNodeStoragePerNodeInGbs;
    }
    /**
     * @return The minimum memory that need be allocated per node for this shape.
     * 
     */
    public Integer minMemoryPerNodeInGbs() {
        return this.minMemoryPerNodeInGbs;
    }
    /**
     * @return The minimum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    public Integer minStorageCount() {
        return this.minStorageCount;
    }
    /**
     * @return The minimum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    public Integer minimumCoreCount() {
        return this.minimumCoreCount;
    }
    /**
     * @return The minimum number of compute servers available for this shape.
     * 
     */
    public Integer minimumNodeCount() {
        return this.minimumNodeCount;
    }
    /**
     * @return The name of the shape used for the DB system.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Deprecated. Use `name` instead of `shape`.
     * 
     * @deprecated
     * The &#39;shape&#39; field has been deprecated. Please use &#39;name&#39; instead.
     * 
     */
    @Deprecated /* The 'shape' field has been deprecated. Please use 'name' instead. */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The family of the shape used for the DB system.
     * 
     */
    public String shapeFamily() {
        return this.shapeFamily;
    }
    /**
     * @return The shape type for the virtual machine DB system. Shape type is determined by CPU hardware. Valid values are `AMD` , `INTEL` or `INTEL_FLEX_X9`.
     * 
     */
    public String shapeType() {
        return this.shapeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemShapesDbSystemShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer availableCoreCount;
        private Integer availableCoreCountPerNode;
        private Integer availableDataStorageInTbs;
        private Double availableDataStoragePerServerInTbs;
        private Integer availableDbNodePerNodeInGbs;
        private Integer availableDbNodeStorageInGbs;
        private Integer availableMemoryInGbs;
        private Integer availableMemoryPerNodeInGbs;
        private Integer coreCountIncrement;
        private Integer maxStorageCount;
        private Integer maximumNodeCount;
        private Integer minCoreCountPerNode;
        private Integer minDataStorageInTbs;
        private Integer minDbNodeStoragePerNodeInGbs;
        private Integer minMemoryPerNodeInGbs;
        private Integer minStorageCount;
        private Integer minimumCoreCount;
        private Integer minimumNodeCount;
        private String name;
        private String shape;
        private String shapeFamily;
        private String shapeType;
        public Builder() {}
        public Builder(GetDbSystemShapesDbSystemShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableCoreCount = defaults.availableCoreCount;
    	      this.availableCoreCountPerNode = defaults.availableCoreCountPerNode;
    	      this.availableDataStorageInTbs = defaults.availableDataStorageInTbs;
    	      this.availableDataStoragePerServerInTbs = defaults.availableDataStoragePerServerInTbs;
    	      this.availableDbNodePerNodeInGbs = defaults.availableDbNodePerNodeInGbs;
    	      this.availableDbNodeStorageInGbs = defaults.availableDbNodeStorageInGbs;
    	      this.availableMemoryInGbs = defaults.availableMemoryInGbs;
    	      this.availableMemoryPerNodeInGbs = defaults.availableMemoryPerNodeInGbs;
    	      this.coreCountIncrement = defaults.coreCountIncrement;
    	      this.maxStorageCount = defaults.maxStorageCount;
    	      this.maximumNodeCount = defaults.maximumNodeCount;
    	      this.minCoreCountPerNode = defaults.minCoreCountPerNode;
    	      this.minDataStorageInTbs = defaults.minDataStorageInTbs;
    	      this.minDbNodeStoragePerNodeInGbs = defaults.minDbNodeStoragePerNodeInGbs;
    	      this.minMemoryPerNodeInGbs = defaults.minMemoryPerNodeInGbs;
    	      this.minStorageCount = defaults.minStorageCount;
    	      this.minimumCoreCount = defaults.minimumCoreCount;
    	      this.minimumNodeCount = defaults.minimumNodeCount;
    	      this.name = defaults.name;
    	      this.shape = defaults.shape;
    	      this.shapeFamily = defaults.shapeFamily;
    	      this.shapeType = defaults.shapeType;
        }

        @CustomType.Setter
        public Builder availableCoreCount(Integer availableCoreCount) {
            this.availableCoreCount = Objects.requireNonNull(availableCoreCount);
            return this;
        }
        @CustomType.Setter
        public Builder availableCoreCountPerNode(Integer availableCoreCountPerNode) {
            this.availableCoreCountPerNode = Objects.requireNonNull(availableCoreCountPerNode);
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStorageInTbs(Integer availableDataStorageInTbs) {
            this.availableDataStorageInTbs = Objects.requireNonNull(availableDataStorageInTbs);
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStoragePerServerInTbs(Double availableDataStoragePerServerInTbs) {
            this.availableDataStoragePerServerInTbs = Objects.requireNonNull(availableDataStoragePerServerInTbs);
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodePerNodeInGbs(Integer availableDbNodePerNodeInGbs) {
            this.availableDbNodePerNodeInGbs = Objects.requireNonNull(availableDbNodePerNodeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodeStorageInGbs(Integer availableDbNodeStorageInGbs) {
            this.availableDbNodeStorageInGbs = Objects.requireNonNull(availableDbNodeStorageInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryInGbs(Integer availableMemoryInGbs) {
            this.availableMemoryInGbs = Objects.requireNonNull(availableMemoryInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryPerNodeInGbs(Integer availableMemoryPerNodeInGbs) {
            this.availableMemoryPerNodeInGbs = Objects.requireNonNull(availableMemoryPerNodeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder coreCountIncrement(Integer coreCountIncrement) {
            this.coreCountIncrement = Objects.requireNonNull(coreCountIncrement);
            return this;
        }
        @CustomType.Setter
        public Builder maxStorageCount(Integer maxStorageCount) {
            this.maxStorageCount = Objects.requireNonNull(maxStorageCount);
            return this;
        }
        @CustomType.Setter
        public Builder maximumNodeCount(Integer maximumNodeCount) {
            this.maximumNodeCount = Objects.requireNonNull(maximumNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder minCoreCountPerNode(Integer minCoreCountPerNode) {
            this.minCoreCountPerNode = Objects.requireNonNull(minCoreCountPerNode);
            return this;
        }
        @CustomType.Setter
        public Builder minDataStorageInTbs(Integer minDataStorageInTbs) {
            this.minDataStorageInTbs = Objects.requireNonNull(minDataStorageInTbs);
            return this;
        }
        @CustomType.Setter
        public Builder minDbNodeStoragePerNodeInGbs(Integer minDbNodeStoragePerNodeInGbs) {
            this.minDbNodeStoragePerNodeInGbs = Objects.requireNonNull(minDbNodeStoragePerNodeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder minMemoryPerNodeInGbs(Integer minMemoryPerNodeInGbs) {
            this.minMemoryPerNodeInGbs = Objects.requireNonNull(minMemoryPerNodeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder minStorageCount(Integer minStorageCount) {
            this.minStorageCount = Objects.requireNonNull(minStorageCount);
            return this;
        }
        @CustomType.Setter
        public Builder minimumCoreCount(Integer minimumCoreCount) {
            this.minimumCoreCount = Objects.requireNonNull(minimumCoreCount);
            return this;
        }
        @CustomType.Setter
        public Builder minimumNodeCount(Integer minimumNodeCount) {
            this.minimumNodeCount = Objects.requireNonNull(minimumNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        @CustomType.Setter
        public Builder shapeFamily(String shapeFamily) {
            this.shapeFamily = Objects.requireNonNull(shapeFamily);
            return this;
        }
        @CustomType.Setter
        public Builder shapeType(String shapeType) {
            this.shapeType = Objects.requireNonNull(shapeType);
            return this;
        }
        public GetDbSystemShapesDbSystemShape build() {
            final var o = new GetDbSystemShapesDbSystemShape();
            o.availableCoreCount = availableCoreCount;
            o.availableCoreCountPerNode = availableCoreCountPerNode;
            o.availableDataStorageInTbs = availableDataStorageInTbs;
            o.availableDataStoragePerServerInTbs = availableDataStoragePerServerInTbs;
            o.availableDbNodePerNodeInGbs = availableDbNodePerNodeInGbs;
            o.availableDbNodeStorageInGbs = availableDbNodeStorageInGbs;
            o.availableMemoryInGbs = availableMemoryInGbs;
            o.availableMemoryPerNodeInGbs = availableMemoryPerNodeInGbs;
            o.coreCountIncrement = coreCountIncrement;
            o.maxStorageCount = maxStorageCount;
            o.maximumNodeCount = maximumNodeCount;
            o.minCoreCountPerNode = minCoreCountPerNode;
            o.minDataStorageInTbs = minDataStorageInTbs;
            o.minDbNodeStoragePerNodeInGbs = minDbNodeStoragePerNodeInGbs;
            o.minMemoryPerNodeInGbs = minMemoryPerNodeInGbs;
            o.minStorageCount = minStorageCount;
            o.minimumCoreCount = minimumCoreCount;
            o.minimumNodeCount = minimumNodeCount;
            o.name = name;
            o.shape = shape;
            o.shapeFamily = shapeFamily;
            o.shapeType = shapeType;
            return o;
        }
    }
}
