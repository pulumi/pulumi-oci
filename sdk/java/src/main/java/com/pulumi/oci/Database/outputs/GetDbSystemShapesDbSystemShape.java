// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbSystemShapesDbSystemShape {
    /**
     * @return The maximum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    private @Nullable Integer availableCoreCount;
    /**
     * @return The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape, ExaCC Elastic shapes and VM Flex shapes.
     * 
     */
    private @Nullable Integer availableCoreCountPerNode;
    /**
     * @return The maximum DATA storage that can be enabled for this shape.
     * 
     */
    private @Nullable Integer availableDataStorageInTbs;
    /**
     * @return The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private @Nullable Double availableDataStoragePerServerInTbs;
    /**
     * @return The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private @Nullable Integer availableDbNodePerNodeInGbs;
    /**
     * @return The maximum Db Node storage that can be enabled for this shape.
     * 
     */
    private @Nullable Integer availableDbNodeStorageInGbs;
    /**
     * @return The maximum memory that can be enabled for this shape.
     * 
     */
    private @Nullable Integer availableMemoryInGbs;
    /**
     * @return The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    private @Nullable Integer availableMemoryPerNodeInGbs;
    /**
     * @return The discrete number by which the CPU core count for this shape can be increased or decreased.
     * 
     */
    private @Nullable Integer coreCountIncrement;
    /**
     * @return The maximum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    private @Nullable Integer maxStorageCount;
    /**
     * @return The maximum number of compute servers available for this shape.
     * 
     */
    private @Nullable Integer maximumNodeCount;
    /**
     * @return The minimum number of CPU cores that can be enabled per node for this shape.
     * 
     */
    private @Nullable Integer minCoreCountPerNode;
    /**
     * @return The minimum data storage that need be allocated for this shape.
     * 
     */
    private @Nullable Integer minDataStorageInTbs;
    /**
     * @return The minimum Db Node storage that need be allocated per node for this shape.
     * 
     */
    private @Nullable Integer minDbNodeStoragePerNodeInGbs;
    /**
     * @return The minimum memory that need be allocated per node for this shape.
     * 
     */
    private @Nullable Integer minMemoryPerNodeInGbs;
    /**
     * @return The minimum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    private @Nullable Integer minStorageCount;
    /**
     * @return The minimum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    private @Nullable Integer minimumCoreCount;
    /**
     * @return The minimum number of compute servers available for this shape.
     * 
     */
    private @Nullable Integer minimumNodeCount;
    /**
     * @return The name of the shape used for the DB system.
     * 
     */
    private @Nullable String name;
    /**
     * @return Deprecated. Use `name` instead of `shape`.
     * 
     * @deprecated
     * The &#39;shape&#39; field has been deprecated. Please use &#39;name&#39; instead.
     * 
     */
    @Deprecated /* The 'shape' field has been deprecated. Please use 'name' instead. */
    private @Nullable String shape;
    /**
     * @return The family of the shape used for the DB system.
     * 
     */
    private @Nullable String shapeFamily;
    /**
     * @return The shape type for the virtual machine DB system. Shape type is determined by CPU hardware. Valid values are `AMD` , `INTEL` or `INTEL_FLEX_X9`.
     * 
     */
    private @Nullable String shapeType;

    private GetDbSystemShapesDbSystemShape() {}
    /**
     * @return The maximum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    public Optional<Integer> availableCoreCount() {
        return Optional.ofNullable(this.availableCoreCount);
    }
    /**
     * @return The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape, ExaCC Elastic shapes and VM Flex shapes.
     * 
     */
    public Optional<Integer> availableCoreCountPerNode() {
        return Optional.ofNullable(this.availableCoreCountPerNode);
    }
    /**
     * @return The maximum DATA storage that can be enabled for this shape.
     * 
     */
    public Optional<Integer> availableDataStorageInTbs() {
        return Optional.ofNullable(this.availableDataStorageInTbs);
    }
    /**
     * @return The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Optional<Double> availableDataStoragePerServerInTbs() {
        return Optional.ofNullable(this.availableDataStoragePerServerInTbs);
    }
    /**
     * @return The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Optional<Integer> availableDbNodePerNodeInGbs() {
        return Optional.ofNullable(this.availableDbNodePerNodeInGbs);
    }
    /**
     * @return The maximum Db Node storage that can be enabled for this shape.
     * 
     */
    public Optional<Integer> availableDbNodeStorageInGbs() {
        return Optional.ofNullable(this.availableDbNodeStorageInGbs);
    }
    /**
     * @return The maximum memory that can be enabled for this shape.
     * 
     */
    public Optional<Integer> availableMemoryInGbs() {
        return Optional.ofNullable(this.availableMemoryInGbs);
    }
    /**
     * @return The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     * 
     */
    public Optional<Integer> availableMemoryPerNodeInGbs() {
        return Optional.ofNullable(this.availableMemoryPerNodeInGbs);
    }
    /**
     * @return The discrete number by which the CPU core count for this shape can be increased or decreased.
     * 
     */
    public Optional<Integer> coreCountIncrement() {
        return Optional.ofNullable(this.coreCountIncrement);
    }
    /**
     * @return The maximum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    public Optional<Integer> maxStorageCount() {
        return Optional.ofNullable(this.maxStorageCount);
    }
    /**
     * @return The maximum number of compute servers available for this shape.
     * 
     */
    public Optional<Integer> maximumNodeCount() {
        return Optional.ofNullable(this.maximumNodeCount);
    }
    /**
     * @return The minimum number of CPU cores that can be enabled per node for this shape.
     * 
     */
    public Optional<Integer> minCoreCountPerNode() {
        return Optional.ofNullable(this.minCoreCountPerNode);
    }
    /**
     * @return The minimum data storage that need be allocated for this shape.
     * 
     */
    public Optional<Integer> minDataStorageInTbs() {
        return Optional.ofNullable(this.minDataStorageInTbs);
    }
    /**
     * @return The minimum Db Node storage that need be allocated per node for this shape.
     * 
     */
    public Optional<Integer> minDbNodeStoragePerNodeInGbs() {
        return Optional.ofNullable(this.minDbNodeStoragePerNodeInGbs);
    }
    /**
     * @return The minimum memory that need be allocated per node for this shape.
     * 
     */
    public Optional<Integer> minMemoryPerNodeInGbs() {
        return Optional.ofNullable(this.minMemoryPerNodeInGbs);
    }
    /**
     * @return The minimum number of Exadata storage servers available for the Exadata infrastructure.
     * 
     */
    public Optional<Integer> minStorageCount() {
        return Optional.ofNullable(this.minStorageCount);
    }
    /**
     * @return The minimum number of CPU cores that can be enabled on the DB system for this shape.
     * 
     */
    public Optional<Integer> minimumCoreCount() {
        return Optional.ofNullable(this.minimumCoreCount);
    }
    /**
     * @return The minimum number of compute servers available for this shape.
     * 
     */
    public Optional<Integer> minimumNodeCount() {
        return Optional.ofNullable(this.minimumNodeCount);
    }
    /**
     * @return The name of the shape used for the DB system.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Deprecated. Use `name` instead of `shape`.
     * 
     * @deprecated
     * The &#39;shape&#39; field has been deprecated. Please use &#39;name&#39; instead.
     * 
     */
    @Deprecated /* The 'shape' field has been deprecated. Please use 'name' instead. */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return The family of the shape used for the DB system.
     * 
     */
    public Optional<String> shapeFamily() {
        return Optional.ofNullable(this.shapeFamily);
    }
    /**
     * @return The shape type for the virtual machine DB system. Shape type is determined by CPU hardware. Valid values are `AMD` , `INTEL` or `INTEL_FLEX_X9`.
     * 
     */
    public Optional<String> shapeType() {
        return Optional.ofNullable(this.shapeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemShapesDbSystemShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer availableCoreCount;
        private @Nullable Integer availableCoreCountPerNode;
        private @Nullable Integer availableDataStorageInTbs;
        private @Nullable Double availableDataStoragePerServerInTbs;
        private @Nullable Integer availableDbNodePerNodeInGbs;
        private @Nullable Integer availableDbNodeStorageInGbs;
        private @Nullable Integer availableMemoryInGbs;
        private @Nullable Integer availableMemoryPerNodeInGbs;
        private @Nullable Integer coreCountIncrement;
        private @Nullable Integer maxStorageCount;
        private @Nullable Integer maximumNodeCount;
        private @Nullable Integer minCoreCountPerNode;
        private @Nullable Integer minDataStorageInTbs;
        private @Nullable Integer minDbNodeStoragePerNodeInGbs;
        private @Nullable Integer minMemoryPerNodeInGbs;
        private @Nullable Integer minStorageCount;
        private @Nullable Integer minimumCoreCount;
        private @Nullable Integer minimumNodeCount;
        private @Nullable String name;
        private @Nullable String shape;
        private @Nullable String shapeFamily;
        private @Nullable String shapeType;
        public Builder() {}
        public Builder(GetDbSystemShapesDbSystemShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableCoreCount = defaults.availableCoreCount;
    	      this.availableCoreCountPerNode = defaults.availableCoreCountPerNode;
    	      this.availableDataStorageInTbs = defaults.availableDataStorageInTbs;
    	      this.availableDataStoragePerServerInTbs = defaults.availableDataStoragePerServerInTbs;
    	      this.availableDbNodePerNodeInGbs = defaults.availableDbNodePerNodeInGbs;
    	      this.availableDbNodeStorageInGbs = defaults.availableDbNodeStorageInGbs;
    	      this.availableMemoryInGbs = defaults.availableMemoryInGbs;
    	      this.availableMemoryPerNodeInGbs = defaults.availableMemoryPerNodeInGbs;
    	      this.coreCountIncrement = defaults.coreCountIncrement;
    	      this.maxStorageCount = defaults.maxStorageCount;
    	      this.maximumNodeCount = defaults.maximumNodeCount;
    	      this.minCoreCountPerNode = defaults.minCoreCountPerNode;
    	      this.minDataStorageInTbs = defaults.minDataStorageInTbs;
    	      this.minDbNodeStoragePerNodeInGbs = defaults.minDbNodeStoragePerNodeInGbs;
    	      this.minMemoryPerNodeInGbs = defaults.minMemoryPerNodeInGbs;
    	      this.minStorageCount = defaults.minStorageCount;
    	      this.minimumCoreCount = defaults.minimumCoreCount;
    	      this.minimumNodeCount = defaults.minimumNodeCount;
    	      this.name = defaults.name;
    	      this.shape = defaults.shape;
    	      this.shapeFamily = defaults.shapeFamily;
    	      this.shapeType = defaults.shapeType;
        }

        @CustomType.Setter
        public Builder availableCoreCount(@Nullable Integer availableCoreCount) {
            this.availableCoreCount = availableCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder availableCoreCountPerNode(@Nullable Integer availableCoreCountPerNode) {
            this.availableCoreCountPerNode = availableCoreCountPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStorageInTbs(@Nullable Integer availableDataStorageInTbs) {
            this.availableDataStorageInTbs = availableDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDataStoragePerServerInTbs(@Nullable Double availableDataStoragePerServerInTbs) {
            this.availableDataStoragePerServerInTbs = availableDataStoragePerServerInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodePerNodeInGbs(@Nullable Integer availableDbNodePerNodeInGbs) {
            this.availableDbNodePerNodeInGbs = availableDbNodePerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableDbNodeStorageInGbs(@Nullable Integer availableDbNodeStorageInGbs) {
            this.availableDbNodeStorageInGbs = availableDbNodeStorageInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryInGbs(@Nullable Integer availableMemoryInGbs) {
            this.availableMemoryInGbs = availableMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryPerNodeInGbs(@Nullable Integer availableMemoryPerNodeInGbs) {
            this.availableMemoryPerNodeInGbs = availableMemoryPerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder coreCountIncrement(@Nullable Integer coreCountIncrement) {
            this.coreCountIncrement = coreCountIncrement;
            return this;
        }
        @CustomType.Setter
        public Builder maxStorageCount(@Nullable Integer maxStorageCount) {
            this.maxStorageCount = maxStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNodeCount(@Nullable Integer maximumNodeCount) {
            this.maximumNodeCount = maximumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minCoreCountPerNode(@Nullable Integer minCoreCountPerNode) {
            this.minCoreCountPerNode = minCoreCountPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder minDataStorageInTbs(@Nullable Integer minDataStorageInTbs) {
            this.minDataStorageInTbs = minDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder minDbNodeStoragePerNodeInGbs(@Nullable Integer minDbNodeStoragePerNodeInGbs) {
            this.minDbNodeStoragePerNodeInGbs = minDbNodeStoragePerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder minMemoryPerNodeInGbs(@Nullable Integer minMemoryPerNodeInGbs) {
            this.minMemoryPerNodeInGbs = minMemoryPerNodeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder minStorageCount(@Nullable Integer minStorageCount) {
            this.minStorageCount = minStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumCoreCount(@Nullable Integer minimumCoreCount) {
            this.minimumCoreCount = minimumCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder minimumNodeCount(@Nullable Integer minimumNodeCount) {
            this.minimumNodeCount = minimumNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder shapeFamily(@Nullable String shapeFamily) {
            this.shapeFamily = shapeFamily;
            return this;
        }
        @CustomType.Setter
        public Builder shapeType(@Nullable String shapeType) {
            this.shapeType = shapeType;
            return this;
        }
        public GetDbSystemShapesDbSystemShape build() {
            final var o = new GetDbSystemShapesDbSystemShape();
            o.availableCoreCount = availableCoreCount;
            o.availableCoreCountPerNode = availableCoreCountPerNode;
            o.availableDataStorageInTbs = availableDataStorageInTbs;
            o.availableDataStoragePerServerInTbs = availableDataStoragePerServerInTbs;
            o.availableDbNodePerNodeInGbs = availableDbNodePerNodeInGbs;
            o.availableDbNodeStorageInGbs = availableDbNodeStorageInGbs;
            o.availableMemoryInGbs = availableMemoryInGbs;
            o.availableMemoryPerNodeInGbs = availableMemoryPerNodeInGbs;
            o.coreCountIncrement = coreCountIncrement;
            o.maxStorageCount = maxStorageCount;
            o.maximumNodeCount = maximumNodeCount;
            o.minCoreCountPerNode = minCoreCountPerNode;
            o.minDataStorageInTbs = minDataStorageInTbs;
            o.minDbNodeStoragePerNodeInGbs = minDbNodeStoragePerNodeInGbs;
            o.minMemoryPerNodeInGbs = minMemoryPerNodeInGbs;
            o.minStorageCount = minStorageCount;
            o.minimumCoreCount = minimumCoreCount;
            o.minimumNodeCount = minimumNodeCount;
            o.name = name;
            o.shape = shape;
            o.shapeFamily = shapeFamily;
            o.shapeType = shapeType;
            return o;
        }
    }
}
