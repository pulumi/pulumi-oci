// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemDataCollectionOption;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemDbHome;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemDbSystemOption;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemIormConfigCach;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemMaintenanceWindow;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemMaintenanceWindowDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDbSystemsDbSystem {
    /**
     * @return A filter to return only resources that match the given availability domain exactly.
     * 
     */
    private String availabilityDomain;
    /**
     * @return A list of the [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security groups (NSGs) that the backup network of this DB system belongs to. Setting this to an empty array after the list is created removes the resource from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securityrules.htm). Applicable only to Exadata systems.
     * 
     */
    private List<String> backupNetworkNsgIds;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup network subnet the DB system is associated with. Applicable only to Exadata DB systems.
     * 
     */
    private String backupSubnetId;
    /**
     * @return The cluster name for Exadata and 2-node RAC virtual machine DB systems. The cluster name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and is not case sensitive.
     * 
     */
    private String clusterName;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return The number of CPU cores enabled on the DB system.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return Indicates user preferences for the various diagnostic collection options for the VM cluster/Cloud VM cluster/VMBM DBCS.
     * 
     */
    private List<GetDbSystemsDbSystemDataCollectionOption> dataCollectionOptions;
    /**
     * @return The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are 40 and 80. The default is 80 percent assigned to DATA storage. Not applicable for virtual machine DB systems. Required for BMDBs.
     * 
     */
    private Integer dataStoragePercentage;
    /**
     * @return The data storage size, in gigabytes, that is currently available to the DB system. Applies only for virtual machine DB systems. Required for VMDBs.
     * 
     */
    private Integer dataStorageSizeInGb;
    /**
     * @return The Oracle Database edition that applies to all the databases on the DB system.
     * 
     */
    private String databaseEdition;
    private List<GetDbSystemsDbSystemDbHome> dbHomes;
    /**
     * @return The DB system options.
     * 
     */
    private List<GetDbSystemsDbSystemDbSystemOption> dbSystemOptions;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The type of redundancy configured for the DB system. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
     * 
     */
    private String diskRedundancy;
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    private String displayName;
    /**
     * @return The domain name for the DB system.
     * 
     */
    private String domain;
    /**
     * @return List of the Fault Domains in which this DB system is provisioned.
     * 
     */
    private List<String> faultDomains;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The hostname for the DB system.
     * 
     */
    private String hostname;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private String id;
    private List<GetDbSystemsDbSystemIormConfigCach> iormConfigCaches;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private String kmsKeyId;
    private String kmsKeyVersionId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance run.
     * 
     */
    private String lastMaintenanceRunId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last patch history. This value is updated as soon as a patch operation starts.
     * 
     */
    private String lastPatchHistoryEntryId;
    /**
     * @return The Oracle license model that applies to all the databases on the DB system. The default is LICENSE_INCLUDED.
     * 
     */
    private String licenseModel;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The port number configured for the listener on the DB system.
     * 
     */
    private Integer listenerPort;
    private List<GetDbSystemsDbSystemMaintenanceWindowDetail> maintenanceWindowDetails;
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    private List<GetDbSystemsDbSystemMaintenanceWindow> maintenanceWindows;
    /**
     * @return Memory allocated to the DB system, in gigabytes.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next maintenance run.
     * 
     */
    private String nextMaintenanceRunId;
    /**
     * @return The number of nodes in the DB system. For RAC DB systems, the value is greater than 1.
     * 
     */
    private Integer nodeCount;
    /**
     * @return The list of [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securityrules.htm). **NsgIds restrictions:**
     * * A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
     * 
     */
    private List<String> nsgIds;
    /**
     * @return The most recent OS Patch Version applied on the DB system.
     * 
     */
    private String osVersion;
    /**
     * @return The point in time for a cloned database system when the data disks were cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    private String pointInTimeDataDiskCloneTimestamp;
    private String privateIp;
    /**
     * @return The RECO/REDO storage size, in gigabytes, that is currently allocated to the DB system. Applies only for virtual machine DB systems.
     * 
     */
    private Integer recoStorageSizeInGb;
    /**
     * @return The FQDN of the DNS record for the SCAN IP addresses that are associated with the DB system.
     * 
     */
    private String scanDnsName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DNS record for the SCAN IP addresses that are associated with the DB system.
     * 
     */
    private String scanDnsRecordId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Single Client Access Name (SCAN) IP addresses associated with the DB system. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the requests to the appropriate nodes in the cluster.
     * 
     */
    private List<String> scanIpIds;
    /**
     * @return The shape of the DB system. The shape determines resources to allocate to the DB system.
     * * For virtual machine shapes, the number of CPU cores and memory
     * * For bare metal and Exadata shapes, the number of CPU cores, storage, and memory
     * 
     */
    private String shape;
    private String source;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private String sourceDbSystemId;
    /**
     * @return True, if Sparse Diskgroup is configured for Exadata dbsystem, False, if Sparse diskgroup was not configured. Only applied for Exadata shape.
     * 
     */
    private Boolean sparseDiskgroup;
    /**
     * @return The public key portion of one or more key pairs used for SSH access to the DB system.
     * 
     */
    private List<String> sshPublicKeys;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    /**
     * @return The block storage volume performance level. Valid values are `BALANCED` and `HIGH_PERFORMANCE`. See [Block Volume Performance](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumeperformance.htm) for more information.
     * 
     */
    private String storageVolumePerformanceMode;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet the DB system is associated with.
     * 
     */
    private String subnetId;
    /**
     * @return The date and time the DB system was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time zone of the DB system. For details, see [DB System Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    private String timeZone;
    /**
     * @return The Oracle Database version of the DB system.
     * 
     */
    private String version;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual IP (VIP) addresses associated with the DB system. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the DB system to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
     * 
     */
    private List<String> vipIds;
    /**
     * @return The OCID of the zone the DB system is associated with.
     * 
     */
    private String zoneId;

    private GetDbSystemsDbSystem() {}
    /**
     * @return A filter to return only resources that match the given availability domain exactly.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return A list of the [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security groups (NSGs) that the backup network of this DB system belongs to. Setting this to an empty array after the list is created removes the resource from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securityrules.htm). Applicable only to Exadata systems.
     * 
     */
    public List<String> backupNetworkNsgIds() {
        return this.backupNetworkNsgIds;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup network subnet the DB system is associated with. Applicable only to Exadata DB systems.
     * 
     */
    public String backupSubnetId() {
        return this.backupSubnetId;
    }
    /**
     * @return The cluster name for Exadata and 2-node RAC virtual machine DB systems. The cluster name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and is not case sensitive.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The number of CPU cores enabled on the DB system.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return Indicates user preferences for the various diagnostic collection options for the VM cluster/Cloud VM cluster/VMBM DBCS.
     * 
     */
    public List<GetDbSystemsDbSystemDataCollectionOption> dataCollectionOptions() {
        return this.dataCollectionOptions;
    }
    /**
     * @return The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are 40 and 80. The default is 80 percent assigned to DATA storage. Not applicable for virtual machine DB systems. Required for BMDBs.
     * 
     */
    public Integer dataStoragePercentage() {
        return this.dataStoragePercentage;
    }
    /**
     * @return The data storage size, in gigabytes, that is currently available to the DB system. Applies only for virtual machine DB systems. Required for VMDBs.
     * 
     */
    public Integer dataStorageSizeInGb() {
        return this.dataStorageSizeInGb;
    }
    /**
     * @return The Oracle Database edition that applies to all the databases on the DB system.
     * 
     */
    public String databaseEdition() {
        return this.databaseEdition;
    }
    public List<GetDbSystemsDbSystemDbHome> dbHomes() {
        return this.dbHomes;
    }
    /**
     * @return The DB system options.
     * 
     */
    public List<GetDbSystemsDbSystemDbSystemOption> dbSystemOptions() {
        return this.dbSystemOptions;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The type of redundancy configured for the DB system. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
     * 
     */
    public String diskRedundancy() {
        return this.diskRedundancy;
    }
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The domain name for the DB system.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return List of the Fault Domains in which this DB system is provisioned.
     * 
     */
    public List<String> faultDomains() {
        return this.faultDomains;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The hostname for the DB system.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetDbSystemsDbSystemIormConfigCach> iormConfigCaches() {
        return this.iormConfigCaches;
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }
    public String kmsKeyVersionId() {
        return this.kmsKeyVersionId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance run.
     * 
     */
    public String lastMaintenanceRunId() {
        return this.lastMaintenanceRunId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last patch history. This value is updated as soon as a patch operation starts.
     * 
     */
    public String lastPatchHistoryEntryId() {
        return this.lastPatchHistoryEntryId;
    }
    /**
     * @return The Oracle license model that applies to all the databases on the DB system. The default is LICENSE_INCLUDED.
     * 
     */
    public String licenseModel() {
        return this.licenseModel;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The port number configured for the listener on the DB system.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    public List<GetDbSystemsDbSystemMaintenanceWindowDetail> maintenanceWindowDetails() {
        return this.maintenanceWindowDetails;
    }
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    public List<GetDbSystemsDbSystemMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return Memory allocated to the DB system, in gigabytes.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next maintenance run.
     * 
     */
    public String nextMaintenanceRunId() {
        return this.nextMaintenanceRunId;
    }
    /**
     * @return The number of nodes in the DB system. For RAC DB systems, the value is greater than 1.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The list of [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securityrules.htm). **NsgIds restrictions:**
     * * A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The most recent OS Patch Version applied on the DB system.
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return The point in time for a cloned database system when the data disks were cloned from the source database system, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     * 
     */
    public String pointInTimeDataDiskCloneTimestamp() {
        return this.pointInTimeDataDiskCloneTimestamp;
    }
    public String privateIp() {
        return this.privateIp;
    }
    /**
     * @return The RECO/REDO storage size, in gigabytes, that is currently allocated to the DB system. Applies only for virtual machine DB systems.
     * 
     */
    public Integer recoStorageSizeInGb() {
        return this.recoStorageSizeInGb;
    }
    /**
     * @return The FQDN of the DNS record for the SCAN IP addresses that are associated with the DB system.
     * 
     */
    public String scanDnsName() {
        return this.scanDnsName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DNS record for the SCAN IP addresses that are associated with the DB system.
     * 
     */
    public String scanDnsRecordId() {
        return this.scanDnsRecordId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Single Client Access Name (SCAN) IP addresses associated with the DB system. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the requests to the appropriate nodes in the cluster.
     * 
     */
    public List<String> scanIpIds() {
        return this.scanIpIds;
    }
    /**
     * @return The shape of the DB system. The shape determines resources to allocate to the DB system.
     * * For virtual machine shapes, the number of CPU cores and memory
     * * For bare metal and Exadata shapes, the number of CPU cores, storage, and memory
     * 
     */
    public String shape() {
        return this.shape;
    }
    public String source() {
        return this.source;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public String sourceDbSystemId() {
        return this.sourceDbSystemId;
    }
    /**
     * @return True, if Sparse Diskgroup is configured for Exadata dbsystem, False, if Sparse diskgroup was not configured. Only applied for Exadata shape.
     * 
     */
    public Boolean sparseDiskgroup() {
        return this.sparseDiskgroup;
    }
    /**
     * @return The public key portion of one or more key pairs used for SSH access to the DB system.
     * 
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The block storage volume performance level. Valid values are `BALANCED` and `HIGH_PERFORMANCE`. See [Block Volume Performance](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumeperformance.htm) for more information.
     * 
     */
    public String storageVolumePerformanceMode() {
        return this.storageVolumePerformanceMode;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet the DB system is associated with.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The date and time the DB system was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time zone of the DB system. For details, see [DB System Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return The Oracle Database version of the DB system.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual IP (VIP) addresses associated with the DB system. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the DB system to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
     * 
     */
    public List<String> vipIds() {
        return this.vipIds;
    }
    /**
     * @return The OCID of the zone the DB system is associated with.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemsDbSystem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityDomain;
        private List<String> backupNetworkNsgIds;
        private String backupSubnetId;
        private String clusterName;
        private String compartmentId;
        private Integer cpuCoreCount;
        private List<GetDbSystemsDbSystemDataCollectionOption> dataCollectionOptions;
        private Integer dataStoragePercentage;
        private Integer dataStorageSizeInGb;
        private String databaseEdition;
        private List<GetDbSystemsDbSystemDbHome> dbHomes;
        private List<GetDbSystemsDbSystemDbSystemOption> dbSystemOptions;
        private Map<String,String> definedTags;
        private String diskRedundancy;
        private String displayName;
        private String domain;
        private List<String> faultDomains;
        private Map<String,String> freeformTags;
        private String hostname;
        private String id;
        private List<GetDbSystemsDbSystemIormConfigCach> iormConfigCaches;
        private String kmsKeyId;
        private String kmsKeyVersionId;
        private String lastMaintenanceRunId;
        private String lastPatchHistoryEntryId;
        private String licenseModel;
        private String lifecycleDetails;
        private Integer listenerPort;
        private List<GetDbSystemsDbSystemMaintenanceWindowDetail> maintenanceWindowDetails;
        private List<GetDbSystemsDbSystemMaintenanceWindow> maintenanceWindows;
        private Integer memorySizeInGbs;
        private String nextMaintenanceRunId;
        private Integer nodeCount;
        private List<String> nsgIds;
        private String osVersion;
        private String pointInTimeDataDiskCloneTimestamp;
        private String privateIp;
        private Integer recoStorageSizeInGb;
        private String scanDnsName;
        private String scanDnsRecordId;
        private List<String> scanIpIds;
        private String shape;
        private String source;
        private String sourceDbSystemId;
        private Boolean sparseDiskgroup;
        private List<String> sshPublicKeys;
        private String state;
        private String storageVolumePerformanceMode;
        private String subnetId;
        private String timeCreated;
        private String timeZone;
        private String version;
        private List<String> vipIds;
        private String zoneId;
        public Builder() {}
        public Builder(GetDbSystemsDbSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.backupNetworkNsgIds = defaults.backupNetworkNsgIds;
    	      this.backupSubnetId = defaults.backupSubnetId;
    	      this.clusterName = defaults.clusterName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.dataCollectionOptions = defaults.dataCollectionOptions;
    	      this.dataStoragePercentage = defaults.dataStoragePercentage;
    	      this.dataStorageSizeInGb = defaults.dataStorageSizeInGb;
    	      this.databaseEdition = defaults.databaseEdition;
    	      this.dbHomes = defaults.dbHomes;
    	      this.dbSystemOptions = defaults.dbSystemOptions;
    	      this.definedTags = defaults.definedTags;
    	      this.diskRedundancy = defaults.diskRedundancy;
    	      this.displayName = defaults.displayName;
    	      this.domain = defaults.domain;
    	      this.faultDomains = defaults.faultDomains;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.iormConfigCaches = defaults.iormConfigCaches;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lastMaintenanceRunId = defaults.lastMaintenanceRunId;
    	      this.lastPatchHistoryEntryId = defaults.lastPatchHistoryEntryId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.listenerPort = defaults.listenerPort;
    	      this.maintenanceWindowDetails = defaults.maintenanceWindowDetails;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.nextMaintenanceRunId = defaults.nextMaintenanceRunId;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nsgIds = defaults.nsgIds;
    	      this.osVersion = defaults.osVersion;
    	      this.pointInTimeDataDiskCloneTimestamp = defaults.pointInTimeDataDiskCloneTimestamp;
    	      this.privateIp = defaults.privateIp;
    	      this.recoStorageSizeInGb = defaults.recoStorageSizeInGb;
    	      this.scanDnsName = defaults.scanDnsName;
    	      this.scanDnsRecordId = defaults.scanDnsRecordId;
    	      this.scanIpIds = defaults.scanIpIds;
    	      this.shape = defaults.shape;
    	      this.source = defaults.source;
    	      this.sourceDbSystemId = defaults.sourceDbSystemId;
    	      this.sparseDiskgroup = defaults.sparseDiskgroup;
    	      this.sshPublicKeys = defaults.sshPublicKeys;
    	      this.state = defaults.state;
    	      this.storageVolumePerformanceMode = defaults.storageVolumePerformanceMode;
    	      this.subnetId = defaults.subnetId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
    	      this.version = defaults.version;
    	      this.vipIds = defaults.vipIds;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder backupNetworkNsgIds(List<String> backupNetworkNsgIds) {
            if (backupNetworkNsgIds == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "backupNetworkNsgIds");
            }
            this.backupNetworkNsgIds = backupNetworkNsgIds;
            return this;
        }
        public Builder backupNetworkNsgIds(String... backupNetworkNsgIds) {
            return backupNetworkNsgIds(List.of(backupNetworkNsgIds));
        }
        @CustomType.Setter
        public Builder backupSubnetId(String backupSubnetId) {
            if (backupSubnetId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "backupSubnetId");
            }
            this.backupSubnetId = backupSubnetId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataCollectionOptions(List<GetDbSystemsDbSystemDataCollectionOption> dataCollectionOptions) {
            if (dataCollectionOptions == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "dataCollectionOptions");
            }
            this.dataCollectionOptions = dataCollectionOptions;
            return this;
        }
        public Builder dataCollectionOptions(GetDbSystemsDbSystemDataCollectionOption... dataCollectionOptions) {
            return dataCollectionOptions(List.of(dataCollectionOptions));
        }
        @CustomType.Setter
        public Builder dataStoragePercentage(Integer dataStoragePercentage) {
            if (dataStoragePercentage == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "dataStoragePercentage");
            }
            this.dataStoragePercentage = dataStoragePercentage;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInGb(Integer dataStorageSizeInGb) {
            if (dataStorageSizeInGb == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "dataStorageSizeInGb");
            }
            this.dataStorageSizeInGb = dataStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder databaseEdition(String databaseEdition) {
            if (databaseEdition == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "databaseEdition");
            }
            this.databaseEdition = databaseEdition;
            return this;
        }
        @CustomType.Setter
        public Builder dbHomes(List<GetDbSystemsDbSystemDbHome> dbHomes) {
            if (dbHomes == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "dbHomes");
            }
            this.dbHomes = dbHomes;
            return this;
        }
        public Builder dbHomes(GetDbSystemsDbSystemDbHome... dbHomes) {
            return dbHomes(List.of(dbHomes));
        }
        @CustomType.Setter
        public Builder dbSystemOptions(List<GetDbSystemsDbSystemDbSystemOption> dbSystemOptions) {
            if (dbSystemOptions == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "dbSystemOptions");
            }
            this.dbSystemOptions = dbSystemOptions;
            return this;
        }
        public Builder dbSystemOptions(GetDbSystemsDbSystemDbSystemOption... dbSystemOptions) {
            return dbSystemOptions(List.of(dbSystemOptions));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder diskRedundancy(String diskRedundancy) {
            if (diskRedundancy == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "diskRedundancy");
            }
            this.diskRedundancy = diskRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomains(List<String> faultDomains) {
            if (faultDomains == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "faultDomains");
            }
            this.faultDomains = faultDomains;
            return this;
        }
        public Builder faultDomains(String... faultDomains) {
            return faultDomains(List.of(faultDomains));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder iormConfigCaches(List<GetDbSystemsDbSystemIormConfigCach> iormConfigCaches) {
            if (iormConfigCaches == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "iormConfigCaches");
            }
            this.iormConfigCaches = iormConfigCaches;
            return this;
        }
        public Builder iormConfigCaches(GetDbSystemsDbSystemIormConfigCach... iormConfigCaches) {
            return iormConfigCaches(List.of(iormConfigCaches));
        }
        @CustomType.Setter
        public Builder kmsKeyId(String kmsKeyId) {
            if (kmsKeyId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "kmsKeyId");
            }
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(String kmsKeyVersionId) {
            if (kmsKeyVersionId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "kmsKeyVersionId");
            }
            this.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder lastMaintenanceRunId(String lastMaintenanceRunId) {
            if (lastMaintenanceRunId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "lastMaintenanceRunId");
            }
            this.lastMaintenanceRunId = lastMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder lastPatchHistoryEntryId(String lastPatchHistoryEntryId) {
            if (lastPatchHistoryEntryId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "lastPatchHistoryEntryId");
            }
            this.lastPatchHistoryEntryId = lastPatchHistoryEntryId;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            if (licenseModel == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "licenseModel");
            }
            this.licenseModel = licenseModel;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            if (listenerPort == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "listenerPort");
            }
            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindowDetails(List<GetDbSystemsDbSystemMaintenanceWindowDetail> maintenanceWindowDetails) {
            if (maintenanceWindowDetails == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "maintenanceWindowDetails");
            }
            this.maintenanceWindowDetails = maintenanceWindowDetails;
            return this;
        }
        public Builder maintenanceWindowDetails(GetDbSystemsDbSystemMaintenanceWindowDetail... maintenanceWindowDetails) {
            return maintenanceWindowDetails(List.of(maintenanceWindowDetails));
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetDbSystemsDbSystemMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetDbSystemsDbSystemMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder nextMaintenanceRunId(String nextMaintenanceRunId) {
            if (nextMaintenanceRunId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "nextMaintenanceRunId");
            }
            this.nextMaintenanceRunId = nextMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            if (osVersion == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "osVersion");
            }
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pointInTimeDataDiskCloneTimestamp(String pointInTimeDataDiskCloneTimestamp) {
            if (pointInTimeDataDiskCloneTimestamp == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "pointInTimeDataDiskCloneTimestamp");
            }
            this.pointInTimeDataDiskCloneTimestamp = pointInTimeDataDiskCloneTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder privateIp(String privateIp) {
            if (privateIp == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "privateIp");
            }
            this.privateIp = privateIp;
            return this;
        }
        @CustomType.Setter
        public Builder recoStorageSizeInGb(Integer recoStorageSizeInGb) {
            if (recoStorageSizeInGb == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "recoStorageSizeInGb");
            }
            this.recoStorageSizeInGb = recoStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsName(String scanDnsName) {
            if (scanDnsName == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "scanDnsName");
            }
            this.scanDnsName = scanDnsName;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsRecordId(String scanDnsRecordId) {
            if (scanDnsRecordId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "scanDnsRecordId");
            }
            this.scanDnsRecordId = scanDnsRecordId;
            return this;
        }
        @CustomType.Setter
        public Builder scanIpIds(List<String> scanIpIds) {
            if (scanIpIds == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "scanIpIds");
            }
            this.scanIpIds = scanIpIds;
            return this;
        }
        public Builder scanIpIds(String... scanIpIds) {
            return scanIpIds(List.of(scanIpIds));
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDbSystemId(String sourceDbSystemId) {
            if (sourceDbSystemId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "sourceDbSystemId");
            }
            this.sourceDbSystemId = sourceDbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder sparseDiskgroup(Boolean sparseDiskgroup) {
            if (sparseDiskgroup == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "sparseDiskgroup");
            }
            this.sparseDiskgroup = sparseDiskgroup;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeys(List<String> sshPublicKeys) {
            if (sshPublicKeys == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "sshPublicKeys");
            }
            this.sshPublicKeys = sshPublicKeys;
            return this;
        }
        public Builder sshPublicKeys(String... sshPublicKeys) {
            return sshPublicKeys(List.of(sshPublicKeys));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageVolumePerformanceMode(String storageVolumePerformanceMode) {
            if (storageVolumePerformanceMode == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "storageVolumePerformanceMode");
            }
            this.storageVolumePerformanceMode = storageVolumePerformanceMode;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vipIds(List<String> vipIds) {
            if (vipIds == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "vipIds");
            }
            this.vipIds = vipIds;
            return this;
        }
        public Builder vipIds(String... vipIds) {
            return vipIds(List.of(vipIds));
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetDbSystemsDbSystem", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetDbSystemsDbSystem build() {
            final var _resultValue = new GetDbSystemsDbSystem();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.backupNetworkNsgIds = backupNetworkNsgIds;
            _resultValue.backupSubnetId = backupSubnetId;
            _resultValue.clusterName = clusterName;
            _resultValue.compartmentId = compartmentId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.dataCollectionOptions = dataCollectionOptions;
            _resultValue.dataStoragePercentage = dataStoragePercentage;
            _resultValue.dataStorageSizeInGb = dataStorageSizeInGb;
            _resultValue.databaseEdition = databaseEdition;
            _resultValue.dbHomes = dbHomes;
            _resultValue.dbSystemOptions = dbSystemOptions;
            _resultValue.definedTags = definedTags;
            _resultValue.diskRedundancy = diskRedundancy;
            _resultValue.displayName = displayName;
            _resultValue.domain = domain;
            _resultValue.faultDomains = faultDomains;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.iormConfigCaches = iormConfigCaches;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.kmsKeyVersionId = kmsKeyVersionId;
            _resultValue.lastMaintenanceRunId = lastMaintenanceRunId;
            _resultValue.lastPatchHistoryEntryId = lastPatchHistoryEntryId;
            _resultValue.licenseModel = licenseModel;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.listenerPort = listenerPort;
            _resultValue.maintenanceWindowDetails = maintenanceWindowDetails;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.nextMaintenanceRunId = nextMaintenanceRunId;
            _resultValue.nodeCount = nodeCount;
            _resultValue.nsgIds = nsgIds;
            _resultValue.osVersion = osVersion;
            _resultValue.pointInTimeDataDiskCloneTimestamp = pointInTimeDataDiskCloneTimestamp;
            _resultValue.privateIp = privateIp;
            _resultValue.recoStorageSizeInGb = recoStorageSizeInGb;
            _resultValue.scanDnsName = scanDnsName;
            _resultValue.scanDnsRecordId = scanDnsRecordId;
            _resultValue.scanIpIds = scanIpIds;
            _resultValue.shape = shape;
            _resultValue.source = source;
            _resultValue.sourceDbSystemId = sourceDbSystemId;
            _resultValue.sparseDiskgroup = sparseDiskgroup;
            _resultValue.sshPublicKeys = sshPublicKeys;
            _resultValue.state = state;
            _resultValue.storageVolumePerformanceMode = storageVolumePerformanceMode;
            _resultValue.subnetId = subnetId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeZone = timeZone;
            _resultValue.version = version;
            _resultValue.vipIds = vipIds;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
