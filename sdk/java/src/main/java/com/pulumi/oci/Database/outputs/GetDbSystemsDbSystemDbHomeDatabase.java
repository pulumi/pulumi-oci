// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemDbHomeDatabaseConnectionString;
import com.pulumi.oci.Database.outputs.GetDbSystemsDbSystemDbHomeDatabaseDbBackupConfig;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbSystemsDbSystemDbHomeDatabase {
    private @Nullable String adminPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup. Specify a backupId to list only the DB systems or DB homes that support creating a database using this backup in this compartment.
     * 
     */
    private @Nullable String backupId;
    private @Nullable String backupTdePassword;
    private @Nullable String characterSet;
    private @Nullable List<GetDbSystemsDbSystemDbHomeDatabaseConnectionString> connectionStrings;
    private @Nullable String databaseId;
    private @Nullable String databaseSoftwareImageId;
    private @Nullable List<GetDbSystemsDbSystemDbHomeDatabaseDbBackupConfig> dbBackupConfigs;
    private @Nullable String dbDomain;
    private @Nullable String dbName;
    private @Nullable String dbUniqueName;
    private @Nullable String dbWorkload;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private @Nullable String id;
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    private @Nullable String kmsKeyId;
    private @Nullable String kmsKeyVersionId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    private @Nullable String ncharacterSet;
    private @Nullable String pdbName;
    private @Nullable List<String> pluggableDatabases;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private @Nullable String state;
    private @Nullable String tdeWalletPassword;
    /**
     * @return The date and time the DB system was created.
     * 
     */
    private @Nullable String timeCreated;
    private @Nullable String timeStampForPointInTimeRecovery;
    private @Nullable String vaultId;

    private GetDbSystemsDbSystemDbHomeDatabase() {}
    public Optional<String> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup. Specify a backupId to list only the DB systems or DB homes that support creating a database using this backup in this compartment.
     * 
     */
    public Optional<String> backupId() {
        return Optional.ofNullable(this.backupId);
    }
    public Optional<String> backupTdePassword() {
        return Optional.ofNullable(this.backupTdePassword);
    }
    public Optional<String> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }
    public List<GetDbSystemsDbSystemDbHomeDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings == null ? List.of() : this.connectionStrings;
    }
    public Optional<String> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }
    public Optional<String> databaseSoftwareImageId() {
        return Optional.ofNullable(this.databaseSoftwareImageId);
    }
    public List<GetDbSystemsDbSystemDbHomeDatabaseDbBackupConfig> dbBackupConfigs() {
        return this.dbBackupConfigs == null ? List.of() : this.dbBackupConfigs;
    }
    public Optional<String> dbDomain() {
        return Optional.ofNullable(this.dbDomain);
    }
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    public Optional<String> dbWorkload() {
        return Optional.ofNullable(this.dbWorkload);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    public Optional<String> kmsKeyVersionId() {
        return Optional.ofNullable(this.kmsKeyVersionId);
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    public Optional<String> ncharacterSet() {
        return Optional.ofNullable(this.ncharacterSet);
    }
    public Optional<String> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }
    public List<String> pluggableDatabases() {
        return this.pluggableDatabases == null ? List.of() : this.pluggableDatabases;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }
    /**
     * @return The date and time the DB system was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    public Optional<String> timeStampForPointInTimeRecovery() {
        return Optional.ofNullable(this.timeStampForPointInTimeRecovery);
    }
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemsDbSystemDbHomeDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminPassword;
        private @Nullable String backupId;
        private @Nullable String backupTdePassword;
        private @Nullable String characterSet;
        private @Nullable List<GetDbSystemsDbSystemDbHomeDatabaseConnectionString> connectionStrings;
        private @Nullable String databaseId;
        private @Nullable String databaseSoftwareImageId;
        private @Nullable List<GetDbSystemsDbSystemDbHomeDatabaseDbBackupConfig> dbBackupConfigs;
        private @Nullable String dbDomain;
        private @Nullable String dbName;
        private @Nullable String dbUniqueName;
        private @Nullable String dbWorkload;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String kmsKeyId;
        private @Nullable String kmsKeyVersionId;
        private @Nullable String lifecycleDetails;
        private @Nullable String ncharacterSet;
        private @Nullable String pdbName;
        private @Nullable List<String> pluggableDatabases;
        private @Nullable String state;
        private @Nullable String tdeWalletPassword;
        private @Nullable String timeCreated;
        private @Nullable String timeStampForPointInTimeRecovery;
        private @Nullable String vaultId;
        public Builder() {}
        public Builder(GetDbSystemsDbSystemDbHomeDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminPassword = defaults.adminPassword;
    	      this.backupId = defaults.backupId;
    	      this.backupTdePassword = defaults.backupTdePassword;
    	      this.characterSet = defaults.characterSet;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseSoftwareImageId = defaults.databaseSoftwareImageId;
    	      this.dbBackupConfigs = defaults.dbBackupConfigs;
    	      this.dbDomain = defaults.dbDomain;
    	      this.dbName = defaults.dbName;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbWorkload = defaults.dbWorkload;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kmsKeyVersionId = defaults.kmsKeyVersionId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.pdbName = defaults.pdbName;
    	      this.pluggableDatabases = defaults.pluggableDatabases;
    	      this.state = defaults.state;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStampForPointInTimeRecovery = defaults.timeStampForPointInTimeRecovery;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder adminPassword(@Nullable String adminPassword) {
            this.adminPassword = adminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder backupId(@Nullable String backupId) {
            this.backupId = backupId;
            return this;
        }
        @CustomType.Setter
        public Builder backupTdePassword(@Nullable String backupTdePassword) {
            this.backupTdePassword = backupTdePassword;
            return this;
        }
        @CustomType.Setter
        public Builder characterSet(@Nullable String characterSet) {
            this.characterSet = characterSet;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(@Nullable List<GetDbSystemsDbSystemDbHomeDatabaseConnectionString> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(GetDbSystemsDbSystemDbHomeDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder databaseId(@Nullable String databaseId) {
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSoftwareImageId(@Nullable String databaseSoftwareImageId) {
            this.databaseSoftwareImageId = databaseSoftwareImageId;
            return this;
        }
        @CustomType.Setter
        public Builder dbBackupConfigs(@Nullable List<GetDbSystemsDbSystemDbHomeDatabaseDbBackupConfig> dbBackupConfigs) {
            this.dbBackupConfigs = dbBackupConfigs;
            return this;
        }
        public Builder dbBackupConfigs(GetDbSystemsDbSystemDbHomeDatabaseDbBackupConfig... dbBackupConfigs) {
            return dbBackupConfigs(List.of(dbBackupConfigs));
        }
        @CustomType.Setter
        public Builder dbDomain(@Nullable String dbDomain) {
            this.dbDomain = dbDomain;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dbWorkload(@Nullable String dbWorkload) {
            this.dbWorkload = dbWorkload;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionId(@Nullable String kmsKeyVersionId) {
            this.kmsKeyVersionId = kmsKeyVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(@Nullable String ncharacterSet) {
            this.ncharacterSet = ncharacterSet;
            return this;
        }
        @CustomType.Setter
        public Builder pdbName(@Nullable String pdbName) {
            this.pdbName = pdbName;
            return this;
        }
        @CustomType.Setter
        public Builder pluggableDatabases(@Nullable List<String> pluggableDatabases) {
            this.pluggableDatabases = pluggableDatabases;
            return this;
        }
        public Builder pluggableDatabases(String... pluggableDatabases) {
            return pluggableDatabases(List.of(pluggableDatabases));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tdeWalletPassword(@Nullable String tdeWalletPassword) {
            this.tdeWalletPassword = tdeWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeStampForPointInTimeRecovery(@Nullable String timeStampForPointInTimeRecovery) {
            this.timeStampForPointInTimeRecovery = timeStampForPointInTimeRecovery;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {
            this.vaultId = vaultId;
            return this;
        }
        public GetDbSystemsDbSystemDbHomeDatabase build() {
            final var o = new GetDbSystemsDbSystemDbHomeDatabase();
            o.adminPassword = adminPassword;
            o.backupId = backupId;
            o.backupTdePassword = backupTdePassword;
            o.characterSet = characterSet;
            o.connectionStrings = connectionStrings;
            o.databaseId = databaseId;
            o.databaseSoftwareImageId = databaseSoftwareImageId;
            o.dbBackupConfigs = dbBackupConfigs;
            o.dbDomain = dbDomain;
            o.dbName = dbName;
            o.dbUniqueName = dbUniqueName;
            o.dbWorkload = dbWorkload;
            o.definedTags = definedTags;
            o.freeformTags = freeformTags;
            o.id = id;
            o.kmsKeyId = kmsKeyId;
            o.kmsKeyVersionId = kmsKeyVersionId;
            o.lifecycleDetails = lifecycleDetails;
            o.ncharacterSet = ncharacterSet;
            o.pdbName = pdbName;
            o.pluggableDatabases = pluggableDatabases;
            o.state = state;
            o.tdeWalletPassword = tdeWalletPassword;
            o.timeCreated = timeCreated;
            o.timeStampForPointInTimeRecovery = timeStampForPointInTimeRecovery;
            o.vaultId = vaultId;
            return o;
        }
    }
}
