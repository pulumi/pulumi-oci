// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbSystemsUpgradeHistoryEntriesDbSystemUpgradeHistoryEntry {
    /**
     * @return The operating system upgrade action.
     * 
     */
    private String action;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the upgrade history entry.
     * 
     */
    private String id;
    /**
     * @return A descriptive text associated with the lifecycleState. Typically contains additional displayable text.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A valid Oracle Grid Infrastructure (GI) software version.
     * 
     */
    private String newGiVersion;
    /**
     * @return A valid Oracle Grid Infrastructure (GI) software version.
     * 
     */
    private String oldGiVersion;
    /**
     * @return The retention period, in days, for the snapshot that allows you to perform a rollback of the upgrade operation. After this number of days passes, you cannot roll back the upgrade.
     * 
     */
    private Integer snapshotRetentionPeriodInDays;
    /**
     * @return A filter to return only upgrade history entries that match the given lifecycle state exactly.
     * 
     */
    private String state;
    /**
     * @return The date and time when the upgrade action completed
     * 
     */
    private String timeEnded;
    /**
     * @return The date and time when the upgrade action started.
     * 
     */
    private String timeStarted;

    private GetDbSystemsUpgradeHistoryEntriesDbSystemUpgradeHistoryEntry() {}
    /**
     * @return The operating system upgrade action.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the upgrade history entry.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A descriptive text associated with the lifecycleState. Typically contains additional displayable text.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A valid Oracle Grid Infrastructure (GI) software version.
     * 
     */
    public String newGiVersion() {
        return this.newGiVersion;
    }
    /**
     * @return A valid Oracle Grid Infrastructure (GI) software version.
     * 
     */
    public String oldGiVersion() {
        return this.oldGiVersion;
    }
    /**
     * @return The retention period, in days, for the snapshot that allows you to perform a rollback of the upgrade operation. After this number of days passes, you cannot roll back the upgrade.
     * 
     */
    public Integer snapshotRetentionPeriodInDays() {
        return this.snapshotRetentionPeriodInDays;
    }
    /**
     * @return A filter to return only upgrade history entries that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time when the upgrade action completed
     * 
     */
    public String timeEnded() {
        return this.timeEnded;
    }
    /**
     * @return The date and time when the upgrade action started.
     * 
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbSystemsUpgradeHistoryEntriesDbSystemUpgradeHistoryEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String id;
        private String lifecycleDetails;
        private String newGiVersion;
        private String oldGiVersion;
        private Integer snapshotRetentionPeriodInDays;
        private String state;
        private String timeEnded;
        private String timeStarted;
        public Builder() {}
        public Builder(GetDbSystemsUpgradeHistoryEntriesDbSystemUpgradeHistoryEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.newGiVersion = defaults.newGiVersion;
    	      this.oldGiVersion = defaults.oldGiVersion;
    	      this.snapshotRetentionPeriodInDays = defaults.snapshotRetentionPeriodInDays;
    	      this.state = defaults.state;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder newGiVersion(String newGiVersion) {
            this.newGiVersion = Objects.requireNonNull(newGiVersion);
            return this;
        }
        @CustomType.Setter
        public Builder oldGiVersion(String oldGiVersion) {
            this.oldGiVersion = Objects.requireNonNull(oldGiVersion);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotRetentionPeriodInDays(Integer snapshotRetentionPeriodInDays) {
            this.snapshotRetentionPeriodInDays = Objects.requireNonNull(snapshotRetentionPeriodInDays);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(String timeEnded) {
            this.timeEnded = Objects.requireNonNull(timeEnded);
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(String timeStarted) {
            this.timeStarted = Objects.requireNonNull(timeStarted);
            return this;
        }
        public GetDbSystemsUpgradeHistoryEntriesDbSystemUpgradeHistoryEntry build() {
            final var o = new GetDbSystemsUpgradeHistoryEntriesDbSystemUpgradeHistoryEntry();
            o.action = action;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.newGiVersion = newGiVersion;
            o.oldGiVersion = oldGiVersion;
            o.snapshotRetentionPeriodInDays = snapshotRetentionPeriodInDays;
            o.state = state;
            o.timeEnded = timeEnded;
            o.timeStarted = timeStarted;
            return o;
        }
    }
}
