// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbVersionsDbVersion {
    /**
     * @return True if this version of the Oracle Database software is the latest version for a release.
     * 
     */
    private @Nullable Boolean isLatestForMajorVersion;
    /**
     * @return True if this version of the Oracle Database software is the preview version.
     * 
     */
    private @Nullable Boolean isPreviewDbVersion;
    /**
     * @return If provided, filters the results to the set of database versions which are supported for Upgrade.
     * 
     */
    private @Nullable Boolean isUpgradeSupported;
    /**
     * @return True if this version of the Oracle Database software supports pluggable databases.
     * 
     */
    private @Nullable Boolean supportsPdb;
    /**
     * @return A valid Oracle Database version.
     * 
     */
    private @Nullable String version;

    private GetDbVersionsDbVersion() {}
    /**
     * @return True if this version of the Oracle Database software is the latest version for a release.
     * 
     */
    public Optional<Boolean> isLatestForMajorVersion() {
        return Optional.ofNullable(this.isLatestForMajorVersion);
    }
    /**
     * @return True if this version of the Oracle Database software is the preview version.
     * 
     */
    public Optional<Boolean> isPreviewDbVersion() {
        return Optional.ofNullable(this.isPreviewDbVersion);
    }
    /**
     * @return If provided, filters the results to the set of database versions which are supported for Upgrade.
     * 
     */
    public Optional<Boolean> isUpgradeSupported() {
        return Optional.ofNullable(this.isUpgradeSupported);
    }
    /**
     * @return True if this version of the Oracle Database software supports pluggable databases.
     * 
     */
    public Optional<Boolean> supportsPdb() {
        return Optional.ofNullable(this.supportsPdb);
    }
    /**
     * @return A valid Oracle Database version.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbVersionsDbVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isLatestForMajorVersion;
        private @Nullable Boolean isPreviewDbVersion;
        private @Nullable Boolean isUpgradeSupported;
        private @Nullable Boolean supportsPdb;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetDbVersionsDbVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isLatestForMajorVersion = defaults.isLatestForMajorVersion;
    	      this.isPreviewDbVersion = defaults.isPreviewDbVersion;
    	      this.isUpgradeSupported = defaults.isUpgradeSupported;
    	      this.supportsPdb = defaults.supportsPdb;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder isLatestForMajorVersion(@Nullable Boolean isLatestForMajorVersion) {
            this.isLatestForMajorVersion = isLatestForMajorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder isPreviewDbVersion(@Nullable Boolean isPreviewDbVersion) {
            this.isPreviewDbVersion = isPreviewDbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder isUpgradeSupported(@Nullable Boolean isUpgradeSupported) {
            this.isUpgradeSupported = isUpgradeSupported;
            return this;
        }
        @CustomType.Setter
        public Builder supportsPdb(@Nullable Boolean supportsPdb) {
            this.supportsPdb = supportsPdb;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public GetDbVersionsDbVersion build() {
            final var o = new GetDbVersionsDbVersion();
            o.isLatestForMajorVersion = isLatestForMajorVersion;
            o.isPreviewDbVersion = isPreviewDbVersion;
            o.isUpgradeSupported = isUpgradeSupported;
            o.supportsPdb = supportsPdb;
            o.version = version;
            return o;
        }
    }
}
