// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetDbVersionsDbVersion;
import com.pulumi.oci.Database.outputs.GetDbVersionsFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbVersionsResult {
    private String compartmentId;
    private @Nullable String dbSystemId;
    private @Nullable String dbSystemShape;
    /**
     * @return The list of db_versions.
     * 
     */
    private List<GetDbVersionsDbVersion> dbVersions;
    private @Nullable List<GetDbVersionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isDatabaseSoftwareImageSupported;
    /**
     * @return True if this version of the Oracle Database software is supported for Upgrade.
     * 
     */
    private @Nullable Boolean isUpgradeSupported;
    private @Nullable String shapeAttribute;
    private @Nullable String storageManagement;

    private GetDbVersionsResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    public Optional<String> dbSystemShape() {
        return Optional.ofNullable(this.dbSystemShape);
    }
    /**
     * @return The list of db_versions.
     * 
     */
    public List<GetDbVersionsDbVersion> dbVersions() {
        return this.dbVersions;
    }
    public List<GetDbVersionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isDatabaseSoftwareImageSupported() {
        return Optional.ofNullable(this.isDatabaseSoftwareImageSupported);
    }
    /**
     * @return True if this version of the Oracle Database software is supported for Upgrade.
     * 
     */
    public Optional<Boolean> isUpgradeSupported() {
        return Optional.ofNullable(this.isUpgradeSupported);
    }
    public Optional<String> shapeAttribute() {
        return Optional.ofNullable(this.shapeAttribute);
    }
    public Optional<String> storageManagement() {
        return Optional.ofNullable(this.storageManagement);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String dbSystemId;
        private @Nullable String dbSystemShape;
        private List<GetDbVersionsDbVersion> dbVersions;
        private @Nullable List<GetDbVersionsFilter> filters;
        private String id;
        private @Nullable Boolean isDatabaseSoftwareImageSupported;
        private @Nullable Boolean isUpgradeSupported;
        private @Nullable String shapeAttribute;
        private @Nullable String storageManagement;
        public Builder() {}
        public Builder(GetDbVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbSystemShape = defaults.dbSystemShape;
    	      this.dbVersions = defaults.dbVersions;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isDatabaseSoftwareImageSupported = defaults.isDatabaseSoftwareImageSupported;
    	      this.isUpgradeSupported = defaults.isUpgradeSupported;
    	      this.shapeAttribute = defaults.shapeAttribute;
    	      this.storageManagement = defaults.storageManagement;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDbVersionsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {

            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemShape(@Nullable String dbSystemShape) {

            this.dbSystemShape = dbSystemShape;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersions(List<GetDbVersionsDbVersion> dbVersions) {
            if (dbVersions == null) {
              throw new MissingRequiredPropertyException("GetDbVersionsResult", "dbVersions");
            }
            this.dbVersions = dbVersions;
            return this;
        }
        public Builder dbVersions(GetDbVersionsDbVersion... dbVersions) {
            return dbVersions(List.of(dbVersions));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDbVersionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDbVersionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDbVersionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDatabaseSoftwareImageSupported(@Nullable Boolean isDatabaseSoftwareImageSupported) {

            this.isDatabaseSoftwareImageSupported = isDatabaseSoftwareImageSupported;
            return this;
        }
        @CustomType.Setter
        public Builder isUpgradeSupported(@Nullable Boolean isUpgradeSupported) {

            this.isUpgradeSupported = isUpgradeSupported;
            return this;
        }
        @CustomType.Setter
        public Builder shapeAttribute(@Nullable String shapeAttribute) {

            this.shapeAttribute = shapeAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder storageManagement(@Nullable String storageManagement) {

            this.storageManagement = storageManagement;
            return this;
        }
        public GetDbVersionsResult build() {
            final var _resultValue = new GetDbVersionsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.dbSystemShape = dbSystemShape;
            _resultValue.dbVersions = dbVersions;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isDatabaseSoftwareImageSupported = isDatabaseSoftwareImageSupported;
            _resultValue.isUpgradeSupported = isUpgradeSupported;
            _resultValue.shapeAttribute = shapeAttribute;
            _resultValue.storageManagement = storageManagement;
            return _resultValue;
        }
    }
}
