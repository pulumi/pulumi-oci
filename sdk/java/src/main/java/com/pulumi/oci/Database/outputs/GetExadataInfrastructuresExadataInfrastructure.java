// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureContact;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureExascaleConfig;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExadataInfrastructuresExadataInfrastructure {
    /**
     * @return The requested number of additional storage servers activated for the Exadata infrastructure.
     * 
     */
    private Integer activatedStorageCount;
    private String activationFile;
    /**
     * @return The requested number of additional compute servers for the Exadata infrastructure.
     * 
     */
    private Integer additionalComputeCount;
    /**
     * @return Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
     * 
     */
    private String additionalComputeSystemModel;
    /**
     * @return The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    private Integer additionalStorageCount;
    /**
     * @return The CIDR block for the Exadata administration network.
     * 
     */
    private String adminNetworkCidr;
    /**
     * @return The name of the availability domain that the Exadata infrastructure is located in.
     * 
     */
    private String availabilityDomain;
    /**
     * @return The IP address for the first control plane server.
     * 
     */
    private String cloudControlPlaneServer1;
    /**
     * @return The IP address for the second control plane server.
     * 
     */
    private String cloudControlPlaneServer2;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return The number of compute servers for the Exadata infrastructure.
     * 
     */
    private Integer computeCount;
    /**
     * @return The compute model of the Autonomous Database. This is required if using the `computeCount` parameter. If using `cpuCoreCount` then it is an error to specify `computeModel` to a non-null value. ECPU compute model is the recommended model and OCPU compute model is legacy.
     * 
     */
    private String computeModel;
    /**
     * @return The list of contacts for the Exadata infrastructure.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureContact> contacts;
    /**
     * @return The corporate network proxy for access to the control plane network.
     * 
     */
    private String corporateProxy;
    /**
     * @return The number of enabled CPU cores.
     * 
     */
    private Integer cpusEnabled;
    private Boolean createAsync;
    /**
     * @return The CSI Number of the Exadata infrastructure.
     * 
     */
    private String csiNumber;
    /**
     * @return Size, in terabytes, of the DATA disk group.
     * 
     */
    private Double dataStorageSizeInTbs;
    /**
     * @return The database server type of the Exadata infrastructure.
     * 
     */
    private String databaseServerType;
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    private String dbServerVersion;
    /**
     * @return Details of the file system configuration of the Exadata infrastructure.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    private String displayName;
    /**
     * @return The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    private List<String> dnsServers;
    /**
     * @return The exascale config response details for the Exadata Cloud{@literal @}Customer infrastructure or cloud Exadata infrastructure . Applies to both Exadata Cloud{@literal @}Customer instances and Exadata Cloud Service instances.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureExascaleConfig> exascaleConfigs;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The gateway for the control plane network.
     * 
     */
    private String gateway;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    private String id;
    /**
     * @return The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    private String infiniBandNetworkCidr;
    /**
     * @return Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
     * 
     */
    private Boolean isCpsOfflineReportEnabled;
    /**
     * @return Indicates if deployment is Multi-Rack or not.
     * 
     */
    private Boolean isMultiRackDeployment;
    /**
     * @return If true, the infrastructure is using granular maintenance scheduling preference.
     * 
     */
    private Boolean isSchedulingPolicyAssociated;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
     * 
     */
    private String maintenanceSloStatus;
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows;
    /**
     * @return The total number of CPU cores available.
     * 
     */
    private Integer maxCpuCount;
    /**
     * @return The total available DATA disk group size.
     * 
     */
    private Double maxDataStorageInTbs;
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    private Integer maxDbNodeStorageInGbs;
    /**
     * @return The total memory available in GBs.
     * 
     */
    private Integer maxMemoryInGbs;
    /**
     * @return The memory allocated in GBs.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The monthly software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    private String monthlyDbServerVersion;
    /**
     * @return The base64 encoded Multi-Rack configuration json file.
     * 
     */
    private String multiRackConfigurationFile;
    /**
     * @return The netmask for the control plane network.
     * 
     */
    private String netmask;
    /**
     * @return Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails;
    /**
     * @return The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    private List<String> ntpServers;
    /**
     * @return The serial number for the Exadata infrastructure.
     * 
     */
    private String rackSerialNumber;
    /**
     * @return The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    private String shape;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    /**
     * @return The number of Exadata storage servers for the Exadata infrastructure.
     * 
     */
    private Integer storageCount;
    /**
     * @return The storage server type of the Exadata infrastructure.
     * 
     */
    private String storageServerType;
    /**
     * @return The software version of the storage servers (cells) in the Exadata infrastructure.
     * 
     */
    private String storageServerVersion;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the Exadata infrastructure was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    private String timeZone;

    private GetExadataInfrastructuresExadataInfrastructure() {}
    /**
     * @return The requested number of additional storage servers activated for the Exadata infrastructure.
     * 
     */
    public Integer activatedStorageCount() {
        return this.activatedStorageCount;
    }
    public String activationFile() {
        return this.activationFile;
    }
    /**
     * @return The requested number of additional compute servers for the Exadata infrastructure.
     * 
     */
    public Integer additionalComputeCount() {
        return this.additionalComputeCount;
    }
    /**
     * @return Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
     * 
     */
    public String additionalComputeSystemModel() {
        return this.additionalComputeSystemModel;
    }
    /**
     * @return The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    public Integer additionalStorageCount() {
        return this.additionalStorageCount;
    }
    /**
     * @return The CIDR block for the Exadata administration network.
     * 
     */
    public String adminNetworkCidr() {
        return this.adminNetworkCidr;
    }
    /**
     * @return The name of the availability domain that the Exadata infrastructure is located in.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return The IP address for the first control plane server.
     * 
     */
    public String cloudControlPlaneServer1() {
        return this.cloudControlPlaneServer1;
    }
    /**
     * @return The IP address for the second control plane server.
     * 
     */
    public String cloudControlPlaneServer2() {
        return this.cloudControlPlaneServer2;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The number of compute servers for the Exadata infrastructure.
     * 
     */
    public Integer computeCount() {
        return this.computeCount;
    }
    /**
     * @return The compute model of the Autonomous Database. This is required if using the `computeCount` parameter. If using `cpuCoreCount` then it is an error to specify `computeModel` to a non-null value. ECPU compute model is the recommended model and OCPU compute model is legacy.
     * 
     */
    public String computeModel() {
        return this.computeModel;
    }
    /**
     * @return The list of contacts for the Exadata infrastructure.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureContact> contacts() {
        return this.contacts;
    }
    /**
     * @return The corporate network proxy for access to the control plane network.
     * 
     */
    public String corporateProxy() {
        return this.corporateProxy;
    }
    /**
     * @return The number of enabled CPU cores.
     * 
     */
    public Integer cpusEnabled() {
        return this.cpusEnabled;
    }
    public Boolean createAsync() {
        return this.createAsync;
    }
    /**
     * @return The CSI Number of the Exadata infrastructure.
     * 
     */
    public String csiNumber() {
        return this.csiNumber;
    }
    /**
     * @return Size, in terabytes, of the DATA disk group.
     * 
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }
    /**
     * @return The database server type of the Exadata infrastructure.
     * 
     */
    public String databaseServerType() {
        return this.databaseServerType;
    }
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    public String dbServerVersion() {
        return this.dbServerVersion;
    }
    /**
     * @return Details of the file system configuration of the Exadata infrastructure.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations() {
        return this.definedFileSystemConfigurations;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return The exascale config response details for the Exadata Cloud{@literal @}Customer infrastructure or cloud Exadata infrastructure . Applies to both Exadata Cloud{@literal @}Customer instances and Exadata Cloud Service instances.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureExascaleConfig> exascaleConfigs() {
        return this.exascaleConfigs;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The gateway for the control plane network.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    public String infiniBandNetworkCidr() {
        return this.infiniBandNetworkCidr;
    }
    /**
     * @return Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
     * 
     */
    public Boolean isCpsOfflineReportEnabled() {
        return this.isCpsOfflineReportEnabled;
    }
    /**
     * @return Indicates if deployment is Multi-Rack or not.
     * 
     */
    public Boolean isMultiRackDeployment() {
        return this.isMultiRackDeployment;
    }
    /**
     * @return If true, the infrastructure is using granular maintenance scheduling preference.
     * 
     */
    public Boolean isSchedulingPolicyAssociated() {
        return this.isSchedulingPolicyAssociated;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
     * 
     */
    public String maintenanceSloStatus() {
        return this.maintenanceSloStatus;
    }
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The total number of CPU cores available.
     * 
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }
    /**
     * @return The total available DATA disk group size.
     * 
     */
    public Double maxDataStorageInTbs() {
        return this.maxDataStorageInTbs;
    }
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    public Integer maxDbNodeStorageInGbs() {
        return this.maxDbNodeStorageInGbs;
    }
    /**
     * @return The total memory available in GBs.
     * 
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }
    /**
     * @return The memory allocated in GBs.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The monthly software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    public String monthlyDbServerVersion() {
        return this.monthlyDbServerVersion;
    }
    /**
     * @return The base64 encoded Multi-Rack configuration json file.
     * 
     */
    public String multiRackConfigurationFile() {
        return this.multiRackConfigurationFile;
    }
    /**
     * @return The netmask for the control plane network.
     * 
     */
    public String netmask() {
        return this.netmask;
    }
    /**
     * @return Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails() {
        return this.networkBondingModeDetails;
    }
    /**
     * @return The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    public List<String> ntpServers() {
        return this.ntpServers;
    }
    /**
     * @return The serial number for the Exadata infrastructure.
     * 
     */
    public String rackSerialNumber() {
        return this.rackSerialNumber;
    }
    /**
     * @return The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The number of Exadata storage servers for the Exadata infrastructure.
     * 
     */
    public Integer storageCount() {
        return this.storageCount;
    }
    /**
     * @return The storage server type of the Exadata infrastructure.
     * 
     */
    public String storageServerType() {
        return this.storageServerType;
    }
    /**
     * @return The software version of the storage servers (cells) in the Exadata infrastructure.
     * 
     */
    public String storageServerVersion() {
        return this.storageServerVersion;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the Exadata infrastructure was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExadataInfrastructuresExadataInfrastructure defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activatedStorageCount;
        private String activationFile;
        private Integer additionalComputeCount;
        private String additionalComputeSystemModel;
        private Integer additionalStorageCount;
        private String adminNetworkCidr;
        private String availabilityDomain;
        private String cloudControlPlaneServer1;
        private String cloudControlPlaneServer2;
        private String compartmentId;
        private Integer computeCount;
        private String computeModel;
        private List<GetExadataInfrastructuresExadataInfrastructureContact> contacts;
        private String corporateProxy;
        private Integer cpusEnabled;
        private Boolean createAsync;
        private String csiNumber;
        private Double dataStorageSizeInTbs;
        private String databaseServerType;
        private Integer dbNodeStorageSizeInGbs;
        private String dbServerVersion;
        private List<GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations;
        private Map<String,String> definedTags;
        private String displayName;
        private List<String> dnsServers;
        private List<GetExadataInfrastructuresExadataInfrastructureExascaleConfig> exascaleConfigs;
        private Map<String,String> freeformTags;
        private String gateway;
        private String id;
        private String infiniBandNetworkCidr;
        private Boolean isCpsOfflineReportEnabled;
        private Boolean isMultiRackDeployment;
        private Boolean isSchedulingPolicyAssociated;
        private String lifecycleDetails;
        private String maintenanceSloStatus;
        private List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows;
        private Integer maxCpuCount;
        private Double maxDataStorageInTbs;
        private Integer maxDbNodeStorageInGbs;
        private Integer maxMemoryInGbs;
        private Integer memorySizeInGbs;
        private String monthlyDbServerVersion;
        private String multiRackConfigurationFile;
        private String netmask;
        private List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails;
        private List<String> ntpServers;
        private String rackSerialNumber;
        private String shape;
        private String state;
        private Integer storageCount;
        private String storageServerType;
        private String storageServerVersion;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeZone;
        public Builder() {}
        public Builder(GetExadataInfrastructuresExadataInfrastructure defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activatedStorageCount = defaults.activatedStorageCount;
    	      this.activationFile = defaults.activationFile;
    	      this.additionalComputeCount = defaults.additionalComputeCount;
    	      this.additionalComputeSystemModel = defaults.additionalComputeSystemModel;
    	      this.additionalStorageCount = defaults.additionalStorageCount;
    	      this.adminNetworkCidr = defaults.adminNetworkCidr;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.cloudControlPlaneServer1 = defaults.cloudControlPlaneServer1;
    	      this.cloudControlPlaneServer2 = defaults.cloudControlPlaneServer2;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeCount = defaults.computeCount;
    	      this.computeModel = defaults.computeModel;
    	      this.contacts = defaults.contacts;
    	      this.corporateProxy = defaults.corporateProxy;
    	      this.cpusEnabled = defaults.cpusEnabled;
    	      this.createAsync = defaults.createAsync;
    	      this.csiNumber = defaults.csiNumber;
    	      this.dataStorageSizeInTbs = defaults.dataStorageSizeInTbs;
    	      this.databaseServerType = defaults.databaseServerType;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServerVersion = defaults.dbServerVersion;
    	      this.definedFileSystemConfigurations = defaults.definedFileSystemConfigurations;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.dnsServers = defaults.dnsServers;
    	      this.exascaleConfigs = defaults.exascaleConfigs;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gateway = defaults.gateway;
    	      this.id = defaults.id;
    	      this.infiniBandNetworkCidr = defaults.infiniBandNetworkCidr;
    	      this.isCpsOfflineReportEnabled = defaults.isCpsOfflineReportEnabled;
    	      this.isMultiRackDeployment = defaults.isMultiRackDeployment;
    	      this.isSchedulingPolicyAssociated = defaults.isSchedulingPolicyAssociated;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maintenanceSloStatus = defaults.maintenanceSloStatus;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDataStorageInTbs = defaults.maxDataStorageInTbs;
    	      this.maxDbNodeStorageInGbs = defaults.maxDbNodeStorageInGbs;
    	      this.maxMemoryInGbs = defaults.maxMemoryInGbs;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.monthlyDbServerVersion = defaults.monthlyDbServerVersion;
    	      this.multiRackConfigurationFile = defaults.multiRackConfigurationFile;
    	      this.netmask = defaults.netmask;
    	      this.networkBondingModeDetails = defaults.networkBondingModeDetails;
    	      this.ntpServers = defaults.ntpServers;
    	      this.rackSerialNumber = defaults.rackSerialNumber;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.storageCount = defaults.storageCount;
    	      this.storageServerType = defaults.storageServerType;
    	      this.storageServerVersion = defaults.storageServerVersion;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder activatedStorageCount(Integer activatedStorageCount) {
            if (activatedStorageCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "activatedStorageCount");
            }
            this.activatedStorageCount = activatedStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder activationFile(String activationFile) {
            if (activationFile == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "activationFile");
            }
            this.activationFile = activationFile;
            return this;
        }
        @CustomType.Setter
        public Builder additionalComputeCount(Integer additionalComputeCount) {
            if (additionalComputeCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "additionalComputeCount");
            }
            this.additionalComputeCount = additionalComputeCount;
            return this;
        }
        @CustomType.Setter
        public Builder additionalComputeSystemModel(String additionalComputeSystemModel) {
            if (additionalComputeSystemModel == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "additionalComputeSystemModel");
            }
            this.additionalComputeSystemModel = additionalComputeSystemModel;
            return this;
        }
        @CustomType.Setter
        public Builder additionalStorageCount(Integer additionalStorageCount) {
            if (additionalStorageCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "additionalStorageCount");
            }
            this.additionalStorageCount = additionalStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder adminNetworkCidr(String adminNetworkCidr) {
            if (adminNetworkCidr == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "adminNetworkCidr");
            }
            this.adminNetworkCidr = adminNetworkCidr;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder cloudControlPlaneServer1(String cloudControlPlaneServer1) {
            if (cloudControlPlaneServer1 == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "cloudControlPlaneServer1");
            }
            this.cloudControlPlaneServer1 = cloudControlPlaneServer1;
            return this;
        }
        @CustomType.Setter
        public Builder cloudControlPlaneServer2(String cloudControlPlaneServer2) {
            if (cloudControlPlaneServer2 == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "cloudControlPlaneServer2");
            }
            this.cloudControlPlaneServer2 = cloudControlPlaneServer2;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder computeCount(Integer computeCount) {
            if (computeCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "computeCount");
            }
            this.computeCount = computeCount;
            return this;
        }
        @CustomType.Setter
        public Builder computeModel(String computeModel) {
            if (computeModel == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "computeModel");
            }
            this.computeModel = computeModel;
            return this;
        }
        @CustomType.Setter
        public Builder contacts(List<GetExadataInfrastructuresExadataInfrastructureContact> contacts) {
            if (contacts == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "contacts");
            }
            this.contacts = contacts;
            return this;
        }
        public Builder contacts(GetExadataInfrastructuresExadataInfrastructureContact... contacts) {
            return contacts(List.of(contacts));
        }
        @CustomType.Setter
        public Builder corporateProxy(String corporateProxy) {
            if (corporateProxy == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "corporateProxy");
            }
            this.corporateProxy = corporateProxy;
            return this;
        }
        @CustomType.Setter
        public Builder cpusEnabled(Integer cpusEnabled) {
            if (cpusEnabled == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "cpusEnabled");
            }
            this.cpusEnabled = cpusEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder createAsync(Boolean createAsync) {
            if (createAsync == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "createAsync");
            }
            this.createAsync = createAsync;
            return this;
        }
        @CustomType.Setter
        public Builder csiNumber(String csiNumber) {
            if (csiNumber == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "csiNumber");
            }
            this.csiNumber = csiNumber;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInTbs(Double dataStorageSizeInTbs) {
            if (dataStorageSizeInTbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "dataStorageSizeInTbs");
            }
            this.dataStorageSizeInTbs = dataStorageSizeInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder databaseServerType(String databaseServerType) {
            if (databaseServerType == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "databaseServerType");
            }
            this.databaseServerType = databaseServerType;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerVersion(String dbServerVersion) {
            if (dbServerVersion == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "dbServerVersion");
            }
            this.dbServerVersion = dbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder definedFileSystemConfigurations(List<GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations) {
            if (definedFileSystemConfigurations == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "definedFileSystemConfigurations");
            }
            this.definedFileSystemConfigurations = definedFileSystemConfigurations;
            return this;
        }
        public Builder definedFileSystemConfigurations(GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration... definedFileSystemConfigurations) {
            return definedFileSystemConfigurations(List.of(definedFileSystemConfigurations));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder exascaleConfigs(List<GetExadataInfrastructuresExadataInfrastructureExascaleConfig> exascaleConfigs) {
            if (exascaleConfigs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "exascaleConfigs");
            }
            this.exascaleConfigs = exascaleConfigs;
            return this;
        }
        public Builder exascaleConfigs(GetExadataInfrastructuresExadataInfrastructureExascaleConfig... exascaleConfigs) {
            return exascaleConfigs(List.of(exascaleConfigs));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder infiniBandNetworkCidr(String infiniBandNetworkCidr) {
            if (infiniBandNetworkCidr == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "infiniBandNetworkCidr");
            }
            this.infiniBandNetworkCidr = infiniBandNetworkCidr;
            return this;
        }
        @CustomType.Setter
        public Builder isCpsOfflineReportEnabled(Boolean isCpsOfflineReportEnabled) {
            if (isCpsOfflineReportEnabled == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "isCpsOfflineReportEnabled");
            }
            this.isCpsOfflineReportEnabled = isCpsOfflineReportEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isMultiRackDeployment(Boolean isMultiRackDeployment) {
            if (isMultiRackDeployment == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "isMultiRackDeployment");
            }
            this.isMultiRackDeployment = isMultiRackDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder isSchedulingPolicyAssociated(Boolean isSchedulingPolicyAssociated) {
            if (isSchedulingPolicyAssociated == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "isSchedulingPolicyAssociated");
            }
            this.isSchedulingPolicyAssociated = isSchedulingPolicyAssociated;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceSloStatus(String maintenanceSloStatus) {
            if (maintenanceSloStatus == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "maintenanceSloStatus");
            }
            this.maintenanceSloStatus = maintenanceSloStatus;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder maxCpuCount(Integer maxCpuCount) {
            if (maxCpuCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "maxCpuCount");
            }
            this.maxCpuCount = maxCpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxDataStorageInTbs(Double maxDataStorageInTbs) {
            if (maxDataStorageInTbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "maxDataStorageInTbs");
            }
            this.maxDataStorageInTbs = maxDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxDbNodeStorageInGbs(Integer maxDbNodeStorageInGbs) {
            if (maxDbNodeStorageInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "maxDbNodeStorageInGbs");
            }
            this.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryInGbs(Integer maxMemoryInGbs) {
            if (maxMemoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "maxMemoryInGbs");
            }
            this.maxMemoryInGbs = maxMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyDbServerVersion(String monthlyDbServerVersion) {
            if (monthlyDbServerVersion == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "monthlyDbServerVersion");
            }
            this.monthlyDbServerVersion = monthlyDbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder multiRackConfigurationFile(String multiRackConfigurationFile) {
            if (multiRackConfigurationFile == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "multiRackConfigurationFile");
            }
            this.multiRackConfigurationFile = multiRackConfigurationFile;
            return this;
        }
        @CustomType.Setter
        public Builder netmask(String netmask) {
            if (netmask == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "netmask");
            }
            this.netmask = netmask;
            return this;
        }
        @CustomType.Setter
        public Builder networkBondingModeDetails(List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails) {
            if (networkBondingModeDetails == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "networkBondingModeDetails");
            }
            this.networkBondingModeDetails = networkBondingModeDetails;
            return this;
        }
        public Builder networkBondingModeDetails(GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail... networkBondingModeDetails) {
            return networkBondingModeDetails(List.of(networkBondingModeDetails));
        }
        @CustomType.Setter
        public Builder ntpServers(List<String> ntpServers) {
            if (ntpServers == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "ntpServers");
            }
            this.ntpServers = ntpServers;
            return this;
        }
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }
        @CustomType.Setter
        public Builder rackSerialNumber(String rackSerialNumber) {
            if (rackSerialNumber == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "rackSerialNumber");
            }
            this.rackSerialNumber = rackSerialNumber;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageCount(Integer storageCount) {
            if (storageCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "storageCount");
            }
            this.storageCount = storageCount;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerType(String storageServerType) {
            if (storageServerType == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "storageServerType");
            }
            this.storageServerType = storageServerType;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerVersion(String storageServerVersion) {
            if (storageServerVersion == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "storageServerVersion");
            }
            this.storageServerVersion = storageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructuresExadataInfrastructure", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public GetExadataInfrastructuresExadataInfrastructure build() {
            final var _resultValue = new GetExadataInfrastructuresExadataInfrastructure();
            _resultValue.activatedStorageCount = activatedStorageCount;
            _resultValue.activationFile = activationFile;
            _resultValue.additionalComputeCount = additionalComputeCount;
            _resultValue.additionalComputeSystemModel = additionalComputeSystemModel;
            _resultValue.additionalStorageCount = additionalStorageCount;
            _resultValue.adminNetworkCidr = adminNetworkCidr;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.cloudControlPlaneServer1 = cloudControlPlaneServer1;
            _resultValue.cloudControlPlaneServer2 = cloudControlPlaneServer2;
            _resultValue.compartmentId = compartmentId;
            _resultValue.computeCount = computeCount;
            _resultValue.computeModel = computeModel;
            _resultValue.contacts = contacts;
            _resultValue.corporateProxy = corporateProxy;
            _resultValue.cpusEnabled = cpusEnabled;
            _resultValue.createAsync = createAsync;
            _resultValue.csiNumber = csiNumber;
            _resultValue.dataStorageSizeInTbs = dataStorageSizeInTbs;
            _resultValue.databaseServerType = databaseServerType;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.dbServerVersion = dbServerVersion;
            _resultValue.definedFileSystemConfigurations = definedFileSystemConfigurations;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.dnsServers = dnsServers;
            _resultValue.exascaleConfigs = exascaleConfigs;
            _resultValue.freeformTags = freeformTags;
            _resultValue.gateway = gateway;
            _resultValue.id = id;
            _resultValue.infiniBandNetworkCidr = infiniBandNetworkCidr;
            _resultValue.isCpsOfflineReportEnabled = isCpsOfflineReportEnabled;
            _resultValue.isMultiRackDeployment = isMultiRackDeployment;
            _resultValue.isSchedulingPolicyAssociated = isSchedulingPolicyAssociated;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.maintenanceSloStatus = maintenanceSloStatus;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.maxCpuCount = maxCpuCount;
            _resultValue.maxDataStorageInTbs = maxDataStorageInTbs;
            _resultValue.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            _resultValue.maxMemoryInGbs = maxMemoryInGbs;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.monthlyDbServerVersion = monthlyDbServerVersion;
            _resultValue.multiRackConfigurationFile = multiRackConfigurationFile;
            _resultValue.netmask = netmask;
            _resultValue.networkBondingModeDetails = networkBondingModeDetails;
            _resultValue.ntpServers = ntpServers;
            _resultValue.rackSerialNumber = rackSerialNumber;
            _resultValue.shape = shape;
            _resultValue.state = state;
            _resultValue.storageCount = storageCount;
            _resultValue.storageServerType = storageServerType;
            _resultValue.storageServerVersion = storageServerVersion;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
