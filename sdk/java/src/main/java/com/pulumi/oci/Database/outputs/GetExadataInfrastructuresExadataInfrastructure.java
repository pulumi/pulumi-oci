// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureContact;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow;
import com.pulumi.oci.Database.outputs.GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExadataInfrastructuresExadataInfrastructure {
    /**
     * @return The requested number of additional storage servers activated for the Exadata infrastructure.
     * 
     */
    private Integer activatedStorageCount;
    private String activationFile;
    /**
     * @return The requested number of additional compute servers for the Exadata infrastructure.
     * 
     */
    private Integer additionalComputeCount;
    /**
     * @return Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
     * 
     */
    private String additionalComputeSystemModel;
    /**
     * @return The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    private Integer additionalStorageCount;
    /**
     * @return The CIDR block for the Exadata administration network.
     * 
     */
    private String adminNetworkCidr;
    /**
     * @return The IP address for the first control plane server.
     * 
     */
    private String cloudControlPlaneServer1;
    /**
     * @return The IP address for the second control plane server.
     * 
     */
    private String cloudControlPlaneServer2;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return The number of compute servers for the Exadata infrastructure.
     * 
     */
    private Integer computeCount;
    /**
     * @return The list of contacts for the Exadata infrastructure.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureContact> contacts;
    /**
     * @return The corporate network proxy for access to the control plane network.
     * 
     */
    private String corporateProxy;
    /**
     * @return The number of enabled CPU cores.
     * 
     */
    private Integer cpusEnabled;
    private Boolean createAsync;
    /**
     * @return The CSI Number of the Exadata infrastructure.
     * 
     */
    private String csiNumber;
    /**
     * @return Size, in terabytes, of the DATA disk group.
     * 
     */
    private Double dataStorageSizeInTbs;
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    private String dbServerVersion;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    private String displayName;
    /**
     * @return The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    private List<String> dnsServers;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The gateway for the control plane network.
     * 
     */
    private String gateway;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    private String id;
    /**
     * @return The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    private String infiniBandNetworkCidr;
    /**
     * @return Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
     * 
     */
    private Boolean isCpsOfflineReportEnabled;
    /**
     * @return Indicates if deployment is Multi-Rack or not.
     * 
     */
    private Boolean isMultiRackDeployment;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
     * 
     */
    private String maintenanceSloStatus;
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows;
    /**
     * @return The total number of CPU cores available.
     * 
     */
    private Integer maxCpuCount;
    /**
     * @return The total available DATA disk group size.
     * 
     */
    private Double maxDataStorageInTbs;
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    private Integer maxDbNodeStorageInGbs;
    /**
     * @return The total memory available in GBs.
     * 
     */
    private Integer maxMemoryInGbs;
    /**
     * @return The memory allocated in GBs.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The monthly software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    private String monthlyDbServerVersion;
    /**
     * @return The base64 encoded Multi-Rack configuration json file.
     * 
     */
    private String multiRackConfigurationFile;
    /**
     * @return The netmask for the control plane network.
     * 
     */
    private String netmask;
    /**
     * @return Details of bonding mode for Client and Backup networks of an Exadata infrastructure.
     * 
     */
    private List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails;
    /**
     * @return The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    private List<String> ntpServers;
    /**
     * @return The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    private String shape;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    /**
     * @return The number of Exadata storage servers for the Exadata infrastructure.
     * 
     */
    private Integer storageCount;
    /**
     * @return The software version of the storage servers (cells) in the Exadata infrastructure.
     * 
     */
    private String storageServerVersion;
    /**
     * @return The date and time the Exadata infrastructure was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    private String timeZone;

    private GetExadataInfrastructuresExadataInfrastructure() {}
    /**
     * @return The requested number of additional storage servers activated for the Exadata infrastructure.
     * 
     */
    public Integer activatedStorageCount() {
        return this.activatedStorageCount;
    }
    public String activationFile() {
        return this.activationFile;
    }
    /**
     * @return The requested number of additional compute servers for the Exadata infrastructure.
     * 
     */
    public Integer additionalComputeCount() {
        return this.additionalComputeCount;
    }
    /**
     * @return Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
     * 
     */
    public String additionalComputeSystemModel() {
        return this.additionalComputeSystemModel;
    }
    /**
     * @return The requested number of additional storage servers for the Exadata infrastructure.
     * 
     */
    public Integer additionalStorageCount() {
        return this.additionalStorageCount;
    }
    /**
     * @return The CIDR block for the Exadata administration network.
     * 
     */
    public String adminNetworkCidr() {
        return this.adminNetworkCidr;
    }
    /**
     * @return The IP address for the first control plane server.
     * 
     */
    public String cloudControlPlaneServer1() {
        return this.cloudControlPlaneServer1;
    }
    /**
     * @return The IP address for the second control plane server.
     * 
     */
    public String cloudControlPlaneServer2() {
        return this.cloudControlPlaneServer2;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The number of compute servers for the Exadata infrastructure.
     * 
     */
    public Integer computeCount() {
        return this.computeCount;
    }
    /**
     * @return The list of contacts for the Exadata infrastructure.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureContact> contacts() {
        return this.contacts;
    }
    /**
     * @return The corporate network proxy for access to the control plane network.
     * 
     */
    public String corporateProxy() {
        return this.corporateProxy;
    }
    /**
     * @return The number of enabled CPU cores.
     * 
     */
    public Integer cpusEnabled() {
        return this.cpusEnabled;
    }
    public Boolean createAsync() {
        return this.createAsync;
    }
    /**
     * @return The CSI Number of the Exadata infrastructure.
     * 
     */
    public String csiNumber() {
        return this.csiNumber;
    }
    /**
     * @return Size, in terabytes, of the DATA disk group.
     * 
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    public String dbServerVersion() {
        return this.dbServerVersion;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the entire display name given. The match is not case sensitive.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The list of DNS server IP addresses. Maximum of 3 allowed.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The gateway for the control plane network.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The CIDR block for the Exadata InfiniBand interconnect.
     * 
     */
    public String infiniBandNetworkCidr() {
        return this.infiniBandNetworkCidr;
    }
    /**
     * @return Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
     * 
     */
    public Boolean isCpsOfflineReportEnabled() {
        return this.isCpsOfflineReportEnabled;
    }
    /**
     * @return Indicates if deployment is Multi-Rack or not.
     * 
     */
    public Boolean isMultiRackDeployment() {
        return this.isMultiRackDeployment;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
     * 
     */
    public String maintenanceSloStatus() {
        return this.maintenanceSloStatus;
    }
    /**
     * @return The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The total number of CPU cores available.
     * 
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }
    /**
     * @return The total available DATA disk group size.
     * 
     */
    public Double maxDataStorageInTbs() {
        return this.maxDataStorageInTbs;
    }
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    public Integer maxDbNodeStorageInGbs() {
        return this.maxDbNodeStorageInGbs;
    }
    /**
     * @return The total memory available in GBs.
     * 
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }
    /**
     * @return The memory allocated in GBs.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The monthly software version of the database servers (dom0) in the Exadata infrastructure.
     * 
     */
    public String monthlyDbServerVersion() {
        return this.monthlyDbServerVersion;
    }
    /**
     * @return The base64 encoded Multi-Rack configuration json file.
     * 
     */
    public String multiRackConfigurationFile() {
        return this.multiRackConfigurationFile;
    }
    /**
     * @return The netmask for the control plane network.
     * 
     */
    public String netmask() {
        return this.netmask;
    }
    /**
     * @return Details of bonding mode for Client and Backup networks of an Exadata infrastructure.
     * 
     */
    public List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails() {
        return this.networkBondingModeDetails;
    }
    /**
     * @return The list of NTP server IP addresses. Maximum of 3 allowed.
     * 
     */
    public List<String> ntpServers() {
        return this.ntpServers;
    }
    /**
     * @return The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The number of Exadata storage servers for the Exadata infrastructure.
     * 
     */
    public Integer storageCount() {
        return this.storageCount;
    }
    /**
     * @return The software version of the storage servers (cells) in the Exadata infrastructure.
     * 
     */
    public String storageServerVersion() {
        return this.storageServerVersion;
    }
    /**
     * @return The date and time the Exadata infrastructure was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExadataInfrastructuresExadataInfrastructure defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activatedStorageCount;
        private String activationFile;
        private Integer additionalComputeCount;
        private String additionalComputeSystemModel;
        private Integer additionalStorageCount;
        private String adminNetworkCidr;
        private String cloudControlPlaneServer1;
        private String cloudControlPlaneServer2;
        private String compartmentId;
        private Integer computeCount;
        private List<GetExadataInfrastructuresExadataInfrastructureContact> contacts;
        private String corporateProxy;
        private Integer cpusEnabled;
        private Boolean createAsync;
        private String csiNumber;
        private Double dataStorageSizeInTbs;
        private Integer dbNodeStorageSizeInGbs;
        private String dbServerVersion;
        private Map<String,Object> definedTags;
        private String displayName;
        private List<String> dnsServers;
        private Map<String,Object> freeformTags;
        private String gateway;
        private String id;
        private String infiniBandNetworkCidr;
        private Boolean isCpsOfflineReportEnabled;
        private Boolean isMultiRackDeployment;
        private String lifecycleDetails;
        private String maintenanceSloStatus;
        private List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows;
        private Integer maxCpuCount;
        private Double maxDataStorageInTbs;
        private Integer maxDbNodeStorageInGbs;
        private Integer maxMemoryInGbs;
        private Integer memorySizeInGbs;
        private String monthlyDbServerVersion;
        private String multiRackConfigurationFile;
        private String netmask;
        private List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails;
        private List<String> ntpServers;
        private String shape;
        private String state;
        private Integer storageCount;
        private String storageServerVersion;
        private String timeCreated;
        private String timeZone;
        public Builder() {}
        public Builder(GetExadataInfrastructuresExadataInfrastructure defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activatedStorageCount = defaults.activatedStorageCount;
    	      this.activationFile = defaults.activationFile;
    	      this.additionalComputeCount = defaults.additionalComputeCount;
    	      this.additionalComputeSystemModel = defaults.additionalComputeSystemModel;
    	      this.additionalStorageCount = defaults.additionalStorageCount;
    	      this.adminNetworkCidr = defaults.adminNetworkCidr;
    	      this.cloudControlPlaneServer1 = defaults.cloudControlPlaneServer1;
    	      this.cloudControlPlaneServer2 = defaults.cloudControlPlaneServer2;
    	      this.compartmentId = defaults.compartmentId;
    	      this.computeCount = defaults.computeCount;
    	      this.contacts = defaults.contacts;
    	      this.corporateProxy = defaults.corporateProxy;
    	      this.cpusEnabled = defaults.cpusEnabled;
    	      this.createAsync = defaults.createAsync;
    	      this.csiNumber = defaults.csiNumber;
    	      this.dataStorageSizeInTbs = defaults.dataStorageSizeInTbs;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServerVersion = defaults.dbServerVersion;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.dnsServers = defaults.dnsServers;
    	      this.freeformTags = defaults.freeformTags;
    	      this.gateway = defaults.gateway;
    	      this.id = defaults.id;
    	      this.infiniBandNetworkCidr = defaults.infiniBandNetworkCidr;
    	      this.isCpsOfflineReportEnabled = defaults.isCpsOfflineReportEnabled;
    	      this.isMultiRackDeployment = defaults.isMultiRackDeployment;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maintenanceSloStatus = defaults.maintenanceSloStatus;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDataStorageInTbs = defaults.maxDataStorageInTbs;
    	      this.maxDbNodeStorageInGbs = defaults.maxDbNodeStorageInGbs;
    	      this.maxMemoryInGbs = defaults.maxMemoryInGbs;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.monthlyDbServerVersion = defaults.monthlyDbServerVersion;
    	      this.multiRackConfigurationFile = defaults.multiRackConfigurationFile;
    	      this.netmask = defaults.netmask;
    	      this.networkBondingModeDetails = defaults.networkBondingModeDetails;
    	      this.ntpServers = defaults.ntpServers;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.storageCount = defaults.storageCount;
    	      this.storageServerVersion = defaults.storageServerVersion;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder activatedStorageCount(Integer activatedStorageCount) {
            this.activatedStorageCount = Objects.requireNonNull(activatedStorageCount);
            return this;
        }
        @CustomType.Setter
        public Builder activationFile(String activationFile) {
            this.activationFile = Objects.requireNonNull(activationFile);
            return this;
        }
        @CustomType.Setter
        public Builder additionalComputeCount(Integer additionalComputeCount) {
            this.additionalComputeCount = Objects.requireNonNull(additionalComputeCount);
            return this;
        }
        @CustomType.Setter
        public Builder additionalComputeSystemModel(String additionalComputeSystemModel) {
            this.additionalComputeSystemModel = Objects.requireNonNull(additionalComputeSystemModel);
            return this;
        }
        @CustomType.Setter
        public Builder additionalStorageCount(Integer additionalStorageCount) {
            this.additionalStorageCount = Objects.requireNonNull(additionalStorageCount);
            return this;
        }
        @CustomType.Setter
        public Builder adminNetworkCidr(String adminNetworkCidr) {
            this.adminNetworkCidr = Objects.requireNonNull(adminNetworkCidr);
            return this;
        }
        @CustomType.Setter
        public Builder cloudControlPlaneServer1(String cloudControlPlaneServer1) {
            this.cloudControlPlaneServer1 = Objects.requireNonNull(cloudControlPlaneServer1);
            return this;
        }
        @CustomType.Setter
        public Builder cloudControlPlaneServer2(String cloudControlPlaneServer2) {
            this.cloudControlPlaneServer2 = Objects.requireNonNull(cloudControlPlaneServer2);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder computeCount(Integer computeCount) {
            this.computeCount = Objects.requireNonNull(computeCount);
            return this;
        }
        @CustomType.Setter
        public Builder contacts(List<GetExadataInfrastructuresExadataInfrastructureContact> contacts) {
            this.contacts = Objects.requireNonNull(contacts);
            return this;
        }
        public Builder contacts(GetExadataInfrastructuresExadataInfrastructureContact... contacts) {
            return contacts(List.of(contacts));
        }
        @CustomType.Setter
        public Builder corporateProxy(String corporateProxy) {
            this.corporateProxy = Objects.requireNonNull(corporateProxy);
            return this;
        }
        @CustomType.Setter
        public Builder cpusEnabled(Integer cpusEnabled) {
            this.cpusEnabled = Objects.requireNonNull(cpusEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder createAsync(Boolean createAsync) {
            this.createAsync = Objects.requireNonNull(createAsync);
            return this;
        }
        @CustomType.Setter
        public Builder csiNumber(String csiNumber) {
            this.csiNumber = Objects.requireNonNull(csiNumber);
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeInTbs(Double dataStorageSizeInTbs) {
            this.dataStorageSizeInTbs = Objects.requireNonNull(dataStorageSizeInTbs);
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            this.dbNodeStorageSizeInGbs = Objects.requireNonNull(dbNodeStorageSizeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder dbServerVersion(String dbServerVersion) {
            this.dbServerVersion = Objects.requireNonNull(dbServerVersion);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            this.dnsServers = Objects.requireNonNull(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            this.gateway = Objects.requireNonNull(gateway);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder infiniBandNetworkCidr(String infiniBandNetworkCidr) {
            this.infiniBandNetworkCidr = Objects.requireNonNull(infiniBandNetworkCidr);
            return this;
        }
        @CustomType.Setter
        public Builder isCpsOfflineReportEnabled(Boolean isCpsOfflineReportEnabled) {
            this.isCpsOfflineReportEnabled = Objects.requireNonNull(isCpsOfflineReportEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isMultiRackDeployment(Boolean isMultiRackDeployment) {
            this.isMultiRackDeployment = Objects.requireNonNull(isMultiRackDeployment);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceSloStatus(String maintenanceSloStatus) {
            this.maintenanceSloStatus = Objects.requireNonNull(maintenanceSloStatus);
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow> maintenanceWindows) {
            this.maintenanceWindows = Objects.requireNonNull(maintenanceWindows);
            return this;
        }
        public Builder maintenanceWindows(GetExadataInfrastructuresExadataInfrastructureMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder maxCpuCount(Integer maxCpuCount) {
            this.maxCpuCount = Objects.requireNonNull(maxCpuCount);
            return this;
        }
        @CustomType.Setter
        public Builder maxDataStorageInTbs(Double maxDataStorageInTbs) {
            this.maxDataStorageInTbs = Objects.requireNonNull(maxDataStorageInTbs);
            return this;
        }
        @CustomType.Setter
        public Builder maxDbNodeStorageInGbs(Integer maxDbNodeStorageInGbs) {
            this.maxDbNodeStorageInGbs = Objects.requireNonNull(maxDbNodeStorageInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryInGbs(Integer maxMemoryInGbs) {
            this.maxMemoryInGbs = Objects.requireNonNull(maxMemoryInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            this.memorySizeInGbs = Objects.requireNonNull(memorySizeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder monthlyDbServerVersion(String monthlyDbServerVersion) {
            this.monthlyDbServerVersion = Objects.requireNonNull(monthlyDbServerVersion);
            return this;
        }
        @CustomType.Setter
        public Builder multiRackConfigurationFile(String multiRackConfigurationFile) {
            this.multiRackConfigurationFile = Objects.requireNonNull(multiRackConfigurationFile);
            return this;
        }
        @CustomType.Setter
        public Builder netmask(String netmask) {
            this.netmask = Objects.requireNonNull(netmask);
            return this;
        }
        @CustomType.Setter
        public Builder networkBondingModeDetails(List<GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail> networkBondingModeDetails) {
            this.networkBondingModeDetails = Objects.requireNonNull(networkBondingModeDetails);
            return this;
        }
        public Builder networkBondingModeDetails(GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail... networkBondingModeDetails) {
            return networkBondingModeDetails(List.of(networkBondingModeDetails));
        }
        @CustomType.Setter
        public Builder ntpServers(List<String> ntpServers) {
            this.ntpServers = Objects.requireNonNull(ntpServers);
            return this;
        }
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            this.shape = Objects.requireNonNull(shape);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder storageCount(Integer storageCount) {
            this.storageCount = Objects.requireNonNull(storageCount);
            return this;
        }
        @CustomType.Setter
        public Builder storageServerVersion(String storageServerVersion) {
            this.storageServerVersion = Objects.requireNonNull(storageServerVersion);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }
        public GetExadataInfrastructuresExadataInfrastructure build() {
            final var o = new GetExadataInfrastructuresExadataInfrastructure();
            o.activatedStorageCount = activatedStorageCount;
            o.activationFile = activationFile;
            o.additionalComputeCount = additionalComputeCount;
            o.additionalComputeSystemModel = additionalComputeSystemModel;
            o.additionalStorageCount = additionalStorageCount;
            o.adminNetworkCidr = adminNetworkCidr;
            o.cloudControlPlaneServer1 = cloudControlPlaneServer1;
            o.cloudControlPlaneServer2 = cloudControlPlaneServer2;
            o.compartmentId = compartmentId;
            o.computeCount = computeCount;
            o.contacts = contacts;
            o.corporateProxy = corporateProxy;
            o.cpusEnabled = cpusEnabled;
            o.createAsync = createAsync;
            o.csiNumber = csiNumber;
            o.dataStorageSizeInTbs = dataStorageSizeInTbs;
            o.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            o.dbServerVersion = dbServerVersion;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.dnsServers = dnsServers;
            o.freeformTags = freeformTags;
            o.gateway = gateway;
            o.id = id;
            o.infiniBandNetworkCidr = infiniBandNetworkCidr;
            o.isCpsOfflineReportEnabled = isCpsOfflineReportEnabled;
            o.isMultiRackDeployment = isMultiRackDeployment;
            o.lifecycleDetails = lifecycleDetails;
            o.maintenanceSloStatus = maintenanceSloStatus;
            o.maintenanceWindows = maintenanceWindows;
            o.maxCpuCount = maxCpuCount;
            o.maxDataStorageInTbs = maxDataStorageInTbs;
            o.maxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            o.maxMemoryInGbs = maxMemoryInGbs;
            o.memorySizeInGbs = memorySizeInGbs;
            o.monthlyDbServerVersion = monthlyDbServerVersion;
            o.multiRackConfigurationFile = multiRackConfigurationFile;
            o.netmask = netmask;
            o.networkBondingModeDetails = networkBondingModeDetails;
            o.ntpServers = ntpServers;
            o.shape = shape;
            o.state = state;
            o.storageCount = storageCount;
            o.storageServerVersion = storageServerVersion;
            o.timeCreated = timeCreated;
            o.timeZone = timeZone;
            return o;
        }
    }
}
