// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetExternalPluggableDatabaseDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.GetExternalPluggableDatabaseOperationsInsightsConfig;
import com.pulumi.oci.Database.outputs.GetExternalPluggableDatabaseStackMonitoringConfig;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalPluggableDatabaseResult {
    /**
     * @return The character set of the external database.
     * 
     */
    private String characterSet;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The Oracle Database configuration
     * 
     */
    private String databaseConfiguration;
    /**
     * @return The Oracle Database edition.
     * 
     */
    private String databaseEdition;
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    private List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs;
    /**
     * @return The Oracle Database version.
     * 
     */
    private String databaseVersion;
    /**
     * @return The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    private String dbId;
    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    private String dbPacks;
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    private String dbUniqueName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalContainerDatabaseDetails) that contains the specified [external pluggable database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalPluggableDatabaseDetails) resource.
     * 
     */
    private String externalContainerDatabaseId;
    private String externalPluggableDatabaseId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    private String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The national character of the external database.
     * 
     */
    private String ncharacterSet;
    /**
     * @return The configuration of Operations Insights for the external database
     * 
     */
    private List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the the non-container database that was converted to a pluggable database to create this resource.
     * 
     */
    private String sourceId;
    /**
     * @return The configuration of Stack Monitoring for the external database.
     * 
     */
    private List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs;
    /**
     * @return The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    private String state;
    /**
     * @return The date and time the database was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    private String timeZone;

    private GetExternalPluggableDatabaseResult() {}
    /**
     * @return The character set of the external database.
     * 
     */
    public String characterSet() {
        return this.characterSet;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The Oracle Database configuration
     * 
     */
    public String databaseConfiguration() {
        return this.databaseConfiguration;
    }
    /**
     * @return The Oracle Database edition.
     * 
     */
    public String databaseEdition() {
        return this.databaseEdition;
    }
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs() {
        return this.databaseManagementConfigs;
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    public String dbId() {
        return this.dbId;
    }
    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    public String dbPacks() {
        return this.dbPacks;
    }
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalContainerDatabaseDetails) that contains the specified [external pluggable database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalPluggableDatabaseDetails) resource.
     * 
     */
    public String externalContainerDatabaseId() {
        return this.externalContainerDatabaseId;
    }
    public String externalPluggableDatabaseId() {
        return this.externalPluggableDatabaseId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The national character of the external database.
     * 
     */
    public String ncharacterSet() {
        return this.ncharacterSet;
    }
    /**
     * @return The configuration of Operations Insights for the external database
     * 
     */
    public List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs() {
        return this.operationsInsightsConfigs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the the non-container database that was converted to a pluggable database to create this resource.
     * 
     */
    public String sourceId() {
        return this.sourceId;
    }
    /**
     * @return The configuration of Stack Monitoring for the external database.
     * 
     */
    public List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs() {
        return this.stackMonitoringConfigs;
    }
    /**
     * @return The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalPluggableDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String characterSet;
        private String compartmentId;
        private String databaseConfiguration;
        private String databaseEdition;
        private List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs;
        private String databaseVersion;
        private String dbId;
        private String dbPacks;
        private String dbUniqueName;
        private Map<String,Object> definedTags;
        private String displayName;
        private String externalContainerDatabaseId;
        private String externalPluggableDatabaseId;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String ncharacterSet;
        private List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs;
        private String sourceId;
        private List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs;
        private String state;
        private String timeCreated;
        private String timeZone;
        public Builder() {}
        public Builder(GetExternalPluggableDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterSet = defaults.characterSet;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseConfiguration = defaults.databaseConfiguration;
    	      this.databaseEdition = defaults.databaseEdition;
    	      this.databaseManagementConfigs = defaults.databaseManagementConfigs;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.dbId = defaults.dbId;
    	      this.dbPacks = defaults.dbPacks;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.externalContainerDatabaseId = defaults.externalContainerDatabaseId;
    	      this.externalPluggableDatabaseId = defaults.externalPluggableDatabaseId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.operationsInsightsConfigs = defaults.operationsInsightsConfigs;
    	      this.sourceId = defaults.sourceId;
    	      this.stackMonitoringConfigs = defaults.stackMonitoringConfigs;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder characterSet(String characterSet) {
            this.characterSet = Objects.requireNonNull(characterSet);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseConfiguration(String databaseConfiguration) {
            this.databaseConfiguration = Objects.requireNonNull(databaseConfiguration);
            return this;
        }
        @CustomType.Setter
        public Builder databaseEdition(String databaseEdition) {
            this.databaseEdition = Objects.requireNonNull(databaseEdition);
            return this;
        }
        @CustomType.Setter
        public Builder databaseManagementConfigs(List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs) {
            this.databaseManagementConfigs = Objects.requireNonNull(databaseManagementConfigs);
            return this;
        }
        public Builder databaseManagementConfigs(GetExternalPluggableDatabaseDatabaseManagementConfig... databaseManagementConfigs) {
            return databaseManagementConfigs(List.of(databaseManagementConfigs));
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }
        @CustomType.Setter
        public Builder dbId(String dbId) {
            this.dbId = Objects.requireNonNull(dbId);
            return this;
        }
        @CustomType.Setter
        public Builder dbPacks(String dbPacks) {
            this.dbPacks = Objects.requireNonNull(dbPacks);
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(String dbUniqueName) {
            this.dbUniqueName = Objects.requireNonNull(dbUniqueName);
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder externalContainerDatabaseId(String externalContainerDatabaseId) {
            this.externalContainerDatabaseId = Objects.requireNonNull(externalContainerDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder externalPluggableDatabaseId(String externalPluggableDatabaseId) {
            this.externalPluggableDatabaseId = Objects.requireNonNull(externalPluggableDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(String ncharacterSet) {
            this.ncharacterSet = Objects.requireNonNull(ncharacterSet);
            return this;
        }
        @CustomType.Setter
        public Builder operationsInsightsConfigs(List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs) {
            this.operationsInsightsConfigs = Objects.requireNonNull(operationsInsightsConfigs);
            return this;
        }
        public Builder operationsInsightsConfigs(GetExternalPluggableDatabaseOperationsInsightsConfig... operationsInsightsConfigs) {
            return operationsInsightsConfigs(List.of(operationsInsightsConfigs));
        }
        @CustomType.Setter
        public Builder sourceId(String sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId);
            return this;
        }
        @CustomType.Setter
        public Builder stackMonitoringConfigs(List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs) {
            this.stackMonitoringConfigs = Objects.requireNonNull(stackMonitoringConfigs);
            return this;
        }
        public Builder stackMonitoringConfigs(GetExternalPluggableDatabaseStackMonitoringConfig... stackMonitoringConfigs) {
            return stackMonitoringConfigs(List.of(stackMonitoringConfigs));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }
        public GetExternalPluggableDatabaseResult build() {
            final var o = new GetExternalPluggableDatabaseResult();
            o.characterSet = characterSet;
            o.compartmentId = compartmentId;
            o.databaseConfiguration = databaseConfiguration;
            o.databaseEdition = databaseEdition;
            o.databaseManagementConfigs = databaseManagementConfigs;
            o.databaseVersion = databaseVersion;
            o.dbId = dbId;
            o.dbPacks = dbPacks;
            o.dbUniqueName = dbUniqueName;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.externalContainerDatabaseId = externalContainerDatabaseId;
            o.externalPluggableDatabaseId = externalPluggableDatabaseId;
            o.freeformTags = freeformTags;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.ncharacterSet = ncharacterSet;
            o.operationsInsightsConfigs = operationsInsightsConfigs;
            o.sourceId = sourceId;
            o.stackMonitoringConfigs = stackMonitoringConfigs;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeZone = timeZone;
            return o;
        }
    }
}
