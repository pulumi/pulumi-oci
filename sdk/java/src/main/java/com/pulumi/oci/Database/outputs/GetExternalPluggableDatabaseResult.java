// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetExternalPluggableDatabaseDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.GetExternalPluggableDatabaseOperationsInsightsConfig;
import com.pulumi.oci.Database.outputs.GetExternalPluggableDatabaseStackMonitoringConfig;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalPluggableDatabaseResult {
    /**
     * @return The character set of the external database.
     * 
     */
    private @Nullable String characterSet;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The Oracle Database configuration
     * 
     */
    private @Nullable String databaseConfiguration;
    /**
     * @return The Oracle Database edition.
     * 
     */
    private @Nullable String databaseEdition;
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    private @Nullable List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs;
    /**
     * @return The Oracle Database version.
     * 
     */
    private @Nullable String databaseVersion;
    /**
     * @return The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    private @Nullable String dbId;
    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    private @Nullable String dbPacks;
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    private @Nullable String dbUniqueName;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalContainerDatabaseDetails) that contains the specified [external pluggable database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalPluggableDatabaseDetails) resource.
     * 
     */
    private @Nullable String externalContainerDatabaseId;
    private String externalPluggableDatabaseId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The national character of the external database.
     * 
     */
    private @Nullable String ncharacterSet;
    /**
     * @return The configuration of Operations Insights for the external database
     * 
     */
    private @Nullable List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the the non-container database that was converted to a pluggable database to create this resource.
     * 
     */
    private @Nullable String sourceId;
    /**
     * @return The configuration of Stack Monitoring for the external database.
     * 
     */
    private @Nullable List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs;
    /**
     * @return The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    private @Nullable String state;
    /**
     * @return The date and time the database was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    private @Nullable String timeZone;

    private GetExternalPluggableDatabaseResult() {}
    /**
     * @return The character set of the external database.
     * 
     */
    public Optional<String> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The Oracle Database configuration
     * 
     */
    public Optional<String> databaseConfiguration() {
        return Optional.ofNullable(this.databaseConfiguration);
    }
    /**
     * @return The Oracle Database edition.
     * 
     */
    public Optional<String> databaseEdition() {
        return Optional.ofNullable(this.databaseEdition);
    }
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs() {
        return this.databaseManagementConfigs == null ? List.of() : this.databaseManagementConfigs;
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public Optional<String> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }
    /**
     * @return The Oracle Database ID, which identifies an Oracle Database located outside of Oracle Cloud.
     * 
     */
    public Optional<String> dbId() {
        return Optional.ofNullable(this.dbId);
    }
    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    public Optional<String> dbPacks() {
        return Optional.ofNullable(this.dbPacks);
    }
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return The user-friendly name for the external database. The name does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalContainerDatabaseDetails) that contains the specified [external pluggable database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalPluggableDatabaseDetails) resource.
     * 
     */
    public Optional<String> externalContainerDatabaseId() {
        return Optional.ofNullable(this.externalContainerDatabaseId);
    }
    public String externalPluggableDatabaseId() {
        return this.externalPluggableDatabaseId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The national character of the external database.
     * 
     */
    public Optional<String> ncharacterSet() {
        return Optional.ofNullable(this.ncharacterSet);
    }
    /**
     * @return The configuration of Operations Insights for the external database
     * 
     */
    public List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs() {
        return this.operationsInsightsConfigs == null ? List.of() : this.operationsInsightsConfigs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the the non-container database that was converted to a pluggable database to create this resource.
     * 
     */
    public Optional<String> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }
    /**
     * @return The configuration of Stack Monitoring for the external database.
     * 
     */
    public List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs() {
        return this.stackMonitoringConfigs == null ? List.of() : this.stackMonitoringConfigs;
    }
    /**
     * @return The current state of the Oracle Cloud Infrastructure external database resource.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The date and time the database was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The time zone of the external database. It is a time zone offset (a character type in the format &#39;[+|-]TZH:TZM&#39;) or a time zone region name, depending on how the time zone value was specified when the database was created / last altered.
     * 
     */
    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalPluggableDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String characterSet;
        private @Nullable String compartmentId;
        private @Nullable String databaseConfiguration;
        private @Nullable String databaseEdition;
        private @Nullable List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs;
        private @Nullable String databaseVersion;
        private @Nullable String dbId;
        private @Nullable String dbPacks;
        private @Nullable String dbUniqueName;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String displayName;
        private @Nullable String externalContainerDatabaseId;
        private String externalPluggableDatabaseId;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String lifecycleDetails;
        private @Nullable String ncharacterSet;
        private @Nullable List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs;
        private @Nullable String sourceId;
        private @Nullable List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeZone;
        public Builder() {}
        public Builder(GetExternalPluggableDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterSet = defaults.characterSet;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseConfiguration = defaults.databaseConfiguration;
    	      this.databaseEdition = defaults.databaseEdition;
    	      this.databaseManagementConfigs = defaults.databaseManagementConfigs;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.dbId = defaults.dbId;
    	      this.dbPacks = defaults.dbPacks;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.externalContainerDatabaseId = defaults.externalContainerDatabaseId;
    	      this.externalPluggableDatabaseId = defaults.externalPluggableDatabaseId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.ncharacterSet = defaults.ncharacterSet;
    	      this.operationsInsightsConfigs = defaults.operationsInsightsConfigs;
    	      this.sourceId = defaults.sourceId;
    	      this.stackMonitoringConfigs = defaults.stackMonitoringConfigs;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder characterSet(@Nullable String characterSet) {
            this.characterSet = characterSet;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseConfiguration(@Nullable String databaseConfiguration) {
            this.databaseConfiguration = databaseConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder databaseEdition(@Nullable String databaseEdition) {
            this.databaseEdition = databaseEdition;
            return this;
        }
        @CustomType.Setter
        public Builder databaseManagementConfigs(@Nullable List<GetExternalPluggableDatabaseDatabaseManagementConfig> databaseManagementConfigs) {
            this.databaseManagementConfigs = databaseManagementConfigs;
            return this;
        }
        public Builder databaseManagementConfigs(GetExternalPluggableDatabaseDatabaseManagementConfig... databaseManagementConfigs) {
            return databaseManagementConfigs(List.of(databaseManagementConfigs));
        }
        @CustomType.Setter
        public Builder databaseVersion(@Nullable String databaseVersion) {
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbId(@Nullable String dbId) {
            this.dbId = dbId;
            return this;
        }
        @CustomType.Setter
        public Builder dbPacks(@Nullable String dbPacks) {
            this.dbPacks = dbPacks;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalContainerDatabaseId(@Nullable String externalContainerDatabaseId) {
            this.externalContainerDatabaseId = externalContainerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder externalPluggableDatabaseId(String externalPluggableDatabaseId) {
            this.externalPluggableDatabaseId = Objects.requireNonNull(externalPluggableDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder ncharacterSet(@Nullable String ncharacterSet) {
            this.ncharacterSet = ncharacterSet;
            return this;
        }
        @CustomType.Setter
        public Builder operationsInsightsConfigs(@Nullable List<GetExternalPluggableDatabaseOperationsInsightsConfig> operationsInsightsConfigs) {
            this.operationsInsightsConfigs = operationsInsightsConfigs;
            return this;
        }
        public Builder operationsInsightsConfigs(GetExternalPluggableDatabaseOperationsInsightsConfig... operationsInsightsConfigs) {
            return operationsInsightsConfigs(List.of(operationsInsightsConfigs));
        }
        @CustomType.Setter
        public Builder sourceId(@Nullable String sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        @CustomType.Setter
        public Builder stackMonitoringConfigs(@Nullable List<GetExternalPluggableDatabaseStackMonitoringConfig> stackMonitoringConfigs) {
            this.stackMonitoringConfigs = stackMonitoringConfigs;
            return this;
        }
        public Builder stackMonitoringConfigs(GetExternalPluggableDatabaseStackMonitoringConfig... stackMonitoringConfigs) {
            return stackMonitoringConfigs(List.of(stackMonitoringConfigs));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        public GetExternalPluggableDatabaseResult build() {
            final var o = new GetExternalPluggableDatabaseResult();
            o.characterSet = characterSet;
            o.compartmentId = compartmentId;
            o.databaseConfiguration = databaseConfiguration;
            o.databaseEdition = databaseEdition;
            o.databaseManagementConfigs = databaseManagementConfigs;
            o.databaseVersion = databaseVersion;
            o.dbId = dbId;
            o.dbPacks = dbPacks;
            o.dbUniqueName = dbUniqueName;
            o.definedTags = definedTags;
            o.displayName = displayName;
            o.externalContainerDatabaseId = externalContainerDatabaseId;
            o.externalPluggableDatabaseId = externalPluggableDatabaseId;
            o.freeformTags = freeformTags;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.ncharacterSet = ncharacterSet;
            o.operationsInsightsConfigs = operationsInsightsConfigs;
            o.sourceId = sourceId;
            o.stackMonitoringConfigs = stackMonitoringConfigs;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeZone = timeZone;
            return o;
        }
    }
}
