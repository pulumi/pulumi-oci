// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetKeyStoresKeyStoreAssociatedDatabase;
import com.pulumi.oci.Database.outputs.GetKeyStoresKeyStoreTypeDetail;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKeyStoresKeyStore {
    /**
     * @return List of databases associated with the key store.
     * 
     */
    private List<GetKeyStoresKeyStoreAssociatedDatabase> associatedDatabases;
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    private Integer confirmDetailsTrigger;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The user-friendly name for the key store. The name does not need to be unique.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
     * 
     */
    private String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current state of the key store.
     * 
     */
    private String state;
    /**
     * @return The date and time that the key store was created.
     * 
     */
    private String timeCreated;
    /**
     * @return Key store type details.
     * 
     */
    private List<GetKeyStoresKeyStoreTypeDetail> typeDetails;

    private GetKeyStoresKeyStore() {}
    /**
     * @return List of databases associated with the key store.
     * 
     */
    public List<GetKeyStoresKeyStoreAssociatedDatabase> associatedDatabases() {
        return this.associatedDatabases;
    }
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public Integer confirmDetailsTrigger() {
        return this.confirmDetailsTrigger;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The user-friendly name for the key store. The name does not need to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current state of the key store.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time that the key store was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Key store type details.
     * 
     */
    public List<GetKeyStoresKeyStoreTypeDetail> typeDetails() {
        return this.typeDetails;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyStoresKeyStore defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetKeyStoresKeyStoreAssociatedDatabase> associatedDatabases;
        private String compartmentId;
        private Integer confirmDetailsTrigger;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private String lifecycleDetails;
        private String state;
        private String timeCreated;
        private List<GetKeyStoresKeyStoreTypeDetail> typeDetails;
        public Builder() {}
        public Builder(GetKeyStoresKeyStore defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associatedDatabases = defaults.associatedDatabases;
    	      this.compartmentId = defaults.compartmentId;
    	      this.confirmDetailsTrigger = defaults.confirmDetailsTrigger;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.typeDetails = defaults.typeDetails;
        }

        @CustomType.Setter
        public Builder associatedDatabases(List<GetKeyStoresKeyStoreAssociatedDatabase> associatedDatabases) {
            if (associatedDatabases == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "associatedDatabases");
            }
            this.associatedDatabases = associatedDatabases;
            return this;
        }
        public Builder associatedDatabases(GetKeyStoresKeyStoreAssociatedDatabase... associatedDatabases) {
            return associatedDatabases(List.of(associatedDatabases));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder confirmDetailsTrigger(Integer confirmDetailsTrigger) {
            if (confirmDetailsTrigger == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "confirmDetailsTrigger");
            }
            this.confirmDetailsTrigger = confirmDetailsTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder typeDetails(List<GetKeyStoresKeyStoreTypeDetail> typeDetails) {
            if (typeDetails == null) {
              throw new MissingRequiredPropertyException("GetKeyStoresKeyStore", "typeDetails");
            }
            this.typeDetails = typeDetails;
            return this;
        }
        public Builder typeDetails(GetKeyStoresKeyStoreTypeDetail... typeDetails) {
            return typeDetails(List.of(typeDetails));
        }
        public GetKeyStoresKeyStore build() {
            final var _resultValue = new GetKeyStoresKeyStore();
            _resultValue.associatedDatabases = associatedDatabases;
            _resultValue.compartmentId = compartmentId;
            _resultValue.confirmDetailsTrigger = confirmDetailsTrigger;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.typeDetails = typeDetails;
            return _resultValue;
        }
    }
}
