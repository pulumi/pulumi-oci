// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetMaintenanceRunEstimatedPatchingTime;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMaintenanceRunResult {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
     * 
     */
    private @Nullable Integer currentCustomActionTimeoutInMins;
    /**
     * @return The name of the current infrastruture component that is getting patched.
     * 
     */
    private @Nullable String currentPatchingComponent;
    /**
     * @return Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
     * 
     */
    private @Nullable Integer customActionTimeoutInMins;
    /**
     * @return Description of the maintenance run.
     * 
     */
    private @Nullable String description;
    /**
     * @return The user-friendly name for the maintenance run.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The estimated start time of the next infrastruture component patching operation.
     * 
     */
    private @Nullable String estimatedComponentPatchingStartTime;
    /**
     * @return The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
     * 
     */
    private @Nullable List<GetMaintenanceRunEstimatedPatchingTime> estimatedPatchingTimes;
    /**
     * @return The OCID of the maintenance run.
     * 
     */
    private @Nullable String id;
    /**
     * @return If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     * 
     */
    private @Nullable Boolean isCustomActionTimeoutEnabled;
    /**
     * @return Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
     * 
     */
    private @Nullable Boolean isDstFileUpdateEnabled;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    private String maintenanceRunId;
    /**
     * @return Maintenance sub-type.
     * 
     */
    private @Nullable String maintenanceSubtype;
    /**
     * @return Maintenance type.
     * 
     */
    private @Nullable String maintenanceType;
    /**
     * @return Contain the patch failure count.
     * 
     */
    private @Nullable Integer patchFailureCount;
    /**
     * @return The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
     * 
     */
    private @Nullable String patchId;
    private @Nullable String patchType;
    /**
     * @return The time when the patching operation ended.
     * 
     */
    private @Nullable String patchingEndTime;
    /**
     * @return Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    private @Nullable String patchingMode;
    /**
     * @return The time when the patching operation started.
     * 
     */
    private @Nullable String patchingStartTime;
    /**
     * @return The status of the patching operation.
     * 
     */
    private @Nullable String patchingStatus;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association&#39;s peer container database.
     * 
     */
    private @Nullable String peerMaintenanceRunId;
    /**
     * @return The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
     * 
     */
    private @Nullable String state;
    /**
     * @return The target software version for the database server patching operation.
     * 
     */
    private @Nullable String targetDbServerVersion;
    /**
     * @return The ID of the target resource on which the maintenance run occurs.
     * 
     */
    private @Nullable String targetResourceId;
    /**
     * @return The type of the target resource on which the maintenance run occurs.
     * 
     */
    private @Nullable String targetResourceType;
    /**
     * @return The target Cell version that is to be patched to.
     * 
     */
    private @Nullable String targetStorageServerVersion;
    /**
     * @return The date and time the maintenance run was completed.
     * 
     */
    private @Nullable String timeEnded;
    /**
     * @return The date and time the maintenance run is scheduled to occur.
     * 
     */
    private @Nullable String timeScheduled;
    /**
     * @return The date and time the maintenance run starts.
     * 
     */
    private @Nullable String timeStarted;

    private GetMaintenanceRunResult() {}
    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
     * 
     */
    public Optional<Integer> currentCustomActionTimeoutInMins() {
        return Optional.ofNullable(this.currentCustomActionTimeoutInMins);
    }
    /**
     * @return The name of the current infrastruture component that is getting patched.
     * 
     */
    public Optional<String> currentPatchingComponent() {
        return Optional.ofNullable(this.currentPatchingComponent);
    }
    /**
     * @return Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
     * 
     */
    public Optional<Integer> customActionTimeoutInMins() {
        return Optional.ofNullable(this.customActionTimeoutInMins);
    }
    /**
     * @return Description of the maintenance run.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The user-friendly name for the maintenance run.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The estimated start time of the next infrastruture component patching operation.
     * 
     */
    public Optional<String> estimatedComponentPatchingStartTime() {
        return Optional.ofNullable(this.estimatedComponentPatchingStartTime);
    }
    /**
     * @return The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
     * 
     */
    public List<GetMaintenanceRunEstimatedPatchingTime> estimatedPatchingTimes() {
        return this.estimatedPatchingTimes == null ? List.of() : this.estimatedPatchingTimes;
    }
    /**
     * @return The OCID of the maintenance run.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     * 
     */
    public Optional<Boolean> isCustomActionTimeoutEnabled() {
        return Optional.ofNullable(this.isCustomActionTimeoutEnabled);
    }
    /**
     * @return Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
     * 
     */
    public Optional<Boolean> isDstFileUpdateEnabled() {
        return Optional.ofNullable(this.isDstFileUpdateEnabled);
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    public String maintenanceRunId() {
        return this.maintenanceRunId;
    }
    /**
     * @return Maintenance sub-type.
     * 
     */
    public Optional<String> maintenanceSubtype() {
        return Optional.ofNullable(this.maintenanceSubtype);
    }
    /**
     * @return Maintenance type.
     * 
     */
    public Optional<String> maintenanceType() {
        return Optional.ofNullable(this.maintenanceType);
    }
    /**
     * @return Contain the patch failure count.
     * 
     */
    public Optional<Integer> patchFailureCount() {
        return Optional.ofNullable(this.patchFailureCount);
    }
    /**
     * @return The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
     * 
     */
    public Optional<String> patchId() {
        return Optional.ofNullable(this.patchId);
    }
    public Optional<String> patchType() {
        return Optional.ofNullable(this.patchType);
    }
    /**
     * @return The time when the patching operation ended.
     * 
     */
    public Optional<String> patchingEndTime() {
        return Optional.ofNullable(this.patchingEndTime);
    }
    /**
     * @return Cloud Exadata infrastructure node patching method, either &#34;ROLLING&#34; or &#34;NONROLLING&#34;. Default value is ROLLING.
     * 
     */
    public Optional<String> patchingMode() {
        return Optional.ofNullable(this.patchingMode);
    }
    /**
     * @return The time when the patching operation started.
     * 
     */
    public Optional<String> patchingStartTime() {
        return Optional.ofNullable(this.patchingStartTime);
    }
    /**
     * @return The status of the patching operation.
     * 
     */
    public Optional<String> patchingStatus() {
        return Optional.ofNullable(this.patchingStatus);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association&#39;s peer container database.
     * 
     */
    public Optional<String> peerMaintenanceRunId() {
        return Optional.ofNullable(this.peerMaintenanceRunId);
    }
    /**
     * @return The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The target software version for the database server patching operation.
     * 
     */
    public Optional<String> targetDbServerVersion() {
        return Optional.ofNullable(this.targetDbServerVersion);
    }
    /**
     * @return The ID of the target resource on which the maintenance run occurs.
     * 
     */
    public Optional<String> targetResourceId() {
        return Optional.ofNullable(this.targetResourceId);
    }
    /**
     * @return The type of the target resource on which the maintenance run occurs.
     * 
     */
    public Optional<String> targetResourceType() {
        return Optional.ofNullable(this.targetResourceType);
    }
    /**
     * @return The target Cell version that is to be patched to.
     * 
     */
    public Optional<String> targetStorageServerVersion() {
        return Optional.ofNullable(this.targetStorageServerVersion);
    }
    /**
     * @return The date and time the maintenance run was completed.
     * 
     */
    public Optional<String> timeEnded() {
        return Optional.ofNullable(this.timeEnded);
    }
    /**
     * @return The date and time the maintenance run is scheduled to occur.
     * 
     */
    public Optional<String> timeScheduled() {
        return Optional.ofNullable(this.timeScheduled);
    }
    /**
     * @return The date and time the maintenance run starts.
     * 
     */
    public Optional<String> timeStarted() {
        return Optional.ofNullable(this.timeStarted);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMaintenanceRunResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable Integer currentCustomActionTimeoutInMins;
        private @Nullable String currentPatchingComponent;
        private @Nullable Integer customActionTimeoutInMins;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable String estimatedComponentPatchingStartTime;
        private @Nullable List<GetMaintenanceRunEstimatedPatchingTime> estimatedPatchingTimes;
        private @Nullable String id;
        private @Nullable Boolean isCustomActionTimeoutEnabled;
        private @Nullable Boolean isDstFileUpdateEnabled;
        private @Nullable String lifecycleDetails;
        private String maintenanceRunId;
        private @Nullable String maintenanceSubtype;
        private @Nullable String maintenanceType;
        private @Nullable Integer patchFailureCount;
        private @Nullable String patchId;
        private @Nullable String patchType;
        private @Nullable String patchingEndTime;
        private @Nullable String patchingMode;
        private @Nullable String patchingStartTime;
        private @Nullable String patchingStatus;
        private @Nullable String peerMaintenanceRunId;
        private @Nullable String state;
        private @Nullable String targetDbServerVersion;
        private @Nullable String targetResourceId;
        private @Nullable String targetResourceType;
        private @Nullable String targetStorageServerVersion;
        private @Nullable String timeEnded;
        private @Nullable String timeScheduled;
        private @Nullable String timeStarted;
        public Builder() {}
        public Builder(GetMaintenanceRunResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentCustomActionTimeoutInMins = defaults.currentCustomActionTimeoutInMins;
    	      this.currentPatchingComponent = defaults.currentPatchingComponent;
    	      this.customActionTimeoutInMins = defaults.customActionTimeoutInMins;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.estimatedComponentPatchingStartTime = defaults.estimatedComponentPatchingStartTime;
    	      this.estimatedPatchingTimes = defaults.estimatedPatchingTimes;
    	      this.id = defaults.id;
    	      this.isCustomActionTimeoutEnabled = defaults.isCustomActionTimeoutEnabled;
    	      this.isDstFileUpdateEnabled = defaults.isDstFileUpdateEnabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.maintenanceRunId = defaults.maintenanceRunId;
    	      this.maintenanceSubtype = defaults.maintenanceSubtype;
    	      this.maintenanceType = defaults.maintenanceType;
    	      this.patchFailureCount = defaults.patchFailureCount;
    	      this.patchId = defaults.patchId;
    	      this.patchType = defaults.patchType;
    	      this.patchingEndTime = defaults.patchingEndTime;
    	      this.patchingMode = defaults.patchingMode;
    	      this.patchingStartTime = defaults.patchingStartTime;
    	      this.patchingStatus = defaults.patchingStatus;
    	      this.peerMaintenanceRunId = defaults.peerMaintenanceRunId;
    	      this.state = defaults.state;
    	      this.targetDbServerVersion = defaults.targetDbServerVersion;
    	      this.targetResourceId = defaults.targetResourceId;
    	      this.targetResourceType = defaults.targetResourceType;
    	      this.targetStorageServerVersion = defaults.targetStorageServerVersion;
    	      this.timeEnded = defaults.timeEnded;
    	      this.timeScheduled = defaults.timeScheduled;
    	      this.timeStarted = defaults.timeStarted;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currentCustomActionTimeoutInMins(@Nullable Integer currentCustomActionTimeoutInMins) {
            this.currentCustomActionTimeoutInMins = currentCustomActionTimeoutInMins;
            return this;
        }
        @CustomType.Setter
        public Builder currentPatchingComponent(@Nullable String currentPatchingComponent) {
            this.currentPatchingComponent = currentPatchingComponent;
            return this;
        }
        @CustomType.Setter
        public Builder customActionTimeoutInMins(@Nullable Integer customActionTimeoutInMins) {
            this.customActionTimeoutInMins = customActionTimeoutInMins;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedComponentPatchingStartTime(@Nullable String estimatedComponentPatchingStartTime) {
            this.estimatedComponentPatchingStartTime = estimatedComponentPatchingStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedPatchingTimes(@Nullable List<GetMaintenanceRunEstimatedPatchingTime> estimatedPatchingTimes) {
            this.estimatedPatchingTimes = estimatedPatchingTimes;
            return this;
        }
        public Builder estimatedPatchingTimes(GetMaintenanceRunEstimatedPatchingTime... estimatedPatchingTimes) {
            return estimatedPatchingTimes(List.of(estimatedPatchingTimes));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCustomActionTimeoutEnabled(@Nullable Boolean isCustomActionTimeoutEnabled) {
            this.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isDstFileUpdateEnabled(@Nullable Boolean isDstFileUpdateEnabled) {
            this.isDstFileUpdateEnabled = isDstFileUpdateEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceRunId(String maintenanceRunId) {
            this.maintenanceRunId = Objects.requireNonNull(maintenanceRunId);
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceSubtype(@Nullable String maintenanceSubtype) {
            this.maintenanceSubtype = maintenanceSubtype;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceType(@Nullable String maintenanceType) {
            this.maintenanceType = maintenanceType;
            return this;
        }
        @CustomType.Setter
        public Builder patchFailureCount(@Nullable Integer patchFailureCount) {
            this.patchFailureCount = patchFailureCount;
            return this;
        }
        @CustomType.Setter
        public Builder patchId(@Nullable String patchId) {
            this.patchId = patchId;
            return this;
        }
        @CustomType.Setter
        public Builder patchType(@Nullable String patchType) {
            this.patchType = patchType;
            return this;
        }
        @CustomType.Setter
        public Builder patchingEndTime(@Nullable String patchingEndTime) {
            this.patchingEndTime = patchingEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder patchingMode(@Nullable String patchingMode) {
            this.patchingMode = patchingMode;
            return this;
        }
        @CustomType.Setter
        public Builder patchingStartTime(@Nullable String patchingStartTime) {
            this.patchingStartTime = patchingStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder patchingStatus(@Nullable String patchingStatus) {
            this.patchingStatus = patchingStatus;
            return this;
        }
        @CustomType.Setter
        public Builder peerMaintenanceRunId(@Nullable String peerMaintenanceRunId) {
            this.peerMaintenanceRunId = peerMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetDbServerVersion(@Nullable String targetDbServerVersion) {
            this.targetDbServerVersion = targetDbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceId(@Nullable String targetResourceId) {
            this.targetResourceId = targetResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceType(@Nullable String targetResourceType) {
            this.targetResourceType = targetResourceType;
            return this;
        }
        @CustomType.Setter
        public Builder targetStorageServerVersion(@Nullable String targetStorageServerVersion) {
            this.targetStorageServerVersion = targetStorageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnded(@Nullable String timeEnded) {
            this.timeEnded = timeEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeScheduled(@Nullable String timeScheduled) {
            this.timeScheduled = timeScheduled;
            return this;
        }
        @CustomType.Setter
        public Builder timeStarted(@Nullable String timeStarted) {
            this.timeStarted = timeStarted;
            return this;
        }
        public GetMaintenanceRunResult build() {
            final var o = new GetMaintenanceRunResult();
            o.compartmentId = compartmentId;
            o.currentCustomActionTimeoutInMins = currentCustomActionTimeoutInMins;
            o.currentPatchingComponent = currentPatchingComponent;
            o.customActionTimeoutInMins = customActionTimeoutInMins;
            o.description = description;
            o.displayName = displayName;
            o.estimatedComponentPatchingStartTime = estimatedComponentPatchingStartTime;
            o.estimatedPatchingTimes = estimatedPatchingTimes;
            o.id = id;
            o.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            o.isDstFileUpdateEnabled = isDstFileUpdateEnabled;
            o.lifecycleDetails = lifecycleDetails;
            o.maintenanceRunId = maintenanceRunId;
            o.maintenanceSubtype = maintenanceSubtype;
            o.maintenanceType = maintenanceType;
            o.patchFailureCount = patchFailureCount;
            o.patchId = patchId;
            o.patchType = patchType;
            o.patchingEndTime = patchingEndTime;
            o.patchingMode = patchingMode;
            o.patchingStartTime = patchingStartTime;
            o.patchingStatus = patchingStatus;
            o.peerMaintenanceRunId = peerMaintenanceRunId;
            o.state = state;
            o.targetDbServerVersion = targetDbServerVersion;
            o.targetResourceId = targetResourceId;
            o.targetResourceType = targetResourceType;
            o.targetStorageServerVersion = targetStorageServerVersion;
            o.timeEnded = timeEnded;
            o.timeScheduled = timeScheduled;
            o.timeStarted = timeStarted;
            return o;
        }
    }
}
