// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedPreferredCredentialResult {
    /**
     * @return The name of the preferred credential.
     * 
     */
    private String credentialName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates whether the preferred credential is accessible.
     * 
     */
    private @Nullable Boolean isAccessible;
    private String managedDatabaseId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
     * 
     */
    private @Nullable String passwordSecretId;
    /**
     * @return The role of the database user.
     * 
     */
    private @Nullable String role;
    /**
     * @return The status of the preferred credential.
     * 
     */
    private @Nullable String status;
    /**
     * @return The type of preferred credential. Only &#39;BASIC&#39; is supported currently.
     * 
     */
    private @Nullable String type;
    /**
     * @return The user name used to connect to the database.
     * 
     */
    private @Nullable String userName;

    private GetManagedPreferredCredentialResult() {}
    /**
     * @return The name of the preferred credential.
     * 
     */
    public String credentialName() {
        return this.credentialName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether the preferred credential is accessible.
     * 
     */
    public Optional<Boolean> isAccessible() {
        return Optional.ofNullable(this.isAccessible);
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
     * 
     */
    public Optional<String> passwordSecretId() {
        return Optional.ofNullable(this.passwordSecretId);
    }
    /**
     * @return The role of the database user.
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    /**
     * @return The status of the preferred credential.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The type of preferred credential. Only &#39;BASIC&#39; is supported currently.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The user name used to connect to the database.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedPreferredCredentialResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String credentialName;
        private @Nullable String id;
        private @Nullable Boolean isAccessible;
        private String managedDatabaseId;
        private @Nullable String passwordSecretId;
        private @Nullable String role;
        private @Nullable String status;
        private @Nullable String type;
        private @Nullable String userName;
        public Builder() {}
        public Builder(GetManagedPreferredCredentialResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialName = defaults.credentialName;
    	      this.id = defaults.id;
    	      this.isAccessible = defaults.isAccessible;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.passwordSecretId = defaults.passwordSecretId;
    	      this.role = defaults.role;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder credentialName(String credentialName) {
            this.credentialName = Objects.requireNonNull(credentialName);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAccessible(@Nullable Boolean isAccessible) {
            this.isAccessible = isAccessible;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder passwordSecretId(@Nullable String passwordSecretId) {
            this.passwordSecretId = passwordSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public GetManagedPreferredCredentialResult build() {
            final var o = new GetManagedPreferredCredentialResult();
            o.credentialName = credentialName;
            o.id = id;
            o.isAccessible = isAccessible;
            o.managedDatabaseId = managedDatabaseId;
            o.passwordSecretId = passwordSecretId;
            o.role = role;
            o.status = status;
            o.type = type;
            o.userName = userName;
            return o;
        }
    }
}
