// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetManagedPreferredCredentialsFilter;
import com.pulumi.oci.Database.outputs.GetManagedPreferredCredentialsPreferredCredentialCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedPreferredCredentialsResult {
    private @Nullable List<GetManagedPreferredCredentialsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String managedDatabaseId;
    /**
     * @return The list of preferred_credential_collection.
     * 
     */
    private List<GetManagedPreferredCredentialsPreferredCredentialCollection> preferredCredentialCollections;

    private GetManagedPreferredCredentialsResult() {}
    public List<GetManagedPreferredCredentialsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The list of preferred_credential_collection.
     * 
     */
    public List<GetManagedPreferredCredentialsPreferredCredentialCollection> preferredCredentialCollections() {
        return this.preferredCredentialCollections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedPreferredCredentialsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetManagedPreferredCredentialsFilter> filters;
        private String id;
        private String managedDatabaseId;
        private List<GetManagedPreferredCredentialsPreferredCredentialCollection> preferredCredentialCollections;
        public Builder() {}
        public Builder(GetManagedPreferredCredentialsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.preferredCredentialCollections = defaults.preferredCredentialCollections;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedPreferredCredentialsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedPreferredCredentialsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedPreferredCredentialsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedPreferredCredentialsResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder preferredCredentialCollections(List<GetManagedPreferredCredentialsPreferredCredentialCollection> preferredCredentialCollections) {
            if (preferredCredentialCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedPreferredCredentialsResult", "preferredCredentialCollections");
            }
            this.preferredCredentialCollections = preferredCredentialCollections;
            return this;
        }
        public Builder preferredCredentialCollections(GetManagedPreferredCredentialsPreferredCredentialCollection... preferredCredentialCollections) {
            return preferredCredentialCollections(List.of(preferredCredentialCollections));
        }
        public GetManagedPreferredCredentialsResult build() {
            final var _resultValue = new GetManagedPreferredCredentialsResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.preferredCredentialCollections = preferredCredentialCollections;
            return _resultValue;
        }
    }
}
