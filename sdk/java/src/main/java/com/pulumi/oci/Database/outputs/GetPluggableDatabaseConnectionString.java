// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPluggableDatabaseConnectionString {
    /**
     * @return All connection strings to use to connect to the pluggable database.
     * 
     */
    private Map<String,Object> allConnectionStrings;
    /**
     * @return A host name-based PDB connection string.
     * 
     */
    private String pdbDefault;
    /**
     * @return An IP-based PDB connection string.
     * 
     */
    private String pdbIpDefault;

    private GetPluggableDatabaseConnectionString() {}
    /**
     * @return All connection strings to use to connect to the pluggable database.
     * 
     */
    public Map<String,Object> allConnectionStrings() {
        return this.allConnectionStrings;
    }
    /**
     * @return A host name-based PDB connection string.
     * 
     */
    public String pdbDefault() {
        return this.pdbDefault;
    }
    /**
     * @return An IP-based PDB connection string.
     * 
     */
    public String pdbIpDefault() {
        return this.pdbIpDefault;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPluggableDatabaseConnectionString defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> allConnectionStrings;
        private String pdbDefault;
        private String pdbIpDefault;
        public Builder() {}
        public Builder(GetPluggableDatabaseConnectionString defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allConnectionStrings = defaults.allConnectionStrings;
    	      this.pdbDefault = defaults.pdbDefault;
    	      this.pdbIpDefault = defaults.pdbIpDefault;
        }

        @CustomType.Setter
        public Builder allConnectionStrings(Map<String,Object> allConnectionStrings) {
            if (allConnectionStrings == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabaseConnectionString", "allConnectionStrings");
            }
            this.allConnectionStrings = allConnectionStrings;
            return this;
        }
        @CustomType.Setter
        public Builder pdbDefault(String pdbDefault) {
            if (pdbDefault == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabaseConnectionString", "pdbDefault");
            }
            this.pdbDefault = pdbDefault;
            return this;
        }
        @CustomType.Setter
        public Builder pdbIpDefault(String pdbIpDefault) {
            if (pdbIpDefault == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabaseConnectionString", "pdbIpDefault");
            }
            this.pdbIpDefault = pdbIpDefault;
            return this;
        }
        public GetPluggableDatabaseConnectionString build() {
            final var _resultValue = new GetPluggableDatabaseConnectionString();
            _resultValue.allConnectionStrings = allConnectionStrings;
            _resultValue.pdbDefault = pdbDefault;
            _resultValue.pdbIpDefault = pdbIpDefault;
            return _resultValue;
        }
    }
}
