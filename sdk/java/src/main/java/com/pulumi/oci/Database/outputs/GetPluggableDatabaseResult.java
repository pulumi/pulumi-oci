// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Database.outputs.GetPluggableDatabaseConnectionString;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasePdbCreationTypeDetail;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasePdbNodeLevelDetail;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasePluggableDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.GetPluggableDatabaseRefreshableCloneConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPluggableDatabaseResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    private @Nullable List<GetPluggableDatabaseConnectionString> connectionStrings;
    private @Nullable String containerDatabaseAdminPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    private @Nullable String containerDatabaseId;
    private @Nullable Integer convertToRegularTrigger;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pluggable database.
     * 
     */
    private @Nullable String id;
    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    private @Nullable Boolean isRestricted;
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    private @Nullable String openMode;
    private @Nullable String pdbAdminPassword;
    private @Nullable List<GetPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails;
    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    private @Nullable String pdbName;
    /**
     * @return Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
     * 
     */
    private @Nullable List<GetPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails;
    private String pluggableDatabaseId;
    /**
     * @return The configuration of the Pluggable Database Management service.
     * 
     */
    private @Nullable List<GetPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs;
    private @Nullable Integer refreshTrigger;
    /**
     * @return Pluggable Database Refreshable Clone Configuration.
     * 
     */
    private @Nullable List<GetPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs;
    private @Nullable Integer rotateKeyTrigger;
    private @Nullable Boolean shouldCreatePdbBackup;
    private @Nullable Boolean shouldPdbAdminAccountBeLocked;
    /**
     * @return The current state of the pluggable database.
     * 
     */
    private @Nullable String state;
    private @Nullable String tdeWalletPassword;
    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    private @Nullable String timeCreated;

    private GetPluggableDatabaseResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    public List<GetPluggableDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings == null ? List.of() : this.connectionStrings;
    }
    public Optional<String> containerDatabaseAdminPassword() {
        return Optional.ofNullable(this.containerDatabaseAdminPassword);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    public Optional<String> containerDatabaseId() {
        return Optional.ofNullable(this.containerDatabaseId);
    }
    public Optional<Integer> convertToRegularTrigger() {
        return Optional.ofNullable(this.convertToRegularTrigger);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pluggable database.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    public Optional<Boolean> isRestricted() {
        return Optional.ofNullable(this.isRestricted);
    }
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    public Optional<String> openMode() {
        return Optional.ofNullable(this.openMode);
    }
    public Optional<String> pdbAdminPassword() {
        return Optional.ofNullable(this.pdbAdminPassword);
    }
    public List<GetPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails() {
        return this.pdbCreationTypeDetails == null ? List.of() : this.pdbCreationTypeDetails;
    }
    /**
     * @return The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     * 
     */
    public Optional<String> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }
    /**
     * @return Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
     * 
     */
    public List<GetPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails() {
        return this.pdbNodeLevelDetails == null ? List.of() : this.pdbNodeLevelDetails;
    }
    public String pluggableDatabaseId() {
        return this.pluggableDatabaseId;
    }
    /**
     * @return The configuration of the Pluggable Database Management service.
     * 
     */
    public List<GetPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs() {
        return this.pluggableDatabaseManagementConfigs == null ? List.of() : this.pluggableDatabaseManagementConfigs;
    }
    public Optional<Integer> refreshTrigger() {
        return Optional.ofNullable(this.refreshTrigger);
    }
    /**
     * @return Pluggable Database Refreshable Clone Configuration.
     * 
     */
    public List<GetPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs() {
        return this.refreshableCloneConfigs == null ? List.of() : this.refreshableCloneConfigs;
    }
    public Optional<Integer> rotateKeyTrigger() {
        return Optional.ofNullable(this.rotateKeyTrigger);
    }
    public Optional<Boolean> shouldCreatePdbBackup() {
        return Optional.ofNullable(this.shouldCreatePdbBackup);
    }
    public Optional<Boolean> shouldPdbAdminAccountBeLocked() {
        return Optional.ofNullable(this.shouldPdbAdminAccountBeLocked);
    }
    /**
     * @return The current state of the pluggable database.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> tdeWalletPassword() {
        return Optional.ofNullable(this.tdeWalletPassword);
    }
    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPluggableDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable List<GetPluggableDatabaseConnectionString> connectionStrings;
        private @Nullable String containerDatabaseAdminPassword;
        private @Nullable String containerDatabaseId;
        private @Nullable Integer convertToRegularTrigger;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable Boolean isRestricted;
        private @Nullable String lifecycleDetails;
        private @Nullable String openMode;
        private @Nullable String pdbAdminPassword;
        private @Nullable List<GetPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails;
        private @Nullable String pdbName;
        private @Nullable List<GetPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails;
        private String pluggableDatabaseId;
        private @Nullable List<GetPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs;
        private @Nullable Integer refreshTrigger;
        private @Nullable List<GetPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs;
        private @Nullable Integer rotateKeyTrigger;
        private @Nullable Boolean shouldCreatePdbBackup;
        private @Nullable Boolean shouldPdbAdminAccountBeLocked;
        private @Nullable String state;
        private @Nullable String tdeWalletPassword;
        private @Nullable String timeCreated;
        public Builder() {}
        public Builder(GetPluggableDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.containerDatabaseAdminPassword = defaults.containerDatabaseAdminPassword;
    	      this.containerDatabaseId = defaults.containerDatabaseId;
    	      this.convertToRegularTrigger = defaults.convertToRegularTrigger;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isRestricted = defaults.isRestricted;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.openMode = defaults.openMode;
    	      this.pdbAdminPassword = defaults.pdbAdminPassword;
    	      this.pdbCreationTypeDetails = defaults.pdbCreationTypeDetails;
    	      this.pdbName = defaults.pdbName;
    	      this.pdbNodeLevelDetails = defaults.pdbNodeLevelDetails;
    	      this.pluggableDatabaseId = defaults.pluggableDatabaseId;
    	      this.pluggableDatabaseManagementConfigs = defaults.pluggableDatabaseManagementConfigs;
    	      this.refreshTrigger = defaults.refreshTrigger;
    	      this.refreshableCloneConfigs = defaults.refreshableCloneConfigs;
    	      this.rotateKeyTrigger = defaults.rotateKeyTrigger;
    	      this.shouldCreatePdbBackup = defaults.shouldCreatePdbBackup;
    	      this.shouldPdbAdminAccountBeLocked = defaults.shouldPdbAdminAccountBeLocked;
    	      this.state = defaults.state;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(@Nullable List<GetPluggableDatabaseConnectionString> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(GetPluggableDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder containerDatabaseAdminPassword(@Nullable String containerDatabaseAdminPassword) {
            this.containerDatabaseAdminPassword = containerDatabaseAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder containerDatabaseId(@Nullable String containerDatabaseId) {
            this.containerDatabaseId = containerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder convertToRegularTrigger(@Nullable Integer convertToRegularTrigger) {
            this.convertToRegularTrigger = convertToRegularTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRestricted(@Nullable Boolean isRestricted) {
            this.isRestricted = isRestricted;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder openMode(@Nullable String openMode) {
            this.openMode = openMode;
            return this;
        }
        @CustomType.Setter
        public Builder pdbAdminPassword(@Nullable String pdbAdminPassword) {
            this.pdbAdminPassword = pdbAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder pdbCreationTypeDetails(@Nullable List<GetPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails) {
            this.pdbCreationTypeDetails = pdbCreationTypeDetails;
            return this;
        }
        public Builder pdbCreationTypeDetails(GetPluggableDatabasePdbCreationTypeDetail... pdbCreationTypeDetails) {
            return pdbCreationTypeDetails(List.of(pdbCreationTypeDetails));
        }
        @CustomType.Setter
        public Builder pdbName(@Nullable String pdbName) {
            this.pdbName = pdbName;
            return this;
        }
        @CustomType.Setter
        public Builder pdbNodeLevelDetails(@Nullable List<GetPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails) {
            this.pdbNodeLevelDetails = pdbNodeLevelDetails;
            return this;
        }
        public Builder pdbNodeLevelDetails(GetPluggableDatabasePdbNodeLevelDetail... pdbNodeLevelDetails) {
            return pdbNodeLevelDetails(List.of(pdbNodeLevelDetails));
        }
        @CustomType.Setter
        public Builder pluggableDatabaseId(String pluggableDatabaseId) {
            this.pluggableDatabaseId = Objects.requireNonNull(pluggableDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder pluggableDatabaseManagementConfigs(@Nullable List<GetPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs) {
            this.pluggableDatabaseManagementConfigs = pluggableDatabaseManagementConfigs;
            return this;
        }
        public Builder pluggableDatabaseManagementConfigs(GetPluggableDatabasePluggableDatabaseManagementConfig... pluggableDatabaseManagementConfigs) {
            return pluggableDatabaseManagementConfigs(List.of(pluggableDatabaseManagementConfigs));
        }
        @CustomType.Setter
        public Builder refreshTrigger(@Nullable Integer refreshTrigger) {
            this.refreshTrigger = refreshTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder refreshableCloneConfigs(@Nullable List<GetPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs) {
            this.refreshableCloneConfigs = refreshableCloneConfigs;
            return this;
        }
        public Builder refreshableCloneConfigs(GetPluggableDatabaseRefreshableCloneConfig... refreshableCloneConfigs) {
            return refreshableCloneConfigs(List.of(refreshableCloneConfigs));
        }
        @CustomType.Setter
        public Builder rotateKeyTrigger(@Nullable Integer rotateKeyTrigger) {
            this.rotateKeyTrigger = rotateKeyTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder shouldCreatePdbBackup(@Nullable Boolean shouldCreatePdbBackup) {
            this.shouldCreatePdbBackup = shouldCreatePdbBackup;
            return this;
        }
        @CustomType.Setter
        public Builder shouldPdbAdminAccountBeLocked(@Nullable Boolean shouldPdbAdminAccountBeLocked) {
            this.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tdeWalletPassword(@Nullable String tdeWalletPassword) {
            this.tdeWalletPassword = tdeWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        public GetPluggableDatabaseResult build() {
            final var o = new GetPluggableDatabaseResult();
            o.compartmentId = compartmentId;
            o.connectionStrings = connectionStrings;
            o.containerDatabaseAdminPassword = containerDatabaseAdminPassword;
            o.containerDatabaseId = containerDatabaseId;
            o.convertToRegularTrigger = convertToRegularTrigger;
            o.definedTags = definedTags;
            o.freeformTags = freeformTags;
            o.id = id;
            o.isRestricted = isRestricted;
            o.lifecycleDetails = lifecycleDetails;
            o.openMode = openMode;
            o.pdbAdminPassword = pdbAdminPassword;
            o.pdbCreationTypeDetails = pdbCreationTypeDetails;
            o.pdbName = pdbName;
            o.pdbNodeLevelDetails = pdbNodeLevelDetails;
            o.pluggableDatabaseId = pluggableDatabaseId;
            o.pluggableDatabaseManagementConfigs = pluggableDatabaseManagementConfigs;
            o.refreshTrigger = refreshTrigger;
            o.refreshableCloneConfigs = refreshableCloneConfigs;
            o.rotateKeyTrigger = rotateKeyTrigger;
            o.shouldCreatePdbBackup = shouldCreatePdbBackup;
            o.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            o.state = state;
            o.tdeWalletPassword = tdeWalletPassword;
            o.timeCreated = timeCreated;
            return o;
        }
    }
}
