// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasesPluggableDatabaseConnectionString;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasesPluggableDatabasePdbCreationTypeDetail;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasesPluggableDatabasePdbNodeLevelDetail;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig;
import com.pulumi.oci.Database.outputs.GetPluggableDatabasesPluggableDatabaseRefreshableCloneConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPluggableDatabasesPluggableDatabase {
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String compartmentId;
    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    private List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings;
    private String containerDatabaseAdminPassword;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    private String containerDatabaseId;
    private Integer convertToRegularTrigger;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pluggable database.
     * 
     */
    private String id;
    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    private Boolean isRestricted;
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    private String openMode;
    private String pdbAdminPassword;
    private List<GetPluggableDatabasesPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails;
    /**
     * @return A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
     * 
     */
    private String pdbName;
    /**
     * @return Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
     * 
     */
    private List<GetPluggableDatabasesPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails;
    /**
     * @return The configuration of the Pluggable Database Management service.
     * 
     */
    private List<GetPluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs;
    private Integer refreshTrigger;
    /**
     * @return Pluggable Database Refreshable Clone Configuration.
     * 
     */
    private List<GetPluggableDatabasesPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs;
    private Integer rotateKeyTrigger;
    private Boolean shouldCreatePdbBackup;
    private Boolean shouldPdbAdminAccountBeLocked;
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    private String state;
    private String tdeWalletPassword;
    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    private String timeCreated;

    private GetPluggableDatabasesPluggableDatabase() {}
    /**
     * @return The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Connection strings to connect to an Oracle Pluggable Database.
     * 
     */
    public List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    public String containerDatabaseAdminPassword() {
        return this.containerDatabaseAdminPassword;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
     * 
     */
    public String containerDatabaseId() {
        return this.containerDatabaseId;
    }
    public Integer convertToRegularTrigger() {
        return this.convertToRegularTrigger;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pluggable database.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     * 
     */
    public Boolean isRestricted() {
        return this.isRestricted;
    }
    /**
     * @return Detailed message for the lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     * 
     */
    public String openMode() {
        return this.openMode;
    }
    public String pdbAdminPassword() {
        return this.pdbAdminPassword;
    }
    public List<GetPluggableDatabasesPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails() {
        return this.pdbCreationTypeDetails;
    }
    /**
     * @return A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
     * 
     */
    public String pdbName() {
        return this.pdbName;
    }
    /**
     * @return Pluggable Database Node Level Details. Example: [{&#34;nodeName&#34; : &#34;node1&#34;, &#34;openMode&#34; : &#34;READ_WRITE&#34;}, {&#34;nodeName&#34; : &#34;node2&#34;, &#34;openMode&#34; : &#34;READ_ONLY&#34;}]
     * 
     */
    public List<GetPluggableDatabasesPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails() {
        return this.pdbNodeLevelDetails;
    }
    /**
     * @return The configuration of the Pluggable Database Management service.
     * 
     */
    public List<GetPluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs() {
        return this.pluggableDatabaseManagementConfigs;
    }
    public Integer refreshTrigger() {
        return this.refreshTrigger;
    }
    /**
     * @return Pluggable Database Refreshable Clone Configuration.
     * 
     */
    public List<GetPluggableDatabasesPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs() {
        return this.refreshableCloneConfigs;
    }
    public Integer rotateKeyTrigger() {
        return this.rotateKeyTrigger;
    }
    public Boolean shouldCreatePdbBackup() {
        return this.shouldCreatePdbBackup;
    }
    public Boolean shouldPdbAdminAccountBeLocked() {
        return this.shouldPdbAdminAccountBeLocked;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state exactly.
     * 
     */
    public String state() {
        return this.state;
    }
    public String tdeWalletPassword() {
        return this.tdeWalletPassword;
    }
    /**
     * @return The date and time the pluggable database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPluggableDatabasesPluggableDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings;
        private String containerDatabaseAdminPassword;
        private String containerDatabaseId;
        private Integer convertToRegularTrigger;
        private Map<String,String> definedTags;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isRestricted;
        private String lifecycleDetails;
        private String openMode;
        private String pdbAdminPassword;
        private List<GetPluggableDatabasesPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails;
        private String pdbName;
        private List<GetPluggableDatabasesPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails;
        private List<GetPluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs;
        private Integer refreshTrigger;
        private List<GetPluggableDatabasesPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs;
        private Integer rotateKeyTrigger;
        private Boolean shouldCreatePdbBackup;
        private Boolean shouldPdbAdminAccountBeLocked;
        private String state;
        private String tdeWalletPassword;
        private String timeCreated;
        public Builder() {}
        public Builder(GetPluggableDatabasesPluggableDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.containerDatabaseAdminPassword = defaults.containerDatabaseAdminPassword;
    	      this.containerDatabaseId = defaults.containerDatabaseId;
    	      this.convertToRegularTrigger = defaults.convertToRegularTrigger;
    	      this.definedTags = defaults.definedTags;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isRestricted = defaults.isRestricted;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.openMode = defaults.openMode;
    	      this.pdbAdminPassword = defaults.pdbAdminPassword;
    	      this.pdbCreationTypeDetails = defaults.pdbCreationTypeDetails;
    	      this.pdbName = defaults.pdbName;
    	      this.pdbNodeLevelDetails = defaults.pdbNodeLevelDetails;
    	      this.pluggableDatabaseManagementConfigs = defaults.pluggableDatabaseManagementConfigs;
    	      this.refreshTrigger = defaults.refreshTrigger;
    	      this.refreshableCloneConfigs = defaults.refreshableCloneConfigs;
    	      this.rotateKeyTrigger = defaults.rotateKeyTrigger;
    	      this.shouldCreatePdbBackup = defaults.shouldCreatePdbBackup;
    	      this.shouldPdbAdminAccountBeLocked = defaults.shouldPdbAdminAccountBeLocked;
    	      this.state = defaults.state;
    	      this.tdeWalletPassword = defaults.tdeWalletPassword;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(List<GetPluggableDatabasesPluggableDatabaseConnectionString> connectionStrings) {
            if (connectionStrings == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "connectionStrings");
            }
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(GetPluggableDatabasesPluggableDatabaseConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder containerDatabaseAdminPassword(String containerDatabaseAdminPassword) {
            if (containerDatabaseAdminPassword == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "containerDatabaseAdminPassword");
            }
            this.containerDatabaseAdminPassword = containerDatabaseAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder containerDatabaseId(String containerDatabaseId) {
            if (containerDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "containerDatabaseId");
            }
            this.containerDatabaseId = containerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder convertToRegularTrigger(Integer convertToRegularTrigger) {
            if (convertToRegularTrigger == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "convertToRegularTrigger");
            }
            this.convertToRegularTrigger = convertToRegularTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRestricted(Boolean isRestricted) {
            if (isRestricted == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "isRestricted");
            }
            this.isRestricted = isRestricted;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder openMode(String openMode) {
            if (openMode == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "openMode");
            }
            this.openMode = openMode;
            return this;
        }
        @CustomType.Setter
        public Builder pdbAdminPassword(String pdbAdminPassword) {
            if (pdbAdminPassword == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "pdbAdminPassword");
            }
            this.pdbAdminPassword = pdbAdminPassword;
            return this;
        }
        @CustomType.Setter
        public Builder pdbCreationTypeDetails(List<GetPluggableDatabasesPluggableDatabasePdbCreationTypeDetail> pdbCreationTypeDetails) {
            if (pdbCreationTypeDetails == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "pdbCreationTypeDetails");
            }
            this.pdbCreationTypeDetails = pdbCreationTypeDetails;
            return this;
        }
        public Builder pdbCreationTypeDetails(GetPluggableDatabasesPluggableDatabasePdbCreationTypeDetail... pdbCreationTypeDetails) {
            return pdbCreationTypeDetails(List.of(pdbCreationTypeDetails));
        }
        @CustomType.Setter
        public Builder pdbName(String pdbName) {
            if (pdbName == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "pdbName");
            }
            this.pdbName = pdbName;
            return this;
        }
        @CustomType.Setter
        public Builder pdbNodeLevelDetails(List<GetPluggableDatabasesPluggableDatabasePdbNodeLevelDetail> pdbNodeLevelDetails) {
            if (pdbNodeLevelDetails == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "pdbNodeLevelDetails");
            }
            this.pdbNodeLevelDetails = pdbNodeLevelDetails;
            return this;
        }
        public Builder pdbNodeLevelDetails(GetPluggableDatabasesPluggableDatabasePdbNodeLevelDetail... pdbNodeLevelDetails) {
            return pdbNodeLevelDetails(List.of(pdbNodeLevelDetails));
        }
        @CustomType.Setter
        public Builder pluggableDatabaseManagementConfigs(List<GetPluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig> pluggableDatabaseManagementConfigs) {
            if (pluggableDatabaseManagementConfigs == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "pluggableDatabaseManagementConfigs");
            }
            this.pluggableDatabaseManagementConfigs = pluggableDatabaseManagementConfigs;
            return this;
        }
        public Builder pluggableDatabaseManagementConfigs(GetPluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig... pluggableDatabaseManagementConfigs) {
            return pluggableDatabaseManagementConfigs(List.of(pluggableDatabaseManagementConfigs));
        }
        @CustomType.Setter
        public Builder refreshTrigger(Integer refreshTrigger) {
            if (refreshTrigger == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "refreshTrigger");
            }
            this.refreshTrigger = refreshTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder refreshableCloneConfigs(List<GetPluggableDatabasesPluggableDatabaseRefreshableCloneConfig> refreshableCloneConfigs) {
            if (refreshableCloneConfigs == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "refreshableCloneConfigs");
            }
            this.refreshableCloneConfigs = refreshableCloneConfigs;
            return this;
        }
        public Builder refreshableCloneConfigs(GetPluggableDatabasesPluggableDatabaseRefreshableCloneConfig... refreshableCloneConfigs) {
            return refreshableCloneConfigs(List.of(refreshableCloneConfigs));
        }
        @CustomType.Setter
        public Builder rotateKeyTrigger(Integer rotateKeyTrigger) {
            if (rotateKeyTrigger == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "rotateKeyTrigger");
            }
            this.rotateKeyTrigger = rotateKeyTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder shouldCreatePdbBackup(Boolean shouldCreatePdbBackup) {
            if (shouldCreatePdbBackup == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "shouldCreatePdbBackup");
            }
            this.shouldCreatePdbBackup = shouldCreatePdbBackup;
            return this;
        }
        @CustomType.Setter
        public Builder shouldPdbAdminAccountBeLocked(Boolean shouldPdbAdminAccountBeLocked) {
            if (shouldPdbAdminAccountBeLocked == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "shouldPdbAdminAccountBeLocked");
            }
            this.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tdeWalletPassword(String tdeWalletPassword) {
            if (tdeWalletPassword == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "tdeWalletPassword");
            }
            this.tdeWalletPassword = tdeWalletPassword;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetPluggableDatabasesPluggableDatabase", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetPluggableDatabasesPluggableDatabase build() {
            final var _resultValue = new GetPluggableDatabasesPluggableDatabase();
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionStrings = connectionStrings;
            _resultValue.containerDatabaseAdminPassword = containerDatabaseAdminPassword;
            _resultValue.containerDatabaseId = containerDatabaseId;
            _resultValue.convertToRegularTrigger = convertToRegularTrigger;
            _resultValue.definedTags = definedTags;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isRestricted = isRestricted;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.openMode = openMode;
            _resultValue.pdbAdminPassword = pdbAdminPassword;
            _resultValue.pdbCreationTypeDetails = pdbCreationTypeDetails;
            _resultValue.pdbName = pdbName;
            _resultValue.pdbNodeLevelDetails = pdbNodeLevelDetails;
            _resultValue.pluggableDatabaseManagementConfigs = pluggableDatabaseManagementConfigs;
            _resultValue.refreshTrigger = refreshTrigger;
            _resultValue.refreshableCloneConfigs = refreshableCloneConfigs;
            _resultValue.rotateKeyTrigger = rotateKeyTrigger;
            _resultValue.shouldCreatePdbBackup = shouldCreatePdbBackup;
            _resultValue.shouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            _resultValue.state = state;
            _resultValue.tdeWalletPassword = tdeWalletPassword;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
