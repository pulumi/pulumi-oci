// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSchedulingPlanResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The display name of the Scheduling Plan.
     * 
     */
    private String displayName;
    /**
     * @return The estimated time for the Scheduling Plan.
     * 
     */
    private Integer estimatedTimeInMins;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Plan.
     * 
     */
    private String id;
    /**
     * @return If true, recommended scheduled actions will be generated for the scheduling plan.
     * 
     */
    private Boolean isUsingRecommendedScheduledActions;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current intent the Scheduling Plan. Valid states is EXADATA_INFRASTRUCTURE_FULL_SOFTWARE_UPDATE.
     * 
     */
    private String planIntent;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
     * 
     */
    private String resourceId;
    private String schedulingPlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
     * 
     */
    private String schedulingPolicyId;
    /**
     * @return The service type of the Scheduling Plan.
     * 
     */
    private String serviceType;
    /**
     * @return The current state of the Scheduling Plan. Valid states are CREATING, NEEDS_ATTENTION, AVAILABLE, UPDATING, FAILED, DELETING and DELETED.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the Scheduling Plan Resource was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the Scheduling Plan Resource was updated.
     * 
     */
    private String timeUpdated;

    private GetSchedulingPlanResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The display name of the Scheduling Plan.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The estimated time for the Scheduling Plan.
     * 
     */
    public Integer estimatedTimeInMins() {
        return this.estimatedTimeInMins;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Plan.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If true, recommended scheduled actions will be generated for the scheduling plan.
     * 
     */
    public Boolean isUsingRecommendedScheduledActions() {
        return this.isUsingRecommendedScheduledActions;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current intent the Scheduling Plan. Valid states is EXADATA_INFRASTRUCTURE_FULL_SOFTWARE_UPDATE.
     * 
     */
    public String planIntent() {
        return this.planIntent;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    public String schedulingPlanId() {
        return this.schedulingPlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
     * 
     */
    public String schedulingPolicyId() {
        return this.schedulingPolicyId;
    }
    /**
     * @return The service type of the Scheduling Plan.
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return The current state of the Scheduling Plan. Valid states are CREATING, NEEDS_ATTENTION, AVAILABLE, UPDATING, FAILED, DELETING and DELETED.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the Scheduling Plan Resource was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the Scheduling Plan Resource was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchedulingPlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private Integer estimatedTimeInMins;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isUsingRecommendedScheduledActions;
        private String lifecycleDetails;
        private String planIntent;
        private String resourceId;
        private String schedulingPlanId;
        private String schedulingPolicyId;
        private String serviceType;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetSchedulingPlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.estimatedTimeInMins = defaults.estimatedTimeInMins;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isUsingRecommendedScheduledActions = defaults.isUsingRecommendedScheduledActions;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.planIntent = defaults.planIntent;
    	      this.resourceId = defaults.resourceId;
    	      this.schedulingPlanId = defaults.schedulingPlanId;
    	      this.schedulingPolicyId = defaults.schedulingPolicyId;
    	      this.serviceType = defaults.serviceType;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedTimeInMins(Integer estimatedTimeInMins) {
            if (estimatedTimeInMins == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "estimatedTimeInMins");
            }
            this.estimatedTimeInMins = estimatedTimeInMins;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isUsingRecommendedScheduledActions(Boolean isUsingRecommendedScheduledActions) {
            if (isUsingRecommendedScheduledActions == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "isUsingRecommendedScheduledActions");
            }
            this.isUsingRecommendedScheduledActions = isUsingRecommendedScheduledActions;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder planIntent(String planIntent) {
            if (planIntent == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "planIntent");
            }
            this.planIntent = planIntent;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder schedulingPlanId(String schedulingPlanId) {
            if (schedulingPlanId == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "schedulingPlanId");
            }
            this.schedulingPlanId = schedulingPlanId;
            return this;
        }
        @CustomType.Setter
        public Builder schedulingPolicyId(String schedulingPolicyId) {
            if (schedulingPolicyId == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "schedulingPolicyId");
            }
            this.schedulingPolicyId = schedulingPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetSchedulingPlanResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetSchedulingPlanResult build() {
            final var _resultValue = new GetSchedulingPlanResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.estimatedTimeInMins = estimatedTimeInMins;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isUsingRecommendedScheduledActions = isUsingRecommendedScheduledActions;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.planIntent = planIntent;
            _resultValue.resourceId = resourceId;
            _resultValue.schedulingPlanId = schedulingPlanId;
            _resultValue.schedulingPolicyId = schedulingPolicyId;
            _resultValue.serviceType = serviceType;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
