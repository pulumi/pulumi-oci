// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class PluggableDatabaseManagementsManagementCredentialDetails {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    private String passwordSecretId;
    /**
     * @return The name of the Oracle Database user that will be used to connect to the database.
     * 
     */
    private String userName;

    private PluggableDatabaseManagementsManagementCredentialDetails() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     * 
     */
    public String passwordSecretId() {
        return this.passwordSecretId;
    }
    /**
     * @return The name of the Oracle Database user that will be used to connect to the database.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PluggableDatabaseManagementsManagementCredentialDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String passwordSecretId;
        private String userName;
        public Builder() {}
        public Builder(PluggableDatabaseManagementsManagementCredentialDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.passwordSecretId = defaults.passwordSecretId;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder passwordSecretId(String passwordSecretId) {
            if (passwordSecretId == null) {
              throw new MissingRequiredPropertyException("PluggableDatabaseManagementsManagementCredentialDetails", "passwordSecretId");
            }
            this.passwordSecretId = passwordSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("PluggableDatabaseManagementsManagementCredentialDetails", "userName");
            }
            this.userName = userName;
            return this;
        }
        public PluggableDatabaseManagementsManagementCredentialDetails build() {
            final var _resultValue = new PluggableDatabaseManagementsManagementCredentialDetails();
            _resultValue.passwordSecretId = passwordSecretId;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
