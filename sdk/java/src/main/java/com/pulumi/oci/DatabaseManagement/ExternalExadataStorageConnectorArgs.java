// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalExadataStorageConnectorCredentialInfoArgs;
import java.lang.String;
import java.util.Objects;


public final class ExternalExadataStorageConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalExadataStorageConnectorArgs Empty = new ExternalExadataStorageConnectorArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent for the Exadata storage server.
     * 
     */
    @Import(name="agentId", required=true)
    private Output<String> agentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent for the Exadata storage server.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * (Updatable) The unique string of the connection. For example, &#34;https://&lt;storage-server-name&gt;/MS/RESTService/&#34;.
     * 
     */
    @Import(name="connectionUri", required=true)
    private Output<String> connectionUri;

    /**
     * @return (Updatable) The unique string of the connection. For example, &#34;https://&lt;storage-server-name&gt;/MS/RESTService/&#34;.
     * 
     */
    public Output<String> connectionUri() {
        return this.connectionUri;
    }

    /**
     * (Updatable) The name of the Exadata storage server connector.
     * 
     */
    @Import(name="connectorName", required=true)
    private Output<String> connectorName;

    /**
     * @return (Updatable) The name of the Exadata storage server connector.
     * 
     */
    public Output<String> connectorName() {
        return this.connectorName;
    }

    /**
     * (Updatable) The user credential information.
     * 
     */
    @Import(name="credentialInfo", required=true)
    private Output<ExternalExadataStorageConnectorCredentialInfoArgs> credentialInfo;

    /**
     * @return (Updatable) The user credential information.
     * 
     */
    public Output<ExternalExadataStorageConnectorCredentialInfoArgs> credentialInfo() {
        return this.credentialInfo;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="storageServerId", required=true)
    private Output<String> storageServerId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> storageServerId() {
        return this.storageServerId;
    }

    private ExternalExadataStorageConnectorArgs() {}

    private ExternalExadataStorageConnectorArgs(ExternalExadataStorageConnectorArgs $) {
        this.agentId = $.agentId;
        this.connectionUri = $.connectionUri;
        this.connectorName = $.connectorName;
        this.credentialInfo = $.credentialInfo;
        this.storageServerId = $.storageServerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalExadataStorageConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalExadataStorageConnectorArgs $;

        public Builder() {
            $ = new ExternalExadataStorageConnectorArgs();
        }

        public Builder(ExternalExadataStorageConnectorArgs defaults) {
            $ = new ExternalExadataStorageConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent for the Exadata storage server.
         * 
         * @return builder
         * 
         */
        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent for the Exadata storage server.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param connectionUri (Updatable) The unique string of the connection. For example, &#34;https://&lt;storage-server-name&gt;/MS/RESTService/&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectionUri(Output<String> connectionUri) {
            $.connectionUri = connectionUri;
            return this;
        }

        /**
         * @param connectionUri (Updatable) The unique string of the connection. For example, &#34;https://&lt;storage-server-name&gt;/MS/RESTService/&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectionUri(String connectionUri) {
            return connectionUri(Output.of(connectionUri));
        }

        /**
         * @param connectorName (Updatable) The name of the Exadata storage server connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(Output<String> connectorName) {
            $.connectorName = connectorName;
            return this;
        }

        /**
         * @param connectorName (Updatable) The name of the Exadata storage server connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(String connectorName) {
            return connectorName(Output.of(connectorName));
        }

        /**
         * @param credentialInfo (Updatable) The user credential information.
         * 
         * @return builder
         * 
         */
        public Builder credentialInfo(Output<ExternalExadataStorageConnectorCredentialInfoArgs> credentialInfo) {
            $.credentialInfo = credentialInfo;
            return this;
        }

        /**
         * @param credentialInfo (Updatable) The user credential information.
         * 
         * @return builder
         * 
         */
        public Builder credentialInfo(ExternalExadataStorageConnectorCredentialInfoArgs credentialInfo) {
            return credentialInfo(Output.of(credentialInfo));
        }

        /**
         * @param storageServerId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder storageServerId(Output<String> storageServerId) {
            $.storageServerId = storageServerId;
            return this;
        }

        /**
         * @param storageServerId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder storageServerId(String storageServerId) {
            return storageServerId(Output.of(storageServerId));
        }

        public ExternalExadataStorageConnectorArgs build() {
            if ($.agentId == null) {
                throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorArgs", "agentId");
            }
            if ($.connectionUri == null) {
                throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorArgs", "connectionUri");
            }
            if ($.connectorName == null) {
                throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorArgs", "connectorName");
            }
            if ($.credentialInfo == null) {
                throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorArgs", "credentialInfo");
            }
            if ($.storageServerId == null) {
                throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorArgs", "storageServerId");
            }
            return $;
        }
    }

}
