// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.DatabaseManagement.ExternalListenerArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalListenerState;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalListenerEndpoint;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalListenerServicedAsm;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalListenerServicedDatabase;
import com.pulumi.oci.Utilities;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the External Listener resource in Oracle Cloud Infrastructure Database Management service.
 * 
 * Updates the external listener specified by `externalListenerId`.
 * 
 * ## Import
 * 
 * ExternalListeners can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import oci:DatabaseManagement/externalListener:ExternalListener test_external_listener &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:DatabaseManagement/externalListener:ExternalListener")
public class ExternalListener extends com.pulumi.resources.CustomResource {
    /**
     * The additional details of the external listener defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="additionalDetails", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> additionalDetails;

    /**
     * @return The additional details of the external listener defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
     * 
     */
    @Export(name="adrHomeDirectory", type=String.class, parameters={})
    private Output<String> adrHomeDirectory;

    /**
     * @return The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
     * 
     */
    public Output<String> adrHomeDirectory() {
        return this.adrHomeDirectory;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external database resides.
     * 
     */
    @Export(name="compartmentId", type=String.class, parameters={})
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external database resides.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * The name of the external listener.
     * 
     */
    @Export(name="componentName", type=String.class, parameters={})
    private Output<String> componentName;

    /**
     * @return The name of the external listener.
     * 
     */
    public Output<String> componentName() {
        return this.componentName;
    }
    /**
     * The user-friendly name for the database. The name does not have to be unique.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The user-friendly name for the database. The name does not have to be unique.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The list of protocol addresses the listener is configured to listen on.
     * 
     */
    @Export(name="endpoints", type=List.class, parameters={ExternalListenerEndpoint.class})
    private Output<List<ExternalListenerEndpoint>> endpoints;

    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    public Output<List<ExternalListenerEndpoint>> endpoints() {
        return this.endpoints;
    }
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    @Export(name="externalConnectorId", type=String.class, parameters={})
    private Output<String> externalConnectorId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    public Output<String> externalConnectorId() {
        return this.externalConnectorId;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    @Export(name="externalDbHomeId", type=String.class, parameters={})
    private Output<String> externalDbHomeId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    public Output<String> externalDbHomeId() {
        return this.externalDbHomeId;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    @Export(name="externalDbNodeId", type=String.class, parameters={})
    private Output<String> externalDbNodeId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    public Output<String> externalDbNodeId() {
        return this.externalDbNodeId;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the listener is a part of.
     * 
     */
    @Export(name="externalDbSystemId", type=String.class, parameters={})
    private Output<String> externalDbSystemId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the listener is a part of.
     * 
     */
    public Output<String> externalDbSystemId() {
        return this.externalDbSystemId;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external listener.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="externalListenerId", type=String.class, parameters={})
    private Output<String> externalListenerId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external listener.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> externalListenerId() {
        return this.externalListenerId;
    }
    /**
     * The name of the host on which the external listener is running.
     * 
     */
    @Export(name="hostName", type=String.class, parameters={})
    private Output<String> hostName;

    /**
     * @return The name of the host on which the external listener is running.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }
    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Export(name="lifecycleDetails", type=String.class, parameters={})
    private Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Output<String> lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * The listener alias.
     * 
     */
    @Export(name="listenerAlias", type=String.class, parameters={})
    private Output<String> listenerAlias;

    /**
     * @return The listener alias.
     * 
     */
    public Output<String> listenerAlias() {
        return this.listenerAlias;
    }
    /**
     * The location of the listener configuration file listener.ora.
     * 
     */
    @Export(name="listenerOraLocation", type=String.class, parameters={})
    private Output<String> listenerOraLocation;

    /**
     * @return The location of the listener configuration file listener.ora.
     * 
     */
    public Output<String> listenerOraLocation() {
        return this.listenerOraLocation;
    }
    /**
     * The type of listener.
     * 
     */
    @Export(name="listenerType", type=String.class, parameters={})
    private Output<String> listenerType;

    /**
     * @return The type of listener.
     * 
     */
    public Output<String> listenerType() {
        return this.listenerType;
    }
    /**
     * The destination directory of the listener log file.
     * 
     */
    @Export(name="logDirectory", type=String.class, parameters={})
    private Output<String> logDirectory;

    /**
     * @return The destination directory of the listener log file.
     * 
     */
    public Output<String> logDirectory() {
        return this.logDirectory;
    }
    /**
     * The Oracle home location of the listener.
     * 
     */
    @Export(name="oracleHome", type=String.class, parameters={})
    private Output<String> oracleHome;

    /**
     * @return The Oracle home location of the listener.
     * 
     */
    public Output<String> oracleHome() {
        return this.oracleHome;
    }
    /**
     * The list of ASMs that are serviced by the listener.
     * 
     */
    @Export(name="servicedAsms", type=List.class, parameters={ExternalListenerServicedAsm.class})
    private Output<List<ExternalListenerServicedAsm>> servicedAsms;

    /**
     * @return The list of ASMs that are serviced by the listener.
     * 
     */
    public Output<List<ExternalListenerServicedAsm>> servicedAsms() {
        return this.servicedAsms;
    }
    /**
     * The list of databases that are serviced by the listener.
     * 
     */
    @Export(name="servicedDatabases", type=List.class, parameters={ExternalListenerServicedDatabase.class})
    private Output<List<ExternalListenerServicedDatabase>> servicedDatabases;

    /**
     * @return The list of databases that are serviced by the listener.
     * 
     */
    public Output<List<ExternalListenerServicedDatabase>> servicedDatabases() {
        return this.servicedDatabases;
    }
    /**
     * The current lifecycle state of the external listener.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current lifecycle state of the external listener.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The date and time the external listener was created.
     * 
     */
    @Export(name="timeCreated", type=String.class, parameters={})
    private Output<String> timeCreated;

    /**
     * @return The date and time the external listener was created.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The date and time the external listener was last updated.
     * 
     */
    @Export(name="timeUpdated", type=String.class, parameters={})
    private Output<String> timeUpdated;

    /**
     * @return The date and time the external listener was last updated.
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * The destination directory of the listener trace file.
     * 
     */
    @Export(name="traceDirectory", type=String.class, parameters={})
    private Output<String> traceDirectory;

    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    public Output<String> traceDirectory() {
        return this.traceDirectory;
    }
    /**
     * The listener version.
     * 
     */
    @Export(name="version", type=String.class, parameters={})
    private Output<String> version;

    /**
     * @return The listener version.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ExternalListener(String name) {
        this(name, ExternalListenerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ExternalListener(String name, ExternalListenerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ExternalListener(String name, ExternalListenerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DatabaseManagement/externalListener:ExternalListener", name, args == null ? ExternalListenerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ExternalListener(String name, Output<String> id, @Nullable ExternalListenerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DatabaseManagement/externalListener:ExternalListener", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ExternalListener get(String name, Output<String> id, @Nullable ExternalListenerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ExternalListener(name, id, state, options);
    }
}
