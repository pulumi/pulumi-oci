// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.DatabaseManagement.ExternalMySqlDatabaseConnectorArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalMySqlDatabaseConnectorState;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalMySqlDatabaseConnectorConnectorDetails;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the External My Sql Database Connector resource in Oracle Cloud Infrastructure Database Management service.
 * 
 * Creates an external MySQL connector resource.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.DatabaseManagement.ExternalMySqlDatabaseConnector;
 * import com.pulumi.oci.DatabaseManagement.ExternalMySqlDatabaseConnectorArgs;
 * import com.pulumi.oci.DatabaseManagement.inputs.ExternalMySqlDatabaseConnectorConnectorDetailsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testExternalMySqlDatabaseConnector = new ExternalMySqlDatabaseConnector("testExternalMySqlDatabaseConnector", ExternalMySqlDatabaseConnectorArgs.builder()
 *             .compartmentId(compartmentId)
 *             .connectorDetails(ExternalMySqlDatabaseConnectorConnectorDetailsArgs.builder()
 *                 .credentialType(externalMySqlDatabaseConnectorConnectorDetailsCredentialType)
 *                 .displayName(externalMySqlDatabaseConnectorConnectorDetailsDisplayName)
 *                 .externalDatabaseId(testExternalDatabase.id())
 *                 .hostName(externalMySqlDatabaseConnectorConnectorDetailsHostName)
 *                 .macsAgentId(testAgent.id())
 *                 .networkProtocol(externalMySqlDatabaseConnectorConnectorDetailsNetworkProtocol)
 *                 .port(externalMySqlDatabaseConnectorConnectorDetailsPort)
 *                 .sslSecretId(testSecret.id())
 *                 .build())
 *             .isTestConnectionParam(externalMySqlDatabaseConnectorIsTestConnectionParam)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ExternalMySqlDatabaseConnectors can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector test_external_my_sql_database_connector &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector")
public class ExternalMySqlDatabaseConnector extends com.pulumi.resources.CustomResource {
    /**
     * Oracle Cloud Infrastructure Services associated with this connector.
     * 
     */
    @Export(name="associatedServices", refs={String.class}, tree="[0]")
    private Output<String> associatedServices;

    /**
     * @return Oracle Cloud Infrastructure Services associated with this connector.
     * 
     */
    public Output<String> associatedServices() {
        return this.associatedServices;
    }
    /**
     * (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="checkConnectionStatusTrigger", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> checkConnectionStatusTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Optional<Integer>> checkConnectionStatusTrigger() {
        return Codegen.optional(this.checkConnectionStatusTrigger);
    }
    /**
     * (Updatable) OCID of compartment for the External MySQL Database.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) OCID of compartment for the External MySQL Database.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * Connection Status
     * 
     */
    @Export(name="connectionStatus", refs={String.class}, tree="[0]")
    private Output<String> connectionStatus;

    /**
     * @return Connection Status
     * 
     */
    public Output<String> connectionStatus() {
        return this.connectionStatus;
    }
    /**
     * (Updatable) Create Details of external database connector.
     * 
     */
    @Export(name="connectorDetails", refs={ExternalMySqlDatabaseConnectorConnectorDetails.class}, tree="[0]")
    private Output<ExternalMySqlDatabaseConnectorConnectorDetails> connectorDetails;

    /**
     * @return (Updatable) Create Details of external database connector.
     * 
     */
    public Output<ExternalMySqlDatabaseConnectorConnectorDetails> connectorDetails() {
        return this.connectorDetails;
    }
    /**
     * Connector Type.
     * 
     */
    @Export(name="connectorType", refs={String.class}, tree="[0]")
    private Output<String> connectorType;

    /**
     * @return Connector Type.
     * 
     */
    public Output<String> connectorType() {
        return this.connectorType;
    }
    /**
     * Credential type used to connect to database.
     * 
     */
    @Export(name="credentialType", refs={String.class}, tree="[0]")
    private Output<String> credentialType;

    /**
     * @return Credential type used to connect to database.
     * 
     */
    public Output<String> credentialType() {
        return this.credentialType;
    }
    /**
     * OCID of MySQL Database resource
     * 
     */
    @Export(name="externalDatabaseId", refs={String.class}, tree="[0]")
    private Output<String> externalDatabaseId;

    /**
     * @return OCID of MySQL Database resource
     * 
     */
    public Output<String> externalDatabaseId() {
        return this.externalDatabaseId;
    }
    /**
     * Host name for Connector.
     * 
     */
    @Export(name="hostName", refs={String.class}, tree="[0]")
    private Output<String> hostName;

    /**
     * @return Host name for Connector.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }
    /**
     * Parameter indicating whether database connection needs to be tested.
     * 
     */
    @Export(name="isTestConnectionParam", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isTestConnectionParam;

    /**
     * @return Parameter indicating whether database connection needs to be tested.
     * 
     */
    public Output<Boolean> isTestConnectionParam() {
        return this.isTestConnectionParam;
    }
    /**
     * Agent Id of the MACS agent.
     * 
     */
    @Export(name="macsAgentId", refs={String.class}, tree="[0]")
    private Output<String> macsAgentId;

    /**
     * @return Agent Id of the MACS agent.
     * 
     */
    public Output<String> macsAgentId() {
        return this.macsAgentId;
    }
    /**
     * External MySQL Database Connector Name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return External MySQL Database Connector Name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Network Protocol.
     * 
     */
    @Export(name="networkProtocol", refs={String.class}, tree="[0]")
    private Output<String> networkProtocol;

    /**
     * @return Network Protocol.
     * 
     */
    public Output<String> networkProtocol() {
        return this.networkProtocol;
    }
    /**
     * Connector port.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return Connector port.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * Name of MySQL Database.
     * 
     */
    @Export(name="sourceDatabase", refs={String.class}, tree="[0]")
    private Output<String> sourceDatabase;

    /**
     * @return Name of MySQL Database.
     * 
     */
    public Output<String> sourceDatabase() {
        return this.sourceDatabase;
    }
    /**
     * Type of MySQL Database.
     * 
     */
    @Export(name="sourceDatabaseType", refs={String.class}, tree="[0]")
    private Output<String> sourceDatabaseType;

    /**
     * @return Type of MySQL Database.
     * 
     */
    public Output<String> sourceDatabaseType() {
        return this.sourceDatabaseType;
    }
    /**
     * OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    @Export(name="sslSecretId", refs={String.class}, tree="[0]")
    private Output<String> sslSecretId;

    /**
     * @return OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    public Output<String> sslSecretId() {
        return this.sslSecretId;
    }
    /**
     * Name of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    @Export(name="sslSecretName", refs={String.class}, tree="[0]")
    private Output<String> sslSecretName;

    /**
     * @return Name of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    public Output<String> sslSecretName() {
        return this.sslSecretName;
    }
    /**
     * Indicates lifecycle  state of the resource.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Indicates lifecycle  state of the resource.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Time when connection status was last updated.
     * 
     */
    @Export(name="timeConnectionStatusUpdated", refs={String.class}, tree="[0]")
    private Output<String> timeConnectionStatusUpdated;

    /**
     * @return Time when connection status was last updated.
     * 
     */
    public Output<String> timeConnectionStatusUpdated() {
        return this.timeConnectionStatusUpdated;
    }
    /**
     * Connector creation time.
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output<String> timeCreated;

    /**
     * @return Connector creation time.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * Connector update time.
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output<String> timeUpdated;

    /**
     * @return Connector update time.
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ExternalMySqlDatabaseConnector(java.lang.String name) {
        this(name, ExternalMySqlDatabaseConnectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ExternalMySqlDatabaseConnector(java.lang.String name, ExternalMySqlDatabaseConnectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ExternalMySqlDatabaseConnector(java.lang.String name, ExternalMySqlDatabaseConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ExternalMySqlDatabaseConnector(java.lang.String name, Output<java.lang.String> id, @Nullable ExternalMySqlDatabaseConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector", name, state, makeResourceOptions(options, id), false);
    }

    private static ExternalMySqlDatabaseConnectorArgs makeArgs(ExternalMySqlDatabaseConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ExternalMySqlDatabaseConnectorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ExternalMySqlDatabaseConnector get(java.lang.String name, Output<java.lang.String> id, @Nullable ExternalMySqlDatabaseConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ExternalMySqlDatabaseConnector(name, id, state, options);
    }
}
