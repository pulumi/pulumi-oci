// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalMySqlDatabaseConnectorConnectorDetailsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalMySqlDatabaseConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalMySqlDatabaseConnectorArgs Empty = new ExternalMySqlDatabaseConnectorArgs();

    /**
     * (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="checkConnectionStatusTrigger")
    private @Nullable Output<Integer> checkConnectionStatusTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> checkConnectionStatusTrigger() {
        return Optional.ofNullable(this.checkConnectionStatusTrigger);
    }

    /**
     * (Updatable) OCID of compartment for the External MySQL Database.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) OCID of compartment for the External MySQL Database.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Create Details of external database connector.
     * 
     */
    @Import(name="connectorDetails", required=true)
    private Output<ExternalMySqlDatabaseConnectorConnectorDetailsArgs> connectorDetails;

    /**
     * @return (Updatable) Create Details of external database connector.
     * 
     */
    public Output<ExternalMySqlDatabaseConnectorConnectorDetailsArgs> connectorDetails() {
        return this.connectorDetails;
    }

    /**
     * Parameter indicating whether database connection needs to be tested.
     * 
     */
    @Import(name="isTestConnectionParam", required=true)
    private Output<Boolean> isTestConnectionParam;

    /**
     * @return Parameter indicating whether database connection needs to be tested.
     * 
     */
    public Output<Boolean> isTestConnectionParam() {
        return this.isTestConnectionParam;
    }

    private ExternalMySqlDatabaseConnectorArgs() {}

    private ExternalMySqlDatabaseConnectorArgs(ExternalMySqlDatabaseConnectorArgs $) {
        this.checkConnectionStatusTrigger = $.checkConnectionStatusTrigger;
        this.compartmentId = $.compartmentId;
        this.connectorDetails = $.connectorDetails;
        this.isTestConnectionParam = $.isTestConnectionParam;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalMySqlDatabaseConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalMySqlDatabaseConnectorArgs $;

        public Builder() {
            $ = new ExternalMySqlDatabaseConnectorArgs();
        }

        public Builder(ExternalMySqlDatabaseConnectorArgs defaults) {
            $ = new ExternalMySqlDatabaseConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkConnectionStatusTrigger (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder checkConnectionStatusTrigger(@Nullable Output<Integer> checkConnectionStatusTrigger) {
            $.checkConnectionStatusTrigger = checkConnectionStatusTrigger;
            return this;
        }

        /**
         * @param checkConnectionStatusTrigger (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder checkConnectionStatusTrigger(Integer checkConnectionStatusTrigger) {
            return checkConnectionStatusTrigger(Output.of(checkConnectionStatusTrigger));
        }

        /**
         * @param compartmentId (Updatable) OCID of compartment for the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) OCID of compartment for the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectorDetails (Updatable) Create Details of external database connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorDetails(Output<ExternalMySqlDatabaseConnectorConnectorDetailsArgs> connectorDetails) {
            $.connectorDetails = connectorDetails;
            return this;
        }

        /**
         * @param connectorDetails (Updatable) Create Details of external database connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorDetails(ExternalMySqlDatabaseConnectorConnectorDetailsArgs connectorDetails) {
            return connectorDetails(Output.of(connectorDetails));
        }

        /**
         * @param isTestConnectionParam Parameter indicating whether database connection needs to be tested.
         * 
         * @return builder
         * 
         */
        public Builder isTestConnectionParam(Output<Boolean> isTestConnectionParam) {
            $.isTestConnectionParam = isTestConnectionParam;
            return this;
        }

        /**
         * @param isTestConnectionParam Parameter indicating whether database connection needs to be tested.
         * 
         * @return builder
         * 
         */
        public Builder isTestConnectionParam(Boolean isTestConnectionParam) {
            return isTestConnectionParam(Output.of(isTestConnectionParam));
        }

        public ExternalMySqlDatabaseConnectorArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorArgs", "compartmentId");
            }
            if ($.connectorDetails == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorArgs", "connectorDetails");
            }
            if ($.isTestConnectionParam == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorArgs", "isTestConnectionParam");
            }
            return $;
        }
    }

}
