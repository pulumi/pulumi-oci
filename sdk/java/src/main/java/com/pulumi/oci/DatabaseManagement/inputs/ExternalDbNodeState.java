// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalDbNodeState extends com.pulumi.resources.ResourceArgs {

    public static final ExternalDbNodeState Empty = new ExternalDbNodeState();

    /**
     * The additional details of the external DB node defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="additionalDetails")
    private @Nullable Output<Map<String,Object>> additionalDetails;

    /**
     * @return The additional details of the external DB node defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> additionalDetails() {
        return Optional.ofNullable(this.additionalDetails);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The name of the external DB node.
     * 
     */
    @Import(name="componentName")
    private @Nullable Output<String> componentName;

    /**
     * @return The name of the external DB node.
     * 
     */
    public Optional<Output<String>> componentName() {
        return Optional.ofNullable(this.componentName);
    }

    /**
     * The number of CPU cores available on the DB node.
     * 
     */
    @Import(name="cpuCoreCount")
    private @Nullable Output<Double> cpuCoreCount;

    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    public Optional<Output<Double>> cpuCoreCount() {
        return Optional.ofNullable(this.cpuCoreCount);
    }

    /**
     * The user-friendly name for the external DB node. The name does not have to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The user-friendly name for the external DB node. The name does not have to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Name of the domain.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Name of the domain.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    @Import(name="externalConnectorId")
    private @Nullable Output<String> externalConnectorId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    public Optional<Output<String>> externalConnectorId() {
        return Optional.ofNullable(this.externalConnectorId);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database node.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="externalDbNodeId")
    private @Nullable Output<String> externalDbNodeId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database node.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> externalDbNodeId() {
        return Optional.ofNullable(this.externalDbNodeId);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the DB node is a part of.
     * 
     */
    @Import(name="externalDbSystemId")
    private @Nullable Output<String> externalDbSystemId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the DB node is a part of.
     * 
     */
    public Optional<Output<String>> externalDbSystemId() {
        return Optional.ofNullable(this.externalDbSystemId);
    }

    /**
     * The host name for the DB node.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return The host name for the DB node.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The total memory in gigabytes (GB) on the DB node.
     * 
     */
    @Import(name="memorySizeInGbs")
    private @Nullable Output<Double> memorySizeInGbs;

    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    public Optional<Output<Double>> memorySizeInGbs() {
        return Optional.ofNullable(this.memorySizeInGbs);
    }

    /**
     * The current lifecycle state of the external DB node.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the external DB node.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the external DB node was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the external DB node was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the external DB node was last updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the external DB node was last updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private ExternalDbNodeState() {}

    private ExternalDbNodeState(ExternalDbNodeState $) {
        this.additionalDetails = $.additionalDetails;
        this.compartmentId = $.compartmentId;
        this.componentName = $.componentName;
        this.cpuCoreCount = $.cpuCoreCount;
        this.displayName = $.displayName;
        this.domainName = $.domainName;
        this.externalConnectorId = $.externalConnectorId;
        this.externalDbNodeId = $.externalDbNodeId;
        this.externalDbSystemId = $.externalDbSystemId;
        this.hostName = $.hostName;
        this.lifecycleDetails = $.lifecycleDetails;
        this.memorySizeInGbs = $.memorySizeInGbs;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalDbNodeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalDbNodeState $;

        public Builder() {
            $ = new ExternalDbNodeState();
        }

        public Builder(ExternalDbNodeState defaults) {
            $ = new ExternalDbNodeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalDetails The additional details of the external DB node defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(@Nullable Output<Map<String,Object>> additionalDetails) {
            $.additionalDetails = additionalDetails;
            return this;
        }

        /**
         * @param additionalDetails The additional details of the external DB node defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            return additionalDetails(Output.of(additionalDetails));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param componentName The name of the external DB node.
         * 
         * @return builder
         * 
         */
        public Builder componentName(@Nullable Output<String> componentName) {
            $.componentName = componentName;
            return this;
        }

        /**
         * @param componentName The name of the external DB node.
         * 
         * @return builder
         * 
         */
        public Builder componentName(String componentName) {
            return componentName(Output.of(componentName));
        }

        /**
         * @param cpuCoreCount The number of CPU cores available on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(@Nullable Output<Double> cpuCoreCount) {
            $.cpuCoreCount = cpuCoreCount;
            return this;
        }

        /**
         * @param cpuCoreCount The number of CPU cores available on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(Double cpuCoreCount) {
            return cpuCoreCount(Output.of(cpuCoreCount));
        }

        /**
         * @param displayName The user-friendly name for the external DB node. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-friendly name for the external DB node. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param domainName Name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param externalConnectorId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
         * 
         * @return builder
         * 
         */
        public Builder externalConnectorId(@Nullable Output<String> externalConnectorId) {
            $.externalConnectorId = externalConnectorId;
            return this;
        }

        /**
         * @param externalConnectorId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
         * 
         * @return builder
         * 
         */
        public Builder externalConnectorId(String externalConnectorId) {
            return externalConnectorId(Output.of(externalConnectorId));
        }

        /**
         * @param externalDbNodeId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database node.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder externalDbNodeId(@Nullable Output<String> externalDbNodeId) {
            $.externalDbNodeId = externalDbNodeId;
            return this;
        }

        /**
         * @param externalDbNodeId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database node.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder externalDbNodeId(String externalDbNodeId) {
            return externalDbNodeId(Output.of(externalDbNodeId));
        }

        /**
         * @param externalDbSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the DB node is a part of.
         * 
         * @return builder
         * 
         */
        public Builder externalDbSystemId(@Nullable Output<String> externalDbSystemId) {
            $.externalDbSystemId = externalDbSystemId;
            return this;
        }

        /**
         * @param externalDbSystemId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the DB node is a part of.
         * 
         * @return builder
         * 
         */
        public Builder externalDbSystemId(String externalDbSystemId) {
            return externalDbSystemId(Output.of(externalDbSystemId));
        }

        /**
         * @param hostName The host name for the DB node.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The host name for the DB node.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param memorySizeInGbs The total memory in gigabytes (GB) on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeInGbs(@Nullable Output<Double> memorySizeInGbs) {
            $.memorySizeInGbs = memorySizeInGbs;
            return this;
        }

        /**
         * @param memorySizeInGbs The total memory in gigabytes (GB) on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeInGbs(Double memorySizeInGbs) {
            return memorySizeInGbs(Output.of(memorySizeInGbs));
        }

        /**
         * @param state The current lifecycle state of the external DB node.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the external DB node.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the external DB node was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the external DB node was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time the external DB node was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the external DB node was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public ExternalDbNodeState build() {
            return $;
        }
    }

}
