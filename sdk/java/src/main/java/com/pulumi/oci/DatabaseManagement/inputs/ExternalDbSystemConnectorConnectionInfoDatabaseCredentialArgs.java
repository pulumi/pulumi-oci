// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs Empty = new ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs();

    /**
     * The type of the credential for tablespace administration tasks.
     * 
     */
    @Import(name="credentialType")
    private @Nullable Output<String> credentialType;

    /**
     * @return The type of the credential for tablespace administration tasks.
     * 
     */
    public Optional<Output<String>> credentialType() {
        return Optional.ofNullable(this.credentialType);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential where the database password metadata is stored.
     * 
     */
    @Import(name="namedCredentialId")
    private @Nullable Output<String> namedCredentialId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential where the database password metadata is stored.
     * 
     */
    public Optional<Output<String>> namedCredentialId() {
        return Optional.ofNullable(this.namedCredentialId);
    }

    /**
     * The database user&#39;s password encoded using BASE64 scheme.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The database user&#39;s password encoded using BASE64 scheme.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database password is stored.
     * 
     */
    @Import(name="passwordSecretId")
    private @Nullable Output<String> passwordSecretId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database password is stored.
     * 
     */
    public Optional<Output<String>> passwordSecretId() {
        return Optional.ofNullable(this.passwordSecretId);
    }

    /**
     * The role of the database user.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the database user.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The user to connect to the database.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The user to connect to the database.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs() {}

    private ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs(ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs $) {
        this.credentialType = $.credentialType;
        this.namedCredentialId = $.namedCredentialId;
        this.password = $.password;
        this.passwordSecretId = $.passwordSecretId;
        this.role = $.role;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs $;

        public Builder() {
            $ = new ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs();
        }

        public Builder(ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs defaults) {
            $ = new ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialType The type of the credential for tablespace administration tasks.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(@Nullable Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType The type of the credential for tablespace administration tasks.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param namedCredentialId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential where the database password metadata is stored.
         * 
         * @return builder
         * 
         */
        public Builder namedCredentialId(@Nullable Output<String> namedCredentialId) {
            $.namedCredentialId = namedCredentialId;
            return this;
        }

        /**
         * @param namedCredentialId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential where the database password metadata is stored.
         * 
         * @return builder
         * 
         */
        public Builder namedCredentialId(String namedCredentialId) {
            return namedCredentialId(Output.of(namedCredentialId));
        }

        /**
         * @param password The database user&#39;s password encoded using BASE64 scheme.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The database user&#39;s password encoded using BASE64 scheme.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordSecretId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database password is stored.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(@Nullable Output<String> passwordSecretId) {
            $.passwordSecretId = passwordSecretId;
            return this;
        }

        /**
         * @param passwordSecretId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database password is stored.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(String passwordSecretId) {
            return passwordSecretId(Output.of(passwordSecretId));
        }

        /**
         * @param role The role of the database user.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the database user.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param username The user to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ExternalDbSystemConnectorConnectionInfoDatabaseCredentialArgs build() {
            return $;
        }
    }

}
