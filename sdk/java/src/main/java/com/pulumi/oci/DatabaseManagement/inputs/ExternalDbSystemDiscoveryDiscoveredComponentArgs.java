// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentConnectorArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentDbInstanceArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalDbSystemDiscoveryDiscoveredComponentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalDbSystemDiscoveryDiscoveredComponentArgs Empty = new ExternalDbSystemDiscoveryDiscoveredComponentArgs();

    /**
     * The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
     * 
     */
    @Import(name="adrHomeDirectory")
    private @Nullable Output<String> adrHomeDirectory;

    /**
     * @return The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
     * 
     */
    public Optional<Output<String>> adrHomeDirectory() {
        return Optional.ofNullable(this.adrHomeDirectory);
    }

    @Import(name="asmInstances")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceArgs>> asmInstances;

    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceArgs>>> asmInstances() {
        return Optional.ofNullable(this.asmInstances);
    }

    /**
     * The list of associated components.
     * 
     */
    @Import(name="associatedComponents")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentArgs>> associatedComponents;

    /**
     * @return The list of associated components.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentArgs>>> associatedComponents() {
        return Optional.ofNullable(this.associatedComponents);
    }

    /**
     * Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    @Import(name="canEnableAllCurrentPdbs")
    private @Nullable Output<Boolean> canEnableAllCurrentPdbs;

    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    public Optional<Output<Boolean>> canEnableAllCurrentPdbs() {
        return Optional.ofNullable(this.canEnableAllCurrentPdbs);
    }

    /**
     * The unique identifier of the Oracle cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The unique identifier of the Oracle cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    @Import(name="clusterInstances")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceArgs>> clusterInstances;

    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceArgs>>> clusterInstances() {
        return Optional.ofNullable(this.clusterInstances);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The identifier of the discovered DB system component.
     * 
     */
    @Import(name="componentId")
    private @Nullable Output<String> componentId;

    /**
     * @return The identifier of the discovered DB system component.
     * 
     */
    public Optional<Output<String>> componentId() {
        return Optional.ofNullable(this.componentId);
    }

    /**
     * The name of the discovered DB system component.
     * 
     */
    @Import(name="componentName")
    private @Nullable Output<String> componentName;

    /**
     * @return The name of the discovered DB system component.
     * 
     */
    public Optional<Output<String>> componentName() {
        return Optional.ofNullable(this.componentName);
    }

    /**
     * The component type.
     * 
     */
    @Import(name="componentType")
    private @Nullable Output<String> componentType;

    /**
     * @return The component type.
     * 
     */
    public Optional<Output<String>> componentType() {
        return Optional.ofNullable(this.componentType);
    }

    /**
     * The connector details used to connect to the external DB system component.
     * 
     */
    @Import(name="connectors")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentConnectorArgs>> connectors;

    /**
     * @return The connector details used to connect to the external DB system component.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentConnectorArgs>>> connectors() {
        return Optional.ofNullable(this.connectors);
    }

    /**
     * The unique identifier of the parent Container Database (CDB).
     * 
     */
    @Import(name="containerDatabaseId")
    private @Nullable Output<String> containerDatabaseId;

    /**
     * @return The unique identifier of the parent Container Database (CDB).
     * 
     */
    public Optional<Output<String>> containerDatabaseId() {
        return Optional.ofNullable(this.containerDatabaseId);
    }

    /**
     * The number of CPU cores available on the DB node.
     * 
     */
    @Import(name="cpuCoreCount")
    private @Nullable Output<Double> cpuCoreCount;

    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    public Optional<Output<Double>> cpuCoreCount() {
        return Optional.ofNullable(this.cpuCoreCount);
    }

    /**
     * The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    @Import(name="crsBaseDirectory")
    private @Nullable Output<String> crsBaseDirectory;

    /**
     * @return The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    public Optional<Output<String>> crsBaseDirectory() {
        return Optional.ofNullable(this.crsBaseDirectory);
    }

    /**
     * The Oracle Database edition.
     * 
     */
    @Import(name="dbEdition")
    private @Nullable Output<String> dbEdition;

    /**
     * @return The Oracle Database edition.
     * 
     */
    public Optional<Output<String>> dbEdition() {
        return Optional.ofNullable(this.dbEdition);
    }

    /**
     * The Oracle Database ID.
     * 
     */
    @Import(name="dbId")
    private @Nullable Output<String> dbId;

    /**
     * @return The Oracle Database ID.
     * 
     */
    public Optional<Output<String>> dbId() {
        return Optional.ofNullable(this.dbId);
    }

    /**
     * The list of database instances.
     * 
     */
    @Import(name="dbInstances")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentDbInstanceArgs>> dbInstances;

    /**
     * @return The list of database instances.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentDbInstanceArgs>>> dbInstances() {
        return Optional.ofNullable(this.dbInstances);
    }

    /**
     * The name of the DB node.
     * 
     */
    @Import(name="dbNodeName")
    private @Nullable Output<String> dbNodeName;

    /**
     * @return The name of the DB node.
     * 
     */
    public Optional<Output<String>> dbNodeName() {
        return Optional.ofNullable(this.dbNodeName);
    }

    /**
     * The database packs licensed for the external Oracle Database.
     * 
     */
    @Import(name="dbPacks")
    private @Nullable Output<String> dbPacks;

    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    public Optional<Output<String>> dbPacks() {
        return Optional.ofNullable(this.dbPacks);
    }

    /**
     * The role of the Oracle Database in Oracle Data Guard configuration.
     * 
     */
    @Import(name="dbRole")
    private @Nullable Output<String> dbRole;

    /**
     * @return The role of the Oracle Database in Oracle Data Guard configuration.
     * 
     */
    public Optional<Output<String>> dbRole() {
        return Optional.ofNullable(this.dbRole);
    }

    /**
     * The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    @Import(name="dbType")
    private @Nullable Output<String> dbType;

    /**
     * @return The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    public Optional<Output<String>> dbType() {
        return Optional.ofNullable(this.dbType);
    }

    /**
     * The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    @Import(name="dbUniqueName")
    private @Nullable Output<String> dbUniqueName;

    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public Optional<Output<String>> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }

    /**
     * The Oracle Database version.
     * 
     */
    @Import(name="dbVersion")
    private @Nullable Output<String> dbVersion;

    /**
     * @return The Oracle Database version.
     * 
     */
    public Optional<Output<String>> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }

    /**
     * (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The list of protocol addresses the listener is configured to listen on.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs>> endpoints;

    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    @Import(name="gridHome")
    private @Nullable Output<String> gridHome;

    /**
     * @return The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    public Optional<Output<String>> gridHome() {
        return Optional.ofNullable(this.gridHome);
    }

    /**
     * The unique identifier of the PDB.
     * 
     */
    @Import(name="guid")
    private @Nullable Output<String> guid;

    /**
     * @return The unique identifier of the PDB.
     * 
     */
    public Optional<Output<String>> guid() {
        return Optional.ofNullable(this.guid);
    }

    /**
     * The location of the DB home.
     * 
     */
    @Import(name="homeDirectory")
    private @Nullable Output<String> homeDirectory;

    /**
     * @return The location of the DB home.
     * 
     */
    public Optional<Output<String>> homeDirectory() {
        return Optional.ofNullable(this.homeDirectory);
    }

    /**
     * The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * The name of the ASM instance.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The name of the ASM instance.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    @Import(name="isAutoEnablePluggableDatabase")
    private @Nullable Output<Boolean> isAutoEnablePluggableDatabase;

    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    public Optional<Output<Boolean>> isAutoEnablePluggableDatabase() {
        return Optional.ofNullable(this.isAutoEnablePluggableDatabase);
    }

    /**
     * Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    @Import(name="isCluster")
    private @Nullable Output<Boolean> isCluster;

    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    public Optional<Output<Boolean>> isCluster() {
        return Optional.ofNullable(this.isCluster);
    }

    /**
     * Indicates whether the cluster is an Oracle Flex Cluster or not.
     * 
     */
    @Import(name="isFlexCluster")
    private @Nullable Output<Boolean> isFlexCluster;

    /**
     * @return Indicates whether the cluster is an Oracle Flex Cluster or not.
     * 
     */
    public Optional<Output<Boolean>> isFlexCluster() {
        return Optional.ofNullable(this.isFlexCluster);
    }

    /**
     * Indicates whether Oracle Flex ASM is enabled or not.
     * 
     */
    @Import(name="isFlexEnabled")
    private @Nullable Output<Boolean> isFlexEnabled;

    /**
     * @return Indicates whether Oracle Flex ASM is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> isFlexEnabled() {
        return Optional.ofNullable(this.isFlexEnabled);
    }

    /**
     * Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
     * 
     */
    @Import(name="isSelectedForMonitoring")
    private @Nullable Output<Boolean> isSelectedForMonitoring;

    /**
     * @return Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
     * 
     */
    public Optional<Output<Boolean>> isSelectedForMonitoring() {
        return Optional.ofNullable(this.isSelectedForMonitoring);
    }

    /**
     * The listener alias.
     * 
     */
    @Import(name="listenerAlias")
    private @Nullable Output<String> listenerAlias;

    /**
     * @return The listener alias.
     * 
     */
    public Optional<Output<String>> listenerAlias() {
        return Optional.ofNullable(this.listenerAlias);
    }

    /**
     * The type of listener.
     * 
     */
    @Import(name="listenerType")
    private @Nullable Output<String> listenerType;

    /**
     * @return The type of listener.
     * 
     */
    public Optional<Output<String>> listenerType() {
        return Optional.ofNullable(this.listenerType);
    }

    /**
     * The destination directory of the listener log file.
     * 
     */
    @Import(name="logDirectory")
    private @Nullable Output<String> logDirectory;

    /**
     * @return The destination directory of the listener log file.
     * 
     */
    public Optional<Output<String>> logDirectory() {
        return Optional.ofNullable(this.logDirectory);
    }

    /**
     * The total memory in gigabytes (GB) on the DB node.
     * 
     */
    @Import(name="memorySizeInGbs")
    private @Nullable Output<Double> memorySizeInGbs;

    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    public Optional<Output<Double>> memorySizeInGbs() {
        return Optional.ofNullable(this.memorySizeInGbs);
    }

    /**
     * The list of network address configurations of the external cluster.
     * 
     */
    @Import(name="networkConfigurations")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationArgs>> networkConfigurations;

    /**
     * @return The list of network address configurations of the external cluster.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationArgs>>> networkConfigurations() {
        return Optional.ofNullable(this.networkConfigurations);
    }

    /**
     * The name of the node with the VIP.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return The name of the node with the VIP.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * The role of the cluster node.
     * 
     */
    @Import(name="nodeRole")
    private @Nullable Output<String> nodeRole;

    /**
     * @return The role of the cluster node.
     * 
     */
    public Optional<Output<String>> nodeRole() {
        return Optional.ofNullable(this.nodeRole);
    }

    /**
     * The location of the Oracle Cluster Registry (OCR) file.
     * 
     */
    @Import(name="ocrFileLocation")
    private @Nullable Output<String> ocrFileLocation;

    /**
     * @return The location of the Oracle Cluster Registry (OCR) file.
     * 
     */
    public Optional<Output<String>> ocrFileLocation() {
        return Optional.ofNullable(this.ocrFileLocation);
    }

    /**
     * The Oracle home location of the DB instance.
     * 
     */
    @Import(name="oracleHome")
    private @Nullable Output<String> oracleHome;

    /**
     * @return The Oracle home location of the DB instance.
     * 
     */
    public Optional<Output<String>> oracleHome() {
        return Optional.ofNullable(this.oracleHome);
    }

    /**
     * The list of Pluggable Databases.
     * 
     */
    @Import(name="pluggableDatabases")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseArgs>> pluggableDatabases;

    /**
     * @return The list of Pluggable Databases.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseArgs>>> pluggableDatabases() {
        return Optional.ofNullable(this.pluggableDatabases);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The list of Single Client Access Name (SCAN) configurations of the external cluster.
     * 
     */
    @Import(name="scanConfigurations")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationArgs>> scanConfigurations;

    /**
     * @return The list of Single Client Access Name (SCAN) configurations of the external cluster.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationArgs>>> scanConfigurations() {
        return Optional.ofNullable(this.scanConfigurations);
    }

    /**
     * The state of the discovered DB system component.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The state of the discovered DB system component.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The destination directory of the listener trace file.
     * 
     */
    @Import(name="traceDirectory")
    private @Nullable Output<String> traceDirectory;

    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    public Optional<Output<String>> traceDirectory() {
        return Optional.ofNullable(this.traceDirectory);
    }

    /**
     * The version of Oracle Clusterware running in the cluster.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of Oracle Clusterware running in the cluster.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * The list of Virtual IP (VIP) configurations of the external cluster.
     * 
     */
    @Import(name="vipConfigurations")
    private @Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationArgs>> vipConfigurations;

    /**
     * @return The list of Virtual IP (VIP) configurations of the external cluster.
     * 
     */
    public Optional<Output<List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationArgs>>> vipConfigurations() {
        return Optional.ofNullable(this.vipConfigurations);
    }

    private ExternalDbSystemDiscoveryDiscoveredComponentArgs() {}

    private ExternalDbSystemDiscoveryDiscoveredComponentArgs(ExternalDbSystemDiscoveryDiscoveredComponentArgs $) {
        this.adrHomeDirectory = $.adrHomeDirectory;
        this.asmInstances = $.asmInstances;
        this.associatedComponents = $.associatedComponents;
        this.canEnableAllCurrentPdbs = $.canEnableAllCurrentPdbs;
        this.clusterId = $.clusterId;
        this.clusterInstances = $.clusterInstances;
        this.compartmentId = $.compartmentId;
        this.componentId = $.componentId;
        this.componentName = $.componentName;
        this.componentType = $.componentType;
        this.connectors = $.connectors;
        this.containerDatabaseId = $.containerDatabaseId;
        this.cpuCoreCount = $.cpuCoreCount;
        this.crsBaseDirectory = $.crsBaseDirectory;
        this.dbEdition = $.dbEdition;
        this.dbId = $.dbId;
        this.dbInstances = $.dbInstances;
        this.dbNodeName = $.dbNodeName;
        this.dbPacks = $.dbPacks;
        this.dbRole = $.dbRole;
        this.dbType = $.dbType;
        this.dbUniqueName = $.dbUniqueName;
        this.dbVersion = $.dbVersion;
        this.displayName = $.displayName;
        this.endpoints = $.endpoints;
        this.gridHome = $.gridHome;
        this.guid = $.guid;
        this.homeDirectory = $.homeDirectory;
        this.hostName = $.hostName;
        this.instanceName = $.instanceName;
        this.isAutoEnablePluggableDatabase = $.isAutoEnablePluggableDatabase;
        this.isCluster = $.isCluster;
        this.isFlexCluster = $.isFlexCluster;
        this.isFlexEnabled = $.isFlexEnabled;
        this.isSelectedForMonitoring = $.isSelectedForMonitoring;
        this.listenerAlias = $.listenerAlias;
        this.listenerType = $.listenerType;
        this.logDirectory = $.logDirectory;
        this.memorySizeInGbs = $.memorySizeInGbs;
        this.networkConfigurations = $.networkConfigurations;
        this.nodeName = $.nodeName;
        this.nodeRole = $.nodeRole;
        this.ocrFileLocation = $.ocrFileLocation;
        this.oracleHome = $.oracleHome;
        this.pluggableDatabases = $.pluggableDatabases;
        this.resourceId = $.resourceId;
        this.scanConfigurations = $.scanConfigurations;
        this.status = $.status;
        this.traceDirectory = $.traceDirectory;
        this.version = $.version;
        this.vipConfigurations = $.vipConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalDbSystemDiscoveryDiscoveredComponentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalDbSystemDiscoveryDiscoveredComponentArgs $;

        public Builder() {
            $ = new ExternalDbSystemDiscoveryDiscoveredComponentArgs();
        }

        public Builder(ExternalDbSystemDiscoveryDiscoveredComponentArgs defaults) {
            $ = new ExternalDbSystemDiscoveryDiscoveredComponentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adrHomeDirectory The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
         * 
         * @return builder
         * 
         */
        public Builder adrHomeDirectory(@Nullable Output<String> adrHomeDirectory) {
            $.adrHomeDirectory = adrHomeDirectory;
            return this;
        }

        /**
         * @param adrHomeDirectory The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
         * 
         * @return builder
         * 
         */
        public Builder adrHomeDirectory(String adrHomeDirectory) {
            return adrHomeDirectory(Output.of(adrHomeDirectory));
        }

        public Builder asmInstances(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceArgs>> asmInstances) {
            $.asmInstances = asmInstances;
            return this;
        }

        public Builder asmInstances(List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceArgs> asmInstances) {
            return asmInstances(Output.of(asmInstances));
        }

        public Builder asmInstances(ExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceArgs... asmInstances) {
            return asmInstances(List.of(asmInstances));
        }

        /**
         * @param associatedComponents The list of associated components.
         * 
         * @return builder
         * 
         */
        public Builder associatedComponents(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentArgs>> associatedComponents) {
            $.associatedComponents = associatedComponents;
            return this;
        }

        /**
         * @param associatedComponents The list of associated components.
         * 
         * @return builder
         * 
         */
        public Builder associatedComponents(List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentArgs> associatedComponents) {
            return associatedComponents(Output.of(associatedComponents));
        }

        /**
         * @param associatedComponents The list of associated components.
         * 
         * @return builder
         * 
         */
        public Builder associatedComponents(ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentArgs... associatedComponents) {
            return associatedComponents(List.of(associatedComponents));
        }

        /**
         * @param canEnableAllCurrentPdbs Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder canEnableAllCurrentPdbs(@Nullable Output<Boolean> canEnableAllCurrentPdbs) {
            $.canEnableAllCurrentPdbs = canEnableAllCurrentPdbs;
            return this;
        }

        /**
         * @param canEnableAllCurrentPdbs Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder canEnableAllCurrentPdbs(Boolean canEnableAllCurrentPdbs) {
            return canEnableAllCurrentPdbs(Output.of(canEnableAllCurrentPdbs));
        }

        /**
         * @param clusterId The unique identifier of the Oracle cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The unique identifier of the Oracle cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        public Builder clusterInstances(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceArgs>> clusterInstances) {
            $.clusterInstances = clusterInstances;
            return this;
        }

        public Builder clusterInstances(List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceArgs> clusterInstances) {
            return clusterInstances(Output.of(clusterInstances));
        }

        public Builder clusterInstances(ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceArgs... clusterInstances) {
            return clusterInstances(List.of(clusterInstances));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param componentId The identifier of the discovered DB system component.
         * 
         * @return builder
         * 
         */
        public Builder componentId(@Nullable Output<String> componentId) {
            $.componentId = componentId;
            return this;
        }

        /**
         * @param componentId The identifier of the discovered DB system component.
         * 
         * @return builder
         * 
         */
        public Builder componentId(String componentId) {
            return componentId(Output.of(componentId));
        }

        /**
         * @param componentName The name of the discovered DB system component.
         * 
         * @return builder
         * 
         */
        public Builder componentName(@Nullable Output<String> componentName) {
            $.componentName = componentName;
            return this;
        }

        /**
         * @param componentName The name of the discovered DB system component.
         * 
         * @return builder
         * 
         */
        public Builder componentName(String componentName) {
            return componentName(Output.of(componentName));
        }

        /**
         * @param componentType The component type.
         * 
         * @return builder
         * 
         */
        public Builder componentType(@Nullable Output<String> componentType) {
            $.componentType = componentType;
            return this;
        }

        /**
         * @param componentType The component type.
         * 
         * @return builder
         * 
         */
        public Builder componentType(String componentType) {
            return componentType(Output.of(componentType));
        }

        /**
         * @param connectors The connector details used to connect to the external DB system component.
         * 
         * @return builder
         * 
         */
        public Builder connectors(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentConnectorArgs>> connectors) {
            $.connectors = connectors;
            return this;
        }

        /**
         * @param connectors The connector details used to connect to the external DB system component.
         * 
         * @return builder
         * 
         */
        public Builder connectors(List<ExternalDbSystemDiscoveryDiscoveredComponentConnectorArgs> connectors) {
            return connectors(Output.of(connectors));
        }

        /**
         * @param connectors The connector details used to connect to the external DB system component.
         * 
         * @return builder
         * 
         */
        public Builder connectors(ExternalDbSystemDiscoveryDiscoveredComponentConnectorArgs... connectors) {
            return connectors(List.of(connectors));
        }

        /**
         * @param containerDatabaseId The unique identifier of the parent Container Database (CDB).
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(@Nullable Output<String> containerDatabaseId) {
            $.containerDatabaseId = containerDatabaseId;
            return this;
        }

        /**
         * @param containerDatabaseId The unique identifier of the parent Container Database (CDB).
         * 
         * @return builder
         * 
         */
        public Builder containerDatabaseId(String containerDatabaseId) {
            return containerDatabaseId(Output.of(containerDatabaseId));
        }

        /**
         * @param cpuCoreCount The number of CPU cores available on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(@Nullable Output<Double> cpuCoreCount) {
            $.cpuCoreCount = cpuCoreCount;
            return this;
        }

        /**
         * @param cpuCoreCount The number of CPU cores available on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(Double cpuCoreCount) {
            return cpuCoreCount(Output.of(cpuCoreCount));
        }

        /**
         * @param crsBaseDirectory The Oracle base location of Cluster Ready Services (CRS).
         * 
         * @return builder
         * 
         */
        public Builder crsBaseDirectory(@Nullable Output<String> crsBaseDirectory) {
            $.crsBaseDirectory = crsBaseDirectory;
            return this;
        }

        /**
         * @param crsBaseDirectory The Oracle base location of Cluster Ready Services (CRS).
         * 
         * @return builder
         * 
         */
        public Builder crsBaseDirectory(String crsBaseDirectory) {
            return crsBaseDirectory(Output.of(crsBaseDirectory));
        }

        /**
         * @param dbEdition The Oracle Database edition.
         * 
         * @return builder
         * 
         */
        public Builder dbEdition(@Nullable Output<String> dbEdition) {
            $.dbEdition = dbEdition;
            return this;
        }

        /**
         * @param dbEdition The Oracle Database edition.
         * 
         * @return builder
         * 
         */
        public Builder dbEdition(String dbEdition) {
            return dbEdition(Output.of(dbEdition));
        }

        /**
         * @param dbId The Oracle Database ID.
         * 
         * @return builder
         * 
         */
        public Builder dbId(@Nullable Output<String> dbId) {
            $.dbId = dbId;
            return this;
        }

        /**
         * @param dbId The Oracle Database ID.
         * 
         * @return builder
         * 
         */
        public Builder dbId(String dbId) {
            return dbId(Output.of(dbId));
        }

        /**
         * @param dbInstances The list of database instances.
         * 
         * @return builder
         * 
         */
        public Builder dbInstances(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentDbInstanceArgs>> dbInstances) {
            $.dbInstances = dbInstances;
            return this;
        }

        /**
         * @param dbInstances The list of database instances.
         * 
         * @return builder
         * 
         */
        public Builder dbInstances(List<ExternalDbSystemDiscoveryDiscoveredComponentDbInstanceArgs> dbInstances) {
            return dbInstances(Output.of(dbInstances));
        }

        /**
         * @param dbInstances The list of database instances.
         * 
         * @return builder
         * 
         */
        public Builder dbInstances(ExternalDbSystemDiscoveryDiscoveredComponentDbInstanceArgs... dbInstances) {
            return dbInstances(List.of(dbInstances));
        }

        /**
         * @param dbNodeName The name of the DB node.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeName(@Nullable Output<String> dbNodeName) {
            $.dbNodeName = dbNodeName;
            return this;
        }

        /**
         * @param dbNodeName The name of the DB node.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeName(String dbNodeName) {
            return dbNodeName(Output.of(dbNodeName));
        }

        /**
         * @param dbPacks The database packs licensed for the external Oracle Database.
         * 
         * @return builder
         * 
         */
        public Builder dbPacks(@Nullable Output<String> dbPacks) {
            $.dbPacks = dbPacks;
            return this;
        }

        /**
         * @param dbPacks The database packs licensed for the external Oracle Database.
         * 
         * @return builder
         * 
         */
        public Builder dbPacks(String dbPacks) {
            return dbPacks(Output.of(dbPacks));
        }

        /**
         * @param dbRole The role of the Oracle Database in Oracle Data Guard configuration.
         * 
         * @return builder
         * 
         */
        public Builder dbRole(@Nullable Output<String> dbRole) {
            $.dbRole = dbRole;
            return this;
        }

        /**
         * @param dbRole The role of the Oracle Database in Oracle Data Guard configuration.
         * 
         * @return builder
         * 
         */
        public Builder dbRole(String dbRole) {
            return dbRole(Output.of(dbRole));
        }

        /**
         * @param dbType The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
         * 
         * @return builder
         * 
         */
        public Builder dbType(@Nullable Output<String> dbType) {
            $.dbType = dbType;
            return this;
        }

        /**
         * @param dbType The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
         * 
         * @return builder
         * 
         */
        public Builder dbType(String dbType) {
            return dbType(Output.of(dbType));
        }

        /**
         * @param dbUniqueName The `DB_UNIQUE_NAME` of the external database.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(@Nullable Output<String> dbUniqueName) {
            $.dbUniqueName = dbUniqueName;
            return this;
        }

        /**
         * @param dbUniqueName The `DB_UNIQUE_NAME` of the external database.
         * 
         * @return builder
         * 
         */
        public Builder dbUniqueName(String dbUniqueName) {
            return dbUniqueName(Output.of(dbUniqueName));
        }

        /**
         * @param dbVersion The Oracle Database version.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(@Nullable Output<String> dbVersion) {
            $.dbVersion = dbVersion;
            return this;
        }

        /**
         * @param dbVersion The Oracle Database version.
         * 
         * @return builder
         * 
         */
        public Builder dbVersion(String dbVersion) {
            return dbVersion(Output.of(dbVersion));
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endpoints The list of protocol addresses the listener is configured to listen on.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints The list of protocol addresses the listener is configured to listen on.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(List<ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param endpoints The list of protocol addresses the listener is configured to listen on.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param gridHome The directory in which Oracle Grid Infrastructure is installed.
         * 
         * @return builder
         * 
         */
        public Builder gridHome(@Nullable Output<String> gridHome) {
            $.gridHome = gridHome;
            return this;
        }

        /**
         * @param gridHome The directory in which Oracle Grid Infrastructure is installed.
         * 
         * @return builder
         * 
         */
        public Builder gridHome(String gridHome) {
            return gridHome(Output.of(gridHome));
        }

        /**
         * @param guid The unique identifier of the PDB.
         * 
         * @return builder
         * 
         */
        public Builder guid(@Nullable Output<String> guid) {
            $.guid = guid;
            return this;
        }

        /**
         * @param guid The unique identifier of the PDB.
         * 
         * @return builder
         * 
         */
        public Builder guid(String guid) {
            return guid(Output.of(guid));
        }

        /**
         * @param homeDirectory The location of the DB home.
         * 
         * @return builder
         * 
         */
        public Builder homeDirectory(@Nullable Output<String> homeDirectory) {
            $.homeDirectory = homeDirectory;
            return this;
        }

        /**
         * @param homeDirectory The location of the DB home.
         * 
         * @return builder
         * 
         */
        public Builder homeDirectory(String homeDirectory) {
            return homeDirectory(Output.of(homeDirectory));
        }

        /**
         * @param hostName The host name of the database or the SCAN name in case of a RAC database.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The host name of the database or the SCAN name in case of a RAC database.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param instanceName The name of the ASM instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the ASM instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param isAutoEnablePluggableDatabase Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder isAutoEnablePluggableDatabase(@Nullable Output<Boolean> isAutoEnablePluggableDatabase) {
            $.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            return this;
        }

        /**
         * @param isAutoEnablePluggableDatabase Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder isAutoEnablePluggableDatabase(Boolean isAutoEnablePluggableDatabase) {
            return isAutoEnablePluggableDatabase(Output.of(isAutoEnablePluggableDatabase));
        }

        /**
         * @param isCluster Indicates whether the Oracle Database is part of a cluster.
         * 
         * @return builder
         * 
         */
        public Builder isCluster(@Nullable Output<Boolean> isCluster) {
            $.isCluster = isCluster;
            return this;
        }

        /**
         * @param isCluster Indicates whether the Oracle Database is part of a cluster.
         * 
         * @return builder
         * 
         */
        public Builder isCluster(Boolean isCluster) {
            return isCluster(Output.of(isCluster));
        }

        /**
         * @param isFlexCluster Indicates whether the cluster is an Oracle Flex Cluster or not.
         * 
         * @return builder
         * 
         */
        public Builder isFlexCluster(@Nullable Output<Boolean> isFlexCluster) {
            $.isFlexCluster = isFlexCluster;
            return this;
        }

        /**
         * @param isFlexCluster Indicates whether the cluster is an Oracle Flex Cluster or not.
         * 
         * @return builder
         * 
         */
        public Builder isFlexCluster(Boolean isFlexCluster) {
            return isFlexCluster(Output.of(isFlexCluster));
        }

        /**
         * @param isFlexEnabled Indicates whether Oracle Flex ASM is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isFlexEnabled(@Nullable Output<Boolean> isFlexEnabled) {
            $.isFlexEnabled = isFlexEnabled;
            return this;
        }

        /**
         * @param isFlexEnabled Indicates whether Oracle Flex ASM is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder isFlexEnabled(Boolean isFlexEnabled) {
            return isFlexEnabled(Output.of(isFlexEnabled));
        }

        /**
         * @param isSelectedForMonitoring Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
         * 
         * @return builder
         * 
         */
        public Builder isSelectedForMonitoring(@Nullable Output<Boolean> isSelectedForMonitoring) {
            $.isSelectedForMonitoring = isSelectedForMonitoring;
            return this;
        }

        /**
         * @param isSelectedForMonitoring Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
         * 
         * @return builder
         * 
         */
        public Builder isSelectedForMonitoring(Boolean isSelectedForMonitoring) {
            return isSelectedForMonitoring(Output.of(isSelectedForMonitoring));
        }

        /**
         * @param listenerAlias The listener alias.
         * 
         * @return builder
         * 
         */
        public Builder listenerAlias(@Nullable Output<String> listenerAlias) {
            $.listenerAlias = listenerAlias;
            return this;
        }

        /**
         * @param listenerAlias The listener alias.
         * 
         * @return builder
         * 
         */
        public Builder listenerAlias(String listenerAlias) {
            return listenerAlias(Output.of(listenerAlias));
        }

        /**
         * @param listenerType The type of listener.
         * 
         * @return builder
         * 
         */
        public Builder listenerType(@Nullable Output<String> listenerType) {
            $.listenerType = listenerType;
            return this;
        }

        /**
         * @param listenerType The type of listener.
         * 
         * @return builder
         * 
         */
        public Builder listenerType(String listenerType) {
            return listenerType(Output.of(listenerType));
        }

        /**
         * @param logDirectory The destination directory of the listener log file.
         * 
         * @return builder
         * 
         */
        public Builder logDirectory(@Nullable Output<String> logDirectory) {
            $.logDirectory = logDirectory;
            return this;
        }

        /**
         * @param logDirectory The destination directory of the listener log file.
         * 
         * @return builder
         * 
         */
        public Builder logDirectory(String logDirectory) {
            return logDirectory(Output.of(logDirectory));
        }

        /**
         * @param memorySizeInGbs The total memory in gigabytes (GB) on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeInGbs(@Nullable Output<Double> memorySizeInGbs) {
            $.memorySizeInGbs = memorySizeInGbs;
            return this;
        }

        /**
         * @param memorySizeInGbs The total memory in gigabytes (GB) on the DB node.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeInGbs(Double memorySizeInGbs) {
            return memorySizeInGbs(Output.of(memorySizeInGbs));
        }

        /**
         * @param networkConfigurations The list of network address configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder networkConfigurations(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationArgs>> networkConfigurations) {
            $.networkConfigurations = networkConfigurations;
            return this;
        }

        /**
         * @param networkConfigurations The list of network address configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder networkConfigurations(List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationArgs> networkConfigurations) {
            return networkConfigurations(Output.of(networkConfigurations));
        }

        /**
         * @param networkConfigurations The list of network address configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder networkConfigurations(ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationArgs... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }

        /**
         * @param nodeName The name of the node with the VIP.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The name of the node with the VIP.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param nodeRole The role of the cluster node.
         * 
         * @return builder
         * 
         */
        public Builder nodeRole(@Nullable Output<String> nodeRole) {
            $.nodeRole = nodeRole;
            return this;
        }

        /**
         * @param nodeRole The role of the cluster node.
         * 
         * @return builder
         * 
         */
        public Builder nodeRole(String nodeRole) {
            return nodeRole(Output.of(nodeRole));
        }

        /**
         * @param ocrFileLocation The location of the Oracle Cluster Registry (OCR) file.
         * 
         * @return builder
         * 
         */
        public Builder ocrFileLocation(@Nullable Output<String> ocrFileLocation) {
            $.ocrFileLocation = ocrFileLocation;
            return this;
        }

        /**
         * @param ocrFileLocation The location of the Oracle Cluster Registry (OCR) file.
         * 
         * @return builder
         * 
         */
        public Builder ocrFileLocation(String ocrFileLocation) {
            return ocrFileLocation(Output.of(ocrFileLocation));
        }

        /**
         * @param oracleHome The Oracle home location of the DB instance.
         * 
         * @return builder
         * 
         */
        public Builder oracleHome(@Nullable Output<String> oracleHome) {
            $.oracleHome = oracleHome;
            return this;
        }

        /**
         * @param oracleHome The Oracle home location of the DB instance.
         * 
         * @return builder
         * 
         */
        public Builder oracleHome(String oracleHome) {
            return oracleHome(Output.of(oracleHome));
        }

        /**
         * @param pluggableDatabases The list of Pluggable Databases.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabases(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseArgs>> pluggableDatabases) {
            $.pluggableDatabases = pluggableDatabases;
            return this;
        }

        /**
         * @param pluggableDatabases The list of Pluggable Databases.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabases(List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseArgs> pluggableDatabases) {
            return pluggableDatabases(Output.of(pluggableDatabases));
        }

        /**
         * @param pluggableDatabases The list of Pluggable Databases.
         * 
         * @return builder
         * 
         */
        public Builder pluggableDatabases(ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseArgs... pluggableDatabases) {
            return pluggableDatabases(List.of(pluggableDatabases));
        }

        /**
         * @param resourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param scanConfigurations The list of Single Client Access Name (SCAN) configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder scanConfigurations(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationArgs>> scanConfigurations) {
            $.scanConfigurations = scanConfigurations;
            return this;
        }

        /**
         * @param scanConfigurations The list of Single Client Access Name (SCAN) configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder scanConfigurations(List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationArgs> scanConfigurations) {
            return scanConfigurations(Output.of(scanConfigurations));
        }

        /**
         * @param scanConfigurations The list of Single Client Access Name (SCAN) configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder scanConfigurations(ExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationArgs... scanConfigurations) {
            return scanConfigurations(List.of(scanConfigurations));
        }

        /**
         * @param status The state of the discovered DB system component.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The state of the discovered DB system component.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param traceDirectory The destination directory of the listener trace file.
         * 
         * @return builder
         * 
         */
        public Builder traceDirectory(@Nullable Output<String> traceDirectory) {
            $.traceDirectory = traceDirectory;
            return this;
        }

        /**
         * @param traceDirectory The destination directory of the listener trace file.
         * 
         * @return builder
         * 
         */
        public Builder traceDirectory(String traceDirectory) {
            return traceDirectory(Output.of(traceDirectory));
        }

        /**
         * @param version The version of Oracle Clusterware running in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of Oracle Clusterware running in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param vipConfigurations The list of Virtual IP (VIP) configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder vipConfigurations(@Nullable Output<List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationArgs>> vipConfigurations) {
            $.vipConfigurations = vipConfigurations;
            return this;
        }

        /**
         * @param vipConfigurations The list of Virtual IP (VIP) configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder vipConfigurations(List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationArgs> vipConfigurations) {
            return vipConfigurations(Output.of(vipConfigurations));
        }

        /**
         * @param vipConfigurations The list of Virtual IP (VIP) configurations of the external cluster.
         * 
         * @return builder
         * 
         */
        public Builder vipConfigurations(ExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationArgs... vipConfigurations) {
            return vipConfigurations(List.of(vipConfigurations));
        }

        public ExternalDbSystemDiscoveryDiscoveredComponentArgs build() {
            return $;
        }
    }

}
