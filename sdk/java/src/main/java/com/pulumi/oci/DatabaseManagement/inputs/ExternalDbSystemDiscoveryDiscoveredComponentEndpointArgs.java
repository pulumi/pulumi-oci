// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs Empty = new ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs();

    /**
     * The host name or IP address.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The host name or IP address.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The unique name of the service.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The unique name of the service.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The port used to connect to the ASM instance.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port used to connect to the ASM instance.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocol used to connect to the ASM instance.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol used to connect to the ASM instance.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The list of services registered with the listener.
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<String>> services;

    /**
     * @return The list of services registered with the listener.
     * 
     */
    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    private ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs() {}

    private ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs(ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs $) {
        this.host = $.host;
        this.key = $.key;
        this.port = $.port;
        this.protocol = $.protocol;
        this.services = $.services;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs $;

        public Builder() {
            $ = new ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs();
        }

        public Builder(ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs defaults) {
            $ = new ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The host name or IP address.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The host name or IP address.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param key The unique name of the service.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The unique name of the service.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param port The port used to connect to the ASM instance.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port used to connect to the ASM instance.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The protocol used to connect to the ASM instance.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol used to connect to the ASM instance.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param services The list of services registered with the listener.
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services The list of services registered with the listener.
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services The list of services registered with the listener.
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        public ExternalDbSystemDiscoveryDiscoveredComponentEndpointArgs build() {
            return $;
        }
    }

}
