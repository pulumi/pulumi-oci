// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemDatabaseManagementConfigArgs;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalDbSystemStackMonitoringConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalDbSystemState extends com.pulumi.resources.ResourceArgs {

    public static final ExternalDbSystemState Empty = new ExternalDbSystemState();

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The details required to enable Database Management for an external DB system.
     * 
     */
    @Import(name="databaseManagementConfig")
    private @Nullable Output<ExternalDbSystemDatabaseManagementConfigArgs> databaseManagementConfig;

    /**
     * @return The details required to enable Database Management for an external DB system.
     * 
     */
    public Optional<Output<ExternalDbSystemDatabaseManagementConfigArgs>> databaseManagementConfig() {
        return Optional.ofNullable(this.databaseManagementConfig);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
     * 
     */
    @Import(name="dbSystemDiscoveryId")
    private @Nullable Output<String> dbSystemDiscoveryId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
     * 
     */
    public Optional<Output<String>> dbSystemDiscoveryId() {
        return Optional.ofNullable(this.dbSystemDiscoveryId);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
     * 
     */
    @Import(name="discoveryAgentId")
    private @Nullable Output<String> discoveryAgentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
     * 
     */
    public Optional<Output<String>> discoveryAgentId() {
        return Optional.ofNullable(this.discoveryAgentId);
    }

    /**
     * (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
     * 
     */
    @Import(name="homeDirectory")
    private @Nullable Output<String> homeDirectory;

    /**
     * @return The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
     * 
     */
    public Optional<Output<String>> homeDirectory() {
        return Optional.ofNullable(this.homeDirectory);
    }

    /**
     * Indicates whether the DB system is a cluster DB system or not.
     * 
     */
    @Import(name="isCluster")
    private @Nullable Output<Boolean> isCluster;

    /**
     * @return Indicates whether the DB system is a cluster DB system or not.
     * 
     */
    public Optional<Output<Boolean>> isCluster() {
        return Optional.ofNullable(this.isCluster);
    }

    /**
     * Additional information about the current lifecycle state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * The details of the associated service that will be enabled or disabled for an external DB System.
     * 
     */
    @Import(name="stackMonitoringConfig")
    private @Nullable Output<ExternalDbSystemStackMonitoringConfigArgs> stackMonitoringConfig;

    /**
     * @return The details of the associated service that will be enabled or disabled for an external DB System.
     * 
     */
    public Optional<Output<ExternalDbSystemStackMonitoringConfigArgs>> stackMonitoringConfig() {
        return Optional.ofNullable(this.stackMonitoringConfig);
    }

    /**
     * The current lifecycle state of the external DB system resource.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current lifecycle state of the external DB system resource.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The date and time the external DB system was created.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The date and time the external DB system was created.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The date and time the external DB system was last updated.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The date and time the external DB system was last updated.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private ExternalDbSystemState() {}

    private ExternalDbSystemState(ExternalDbSystemState $) {
        this.compartmentId = $.compartmentId;
        this.databaseManagementConfig = $.databaseManagementConfig;
        this.dbSystemDiscoveryId = $.dbSystemDiscoveryId;
        this.discoveryAgentId = $.discoveryAgentId;
        this.displayName = $.displayName;
        this.homeDirectory = $.homeDirectory;
        this.isCluster = $.isCluster;
        this.lifecycleDetails = $.lifecycleDetails;
        this.stackMonitoringConfig = $.stackMonitoringConfig;
        this.state = $.state;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalDbSystemState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalDbSystemState $;

        public Builder() {
            $ = new ExternalDbSystemState();
        }

        public Builder(ExternalDbSystemState defaults) {
            $ = new ExternalDbSystemState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param databaseManagementConfig The details required to enable Database Management for an external DB system.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfig(@Nullable Output<ExternalDbSystemDatabaseManagementConfigArgs> databaseManagementConfig) {
            $.databaseManagementConfig = databaseManagementConfig;
            return this;
        }

        /**
         * @param databaseManagementConfig The details required to enable Database Management for an external DB system.
         * 
         * @return builder
         * 
         */
        public Builder databaseManagementConfig(ExternalDbSystemDatabaseManagementConfigArgs databaseManagementConfig) {
            return databaseManagementConfig(Output.of(databaseManagementConfig));
        }

        /**
         * @param dbSystemDiscoveryId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemDiscoveryId(@Nullable Output<String> dbSystemDiscoveryId) {
            $.dbSystemDiscoveryId = dbSystemDiscoveryId;
            return this;
        }

        /**
         * @param dbSystemDiscoveryId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemDiscoveryId(String dbSystemDiscoveryId) {
            return dbSystemDiscoveryId(Output.of(dbSystemDiscoveryId));
        }

        /**
         * @param discoveryAgentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder discoveryAgentId(@Nullable Output<String> discoveryAgentId) {
            $.discoveryAgentId = discoveryAgentId;
            return this;
        }

        /**
         * @param discoveryAgentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
         * 
         * @return builder
         * 
         */
        public Builder discoveryAgentId(String discoveryAgentId) {
            return discoveryAgentId(Output.of(discoveryAgentId));
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param homeDirectory The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
         * 
         * @return builder
         * 
         */
        public Builder homeDirectory(@Nullable Output<String> homeDirectory) {
            $.homeDirectory = homeDirectory;
            return this;
        }

        /**
         * @param homeDirectory The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
         * 
         * @return builder
         * 
         */
        public Builder homeDirectory(String homeDirectory) {
            return homeDirectory(Output.of(homeDirectory));
        }

        /**
         * @param isCluster Indicates whether the DB system is a cluster DB system or not.
         * 
         * @return builder
         * 
         */
        public Builder isCluster(@Nullable Output<Boolean> isCluster) {
            $.isCluster = isCluster;
            return this;
        }

        /**
         * @param isCluster Indicates whether the DB system is a cluster DB system or not.
         * 
         * @return builder
         * 
         */
        public Builder isCluster(Boolean isCluster) {
            return isCluster(Output.of(isCluster));
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails Additional information about the current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param stackMonitoringConfig The details of the associated service that will be enabled or disabled for an external DB System.
         * 
         * @return builder
         * 
         */
        public Builder stackMonitoringConfig(@Nullable Output<ExternalDbSystemStackMonitoringConfigArgs> stackMonitoringConfig) {
            $.stackMonitoringConfig = stackMonitoringConfig;
            return this;
        }

        /**
         * @param stackMonitoringConfig The details of the associated service that will be enabled or disabled for an external DB System.
         * 
         * @return builder
         * 
         */
        public Builder stackMonitoringConfig(ExternalDbSystemStackMonitoringConfigArgs stackMonitoringConfig) {
            return stackMonitoringConfig(Output.of(stackMonitoringConfig));
        }

        /**
         * @param state The current lifecycle state of the external DB system resource.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current lifecycle state of the external DB system resource.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreated The date and time the external DB system was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The date and time the external DB system was created.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The date and time the external DB system was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The date and time the external DB system was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public ExternalDbSystemState build() {
            return $;
        }
    }

}
