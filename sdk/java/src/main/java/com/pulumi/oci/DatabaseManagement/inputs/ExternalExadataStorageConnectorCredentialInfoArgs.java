// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalExadataStorageConnectorCredentialInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalExadataStorageConnectorCredentialInfoArgs Empty = new ExternalExadataStorageConnectorCredentialInfoArgs();

    /**
     * (Updatable) The password of the user.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return (Updatable) The password of the user.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * (Updatable) The full path of the SSL truststore location in the agent.
     * 
     */
    @Import(name="sslTrustStoreLocation")
    private @Nullable Output<String> sslTrustStoreLocation;

    /**
     * @return (Updatable) The full path of the SSL truststore location in the agent.
     * 
     */
    public Optional<Output<String>> sslTrustStoreLocation() {
        return Optional.ofNullable(this.sslTrustStoreLocation);
    }

    /**
     * (Updatable) The password of the SSL truststore location in the agent.
     * 
     */
    @Import(name="sslTrustStorePassword")
    private @Nullable Output<String> sslTrustStorePassword;

    /**
     * @return (Updatable) The password of the SSL truststore location in the agent.
     * 
     */
    public Optional<Output<String>> sslTrustStorePassword() {
        return Optional.ofNullable(this.sslTrustStorePassword);
    }

    /**
     * (Updatable) The SSL truststore type.
     * 
     */
    @Import(name="sslTrustStoreType")
    private @Nullable Output<String> sslTrustStoreType;

    /**
     * @return (Updatable) The SSL truststore type.
     * 
     */
    public Optional<Output<String>> sslTrustStoreType() {
        return Optional.ofNullable(this.sslTrustStoreType);
    }

    /**
     * (Updatable) The name of the user.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return (Updatable) The name of the user.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ExternalExadataStorageConnectorCredentialInfoArgs() {}

    private ExternalExadataStorageConnectorCredentialInfoArgs(ExternalExadataStorageConnectorCredentialInfoArgs $) {
        this.password = $.password;
        this.sslTrustStoreLocation = $.sslTrustStoreLocation;
        this.sslTrustStorePassword = $.sslTrustStorePassword;
        this.sslTrustStoreType = $.sslTrustStoreType;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalExadataStorageConnectorCredentialInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalExadataStorageConnectorCredentialInfoArgs $;

        public Builder() {
            $ = new ExternalExadataStorageConnectorCredentialInfoArgs();
        }

        public Builder(ExternalExadataStorageConnectorCredentialInfoArgs defaults) {
            $ = new ExternalExadataStorageConnectorCredentialInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password (Updatable) The password of the user.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password (Updatable) The password of the user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param sslTrustStoreLocation (Updatable) The full path of the SSL truststore location in the agent.
         * 
         * @return builder
         * 
         */
        public Builder sslTrustStoreLocation(@Nullable Output<String> sslTrustStoreLocation) {
            $.sslTrustStoreLocation = sslTrustStoreLocation;
            return this;
        }

        /**
         * @param sslTrustStoreLocation (Updatable) The full path of the SSL truststore location in the agent.
         * 
         * @return builder
         * 
         */
        public Builder sslTrustStoreLocation(String sslTrustStoreLocation) {
            return sslTrustStoreLocation(Output.of(sslTrustStoreLocation));
        }

        /**
         * @param sslTrustStorePassword (Updatable) The password of the SSL truststore location in the agent.
         * 
         * @return builder
         * 
         */
        public Builder sslTrustStorePassword(@Nullable Output<String> sslTrustStorePassword) {
            $.sslTrustStorePassword = sslTrustStorePassword;
            return this;
        }

        /**
         * @param sslTrustStorePassword (Updatable) The password of the SSL truststore location in the agent.
         * 
         * @return builder
         * 
         */
        public Builder sslTrustStorePassword(String sslTrustStorePassword) {
            return sslTrustStorePassword(Output.of(sslTrustStorePassword));
        }

        /**
         * @param sslTrustStoreType (Updatable) The SSL truststore type.
         * 
         * @return builder
         * 
         */
        public Builder sslTrustStoreType(@Nullable Output<String> sslTrustStoreType) {
            $.sslTrustStoreType = sslTrustStoreType;
            return this;
        }

        /**
         * @param sslTrustStoreType (Updatable) The SSL truststore type.
         * 
         * @return builder
         * 
         */
        public Builder sslTrustStoreType(String sslTrustStoreType) {
            return sslTrustStoreType(Output.of(sslTrustStoreType));
        }

        /**
         * @param username (Updatable) The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username (Updatable) The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ExternalExadataStorageConnectorCredentialInfoArgs build() {
            if ($.password == null) {
                throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorCredentialInfoArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorCredentialInfoArgs", "username");
            }
            return $;
        }
    }

}
