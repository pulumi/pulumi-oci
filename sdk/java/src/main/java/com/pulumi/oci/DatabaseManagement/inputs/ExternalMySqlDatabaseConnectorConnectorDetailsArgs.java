// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ExternalMySqlDatabaseConnectorConnectorDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalMySqlDatabaseConnectorConnectorDetailsArgs Empty = new ExternalMySqlDatabaseConnectorConnectorDetailsArgs();

    /**
     * (Updatable) Type of the credential.
     * 
     */
    @Import(name="credentialType", required=true)
    private Output<String> credentialType;

    /**
     * @return (Updatable) Type of the credential.
     * 
     */
    public Output<String> credentialType() {
        return this.credentialType;
    }

    /**
     * (Updatable) External MySQL Database Connector Name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) External MySQL Database Connector Name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) OCID of MySQL Database resource.
     * 
     */
    @Import(name="externalDatabaseId", required=true)
    private Output<String> externalDatabaseId;

    /**
     * @return (Updatable) OCID of MySQL Database resource.
     * 
     */
    public Output<String> externalDatabaseId() {
        return this.externalDatabaseId;
    }

    /**
     * (Updatable) Host name for Connector.
     * 
     */
    @Import(name="hostName", required=true)
    private Output<String> hostName;

    /**
     * @return (Updatable) Host name for Connector.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }

    /**
     * (Updatable) Agent Id of the MACS agent.
     * 
     */
    @Import(name="macsAgentId", required=true)
    private Output<String> macsAgentId;

    /**
     * @return (Updatable) Agent Id of the MACS agent.
     * 
     */
    public Output<String> macsAgentId() {
        return this.macsAgentId;
    }

    /**
     * (Updatable) Protocol to be used to connect to External MySQL Database; TCP, TCP with SSL or Socket.
     * 
     */
    @Import(name="networkProtocol", required=true)
    private Output<String> networkProtocol;

    /**
     * @return (Updatable) Protocol to be used to connect to External MySQL Database; TCP, TCP with SSL or Socket.
     * 
     */
    public Output<String> networkProtocol() {
        return this.networkProtocol;
    }

    /**
     * (Updatable) Port number to connect to External MySQL Database.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return (Updatable) Port number to connect to External MySQL Database.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * (Updatable) If using existing SSL secret to connect, OCID for the secret resource.
     * 
     */
    @Import(name="sslSecretId", required=true)
    private Output<String> sslSecretId;

    /**
     * @return (Updatable) If using existing SSL secret to connect, OCID for the secret resource.
     * 
     */
    public Output<String> sslSecretId() {
        return this.sslSecretId;
    }

    private ExternalMySqlDatabaseConnectorConnectorDetailsArgs() {}

    private ExternalMySqlDatabaseConnectorConnectorDetailsArgs(ExternalMySqlDatabaseConnectorConnectorDetailsArgs $) {
        this.credentialType = $.credentialType;
        this.displayName = $.displayName;
        this.externalDatabaseId = $.externalDatabaseId;
        this.hostName = $.hostName;
        this.macsAgentId = $.macsAgentId;
        this.networkProtocol = $.networkProtocol;
        this.port = $.port;
        this.sslSecretId = $.sslSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalMySqlDatabaseConnectorConnectorDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalMySqlDatabaseConnectorConnectorDetailsArgs $;

        public Builder() {
            $ = new ExternalMySqlDatabaseConnectorConnectorDetailsArgs();
        }

        public Builder(ExternalMySqlDatabaseConnectorConnectorDetailsArgs defaults) {
            $ = new ExternalMySqlDatabaseConnectorConnectorDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialType (Updatable) Type of the credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType (Updatable) Type of the credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param displayName (Updatable) External MySQL Database Connector Name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) External MySQL Database Connector Name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param externalDatabaseId (Updatable) OCID of MySQL Database resource.
         * 
         * @return builder
         * 
         */
        public Builder externalDatabaseId(Output<String> externalDatabaseId) {
            $.externalDatabaseId = externalDatabaseId;
            return this;
        }

        /**
         * @param externalDatabaseId (Updatable) OCID of MySQL Database resource.
         * 
         * @return builder
         * 
         */
        public Builder externalDatabaseId(String externalDatabaseId) {
            return externalDatabaseId(Output.of(externalDatabaseId));
        }

        /**
         * @param hostName (Updatable) Host name for Connector.
         * 
         * @return builder
         * 
         */
        public Builder hostName(Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName (Updatable) Host name for Connector.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param macsAgentId (Updatable) Agent Id of the MACS agent.
         * 
         * @return builder
         * 
         */
        public Builder macsAgentId(Output<String> macsAgentId) {
            $.macsAgentId = macsAgentId;
            return this;
        }

        /**
         * @param macsAgentId (Updatable) Agent Id of the MACS agent.
         * 
         * @return builder
         * 
         */
        public Builder macsAgentId(String macsAgentId) {
            return macsAgentId(Output.of(macsAgentId));
        }

        /**
         * @param networkProtocol (Updatable) Protocol to be used to connect to External MySQL Database; TCP, TCP with SSL or Socket.
         * 
         * @return builder
         * 
         */
        public Builder networkProtocol(Output<String> networkProtocol) {
            $.networkProtocol = networkProtocol;
            return this;
        }

        /**
         * @param networkProtocol (Updatable) Protocol to be used to connect to External MySQL Database; TCP, TCP with SSL or Socket.
         * 
         * @return builder
         * 
         */
        public Builder networkProtocol(String networkProtocol) {
            return networkProtocol(Output.of(networkProtocol));
        }

        /**
         * @param port (Updatable) Port number to connect to External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) Port number to connect to External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param sslSecretId (Updatable) If using existing SSL secret to connect, OCID for the secret resource.
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(Output<String> sslSecretId) {
            $.sslSecretId = sslSecretId;
            return this;
        }

        /**
         * @param sslSecretId (Updatable) If using existing SSL secret to connect, OCID for the secret resource.
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(String sslSecretId) {
            return sslSecretId(Output.of(sslSecretId));
        }

        public ExternalMySqlDatabaseConnectorConnectorDetailsArgs build() {
            if ($.credentialType == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "credentialType");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "displayName");
            }
            if ($.externalDatabaseId == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "externalDatabaseId");
            }
            if ($.hostName == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "hostName");
            }
            if ($.macsAgentId == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "macsAgentId");
            }
            if ($.networkProtocol == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "networkProtocol");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "port");
            }
            if ($.sslSecretId == null) {
                throw new MissingRequiredPropertyException("ExternalMySqlDatabaseConnectorConnectorDetailsArgs", "sslSecretId");
            }
            return $;
        }
    }

}
