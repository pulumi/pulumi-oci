// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalMySqlDatabaseConnectorConnectorDetailsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalMySqlDatabaseConnectorState extends com.pulumi.resources.ResourceArgs {

    public static final ExternalMySqlDatabaseConnectorState Empty = new ExternalMySqlDatabaseConnectorState();

    /**
     * Oracle Cloud Infrastructure Services associated with this connector.
     * 
     */
    @Import(name="associatedServices")
    private @Nullable Output<String> associatedServices;

    /**
     * @return Oracle Cloud Infrastructure Services associated with this connector.
     * 
     */
    public Optional<Output<String>> associatedServices() {
        return Optional.ofNullable(this.associatedServices);
    }

    /**
     * (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="checkConnectionStatusTrigger")
    private @Nullable Output<Integer> checkConnectionStatusTrigger;

    /**
     * @return (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Integer>> checkConnectionStatusTrigger() {
        return Optional.ofNullable(this.checkConnectionStatusTrigger);
    }

    /**
     * (Updatable) OCID of compartment for the External MySQL Database.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) OCID of compartment for the External MySQL Database.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Connection Status
     * 
     */
    @Import(name="connectionStatus")
    private @Nullable Output<String> connectionStatus;

    /**
     * @return Connection Status
     * 
     */
    public Optional<Output<String>> connectionStatus() {
        return Optional.ofNullable(this.connectionStatus);
    }

    /**
     * (Updatable) Create Details of external database connector.
     * 
     */
    @Import(name="connectorDetails")
    private @Nullable Output<ExternalMySqlDatabaseConnectorConnectorDetailsArgs> connectorDetails;

    /**
     * @return (Updatable) Create Details of external database connector.
     * 
     */
    public Optional<Output<ExternalMySqlDatabaseConnectorConnectorDetailsArgs>> connectorDetails() {
        return Optional.ofNullable(this.connectorDetails);
    }

    /**
     * Connector Type.
     * 
     */
    @Import(name="connectorType")
    private @Nullable Output<String> connectorType;

    /**
     * @return Connector Type.
     * 
     */
    public Optional<Output<String>> connectorType() {
        return Optional.ofNullable(this.connectorType);
    }

    /**
     * Credential type used to connect to database.
     * 
     */
    @Import(name="credentialType")
    private @Nullable Output<String> credentialType;

    /**
     * @return Credential type used to connect to database.
     * 
     */
    public Optional<Output<String>> credentialType() {
        return Optional.ofNullable(this.credentialType);
    }

    /**
     * OCID of MySQL Database resource
     * 
     */
    @Import(name="externalDatabaseId")
    private @Nullable Output<String> externalDatabaseId;

    /**
     * @return OCID of MySQL Database resource
     * 
     */
    public Optional<Output<String>> externalDatabaseId() {
        return Optional.ofNullable(this.externalDatabaseId);
    }

    /**
     * Host name for Connector.
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    /**
     * @return Host name for Connector.
     * 
     */
    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Parameter indicating whether database connection needs to be tested.
     * 
     */
    @Import(name="isTestConnectionParam")
    private @Nullable Output<Boolean> isTestConnectionParam;

    /**
     * @return Parameter indicating whether database connection needs to be tested.
     * 
     */
    public Optional<Output<Boolean>> isTestConnectionParam() {
        return Optional.ofNullable(this.isTestConnectionParam);
    }

    /**
     * Agent Id of the MACS agent.
     * 
     */
    @Import(name="macsAgentId")
    private @Nullable Output<String> macsAgentId;

    /**
     * @return Agent Id of the MACS agent.
     * 
     */
    public Optional<Output<String>> macsAgentId() {
        return Optional.ofNullable(this.macsAgentId);
    }

    /**
     * External MySQL Database Connector Name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return External MySQL Database Connector Name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network Protocol.
     * 
     */
    @Import(name="networkProtocol")
    private @Nullable Output<String> networkProtocol;

    /**
     * @return Network Protocol.
     * 
     */
    public Optional<Output<String>> networkProtocol() {
        return Optional.ofNullable(this.networkProtocol);
    }

    /**
     * Connector port.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Connector port.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Name of MySQL Database.
     * 
     */
    @Import(name="sourceDatabase")
    private @Nullable Output<String> sourceDatabase;

    /**
     * @return Name of MySQL Database.
     * 
     */
    public Optional<Output<String>> sourceDatabase() {
        return Optional.ofNullable(this.sourceDatabase);
    }

    /**
     * Type of MySQL Database.
     * 
     */
    @Import(name="sourceDatabaseType")
    private @Nullable Output<String> sourceDatabaseType;

    /**
     * @return Type of MySQL Database.
     * 
     */
    public Optional<Output<String>> sourceDatabaseType() {
        return Optional.ofNullable(this.sourceDatabaseType);
    }

    /**
     * OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    @Import(name="sslSecretId")
    private @Nullable Output<String> sslSecretId;

    /**
     * @return OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    public Optional<Output<String>> sslSecretId() {
        return Optional.ofNullable(this.sslSecretId);
    }

    /**
     * Name of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    @Import(name="sslSecretName")
    private @Nullable Output<String> sslSecretName;

    /**
     * @return Name of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    public Optional<Output<String>> sslSecretName() {
        return Optional.ofNullable(this.sslSecretName);
    }

    /**
     * Indicates lifecycle  state of the resource.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Indicates lifecycle  state of the resource.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Time when connection status was last updated.
     * 
     */
    @Import(name="timeConnectionStatusUpdated")
    private @Nullable Output<String> timeConnectionStatusUpdated;

    /**
     * @return Time when connection status was last updated.
     * 
     */
    public Optional<Output<String>> timeConnectionStatusUpdated() {
        return Optional.ofNullable(this.timeConnectionStatusUpdated);
    }

    /**
     * Connector creation time.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return Connector creation time.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * Connector update time.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return Connector update time.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    private ExternalMySqlDatabaseConnectorState() {}

    private ExternalMySqlDatabaseConnectorState(ExternalMySqlDatabaseConnectorState $) {
        this.associatedServices = $.associatedServices;
        this.checkConnectionStatusTrigger = $.checkConnectionStatusTrigger;
        this.compartmentId = $.compartmentId;
        this.connectionStatus = $.connectionStatus;
        this.connectorDetails = $.connectorDetails;
        this.connectorType = $.connectorType;
        this.credentialType = $.credentialType;
        this.externalDatabaseId = $.externalDatabaseId;
        this.hostName = $.hostName;
        this.isTestConnectionParam = $.isTestConnectionParam;
        this.macsAgentId = $.macsAgentId;
        this.name = $.name;
        this.networkProtocol = $.networkProtocol;
        this.port = $.port;
        this.sourceDatabase = $.sourceDatabase;
        this.sourceDatabaseType = $.sourceDatabaseType;
        this.sslSecretId = $.sslSecretId;
        this.sslSecretName = $.sslSecretName;
        this.state = $.state;
        this.timeConnectionStatusUpdated = $.timeConnectionStatusUpdated;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalMySqlDatabaseConnectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalMySqlDatabaseConnectorState $;

        public Builder() {
            $ = new ExternalMySqlDatabaseConnectorState();
        }

        public Builder(ExternalMySqlDatabaseConnectorState defaults) {
            $ = new ExternalMySqlDatabaseConnectorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedServices Oracle Cloud Infrastructure Services associated with this connector.
         * 
         * @return builder
         * 
         */
        public Builder associatedServices(@Nullable Output<String> associatedServices) {
            $.associatedServices = associatedServices;
            return this;
        }

        /**
         * @param associatedServices Oracle Cloud Infrastructure Services associated with this connector.
         * 
         * @return builder
         * 
         */
        public Builder associatedServices(String associatedServices) {
            return associatedServices(Output.of(associatedServices));
        }

        /**
         * @param checkConnectionStatusTrigger (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder checkConnectionStatusTrigger(@Nullable Output<Integer> checkConnectionStatusTrigger) {
            $.checkConnectionStatusTrigger = checkConnectionStatusTrigger;
            return this;
        }

        /**
         * @param checkConnectionStatusTrigger (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder checkConnectionStatusTrigger(Integer checkConnectionStatusTrigger) {
            return checkConnectionStatusTrigger(Output.of(checkConnectionStatusTrigger));
        }

        /**
         * @param compartmentId (Updatable) OCID of compartment for the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) OCID of compartment for the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionStatus Connection Status
         * 
         * @return builder
         * 
         */
        public Builder connectionStatus(@Nullable Output<String> connectionStatus) {
            $.connectionStatus = connectionStatus;
            return this;
        }

        /**
         * @param connectionStatus Connection Status
         * 
         * @return builder
         * 
         */
        public Builder connectionStatus(String connectionStatus) {
            return connectionStatus(Output.of(connectionStatus));
        }

        /**
         * @param connectorDetails (Updatable) Create Details of external database connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorDetails(@Nullable Output<ExternalMySqlDatabaseConnectorConnectorDetailsArgs> connectorDetails) {
            $.connectorDetails = connectorDetails;
            return this;
        }

        /**
         * @param connectorDetails (Updatable) Create Details of external database connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorDetails(ExternalMySqlDatabaseConnectorConnectorDetailsArgs connectorDetails) {
            return connectorDetails(Output.of(connectorDetails));
        }

        /**
         * @param connectorType Connector Type.
         * 
         * @return builder
         * 
         */
        public Builder connectorType(@Nullable Output<String> connectorType) {
            $.connectorType = connectorType;
            return this;
        }

        /**
         * @param connectorType Connector Type.
         * 
         * @return builder
         * 
         */
        public Builder connectorType(String connectorType) {
            return connectorType(Output.of(connectorType));
        }

        /**
         * @param credentialType Credential type used to connect to database.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(@Nullable Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType Credential type used to connect to database.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param externalDatabaseId OCID of MySQL Database resource
         * 
         * @return builder
         * 
         */
        public Builder externalDatabaseId(@Nullable Output<String> externalDatabaseId) {
            $.externalDatabaseId = externalDatabaseId;
            return this;
        }

        /**
         * @param externalDatabaseId OCID of MySQL Database resource
         * 
         * @return builder
         * 
         */
        public Builder externalDatabaseId(String externalDatabaseId) {
            return externalDatabaseId(Output.of(externalDatabaseId));
        }

        /**
         * @param hostName Host name for Connector.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName Host name for Connector.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param isTestConnectionParam Parameter indicating whether database connection needs to be tested.
         * 
         * @return builder
         * 
         */
        public Builder isTestConnectionParam(@Nullable Output<Boolean> isTestConnectionParam) {
            $.isTestConnectionParam = isTestConnectionParam;
            return this;
        }

        /**
         * @param isTestConnectionParam Parameter indicating whether database connection needs to be tested.
         * 
         * @return builder
         * 
         */
        public Builder isTestConnectionParam(Boolean isTestConnectionParam) {
            return isTestConnectionParam(Output.of(isTestConnectionParam));
        }

        /**
         * @param macsAgentId Agent Id of the MACS agent.
         * 
         * @return builder
         * 
         */
        public Builder macsAgentId(@Nullable Output<String> macsAgentId) {
            $.macsAgentId = macsAgentId;
            return this;
        }

        /**
         * @param macsAgentId Agent Id of the MACS agent.
         * 
         * @return builder
         * 
         */
        public Builder macsAgentId(String macsAgentId) {
            return macsAgentId(Output.of(macsAgentId));
        }

        /**
         * @param name External MySQL Database Connector Name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name External MySQL Database Connector Name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkProtocol Network Protocol.
         * 
         * @return builder
         * 
         */
        public Builder networkProtocol(@Nullable Output<String> networkProtocol) {
            $.networkProtocol = networkProtocol;
            return this;
        }

        /**
         * @param networkProtocol Network Protocol.
         * 
         * @return builder
         * 
         */
        public Builder networkProtocol(String networkProtocol) {
            return networkProtocol(Output.of(networkProtocol));
        }

        /**
         * @param port Connector port.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Connector port.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param sourceDatabase Name of MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabase(@Nullable Output<String> sourceDatabase) {
            $.sourceDatabase = sourceDatabase;
            return this;
        }

        /**
         * @param sourceDatabase Name of MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabase(String sourceDatabase) {
            return sourceDatabase(Output.of(sourceDatabase));
        }

        /**
         * @param sourceDatabaseType Type of MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabaseType(@Nullable Output<String> sourceDatabaseType) {
            $.sourceDatabaseType = sourceDatabaseType;
            return this;
        }

        /**
         * @param sourceDatabaseType Type of MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabaseType(String sourceDatabaseType) {
            return sourceDatabaseType(Output.of(sourceDatabaseType));
        }

        /**
         * @param sslSecretId OCID of the SSL secret, if TCPS with SSL is used to connect to database.
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(@Nullable Output<String> sslSecretId) {
            $.sslSecretId = sslSecretId;
            return this;
        }

        /**
         * @param sslSecretId OCID of the SSL secret, if TCPS with SSL is used to connect to database.
         * 
         * @return builder
         * 
         */
        public Builder sslSecretId(String sslSecretId) {
            return sslSecretId(Output.of(sslSecretId));
        }

        /**
         * @param sslSecretName Name of the SSL secret, if TCPS with SSL is used to connect to database.
         * 
         * @return builder
         * 
         */
        public Builder sslSecretName(@Nullable Output<String> sslSecretName) {
            $.sslSecretName = sslSecretName;
            return this;
        }

        /**
         * @param sslSecretName Name of the SSL secret, if TCPS with SSL is used to connect to database.
         * 
         * @return builder
         * 
         */
        public Builder sslSecretName(String sslSecretName) {
            return sslSecretName(Output.of(sslSecretName));
        }

        /**
         * @param state Indicates lifecycle  state of the resource.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Indicates lifecycle  state of the resource.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeConnectionStatusUpdated Time when connection status was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeConnectionStatusUpdated(@Nullable Output<String> timeConnectionStatusUpdated) {
            $.timeConnectionStatusUpdated = timeConnectionStatusUpdated;
            return this;
        }

        /**
         * @param timeConnectionStatusUpdated Time when connection status was last updated.
         * 
         * @return builder
         * 
         */
        public Builder timeConnectionStatusUpdated(String timeConnectionStatusUpdated) {
            return timeConnectionStatusUpdated(Output.of(timeConnectionStatusUpdated));
        }

        /**
         * @param timeCreated Connector creation time.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated Connector creation time.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated Connector update time.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated Connector update time.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        public ExternalMySqlDatabaseConnectorState build() {
            return $;
        }
    }

}
