// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalMySqlDatabaseExternalMysqlDatabasesManagementState extends com.pulumi.resources.ResourceArgs {

    public static final ExternalMySqlDatabaseExternalMysqlDatabasesManagementState Empty = new ExternalMySqlDatabaseExternalMysqlDatabasesManagementState();

    /**
     * OCID of External MySQL Database connector.
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    /**
     * @return OCID of External MySQL Database connector.
     * 
     */
    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="enableExternalMysqlDatabase")
    private @Nullable Output<Boolean> enableExternalMysqlDatabase;

    /**
     * @return (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Boolean>> enableExternalMysqlDatabase() {
        return Optional.ofNullable(this.enableExternalMysqlDatabase);
    }

    /**
     * The OCID of the External MySQL Database.
     * 
     */
    @Import(name="externalMySqlDatabaseId")
    private @Nullable Output<String> externalMySqlDatabaseId;

    /**
     * @return The OCID of the External MySQL Database.
     * 
     */
    public Optional<Output<String>> externalMySqlDatabaseId() {
        return Optional.ofNullable(this.externalMySqlDatabaseId);
    }

    private ExternalMySqlDatabaseExternalMysqlDatabasesManagementState() {}

    private ExternalMySqlDatabaseExternalMysqlDatabasesManagementState(ExternalMySqlDatabaseExternalMysqlDatabasesManagementState $) {
        this.connectorId = $.connectorId;
        this.enableExternalMysqlDatabase = $.enableExternalMysqlDatabase;
        this.externalMySqlDatabaseId = $.externalMySqlDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalMySqlDatabaseExternalMysqlDatabasesManagementState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalMySqlDatabaseExternalMysqlDatabasesManagementState $;

        public Builder() {
            $ = new ExternalMySqlDatabaseExternalMysqlDatabasesManagementState();
        }

        public Builder(ExternalMySqlDatabaseExternalMysqlDatabasesManagementState defaults) {
            $ = new ExternalMySqlDatabaseExternalMysqlDatabasesManagementState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId OCID of External MySQL Database connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId OCID of External MySQL Database connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param enableExternalMysqlDatabase (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder enableExternalMysqlDatabase(@Nullable Output<Boolean> enableExternalMysqlDatabase) {
            $.enableExternalMysqlDatabase = enableExternalMysqlDatabase;
            return this;
        }

        /**
         * @param enableExternalMysqlDatabase (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder enableExternalMysqlDatabase(Boolean enableExternalMysqlDatabase) {
            return enableExternalMysqlDatabase(Output.of(enableExternalMysqlDatabase));
        }

        /**
         * @param externalMySqlDatabaseId The OCID of the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder externalMySqlDatabaseId(@Nullable Output<String> externalMySqlDatabaseId) {
            $.externalMySqlDatabaseId = externalMySqlDatabaseId;
            return this;
        }

        /**
         * @param externalMySqlDatabaseId The OCID of the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder externalMySqlDatabaseId(String externalMySqlDatabaseId) {
            return externalMySqlDatabaseId(Output.of(externalMySqlDatabaseId));
        }

        public ExternalMySqlDatabaseExternalMysqlDatabasesManagementState build() {
            return $;
        }
    }

}
