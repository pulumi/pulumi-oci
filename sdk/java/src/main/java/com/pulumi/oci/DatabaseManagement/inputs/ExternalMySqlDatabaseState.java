// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalMySqlDatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final ExternalMySqlDatabaseState Empty = new ExternalMySqlDatabaseState();

    /**
     * OCID of compartment for the External MySQL Database.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return OCID of compartment for the External MySQL Database.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Name of the External MySQL Database.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return (Updatable) Name of the External MySQL Database.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    /**
     * OCID of External MySQL Database.
     * 
     */
    @Import(name="externalDatabaseId")
    private @Nullable Output<String> externalDatabaseId;

    /**
     * @return OCID of External MySQL Database.
     * 
     */
    public Optional<Output<String>> externalDatabaseId() {
        return Optional.ofNullable(this.externalDatabaseId);
    }

    private ExternalMySqlDatabaseState() {}

    private ExternalMySqlDatabaseState(ExternalMySqlDatabaseState $) {
        this.compartmentId = $.compartmentId;
        this.dbName = $.dbName;
        this.externalDatabaseId = $.externalDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalMySqlDatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalMySqlDatabaseState $;

        public Builder() {
            $ = new ExternalMySqlDatabaseState();
        }

        public Builder(ExternalMySqlDatabaseState defaults) {
            $ = new ExternalMySqlDatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId OCID of compartment for the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId OCID of compartment for the External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param dbName (Updatable) Name of the External MySQL Database.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName (Updatable) Name of the External MySQL Database.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        /**
         * @param externalDatabaseId OCID of External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder externalDatabaseId(@Nullable Output<String> externalDatabaseId) {
            $.externalDatabaseId = externalDatabaseId;
            return this;
        }

        /**
         * @param externalDatabaseId OCID of External MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder externalDatabaseId(String externalDatabaseId) {
            return externalDatabaseId(Output.of(externalDatabaseId));
        }

        public ExternalMySqlDatabaseState build() {
            return $;
        }
    }

}
