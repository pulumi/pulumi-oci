// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs Empty = new ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs();

    /**
     * Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    @Import(name="canEnableAllCurrentPdbs")
    private @Nullable Output<Boolean> canEnableAllCurrentPdbs;

    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    public Optional<Output<Boolean>> canEnableAllCurrentPdbs() {
        return Optional.ofNullable(this.canEnableAllCurrentPdbs);
    }

    /**
     * The connector details required to connect to an Oracle cloud database.
     * 
     */
    @Import(name="connectorDetails")
    private @Nullable Output<ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetailsArgs> connectorDetails;

    /**
     * @return The connector details required to connect to an Oracle cloud database.
     * 
     */
    public Optional<Output<ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetailsArgs>> connectorDetails() {
        return Optional.ofNullable(this.connectorDetails);
    }

    /**
     * The name of the Database Management feature.
     * 
     */
    @Import(name="feature", required=true)
    private Output<String> feature;

    /**
     * @return The name of the Database Management feature.
     * 
     */
    public Output<String> feature() {
        return this.feature;
    }

    /**
     * Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    @Import(name="isAutoEnablePluggableDatabase")
    private @Nullable Output<Boolean> isAutoEnablePluggableDatabase;

    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    public Optional<Output<Boolean>> isAutoEnablePluggableDatabase() {
        return Optional.ofNullable(this.isAutoEnablePluggableDatabase);
    }

    /**
     * The Oracle license model that applies to the external database.
     * 
     */
    @Import(name="licenseModel")
    private @Nullable Output<String> licenseModel;

    /**
     * @return The Oracle license model that applies to the external database.
     * 
     */
    public Optional<Output<String>> licenseModel() {
        return Optional.ofNullable(this.licenseModel);
    }

    private ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs() {}

    private ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs(ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs $) {
        this.canEnableAllCurrentPdbs = $.canEnableAllCurrentPdbs;
        this.connectorDetails = $.connectorDetails;
        this.feature = $.feature;
        this.isAutoEnablePluggableDatabase = $.isAutoEnablePluggableDatabase;
        this.licenseModel = $.licenseModel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs $;

        public Builder() {
            $ = new ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs();
        }

        public Builder(ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs defaults) {
            $ = new ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param canEnableAllCurrentPdbs Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder canEnableAllCurrentPdbs(@Nullable Output<Boolean> canEnableAllCurrentPdbs) {
            $.canEnableAllCurrentPdbs = canEnableAllCurrentPdbs;
            return this;
        }

        /**
         * @param canEnableAllCurrentPdbs Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder canEnableAllCurrentPdbs(Boolean canEnableAllCurrentPdbs) {
            return canEnableAllCurrentPdbs(Output.of(canEnableAllCurrentPdbs));
        }

        /**
         * @param connectorDetails The connector details required to connect to an Oracle cloud database.
         * 
         * @return builder
         * 
         */
        public Builder connectorDetails(@Nullable Output<ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetailsArgs> connectorDetails) {
            $.connectorDetails = connectorDetails;
            return this;
        }

        /**
         * @param connectorDetails The connector details required to connect to an Oracle cloud database.
         * 
         * @return builder
         * 
         */
        public Builder connectorDetails(ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetailsArgs connectorDetails) {
            return connectorDetails(Output.of(connectorDetails));
        }

        /**
         * @param feature The name of the Database Management feature.
         * 
         * @return builder
         * 
         */
        public Builder feature(Output<String> feature) {
            $.feature = feature;
            return this;
        }

        /**
         * @param feature The name of the Database Management feature.
         * 
         * @return builder
         * 
         */
        public Builder feature(String feature) {
            return feature(Output.of(feature));
        }

        /**
         * @param isAutoEnablePluggableDatabase Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder isAutoEnablePluggableDatabase(@Nullable Output<Boolean> isAutoEnablePluggableDatabase) {
            $.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            return this;
        }

        /**
         * @param isAutoEnablePluggableDatabase Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
         * 
         * @return builder
         * 
         */
        public Builder isAutoEnablePluggableDatabase(Boolean isAutoEnablePluggableDatabase) {
            return isAutoEnablePluggableDatabase(Output.of(isAutoEnablePluggableDatabase));
        }

        /**
         * @param licenseModel The Oracle license model that applies to the external database.
         * 
         * @return builder
         * 
         */
        public Builder licenseModel(@Nullable Output<String> licenseModel) {
            $.licenseModel = licenseModel;
            return this;
        }

        /**
         * @param licenseModel The Oracle license model that applies to the external database.
         * 
         * @return builder
         * 
         */
        public Builder licenseModel(String licenseModel) {
            return licenseModel(Output.of(licenseModel));
        }

        public ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs build() {
            if ($.feature == null) {
                throw new MissingRequiredPropertyException("ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsArgs", "feature");
            }
            return $;
        }
    }

}
