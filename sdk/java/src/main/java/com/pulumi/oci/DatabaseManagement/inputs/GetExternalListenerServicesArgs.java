// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.GetExternalListenerServicesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExternalListenerServicesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetExternalListenerServicesArgs Empty = new GetExternalListenerServicesArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external listener.
     * 
     */
    @Import(name="externalListenerId", required=true)
    private Output<String> externalListenerId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external listener.
     * 
     */
    public Output<String> externalListenerId() {
        return this.externalListenerId;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetExternalListenerServicesFilterArgs>> filters;

    public Optional<Output<List<GetExternalListenerServicesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    @Import(name="managedDatabaseId", required=true)
    private Output<String> managedDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public Output<String> managedDatabaseId() {
        return this.managedDatabaseId;
    }

    /**
     * The OCID of the Named Credential.
     * 
     */
    @Import(name="opcNamedCredentialId")
    private @Nullable Output<String> opcNamedCredentialId;

    /**
     * @return The OCID of the Named Credential.
     * 
     */
    public Optional<Output<String>> opcNamedCredentialId() {
        return Optional.ofNullable(this.opcNamedCredentialId);
    }

    private GetExternalListenerServicesArgs() {}

    private GetExternalListenerServicesArgs(GetExternalListenerServicesArgs $) {
        this.externalListenerId = $.externalListenerId;
        this.filters = $.filters;
        this.managedDatabaseId = $.managedDatabaseId;
        this.opcNamedCredentialId = $.opcNamedCredentialId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetExternalListenerServicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetExternalListenerServicesArgs $;

        public Builder() {
            $ = new GetExternalListenerServicesArgs();
        }

        public Builder(GetExternalListenerServicesArgs defaults) {
            $ = new GetExternalListenerServicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalListenerId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external listener.
         * 
         * @return builder
         * 
         */
        public Builder externalListenerId(Output<String> externalListenerId) {
            $.externalListenerId = externalListenerId;
            return this;
        }

        /**
         * @param externalListenerId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external listener.
         * 
         * @return builder
         * 
         */
        public Builder externalListenerId(String externalListenerId) {
            return externalListenerId(Output.of(externalListenerId));
        }

        public Builder filters(@Nullable Output<List<GetExternalListenerServicesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetExternalListenerServicesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetExternalListenerServicesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(Output<String> managedDatabaseId) {
            $.managedDatabaseId = managedDatabaseId;
            return this;
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(String managedDatabaseId) {
            return managedDatabaseId(Output.of(managedDatabaseId));
        }

        /**
         * @param opcNamedCredentialId The OCID of the Named Credential.
         * 
         * @return builder
         * 
         */
        public Builder opcNamedCredentialId(@Nullable Output<String> opcNamedCredentialId) {
            $.opcNamedCredentialId = opcNamedCredentialId;
            return this;
        }

        /**
         * @param opcNamedCredentialId The OCID of the Named Credential.
         * 
         * @return builder
         * 
         */
        public Builder opcNamedCredentialId(String opcNamedCredentialId) {
            return opcNamedCredentialId(Output.of(opcNamedCredentialId));
        }

        public GetExternalListenerServicesArgs build() {
            if ($.externalListenerId == null) {
                throw new MissingRequiredPropertyException("GetExternalListenerServicesArgs", "externalListenerId");
            }
            if ($.managedDatabaseId == null) {
                throw new MissingRequiredPropertyException("GetExternalListenerServicesArgs", "managedDatabaseId");
            }
            return $;
        }
    }

}
