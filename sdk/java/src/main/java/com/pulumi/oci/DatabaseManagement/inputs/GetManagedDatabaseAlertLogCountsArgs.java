// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.GetManagedDatabaseAlertLogCountsFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedDatabaseAlertLogCountsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedDatabaseAlertLogCountsArgs Empty = new GetManagedDatabaseAlertLogCountsArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetManagedDatabaseAlertLogCountsFilterArgs>> filters;

    public Optional<Output<List<GetManagedDatabaseAlertLogCountsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The optional parameter used to group different alert logs.
     * 
     */
    @Import(name="groupBy")
    private @Nullable Output<String> groupBy;

    /**
     * @return The optional parameter used to group different alert logs.
     * 
     */
    public Optional<Output<String>> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }

    /**
     * The flag to indicate whether the search text is regular expression or not.
     * 
     */
    @Import(name="isRegularExpression")
    private @Nullable Output<Boolean> isRegularExpression;

    /**
     * @return The flag to indicate whether the search text is regular expression or not.
     * 
     */
    public Optional<Output<Boolean>> isRegularExpression() {
        return Optional.ofNullable(this.isRegularExpression);
    }

    /**
     * The optional parameter to filter the alert logs by log level.
     * 
     */
    @Import(name="levelFilter")
    private @Nullable Output<String> levelFilter;

    /**
     * @return The optional parameter to filter the alert logs by log level.
     * 
     */
    public Optional<Output<String>> levelFilter() {
        return Optional.ofNullable(this.levelFilter);
    }

    /**
     * The optional query parameter to filter the attention or alert logs by search text.
     * 
     */
    @Import(name="logSearchText")
    private @Nullable Output<String> logSearchText;

    /**
     * @return The optional query parameter to filter the attention or alert logs by search text.
     * 
     */
    public Optional<Output<String>> logSearchText() {
        return Optional.ofNullable(this.logSearchText);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    @Import(name="managedDatabaseId", required=true)
    private Output<String> managedDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public Output<String> managedDatabaseId() {
        return this.managedDatabaseId;
    }

    /**
     * The optional greater than or equal to timestamp to filter the logs.
     * 
     */
    @Import(name="timeGreaterThanOrEqualTo")
    private @Nullable Output<String> timeGreaterThanOrEqualTo;

    /**
     * @return The optional greater than or equal to timestamp to filter the logs.
     * 
     */
    public Optional<Output<String>> timeGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeGreaterThanOrEqualTo);
    }

    /**
     * The optional less than or equal to timestamp to filter the logs.
     * 
     */
    @Import(name="timeLessThanOrEqualTo")
    private @Nullable Output<String> timeLessThanOrEqualTo;

    /**
     * @return The optional less than or equal to timestamp to filter the logs.
     * 
     */
    public Optional<Output<String>> timeLessThanOrEqualTo() {
        return Optional.ofNullable(this.timeLessThanOrEqualTo);
    }

    /**
     * The optional parameter to filter the attention or alert logs by type.
     * 
     */
    @Import(name="typeFilter")
    private @Nullable Output<String> typeFilter;

    /**
     * @return The optional parameter to filter the attention or alert logs by type.
     * 
     */
    public Optional<Output<String>> typeFilter() {
        return Optional.ofNullable(this.typeFilter);
    }

    private GetManagedDatabaseAlertLogCountsArgs() {}

    private GetManagedDatabaseAlertLogCountsArgs(GetManagedDatabaseAlertLogCountsArgs $) {
        this.filters = $.filters;
        this.groupBy = $.groupBy;
        this.isRegularExpression = $.isRegularExpression;
        this.levelFilter = $.levelFilter;
        this.logSearchText = $.logSearchText;
        this.managedDatabaseId = $.managedDatabaseId;
        this.timeGreaterThanOrEqualTo = $.timeGreaterThanOrEqualTo;
        this.timeLessThanOrEqualTo = $.timeLessThanOrEqualTo;
        this.typeFilter = $.typeFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedDatabaseAlertLogCountsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedDatabaseAlertLogCountsArgs $;

        public Builder() {
            $ = new GetManagedDatabaseAlertLogCountsArgs();
        }

        public Builder(GetManagedDatabaseAlertLogCountsArgs defaults) {
            $ = new GetManagedDatabaseAlertLogCountsArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetManagedDatabaseAlertLogCountsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedDatabaseAlertLogCountsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedDatabaseAlertLogCountsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param groupBy The optional parameter used to group different alert logs.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(@Nullable Output<String> groupBy) {
            $.groupBy = groupBy;
            return this;
        }

        /**
         * @param groupBy The optional parameter used to group different alert logs.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(String groupBy) {
            return groupBy(Output.of(groupBy));
        }

        /**
         * @param isRegularExpression The flag to indicate whether the search text is regular expression or not.
         * 
         * @return builder
         * 
         */
        public Builder isRegularExpression(@Nullable Output<Boolean> isRegularExpression) {
            $.isRegularExpression = isRegularExpression;
            return this;
        }

        /**
         * @param isRegularExpression The flag to indicate whether the search text is regular expression or not.
         * 
         * @return builder
         * 
         */
        public Builder isRegularExpression(Boolean isRegularExpression) {
            return isRegularExpression(Output.of(isRegularExpression));
        }

        /**
         * @param levelFilter The optional parameter to filter the alert logs by log level.
         * 
         * @return builder
         * 
         */
        public Builder levelFilter(@Nullable Output<String> levelFilter) {
            $.levelFilter = levelFilter;
            return this;
        }

        /**
         * @param levelFilter The optional parameter to filter the alert logs by log level.
         * 
         * @return builder
         * 
         */
        public Builder levelFilter(String levelFilter) {
            return levelFilter(Output.of(levelFilter));
        }

        /**
         * @param logSearchText The optional query parameter to filter the attention or alert logs by search text.
         * 
         * @return builder
         * 
         */
        public Builder logSearchText(@Nullable Output<String> logSearchText) {
            $.logSearchText = logSearchText;
            return this;
        }

        /**
         * @param logSearchText The optional query parameter to filter the attention or alert logs by search text.
         * 
         * @return builder
         * 
         */
        public Builder logSearchText(String logSearchText) {
            return logSearchText(Output.of(logSearchText));
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(Output<String> managedDatabaseId) {
            $.managedDatabaseId = managedDatabaseId;
            return this;
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(String managedDatabaseId) {
            return managedDatabaseId(Output.of(managedDatabaseId));
        }

        /**
         * @param timeGreaterThanOrEqualTo The optional greater than or equal to timestamp to filter the logs.
         * 
         * @return builder
         * 
         */
        public Builder timeGreaterThanOrEqualTo(@Nullable Output<String> timeGreaterThanOrEqualTo) {
            $.timeGreaterThanOrEqualTo = timeGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeGreaterThanOrEqualTo The optional greater than or equal to timestamp to filter the logs.
         * 
         * @return builder
         * 
         */
        public Builder timeGreaterThanOrEqualTo(String timeGreaterThanOrEqualTo) {
            return timeGreaterThanOrEqualTo(Output.of(timeGreaterThanOrEqualTo));
        }

        /**
         * @param timeLessThanOrEqualTo The optional less than or equal to timestamp to filter the logs.
         * 
         * @return builder
         * 
         */
        public Builder timeLessThanOrEqualTo(@Nullable Output<String> timeLessThanOrEqualTo) {
            $.timeLessThanOrEqualTo = timeLessThanOrEqualTo;
            return this;
        }

        /**
         * @param timeLessThanOrEqualTo The optional less than or equal to timestamp to filter the logs.
         * 
         * @return builder
         * 
         */
        public Builder timeLessThanOrEqualTo(String timeLessThanOrEqualTo) {
            return timeLessThanOrEqualTo(Output.of(timeLessThanOrEqualTo));
        }

        /**
         * @param typeFilter The optional parameter to filter the attention or alert logs by type.
         * 
         * @return builder
         * 
         */
        public Builder typeFilter(@Nullable Output<String> typeFilter) {
            $.typeFilter = typeFilter;
            return this;
        }

        /**
         * @param typeFilter The optional parameter to filter the attention or alert logs by type.
         * 
         * @return builder
         * 
         */
        public Builder typeFilter(String typeFilter) {
            return typeFilter(Output.of(typeFilter));
        }

        public GetManagedDatabaseAlertLogCountsArgs build() {
            if ($.managedDatabaseId == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseAlertLogCountsArgs", "managedDatabaseId");
            }
            return $;
        }
    }

}
