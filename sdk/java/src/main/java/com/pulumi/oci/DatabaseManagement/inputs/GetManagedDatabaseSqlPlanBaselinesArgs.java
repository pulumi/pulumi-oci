// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.GetManagedDatabaseSqlPlanBaselinesFilterArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedDatabaseSqlPlanBaselinesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedDatabaseSqlPlanBaselinesArgs Empty = new GetManagedDatabaseSqlPlanBaselinesArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetManagedDatabaseSqlPlanBaselinesFilterArgs>> filters;

    public Optional<Output<List<GetManagedDatabaseSqlPlanBaselinesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only SQL plan baselines that are either accepted or not accepted. By default, all SQL plan baselines are returned.
     * 
     */
    @Import(name="isAccepted")
    private @Nullable Output<Boolean> isAccepted;

    /**
     * @return A filter to return only SQL plan baselines that are either accepted or not accepted. By default, all SQL plan baselines are returned.
     * 
     */
    public Optional<Output<Boolean>> isAccepted() {
        return Optional.ofNullable(this.isAccepted);
    }

    /**
     * A filter to return only SQL plan baselines that are either adaptive or not adaptive. By default, all SQL plan baselines are returned.
     * 
     */
    @Import(name="isAdaptive")
    private @Nullable Output<Boolean> isAdaptive;

    /**
     * @return A filter to return only SQL plan baselines that are either adaptive or not adaptive. By default, all SQL plan baselines are returned.
     * 
     */
    public Optional<Output<Boolean>> isAdaptive() {
        return Optional.ofNullable(this.isAdaptive);
    }

    /**
     * A filter to return only SQL plan baselines that are either auto-purged or not auto-purged. By default, all SQL plan baselines are returned.
     * 
     */
    @Import(name="isAutoPurged")
    private @Nullable Output<Boolean> isAutoPurged;

    /**
     * @return A filter to return only SQL plan baselines that are either auto-purged or not auto-purged. By default, all SQL plan baselines are returned.
     * 
     */
    public Optional<Output<Boolean>> isAutoPurged() {
        return Optional.ofNullable(this.isAutoPurged);
    }

    /**
     * A filter to return only SQL plan baselines that are either enabled or not enabled. By default, all SQL plan baselines are returned.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return A filter to return only SQL plan baselines that are either enabled or not enabled. By default, all SQL plan baselines are returned.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * A filter to return only SQL plan baselines that are either fixed or not fixed. By default, all SQL plan baselines are returned.
     * 
     */
    @Import(name="isFixed")
    private @Nullable Output<Boolean> isFixed;

    /**
     * @return A filter to return only SQL plan baselines that are either fixed or not fixed. By default, all SQL plan baselines are returned.
     * 
     */
    public Optional<Output<Boolean>> isFixed() {
        return Optional.ofNullable(this.isFixed);
    }

    /**
     * A filter to return only SQL plan baselines that are not executed till now. By default, all SQL plan baselines are returned.
     * 
     */
    @Import(name="isNeverExecuted")
    private @Nullable Output<Boolean> isNeverExecuted;

    /**
     * @return A filter to return only SQL plan baselines that are not executed till now. By default, all SQL plan baselines are returned.
     * 
     */
    public Optional<Output<Boolean>> isNeverExecuted() {
        return Optional.ofNullable(this.isNeverExecuted);
    }

    /**
     * A filter to return only SQL plan baselines that were either reproduced or not reproduced by the optimizer. By default, all SQL plan baselines are returned.
     * 
     */
    @Import(name="isReproduced")
    private @Nullable Output<Boolean> isReproduced;

    /**
     * @return A filter to return only SQL plan baselines that were either reproduced or not reproduced by the optimizer. By default, all SQL plan baselines are returned.
     * 
     */
    public Optional<Output<Boolean>> isReproduced() {
        return Optional.ofNullable(this.isReproduced);
    }

    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    @Import(name="managedDatabaseId", required=true)
    private Output<String> managedDatabaseId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public Output<String> managedDatabaseId() {
        return this.managedDatabaseId;
    }

    /**
     * The OCID of the Named Credential.
     * 
     */
    @Import(name="opcNamedCredentialId")
    private @Nullable Output<String> opcNamedCredentialId;

    /**
     * @return The OCID of the Named Credential.
     * 
     */
    public Optional<Output<String>> opcNamedCredentialId() {
        return Optional.ofNullable(this.opcNamedCredentialId);
    }

    /**
     * A filter to return all the SQL plan baselines that match the origin.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return A filter to return all the SQL plan baselines that match the origin.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * A filter to return only SQL plan baselines that match the plan name.
     * 
     */
    @Import(name="planName")
    private @Nullable Output<String> planName;

    /**
     * @return A filter to return only SQL plan baselines that match the plan name.
     * 
     */
    public Optional<Output<String>> planName() {
        return Optional.ofNullable(this.planName);
    }

    /**
     * A filter to return all the SQL plan baselines for the specified SQL handle.
     * 
     */
    @Import(name="sqlHandle")
    private @Nullable Output<String> sqlHandle;

    /**
     * @return A filter to return all the SQL plan baselines for the specified SQL handle.
     * 
     */
    public Optional<Output<String>> sqlHandle() {
        return Optional.ofNullable(this.sqlHandle);
    }

    /**
     * A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
     * 
     */
    @Import(name="sqlText")
    private @Nullable Output<String> sqlText;

    /**
     * @return A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
     * 
     */
    public Optional<Output<String>> sqlText() {
        return Optional.ofNullable(this.sqlText);
    }

    private GetManagedDatabaseSqlPlanBaselinesArgs() {}

    private GetManagedDatabaseSqlPlanBaselinesArgs(GetManagedDatabaseSqlPlanBaselinesArgs $) {
        this.filters = $.filters;
        this.isAccepted = $.isAccepted;
        this.isAdaptive = $.isAdaptive;
        this.isAutoPurged = $.isAutoPurged;
        this.isEnabled = $.isEnabled;
        this.isFixed = $.isFixed;
        this.isNeverExecuted = $.isNeverExecuted;
        this.isReproduced = $.isReproduced;
        this.limit = $.limit;
        this.managedDatabaseId = $.managedDatabaseId;
        this.opcNamedCredentialId = $.opcNamedCredentialId;
        this.origin = $.origin;
        this.planName = $.planName;
        this.sqlHandle = $.sqlHandle;
        this.sqlText = $.sqlText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedDatabaseSqlPlanBaselinesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedDatabaseSqlPlanBaselinesArgs $;

        public Builder() {
            $ = new GetManagedDatabaseSqlPlanBaselinesArgs();
        }

        public Builder(GetManagedDatabaseSqlPlanBaselinesArgs defaults) {
            $ = new GetManagedDatabaseSqlPlanBaselinesArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetManagedDatabaseSqlPlanBaselinesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedDatabaseSqlPlanBaselinesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedDatabaseSqlPlanBaselinesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param isAccepted A filter to return only SQL plan baselines that are either accepted or not accepted. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isAccepted(@Nullable Output<Boolean> isAccepted) {
            $.isAccepted = isAccepted;
            return this;
        }

        /**
         * @param isAccepted A filter to return only SQL plan baselines that are either accepted or not accepted. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isAccepted(Boolean isAccepted) {
            return isAccepted(Output.of(isAccepted));
        }

        /**
         * @param isAdaptive A filter to return only SQL plan baselines that are either adaptive or not adaptive. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isAdaptive(@Nullable Output<Boolean> isAdaptive) {
            $.isAdaptive = isAdaptive;
            return this;
        }

        /**
         * @param isAdaptive A filter to return only SQL plan baselines that are either adaptive or not adaptive. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isAdaptive(Boolean isAdaptive) {
            return isAdaptive(Output.of(isAdaptive));
        }

        /**
         * @param isAutoPurged A filter to return only SQL plan baselines that are either auto-purged or not auto-purged. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isAutoPurged(@Nullable Output<Boolean> isAutoPurged) {
            $.isAutoPurged = isAutoPurged;
            return this;
        }

        /**
         * @param isAutoPurged A filter to return only SQL plan baselines that are either auto-purged or not auto-purged. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isAutoPurged(Boolean isAutoPurged) {
            return isAutoPurged(Output.of(isAutoPurged));
        }

        /**
         * @param isEnabled A filter to return only SQL plan baselines that are either enabled or not enabled. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled A filter to return only SQL plan baselines that are either enabled or not enabled. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param isFixed A filter to return only SQL plan baselines that are either fixed or not fixed. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isFixed(@Nullable Output<Boolean> isFixed) {
            $.isFixed = isFixed;
            return this;
        }

        /**
         * @param isFixed A filter to return only SQL plan baselines that are either fixed or not fixed. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isFixed(Boolean isFixed) {
            return isFixed(Output.of(isFixed));
        }

        /**
         * @param isNeverExecuted A filter to return only SQL plan baselines that are not executed till now. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isNeverExecuted(@Nullable Output<Boolean> isNeverExecuted) {
            $.isNeverExecuted = isNeverExecuted;
            return this;
        }

        /**
         * @param isNeverExecuted A filter to return only SQL plan baselines that are not executed till now. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isNeverExecuted(Boolean isNeverExecuted) {
            return isNeverExecuted(Output.of(isNeverExecuted));
        }

        /**
         * @param isReproduced A filter to return only SQL plan baselines that were either reproduced or not reproduced by the optimizer. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isReproduced(@Nullable Output<Boolean> isReproduced) {
            $.isReproduced = isReproduced;
            return this;
        }

        /**
         * @param isReproduced A filter to return only SQL plan baselines that were either reproduced or not reproduced by the optimizer. By default, all SQL plan baselines are returned.
         * 
         * @return builder
         * 
         */
        public Builder isReproduced(Boolean isReproduced) {
            return isReproduced(Output.of(isReproduced));
        }

        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(Output<String> managedDatabaseId) {
            $.managedDatabaseId = managedDatabaseId;
            return this;
        }

        /**
         * @param managedDatabaseId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder managedDatabaseId(String managedDatabaseId) {
            return managedDatabaseId(Output.of(managedDatabaseId));
        }

        /**
         * @param opcNamedCredentialId The OCID of the Named Credential.
         * 
         * @return builder
         * 
         */
        public Builder opcNamedCredentialId(@Nullable Output<String> opcNamedCredentialId) {
            $.opcNamedCredentialId = opcNamedCredentialId;
            return this;
        }

        /**
         * @param opcNamedCredentialId The OCID of the Named Credential.
         * 
         * @return builder
         * 
         */
        public Builder opcNamedCredentialId(String opcNamedCredentialId) {
            return opcNamedCredentialId(Output.of(opcNamedCredentialId));
        }

        /**
         * @param origin A filter to return all the SQL plan baselines that match the origin.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin A filter to return all the SQL plan baselines that match the origin.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param planName A filter to return only SQL plan baselines that match the plan name.
         * 
         * @return builder
         * 
         */
        public Builder planName(@Nullable Output<String> planName) {
            $.planName = planName;
            return this;
        }

        /**
         * @param planName A filter to return only SQL plan baselines that match the plan name.
         * 
         * @return builder
         * 
         */
        public Builder planName(String planName) {
            return planName(Output.of(planName));
        }

        /**
         * @param sqlHandle A filter to return all the SQL plan baselines for the specified SQL handle.
         * 
         * @return builder
         * 
         */
        public Builder sqlHandle(@Nullable Output<String> sqlHandle) {
            $.sqlHandle = sqlHandle;
            return this;
        }

        /**
         * @param sqlHandle A filter to return all the SQL plan baselines for the specified SQL handle.
         * 
         * @return builder
         * 
         */
        public Builder sqlHandle(String sqlHandle) {
            return sqlHandle(Output.of(sqlHandle));
        }

        /**
         * @param sqlText A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
         * 
         * @return builder
         * 
         */
        public Builder sqlText(@Nullable Output<String> sqlText) {
            $.sqlText = sqlText;
            return this;
        }

        /**
         * @param sqlText A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
         * 
         * @return builder
         * 
         */
        public Builder sqlText(String sqlText) {
            return sqlText(Output.of(sqlText));
        }

        public GetManagedDatabaseSqlPlanBaselinesArgs build() {
            if ($.managedDatabaseId == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesArgs", "managedDatabaseId");
            }
            return $;
        }
    }

}
