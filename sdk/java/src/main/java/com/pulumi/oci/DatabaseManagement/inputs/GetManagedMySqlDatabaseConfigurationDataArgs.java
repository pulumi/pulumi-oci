// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseManagement.inputs.GetManagedMySqlDatabaseConfigurationDataFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedMySqlDatabaseConfigurationDataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedMySqlDatabaseConfigurationDataArgs Empty = new GetManagedMySqlDatabaseConfigurationDataArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetManagedMySqlDatabaseConfigurationDataFilterArgs>> filters;

    public Optional<Output<List<GetManagedMySqlDatabaseConfigurationDataFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of ManagedMySqlDatabase.
     * 
     */
    @Import(name="managedMySqlDatabaseId", required=true)
    private Output<String> managedMySqlDatabaseId;

    /**
     * @return The OCID of ManagedMySqlDatabase.
     * 
     */
    public Output<String> managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }

    private GetManagedMySqlDatabaseConfigurationDataArgs() {}

    private GetManagedMySqlDatabaseConfigurationDataArgs(GetManagedMySqlDatabaseConfigurationDataArgs $) {
        this.filters = $.filters;
        this.managedMySqlDatabaseId = $.managedMySqlDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedMySqlDatabaseConfigurationDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedMySqlDatabaseConfigurationDataArgs $;

        public Builder() {
            $ = new GetManagedMySqlDatabaseConfigurationDataArgs();
        }

        public Builder(GetManagedMySqlDatabaseConfigurationDataArgs defaults) {
            $ = new GetManagedMySqlDatabaseConfigurationDataArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetManagedMySqlDatabaseConfigurationDataFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedMySqlDatabaseConfigurationDataFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedMySqlDatabaseConfigurationDataFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedMySqlDatabaseId The OCID of ManagedMySqlDatabase.
         * 
         * @return builder
         * 
         */
        public Builder managedMySqlDatabaseId(Output<String> managedMySqlDatabaseId) {
            $.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }

        /**
         * @param managedMySqlDatabaseId The OCID of ManagedMySqlDatabase.
         * 
         * @return builder
         * 
         */
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            return managedMySqlDatabaseId(Output.of(managedMySqlDatabaseId));
        }

        public GetManagedMySqlDatabaseConfigurationDataArgs build() {
            $.managedMySqlDatabaseId = Objects.requireNonNull($.managedMySqlDatabaseId, "expected parameter 'managedMySqlDatabaseId' to be non-null");
            return $;
        }
    }

}
