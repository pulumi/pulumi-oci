// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.GetManagedMySqlDatabaseDigestErrorsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedMySqlDatabaseDigestErrorsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedMySqlDatabaseDigestErrorsArgs Empty = new GetManagedMySqlDatabaseDigestErrorsArgs();

    /**
     * The digest of a MySQL normalized query.
     * 
     */
    @Import(name="digest", required=true)
    private Output<String> digest;

    /**
     * @return The digest of a MySQL normalized query.
     * 
     */
    public Output<String> digest() {
        return this.digest;
    }

    @Import(name="filters")
    private @Nullable Output<List<GetManagedMySqlDatabaseDigestErrorsFilterArgs>> filters;

    public Optional<Output<List<GetManagedMySqlDatabaseDigestErrorsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the Managed MySQL Database.
     * 
     */
    @Import(name="managedMySqlDatabaseId", required=true)
    private Output<String> managedMySqlDatabaseId;

    /**
     * @return The OCID of the Managed MySQL Database.
     * 
     */
    public Output<String> managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }

    private GetManagedMySqlDatabaseDigestErrorsArgs() {}

    private GetManagedMySqlDatabaseDigestErrorsArgs(GetManagedMySqlDatabaseDigestErrorsArgs $) {
        this.digest = $.digest;
        this.filters = $.filters;
        this.managedMySqlDatabaseId = $.managedMySqlDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedMySqlDatabaseDigestErrorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedMySqlDatabaseDigestErrorsArgs $;

        public Builder() {
            $ = new GetManagedMySqlDatabaseDigestErrorsArgs();
        }

        public Builder(GetManagedMySqlDatabaseDigestErrorsArgs defaults) {
            $ = new GetManagedMySqlDatabaseDigestErrorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param digest The digest of a MySQL normalized query.
         * 
         * @return builder
         * 
         */
        public Builder digest(Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest The digest of a MySQL normalized query.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        public Builder filters(@Nullable Output<List<GetManagedMySqlDatabaseDigestErrorsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedMySqlDatabaseDigestErrorsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedMySqlDatabaseDigestErrorsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedMySqlDatabaseId The OCID of the Managed MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder managedMySqlDatabaseId(Output<String> managedMySqlDatabaseId) {
            $.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }

        /**
         * @param managedMySqlDatabaseId The OCID of the Managed MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            return managedMySqlDatabaseId(Output.of(managedMySqlDatabaseId));
        }

        public GetManagedMySqlDatabaseDigestErrorsArgs build() {
            if ($.digest == null) {
                throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseDigestErrorsArgs", "digest");
            }
            if ($.managedMySqlDatabaseId == null) {
                throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseDigestErrorsArgs", "managedMySqlDatabaseId");
            }
            return $;
        }
    }

}
