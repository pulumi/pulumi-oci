// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.GetManagedMySqlDatabaseSqlDataFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedMySqlDatabaseSqlDataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedMySqlDatabaseSqlDataArgs Empty = new GetManagedMySqlDatabaseSqlDataArgs();

    /**
     * The end time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    @Import(name="endTime", required=true)
    private Output<String> endTime;

    /**
     * @return The end time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }

    /**
     * The parameter to filter results by key criteria which include :
     * * AVG_TIMER_WAIT
     * * SUM_TIMER_WAIT
     * * COUNT_STAR
     * * SUM_ERRORS
     * * SUM_ROWS_AFFECTED
     * * SUM_ROWS_SENT
     * * SUM_ROWS_EXAMINED
     * * SUM_CREATED_TMP_TABLES
     * * SUM_NO_INDEX_USED
     * * SUM_NO_GOOD_INDEX_USED
     * * FIRST_SEEN
     * * LAST_SEEN
     * * HEATWAVE_OFFLOADED
     * * HEATWAVE_OUT_OF_MEMORY
     * 
     */
    @Import(name="filterColumn")
    private @Nullable Output<String> filterColumn;

    /**
     * @return The parameter to filter results by key criteria which include :
     * * AVG_TIMER_WAIT
     * * SUM_TIMER_WAIT
     * * COUNT_STAR
     * * SUM_ERRORS
     * * SUM_ROWS_AFFECTED
     * * SUM_ROWS_SENT
     * * SUM_ROWS_EXAMINED
     * * SUM_CREATED_TMP_TABLES
     * * SUM_NO_INDEX_USED
     * * SUM_NO_GOOD_INDEX_USED
     * * FIRST_SEEN
     * * LAST_SEEN
     * * HEATWAVE_OFFLOADED
     * * HEATWAVE_OUT_OF_MEMORY
     * 
     */
    public Optional<Output<String>> filterColumn() {
        return Optional.ofNullable(this.filterColumn);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetManagedMySqlDatabaseSqlDataFilterArgs>> filters;

    public Optional<Output<List<GetManagedMySqlDatabaseSqlDataFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the Managed MySQL Database.
     * 
     */
    @Import(name="managedMySqlDatabaseId", required=true)
    private Output<String> managedMySqlDatabaseId;

    /**
     * @return The OCID of the Managed MySQL Database.
     * 
     */
    public Output<String> managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }

    /**
     * The start time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return The start time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    private GetManagedMySqlDatabaseSqlDataArgs() {}

    private GetManagedMySqlDatabaseSqlDataArgs(GetManagedMySqlDatabaseSqlDataArgs $) {
        this.endTime = $.endTime;
        this.filterColumn = $.filterColumn;
        this.filters = $.filters;
        this.managedMySqlDatabaseId = $.managedMySqlDatabaseId;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedMySqlDatabaseSqlDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedMySqlDatabaseSqlDataArgs $;

        public Builder() {
            $ = new GetManagedMySqlDatabaseSqlDataArgs();
        }

        public Builder(GetManagedMySqlDatabaseSqlDataArgs defaults) {
            $ = new GetManagedMySqlDatabaseSqlDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The end time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder endTime(Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param filterColumn The parameter to filter results by key criteria which include :
         * * AVG_TIMER_WAIT
         * * SUM_TIMER_WAIT
         * * COUNT_STAR
         * * SUM_ERRORS
         * * SUM_ROWS_AFFECTED
         * * SUM_ROWS_SENT
         * * SUM_ROWS_EXAMINED
         * * SUM_CREATED_TMP_TABLES
         * * SUM_NO_INDEX_USED
         * * SUM_NO_GOOD_INDEX_USED
         * * FIRST_SEEN
         * * LAST_SEEN
         * * HEATWAVE_OFFLOADED
         * * HEATWAVE_OUT_OF_MEMORY
         * 
         * @return builder
         * 
         */
        public Builder filterColumn(@Nullable Output<String> filterColumn) {
            $.filterColumn = filterColumn;
            return this;
        }

        /**
         * @param filterColumn The parameter to filter results by key criteria which include :
         * * AVG_TIMER_WAIT
         * * SUM_TIMER_WAIT
         * * COUNT_STAR
         * * SUM_ERRORS
         * * SUM_ROWS_AFFECTED
         * * SUM_ROWS_SENT
         * * SUM_ROWS_EXAMINED
         * * SUM_CREATED_TMP_TABLES
         * * SUM_NO_INDEX_USED
         * * SUM_NO_GOOD_INDEX_USED
         * * FIRST_SEEN
         * * LAST_SEEN
         * * HEATWAVE_OFFLOADED
         * * HEATWAVE_OUT_OF_MEMORY
         * 
         * @return builder
         * 
         */
        public Builder filterColumn(String filterColumn) {
            return filterColumn(Output.of(filterColumn));
        }

        public Builder filters(@Nullable Output<List<GetManagedMySqlDatabaseSqlDataFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedMySqlDatabaseSqlDataFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedMySqlDatabaseSqlDataFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedMySqlDatabaseId The OCID of the Managed MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder managedMySqlDatabaseId(Output<String> managedMySqlDatabaseId) {
            $.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }

        /**
         * @param managedMySqlDatabaseId The OCID of the Managed MySQL Database.
         * 
         * @return builder
         * 
         */
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            return managedMySqlDatabaseId(Output.of(managedMySqlDatabaseId));
        }

        /**
         * @param startTime The start time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public GetManagedMySqlDatabaseSqlDataArgs build() {
            if ($.endTime == null) {
                throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseSqlDataArgs", "endTime");
            }
            if ($.managedMySqlDatabaseId == null) {
                throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseSqlDataArgs", "managedMySqlDatabaseId");
            }
            if ($.startTime == null) {
                throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseSqlDataArgs", "startTime");
            }
            return $;
        }
    }

}
