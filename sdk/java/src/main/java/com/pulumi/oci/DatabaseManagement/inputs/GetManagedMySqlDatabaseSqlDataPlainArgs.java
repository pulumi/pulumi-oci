// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseManagement.inputs.GetManagedMySqlDatabaseSqlDataFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedMySqlDatabaseSqlDataPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedMySqlDatabaseSqlDataPlainArgs Empty = new GetManagedMySqlDatabaseSqlDataPlainArgs();

    /**
     * The end time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    /**
     * @return The end time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * The parameter to filter results by key criteria.
     * 
     */
    @Import(name="filterColumn")
    private @Nullable String filterColumn;

    /**
     * @return The parameter to filter results by key criteria.
     * 
     */
    public Optional<String> filterColumn() {
        return Optional.ofNullable(this.filterColumn);
    }

    @Import(name="filters")
    private @Nullable List<GetManagedMySqlDatabaseSqlDataFilter> filters;

    public Optional<List<GetManagedMySqlDatabaseSqlDataFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of ManagedMySqlDatabase.
     * 
     */
    @Import(name="managedMySqlDatabaseId", required=true)
    private String managedMySqlDatabaseId;

    /**
     * @return The OCID of ManagedMySqlDatabase.
     * 
     */
    public String managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }

    /**
     * The start time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The start time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    private GetManagedMySqlDatabaseSqlDataPlainArgs() {}

    private GetManagedMySqlDatabaseSqlDataPlainArgs(GetManagedMySqlDatabaseSqlDataPlainArgs $) {
        this.endTime = $.endTime;
        this.filterColumn = $.filterColumn;
        this.filters = $.filters;
        this.managedMySqlDatabaseId = $.managedMySqlDatabaseId;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedMySqlDatabaseSqlDataPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedMySqlDatabaseSqlDataPlainArgs $;

        public Builder() {
            $ = new GetManagedMySqlDatabaseSqlDataPlainArgs();
        }

        public Builder(GetManagedMySqlDatabaseSqlDataPlainArgs defaults) {
            $ = new GetManagedMySqlDatabaseSqlDataPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The end time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param filterColumn The parameter to filter results by key criteria.
         * 
         * @return builder
         * 
         */
        public Builder filterColumn(@Nullable String filterColumn) {
            $.filterColumn = filterColumn;
            return this;
        }

        public Builder filters(@Nullable List<GetManagedMySqlDatabaseSqlDataFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetManagedMySqlDatabaseSqlDataFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param managedMySqlDatabaseId The OCID of ManagedMySqlDatabase.
         * 
         * @return builder
         * 
         */
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            $.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }

        /**
         * @param startTime The start time of the time range to retrieve the health metrics of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public GetManagedMySqlDatabaseSqlDataPlainArgs build() {
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.managedMySqlDatabaseId = Objects.requireNonNull($.managedMySqlDatabaseId, "expected parameter 'managedMySqlDatabaseId' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
