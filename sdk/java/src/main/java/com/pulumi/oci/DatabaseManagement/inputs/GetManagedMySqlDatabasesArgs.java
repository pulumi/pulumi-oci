// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.inputs.GetManagedMySqlDatabasesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetManagedMySqlDatabasesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedMySqlDatabasesArgs Empty = new GetManagedMySqlDatabasesArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The parameter to filter by MySQL database type. Allowed values are EXTERNAL or MDS.
     * 
     */
    @Import(name="filterByMySqlDatabaseTypeParam")
    private @Nullable Output<String> filterByMySqlDatabaseTypeParam;

    /**
     * @return The parameter to filter by MySQL database type. Allowed values are EXTERNAL or MDS.
     * 
     */
    public Optional<Output<String>> filterByMySqlDatabaseTypeParam() {
        return Optional.ofNullable(this.filterByMySqlDatabaseTypeParam);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetManagedMySqlDatabasesFilterArgs>> filters;

    public Optional<Output<List<GetManagedMySqlDatabasesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    private GetManagedMySqlDatabasesArgs() {}

    private GetManagedMySqlDatabasesArgs(GetManagedMySqlDatabasesArgs $) {
        this.compartmentId = $.compartmentId;
        this.filterByMySqlDatabaseTypeParam = $.filterByMySqlDatabaseTypeParam;
        this.filters = $.filters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedMySqlDatabasesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedMySqlDatabasesArgs $;

        public Builder() {
            $ = new GetManagedMySqlDatabasesArgs();
        }

        public Builder(GetManagedMySqlDatabasesArgs defaults) {
            $ = new GetManagedMySqlDatabasesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param filterByMySqlDatabaseTypeParam The parameter to filter by MySQL database type. Allowed values are EXTERNAL or MDS.
         * 
         * @return builder
         * 
         */
        public Builder filterByMySqlDatabaseTypeParam(@Nullable Output<String> filterByMySqlDatabaseTypeParam) {
            $.filterByMySqlDatabaseTypeParam = filterByMySqlDatabaseTypeParam;
            return this;
        }

        /**
         * @param filterByMySqlDatabaseTypeParam The parameter to filter by MySQL database type. Allowed values are EXTERNAL or MDS.
         * 
         * @return builder
         * 
         */
        public Builder filterByMySqlDatabaseTypeParam(String filterByMySqlDatabaseTypeParam) {
            return filterByMySqlDatabaseTypeParam(Output.of(filterByMySqlDatabaseTypeParam));
        }

        public Builder filters(@Nullable Output<List<GetManagedMySqlDatabasesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetManagedMySqlDatabasesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetManagedMySqlDatabasesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public GetManagedMySqlDatabasesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetManagedMySqlDatabasesArgs", "compartmentId");
            }
            return $;
        }
    }

}
