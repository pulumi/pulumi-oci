// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class NamedCredentialContentArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamedCredentialContentArgs Empty = new NamedCredentialContentArgs();

    /**
     * (Updatable) The type of named credential. Only &#39;BASIC&#39; is supported currently.
     * 
     */
    @Import(name="credentialType", required=true)
    private Output<String> credentialType;

    /**
     * @return (Updatable) The type of named credential. Only &#39;BASIC&#39; is supported currently.
     * 
     */
    public Output<String> credentialType() {
        return this.credentialType;
    }

    /**
     * (Updatable) The mechanism used to access the password plain text value.
     * 
     */
    @Import(name="passwordSecretAccessMode", required=true)
    private Output<String> passwordSecretAccessMode;

    /**
     * @return (Updatable) The mechanism used to access the password plain text value.
     * 
     */
    public Output<String> passwordSecretAccessMode() {
        return this.passwordSecretAccessMode;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
     * 
     */
    @Import(name="passwordSecretId", required=true)
    private Output<String> passwordSecretId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
     * 
     */
    public Output<String> passwordSecretId() {
        return this.passwordSecretId;
    }

    /**
     * (Updatable) The role of the database user.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return (Updatable) The role of the database user.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * (Updatable) The user name used to connect to the database.
     * 
     */
    @Import(name="userName", required=true)
    private Output<String> userName;

    /**
     * @return (Updatable) The user name used to connect to the database.
     * 
     */
    public Output<String> userName() {
        return this.userName;
    }

    private NamedCredentialContentArgs() {}

    private NamedCredentialContentArgs(NamedCredentialContentArgs $) {
        this.credentialType = $.credentialType;
        this.passwordSecretAccessMode = $.passwordSecretAccessMode;
        this.passwordSecretId = $.passwordSecretId;
        this.role = $.role;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamedCredentialContentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamedCredentialContentArgs $;

        public Builder() {
            $ = new NamedCredentialContentArgs();
        }

        public Builder(NamedCredentialContentArgs defaults) {
            $ = new NamedCredentialContentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialType (Updatable) The type of named credential. Only &#39;BASIC&#39; is supported currently.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType (Updatable) The type of named credential. Only &#39;BASIC&#39; is supported currently.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param passwordSecretAccessMode (Updatable) The mechanism used to access the password plain text value.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretAccessMode(Output<String> passwordSecretAccessMode) {
            $.passwordSecretAccessMode = passwordSecretAccessMode;
            return this;
        }

        /**
         * @param passwordSecretAccessMode (Updatable) The mechanism used to access the password plain text value.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretAccessMode(String passwordSecretAccessMode) {
            return passwordSecretAccessMode(Output.of(passwordSecretAccessMode));
        }

        /**
         * @param passwordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(Output<String> passwordSecretId) {
            $.passwordSecretId = passwordSecretId;
            return this;
        }

        /**
         * @param passwordSecretId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(String passwordSecretId) {
            return passwordSecretId(Output.of(passwordSecretId));
        }

        /**
         * @param role (Updatable) The role of the database user.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role (Updatable) The role of the database user.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param userName (Updatable) The user name used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName (Updatable) The user name used to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public NamedCredentialContentArgs build() {
            if ($.credentialType == null) {
                throw new MissingRequiredPropertyException("NamedCredentialContentArgs", "credentialType");
            }
            if ($.passwordSecretAccessMode == null) {
                throw new MissingRequiredPropertyException("NamedCredentialContentArgs", "passwordSecretAccessMode");
            }
            if ($.passwordSecretId == null) {
                throw new MissingRequiredPropertyException("NamedCredentialContentArgs", "passwordSecretId");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("NamedCredentialContentArgs", "role");
            }
            if ($.userName == null) {
                throw new MissingRequiredPropertyException("NamedCredentialContentArgs", "userName");
            }
            return $;
        }
    }

}
