// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.DatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails;
import com.pulumi.oci.DatabaseManagement.outputs.DatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseDbmFeaturesManagementFeatureDetails {
    /**
     * @return The connector details required to connect to an Oracle cloud database.
     * 
     */
    private @Nullable DatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails connectorDetails;
    /**
     * @return The connection details required to connect to the database.
     * 
     */
    private @Nullable DatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails databaseConnectionDetails;
    /**
     * @return The name of the Database Management feature.
     * 
     */
    private String feature;
    /**
     * @return Indicates whether the pluggable database can be enabled automatically.
     * 
     */
    private @Nullable Boolean isAutoEnablePluggableDatabase;
    /**
     * @return The management type for the database.
     * 
     */
    private @Nullable String managementType;

    private DatabaseDbmFeaturesManagementFeatureDetails() {}
    /**
     * @return The connector details required to connect to an Oracle cloud database.
     * 
     */
    public Optional<DatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails> connectorDetails() {
        return Optional.ofNullable(this.connectorDetails);
    }
    /**
     * @return The connection details required to connect to the database.
     * 
     */
    public Optional<DatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails> databaseConnectionDetails() {
        return Optional.ofNullable(this.databaseConnectionDetails);
    }
    /**
     * @return The name of the Database Management feature.
     * 
     */
    public String feature() {
        return this.feature;
    }
    /**
     * @return Indicates whether the pluggable database can be enabled automatically.
     * 
     */
    public Optional<Boolean> isAutoEnablePluggableDatabase() {
        return Optional.ofNullable(this.isAutoEnablePluggableDatabase);
    }
    /**
     * @return The management type for the database.
     * 
     */
    public Optional<String> managementType() {
        return Optional.ofNullable(this.managementType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseDbmFeaturesManagementFeatureDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails connectorDetails;
        private @Nullable DatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails databaseConnectionDetails;
        private String feature;
        private @Nullable Boolean isAutoEnablePluggableDatabase;
        private @Nullable String managementType;
        public Builder() {}
        public Builder(DatabaseDbmFeaturesManagementFeatureDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorDetails = defaults.connectorDetails;
    	      this.databaseConnectionDetails = defaults.databaseConnectionDetails;
    	      this.feature = defaults.feature;
    	      this.isAutoEnablePluggableDatabase = defaults.isAutoEnablePluggableDatabase;
    	      this.managementType = defaults.managementType;
        }

        @CustomType.Setter
        public Builder connectorDetails(@Nullable DatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails connectorDetails) {

            this.connectorDetails = connectorDetails;
            return this;
        }
        @CustomType.Setter
        public Builder databaseConnectionDetails(@Nullable DatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails databaseConnectionDetails) {

            this.databaseConnectionDetails = databaseConnectionDetails;
            return this;
        }
        @CustomType.Setter
        public Builder feature(String feature) {
            if (feature == null) {
              throw new MissingRequiredPropertyException("DatabaseDbmFeaturesManagementFeatureDetails", "feature");
            }
            this.feature = feature;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoEnablePluggableDatabase(@Nullable Boolean isAutoEnablePluggableDatabase) {

            this.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            return this;
        }
        @CustomType.Setter
        public Builder managementType(@Nullable String managementType) {

            this.managementType = managementType;
            return this;
        }
        public DatabaseDbmFeaturesManagementFeatureDetails build() {
            final var _resultValue = new DatabaseDbmFeaturesManagementFeatureDetails();
            _resultValue.connectorDetails = connectorDetails;
            _resultValue.databaseConnectionDetails = databaseConnectionDetails;
            _resultValue.feature = feature;
            _resultValue.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            _resultValue.managementType = managementType;
            return _resultValue;
        }
    }
}
