// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnector;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentEndpoint;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExternalDbSystemDiscoveryDiscoveredComponent {
    /**
     * @return The Automatic Diagnostic Repository (ADR) home directory for the cluster instance.
     * 
     */
    private @Nullable String adrHomeDirectory;
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances;
    /**
     * @return The list of associated components.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents;
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    private @Nullable Boolean canEnableAllCurrentPdbs;
    /**
     * @return The unique identifier of the Oracle cluster.
     * 
     */
    private @Nullable String clusterId;
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The identifier of the discovered DB system component.
     * 
     */
    private @Nullable String componentId;
    /**
     * @return The name of the discovered DB system component.
     * 
     */
    private @Nullable String componentName;
    /**
     * @return The component type.
     * 
     */
    private @Nullable String componentType;
    /**
     * @return The connector details used to connect to the external DB system component.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentConnector> connectors;
    /**
     * @return The unique identifier of the parent Container Database (CDB).
     * 
     */
    private @Nullable String containerDatabaseId;
    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    private @Nullable Double cpuCoreCount;
    /**
     * @return The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    private @Nullable String crsBaseDirectory;
    /**
     * @return The Oracle Database edition.
     * 
     */
    private @Nullable String dbEdition;
    /**
     * @return The Oracle Database ID.
     * 
     */
    private @Nullable String dbId;
    /**
     * @return The name of the DB node.
     * 
     */
    private @Nullable String dbNodeName;
    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    private @Nullable String dbPacks;
    /**
     * @return The role of the Oracle Database in Oracle Data Guard configuration.
     * 
     */
    private @Nullable String dbRole;
    /**
     * @return The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    private @Nullable String dbType;
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    private @Nullable String dbUniqueName;
    /**
     * @return The Oracle Database version.
     * 
     */
    private @Nullable String dbVersion;
    /**
     * @return (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints;
    /**
     * @return The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    private @Nullable String gridHome;
    /**
     * @return The unique identifier of the PDB.
     * 
     */
    private @Nullable String guid;
    /**
     * @return The location of the DB home.
     * 
     */
    private @Nullable String homeDirectory;
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return The name of the ASM instance.
     * 
     */
    private @Nullable String instanceName;
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    private @Nullable Boolean isAutoEnablePluggableDatabase;
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    private @Nullable Boolean isCluster;
    /**
     * @return Indicates whether the cluster is an Oracle Flex Cluster or not.
     * 
     */
    private @Nullable Boolean isFlexCluster;
    /**
     * @return Indicates whether Oracle Flex ASM is enabled or not.
     * 
     */
    private @Nullable Boolean isFlexEnabled;
    /**
     * @return Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
     * 
     */
    private @Nullable Boolean isSelectedForMonitoring;
    /**
     * @return The listener alias.
     * 
     */
    private @Nullable String listenerAlias;
    /**
     * @return The type of listener.
     * 
     */
    private @Nullable String listenerType;
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    private @Nullable String logDirectory;
    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    private @Nullable Double memorySizeInGbs;
    /**
     * @return The list of network address configurations of the external cluster.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations;
    /**
     * @return The role of the cluster node.
     * 
     */
    private @Nullable String nodeRole;
    /**
     * @return The location of the Oracle Cluster Registry (OCR) file.
     * 
     */
    private @Nullable String ocrFileLocation;
    /**
     * @return The Oracle home location of the listener.
     * 
     */
    private @Nullable String oracleHome;
    /**
     * @return The list of Pluggable Databases.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
     * 
     */
    private @Nullable String resourceId;
    /**
     * @return The list of Single Client Access Name (SCAN) configurations of the external cluster.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations;
    /**
     * @return The state of the discovered DB system component.
     * 
     */
    private @Nullable String status;
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    private @Nullable String traceDirectory;
    /**
     * @return The version of Oracle Clusterware running in the cluster.
     * 
     */
    private @Nullable String version;
    /**
     * @return The list of Virtual IP (VIP) configurations of the external cluster.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations;

    private ExternalDbSystemDiscoveryDiscoveredComponent() {}
    /**
     * @return The Automatic Diagnostic Repository (ADR) home directory for the cluster instance.
     * 
     */
    public Optional<String> adrHomeDirectory() {
        return Optional.ofNullable(this.adrHomeDirectory);
    }
    public List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances() {
        return this.asmInstances == null ? List.of() : this.asmInstances;
    }
    /**
     * @return The list of associated components.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents() {
        return this.associatedComponents == null ? List.of() : this.associatedComponents;
    }
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    public Optional<Boolean> canEnableAllCurrentPdbs() {
        return Optional.ofNullable(this.canEnableAllCurrentPdbs);
    }
    /**
     * @return The unique identifier of the Oracle cluster.
     * 
     */
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }
    public List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances() {
        return this.clusterInstances == null ? List.of() : this.clusterInstances;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The identifier of the discovered DB system component.
     * 
     */
    public Optional<String> componentId() {
        return Optional.ofNullable(this.componentId);
    }
    /**
     * @return The name of the discovered DB system component.
     * 
     */
    public Optional<String> componentName() {
        return Optional.ofNullable(this.componentName);
    }
    /**
     * @return The component type.
     * 
     */
    public Optional<String> componentType() {
        return Optional.ofNullable(this.componentType);
    }
    /**
     * @return The connector details used to connect to the external DB system component.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentConnector> connectors() {
        return this.connectors == null ? List.of() : this.connectors;
    }
    /**
     * @return The unique identifier of the parent Container Database (CDB).
     * 
     */
    public Optional<String> containerDatabaseId() {
        return Optional.ofNullable(this.containerDatabaseId);
    }
    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    public Optional<Double> cpuCoreCount() {
        return Optional.ofNullable(this.cpuCoreCount);
    }
    /**
     * @return The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    public Optional<String> crsBaseDirectory() {
        return Optional.ofNullable(this.crsBaseDirectory);
    }
    /**
     * @return The Oracle Database edition.
     * 
     */
    public Optional<String> dbEdition() {
        return Optional.ofNullable(this.dbEdition);
    }
    /**
     * @return The Oracle Database ID.
     * 
     */
    public Optional<String> dbId() {
        return Optional.ofNullable(this.dbId);
    }
    /**
     * @return The name of the DB node.
     * 
     */
    public Optional<String> dbNodeName() {
        return Optional.ofNullable(this.dbNodeName);
    }
    /**
     * @return The database packs licensed for the external Oracle Database.
     * 
     */
    public Optional<String> dbPacks() {
        return Optional.ofNullable(this.dbPacks);
    }
    /**
     * @return The role of the Oracle Database in Oracle Data Guard configuration.
     * 
     */
    public Optional<String> dbRole() {
        return Optional.ofNullable(this.dbRole);
    }
    /**
     * @return The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    public Optional<String> dbType() {
        return Optional.ofNullable(this.dbType);
    }
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public Optional<String> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }
    /**
     * @return (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    /**
     * @return The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    public Optional<String> gridHome() {
        return Optional.ofNullable(this.gridHome);
    }
    /**
     * @return The unique identifier of the PDB.
     * 
     */
    public Optional<String> guid() {
        return Optional.ofNullable(this.guid);
    }
    /**
     * @return The location of the DB home.
     * 
     */
    public Optional<String> homeDirectory() {
        return Optional.ofNullable(this.homeDirectory);
    }
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return The name of the ASM instance.
     * 
     */
    public Optional<String> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    public Optional<Boolean> isAutoEnablePluggableDatabase() {
        return Optional.ofNullable(this.isAutoEnablePluggableDatabase);
    }
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    public Optional<Boolean> isCluster() {
        return Optional.ofNullable(this.isCluster);
    }
    /**
     * @return Indicates whether the cluster is an Oracle Flex Cluster or not.
     * 
     */
    public Optional<Boolean> isFlexCluster() {
        return Optional.ofNullable(this.isFlexCluster);
    }
    /**
     * @return Indicates whether Oracle Flex ASM is enabled or not.
     * 
     */
    public Optional<Boolean> isFlexEnabled() {
        return Optional.ofNullable(this.isFlexEnabled);
    }
    /**
     * @return Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
     * 
     */
    public Optional<Boolean> isSelectedForMonitoring() {
        return Optional.ofNullable(this.isSelectedForMonitoring);
    }
    /**
     * @return The listener alias.
     * 
     */
    public Optional<String> listenerAlias() {
        return Optional.ofNullable(this.listenerAlias);
    }
    /**
     * @return The type of listener.
     * 
     */
    public Optional<String> listenerType() {
        return Optional.ofNullable(this.listenerType);
    }
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    public Optional<String> logDirectory() {
        return Optional.ofNullable(this.logDirectory);
    }
    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    public Optional<Double> memorySizeInGbs() {
        return Optional.ofNullable(this.memorySizeInGbs);
    }
    /**
     * @return The list of network address configurations of the external cluster.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations == null ? List.of() : this.networkConfigurations;
    }
    /**
     * @return The role of the cluster node.
     * 
     */
    public Optional<String> nodeRole() {
        return Optional.ofNullable(this.nodeRole);
    }
    /**
     * @return The location of the Oracle Cluster Registry (OCR) file.
     * 
     */
    public Optional<String> ocrFileLocation() {
        return Optional.ofNullable(this.ocrFileLocation);
    }
    /**
     * @return The Oracle home location of the listener.
     * 
     */
    public Optional<String> oracleHome() {
        return Optional.ofNullable(this.oracleHome);
    }
    /**
     * @return The list of Pluggable Databases.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases() {
        return this.pluggableDatabases == null ? List.of() : this.pluggableDatabases;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }
    /**
     * @return The list of Single Client Access Name (SCAN) configurations of the external cluster.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations() {
        return this.scanConfigurations == null ? List.of() : this.scanConfigurations;
    }
    /**
     * @return The state of the discovered DB system component.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    public Optional<String> traceDirectory() {
        return Optional.ofNullable(this.traceDirectory);
    }
    /**
     * @return The version of Oracle Clusterware running in the cluster.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }
    /**
     * @return The list of Virtual IP (VIP) configurations of the external cluster.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations() {
        return this.vipConfigurations == null ? List.of() : this.vipConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalDbSystemDiscoveryDiscoveredComponent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adrHomeDirectory;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents;
        private @Nullable Boolean canEnableAllCurrentPdbs;
        private @Nullable String clusterId;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances;
        private @Nullable String compartmentId;
        private @Nullable String componentId;
        private @Nullable String componentName;
        private @Nullable String componentType;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentConnector> connectors;
        private @Nullable String containerDatabaseId;
        private @Nullable Double cpuCoreCount;
        private @Nullable String crsBaseDirectory;
        private @Nullable String dbEdition;
        private @Nullable String dbId;
        private @Nullable String dbNodeName;
        private @Nullable String dbPacks;
        private @Nullable String dbRole;
        private @Nullable String dbType;
        private @Nullable String dbUniqueName;
        private @Nullable String dbVersion;
        private @Nullable String displayName;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints;
        private @Nullable String gridHome;
        private @Nullable String guid;
        private @Nullable String homeDirectory;
        private @Nullable String hostName;
        private @Nullable String instanceName;
        private @Nullable Boolean isAutoEnablePluggableDatabase;
        private @Nullable Boolean isCluster;
        private @Nullable Boolean isFlexCluster;
        private @Nullable Boolean isFlexEnabled;
        private @Nullable Boolean isSelectedForMonitoring;
        private @Nullable String listenerAlias;
        private @Nullable String listenerType;
        private @Nullable String logDirectory;
        private @Nullable Double memorySizeInGbs;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations;
        private @Nullable String nodeRole;
        private @Nullable String ocrFileLocation;
        private @Nullable String oracleHome;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases;
        private @Nullable String resourceId;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations;
        private @Nullable String status;
        private @Nullable String traceDirectory;
        private @Nullable String version;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations;
        public Builder() {}
        public Builder(ExternalDbSystemDiscoveryDiscoveredComponent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adrHomeDirectory = defaults.adrHomeDirectory;
    	      this.asmInstances = defaults.asmInstances;
    	      this.associatedComponents = defaults.associatedComponents;
    	      this.canEnableAllCurrentPdbs = defaults.canEnableAllCurrentPdbs;
    	      this.clusterId = defaults.clusterId;
    	      this.clusterInstances = defaults.clusterInstances;
    	      this.compartmentId = defaults.compartmentId;
    	      this.componentId = defaults.componentId;
    	      this.componentName = defaults.componentName;
    	      this.componentType = defaults.componentType;
    	      this.connectors = defaults.connectors;
    	      this.containerDatabaseId = defaults.containerDatabaseId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.crsBaseDirectory = defaults.crsBaseDirectory;
    	      this.dbEdition = defaults.dbEdition;
    	      this.dbId = defaults.dbId;
    	      this.dbNodeName = defaults.dbNodeName;
    	      this.dbPacks = defaults.dbPacks;
    	      this.dbRole = defaults.dbRole;
    	      this.dbType = defaults.dbType;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbVersion = defaults.dbVersion;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.gridHome = defaults.gridHome;
    	      this.guid = defaults.guid;
    	      this.homeDirectory = defaults.homeDirectory;
    	      this.hostName = defaults.hostName;
    	      this.instanceName = defaults.instanceName;
    	      this.isAutoEnablePluggableDatabase = defaults.isAutoEnablePluggableDatabase;
    	      this.isCluster = defaults.isCluster;
    	      this.isFlexCluster = defaults.isFlexCluster;
    	      this.isFlexEnabled = defaults.isFlexEnabled;
    	      this.isSelectedForMonitoring = defaults.isSelectedForMonitoring;
    	      this.listenerAlias = defaults.listenerAlias;
    	      this.listenerType = defaults.listenerType;
    	      this.logDirectory = defaults.logDirectory;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.nodeRole = defaults.nodeRole;
    	      this.ocrFileLocation = defaults.ocrFileLocation;
    	      this.oracleHome = defaults.oracleHome;
    	      this.pluggableDatabases = defaults.pluggableDatabases;
    	      this.resourceId = defaults.resourceId;
    	      this.scanConfigurations = defaults.scanConfigurations;
    	      this.status = defaults.status;
    	      this.traceDirectory = defaults.traceDirectory;
    	      this.version = defaults.version;
    	      this.vipConfigurations = defaults.vipConfigurations;
        }

        @CustomType.Setter
        public Builder adrHomeDirectory(@Nullable String adrHomeDirectory) {

            this.adrHomeDirectory = adrHomeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder asmInstances(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances) {

            this.asmInstances = asmInstances;
            return this;
        }
        public Builder asmInstances(ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance... asmInstances) {
            return asmInstances(List.of(asmInstances));
        }
        @CustomType.Setter
        public Builder associatedComponents(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents) {

            this.associatedComponents = associatedComponents;
            return this;
        }
        public Builder associatedComponents(ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent... associatedComponents) {
            return associatedComponents(List.of(associatedComponents));
        }
        @CustomType.Setter
        public Builder canEnableAllCurrentPdbs(@Nullable Boolean canEnableAllCurrentPdbs) {

            this.canEnableAllCurrentPdbs = canEnableAllCurrentPdbs;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(@Nullable String clusterId) {

            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterInstances(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances) {

            this.clusterInstances = clusterInstances;
            return this;
        }
        public Builder clusterInstances(ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance... clusterInstances) {
            return clusterInstances(List.of(clusterInstances));
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder componentId(@Nullable String componentId) {

            this.componentId = componentId;
            return this;
        }
        @CustomType.Setter
        public Builder componentName(@Nullable String componentName) {

            this.componentName = componentName;
            return this;
        }
        @CustomType.Setter
        public Builder componentType(@Nullable String componentType) {

            this.componentType = componentType;
            return this;
        }
        @CustomType.Setter
        public Builder connectors(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentConnector> connectors) {

            this.connectors = connectors;
            return this;
        }
        public Builder connectors(ExternalDbSystemDiscoveryDiscoveredComponentConnector... connectors) {
            return connectors(List.of(connectors));
        }
        @CustomType.Setter
        public Builder containerDatabaseId(@Nullable String containerDatabaseId) {

            this.containerDatabaseId = containerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(@Nullable Double cpuCoreCount) {

            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder crsBaseDirectory(@Nullable String crsBaseDirectory) {

            this.crsBaseDirectory = crsBaseDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder dbEdition(@Nullable String dbEdition) {

            this.dbEdition = dbEdition;
            return this;
        }
        @CustomType.Setter
        public Builder dbId(@Nullable String dbId) {

            this.dbId = dbId;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeName(@Nullable String dbNodeName) {

            this.dbNodeName = dbNodeName;
            return this;
        }
        @CustomType.Setter
        public Builder dbPacks(@Nullable String dbPacks) {

            this.dbPacks = dbPacks;
            return this;
        }
        @CustomType.Setter
        public Builder dbRole(@Nullable String dbRole) {

            this.dbRole = dbRole;
            return this;
        }
        @CustomType.Setter
        public Builder dbType(@Nullable String dbType) {

            this.dbType = dbType;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {

            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(@Nullable String dbVersion) {

            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints) {

            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(ExternalDbSystemDiscoveryDiscoveredComponentEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder gridHome(@Nullable String gridHome) {

            this.gridHome = gridHome;
            return this;
        }
        @CustomType.Setter
        public Builder guid(@Nullable String guid) {

            this.guid = guid;
            return this;
        }
        @CustomType.Setter
        public Builder homeDirectory(@Nullable String homeDirectory) {

            this.homeDirectory = homeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {

            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(@Nullable String instanceName) {

            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoEnablePluggableDatabase(@Nullable Boolean isAutoEnablePluggableDatabase) {

            this.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            return this;
        }
        @CustomType.Setter
        public Builder isCluster(@Nullable Boolean isCluster) {

            this.isCluster = isCluster;
            return this;
        }
        @CustomType.Setter
        public Builder isFlexCluster(@Nullable Boolean isFlexCluster) {

            this.isFlexCluster = isFlexCluster;
            return this;
        }
        @CustomType.Setter
        public Builder isFlexEnabled(@Nullable Boolean isFlexEnabled) {

            this.isFlexEnabled = isFlexEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSelectedForMonitoring(@Nullable Boolean isSelectedForMonitoring) {

            this.isSelectedForMonitoring = isSelectedForMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder listenerAlias(@Nullable String listenerAlias) {

            this.listenerAlias = listenerAlias;
            return this;
        }
        @CustomType.Setter
        public Builder listenerType(@Nullable String listenerType) {

            this.listenerType = listenerType;
            return this;
        }
        @CustomType.Setter
        public Builder logDirectory(@Nullable String logDirectory) {

            this.logDirectory = logDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(@Nullable Double memorySizeInGbs) {

            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations) {

            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder nodeRole(@Nullable String nodeRole) {

            this.nodeRole = nodeRole;
            return this;
        }
        @CustomType.Setter
        public Builder ocrFileLocation(@Nullable String ocrFileLocation) {

            this.ocrFileLocation = ocrFileLocation;
            return this;
        }
        @CustomType.Setter
        public Builder oracleHome(@Nullable String oracleHome) {

            this.oracleHome = oracleHome;
            return this;
        }
        @CustomType.Setter
        public Builder pluggableDatabases(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases) {

            this.pluggableDatabases = pluggableDatabases;
            return this;
        }
        public Builder pluggableDatabases(ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase... pluggableDatabases) {
            return pluggableDatabases(List.of(pluggableDatabases));
        }
        @CustomType.Setter
        public Builder resourceId(@Nullable String resourceId) {

            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder scanConfigurations(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations) {

            this.scanConfigurations = scanConfigurations;
            return this;
        }
        public Builder scanConfigurations(ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration... scanConfigurations) {
            return scanConfigurations(List.of(scanConfigurations));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder traceDirectory(@Nullable String traceDirectory) {

            this.traceDirectory = traceDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vipConfigurations(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations) {

            this.vipConfigurations = vipConfigurations;
            return this;
        }
        public Builder vipConfigurations(ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration... vipConfigurations) {
            return vipConfigurations(List.of(vipConfigurations));
        }
        public ExternalDbSystemDiscoveryDiscoveredComponent build() {
            final var _resultValue = new ExternalDbSystemDiscoveryDiscoveredComponent();
            _resultValue.adrHomeDirectory = adrHomeDirectory;
            _resultValue.asmInstances = asmInstances;
            _resultValue.associatedComponents = associatedComponents;
            _resultValue.canEnableAllCurrentPdbs = canEnableAllCurrentPdbs;
            _resultValue.clusterId = clusterId;
            _resultValue.clusterInstances = clusterInstances;
            _resultValue.compartmentId = compartmentId;
            _resultValue.componentId = componentId;
            _resultValue.componentName = componentName;
            _resultValue.componentType = componentType;
            _resultValue.connectors = connectors;
            _resultValue.containerDatabaseId = containerDatabaseId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.crsBaseDirectory = crsBaseDirectory;
            _resultValue.dbEdition = dbEdition;
            _resultValue.dbId = dbId;
            _resultValue.dbNodeName = dbNodeName;
            _resultValue.dbPacks = dbPacks;
            _resultValue.dbRole = dbRole;
            _resultValue.dbType = dbType;
            _resultValue.dbUniqueName = dbUniqueName;
            _resultValue.dbVersion = dbVersion;
            _resultValue.displayName = displayName;
            _resultValue.endpoints = endpoints;
            _resultValue.gridHome = gridHome;
            _resultValue.guid = guid;
            _resultValue.homeDirectory = homeDirectory;
            _resultValue.hostName = hostName;
            _resultValue.instanceName = instanceName;
            _resultValue.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            _resultValue.isCluster = isCluster;
            _resultValue.isFlexCluster = isFlexCluster;
            _resultValue.isFlexEnabled = isFlexEnabled;
            _resultValue.isSelectedForMonitoring = isSelectedForMonitoring;
            _resultValue.listenerAlias = listenerAlias;
            _resultValue.listenerType = listenerType;
            _resultValue.logDirectory = logDirectory;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.nodeRole = nodeRole;
            _resultValue.ocrFileLocation = ocrFileLocation;
            _resultValue.oracleHome = oracleHome;
            _resultValue.pluggableDatabases = pluggableDatabases;
            _resultValue.resourceId = resourceId;
            _resultValue.scanConfigurations = scanConfigurations;
            _resultValue.status = status;
            _resultValue.traceDirectory = traceDirectory;
            _resultValue.version = version;
            _resultValue.vipConfigurations = vipConfigurations;
            return _resultValue;
        }
    }
}
