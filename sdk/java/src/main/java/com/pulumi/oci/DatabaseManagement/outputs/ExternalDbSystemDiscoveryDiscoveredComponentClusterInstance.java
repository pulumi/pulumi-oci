// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance {
    /**
     * @return The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
     * 
     */
    private @Nullable String adrHomeDirectory;
    /**
     * @return The unique identifier of the Oracle cluster.
     * 
     */
    private @Nullable String clusterId;
    /**
     * @return The connector details used to connect to the external DB system component.
     * 
     */
    private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector> connectors;
    /**
     * @return The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    private @Nullable String crsBaseDirectory;
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return The role of the cluster node.
     * 
     */
    private @Nullable String nodeRole;

    private ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance() {}
    /**
     * @return The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
     * 
     */
    public Optional<String> adrHomeDirectory() {
        return Optional.ofNullable(this.adrHomeDirectory);
    }
    /**
     * @return The unique identifier of the Oracle cluster.
     * 
     */
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }
    /**
     * @return The connector details used to connect to the external DB system component.
     * 
     */
    public List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector> connectors() {
        return this.connectors == null ? List.of() : this.connectors;
    }
    /**
     * @return The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    public Optional<String> crsBaseDirectory() {
        return Optional.ofNullable(this.crsBaseDirectory);
    }
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return The role of the cluster node.
     * 
     */
    public Optional<String> nodeRole() {
        return Optional.ofNullable(this.nodeRole);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adrHomeDirectory;
        private @Nullable String clusterId;
        private @Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector> connectors;
        private @Nullable String crsBaseDirectory;
        private @Nullable String hostName;
        private @Nullable String nodeRole;
        public Builder() {}
        public Builder(ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adrHomeDirectory = defaults.adrHomeDirectory;
    	      this.clusterId = defaults.clusterId;
    	      this.connectors = defaults.connectors;
    	      this.crsBaseDirectory = defaults.crsBaseDirectory;
    	      this.hostName = defaults.hostName;
    	      this.nodeRole = defaults.nodeRole;
        }

        @CustomType.Setter
        public Builder adrHomeDirectory(@Nullable String adrHomeDirectory) {

            this.adrHomeDirectory = adrHomeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(@Nullable String clusterId) {

            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder connectors(@Nullable List<ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector> connectors) {

            this.connectors = connectors;
            return this;
        }
        public Builder connectors(ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector... connectors) {
            return connectors(List.of(connectors));
        }
        @CustomType.Setter
        public Builder crsBaseDirectory(@Nullable String crsBaseDirectory) {

            this.crsBaseDirectory = crsBaseDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {

            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder nodeRole(@Nullable String nodeRole) {

            this.nodeRole = nodeRole;
            return this;
        }
        public ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance build() {
            final var _resultValue = new ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance();
            _resultValue.adrHomeDirectory = adrHomeDirectory;
            _resultValue.clusterId = clusterId;
            _resultValue.connectors = connectors;
            _resultValue.crsBaseDirectory = crsBaseDirectory;
            _resultValue.hostName = hostName;
            _resultValue.nodeRole = nodeRole;
            return _resultValue;
        }
    }
}
