// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExternalExadataStorageConnectorCredentialInfo {
    /**
     * @return (Updatable) The password of the user.
     * 
     */
    private String password;
    /**
     * @return (Updatable) The full path of the SSL truststore location in the agent.
     * 
     */
    private @Nullable String sslTrustStoreLocation;
    /**
     * @return (Updatable) The password of the SSL truststore location in the agent.
     * 
     */
    private @Nullable String sslTrustStorePassword;
    /**
     * @return (Updatable) The SSL truststore type.
     * 
     */
    private @Nullable String sslTrustStoreType;
    /**
     * @return (Updatable) The name of the user.
     * 
     */
    private String username;

    private ExternalExadataStorageConnectorCredentialInfo() {}
    /**
     * @return (Updatable) The password of the user.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return (Updatable) The full path of the SSL truststore location in the agent.
     * 
     */
    public Optional<String> sslTrustStoreLocation() {
        return Optional.ofNullable(this.sslTrustStoreLocation);
    }
    /**
     * @return (Updatable) The password of the SSL truststore location in the agent.
     * 
     */
    public Optional<String> sslTrustStorePassword() {
        return Optional.ofNullable(this.sslTrustStorePassword);
    }
    /**
     * @return (Updatable) The SSL truststore type.
     * 
     */
    public Optional<String> sslTrustStoreType() {
        return Optional.ofNullable(this.sslTrustStoreType);
    }
    /**
     * @return (Updatable) The name of the user.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalExadataStorageConnectorCredentialInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String password;
        private @Nullable String sslTrustStoreLocation;
        private @Nullable String sslTrustStorePassword;
        private @Nullable String sslTrustStoreType;
        private String username;
        public Builder() {}
        public Builder(ExternalExadataStorageConnectorCredentialInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.sslTrustStoreLocation = defaults.sslTrustStoreLocation;
    	      this.sslTrustStorePassword = defaults.sslTrustStorePassword;
    	      this.sslTrustStoreType = defaults.sslTrustStoreType;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorCredentialInfo", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sslTrustStoreLocation(@Nullable String sslTrustStoreLocation) {

            this.sslTrustStoreLocation = sslTrustStoreLocation;
            return this;
        }
        @CustomType.Setter
        public Builder sslTrustStorePassword(@Nullable String sslTrustStorePassword) {

            this.sslTrustStorePassword = sslTrustStorePassword;
            return this;
        }
        @CustomType.Setter
        public Builder sslTrustStoreType(@Nullable String sslTrustStoreType) {

            this.sslTrustStoreType = sslTrustStoreType;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("ExternalExadataStorageConnectorCredentialInfo", "username");
            }
            this.username = username;
            return this;
        }
        public ExternalExadataStorageConnectorCredentialInfo build() {
            final var _resultValue = new ExternalExadataStorageConnectorCredentialInfo();
            _resultValue.password = password;
            _resultValue.sslTrustStoreLocation = sslTrustStoreLocation;
            _resultValue.sslTrustStorePassword = sslTrustStorePassword;
            _resultValue.sslTrustStoreType = sslTrustStoreType;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
