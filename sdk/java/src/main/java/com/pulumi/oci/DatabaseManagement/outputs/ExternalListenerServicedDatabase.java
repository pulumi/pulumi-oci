// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExternalListenerServicedDatabase {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external database resides.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    private @Nullable String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return The unique name of the external database.
     * 
     */
    private @Nullable String dbUniqueName;
    /**
     * @return The user-friendly name for the database. The name does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates whether the database is a Managed Database or not.
     * 
     */
    private @Nullable Boolean isManaged;

    private ExternalListenerServicedDatabase() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external database resides.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    public Optional<String> databaseSubType() {
        return Optional.ofNullable(this.databaseSubType);
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return The unique name of the external database.
     * 
     */
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return The user-friendly name for the database. The name does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether the database is a Managed Database or not.
     * 
     */
    public Optional<Boolean> isManaged() {
        return Optional.ofNullable(this.isManaged);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalListenerServicedDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String databaseSubType;
        private @Nullable String databaseType;
        private @Nullable String dbUniqueName;
        private @Nullable String displayName;
        private @Nullable String id;
        private @Nullable Boolean isManaged;
        public Builder() {}
        public Builder(ExternalListenerServicedDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.isManaged = defaults.isManaged;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(@Nullable String databaseSubType) {
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isManaged(@Nullable Boolean isManaged) {
            this.isManaged = isManaged;
            return this;
        }
        public ExternalListenerServicedDatabase build() {
            final var _resultValue = new ExternalListenerServicedDatabase();
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseSubType = databaseSubType;
            _resultValue.databaseType = databaseType;
            _resultValue.dbUniqueName = dbUniqueName;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.isManaged = isManaged;
            return _resultValue;
        }
    }
}
