// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetails;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails {
    /**
     * @return The connector details required to connect to an Oracle cloud database.
     * 
     */
    private @Nullable ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetails connectorDetails;
    /**
     * @return The name of the Database Management feature.
     * 
     */
    private String feature;
    /**
     * @return The Oracle license model that applies to the external database.
     * 
     */
    private @Nullable String licenseModel;

    private ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails() {}
    /**
     * @return The connector details required to connect to an Oracle cloud database.
     * 
     */
    public Optional<ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetails> connectorDetails() {
        return Optional.ofNullable(this.connectorDetails);
    }
    /**
     * @return The name of the Database Management feature.
     * 
     */
    public String feature() {
        return this.feature;
    }
    /**
     * @return The Oracle license model that applies to the external database.
     * 
     */
    public Optional<String> licenseModel() {
        return Optional.ofNullable(this.licenseModel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetails connectorDetails;
        private String feature;
        private @Nullable String licenseModel;
        public Builder() {}
        public Builder(ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorDetails = defaults.connectorDetails;
    	      this.feature = defaults.feature;
    	      this.licenseModel = defaults.licenseModel;
        }

        @CustomType.Setter
        public Builder connectorDetails(@Nullable ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetails connectorDetails) {

            this.connectorDetails = connectorDetails;
            return this;
        }
        @CustomType.Setter
        public Builder feature(String feature) {
            if (feature == null) {
              throw new MissingRequiredPropertyException("ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails", "feature");
            }
            this.feature = feature;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(@Nullable String licenseModel) {

            this.licenseModel = licenseModel;
            return this;
        }
        public ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails build() {
            final var _resultValue = new ExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails();
            _resultValue.connectorDetails = connectorDetails;
            _resultValue.feature = feature;
            _resultValue.licenseModel = licenseModel;
            return _resultValue;
        }
    }
}
