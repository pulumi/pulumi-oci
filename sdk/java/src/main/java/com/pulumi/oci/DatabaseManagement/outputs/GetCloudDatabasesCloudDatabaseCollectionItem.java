// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDatabasesCloudDatabaseCollectionItemDbManagementConfig;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDatabasesCloudDatabaseCollectionItemDbSystemInfo;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDatabasesCloudDatabaseCollectionItemDbmgmtFeatureConfig;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDatabasesCloudDatabaseCollectionItemInstanceDetail;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCloudDatabasesCloudDatabaseCollectionItem {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    private String cloudDbHomeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The operating system of database.
     * 
     */
    private String databasePlatformName;
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or Non-container Database.
     * 
     */
    private String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private String databaseType;
    /**
     * @return The Oracle database version.
     * 
     */
    private String databaseVersion;
    /**
     * @return The configuration details of Database Management for a cloud DB system.
     * 
     */
    private List<GetCloudDatabasesCloudDatabaseCollectionItemDbManagementConfig> dbManagementConfigs;
    /**
     * @return The basic information about a cloud DB system.
     * 
     */
    private List<GetCloudDatabasesCloudDatabaseCollectionItemDbSystemInfo> dbSystemInfos;
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    private String dbUniqueName;
    /**
     * @return The list of feature configurations
     * 
     */
    private List<GetCloudDatabasesCloudDatabaseCollectionItemDbmgmtFeatureConfig> dbmgmtFeatureConfigs;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private String id;
    /**
     * @return The list of database instances if the database is a RAC database.
     * 
     */
    private List<GetCloudDatabasesCloudDatabaseCollectionItemInstanceDetail> instanceDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database (CDB) if this is a Pluggable Database (PDB).
     * 
     */
    private String parentContainerDatabaseId;
    /**
     * @return The current lifecycle state of the external database resource.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    private String timeCreated;

    private GetCloudDatabasesCloudDatabaseCollectionItem() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    public String cloudDbHomeId() {
        return this.cloudDbHomeId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The operating system of database.
     * 
     */
    public String databasePlatformName() {
        return this.databasePlatformName;
    }
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or Non-container Database.
     * 
     */
    public String databaseSubType() {
        return this.databaseSubType;
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The Oracle database version.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return The configuration details of Database Management for a cloud DB system.
     * 
     */
    public List<GetCloudDatabasesCloudDatabaseCollectionItemDbManagementConfig> dbManagementConfigs() {
        return this.dbManagementConfigs;
    }
    /**
     * @return The basic information about a cloud DB system.
     * 
     */
    public List<GetCloudDatabasesCloudDatabaseCollectionItemDbSystemInfo> dbSystemInfos() {
        return this.dbSystemInfos;
    }
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * @return The list of feature configurations
     * 
     */
    public List<GetCloudDatabasesCloudDatabaseCollectionItemDbmgmtFeatureConfig> dbmgmtFeatureConfigs() {
        return this.dbmgmtFeatureConfigs;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of database instances if the database is a RAC database.
     * 
     */
    public List<GetCloudDatabasesCloudDatabaseCollectionItemInstanceDetail> instanceDetails() {
        return this.instanceDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database (CDB) if this is a Pluggable Database (PDB).
     * 
     */
    public String parentContainerDatabaseId() {
        return this.parentContainerDatabaseId;
    }
    /**
     * @return The current lifecycle state of the external database resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudDatabasesCloudDatabaseCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cloudDbHomeId;
        private String compartmentId;
        private String databasePlatformName;
        private String databaseSubType;
        private String databaseType;
        private String databaseVersion;
        private List<GetCloudDatabasesCloudDatabaseCollectionItemDbManagementConfig> dbManagementConfigs;
        private List<GetCloudDatabasesCloudDatabaseCollectionItemDbSystemInfo> dbSystemInfos;
        private String dbUniqueName;
        private List<GetCloudDatabasesCloudDatabaseCollectionItemDbmgmtFeatureConfig> dbmgmtFeatureConfigs;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetCloudDatabasesCloudDatabaseCollectionItemInstanceDetail> instanceDetails;
        private String parentContainerDatabaseId;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        public Builder() {}
        public Builder(GetCloudDatabasesCloudDatabaseCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudDbHomeId = defaults.cloudDbHomeId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databasePlatformName = defaults.databasePlatformName;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.dbManagementConfigs = defaults.dbManagementConfigs;
    	      this.dbSystemInfos = defaults.dbSystemInfos;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbmgmtFeatureConfigs = defaults.dbmgmtFeatureConfigs;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.instanceDetails = defaults.instanceDetails;
    	      this.parentContainerDatabaseId = defaults.parentContainerDatabaseId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder cloudDbHomeId(String cloudDbHomeId) {
            if (cloudDbHomeId == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "cloudDbHomeId");
            }
            this.cloudDbHomeId = cloudDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databasePlatformName(String databasePlatformName) {
            if (databasePlatformName == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "databasePlatformName");
            }
            this.databasePlatformName = databasePlatformName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(String databaseSubType) {
            if (databaseSubType == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "databaseSubType");
            }
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            if (databaseVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "databaseVersion");
            }
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbManagementConfigs(List<GetCloudDatabasesCloudDatabaseCollectionItemDbManagementConfig> dbManagementConfigs) {
            if (dbManagementConfigs == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "dbManagementConfigs");
            }
            this.dbManagementConfigs = dbManagementConfigs;
            return this;
        }
        public Builder dbManagementConfigs(GetCloudDatabasesCloudDatabaseCollectionItemDbManagementConfig... dbManagementConfigs) {
            return dbManagementConfigs(List.of(dbManagementConfigs));
        }
        @CustomType.Setter
        public Builder dbSystemInfos(List<GetCloudDatabasesCloudDatabaseCollectionItemDbSystemInfo> dbSystemInfos) {
            if (dbSystemInfos == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "dbSystemInfos");
            }
            this.dbSystemInfos = dbSystemInfos;
            return this;
        }
        public Builder dbSystemInfos(GetCloudDatabasesCloudDatabaseCollectionItemDbSystemInfo... dbSystemInfos) {
            return dbSystemInfos(List.of(dbSystemInfos));
        }
        @CustomType.Setter
        public Builder dbUniqueName(String dbUniqueName) {
            if (dbUniqueName == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "dbUniqueName");
            }
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dbmgmtFeatureConfigs(List<GetCloudDatabasesCloudDatabaseCollectionItemDbmgmtFeatureConfig> dbmgmtFeatureConfigs) {
            if (dbmgmtFeatureConfigs == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "dbmgmtFeatureConfigs");
            }
            this.dbmgmtFeatureConfigs = dbmgmtFeatureConfigs;
            return this;
        }
        public Builder dbmgmtFeatureConfigs(GetCloudDatabasesCloudDatabaseCollectionItemDbmgmtFeatureConfig... dbmgmtFeatureConfigs) {
            return dbmgmtFeatureConfigs(List.of(dbmgmtFeatureConfigs));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceDetails(List<GetCloudDatabasesCloudDatabaseCollectionItemInstanceDetail> instanceDetails) {
            if (instanceDetails == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "instanceDetails");
            }
            this.instanceDetails = instanceDetails;
            return this;
        }
        public Builder instanceDetails(GetCloudDatabasesCloudDatabaseCollectionItemInstanceDetail... instanceDetails) {
            return instanceDetails(List.of(instanceDetails));
        }
        @CustomType.Setter
        public Builder parentContainerDatabaseId(String parentContainerDatabaseId) {
            if (parentContainerDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "parentContainerDatabaseId");
            }
            this.parentContainerDatabaseId = parentContainerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetCloudDatabasesCloudDatabaseCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        public GetCloudDatabasesCloudDatabaseCollectionItem build() {
            final var _resultValue = new GetCloudDatabasesCloudDatabaseCollectionItem();
            _resultValue.cloudDbHomeId = cloudDbHomeId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.databasePlatformName = databasePlatformName;
            _resultValue.databaseSubType = databaseSubType;
            _resultValue.databaseType = databaseType;
            _resultValue.databaseVersion = databaseVersion;
            _resultValue.dbManagementConfigs = dbManagementConfigs;
            _resultValue.dbSystemInfos = dbSystemInfos;
            _resultValue.dbUniqueName = dbUniqueName;
            _resultValue.dbmgmtFeatureConfigs = dbmgmtFeatureConfigs;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.instanceDetails = instanceDetails;
            _resultValue.parentContainerDatabaseId = parentContainerDatabaseId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            return _resultValue;
        }
    }
}
