// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentAsmInstance;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentAssociatedComponent;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentClusterInstance;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentConnector;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentDbInstance;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentEndpoint;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentNetworkConfiguration;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentPluggableDatabase;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentScanConfiguration;
import com.pulumi.oci.DatabaseManagement.outputs.GetCloudDbSystemDiscoveryDiscoveredComponentVipConfiguration;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCloudDbSystemDiscoveryDiscoveredComponent {
    /**
     * @return The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
     * 
     */
    private String adrHomeDirectory;
    /**
     * @return The list of asm instances for the cloud Asm.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances;
    /**
     * @return The list of associated components.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents;
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    private Boolean canEnableAllCurrentPdbs;
    /**
     * @return The unique identifier of the Oracle cluster.
     * 
     */
    private String clusterId;
    /**
     * @return The list of cluster instances for the cloud cluster.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The identifier of the discovered DB system component.
     * 
     */
    private String componentId;
    /**
     * @return The name of the discovered DB system component.
     * 
     */
    private String componentName;
    /**
     * @return The component type.
     * 
     */
    private String componentType;
    /**
     * @return The connector details used to connect to the cloud DB system component.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentConnector> connectors;
    /**
     * @return The unique identifier of the parent Container Database (CDB).
     * 
     */
    private String containerDatabaseId;
    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    private Double cpuCoreCount;
    /**
     * @return The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    private String crsBaseDirectory;
    /**
     * @return The Oracle Database edition.
     * 
     */
    private String dbEdition;
    /**
     * @return The Oracle Database ID.
     * 
     */
    private String dbId;
    /**
     * @return The list of database instances.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentDbInstance> dbInstances;
    /**
     * @return The name of the DB node.
     * 
     */
    private String dbNodeName;
    /**
     * @return The database packs licensed for the cloud Oracle Database.
     * 
     */
    private String dbPacks;
    /**
     * @return The role of the Oracle Database in Oracle Data Guard configuration.
     * 
     */
    private String dbRole;
    /**
     * @return The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    private String dbType;
    /**
     * @return The `DB_UNIQUE_NAME` of the cloud database.
     * 
     */
    private String dbUniqueName;
    /**
     * @return The Oracle Database version.
     * 
     */
    private String dbVersion;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Dbaas Oracle Cloud Infrastructure resource matching the discovered DB system component.
     * 
     */
    private String dbaasId;
    /**
     * @return The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    private String displayName;
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints;
    /**
     * @return The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    private String gridHome;
    /**
     * @return The unique identifier of the PDB.
     * 
     */
    private String guid;
    /**
     * @return The location of the DB home.
     * 
     */
    private String homeDirectory;
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    private String hostName;
    /**
     * @return The name of the ASM instance.
     * 
     */
    private String instanceName;
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    private Boolean isAutoEnablePluggableDatabase;
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    private Boolean isCluster;
    /**
     * @return Indicates whether the cluster is an Oracle Flex Cluster or not.
     * 
     */
    private Boolean isFlexCluster;
    /**
     * @return Indicates whether Oracle Flex ASM is enabled or not.
     * 
     */
    private Boolean isFlexEnabled;
    /**
     * @return Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
     * 
     */
    private Boolean isSelectedForMonitoring;
    /**
     * @return The listener alias.
     * 
     */
    private String listenerAlias;
    /**
     * @return The type of listener.
     * 
     */
    private String listenerType;
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    private String logDirectory;
    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    private Double memorySizeInGbs;
    /**
     * @return The list of network address configurations of the cloud cluster.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations;
    /**
     * @return The name of the node with the VIP.
     * 
     */
    private String nodeName;
    /**
     * @return The role of the cluster node.
     * 
     */
    private String nodeRole;
    /**
     * @return The location of the Oracle Cluster Registry (OCR) file.
     * 
     */
    private String ocrFileLocation;
    /**
     * @return The Oracle home location of the DB instance.
     * 
     */
    private String oracleHome;
    /**
     * @return The list of Pluggable Databases.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
     * 
     */
    private String resourceId;
    /**
     * @return The list of Single Client Access Name (SCAN) configurations of the cloud cluster.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations;
    /**
     * @return The state of the discovered DB system component.
     * 
     */
    private String status;
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    private String traceDirectory;
    /**
     * @return The version of Oracle Clusterware running in the cluster.
     * 
     */
    private String version;
    /**
     * @return The list of Virtual IP (VIP) configurations of the cloud cluster.
     * 
     */
    private List<GetCloudDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations;

    private GetCloudDbSystemDiscoveryDiscoveredComponent() {}
    /**
     * @return The Automatic Diagnostic Repository (ADR) home directory for the DB instance.
     * 
     */
    public String adrHomeDirectory() {
        return this.adrHomeDirectory;
    }
    /**
     * @return The list of asm instances for the cloud Asm.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances() {
        return this.asmInstances;
    }
    /**
     * @return The list of associated components.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents() {
        return this.associatedComponents;
    }
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
     * 
     */
    public Boolean canEnableAllCurrentPdbs() {
        return this.canEnableAllCurrentPdbs;
    }
    /**
     * @return The unique identifier of the Oracle cluster.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The list of cluster instances for the cloud cluster.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances() {
        return this.clusterInstances;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The identifier of the discovered DB system component.
     * 
     */
    public String componentId() {
        return this.componentId;
    }
    /**
     * @return The name of the discovered DB system component.
     * 
     */
    public String componentName() {
        return this.componentName;
    }
    /**
     * @return The component type.
     * 
     */
    public String componentType() {
        return this.componentType;
    }
    /**
     * @return The connector details used to connect to the cloud DB system component.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentConnector> connectors() {
        return this.connectors;
    }
    /**
     * @return The unique identifier of the parent Container Database (CDB).
     * 
     */
    public String containerDatabaseId() {
        return this.containerDatabaseId;
    }
    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    public Double cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The Oracle base location of Cluster Ready Services (CRS).
     * 
     */
    public String crsBaseDirectory() {
        return this.crsBaseDirectory;
    }
    /**
     * @return The Oracle Database edition.
     * 
     */
    public String dbEdition() {
        return this.dbEdition;
    }
    /**
     * @return The Oracle Database ID.
     * 
     */
    public String dbId() {
        return this.dbId;
    }
    /**
     * @return The list of database instances.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentDbInstance> dbInstances() {
        return this.dbInstances;
    }
    /**
     * @return The name of the DB node.
     * 
     */
    public String dbNodeName() {
        return this.dbNodeName;
    }
    /**
     * @return The database packs licensed for the cloud Oracle Database.
     * 
     */
    public String dbPacks() {
        return this.dbPacks;
    }
    /**
     * @return The role of the Oracle Database in Oracle Data Guard configuration.
     * 
     */
    public String dbRole() {
        return this.dbRole;
    }
    /**
     * @return The type of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    public String dbType() {
        return this.dbType;
    }
    /**
     * @return The `DB_UNIQUE_NAME` of the cloud database.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Dbaas Oracle Cloud Infrastructure resource matching the discovered DB system component.
     * 
     */
    public String dbaasId() {
        return this.dbaasId;
    }
    /**
     * @return The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    public String gridHome() {
        return this.gridHome;
    }
    /**
     * @return The unique identifier of the PDB.
     * 
     */
    public String guid() {
        return this.guid;
    }
    /**
     * @return The location of the DB home.
     * 
     */
    public String homeDirectory() {
        return this.homeDirectory;
    }
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The name of the ASM instance.
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
     * 
     */
    public Boolean isAutoEnablePluggableDatabase() {
        return this.isAutoEnablePluggableDatabase;
    }
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    public Boolean isCluster() {
        return this.isCluster;
    }
    /**
     * @return Indicates whether the cluster is an Oracle Flex Cluster or not.
     * 
     */
    public Boolean isFlexCluster() {
        return this.isFlexCluster;
    }
    /**
     * @return Indicates whether Oracle Flex ASM is enabled or not.
     * 
     */
    public Boolean isFlexEnabled() {
        return this.isFlexEnabled;
    }
    /**
     * @return Indicates whether the DB system component should be provisioned as an Oracle Cloud Infrastructure resource or not.
     * 
     */
    public Boolean isSelectedForMonitoring() {
        return this.isSelectedForMonitoring;
    }
    /**
     * @return The listener alias.
     * 
     */
    public String listenerAlias() {
        return this.listenerAlias;
    }
    /**
     * @return The type of listener.
     * 
     */
    public String listenerType() {
        return this.listenerType;
    }
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    public String logDirectory() {
        return this.logDirectory;
    }
    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    public Double memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The list of network address configurations of the cloud cluster.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return The name of the node with the VIP.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * @return The role of the cluster node.
     * 
     */
    public String nodeRole() {
        return this.nodeRole;
    }
    /**
     * @return The location of the Oracle Cluster Registry (OCR) file.
     * 
     */
    public String ocrFileLocation() {
        return this.ocrFileLocation;
    }
    /**
     * @return The Oracle home location of the DB instance.
     * 
     */
    public String oracleHome() {
        return this.oracleHome;
    }
    /**
     * @return The list of Pluggable Databases.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases() {
        return this.pluggableDatabases;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the existing Oracle Cloud Infrastructure resource matching the discovered DB system.
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return The list of Single Client Access Name (SCAN) configurations of the cloud cluster.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations() {
        return this.scanConfigurations;
    }
    /**
     * @return The state of the discovered DB system component.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    public String traceDirectory() {
        return this.traceDirectory;
    }
    /**
     * @return The version of Oracle Clusterware running in the cluster.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The list of Virtual IP (VIP) configurations of the cloud cluster.
     * 
     */
    public List<GetCloudDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations() {
        return this.vipConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudDbSystemDiscoveryDiscoveredComponent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adrHomeDirectory;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents;
        private Boolean canEnableAllCurrentPdbs;
        private String clusterId;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances;
        private String compartmentId;
        private String componentId;
        private String componentName;
        private String componentType;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentConnector> connectors;
        private String containerDatabaseId;
        private Double cpuCoreCount;
        private String crsBaseDirectory;
        private String dbEdition;
        private String dbId;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentDbInstance> dbInstances;
        private String dbNodeName;
        private String dbPacks;
        private String dbRole;
        private String dbType;
        private String dbUniqueName;
        private String dbVersion;
        private String dbaasId;
        private String displayName;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints;
        private String gridHome;
        private String guid;
        private String homeDirectory;
        private String hostName;
        private String instanceName;
        private Boolean isAutoEnablePluggableDatabase;
        private Boolean isCluster;
        private Boolean isFlexCluster;
        private Boolean isFlexEnabled;
        private Boolean isSelectedForMonitoring;
        private String listenerAlias;
        private String listenerType;
        private String logDirectory;
        private Double memorySizeInGbs;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations;
        private String nodeName;
        private String nodeRole;
        private String ocrFileLocation;
        private String oracleHome;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases;
        private String resourceId;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations;
        private String status;
        private String traceDirectory;
        private String version;
        private List<GetCloudDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations;
        public Builder() {}
        public Builder(GetCloudDbSystemDiscoveryDiscoveredComponent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adrHomeDirectory = defaults.adrHomeDirectory;
    	      this.asmInstances = defaults.asmInstances;
    	      this.associatedComponents = defaults.associatedComponents;
    	      this.canEnableAllCurrentPdbs = defaults.canEnableAllCurrentPdbs;
    	      this.clusterId = defaults.clusterId;
    	      this.clusterInstances = defaults.clusterInstances;
    	      this.compartmentId = defaults.compartmentId;
    	      this.componentId = defaults.componentId;
    	      this.componentName = defaults.componentName;
    	      this.componentType = defaults.componentType;
    	      this.connectors = defaults.connectors;
    	      this.containerDatabaseId = defaults.containerDatabaseId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.crsBaseDirectory = defaults.crsBaseDirectory;
    	      this.dbEdition = defaults.dbEdition;
    	      this.dbId = defaults.dbId;
    	      this.dbInstances = defaults.dbInstances;
    	      this.dbNodeName = defaults.dbNodeName;
    	      this.dbPacks = defaults.dbPacks;
    	      this.dbRole = defaults.dbRole;
    	      this.dbType = defaults.dbType;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.dbVersion = defaults.dbVersion;
    	      this.dbaasId = defaults.dbaasId;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.gridHome = defaults.gridHome;
    	      this.guid = defaults.guid;
    	      this.homeDirectory = defaults.homeDirectory;
    	      this.hostName = defaults.hostName;
    	      this.instanceName = defaults.instanceName;
    	      this.isAutoEnablePluggableDatabase = defaults.isAutoEnablePluggableDatabase;
    	      this.isCluster = defaults.isCluster;
    	      this.isFlexCluster = defaults.isFlexCluster;
    	      this.isFlexEnabled = defaults.isFlexEnabled;
    	      this.isSelectedForMonitoring = defaults.isSelectedForMonitoring;
    	      this.listenerAlias = defaults.listenerAlias;
    	      this.listenerType = defaults.listenerType;
    	      this.logDirectory = defaults.logDirectory;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.nodeName = defaults.nodeName;
    	      this.nodeRole = defaults.nodeRole;
    	      this.ocrFileLocation = defaults.ocrFileLocation;
    	      this.oracleHome = defaults.oracleHome;
    	      this.pluggableDatabases = defaults.pluggableDatabases;
    	      this.resourceId = defaults.resourceId;
    	      this.scanConfigurations = defaults.scanConfigurations;
    	      this.status = defaults.status;
    	      this.traceDirectory = defaults.traceDirectory;
    	      this.version = defaults.version;
    	      this.vipConfigurations = defaults.vipConfigurations;
        }

        @CustomType.Setter
        public Builder adrHomeDirectory(String adrHomeDirectory) {
            if (adrHomeDirectory == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "adrHomeDirectory");
            }
            this.adrHomeDirectory = adrHomeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder asmInstances(List<GetCloudDbSystemDiscoveryDiscoveredComponentAsmInstance> asmInstances) {
            if (asmInstances == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "asmInstances");
            }
            this.asmInstances = asmInstances;
            return this;
        }
        public Builder asmInstances(GetCloudDbSystemDiscoveryDiscoveredComponentAsmInstance... asmInstances) {
            return asmInstances(List.of(asmInstances));
        }
        @CustomType.Setter
        public Builder associatedComponents(List<GetCloudDbSystemDiscoveryDiscoveredComponentAssociatedComponent> associatedComponents) {
            if (associatedComponents == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "associatedComponents");
            }
            this.associatedComponents = associatedComponents;
            return this;
        }
        public Builder associatedComponents(GetCloudDbSystemDiscoveryDiscoveredComponentAssociatedComponent... associatedComponents) {
            return associatedComponents(List.of(associatedComponents));
        }
        @CustomType.Setter
        public Builder canEnableAllCurrentPdbs(Boolean canEnableAllCurrentPdbs) {
            if (canEnableAllCurrentPdbs == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "canEnableAllCurrentPdbs");
            }
            this.canEnableAllCurrentPdbs = canEnableAllCurrentPdbs;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterInstances(List<GetCloudDbSystemDiscoveryDiscoveredComponentClusterInstance> clusterInstances) {
            if (clusterInstances == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "clusterInstances");
            }
            this.clusterInstances = clusterInstances;
            return this;
        }
        public Builder clusterInstances(GetCloudDbSystemDiscoveryDiscoveredComponentClusterInstance... clusterInstances) {
            return clusterInstances(List.of(clusterInstances));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder componentId(String componentId) {
            if (componentId == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "componentId");
            }
            this.componentId = componentId;
            return this;
        }
        @CustomType.Setter
        public Builder componentName(String componentName) {
            if (componentName == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "componentName");
            }
            this.componentName = componentName;
            return this;
        }
        @CustomType.Setter
        public Builder componentType(String componentType) {
            if (componentType == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "componentType");
            }
            this.componentType = componentType;
            return this;
        }
        @CustomType.Setter
        public Builder connectors(List<GetCloudDbSystemDiscoveryDiscoveredComponentConnector> connectors) {
            if (connectors == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "connectors");
            }
            this.connectors = connectors;
            return this;
        }
        public Builder connectors(GetCloudDbSystemDiscoveryDiscoveredComponentConnector... connectors) {
            return connectors(List.of(connectors));
        }
        @CustomType.Setter
        public Builder containerDatabaseId(String containerDatabaseId) {
            if (containerDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "containerDatabaseId");
            }
            this.containerDatabaseId = containerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Double cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder crsBaseDirectory(String crsBaseDirectory) {
            if (crsBaseDirectory == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "crsBaseDirectory");
            }
            this.crsBaseDirectory = crsBaseDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder dbEdition(String dbEdition) {
            if (dbEdition == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbEdition");
            }
            this.dbEdition = dbEdition;
            return this;
        }
        @CustomType.Setter
        public Builder dbId(String dbId) {
            if (dbId == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbId");
            }
            this.dbId = dbId;
            return this;
        }
        @CustomType.Setter
        public Builder dbInstances(List<GetCloudDbSystemDiscoveryDiscoveredComponentDbInstance> dbInstances) {
            if (dbInstances == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbInstances");
            }
            this.dbInstances = dbInstances;
            return this;
        }
        public Builder dbInstances(GetCloudDbSystemDiscoveryDiscoveredComponentDbInstance... dbInstances) {
            return dbInstances(List.of(dbInstances));
        }
        @CustomType.Setter
        public Builder dbNodeName(String dbNodeName) {
            if (dbNodeName == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbNodeName");
            }
            this.dbNodeName = dbNodeName;
            return this;
        }
        @CustomType.Setter
        public Builder dbPacks(String dbPacks) {
            if (dbPacks == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbPacks");
            }
            this.dbPacks = dbPacks;
            return this;
        }
        @CustomType.Setter
        public Builder dbRole(String dbRole) {
            if (dbRole == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbRole");
            }
            this.dbRole = dbRole;
            return this;
        }
        @CustomType.Setter
        public Builder dbType(String dbType) {
            if (dbType == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbType");
            }
            this.dbType = dbType;
            return this;
        }
        @CustomType.Setter
        public Builder dbUniqueName(String dbUniqueName) {
            if (dbUniqueName == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbUniqueName");
            }
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            if (dbVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbVersion");
            }
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbaasId(String dbaasId) {
            if (dbaasId == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "dbaasId");
            }
            this.dbaasId = dbaasId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(List<GetCloudDbSystemDiscoveryDiscoveredComponentEndpoint> endpoints) {
            if (endpoints == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "endpoints");
            }
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(GetCloudDbSystemDiscoveryDiscoveredComponentEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder gridHome(String gridHome) {
            if (gridHome == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "gridHome");
            }
            this.gridHome = gridHome;
            return this;
        }
        @CustomType.Setter
        public Builder guid(String guid) {
            if (guid == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "guid");
            }
            this.guid = guid;
            return this;
        }
        @CustomType.Setter
        public Builder homeDirectory(String homeDirectory) {
            if (homeDirectory == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "homeDirectory");
            }
            this.homeDirectory = homeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoEnablePluggableDatabase(Boolean isAutoEnablePluggableDatabase) {
            if (isAutoEnablePluggableDatabase == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "isAutoEnablePluggableDatabase");
            }
            this.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            return this;
        }
        @CustomType.Setter
        public Builder isCluster(Boolean isCluster) {
            if (isCluster == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "isCluster");
            }
            this.isCluster = isCluster;
            return this;
        }
        @CustomType.Setter
        public Builder isFlexCluster(Boolean isFlexCluster) {
            if (isFlexCluster == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "isFlexCluster");
            }
            this.isFlexCluster = isFlexCluster;
            return this;
        }
        @CustomType.Setter
        public Builder isFlexEnabled(Boolean isFlexEnabled) {
            if (isFlexEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "isFlexEnabled");
            }
            this.isFlexEnabled = isFlexEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSelectedForMonitoring(Boolean isSelectedForMonitoring) {
            if (isSelectedForMonitoring == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "isSelectedForMonitoring");
            }
            this.isSelectedForMonitoring = isSelectedForMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder listenerAlias(String listenerAlias) {
            if (listenerAlias == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "listenerAlias");
            }
            this.listenerAlias = listenerAlias;
            return this;
        }
        @CustomType.Setter
        public Builder listenerType(String listenerType) {
            if (listenerType == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "listenerType");
            }
            this.listenerType = listenerType;
            return this;
        }
        @CustomType.Setter
        public Builder logDirectory(String logDirectory) {
            if (logDirectory == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "logDirectory");
            }
            this.logDirectory = logDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Double memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetCloudDbSystemDiscoveryDiscoveredComponentNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetCloudDbSystemDiscoveryDiscoveredComponentNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            if (nodeName == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "nodeName");
            }
            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder nodeRole(String nodeRole) {
            if (nodeRole == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "nodeRole");
            }
            this.nodeRole = nodeRole;
            return this;
        }
        @CustomType.Setter
        public Builder ocrFileLocation(String ocrFileLocation) {
            if (ocrFileLocation == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "ocrFileLocation");
            }
            this.ocrFileLocation = ocrFileLocation;
            return this;
        }
        @CustomType.Setter
        public Builder oracleHome(String oracleHome) {
            if (oracleHome == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "oracleHome");
            }
            this.oracleHome = oracleHome;
            return this;
        }
        @CustomType.Setter
        public Builder pluggableDatabases(List<GetCloudDbSystemDiscoveryDiscoveredComponentPluggableDatabase> pluggableDatabases) {
            if (pluggableDatabases == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "pluggableDatabases");
            }
            this.pluggableDatabases = pluggableDatabases;
            return this;
        }
        public Builder pluggableDatabases(GetCloudDbSystemDiscoveryDiscoveredComponentPluggableDatabase... pluggableDatabases) {
            return pluggableDatabases(List.of(pluggableDatabases));
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder scanConfigurations(List<GetCloudDbSystemDiscoveryDiscoveredComponentScanConfiguration> scanConfigurations) {
            if (scanConfigurations == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "scanConfigurations");
            }
            this.scanConfigurations = scanConfigurations;
            return this;
        }
        public Builder scanConfigurations(GetCloudDbSystemDiscoveryDiscoveredComponentScanConfiguration... scanConfigurations) {
            return scanConfigurations(List.of(scanConfigurations));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder traceDirectory(String traceDirectory) {
            if (traceDirectory == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "traceDirectory");
            }
            this.traceDirectory = traceDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vipConfigurations(List<GetCloudDbSystemDiscoveryDiscoveredComponentVipConfiguration> vipConfigurations) {
            if (vipConfigurations == null) {
              throw new MissingRequiredPropertyException("GetCloudDbSystemDiscoveryDiscoveredComponent", "vipConfigurations");
            }
            this.vipConfigurations = vipConfigurations;
            return this;
        }
        public Builder vipConfigurations(GetCloudDbSystemDiscoveryDiscoveredComponentVipConfiguration... vipConfigurations) {
            return vipConfigurations(List.of(vipConfigurations));
        }
        public GetCloudDbSystemDiscoveryDiscoveredComponent build() {
            final var _resultValue = new GetCloudDbSystemDiscoveryDiscoveredComponent();
            _resultValue.adrHomeDirectory = adrHomeDirectory;
            _resultValue.asmInstances = asmInstances;
            _resultValue.associatedComponents = associatedComponents;
            _resultValue.canEnableAllCurrentPdbs = canEnableAllCurrentPdbs;
            _resultValue.clusterId = clusterId;
            _resultValue.clusterInstances = clusterInstances;
            _resultValue.compartmentId = compartmentId;
            _resultValue.componentId = componentId;
            _resultValue.componentName = componentName;
            _resultValue.componentType = componentType;
            _resultValue.connectors = connectors;
            _resultValue.containerDatabaseId = containerDatabaseId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.crsBaseDirectory = crsBaseDirectory;
            _resultValue.dbEdition = dbEdition;
            _resultValue.dbId = dbId;
            _resultValue.dbInstances = dbInstances;
            _resultValue.dbNodeName = dbNodeName;
            _resultValue.dbPacks = dbPacks;
            _resultValue.dbRole = dbRole;
            _resultValue.dbType = dbType;
            _resultValue.dbUniqueName = dbUniqueName;
            _resultValue.dbVersion = dbVersion;
            _resultValue.dbaasId = dbaasId;
            _resultValue.displayName = displayName;
            _resultValue.endpoints = endpoints;
            _resultValue.gridHome = gridHome;
            _resultValue.guid = guid;
            _resultValue.homeDirectory = homeDirectory;
            _resultValue.hostName = hostName;
            _resultValue.instanceName = instanceName;
            _resultValue.isAutoEnablePluggableDatabase = isAutoEnablePluggableDatabase;
            _resultValue.isCluster = isCluster;
            _resultValue.isFlexCluster = isFlexCluster;
            _resultValue.isFlexEnabled = isFlexEnabled;
            _resultValue.isSelectedForMonitoring = isSelectedForMonitoring;
            _resultValue.listenerAlias = listenerAlias;
            _resultValue.listenerType = listenerType;
            _resultValue.logDirectory = logDirectory;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.nodeName = nodeName;
            _resultValue.nodeRole = nodeRole;
            _resultValue.ocrFileLocation = ocrFileLocation;
            _resultValue.oracleHome = oracleHome;
            _resultValue.pluggableDatabases = pluggableDatabases;
            _resultValue.resourceId = resourceId;
            _resultValue.scanConfigurations = scanConfigurations;
            _resultValue.status = status;
            _resultValue.traceDirectory = traceDirectory;
            _resultValue.version = version;
            _resultValue.vipConfigurations = vipConfigurations;
            return _resultValue;
        }
    }
}
