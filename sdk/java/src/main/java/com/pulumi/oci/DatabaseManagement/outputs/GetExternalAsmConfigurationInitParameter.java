// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalAsmConfigurationInitParameter {
    /**
     * @return The user-friendly name for the ASM instance. The name does not have to be unique.
     * 
     */
    private @Nullable String asmInstanceDisplayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external ASM instance.
     * 
     */
    private @Nullable String asmInstanceId;
    /**
     * @return The list of disk group names that an ASM instance mounts at startup or when the `ALTER DISKGROUP ALL MOUNT` statement is issued.
     * 
     */
    private @Nullable List<String> autoMountDiskGroups;
    /**
     * @return An operating system-dependent value used to limit the set of disks considered for discovery.
     * 
     */
    private @Nullable String diskDiscoveryPath;
    /**
     * @return The list of failure groups that contain preferred read disks.
     * 
     */
    private @Nullable List<String> preferredReadFailureGroups;
    /**
     * @return The maximum power on an ASM instance for disk rebalancing.
     * 
     */
    private @Nullable Integer rebalancePower;

    private GetExternalAsmConfigurationInitParameter() {}
    /**
     * @return The user-friendly name for the ASM instance. The name does not have to be unique.
     * 
     */
    public Optional<String> asmInstanceDisplayName() {
        return Optional.ofNullable(this.asmInstanceDisplayName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external ASM instance.
     * 
     */
    public Optional<String> asmInstanceId() {
        return Optional.ofNullable(this.asmInstanceId);
    }
    /**
     * @return The list of disk group names that an ASM instance mounts at startup or when the `ALTER DISKGROUP ALL MOUNT` statement is issued.
     * 
     */
    public List<String> autoMountDiskGroups() {
        return this.autoMountDiskGroups == null ? List.of() : this.autoMountDiskGroups;
    }
    /**
     * @return An operating system-dependent value used to limit the set of disks considered for discovery.
     * 
     */
    public Optional<String> diskDiscoveryPath() {
        return Optional.ofNullable(this.diskDiscoveryPath);
    }
    /**
     * @return The list of failure groups that contain preferred read disks.
     * 
     */
    public List<String> preferredReadFailureGroups() {
        return this.preferredReadFailureGroups == null ? List.of() : this.preferredReadFailureGroups;
    }
    /**
     * @return The maximum power on an ASM instance for disk rebalancing.
     * 
     */
    public Optional<Integer> rebalancePower() {
        return Optional.ofNullable(this.rebalancePower);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalAsmConfigurationInitParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String asmInstanceDisplayName;
        private @Nullable String asmInstanceId;
        private @Nullable List<String> autoMountDiskGroups;
        private @Nullable String diskDiscoveryPath;
        private @Nullable List<String> preferredReadFailureGroups;
        private @Nullable Integer rebalancePower;
        public Builder() {}
        public Builder(GetExternalAsmConfigurationInitParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asmInstanceDisplayName = defaults.asmInstanceDisplayName;
    	      this.asmInstanceId = defaults.asmInstanceId;
    	      this.autoMountDiskGroups = defaults.autoMountDiskGroups;
    	      this.diskDiscoveryPath = defaults.diskDiscoveryPath;
    	      this.preferredReadFailureGroups = defaults.preferredReadFailureGroups;
    	      this.rebalancePower = defaults.rebalancePower;
        }

        @CustomType.Setter
        public Builder asmInstanceDisplayName(@Nullable String asmInstanceDisplayName) {
            this.asmInstanceDisplayName = asmInstanceDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder asmInstanceId(@Nullable String asmInstanceId) {
            this.asmInstanceId = asmInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder autoMountDiskGroups(@Nullable List<String> autoMountDiskGroups) {
            this.autoMountDiskGroups = autoMountDiskGroups;
            return this;
        }
        public Builder autoMountDiskGroups(String... autoMountDiskGroups) {
            return autoMountDiskGroups(List.of(autoMountDiskGroups));
        }
        @CustomType.Setter
        public Builder diskDiscoveryPath(@Nullable String diskDiscoveryPath) {
            this.diskDiscoveryPath = diskDiscoveryPath;
            return this;
        }
        @CustomType.Setter
        public Builder preferredReadFailureGroups(@Nullable List<String> preferredReadFailureGroups) {
            this.preferredReadFailureGroups = preferredReadFailureGroups;
            return this;
        }
        public Builder preferredReadFailureGroups(String... preferredReadFailureGroups) {
            return preferredReadFailureGroups(List.of(preferredReadFailureGroups));
        }
        @CustomType.Setter
        public Builder rebalancePower(@Nullable Integer rebalancePower) {
            this.rebalancePower = rebalancePower;
            return this;
        }
        public GetExternalAsmConfigurationInitParameter build() {
            final var o = new GetExternalAsmConfigurationInitParameter();
            o.asmInstanceDisplayName = asmInstanceDisplayName;
            o.asmInstanceId = asmInstanceId;
            o.autoMountDiskGroups = autoMountDiskGroups;
            o.diskDiscoveryPath = diskDiscoveryPath;
            o.preferredReadFailureGroups = preferredReadFailureGroups;
            o.rebalancePower = rebalancePower;
            return o;
        }
    }
}
