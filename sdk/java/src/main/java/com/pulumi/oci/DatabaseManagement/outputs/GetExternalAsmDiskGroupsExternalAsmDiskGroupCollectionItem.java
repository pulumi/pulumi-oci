// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem {
    /**
     * @return The unique names of the databases using the disk group.
     * 
     */
    private List<String> databases;
    /**
     * @return The number of ASM instances that have the disk group in dismounted state.
     * 
     */
    private Integer dismountingInstanceCount;
    /**
     * @return Indicates whether the disk group is a sparse disk group or not.
     * 
     */
    private Boolean isSparse;
    /**
     * @return The number of ASM instances that have the disk group in mounted state.
     * 
     */
    private Integer mountingInstanceCount;
    /**
     * @return The name of the ASM disk group.
     * 
     */
    private String name;
    /**
     * @return The redundancy type of the disk group.
     * 
     */
    private String redundancyType;
    /**
     * @return The total capacity of the disk group (in megabytes).
     * 
     */
    private String totalSizeInMbs;
    /**
     * @return The percentage of used space in the disk group.
     * 
     */
    private Double usedPercent;
    /**
     * @return The used capacity of the disk group (in megabytes).
     * 
     */
    private String usedSizeInMbs;

    private GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem() {}
    /**
     * @return The unique names of the databases using the disk group.
     * 
     */
    public List<String> databases() {
        return this.databases;
    }
    /**
     * @return The number of ASM instances that have the disk group in dismounted state.
     * 
     */
    public Integer dismountingInstanceCount() {
        return this.dismountingInstanceCount;
    }
    /**
     * @return Indicates whether the disk group is a sparse disk group or not.
     * 
     */
    public Boolean isSparse() {
        return this.isSparse;
    }
    /**
     * @return The number of ASM instances that have the disk group in mounted state.
     * 
     */
    public Integer mountingInstanceCount() {
        return this.mountingInstanceCount;
    }
    /**
     * @return The name of the ASM disk group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The redundancy type of the disk group.
     * 
     */
    public String redundancyType() {
        return this.redundancyType;
    }
    /**
     * @return The total capacity of the disk group (in megabytes).
     * 
     */
    public String totalSizeInMbs() {
        return this.totalSizeInMbs;
    }
    /**
     * @return The percentage of used space in the disk group.
     * 
     */
    public Double usedPercent() {
        return this.usedPercent;
    }
    /**
     * @return The used capacity of the disk group (in megabytes).
     * 
     */
    public String usedSizeInMbs() {
        return this.usedSizeInMbs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> databases;
        private Integer dismountingInstanceCount;
        private Boolean isSparse;
        private Integer mountingInstanceCount;
        private String name;
        private String redundancyType;
        private String totalSizeInMbs;
        private Double usedPercent;
        private String usedSizeInMbs;
        public Builder() {}
        public Builder(GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databases = defaults.databases;
    	      this.dismountingInstanceCount = defaults.dismountingInstanceCount;
    	      this.isSparse = defaults.isSparse;
    	      this.mountingInstanceCount = defaults.mountingInstanceCount;
    	      this.name = defaults.name;
    	      this.redundancyType = defaults.redundancyType;
    	      this.totalSizeInMbs = defaults.totalSizeInMbs;
    	      this.usedPercent = defaults.usedPercent;
    	      this.usedSizeInMbs = defaults.usedSizeInMbs;
        }

        @CustomType.Setter
        public Builder databases(List<String> databases) {
            if (databases == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "databases");
            }
            this.databases = databases;
            return this;
        }
        public Builder databases(String... databases) {
            return databases(List.of(databases));
        }
        @CustomType.Setter
        public Builder dismountingInstanceCount(Integer dismountingInstanceCount) {
            if (dismountingInstanceCount == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "dismountingInstanceCount");
            }
            this.dismountingInstanceCount = dismountingInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder isSparse(Boolean isSparse) {
            if (isSparse == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "isSparse");
            }
            this.isSparse = isSparse;
            return this;
        }
        @CustomType.Setter
        public Builder mountingInstanceCount(Integer mountingInstanceCount) {
            if (mountingInstanceCount == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "mountingInstanceCount");
            }
            this.mountingInstanceCount = mountingInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder redundancyType(String redundancyType) {
            if (redundancyType == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "redundancyType");
            }
            this.redundancyType = redundancyType;
            return this;
        }
        @CustomType.Setter
        public Builder totalSizeInMbs(String totalSizeInMbs) {
            if (totalSizeInMbs == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "totalSizeInMbs");
            }
            this.totalSizeInMbs = totalSizeInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder usedPercent(Double usedPercent) {
            if (usedPercent == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "usedPercent");
            }
            this.usedPercent = usedPercent;
            return this;
        }
        @CustomType.Setter
        public Builder usedSizeInMbs(String usedSizeInMbs) {
            if (usedSizeInMbs == null) {
              throw new MissingRequiredPropertyException("GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem", "usedSizeInMbs");
            }
            this.usedSizeInMbs = usedSizeInMbs;
            return this;
        }
        public GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem build() {
            final var _resultValue = new GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem();
            _resultValue.databases = databases;
            _resultValue.dismountingInstanceCount = dismountingInstanceCount;
            _resultValue.isSparse = isSparse;
            _resultValue.mountingInstanceCount = mountingInstanceCount;
            _resultValue.name = name;
            _resultValue.redundancyType = redundancyType;
            _resultValue.totalSizeInMbs = totalSizeInMbs;
            _resultValue.usedPercent = usedPercent;
            _resultValue.usedSizeInMbs = usedSizeInMbs;
            return _resultValue;
        }
    }
}
