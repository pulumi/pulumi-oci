// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem {
    /**
     * @return The unique names of the databases using the disk group.
     * 
     */
    private @Nullable List<String> databases;
    /**
     * @return The number of ASM instances that have the disk group in dismounted state.
     * 
     */
    private @Nullable Integer dismountingInstanceCount;
    /**
     * @return Indicates whether the disk group is a sparse disk group or not.
     * 
     */
    private @Nullable Boolean isSparse;
    /**
     * @return The number of ASM instances that have the disk group in mounted state.
     * 
     */
    private @Nullable Integer mountingInstanceCount;
    /**
     * @return The name of the ASM disk group.
     * 
     */
    private @Nullable String name;
    /**
     * @return The redundancy type of the disk group.
     * 
     */
    private @Nullable String redundancyType;
    /**
     * @return The total capacity of the disk group (in megabytes).
     * 
     */
    private @Nullable String totalSizeInMbs;
    /**
     * @return The percentage of used space in the disk group.
     * 
     */
    private @Nullable Double usedPercent;
    /**
     * @return The used capacity of the disk group (in megabytes).
     * 
     */
    private @Nullable String usedSizeInMbs;

    private GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem() {}
    /**
     * @return The unique names of the databases using the disk group.
     * 
     */
    public List<String> databases() {
        return this.databases == null ? List.of() : this.databases;
    }
    /**
     * @return The number of ASM instances that have the disk group in dismounted state.
     * 
     */
    public Optional<Integer> dismountingInstanceCount() {
        return Optional.ofNullable(this.dismountingInstanceCount);
    }
    /**
     * @return Indicates whether the disk group is a sparse disk group or not.
     * 
     */
    public Optional<Boolean> isSparse() {
        return Optional.ofNullable(this.isSparse);
    }
    /**
     * @return The number of ASM instances that have the disk group in mounted state.
     * 
     */
    public Optional<Integer> mountingInstanceCount() {
        return Optional.ofNullable(this.mountingInstanceCount);
    }
    /**
     * @return The name of the ASM disk group.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The redundancy type of the disk group.
     * 
     */
    public Optional<String> redundancyType() {
        return Optional.ofNullable(this.redundancyType);
    }
    /**
     * @return The total capacity of the disk group (in megabytes).
     * 
     */
    public Optional<String> totalSizeInMbs() {
        return Optional.ofNullable(this.totalSizeInMbs);
    }
    /**
     * @return The percentage of used space in the disk group.
     * 
     */
    public Optional<Double> usedPercent() {
        return Optional.ofNullable(this.usedPercent);
    }
    /**
     * @return The used capacity of the disk group (in megabytes).
     * 
     */
    public Optional<String> usedSizeInMbs() {
        return Optional.ofNullable(this.usedSizeInMbs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> databases;
        private @Nullable Integer dismountingInstanceCount;
        private @Nullable Boolean isSparse;
        private @Nullable Integer mountingInstanceCount;
        private @Nullable String name;
        private @Nullable String redundancyType;
        private @Nullable String totalSizeInMbs;
        private @Nullable Double usedPercent;
        private @Nullable String usedSizeInMbs;
        public Builder() {}
        public Builder(GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databases = defaults.databases;
    	      this.dismountingInstanceCount = defaults.dismountingInstanceCount;
    	      this.isSparse = defaults.isSparse;
    	      this.mountingInstanceCount = defaults.mountingInstanceCount;
    	      this.name = defaults.name;
    	      this.redundancyType = defaults.redundancyType;
    	      this.totalSizeInMbs = defaults.totalSizeInMbs;
    	      this.usedPercent = defaults.usedPercent;
    	      this.usedSizeInMbs = defaults.usedSizeInMbs;
        }

        @CustomType.Setter
        public Builder databases(@Nullable List<String> databases) {
            this.databases = databases;
            return this;
        }
        public Builder databases(String... databases) {
            return databases(List.of(databases));
        }
        @CustomType.Setter
        public Builder dismountingInstanceCount(@Nullable Integer dismountingInstanceCount) {
            this.dismountingInstanceCount = dismountingInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder isSparse(@Nullable Boolean isSparse) {
            this.isSparse = isSparse;
            return this;
        }
        @CustomType.Setter
        public Builder mountingInstanceCount(@Nullable Integer mountingInstanceCount) {
            this.mountingInstanceCount = mountingInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder redundancyType(@Nullable String redundancyType) {
            this.redundancyType = redundancyType;
            return this;
        }
        @CustomType.Setter
        public Builder totalSizeInMbs(@Nullable String totalSizeInMbs) {
            this.totalSizeInMbs = totalSizeInMbs;
            return this;
        }
        @CustomType.Setter
        public Builder usedPercent(@Nullable Double usedPercent) {
            this.usedPercent = usedPercent;
            return this;
        }
        @CustomType.Setter
        public Builder usedSizeInMbs(@Nullable String usedSizeInMbs) {
            this.usedSizeInMbs = usedSizeInMbs;
            return this;
        }
        public GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem build() {
            final var o = new GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem();
            o.databases = databases;
            o.dismountingInstanceCount = dismountingInstanceCount;
            o.isSparse = isSparse;
            o.mountingInstanceCount = mountingInstanceCount;
            o.name = name;
            o.redundancyType = redundancyType;
            o.totalSizeInMbs = totalSizeInMbs;
            o.usedPercent = usedPercent;
            o.usedSizeInMbs = usedSizeInMbs;
            return o;
        }
    }
}
