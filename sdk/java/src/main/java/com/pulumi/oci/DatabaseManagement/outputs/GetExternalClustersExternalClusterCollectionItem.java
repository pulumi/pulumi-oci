// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalClustersExternalClusterCollectionItemNetworkConfiguration;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalClustersExternalClusterCollectionItemScanConfiguration;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalClustersExternalClusterCollectionItemVipConfiguration;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalClustersExternalClusterCollectionItem {
    /**
     * @return The additional details of the external cluster defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The name of the external cluster.
     * 
     */
    private String componentName;
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    private String displayName;
    private String externalClusterId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    private String externalConnectorId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private String externalDbSystemId;
    /**
     * @return The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    private String gridHome;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external cluster.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the cluster is Oracle Flex Cluster or not.
     * 
     */
    private Boolean isFlexCluster;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The list of network address configurations of the external cluster.
     * 
     */
    private List<GetExternalClustersExternalClusterCollectionItemNetworkConfiguration> networkConfigurations;
    /**
     * @return The location of the Oracle Cluster Registry (OCR).
     * 
     */
    private String ocrFileLocation;
    /**
     * @return The list of Single Client Access Name (SCAN) configurations of the external cluster.
     * 
     */
    private List<GetExternalClustersExternalClusterCollectionItemScanConfiguration> scanConfigurations;
    /**
     * @return The current lifecycle state of the external cluster.
     * 
     */
    private String state;
    /**
     * @return The date and time the external cluster was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the external cluster was last updated.
     * 
     */
    private String timeUpdated;
    /**
     * @return The cluster version.
     * 
     */
    private String version;
    /**
     * @return The list of Virtual IP (VIP) configurations of the external cluster.
     * 
     */
    private List<GetExternalClustersExternalClusterCollectionItemVipConfiguration> vipConfigurations;

    private GetExternalClustersExternalClusterCollectionItem() {}
    /**
     * @return The additional details of the external cluster defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the external cluster.
     * 
     */
    public String componentName() {
        return this.componentName;
    }
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public String externalClusterId() {
        return this.externalClusterId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    public String externalConnectorId() {
        return this.externalConnectorId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public String externalDbSystemId() {
        return this.externalDbSystemId;
    }
    /**
     * @return The directory in which Oracle Grid Infrastructure is installed.
     * 
     */
    public String gridHome() {
        return this.gridHome;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external cluster.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the cluster is Oracle Flex Cluster or not.
     * 
     */
    public Boolean isFlexCluster() {
        return this.isFlexCluster;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The list of network address configurations of the external cluster.
     * 
     */
    public List<GetExternalClustersExternalClusterCollectionItemNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return The location of the Oracle Cluster Registry (OCR).
     * 
     */
    public String ocrFileLocation() {
        return this.ocrFileLocation;
    }
    /**
     * @return The list of Single Client Access Name (SCAN) configurations of the external cluster.
     * 
     */
    public List<GetExternalClustersExternalClusterCollectionItemScanConfiguration> scanConfigurations() {
        return this.scanConfigurations;
    }
    /**
     * @return The current lifecycle state of the external cluster.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the external cluster was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the external cluster was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The cluster version.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The list of Virtual IP (VIP) configurations of the external cluster.
     * 
     */
    public List<GetExternalClustersExternalClusterCollectionItemVipConfiguration> vipConfigurations() {
        return this.vipConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalClustersExternalClusterCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalDetails;
        private String compartmentId;
        private String componentName;
        private String displayName;
        private String externalClusterId;
        private String externalConnectorId;
        private String externalDbSystemId;
        private String gridHome;
        private String id;
        private Boolean isFlexCluster;
        private String lifecycleDetails;
        private List<GetExternalClustersExternalClusterCollectionItemNetworkConfiguration> networkConfigurations;
        private String ocrFileLocation;
        private List<GetExternalClustersExternalClusterCollectionItemScanConfiguration> scanConfigurations;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private String version;
        private List<GetExternalClustersExternalClusterCollectionItemVipConfiguration> vipConfigurations;
        public Builder() {}
        public Builder(GetExternalClustersExternalClusterCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.componentName = defaults.componentName;
    	      this.displayName = defaults.displayName;
    	      this.externalClusterId = defaults.externalClusterId;
    	      this.externalConnectorId = defaults.externalConnectorId;
    	      this.externalDbSystemId = defaults.externalDbSystemId;
    	      this.gridHome = defaults.gridHome;
    	      this.id = defaults.id;
    	      this.isFlexCluster = defaults.isFlexCluster;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.ocrFileLocation = defaults.ocrFileLocation;
    	      this.scanConfigurations = defaults.scanConfigurations;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
    	      this.vipConfigurations = defaults.vipConfigurations;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            this.additionalDetails = Objects.requireNonNull(additionalDetails);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder componentName(String componentName) {
            this.componentName = Objects.requireNonNull(componentName);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder externalClusterId(String externalClusterId) {
            this.externalClusterId = Objects.requireNonNull(externalClusterId);
            return this;
        }
        @CustomType.Setter
        public Builder externalConnectorId(String externalConnectorId) {
            this.externalConnectorId = Objects.requireNonNull(externalConnectorId);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbSystemId(String externalDbSystemId) {
            this.externalDbSystemId = Objects.requireNonNull(externalDbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder gridHome(String gridHome) {
            this.gridHome = Objects.requireNonNull(gridHome);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isFlexCluster(Boolean isFlexCluster) {
            this.isFlexCluster = Objects.requireNonNull(isFlexCluster);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetExternalClustersExternalClusterCollectionItemNetworkConfiguration> networkConfigurations) {
            this.networkConfigurations = Objects.requireNonNull(networkConfigurations);
            return this;
        }
        public Builder networkConfigurations(GetExternalClustersExternalClusterCollectionItemNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder ocrFileLocation(String ocrFileLocation) {
            this.ocrFileLocation = Objects.requireNonNull(ocrFileLocation);
            return this;
        }
        @CustomType.Setter
        public Builder scanConfigurations(List<GetExternalClustersExternalClusterCollectionItemScanConfiguration> scanConfigurations) {
            this.scanConfigurations = Objects.requireNonNull(scanConfigurations);
            return this;
        }
        public Builder scanConfigurations(GetExternalClustersExternalClusterCollectionItemScanConfiguration... scanConfigurations) {
            return scanConfigurations(List.of(scanConfigurations));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder vipConfigurations(List<GetExternalClustersExternalClusterCollectionItemVipConfiguration> vipConfigurations) {
            this.vipConfigurations = Objects.requireNonNull(vipConfigurations);
            return this;
        }
        public Builder vipConfigurations(GetExternalClustersExternalClusterCollectionItemVipConfiguration... vipConfigurations) {
            return vipConfigurations(List.of(vipConfigurations));
        }
        public GetExternalClustersExternalClusterCollectionItem build() {
            final var o = new GetExternalClustersExternalClusterCollectionItem();
            o.additionalDetails = additionalDetails;
            o.compartmentId = compartmentId;
            o.componentName = componentName;
            o.displayName = displayName;
            o.externalClusterId = externalClusterId;
            o.externalConnectorId = externalConnectorId;
            o.externalDbSystemId = externalDbSystemId;
            o.gridHome = gridHome;
            o.id = id;
            o.isFlexCluster = isFlexCluster;
            o.lifecycleDetails = lifecycleDetails;
            o.networkConfigurations = networkConfigurations;
            o.ocrFileLocation = ocrFileLocation;
            o.scanConfigurations = scanConfigurations;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.version = version;
            o.vipConfigurations = vipConfigurations;
            return o;
        }
    }
}
