// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalDatabasesExternalDatabaseCollectionItem {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or Non-container Database.
     * 
     */
    private String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private String databaseType;
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    private List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs;
    /**
     * @return The basic information about an external DB system.
     * 
     */
    private List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos;
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    private String dbUniqueName;
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database (CDB) if this is a Pluggable Database (PDB).
     * 
     */
    private String externalContainerDatabaseId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    private String externalDbHomeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private String id;
    /**
     * @return The list of database instances if the database is a RAC database.
     * 
     */
    private List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails;
    /**
     * @return The current lifecycle state of the external database resource.
     * 
     */
    private String state;
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    private String timeCreated;

    private GetExternalDatabasesExternalDatabaseCollectionItem() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or Non-container Database.
     * 
     */
    public String databaseSubType() {
        return this.databaseSubType;
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs() {
        return this.dbManagementConfigs;
    }
    /**
     * @return The basic information about an external DB system.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos() {
        return this.dbSystemInfos;
    }
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public String dbUniqueName() {
        return this.dbUniqueName;
    }
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database (CDB) if this is a Pluggable Database (PDB).
     * 
     */
    public String externalContainerDatabaseId() {
        return this.externalContainerDatabaseId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    public String externalDbHomeId() {
        return this.externalDbHomeId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of database instances if the database is a RAC database.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails() {
        return this.instanceDetails;
    }
    /**
     * @return The current lifecycle state of the external database resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDatabasesExternalDatabaseCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String databaseSubType;
        private String databaseType;
        private List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs;
        private List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos;
        private String dbUniqueName;
        private String displayName;
        private String externalContainerDatabaseId;
        private String externalDbHomeId;
        private String id;
        private List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails;
        private String state;
        private String timeCreated;
        public Builder() {}
        public Builder(GetExternalDatabasesExternalDatabaseCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.dbManagementConfigs = defaults.dbManagementConfigs;
    	      this.dbSystemInfos = defaults.dbSystemInfos;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.displayName = defaults.displayName;
    	      this.externalContainerDatabaseId = defaults.externalContainerDatabaseId;
    	      this.externalDbHomeId = defaults.externalDbHomeId;
    	      this.id = defaults.id;
    	      this.instanceDetails = defaults.instanceDetails;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(String databaseSubType) {
            this.databaseSubType = Objects.requireNonNull(databaseSubType);
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }
        @CustomType.Setter
        public Builder dbManagementConfigs(List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs) {
            this.dbManagementConfigs = Objects.requireNonNull(dbManagementConfigs);
            return this;
        }
        public Builder dbManagementConfigs(GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig... dbManagementConfigs) {
            return dbManagementConfigs(List.of(dbManagementConfigs));
        }
        @CustomType.Setter
        public Builder dbSystemInfos(List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos) {
            this.dbSystemInfos = Objects.requireNonNull(dbSystemInfos);
            return this;
        }
        public Builder dbSystemInfos(GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo... dbSystemInfos) {
            return dbSystemInfos(List.of(dbSystemInfos));
        }
        @CustomType.Setter
        public Builder dbUniqueName(String dbUniqueName) {
            this.dbUniqueName = Objects.requireNonNull(dbUniqueName);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder externalContainerDatabaseId(String externalContainerDatabaseId) {
            this.externalContainerDatabaseId = Objects.requireNonNull(externalContainerDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbHomeId(String externalDbHomeId) {
            this.externalDbHomeId = Objects.requireNonNull(externalDbHomeId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceDetails(List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails) {
            this.instanceDetails = Objects.requireNonNull(instanceDetails);
            return this;
        }
        public Builder instanceDetails(GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail... instanceDetails) {
            return instanceDetails(List.of(instanceDetails));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        public GetExternalDatabasesExternalDatabaseCollectionItem build() {
            final var o = new GetExternalDatabasesExternalDatabaseCollectionItem();
            o.compartmentId = compartmentId;
            o.databaseSubType = databaseSubType;
            o.databaseType = databaseType;
            o.dbManagementConfigs = dbManagementConfigs;
            o.dbSystemInfos = dbSystemInfos;
            o.dbUniqueName = dbUniqueName;
            o.displayName = displayName;
            o.externalContainerDatabaseId = externalContainerDatabaseId;
            o.externalDbHomeId = externalDbHomeId;
            o.id = id;
            o.instanceDetails = instanceDetails;
            o.state = state;
            o.timeCreated = timeCreated;
            return o;
        }
    }
}
