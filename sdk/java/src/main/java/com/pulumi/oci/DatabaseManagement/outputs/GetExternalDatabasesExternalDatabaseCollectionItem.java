// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalDatabasesExternalDatabaseCollectionItem {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or Non-container Database.
     * 
     */
    private @Nullable String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    private @Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs;
    /**
     * @return The basic information about an external DB system.
     * 
     */
    private @Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos;
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    private @Nullable String dbUniqueName;
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database (CDB) if this is a Pluggable Database (PDB).
     * 
     */
    private @Nullable String externalContainerDatabaseId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    private @Nullable String externalDbHomeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private @Nullable String id;
    /**
     * @return The list of database instances if the database is a RAC database.
     * 
     */
    private @Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails;
    /**
     * @return The current lifecycle state of the external database resource.
     * 
     */
    private @Nullable String state;
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    private @Nullable String timeCreated;

    private GetExternalDatabasesExternalDatabaseCollectionItem() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The subtype of Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or Non-container Database.
     * 
     */
    public Optional<String> databaseSubType() {
        return Optional.ofNullable(this.databaseSubType);
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return The configuration of the Database Management service.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs() {
        return this.dbManagementConfigs == null ? List.of() : this.dbManagementConfigs;
    }
    /**
     * @return The basic information about an external DB system.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos() {
        return this.dbSystemInfos == null ? List.of() : this.dbSystemInfos;
    }
    /**
     * @return The `DB_UNIQUE_NAME` of the external database.
     * 
     */
    public Optional<String> dbUniqueName() {
        return Optional.ofNullable(this.dbUniqueName);
    }
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database (CDB) if this is a Pluggable Database (PDB).
     * 
     */
    public Optional<String> externalContainerDatabaseId() {
        return Optional.ofNullable(this.externalContainerDatabaseId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    public Optional<String> externalDbHomeId() {
        return Optional.ofNullable(this.externalDbHomeId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of database instances if the database is a RAC database.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails() {
        return this.instanceDetails == null ? List.of() : this.instanceDetails;
    }
    /**
     * @return The current lifecycle state of the external database resource.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDatabasesExternalDatabaseCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String databaseSubType;
        private @Nullable String databaseType;
        private @Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs;
        private @Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos;
        private @Nullable String dbUniqueName;
        private @Nullable String displayName;
        private @Nullable String externalContainerDatabaseId;
        private @Nullable String externalDbHomeId;
        private @Nullable String id;
        private @Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails;
        private @Nullable String state;
        private @Nullable String timeCreated;
        public Builder() {}
        public Builder(GetExternalDatabasesExternalDatabaseCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.dbManagementConfigs = defaults.dbManagementConfigs;
    	      this.dbSystemInfos = defaults.dbSystemInfos;
    	      this.dbUniqueName = defaults.dbUniqueName;
    	      this.displayName = defaults.displayName;
    	      this.externalContainerDatabaseId = defaults.externalContainerDatabaseId;
    	      this.externalDbHomeId = defaults.externalDbHomeId;
    	      this.id = defaults.id;
    	      this.instanceDetails = defaults.instanceDetails;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(@Nullable String databaseSubType) {
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder dbManagementConfigs(@Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig> dbManagementConfigs) {
            this.dbManagementConfigs = dbManagementConfigs;
            return this;
        }
        public Builder dbManagementConfigs(GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig... dbManagementConfigs) {
            return dbManagementConfigs(List.of(dbManagementConfigs));
        }
        @CustomType.Setter
        public Builder dbSystemInfos(@Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo> dbSystemInfos) {
            this.dbSystemInfos = dbSystemInfos;
            return this;
        }
        public Builder dbSystemInfos(GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo... dbSystemInfos) {
            return dbSystemInfos(List.of(dbSystemInfos));
        }
        @CustomType.Setter
        public Builder dbUniqueName(@Nullable String dbUniqueName) {
            this.dbUniqueName = dbUniqueName;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalContainerDatabaseId(@Nullable String externalContainerDatabaseId) {
            this.externalContainerDatabaseId = externalContainerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder externalDbHomeId(@Nullable String externalDbHomeId) {
            this.externalDbHomeId = externalDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceDetails(@Nullable List<GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail> instanceDetails) {
            this.instanceDetails = instanceDetails;
            return this;
        }
        public Builder instanceDetails(GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetail... instanceDetails) {
            return instanceDetails(List.of(instanceDetails));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        public GetExternalDatabasesExternalDatabaseCollectionItem build() {
            final var o = new GetExternalDatabasesExternalDatabaseCollectionItem();
            o.compartmentId = compartmentId;
            o.databaseSubType = databaseSubType;
            o.databaseType = databaseType;
            o.dbManagementConfigs = dbManagementConfigs;
            o.dbSystemInfos = dbSystemInfos;
            o.dbUniqueName = dbUniqueName;
            o.displayName = displayName;
            o.externalContainerDatabaseId = externalContainerDatabaseId;
            o.externalDbHomeId = externalDbHomeId;
            o.id = id;
            o.instanceDetails = instanceDetails;
            o.state = state;
            o.timeCreated = timeCreated;
            return o;
        }
    }
}
