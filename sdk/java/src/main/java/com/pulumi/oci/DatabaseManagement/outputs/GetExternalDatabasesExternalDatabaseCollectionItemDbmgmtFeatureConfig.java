// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig {
    /**
     * @return The connector details required to connect to an Oracle cloud database.
     * 
     */
    private List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail> connectorDetails;
    /**
     * @return The connection details required to connect to the database.
     * 
     */
    private List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail> databaseConnectionDetails;
    /**
     * @return The name of the Database Management feature.
     * 
     */
    private String feature;
    /**
     * @return The list of statuses for Database Management features.
     * 
     */
    private String featureStatus;
    /**
     * @return The Oracle license model that applies to the external database.
     * 
     */
    private String licenseModel;

    private GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig() {}
    /**
     * @return The connector details required to connect to an Oracle cloud database.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail> connectorDetails() {
        return this.connectorDetails;
    }
    /**
     * @return The connection details required to connect to the database.
     * 
     */
    public List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail> databaseConnectionDetails() {
        return this.databaseConnectionDetails;
    }
    /**
     * @return The name of the Database Management feature.
     * 
     */
    public String feature() {
        return this.feature;
    }
    /**
     * @return The list of statuses for Database Management features.
     * 
     */
    public String featureStatus() {
        return this.featureStatus;
    }
    /**
     * @return The Oracle license model that applies to the external database.
     * 
     */
    public String licenseModel() {
        return this.licenseModel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail> connectorDetails;
        private List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail> databaseConnectionDetails;
        private String feature;
        private String featureStatus;
        private String licenseModel;
        public Builder() {}
        public Builder(GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorDetails = defaults.connectorDetails;
    	      this.databaseConnectionDetails = defaults.databaseConnectionDetails;
    	      this.feature = defaults.feature;
    	      this.featureStatus = defaults.featureStatus;
    	      this.licenseModel = defaults.licenseModel;
        }

        @CustomType.Setter
        public Builder connectorDetails(List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail> connectorDetails) {
            if (connectorDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig", "connectorDetails");
            }
            this.connectorDetails = connectorDetails;
            return this;
        }
        public Builder connectorDetails(GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail... connectorDetails) {
            return connectorDetails(List.of(connectorDetails));
        }
        @CustomType.Setter
        public Builder databaseConnectionDetails(List<GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail> databaseConnectionDetails) {
            if (databaseConnectionDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig", "databaseConnectionDetails");
            }
            this.databaseConnectionDetails = databaseConnectionDetails;
            return this;
        }
        public Builder databaseConnectionDetails(GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail... databaseConnectionDetails) {
            return databaseConnectionDetails(List.of(databaseConnectionDetails));
        }
        @CustomType.Setter
        public Builder feature(String feature) {
            if (feature == null) {
              throw new MissingRequiredPropertyException("GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig", "feature");
            }
            this.feature = feature;
            return this;
        }
        @CustomType.Setter
        public Builder featureStatus(String featureStatus) {
            if (featureStatus == null) {
              throw new MissingRequiredPropertyException("GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig", "featureStatus");
            }
            this.featureStatus = featureStatus;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            if (licenseModel == null) {
              throw new MissingRequiredPropertyException("GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig", "licenseModel");
            }
            this.licenseModel = licenseModel;
            return this;
        }
        public GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig build() {
            final var _resultValue = new GetExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig();
            _resultValue.connectorDetails = connectorDetails;
            _resultValue.databaseConnectionDetails = databaseConnectionDetails;
            _resultValue.feature = feature;
            _resultValue.featureStatus = featureStatus;
            _resultValue.licenseModel = licenseModel;
            return _resultValue;
        }
    }
}
