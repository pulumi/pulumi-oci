// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalDbNodesExternalDbNodeCollectionItem {
    /**
     * @return The additional details of the external DB node defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The name of the external DB node.
     * 
     */
    private String componentName;
    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    private Double cpuCoreCount;
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    private String displayName;
    /**
     * @return Name of the domain.
     * 
     */
    private String domainName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    private String externalConnectorId;
    private String externalDbNodeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private String externalDbSystemId;
    /**
     * @return The host name for the DB node.
     * 
     */
    private String hostName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    private String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    private Double memorySizeInGbs;
    /**
     * @return The current lifecycle state of the external DB node.
     * 
     */
    private String state;
    /**
     * @return The date and time the external DB node was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the external DB node was last updated.
     * 
     */
    private String timeUpdated;

    private GetExternalDbNodesExternalDbNodeCollectionItem() {}
    /**
     * @return The additional details of the external DB node defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the external DB node.
     * 
     */
    public String componentName() {
        return this.componentName;
    }
    /**
     * @return The number of CPU cores available on the DB node.
     * 
     */
    public Double cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Name of the domain.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    public String externalConnectorId() {
        return this.externalConnectorId;
    }
    public String externalDbNodeId() {
        return this.externalDbNodeId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public String externalDbSystemId() {
        return this.externalDbSystemId;
    }
    /**
     * @return The host name for the DB node.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The total memory in gigabytes (GB) on the DB node.
     * 
     */
    public Double memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The current lifecycle state of the external DB node.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the external DB node was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the external DB node was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDbNodesExternalDbNodeCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalDetails;
        private String compartmentId;
        private String componentName;
        private Double cpuCoreCount;
        private String displayName;
        private String domainName;
        private String externalConnectorId;
        private String externalDbNodeId;
        private String externalDbSystemId;
        private String hostName;
        private String id;
        private String lifecycleDetails;
        private Double memorySizeInGbs;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetExternalDbNodesExternalDbNodeCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.componentName = defaults.componentName;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.displayName = defaults.displayName;
    	      this.domainName = defaults.domainName;
    	      this.externalConnectorId = defaults.externalConnectorId;
    	      this.externalDbNodeId = defaults.externalDbNodeId;
    	      this.externalDbSystemId = defaults.externalDbSystemId;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            this.additionalDetails = Objects.requireNonNull(additionalDetails);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder componentName(String componentName) {
            this.componentName = Objects.requireNonNull(componentName);
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Double cpuCoreCount) {
            this.cpuCoreCount = Objects.requireNonNull(cpuCoreCount);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder externalConnectorId(String externalConnectorId) {
            this.externalConnectorId = Objects.requireNonNull(externalConnectorId);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbNodeId(String externalDbNodeId) {
            this.externalDbNodeId = Objects.requireNonNull(externalDbNodeId);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbSystemId(String externalDbSystemId) {
            this.externalDbSystemId = Objects.requireNonNull(externalDbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Double memorySizeInGbs) {
            this.memorySizeInGbs = Objects.requireNonNull(memorySizeInGbs);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetExternalDbNodesExternalDbNodeCollectionItem build() {
            final var o = new GetExternalDbNodesExternalDbNodeCollectionItem();
            o.additionalDetails = additionalDetails;
            o.compartmentId = compartmentId;
            o.componentName = componentName;
            o.cpuCoreCount = cpuCoreCount;
            o.displayName = displayName;
            o.domainName = domainName;
            o.externalConnectorId = externalConnectorId;
            o.externalDbNodeId = externalDbNodeId;
            o.externalDbSystemId = externalDbSystemId;
            o.hostName = hostName;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.memorySizeInGbs = memorySizeInGbs;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            return o;
        }
    }
}
