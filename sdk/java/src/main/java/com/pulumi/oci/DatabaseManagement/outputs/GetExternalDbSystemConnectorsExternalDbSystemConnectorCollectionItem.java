// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used for the external DB system connector.
     * 
     */
    private String agentId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The error message indicating the reason for connection failure or `null` if the connection was successful.
     * 
     */
    private String connectionFailureMessage;
    /**
     * @return The connection details required to connect to an external DB system component.
     * 
     */
    private List<GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo> connectionInfos;
    /**
     * @return The status of connectivity to the external DB system component.
     * 
     */
    private String connectionStatus;
    /**
     * @return The type of connector.
     * 
     */
    private String connectorType;
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private String externalDbSystemId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system connector.
     * 
     */
    private String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current lifecycle state of the external DB system connector.
     * 
     */
    private String state;
    /**
     * @return The date and time the connectionStatus of the external DB system connector was last updated.
     * 
     */
    private String timeConnectionStatusLastUpdated;
    /**
     * @return The date and time the external DB system connector was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the external DB system connector was last updated.
     * 
     */
    private String timeUpdated;

    private GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used for the external DB system connector.
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The error message indicating the reason for connection failure or `null` if the connection was successful.
     * 
     */
    public String connectionFailureMessage() {
        return this.connectionFailureMessage;
    }
    /**
     * @return The connection details required to connect to an external DB system component.
     * 
     */
    public List<GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo> connectionInfos() {
        return this.connectionInfos;
    }
    /**
     * @return The status of connectivity to the external DB system component.
     * 
     */
    public String connectionStatus() {
        return this.connectionStatus;
    }
    /**
     * @return The type of connector.
     * 
     */
    public String connectorType() {
        return this.connectorType;
    }
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public String externalDbSystemId() {
        return this.externalDbSystemId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system connector.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current lifecycle state of the external DB system connector.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the connectionStatus of the external DB system connector was last updated.
     * 
     */
    public String timeConnectionStatusLastUpdated() {
        return this.timeConnectionStatusLastUpdated;
    }
    /**
     * @return The date and time the external DB system connector was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the external DB system connector was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String agentId;
        private String compartmentId;
        private String connectionFailureMessage;
        private List<GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo> connectionInfos;
        private String connectionStatus;
        private String connectorType;
        private String displayName;
        private String externalDbSystemId;
        private String id;
        private String lifecycleDetails;
        private String state;
        private String timeConnectionStatusLastUpdated;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentId = defaults.agentId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionFailureMessage = defaults.connectionFailureMessage;
    	      this.connectionInfos = defaults.connectionInfos;
    	      this.connectionStatus = defaults.connectionStatus;
    	      this.connectorType = defaults.connectorType;
    	      this.displayName = defaults.displayName;
    	      this.externalDbSystemId = defaults.externalDbSystemId;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.state = defaults.state;
    	      this.timeConnectionStatusLastUpdated = defaults.timeConnectionStatusLastUpdated;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder agentId(String agentId) {
            this.agentId = Objects.requireNonNull(agentId);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder connectionFailureMessage(String connectionFailureMessage) {
            this.connectionFailureMessage = Objects.requireNonNull(connectionFailureMessage);
            return this;
        }
        @CustomType.Setter
        public Builder connectionInfos(List<GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo> connectionInfos) {
            this.connectionInfos = Objects.requireNonNull(connectionInfos);
            return this;
        }
        public Builder connectionInfos(GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo... connectionInfos) {
            return connectionInfos(List.of(connectionInfos));
        }
        @CustomType.Setter
        public Builder connectionStatus(String connectionStatus) {
            this.connectionStatus = Objects.requireNonNull(connectionStatus);
            return this;
        }
        @CustomType.Setter
        public Builder connectorType(String connectorType) {
            this.connectorType = Objects.requireNonNull(connectorType);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbSystemId(String externalDbSystemId) {
            this.externalDbSystemId = Objects.requireNonNull(externalDbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeConnectionStatusLastUpdated(String timeConnectionStatusLastUpdated) {
            this.timeConnectionStatusLastUpdated = Objects.requireNonNull(timeConnectionStatusLastUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        public GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem build() {
            final var _resultValue = new GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem();
            _resultValue.agentId = agentId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionFailureMessage = connectionFailureMessage;
            _resultValue.connectionInfos = connectionInfos;
            _resultValue.connectionStatus = connectionStatus;
            _resultValue.connectorType = connectorType;
            _resultValue.displayName = displayName;
            _resultValue.externalDbSystemId = externalDbSystemId;
            _resultValue.id = id;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.state = state;
            _resultValue.timeConnectionStatusLastUpdated = timeConnectionStatusLastUpdated;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
