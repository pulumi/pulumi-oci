// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString {
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    private String hostName;
    /**
     * @return The list of host names of the ASM instances.
     * 
     */
    private List<String> hosts;
    /**
     * @return The port used to connect to the ASM instance.
     * 
     */
    private Integer port;
    /**
     * @return The protocol used to connect to the ASM instance.
     * 
     */
    private String protocol;
    /**
     * @return The service name of the ASM instance.
     * 
     */
    private String service;

    private GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString() {}
    /**
     * @return The host name of the database or the SCAN name in case of a RAC database.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The list of host names of the ASM instances.
     * 
     */
    public List<String> hosts() {
        return this.hosts;
    }
    /**
     * @return The port used to connect to the ASM instance.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol used to connect to the ASM instance.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The service name of the ASM instance.
     * 
     */
    public String service() {
        return this.service;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostName;
        private List<String> hosts;
        private Integer port;
        private String protocol;
        private String service;
        public Builder() {}
        public Builder(GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostName = defaults.hostName;
    	      this.hosts = defaults.hosts;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.service = defaults.service;
        }

        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder hosts(List<String> hosts) {
            this.hosts = Objects.requireNonNull(hosts);
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString build() {
            final var _resultValue = new GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString();
            _resultValue.hostName = hostName;
            _resultValue.hosts = hosts;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.service = service;
            return _resultValue;
        }
    }
}
