// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDbSystemDatabaseManagementConfig;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalDbSystemStackMonitoringConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalDbSystemResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The details required to enable Database Management for an external DB system.
     * 
     */
    private List<GetExternalDbSystemDatabaseManagementConfig> databaseManagementConfigs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
     * 
     */
    private String dbSystemDiscoveryId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
     * 
     */
    private String discoveryAgentId;
    /**
     * @return The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    private String displayName;
    private String externalDbSystemId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
     * 
     */
    private String homeDirectory;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the DB system is a cluster DB system or not.
     * 
     */
    private Boolean isCluster;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The configuration details of Stack Monitoring for an external DB system.
     * 
     */
    private List<GetExternalDbSystemStackMonitoringConfig> stackMonitoringConfigs;
    /**
     * @return The current lifecycle state of the external DB system resource.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the external DB system was last updated.
     * 
     */
    private String timeUpdated;

    private GetExternalDbSystemResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The details required to enable Database Management for an external DB system.
     * 
     */
    public List<GetExternalDbSystemDatabaseManagementConfig> databaseManagementConfigs() {
        return this.databaseManagementConfigs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
     * 
     */
    public String dbSystemDiscoveryId() {
        return this.dbSystemDiscoveryId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
     * 
     */
    public String discoveryAgentId() {
        return this.discoveryAgentId;
    }
    /**
     * @return The user-friendly name for the DB system. The name does not have to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public String externalDbSystemId() {
        return this.externalDbSystemId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
     * 
     */
    public String homeDirectory() {
        return this.homeDirectory;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the DB system is a cluster DB system or not.
     * 
     */
    public Boolean isCluster() {
        return this.isCluster;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The configuration details of Stack Monitoring for an external DB system.
     * 
     */
    public List<GetExternalDbSystemStackMonitoringConfig> stackMonitoringConfigs() {
        return this.stackMonitoringConfigs;
    }
    /**
     * @return The current lifecycle state of the external DB system resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the external DB system was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the external DB system was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDbSystemResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetExternalDbSystemDatabaseManagementConfig> databaseManagementConfigs;
        private String dbSystemDiscoveryId;
        private Map<String,String> definedTags;
        private String discoveryAgentId;
        private String displayName;
        private String externalDbSystemId;
        private Map<String,String> freeformTags;
        private String homeDirectory;
        private String id;
        private Boolean isCluster;
        private String lifecycleDetails;
        private List<GetExternalDbSystemStackMonitoringConfig> stackMonitoringConfigs;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetExternalDbSystemResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseManagementConfigs = defaults.databaseManagementConfigs;
    	      this.dbSystemDiscoveryId = defaults.dbSystemDiscoveryId;
    	      this.definedTags = defaults.definedTags;
    	      this.discoveryAgentId = defaults.discoveryAgentId;
    	      this.displayName = defaults.displayName;
    	      this.externalDbSystemId = defaults.externalDbSystemId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.homeDirectory = defaults.homeDirectory;
    	      this.id = defaults.id;
    	      this.isCluster = defaults.isCluster;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.stackMonitoringConfigs = defaults.stackMonitoringConfigs;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseManagementConfigs(List<GetExternalDbSystemDatabaseManagementConfig> databaseManagementConfigs) {
            if (databaseManagementConfigs == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "databaseManagementConfigs");
            }
            this.databaseManagementConfigs = databaseManagementConfigs;
            return this;
        }
        public Builder databaseManagementConfigs(GetExternalDbSystemDatabaseManagementConfig... databaseManagementConfigs) {
            return databaseManagementConfigs(List.of(databaseManagementConfigs));
        }
        @CustomType.Setter
        public Builder dbSystemDiscoveryId(String dbSystemDiscoveryId) {
            if (dbSystemDiscoveryId == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "dbSystemDiscoveryId");
            }
            this.dbSystemDiscoveryId = dbSystemDiscoveryId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryAgentId(String discoveryAgentId) {
            if (discoveryAgentId == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "discoveryAgentId");
            }
            this.discoveryAgentId = discoveryAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalDbSystemId(String externalDbSystemId) {
            if (externalDbSystemId == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "externalDbSystemId");
            }
            this.externalDbSystemId = externalDbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder homeDirectory(String homeDirectory) {
            if (homeDirectory == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "homeDirectory");
            }
            this.homeDirectory = homeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCluster(Boolean isCluster) {
            if (isCluster == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "isCluster");
            }
            this.isCluster = isCluster;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder stackMonitoringConfigs(List<GetExternalDbSystemStackMonitoringConfig> stackMonitoringConfigs) {
            if (stackMonitoringConfigs == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "stackMonitoringConfigs");
            }
            this.stackMonitoringConfigs = stackMonitoringConfigs;
            return this;
        }
        public Builder stackMonitoringConfigs(GetExternalDbSystemStackMonitoringConfig... stackMonitoringConfigs) {
            return stackMonitoringConfigs(List.of(stackMonitoringConfigs));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetExternalDbSystemResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetExternalDbSystemResult build() {
            final var _resultValue = new GetExternalDbSystemResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseManagementConfigs = databaseManagementConfigs;
            _resultValue.dbSystemDiscoveryId = dbSystemDiscoveryId;
            _resultValue.definedTags = definedTags;
            _resultValue.discoveryAgentId = discoveryAgentId;
            _resultValue.displayName = displayName;
            _resultValue.externalDbSystemId = externalDbSystemId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.homeDirectory = homeDirectory;
            _resultValue.id = id;
            _resultValue.isCluster = isCluster;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.stackMonitoringConfigs = stackMonitoringConfigs;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
