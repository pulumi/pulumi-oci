// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem {
    /**
     * @return The additional details of the resource defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of [OCIDs] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartments.
     * 
     */
    private List<String> databaseCompartments;
    /**
     * @return A list of DB systems.
     * 
     */
    private List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem> databaseSystems;
    private List<String> dbSystemIds;
    private String discoveryKey;
    /**
     * @return The optional single value query filter parameter on the entity display name.
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata resource.
     * 
     */
    private String id;
    /**
     * @return The internal ID of the Exadata resource.
     * 
     */
    private String internalId;
    /**
     * @return The Oracle license model that applies to the database management resources.
     * 
     */
    private String licenseModel;
    /**
     * @return The details of the lifecycle state of the Exadata resource.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The rack size of the Exadata infrastructure.
     * 
     */
    private String rackSize;
    /**
     * @return The current lifecycle state of the database resource.
     * 
     */
    private String state;
    /**
     * @return The status of the Exadata resource.
     * 
     */
    private String status;
    /**
     * @return The Exadata storage server grid of the Exadata infrastructure.
     * 
     */
    private List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid> storageGrids;
    private List<String> storageServerNames;
    /**
     * @return The timestamp of the creation of the Exadata resource.
     * 
     */
    private String timeCreated;
    /**
     * @return The timestamp of the last update of the Exadata resource.
     * 
     */
    private String timeUpdated;
    /**
     * @return The version of the Exadata resource.
     * 
     */
    private String version;

    private GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem() {}
    /**
     * @return The additional details of the resource defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of [OCIDs] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartments.
     * 
     */
    public List<String> databaseCompartments() {
        return this.databaseCompartments;
    }
    /**
     * @return A list of DB systems.
     * 
     */
    public List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem> databaseSystems() {
        return this.databaseSystems;
    }
    public List<String> dbSystemIds() {
        return this.dbSystemIds;
    }
    public String discoveryKey() {
        return this.discoveryKey;
    }
    /**
     * @return The optional single value query filter parameter on the entity display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The internal ID of the Exadata resource.
     * 
     */
    public String internalId() {
        return this.internalId;
    }
    /**
     * @return The Oracle license model that applies to the database management resources.
     * 
     */
    public String licenseModel() {
        return this.licenseModel;
    }
    /**
     * @return The details of the lifecycle state of the Exadata resource.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The rack size of the Exadata infrastructure.
     * 
     */
    public String rackSize() {
        return this.rackSize;
    }
    /**
     * @return The current lifecycle state of the database resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the Exadata resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The Exadata storage server grid of the Exadata infrastructure.
     * 
     */
    public List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid> storageGrids() {
        return this.storageGrids;
    }
    public List<String> storageServerNames() {
        return this.storageServerNames;
    }
    /**
     * @return The timestamp of the creation of the Exadata resource.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The timestamp of the last update of the Exadata resource.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The version of the Exadata resource.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalDetails;
        private String compartmentId;
        private List<String> databaseCompartments;
        private List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem> databaseSystems;
        private List<String> dbSystemIds;
        private String discoveryKey;
        private String displayName;
        private String id;
        private String internalId;
        private String licenseModel;
        private String lifecycleDetails;
        private String rackSize;
        private String state;
        private String status;
        private List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid> storageGrids;
        private List<String> storageServerNames;
        private String timeCreated;
        private String timeUpdated;
        private String version;
        public Builder() {}
        public Builder(GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseCompartments = defaults.databaseCompartments;
    	      this.databaseSystems = defaults.databaseSystems;
    	      this.dbSystemIds = defaults.dbSystemIds;
    	      this.discoveryKey = defaults.discoveryKey;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.internalId = defaults.internalId;
    	      this.licenseModel = defaults.licenseModel;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.rackSize = defaults.rackSize;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.storageGrids = defaults.storageGrids;
    	      this.storageServerNames = defaults.storageServerNames;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            if (additionalDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "additionalDetails");
            }
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseCompartments(List<String> databaseCompartments) {
            if (databaseCompartments == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "databaseCompartments");
            }
            this.databaseCompartments = databaseCompartments;
            return this;
        }
        public Builder databaseCompartments(String... databaseCompartments) {
            return databaseCompartments(List.of(databaseCompartments));
        }
        @CustomType.Setter
        public Builder databaseSystems(List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem> databaseSystems) {
            if (databaseSystems == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "databaseSystems");
            }
            this.databaseSystems = databaseSystems;
            return this;
        }
        public Builder databaseSystems(GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem... databaseSystems) {
            return databaseSystems(List.of(databaseSystems));
        }
        @CustomType.Setter
        public Builder dbSystemIds(List<String> dbSystemIds) {
            if (dbSystemIds == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "dbSystemIds");
            }
            this.dbSystemIds = dbSystemIds;
            return this;
        }
        public Builder dbSystemIds(String... dbSystemIds) {
            return dbSystemIds(List.of(dbSystemIds));
        }
        @CustomType.Setter
        public Builder discoveryKey(String discoveryKey) {
            if (discoveryKey == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "discoveryKey");
            }
            this.discoveryKey = discoveryKey;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalId(String internalId) {
            if (internalId == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "internalId");
            }
            this.internalId = internalId;
            return this;
        }
        @CustomType.Setter
        public Builder licenseModel(String licenseModel) {
            if (licenseModel == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "licenseModel");
            }
            this.licenseModel = licenseModel;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder rackSize(String rackSize) {
            if (rackSize == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "rackSize");
            }
            this.rackSize = rackSize;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageGrids(List<GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid> storageGrids) {
            if (storageGrids == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "storageGrids");
            }
            this.storageGrids = storageGrids;
            return this;
        }
        public Builder storageGrids(GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid... storageGrids) {
            return storageGrids(List.of(storageGrids));
        }
        @CustomType.Setter
        public Builder storageServerNames(List<String> storageServerNames) {
            if (storageServerNames == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "storageServerNames");
            }
            this.storageServerNames = storageServerNames;
            return this;
        }
        public Builder storageServerNames(String... storageServerNames) {
            return storageServerNames(List.of(storageServerNames));
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        public GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem build() {
            final var _resultValue = new GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseCompartments = databaseCompartments;
            _resultValue.databaseSystems = databaseSystems;
            _resultValue.dbSystemIds = dbSystemIds;
            _resultValue.discoveryKey = discoveryKey;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.internalId = internalId;
            _resultValue.licenseModel = licenseModel;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.rackSize = rackSize;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.storageGrids = storageGrids;
            _resultValue.storageServerNames = storageServerNames;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
