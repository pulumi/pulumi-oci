// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem {
    /**
     * @return The additional details of the resource defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent for the Exadata storage server.
     * 
     */
    private String agentId;
    /**
     * @return The unique string of the connection. For example, &#34;https://&lt;storage-server-name&gt;/MS/RESTService/&#34;.
     * 
     */
    private String connectionUri;
    private String connectorName;
    private List<GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo> credentialInfos;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return The optional single value query filter parameter on the entity display name.
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    private String exadataInfrastructureId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata resource.
     * 
     */
    private String id;
    /**
     * @return The internal ID of the Exadata resource.
     * 
     */
    private String internalId;
    /**
     * @return The details of the lifecycle state of the Exadata resource.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The current lifecycle state of the database resource.
     * 
     */
    private String state;
    /**
     * @return The status of the Exadata resource.
     * 
     */
    private String status;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
     * 
     */
    private String storageServerId;
    /**
     * @return The timestamp of the creation of the Exadata resource.
     * 
     */
    private String timeCreated;
    /**
     * @return The timestamp of the last update of the Exadata resource.
     * 
     */
    private String timeUpdated;
    /**
     * @return The version of the Exadata resource.
     * 
     */
    private String version;

    private GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem() {}
    /**
     * @return The additional details of the resource defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent for the Exadata storage server.
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return The unique string of the connection. For example, &#34;https://&lt;storage-server-name&gt;/MS/RESTService/&#34;.
     * 
     */
    public String connectionUri() {
        return this.connectionUri;
    }
    public String connectorName() {
        return this.connectorName;
    }
    public List<GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo> credentialInfos() {
        return this.credentialInfos;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The optional single value query filter parameter on the entity display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
     * 
     */
    public String exadataInfrastructureId() {
        return this.exadataInfrastructureId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The internal ID of the Exadata resource.
     * 
     */
    public String internalId() {
        return this.internalId;
    }
    /**
     * @return The details of the lifecycle state of the Exadata resource.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The current lifecycle state of the database resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the Exadata resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
     * 
     */
    public String storageServerId() {
        return this.storageServerId;
    }
    /**
     * @return The timestamp of the creation of the Exadata resource.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The timestamp of the last update of the Exadata resource.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The version of the Exadata resource.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalDetails;
        private String agentId;
        private String connectionUri;
        private String connectorName;
        private List<GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo> credentialInfos;
        private Map<String,Object> definedTags;
        private String displayName;
        private String exadataInfrastructureId;
        private Map<String,Object> freeformTags;
        private String id;
        private String internalId;
        private String lifecycleDetails;
        private String state;
        private String status;
        private String storageServerId;
        private String timeCreated;
        private String timeUpdated;
        private String version;
        public Builder() {}
        public Builder(GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.agentId = defaults.agentId;
    	      this.connectionUri = defaults.connectionUri;
    	      this.connectorName = defaults.connectorName;
    	      this.credentialInfos = defaults.credentialInfos;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.exadataInfrastructureId = defaults.exadataInfrastructureId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.internalId = defaults.internalId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.storageServerId = defaults.storageServerId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            if (additionalDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "additionalDetails");
            }
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder agentId(String agentId) {
            if (agentId == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "agentId");
            }
            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionUri(String connectionUri) {
            if (connectionUri == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "connectionUri");
            }
            this.connectionUri = connectionUri;
            return this;
        }
        @CustomType.Setter
        public Builder connectorName(String connectorName) {
            if (connectorName == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "connectorName");
            }
            this.connectorName = connectorName;
            return this;
        }
        @CustomType.Setter
        public Builder credentialInfos(List<GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo> credentialInfos) {
            if (credentialInfos == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "credentialInfos");
            }
            this.credentialInfos = credentialInfos;
            return this;
        }
        public Builder credentialInfos(GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo... credentialInfos) {
            return credentialInfos(List.of(credentialInfos));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder exadataInfrastructureId(String exadataInfrastructureId) {
            if (exadataInfrastructureId == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "exadataInfrastructureId");
            }
            this.exadataInfrastructureId = exadataInfrastructureId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalId(String internalId) {
            if (internalId == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "internalId");
            }
            this.internalId = internalId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerId(String storageServerId) {
            if (storageServerId == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "storageServerId");
            }
            this.storageServerId = storageServerId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem", "version");
            }
            this.version = version;
            return this;
        }
        public GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem build() {
            final var _resultValue = new GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.agentId = agentId;
            _resultValue.connectionUri = connectionUri;
            _resultValue.connectorName = connectorName;
            _resultValue.credentialInfos = credentialInfos;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.exadataInfrastructureId = exadataInfrastructureId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.internalId = internalId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.storageServerId = storageServerId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
