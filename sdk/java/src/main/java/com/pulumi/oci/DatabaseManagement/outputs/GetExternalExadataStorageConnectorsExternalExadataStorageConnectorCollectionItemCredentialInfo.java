// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo {
    private String password;
    private String sslTrustStoreLocation;
    private String sslTrustStorePassword;
    private String sslTrustStoreType;
    private String username;

    private GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo() {}
    public String password() {
        return this.password;
    }
    public String sslTrustStoreLocation() {
        return this.sslTrustStoreLocation;
    }
    public String sslTrustStorePassword() {
        return this.sslTrustStorePassword;
    }
    public String sslTrustStoreType() {
        return this.sslTrustStoreType;
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String password;
        private String sslTrustStoreLocation;
        private String sslTrustStorePassword;
        private String sslTrustStoreType;
        private String username;
        public Builder() {}
        public Builder(GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.sslTrustStoreLocation = defaults.sslTrustStoreLocation;
    	      this.sslTrustStorePassword = defaults.sslTrustStorePassword;
    	      this.sslTrustStoreType = defaults.sslTrustStoreType;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sslTrustStoreLocation(String sslTrustStoreLocation) {
            if (sslTrustStoreLocation == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo", "sslTrustStoreLocation");
            }
            this.sslTrustStoreLocation = sslTrustStoreLocation;
            return this;
        }
        @CustomType.Setter
        public Builder sslTrustStorePassword(String sslTrustStorePassword) {
            if (sslTrustStorePassword == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo", "sslTrustStorePassword");
            }
            this.sslTrustStorePassword = sslTrustStorePassword;
            return this;
        }
        @CustomType.Setter
        public Builder sslTrustStoreType(String sslTrustStoreType) {
            if (sslTrustStoreType == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo", "sslTrustStoreType");
            }
            this.sslTrustStoreType = sslTrustStoreType;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo", "username");
            }
            this.username = username;
            return this;
        }
        public GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo build() {
            final var _resultValue = new GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo();
            _resultValue.password = password;
            _resultValue.sslTrustStoreLocation = sslTrustStoreLocation;
            _resultValue.sslTrustStorePassword = sslTrustStorePassword;
            _resultValue.sslTrustStoreType = sslTrustStoreType;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
