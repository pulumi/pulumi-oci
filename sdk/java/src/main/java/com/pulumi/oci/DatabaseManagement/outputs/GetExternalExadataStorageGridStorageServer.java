// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalExadataStorageGridStorageServer {
    /**
     * @return The additional details of the resource defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connector.
     * 
     */
    private String connectorId;
    /**
     * @return The CPU count of the Exadata storage server.
     * 
     */
    private Double cpuCount;
    /**
     * @return The name of the Exadata resource. English letters, numbers, &#34;-&#34;, &#34;_&#34; and &#34;.&#34; only.
     * 
     */
    private String displayName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata resource.
     * 
     */
    private String id;
    /**
     * @return The internal ID of the Exadata resource.
     * 
     */
    private String internalId;
    /**
     * @return The IP address of the Exadata storage server.
     * 
     */
    private String ipAddress;
    /**
     * @return The details of the lifecycle state of the Exadata resource.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The make model of the Exadata storage server.
     * 
     */
    private String makeModel;
    /**
     * @return The maximum flash disk IO operations per second of the Exadata storage server.
     * 
     */
    private Integer maxFlashDiskIops;
    /**
     * @return The maximum flash disk IO throughput in MB/s of the Exadata storage server.
     * 
     */
    private Integer maxFlashDiskThroughput;
    /**
     * @return The maximum hard disk IO operations per second of the Exadata storage server.
     * 
     */
    private Integer maxHardDiskIops;
    /**
     * @return The maximum hard disk IO throughput in MB/s of the Exadata storage server.
     * 
     */
    private Integer maxHardDiskThroughput;
    /**
     * @return The Exadata storage server memory size in GB.
     * 
     */
    private Double memoryGb;
    /**
     * @return The type of Exadata resource.
     * 
     */
    private String resourceType;
    /**
     * @return The current lifecycle state of the database resource.
     * 
     */
    private String state;
    /**
     * @return The status of the Exadata resource.
     * 
     */
    private String status;
    /**
     * @return The timestamp of the creation of the Exadata resource.
     * 
     */
    private String timeCreated;
    /**
     * @return The timestamp of the last update of the Exadata resource.
     * 
     */
    private String timeUpdated;
    /**
     * @return The version of the Exadata resource.
     * 
     */
    private String version;

    private GetExternalExadataStorageGridStorageServer() {}
    /**
     * @return The additional details of the resource defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the connector.
     * 
     */
    public String connectorId() {
        return this.connectorId;
    }
    /**
     * @return The CPU count of the Exadata storage server.
     * 
     */
    public Double cpuCount() {
        return this.cpuCount;
    }
    /**
     * @return The name of the Exadata resource. English letters, numbers, &#34;-&#34;, &#34;_&#34; and &#34;.&#34; only.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The internal ID of the Exadata resource.
     * 
     */
    public String internalId() {
        return this.internalId;
    }
    /**
     * @return The IP address of the Exadata storage server.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The details of the lifecycle state of the Exadata resource.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The make model of the Exadata storage server.
     * 
     */
    public String makeModel() {
        return this.makeModel;
    }
    /**
     * @return The maximum flash disk IO operations per second of the Exadata storage server.
     * 
     */
    public Integer maxFlashDiskIops() {
        return this.maxFlashDiskIops;
    }
    /**
     * @return The maximum flash disk IO throughput in MB/s of the Exadata storage server.
     * 
     */
    public Integer maxFlashDiskThroughput() {
        return this.maxFlashDiskThroughput;
    }
    /**
     * @return The maximum hard disk IO operations per second of the Exadata storage server.
     * 
     */
    public Integer maxHardDiskIops() {
        return this.maxHardDiskIops;
    }
    /**
     * @return The maximum hard disk IO throughput in MB/s of the Exadata storage server.
     * 
     */
    public Integer maxHardDiskThroughput() {
        return this.maxHardDiskThroughput;
    }
    /**
     * @return The Exadata storage server memory size in GB.
     * 
     */
    public Double memoryGb() {
        return this.memoryGb;
    }
    /**
     * @return The type of Exadata resource.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return The current lifecycle state of the database resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the Exadata resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The timestamp of the creation of the Exadata resource.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The timestamp of the last update of the Exadata resource.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The version of the Exadata resource.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalExadataStorageGridStorageServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalDetails;
        private String connectorId;
        private Double cpuCount;
        private String displayName;
        private String id;
        private String internalId;
        private String ipAddress;
        private String lifecycleDetails;
        private String makeModel;
        private Integer maxFlashDiskIops;
        private Integer maxFlashDiskThroughput;
        private Integer maxHardDiskIops;
        private Integer maxHardDiskThroughput;
        private Double memoryGb;
        private String resourceType;
        private String state;
        private String status;
        private String timeCreated;
        private String timeUpdated;
        private String version;
        public Builder() {}
        public Builder(GetExternalExadataStorageGridStorageServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.connectorId = defaults.connectorId;
    	      this.cpuCount = defaults.cpuCount;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.internalId = defaults.internalId;
    	      this.ipAddress = defaults.ipAddress;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.makeModel = defaults.makeModel;
    	      this.maxFlashDiskIops = defaults.maxFlashDiskIops;
    	      this.maxFlashDiskThroughput = defaults.maxFlashDiskThroughput;
    	      this.maxHardDiskIops = defaults.maxHardDiskIops;
    	      this.maxHardDiskThroughput = defaults.maxHardDiskThroughput;
    	      this.memoryGb = defaults.memoryGb;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            this.additionalDetails = Objects.requireNonNull(additionalDetails);
            return this;
        }
        @CustomType.Setter
        public Builder connectorId(String connectorId) {
            this.connectorId = Objects.requireNonNull(connectorId);
            return this;
        }
        @CustomType.Setter
        public Builder cpuCount(Double cpuCount) {
            this.cpuCount = Objects.requireNonNull(cpuCount);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder internalId(String internalId) {
            this.internalId = Objects.requireNonNull(internalId);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder makeModel(String makeModel) {
            this.makeModel = Objects.requireNonNull(makeModel);
            return this;
        }
        @CustomType.Setter
        public Builder maxFlashDiskIops(Integer maxFlashDiskIops) {
            this.maxFlashDiskIops = Objects.requireNonNull(maxFlashDiskIops);
            return this;
        }
        @CustomType.Setter
        public Builder maxFlashDiskThroughput(Integer maxFlashDiskThroughput) {
            this.maxFlashDiskThroughput = Objects.requireNonNull(maxFlashDiskThroughput);
            return this;
        }
        @CustomType.Setter
        public Builder maxHardDiskIops(Integer maxHardDiskIops) {
            this.maxHardDiskIops = Objects.requireNonNull(maxHardDiskIops);
            return this;
        }
        @CustomType.Setter
        public Builder maxHardDiskThroughput(Integer maxHardDiskThroughput) {
            this.maxHardDiskThroughput = Objects.requireNonNull(maxHardDiskThroughput);
            return this;
        }
        @CustomType.Setter
        public Builder memoryGb(Double memoryGb) {
            this.memoryGb = Objects.requireNonNull(memoryGb);
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetExternalExadataStorageGridStorageServer build() {
            final var o = new GetExternalExadataStorageGridStorageServer();
            o.additionalDetails = additionalDetails;
            o.connectorId = connectorId;
            o.cpuCount = cpuCount;
            o.displayName = displayName;
            o.id = id;
            o.internalId = internalId;
            o.ipAddress = ipAddress;
            o.lifecycleDetails = lifecycleDetails;
            o.makeModel = makeModel;
            o.maxFlashDiskIops = maxFlashDiskIops;
            o.maxFlashDiskThroughput = maxFlashDiskThroughput;
            o.maxHardDiskIops = maxHardDiskIops;
            o.maxHardDiskThroughput = maxHardDiskThroughput;
            o.memoryGb = memoryGb;
            o.resourceType = resourceType;
            o.state = state;
            o.status = status;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.version = version;
            return o;
        }
    }
}
