// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalExadataStorageServerIormPlanDbPlan;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalExadataStorageServerIormPlanResult {
    /**
     * @return The resource allocation directives must all use the share attribute, or they must all use the level and allocation attributes. If you use the share attribute to allocate I/O resources, then the database plan can have a maximum of 1024 directives. If you use the level and allocation attributes to allocate I/O resources, then the database plan can have a maximum of 32 directives. Only one directive is allowed for each database name and each profile name.
     * 
     */
    private List<GetExternalExadataStorageServerIormPlanDbPlan> dbPlans;
    private String externalExadataStorageServerId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The objective of the IORM plan.
     * 
     */
    private String planObjective;
    /**
     * @return The status of the IORM plan.
     * 
     */
    private String planStatus;

    private GetExternalExadataStorageServerIormPlanResult() {}
    /**
     * @return The resource allocation directives must all use the share attribute, or they must all use the level and allocation attributes. If you use the share attribute to allocate I/O resources, then the database plan can have a maximum of 1024 directives. If you use the level and allocation attributes to allocate I/O resources, then the database plan can have a maximum of 32 directives. Only one directive is allowed for each database name and each profile name.
     * 
     */
    public List<GetExternalExadataStorageServerIormPlanDbPlan> dbPlans() {
        return this.dbPlans;
    }
    public String externalExadataStorageServerId() {
        return this.externalExadataStorageServerId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The objective of the IORM plan.
     * 
     */
    public String planObjective() {
        return this.planObjective;
    }
    /**
     * @return The status of the IORM plan.
     * 
     */
    public String planStatus() {
        return this.planStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalExadataStorageServerIormPlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetExternalExadataStorageServerIormPlanDbPlan> dbPlans;
        private String externalExadataStorageServerId;
        private String id;
        private String planObjective;
        private String planStatus;
        public Builder() {}
        public Builder(GetExternalExadataStorageServerIormPlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbPlans = defaults.dbPlans;
    	      this.externalExadataStorageServerId = defaults.externalExadataStorageServerId;
    	      this.id = defaults.id;
    	      this.planObjective = defaults.planObjective;
    	      this.planStatus = defaults.planStatus;
        }

        @CustomType.Setter
        public Builder dbPlans(List<GetExternalExadataStorageServerIormPlanDbPlan> dbPlans) {
            if (dbPlans == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageServerIormPlanResult", "dbPlans");
            }
            this.dbPlans = dbPlans;
            return this;
        }
        public Builder dbPlans(GetExternalExadataStorageServerIormPlanDbPlan... dbPlans) {
            return dbPlans(List.of(dbPlans));
        }
        @CustomType.Setter
        public Builder externalExadataStorageServerId(String externalExadataStorageServerId) {
            if (externalExadataStorageServerId == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageServerIormPlanResult", "externalExadataStorageServerId");
            }
            this.externalExadataStorageServerId = externalExadataStorageServerId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageServerIormPlanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder planObjective(String planObjective) {
            if (planObjective == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageServerIormPlanResult", "planObjective");
            }
            this.planObjective = planObjective;
            return this;
        }
        @CustomType.Setter
        public Builder planStatus(String planStatus) {
            if (planStatus == null) {
              throw new MissingRequiredPropertyException("GetExternalExadataStorageServerIormPlanResult", "planStatus");
            }
            this.planStatus = planStatus;
            return this;
        }
        public GetExternalExadataStorageServerIormPlanResult build() {
            final var _resultValue = new GetExternalExadataStorageServerIormPlanResult();
            _resultValue.dbPlans = dbPlans;
            _resultValue.externalExadataStorageServerId = externalExadataStorageServerId;
            _resultValue.id = id;
            _resultValue.planObjective = planObjective;
            _resultValue.planStatus = planStatus;
            return _resultValue;
        }
    }
}
