// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalListenerEndpoint;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalListenerServicedAsm;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalListenerServicedDatabase;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalListenerResult {
    /**
     * @return The additional details of the external listener defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> additionalDetails;
    /**
     * @return The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
     * 
     */
    private @Nullable String adrHomeDirectory;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external database resides.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The name of the external listener.
     * 
     */
    private @Nullable String componentName;
    /**
     * @return The user-friendly name for the database. The name does not have to be unique.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    private @Nullable List<GetExternalListenerEndpoint> endpoints;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    private @Nullable String externalConnectorId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    private @Nullable String externalDbHomeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    private @Nullable String externalDbNodeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the listener is a part of.
     * 
     */
    private @Nullable String externalDbSystemId;
    private String externalListenerId;
    /**
     * @return The name of the host on which the external listener is running.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database.
     * 
     */
    private @Nullable String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return The listener alias.
     * 
     */
    private @Nullable String listenerAlias;
    /**
     * @return The location of the listener configuration file listener.ora.
     * 
     */
    private @Nullable String listenerOraLocation;
    /**
     * @return The type of listener.
     * 
     */
    private @Nullable String listenerType;
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    private @Nullable String logDirectory;
    /**
     * @return The Oracle home location of the listener.
     * 
     */
    private @Nullable String oracleHome;
    /**
     * @return The list of ASMs that are serviced by the listener.
     * 
     */
    private @Nullable List<GetExternalListenerServicedAsm> servicedAsms;
    /**
     * @return The list of databases that are serviced by the listener.
     * 
     */
    private @Nullable List<GetExternalListenerServicedDatabase> servicedDatabases;
    /**
     * @return The current lifecycle state of the external listener.
     * 
     */
    private @Nullable String state;
    /**
     * @return The date and time the external listener was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time the external listener was last updated.
     * 
     */
    private @Nullable String timeUpdated;
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    private @Nullable String traceDirectory;
    /**
     * @return The listener version.
     * 
     */
    private @Nullable String version;

    private GetExternalListenerResult() {}
    /**
     * @return The additional details of the external listener defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails == null ? Map.of() : this.additionalDetails;
    }
    /**
     * @return The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
     * 
     */
    public Optional<String> adrHomeDirectory() {
        return Optional.ofNullable(this.adrHomeDirectory);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external database resides.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The name of the external listener.
     * 
     */
    public Optional<String> componentName() {
        return Optional.ofNullable(this.componentName);
    }
    /**
     * @return The user-friendly name for the database. The name does not have to be unique.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    public List<GetExternalListenerEndpoint> endpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    public Optional<String> externalConnectorId() {
        return Optional.ofNullable(this.externalConnectorId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    public Optional<String> externalDbHomeId() {
        return Optional.ofNullable(this.externalDbHomeId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    public Optional<String> externalDbNodeId() {
        return Optional.ofNullable(this.externalDbNodeId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that the listener is a part of.
     * 
     */
    public Optional<String> externalDbSystemId() {
        return Optional.ofNullable(this.externalDbSystemId);
    }
    public String externalListenerId() {
        return this.externalListenerId;
    }
    /**
     * @return The name of the host on which the external listener is running.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return The listener alias.
     * 
     */
    public Optional<String> listenerAlias() {
        return Optional.ofNullable(this.listenerAlias);
    }
    /**
     * @return The location of the listener configuration file listener.ora.
     * 
     */
    public Optional<String> listenerOraLocation() {
        return Optional.ofNullable(this.listenerOraLocation);
    }
    /**
     * @return The type of listener.
     * 
     */
    public Optional<String> listenerType() {
        return Optional.ofNullable(this.listenerType);
    }
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    public Optional<String> logDirectory() {
        return Optional.ofNullable(this.logDirectory);
    }
    /**
     * @return The Oracle home location of the listener.
     * 
     */
    public Optional<String> oracleHome() {
        return Optional.ofNullable(this.oracleHome);
    }
    /**
     * @return The list of ASMs that are serviced by the listener.
     * 
     */
    public List<GetExternalListenerServicedAsm> servicedAsms() {
        return this.servicedAsms == null ? List.of() : this.servicedAsms;
    }
    /**
     * @return The list of databases that are serviced by the listener.
     * 
     */
    public List<GetExternalListenerServicedDatabase> servicedDatabases() {
        return this.servicedDatabases == null ? List.of() : this.servicedDatabases;
    }
    /**
     * @return The current lifecycle state of the external listener.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The date and time the external listener was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time the external listener was last updated.
     * 
     */
    public Optional<String> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    public Optional<String> traceDirectory() {
        return Optional.ofNullable(this.traceDirectory);
    }
    /**
     * @return The listener version.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalListenerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,Object> additionalDetails;
        private @Nullable String adrHomeDirectory;
        private @Nullable String compartmentId;
        private @Nullable String componentName;
        private @Nullable String displayName;
        private @Nullable List<GetExternalListenerEndpoint> endpoints;
        private @Nullable String externalConnectorId;
        private @Nullable String externalDbHomeId;
        private @Nullable String externalDbNodeId;
        private @Nullable String externalDbSystemId;
        private String externalListenerId;
        private @Nullable String hostName;
        private @Nullable String id;
        private @Nullable String lifecycleDetails;
        private @Nullable String listenerAlias;
        private @Nullable String listenerOraLocation;
        private @Nullable String listenerType;
        private @Nullable String logDirectory;
        private @Nullable String oracleHome;
        private @Nullable List<GetExternalListenerServicedAsm> servicedAsms;
        private @Nullable List<GetExternalListenerServicedDatabase> servicedDatabases;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeUpdated;
        private @Nullable String traceDirectory;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetExternalListenerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.adrHomeDirectory = defaults.adrHomeDirectory;
    	      this.compartmentId = defaults.compartmentId;
    	      this.componentName = defaults.componentName;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.externalConnectorId = defaults.externalConnectorId;
    	      this.externalDbHomeId = defaults.externalDbHomeId;
    	      this.externalDbNodeId = defaults.externalDbNodeId;
    	      this.externalDbSystemId = defaults.externalDbSystemId;
    	      this.externalListenerId = defaults.externalListenerId;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.listenerAlias = defaults.listenerAlias;
    	      this.listenerOraLocation = defaults.listenerOraLocation;
    	      this.listenerType = defaults.listenerType;
    	      this.logDirectory = defaults.logDirectory;
    	      this.oracleHome = defaults.oracleHome;
    	      this.servicedAsms = defaults.servicedAsms;
    	      this.servicedDatabases = defaults.servicedDatabases;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.traceDirectory = defaults.traceDirectory;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder additionalDetails(@Nullable Map<String,Object> additionalDetails) {
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder adrHomeDirectory(@Nullable String adrHomeDirectory) {
            this.adrHomeDirectory = adrHomeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder componentName(@Nullable String componentName) {
            this.componentName = componentName;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable List<GetExternalListenerEndpoint> endpoints) {
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(GetExternalListenerEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder externalConnectorId(@Nullable String externalConnectorId) {
            this.externalConnectorId = externalConnectorId;
            return this;
        }
        @CustomType.Setter
        public Builder externalDbHomeId(@Nullable String externalDbHomeId) {
            this.externalDbHomeId = externalDbHomeId;
            return this;
        }
        @CustomType.Setter
        public Builder externalDbNodeId(@Nullable String externalDbNodeId) {
            this.externalDbNodeId = externalDbNodeId;
            return this;
        }
        @CustomType.Setter
        public Builder externalDbSystemId(@Nullable String externalDbSystemId) {
            this.externalDbSystemId = externalDbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder externalListenerId(String externalListenerId) {
            this.externalListenerId = Objects.requireNonNull(externalListenerId);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder listenerAlias(@Nullable String listenerAlias) {
            this.listenerAlias = listenerAlias;
            return this;
        }
        @CustomType.Setter
        public Builder listenerOraLocation(@Nullable String listenerOraLocation) {
            this.listenerOraLocation = listenerOraLocation;
            return this;
        }
        @CustomType.Setter
        public Builder listenerType(@Nullable String listenerType) {
            this.listenerType = listenerType;
            return this;
        }
        @CustomType.Setter
        public Builder logDirectory(@Nullable String logDirectory) {
            this.logDirectory = logDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder oracleHome(@Nullable String oracleHome) {
            this.oracleHome = oracleHome;
            return this;
        }
        @CustomType.Setter
        public Builder servicedAsms(@Nullable List<GetExternalListenerServicedAsm> servicedAsms) {
            this.servicedAsms = servicedAsms;
            return this;
        }
        public Builder servicedAsms(GetExternalListenerServicedAsm... servicedAsms) {
            return servicedAsms(List.of(servicedAsms));
        }
        @CustomType.Setter
        public Builder servicedDatabases(@Nullable List<GetExternalListenerServicedDatabase> servicedDatabases) {
            this.servicedDatabases = servicedDatabases;
            return this;
        }
        public Builder servicedDatabases(GetExternalListenerServicedDatabase... servicedDatabases) {
            return servicedDatabases(List.of(servicedDatabases));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(@Nullable String timeUpdated) {
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder traceDirectory(@Nullable String traceDirectory) {
            this.traceDirectory = traceDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public GetExternalListenerResult build() {
            final var o = new GetExternalListenerResult();
            o.additionalDetails = additionalDetails;
            o.adrHomeDirectory = adrHomeDirectory;
            o.compartmentId = compartmentId;
            o.componentName = componentName;
            o.displayName = displayName;
            o.endpoints = endpoints;
            o.externalConnectorId = externalConnectorId;
            o.externalDbHomeId = externalDbHomeId;
            o.externalDbNodeId = externalDbNodeId;
            o.externalDbSystemId = externalDbSystemId;
            o.externalListenerId = externalListenerId;
            o.hostName = hostName;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.listenerAlias = listenerAlias;
            o.listenerOraLocation = listenerOraLocation;
            o.listenerType = listenerType;
            o.logDirectory = logDirectory;
            o.oracleHome = oracleHome;
            o.servicedAsms = servicedAsms;
            o.servicedDatabases = servicedDatabases;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.traceDirectory = traceDirectory;
            o.version = version;
            return o;
        }
    }
}
