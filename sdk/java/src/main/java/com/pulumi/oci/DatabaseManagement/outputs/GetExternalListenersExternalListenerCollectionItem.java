// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalListenersExternalListenerCollectionItemEndpoint;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalListenersExternalListenerCollectionItemServicedAsm;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalListenersExternalListenerCollectionItemServicedDatabase;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExternalListenersExternalListenerCollectionItem {
    /**
     * @return The additional details of the external listener defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> additionalDetails;
    /**
     * @return The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
     * 
     */
    private String adrHomeDirectory;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The name of the external listener.
     * 
     */
    private String componentName;
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    private String displayName;
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    private List<GetExternalListenersExternalListenerCollectionItemEndpoint> endpoints;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    private String externalConnectorId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    private String externalDbHomeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    private String externalDbNodeId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    private String externalDbSystemId;
    private String externalListenerId;
    /**
     * @return The name of the host on which the external listener is running.
     * 
     */
    private String hostName;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database.
     * 
     */
    private String id;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The listener alias.
     * 
     */
    private String listenerAlias;
    /**
     * @return The location of the listener configuration file listener.ora.
     * 
     */
    private String listenerOraLocation;
    /**
     * @return The type of listener.
     * 
     */
    private String listenerType;
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    private String logDirectory;
    /**
     * @return The Oracle home location of the listener.
     * 
     */
    private String oracleHome;
    /**
     * @return The list of ASMs that are serviced by the listener.
     * 
     */
    private List<GetExternalListenersExternalListenerCollectionItemServicedAsm> servicedAsms;
    /**
     * @return The list of databases that are serviced by the listener.
     * 
     */
    private List<GetExternalListenersExternalListenerCollectionItemServicedDatabase> servicedDatabases;
    /**
     * @return The current lifecycle state of the external listener.
     * 
     */
    private String state;
    /**
     * @return The date and time the external listener was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the external listener was last updated.
     * 
     */
    private String timeUpdated;
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    private String traceDirectory;
    /**
     * @return The listener version.
     * 
     */
    private String version;

    private GetExternalListenersExternalListenerCollectionItem() {}
    /**
     * @return The additional details of the external listener defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
     * 
     */
    public String adrHomeDirectory() {
        return this.adrHomeDirectory;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The name of the external listener.
     * 
     */
    public String componentName() {
        return this.componentName;
    }
    /**
     * @return A filter to only return the resources that match the entire display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The list of protocol addresses the listener is configured to listen on.
     * 
     */
    public List<GetExternalListenersExternalListenerCollectionItemEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external connector.
     * 
     */
    public String externalConnectorId() {
        return this.externalConnectorId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB home.
     * 
     */
    public String externalDbHomeId() {
        return this.externalDbHomeId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB node.
     * 
     */
    public String externalDbNodeId() {
        return this.externalDbNodeId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
     * 
     */
    public String externalDbSystemId() {
        return this.externalDbSystemId;
    }
    public String externalListenerId() {
        return this.externalListenerId;
    }
    /**
     * @return The name of the host on which the external listener is running.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The listener alias.
     * 
     */
    public String listenerAlias() {
        return this.listenerAlias;
    }
    /**
     * @return The location of the listener configuration file listener.ora.
     * 
     */
    public String listenerOraLocation() {
        return this.listenerOraLocation;
    }
    /**
     * @return The type of listener.
     * 
     */
    public String listenerType() {
        return this.listenerType;
    }
    /**
     * @return The destination directory of the listener log file.
     * 
     */
    public String logDirectory() {
        return this.logDirectory;
    }
    /**
     * @return The Oracle home location of the listener.
     * 
     */
    public String oracleHome() {
        return this.oracleHome;
    }
    /**
     * @return The list of ASMs that are serviced by the listener.
     * 
     */
    public List<GetExternalListenersExternalListenerCollectionItemServicedAsm> servicedAsms() {
        return this.servicedAsms;
    }
    /**
     * @return The list of databases that are serviced by the listener.
     * 
     */
    public List<GetExternalListenersExternalListenerCollectionItemServicedDatabase> servicedDatabases() {
        return this.servicedDatabases;
    }
    /**
     * @return The current lifecycle state of the external listener.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the external listener was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the external listener was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The destination directory of the listener trace file.
     * 
     */
    public String traceDirectory() {
        return this.traceDirectory;
    }
    /**
     * @return The listener version.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalListenersExternalListenerCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalDetails;
        private String adrHomeDirectory;
        private String compartmentId;
        private String componentName;
        private String displayName;
        private List<GetExternalListenersExternalListenerCollectionItemEndpoint> endpoints;
        private String externalConnectorId;
        private String externalDbHomeId;
        private String externalDbNodeId;
        private String externalDbSystemId;
        private String externalListenerId;
        private String hostName;
        private String id;
        private String lifecycleDetails;
        private String listenerAlias;
        private String listenerOraLocation;
        private String listenerType;
        private String logDirectory;
        private String oracleHome;
        private List<GetExternalListenersExternalListenerCollectionItemServicedAsm> servicedAsms;
        private List<GetExternalListenersExternalListenerCollectionItemServicedDatabase> servicedDatabases;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        private String traceDirectory;
        private String version;
        public Builder() {}
        public Builder(GetExternalListenersExternalListenerCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.adrHomeDirectory = defaults.adrHomeDirectory;
    	      this.compartmentId = defaults.compartmentId;
    	      this.componentName = defaults.componentName;
    	      this.displayName = defaults.displayName;
    	      this.endpoints = defaults.endpoints;
    	      this.externalConnectorId = defaults.externalConnectorId;
    	      this.externalDbHomeId = defaults.externalDbHomeId;
    	      this.externalDbNodeId = defaults.externalDbNodeId;
    	      this.externalDbSystemId = defaults.externalDbSystemId;
    	      this.externalListenerId = defaults.externalListenerId;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.listenerAlias = defaults.listenerAlias;
    	      this.listenerOraLocation = defaults.listenerOraLocation;
    	      this.listenerType = defaults.listenerType;
    	      this.logDirectory = defaults.logDirectory;
    	      this.oracleHome = defaults.oracleHome;
    	      this.servicedAsms = defaults.servicedAsms;
    	      this.servicedDatabases = defaults.servicedDatabases;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.traceDirectory = defaults.traceDirectory;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            this.additionalDetails = Objects.requireNonNull(additionalDetails);
            return this;
        }
        @CustomType.Setter
        public Builder adrHomeDirectory(String adrHomeDirectory) {
            this.adrHomeDirectory = Objects.requireNonNull(adrHomeDirectory);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder componentName(String componentName) {
            this.componentName = Objects.requireNonNull(componentName);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(List<GetExternalListenersExternalListenerCollectionItemEndpoint> endpoints) {
            this.endpoints = Objects.requireNonNull(endpoints);
            return this;
        }
        public Builder endpoints(GetExternalListenersExternalListenerCollectionItemEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder externalConnectorId(String externalConnectorId) {
            this.externalConnectorId = Objects.requireNonNull(externalConnectorId);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbHomeId(String externalDbHomeId) {
            this.externalDbHomeId = Objects.requireNonNull(externalDbHomeId);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbNodeId(String externalDbNodeId) {
            this.externalDbNodeId = Objects.requireNonNull(externalDbNodeId);
            return this;
        }
        @CustomType.Setter
        public Builder externalDbSystemId(String externalDbSystemId) {
            this.externalDbSystemId = Objects.requireNonNull(externalDbSystemId);
            return this;
        }
        @CustomType.Setter
        public Builder externalListenerId(String externalListenerId) {
            this.externalListenerId = Objects.requireNonNull(externalListenerId);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            this.lifecycleDetails = Objects.requireNonNull(lifecycleDetails);
            return this;
        }
        @CustomType.Setter
        public Builder listenerAlias(String listenerAlias) {
            this.listenerAlias = Objects.requireNonNull(listenerAlias);
            return this;
        }
        @CustomType.Setter
        public Builder listenerOraLocation(String listenerOraLocation) {
            this.listenerOraLocation = Objects.requireNonNull(listenerOraLocation);
            return this;
        }
        @CustomType.Setter
        public Builder listenerType(String listenerType) {
            this.listenerType = Objects.requireNonNull(listenerType);
            return this;
        }
        @CustomType.Setter
        public Builder logDirectory(String logDirectory) {
            this.logDirectory = Objects.requireNonNull(logDirectory);
            return this;
        }
        @CustomType.Setter
        public Builder oracleHome(String oracleHome) {
            this.oracleHome = Objects.requireNonNull(oracleHome);
            return this;
        }
        @CustomType.Setter
        public Builder servicedAsms(List<GetExternalListenersExternalListenerCollectionItemServicedAsm> servicedAsms) {
            this.servicedAsms = Objects.requireNonNull(servicedAsms);
            return this;
        }
        public Builder servicedAsms(GetExternalListenersExternalListenerCollectionItemServicedAsm... servicedAsms) {
            return servicedAsms(List.of(servicedAsms));
        }
        @CustomType.Setter
        public Builder servicedDatabases(List<GetExternalListenersExternalListenerCollectionItemServicedDatabase> servicedDatabases) {
            this.servicedDatabases = Objects.requireNonNull(servicedDatabases);
            return this;
        }
        public Builder servicedDatabases(GetExternalListenersExternalListenerCollectionItemServicedDatabase... servicedDatabases) {
            return servicedDatabases(List.of(servicedDatabases));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder traceDirectory(String traceDirectory) {
            this.traceDirectory = Objects.requireNonNull(traceDirectory);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetExternalListenersExternalListenerCollectionItem build() {
            final var o = new GetExternalListenersExternalListenerCollectionItem();
            o.additionalDetails = additionalDetails;
            o.adrHomeDirectory = adrHomeDirectory;
            o.compartmentId = compartmentId;
            o.componentName = componentName;
            o.displayName = displayName;
            o.endpoints = endpoints;
            o.externalConnectorId = externalConnectorId;
            o.externalDbHomeId = externalDbHomeId;
            o.externalDbNodeId = externalDbNodeId;
            o.externalDbSystemId = externalDbSystemId;
            o.externalListenerId = externalListenerId;
            o.hostName = hostName;
            o.id = id;
            o.lifecycleDetails = lifecycleDetails;
            o.listenerAlias = listenerAlias;
            o.listenerOraLocation = listenerOraLocation;
            o.listenerType = listenerType;
            o.logDirectory = logDirectory;
            o.oracleHome = oracleHome;
            o.servicedAsms = servicedAsms;
            o.servicedDatabases = servicedDatabases;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeUpdated = timeUpdated;
            o.traceDirectory = traceDirectory;
            o.version = version;
            return o;
        }
    }
}
