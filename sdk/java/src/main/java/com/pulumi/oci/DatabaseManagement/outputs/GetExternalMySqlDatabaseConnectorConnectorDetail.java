// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExternalMySqlDatabaseConnectorConnectorDetail {
    /**
     * @return Credential type used to connect to database.
     * 
     */
    private String credentialType;
    private String displayName;
    /**
     * @return OCID of MySQL Database resource
     * 
     */
    private String externalDatabaseId;
    /**
     * @return Host name for Connector.
     * 
     */
    private String hostName;
    /**
     * @return Agent Id of the MACS agent.
     * 
     */
    private String macsAgentId;
    /**
     * @return Network Protocol.
     * 
     */
    private String networkProtocol;
    /**
     * @return Connector port.
     * 
     */
    private Integer port;
    /**
     * @return OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    private String sslSecretId;

    private GetExternalMySqlDatabaseConnectorConnectorDetail() {}
    /**
     * @return Credential type used to connect to database.
     * 
     */
    public String credentialType() {
        return this.credentialType;
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return OCID of MySQL Database resource
     * 
     */
    public String externalDatabaseId() {
        return this.externalDatabaseId;
    }
    /**
     * @return Host name for Connector.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return Agent Id of the MACS agent.
     * 
     */
    public String macsAgentId() {
        return this.macsAgentId;
    }
    /**
     * @return Network Protocol.
     * 
     */
    public String networkProtocol() {
        return this.networkProtocol;
    }
    /**
     * @return Connector port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    public String sslSecretId() {
        return this.sslSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalMySqlDatabaseConnectorConnectorDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String credentialType;
        private String displayName;
        private String externalDatabaseId;
        private String hostName;
        private String macsAgentId;
        private String networkProtocol;
        private Integer port;
        private String sslSecretId;
        public Builder() {}
        public Builder(GetExternalMySqlDatabaseConnectorConnectorDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialType = defaults.credentialType;
    	      this.displayName = defaults.displayName;
    	      this.externalDatabaseId = defaults.externalDatabaseId;
    	      this.hostName = defaults.hostName;
    	      this.macsAgentId = defaults.macsAgentId;
    	      this.networkProtocol = defaults.networkProtocol;
    	      this.port = defaults.port;
    	      this.sslSecretId = defaults.sslSecretId;
        }

        @CustomType.Setter
        public Builder credentialType(String credentialType) {
            if (credentialType == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "credentialType");
            }
            this.credentialType = credentialType;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder externalDatabaseId(String externalDatabaseId) {
            if (externalDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "externalDatabaseId");
            }
            this.externalDatabaseId = externalDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder macsAgentId(String macsAgentId) {
            if (macsAgentId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "macsAgentId");
            }
            this.macsAgentId = macsAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder networkProtocol(String networkProtocol) {
            if (networkProtocol == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "networkProtocol");
            }
            this.networkProtocol = networkProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder sslSecretId(String sslSecretId) {
            if (sslSecretId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorConnectorDetail", "sslSecretId");
            }
            this.sslSecretId = sslSecretId;
            return this;
        }
        public GetExternalMySqlDatabaseConnectorConnectorDetail build() {
            final var _resultValue = new GetExternalMySqlDatabaseConnectorConnectorDetail();
            _resultValue.credentialType = credentialType;
            _resultValue.displayName = displayName;
            _resultValue.externalDatabaseId = externalDatabaseId;
            _resultValue.hostName = hostName;
            _resultValue.macsAgentId = macsAgentId;
            _resultValue.networkProtocol = networkProtocol;
            _resultValue.port = port;
            _resultValue.sslSecretId = sslSecretId;
            return _resultValue;
        }
    }
}
