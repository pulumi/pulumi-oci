// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItemConnectorDetail;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem {
    /**
     * @return Oracle Cloud Infrastructure Services associated with this connector.
     * 
     */
    private String associatedServices;
    private Integer checkConnectionStatusTrigger;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Connection Status
     * 
     */
    private String connectionStatus;
    private List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItemConnectorDetail> connectorDetails;
    /**
     * @return Connector Type.
     * 
     */
    private String connectorType;
    /**
     * @return Credential type used to connect to database.
     * 
     */
    private String credentialType;
    /**
     * @return OCID of MySQL Database resource
     * 
     */
    private String externalDatabaseId;
    /**
     * @return Host name for Connector.
     * 
     */
    private String hostName;
    /**
     * @return OCID of MySQL Database Connector.
     * 
     */
    private String id;
    private Boolean isTestConnectionParam;
    /**
     * @return Agent Id of the MACS agent.
     * 
     */
    private String macsAgentId;
    /**
     * @return The parameter to filter by MySQL Database System type.
     * 
     */
    private String name;
    /**
     * @return Network Protocol.
     * 
     */
    private String networkProtocol;
    /**
     * @return Connector port.
     * 
     */
    private Integer port;
    /**
     * @return Name of MySQL Database.
     * 
     */
    private String sourceDatabase;
    /**
     * @return Type of MySQL Database.
     * 
     */
    private String sourceDatabaseType;
    /**
     * @return OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    private String sslSecretId;
    /**
     * @return Name of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    private String sslSecretName;
    /**
     * @return Indicates lifecycle  state of the resource.
     * 
     */
    private String state;
    /**
     * @return Time when connection status was last updated.
     * 
     */
    private String timeConnectionStatusUpdated;
    /**
     * @return Connector creation time.
     * 
     */
    private String timeCreated;
    /**
     * @return Connector update time.
     * 
     */
    private String timeUpdated;

    private GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem() {}
    /**
     * @return Oracle Cloud Infrastructure Services associated with this connector.
     * 
     */
    public String associatedServices() {
        return this.associatedServices;
    }
    public Integer checkConnectionStatusTrigger() {
        return this.checkConnectionStatusTrigger;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Connection Status
     * 
     */
    public String connectionStatus() {
        return this.connectionStatus;
    }
    public List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItemConnectorDetail> connectorDetails() {
        return this.connectorDetails;
    }
    /**
     * @return Connector Type.
     * 
     */
    public String connectorType() {
        return this.connectorType;
    }
    /**
     * @return Credential type used to connect to database.
     * 
     */
    public String credentialType() {
        return this.credentialType;
    }
    /**
     * @return OCID of MySQL Database resource
     * 
     */
    public String externalDatabaseId() {
        return this.externalDatabaseId;
    }
    /**
     * @return Host name for Connector.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return OCID of MySQL Database Connector.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isTestConnectionParam() {
        return this.isTestConnectionParam;
    }
    /**
     * @return Agent Id of the MACS agent.
     * 
     */
    public String macsAgentId() {
        return this.macsAgentId;
    }
    /**
     * @return The parameter to filter by MySQL Database System type.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Network Protocol.
     * 
     */
    public String networkProtocol() {
        return this.networkProtocol;
    }
    /**
     * @return Connector port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Name of MySQL Database.
     * 
     */
    public String sourceDatabase() {
        return this.sourceDatabase;
    }
    /**
     * @return Type of MySQL Database.
     * 
     */
    public String sourceDatabaseType() {
        return this.sourceDatabaseType;
    }
    /**
     * @return OCID of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    public String sslSecretId() {
        return this.sslSecretId;
    }
    /**
     * @return Name of the SSL secret, if TCPS with SSL is used to connect to database.
     * 
     */
    public String sslSecretName() {
        return this.sslSecretName;
    }
    /**
     * @return Indicates lifecycle  state of the resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time when connection status was last updated.
     * 
     */
    public String timeConnectionStatusUpdated() {
        return this.timeConnectionStatusUpdated;
    }
    /**
     * @return Connector creation time.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Connector update time.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String associatedServices;
        private Integer checkConnectionStatusTrigger;
        private String compartmentId;
        private String connectionStatus;
        private List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItemConnectorDetail> connectorDetails;
        private String connectorType;
        private String credentialType;
        private String externalDatabaseId;
        private String hostName;
        private String id;
        private Boolean isTestConnectionParam;
        private String macsAgentId;
        private String name;
        private String networkProtocol;
        private Integer port;
        private String sourceDatabase;
        private String sourceDatabaseType;
        private String sslSecretId;
        private String sslSecretName;
        private String state;
        private String timeConnectionStatusUpdated;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associatedServices = defaults.associatedServices;
    	      this.checkConnectionStatusTrigger = defaults.checkConnectionStatusTrigger;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionStatus = defaults.connectionStatus;
    	      this.connectorDetails = defaults.connectorDetails;
    	      this.connectorType = defaults.connectorType;
    	      this.credentialType = defaults.credentialType;
    	      this.externalDatabaseId = defaults.externalDatabaseId;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.isTestConnectionParam = defaults.isTestConnectionParam;
    	      this.macsAgentId = defaults.macsAgentId;
    	      this.name = defaults.name;
    	      this.networkProtocol = defaults.networkProtocol;
    	      this.port = defaults.port;
    	      this.sourceDatabase = defaults.sourceDatabase;
    	      this.sourceDatabaseType = defaults.sourceDatabaseType;
    	      this.sslSecretId = defaults.sslSecretId;
    	      this.sslSecretName = defaults.sslSecretName;
    	      this.state = defaults.state;
    	      this.timeConnectionStatusUpdated = defaults.timeConnectionStatusUpdated;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder associatedServices(String associatedServices) {
            if (associatedServices == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "associatedServices");
            }
            this.associatedServices = associatedServices;
            return this;
        }
        @CustomType.Setter
        public Builder checkConnectionStatusTrigger(Integer checkConnectionStatusTrigger) {
            if (checkConnectionStatusTrigger == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "checkConnectionStatusTrigger");
            }
            this.checkConnectionStatusTrigger = checkConnectionStatusTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStatus(String connectionStatus) {
            if (connectionStatus == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "connectionStatus");
            }
            this.connectionStatus = connectionStatus;
            return this;
        }
        @CustomType.Setter
        public Builder connectorDetails(List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItemConnectorDetail> connectorDetails) {
            if (connectorDetails == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "connectorDetails");
            }
            this.connectorDetails = connectorDetails;
            return this;
        }
        public Builder connectorDetails(GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItemConnectorDetail... connectorDetails) {
            return connectorDetails(List.of(connectorDetails));
        }
        @CustomType.Setter
        public Builder connectorType(String connectorType) {
            if (connectorType == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "connectorType");
            }
            this.connectorType = connectorType;
            return this;
        }
        @CustomType.Setter
        public Builder credentialType(String credentialType) {
            if (credentialType == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "credentialType");
            }
            this.credentialType = credentialType;
            return this;
        }
        @CustomType.Setter
        public Builder externalDatabaseId(String externalDatabaseId) {
            if (externalDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "externalDatabaseId");
            }
            this.externalDatabaseId = externalDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isTestConnectionParam(Boolean isTestConnectionParam) {
            if (isTestConnectionParam == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "isTestConnectionParam");
            }
            this.isTestConnectionParam = isTestConnectionParam;
            return this;
        }
        @CustomType.Setter
        public Builder macsAgentId(String macsAgentId) {
            if (macsAgentId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "macsAgentId");
            }
            this.macsAgentId = macsAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkProtocol(String networkProtocol) {
            if (networkProtocol == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "networkProtocol");
            }
            this.networkProtocol = networkProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabase(String sourceDatabase) {
            if (sourceDatabase == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "sourceDatabase");
            }
            this.sourceDatabase = sourceDatabase;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabaseType(String sourceDatabaseType) {
            if (sourceDatabaseType == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "sourceDatabaseType");
            }
            this.sourceDatabaseType = sourceDatabaseType;
            return this;
        }
        @CustomType.Setter
        public Builder sslSecretId(String sslSecretId) {
            if (sslSecretId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "sslSecretId");
            }
            this.sslSecretId = sslSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder sslSecretName(String sslSecretName) {
            if (sslSecretName == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "sslSecretName");
            }
            this.sslSecretName = sslSecretName;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeConnectionStatusUpdated(String timeConnectionStatusUpdated) {
            if (timeConnectionStatusUpdated == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "timeConnectionStatusUpdated");
            }
            this.timeConnectionStatusUpdated = timeConnectionStatusUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem build() {
            final var _resultValue = new GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionItem();
            _resultValue.associatedServices = associatedServices;
            _resultValue.checkConnectionStatusTrigger = checkConnectionStatusTrigger;
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionStatus = connectionStatus;
            _resultValue.connectorDetails = connectorDetails;
            _resultValue.connectorType = connectorType;
            _resultValue.credentialType = credentialType;
            _resultValue.externalDatabaseId = externalDatabaseId;
            _resultValue.hostName = hostName;
            _resultValue.id = id;
            _resultValue.isTestConnectionParam = isTestConnectionParam;
            _resultValue.macsAgentId = macsAgentId;
            _resultValue.name = name;
            _resultValue.networkProtocol = networkProtocol;
            _resultValue.port = port;
            _resultValue.sourceDatabase = sourceDatabase;
            _resultValue.sourceDatabaseType = sourceDatabaseType;
            _resultValue.sslSecretId = sslSecretId;
            _resultValue.sslSecretName = sslSecretName;
            _resultValue.state = state;
            _resultValue.timeConnectionStatusUpdated = timeConnectionStatusUpdated;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
