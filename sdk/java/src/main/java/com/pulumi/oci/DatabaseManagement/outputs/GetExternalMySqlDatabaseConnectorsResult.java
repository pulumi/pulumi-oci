// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalMySqlDatabaseConnectorsFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalMySqlDatabaseConnectorsMySqlConnectorCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalMySqlDatabaseConnectorsResult {
    /**
     * @return OCID of compartment for the External MySQL connector.
     * 
     */
    private String compartmentId;
    private @Nullable List<GetExternalMySqlDatabaseConnectorsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of my_sql_connector_collection.
     * 
     */
    private List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollection> mySqlConnectorCollections;
    /**
     * @return External MySQL Database Connector Name.
     * 
     */
    private @Nullable String name;

    private GetExternalMySqlDatabaseConnectorsResult() {}
    /**
     * @return OCID of compartment for the External MySQL connector.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetExternalMySqlDatabaseConnectorsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of my_sql_connector_collection.
     * 
     */
    public List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollection> mySqlConnectorCollections() {
        return this.mySqlConnectorCollections;
    }
    /**
     * @return External MySQL Database Connector Name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalMySqlDatabaseConnectorsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetExternalMySqlDatabaseConnectorsFilter> filters;
        private String id;
        private List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollection> mySqlConnectorCollections;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetExternalMySqlDatabaseConnectorsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.mySqlConnectorCollections = defaults.mySqlConnectorCollections;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetExternalMySqlDatabaseConnectorsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetExternalMySqlDatabaseConnectorsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mySqlConnectorCollections(List<GetExternalMySqlDatabaseConnectorsMySqlConnectorCollection> mySqlConnectorCollections) {
            if (mySqlConnectorCollections == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseConnectorsResult", "mySqlConnectorCollections");
            }
            this.mySqlConnectorCollections = mySqlConnectorCollections;
            return this;
        }
        public Builder mySqlConnectorCollections(GetExternalMySqlDatabaseConnectorsMySqlConnectorCollection... mySqlConnectorCollections) {
            return mySqlConnectorCollections(List.of(mySqlConnectorCollections));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        public GetExternalMySqlDatabaseConnectorsResult build() {
            final var _resultValue = new GetExternalMySqlDatabaseConnectorsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.mySqlConnectorCollections = mySqlConnectorCollections;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
