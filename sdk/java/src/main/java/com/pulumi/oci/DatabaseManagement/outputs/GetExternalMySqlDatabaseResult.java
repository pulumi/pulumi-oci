// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExternalMySqlDatabaseResult {
    /**
     * @return OCID of compartment for the External MySQL Database.
     * 
     */
    private String compartmentId;
    /**
     * @return Display Name of the External MySQL Database.
     * 
     */
    private String dbName;
    /**
     * @return OCID of External MySQL Database.
     * 
     */
    private String externalDatabaseId;
    private String externalMySqlDatabaseId;
    private String id;

    private GetExternalMySqlDatabaseResult() {}
    /**
     * @return OCID of compartment for the External MySQL Database.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Display Name of the External MySQL Database.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return OCID of External MySQL Database.
     * 
     */
    public String externalDatabaseId() {
        return this.externalDatabaseId;
    }
    public String externalMySqlDatabaseId() {
        return this.externalMySqlDatabaseId;
    }
    public String id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalMySqlDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String dbName;
        private String externalDatabaseId;
        private String externalMySqlDatabaseId;
        private String id;
        public Builder() {}
        public Builder(GetExternalMySqlDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbName = defaults.dbName;
    	      this.externalDatabaseId = defaults.externalDatabaseId;
    	      this.externalMySqlDatabaseId = defaults.externalMySqlDatabaseId;
    	      this.id = defaults.id;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            if (dbName == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseResult", "dbName");
            }
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder externalDatabaseId(String externalDatabaseId) {
            if (externalDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseResult", "externalDatabaseId");
            }
            this.externalDatabaseId = externalDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder externalMySqlDatabaseId(String externalMySqlDatabaseId) {
            if (externalMySqlDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseResult", "externalMySqlDatabaseId");
            }
            this.externalMySqlDatabaseId = externalMySqlDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        public GetExternalMySqlDatabaseResult build() {
            final var _resultValue = new GetExternalMySqlDatabaseResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.dbName = dbName;
            _resultValue.externalDatabaseId = externalDatabaseId;
            _resultValue.externalMySqlDatabaseId = externalMySqlDatabaseId;
            _resultValue.id = id;
            return _resultValue;
        }
    }
}
