// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Display Name of the External MySQL Database.
     * 
     */
    private String dbName;
    /**
     * @return OCID of External MySQL Database.
     * 
     */
    private String externalDatabaseId;

    private GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Display Name of the External MySQL Database.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return OCID of External MySQL Database.
     * 
     */
    public String externalDatabaseId() {
        return this.externalDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String dbName;
        private String externalDatabaseId;
        public Builder() {}
        public Builder(GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbName = defaults.dbName;
    	      this.externalDatabaseId = defaults.externalDatabaseId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            if (dbName == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem", "dbName");
            }
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder externalDatabaseId(String externalDatabaseId) {
            if (externalDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem", "externalDatabaseId");
            }
            this.externalDatabaseId = externalDatabaseId;
            return this;
        }
        public GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem build() {
            final var _resultValue = new GetExternalMySqlDatabasesExternalMySqlDatabaseCollectionItem();
            _resultValue.compartmentId = compartmentId;
            _resultValue.dbName = dbName;
            _resultValue.externalDatabaseId = externalDatabaseId;
            return _resultValue;
        }
    }
}
