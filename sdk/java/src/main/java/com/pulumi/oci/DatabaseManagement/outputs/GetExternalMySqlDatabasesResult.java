// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalMySqlDatabasesExternalMySqlDatabaseCollection;
import com.pulumi.oci.DatabaseManagement.outputs.GetExternalMySqlDatabasesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalMySqlDatabasesResult {
    /**
     * @return OCID of compartment for the External MySQL Database.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of external_my_sql_database_collection.
     * 
     */
    private List<GetExternalMySqlDatabasesExternalMySqlDatabaseCollection> externalMySqlDatabaseCollections;
    private @Nullable List<GetExternalMySqlDatabasesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String name;

    private GetExternalMySqlDatabasesResult() {}
    /**
     * @return OCID of compartment for the External MySQL Database.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of external_my_sql_database_collection.
     * 
     */
    public List<GetExternalMySqlDatabasesExternalMySqlDatabaseCollection> externalMySqlDatabaseCollections() {
        return this.externalMySqlDatabaseCollections;
    }
    public List<GetExternalMySqlDatabasesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalMySqlDatabasesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetExternalMySqlDatabasesExternalMySqlDatabaseCollection> externalMySqlDatabaseCollections;
        private @Nullable List<GetExternalMySqlDatabasesFilter> filters;
        private String id;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetExternalMySqlDatabasesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.externalMySqlDatabaseCollections = defaults.externalMySqlDatabaseCollections;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabasesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder externalMySqlDatabaseCollections(List<GetExternalMySqlDatabasesExternalMySqlDatabaseCollection> externalMySqlDatabaseCollections) {
            if (externalMySqlDatabaseCollections == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabasesResult", "externalMySqlDatabaseCollections");
            }
            this.externalMySqlDatabaseCollections = externalMySqlDatabaseCollections;
            return this;
        }
        public Builder externalMySqlDatabaseCollections(GetExternalMySqlDatabasesExternalMySqlDatabaseCollection... externalMySqlDatabaseCollections) {
            return externalMySqlDatabaseCollections(List.of(externalMySqlDatabaseCollections));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetExternalMySqlDatabasesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetExternalMySqlDatabasesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalMySqlDatabasesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        public GetExternalMySqlDatabasesResult build() {
            final var _resultValue = new GetExternalMySqlDatabasesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.externalMySqlDatabaseCollections = externalMySqlDatabaseCollections;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
