// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseCursorCacheStatementsFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseCursorCacheStatementsResult {
    /**
     * @return The list of cursor_cache_statement_collection.
     * 
     */
    private @Nullable List<GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection> cursorCacheStatementCollections;
    private @Nullable List<GetManagedDatabaseCursorCacheStatementsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private @Nullable Integer limit;
    private String managedDatabaseId;
    /**
     * @return The first thousand characters of the SQL text.
     * 
     */
    private @Nullable String sqlText;

    private GetManagedDatabaseCursorCacheStatementsResult() {}
    /**
     * @return The list of cursor_cache_statement_collection.
     * 
     */
    public List<GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection> cursorCacheStatementCollections() {
        return this.cursorCacheStatementCollections == null ? List.of() : this.cursorCacheStatementCollections;
    }
    public List<GetManagedDatabaseCursorCacheStatementsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The first thousand characters of the SQL text.
     * 
     */
    public Optional<String> sqlText() {
        return Optional.ofNullable(this.sqlText);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseCursorCacheStatementsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection> cursorCacheStatementCollections;
        private @Nullable List<GetManagedDatabaseCursorCacheStatementsFilter> filters;
        private @Nullable String id;
        private @Nullable Integer limit;
        private String managedDatabaseId;
        private @Nullable String sqlText;
        public Builder() {}
        public Builder(GetManagedDatabaseCursorCacheStatementsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cursorCacheStatementCollections = defaults.cursorCacheStatementCollections;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.limit = defaults.limit;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.sqlText = defaults.sqlText;
        }

        @CustomType.Setter
        public Builder cursorCacheStatementCollections(@Nullable List<GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection> cursorCacheStatementCollections) {
            this.cursorCacheStatementCollections = cursorCacheStatementCollections;
            return this;
        }
        public Builder cursorCacheStatementCollections(GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection... cursorCacheStatementCollections) {
            return cursorCacheStatementCollections(List.of(cursorCacheStatementCollections));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedDatabaseCursorCacheStatementsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabaseCursorCacheStatementsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {
            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(@Nullable String sqlText) {
            this.sqlText = sqlText;
            return this;
        }
        public GetManagedDatabaseCursorCacheStatementsResult build() {
            final var o = new GetManagedDatabaseCursorCacheStatementsResult();
            o.cursorCacheStatementCollections = cursorCacheStatementCollections;
            o.filters = filters;
            o.id = id;
            o.limit = limit;
            o.managedDatabaseId = managedDatabaseId;
            o.sqlText = sqlText;
            return o;
        }
    }
}
