// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseGroupManagedDatabase {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    private @Nullable String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    private @Nullable String deploymentType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the Managed Database Group.
     * 
     */
    private @Nullable String name;
    /**
     * @return The date and time the Managed Database was added to the group.
     * 
     */
    private @Nullable String timeAdded;
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    private @Nullable String workloadType;

    private GetManagedDatabaseGroupManagedDatabase() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    public Optional<String> databaseSubType() {
        return Optional.ofNullable(this.databaseSubType);
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    public Optional<String> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the Managed Database Group.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The date and time the Managed Database was added to the group.
     * 
     */
    public Optional<String> timeAdded() {
        return Optional.ofNullable(this.timeAdded);
    }
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    public Optional<String> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseGroupManagedDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String databaseSubType;
        private @Nullable String databaseType;
        private @Nullable String deploymentType;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String timeAdded;
        private @Nullable String workloadType;
        public Builder() {}
        public Builder(GetManagedDatabaseGroupManagedDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.deploymentType = defaults.deploymentType;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.timeAdded = defaults.timeAdded;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(@Nullable String databaseSubType) {
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(@Nullable String deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder timeAdded(@Nullable String timeAdded) {
            this.timeAdded = timeAdded;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(@Nullable String workloadType) {
            this.workloadType = workloadType;
            return this;
        }
        public GetManagedDatabaseGroupManagedDatabase build() {
            final var o = new GetManagedDatabaseGroupManagedDatabase();
            o.compartmentId = compartmentId;
            o.databaseSubType = databaseSubType;
            o.databaseType = databaseType;
            o.deploymentType = deploymentType;
            o.id = id;
            o.name = name;
            o.timeAdded = timeAdded;
            o.workloadType = workloadType;
            return o;
        }
    }
}
