// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseGroupManagedDatabase;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseGroupResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    private String compartmentId;
    /**
     * @return The information specified by the user about the Managed Database Group.
     * 
     */
    private String description;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    private String id;
    private String managedDatabaseGroupId;
    /**
     * @return A list of Managed Databases in the Managed Database Group.
     * 
     */
    private List<GetManagedDatabaseGroupManagedDatabase> managedDatabases;
    /**
     * @return The name of the Managed Database Group.
     * 
     */
    private String name;
    /**
     * @return The current lifecycle state of the Managed Database Group.
     * 
     */
    private String state;
    /**
     * @return The date and time the Managed Database Group was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the Managed Database Group was last updated.
     * 
     */
    private String timeUpdated;

    private GetManagedDatabaseGroupResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The information specified by the user about the Managed Database Group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedDatabaseGroupId() {
        return this.managedDatabaseGroupId;
    }
    /**
     * @return A list of Managed Databases in the Managed Database Group.
     * 
     */
    public List<GetManagedDatabaseGroupManagedDatabase> managedDatabases() {
        return this.managedDatabases;
    }
    /**
     * @return The name of the Managed Database Group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current lifecycle state of the Managed Database Group.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the Managed Database Group was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the Managed Database Group was last updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String description;
        private String id;
        private String managedDatabaseGroupId;
        private List<GetManagedDatabaseGroupManagedDatabase> managedDatabases;
        private String name;
        private String state;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetManagedDatabaseGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.managedDatabaseGroupId = defaults.managedDatabaseGroupId;
    	      this.managedDatabases = defaults.managedDatabases;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseGroupId(String managedDatabaseGroupId) {
            if (managedDatabaseGroupId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "managedDatabaseGroupId");
            }
            this.managedDatabaseGroupId = managedDatabaseGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabases(List<GetManagedDatabaseGroupManagedDatabase> managedDatabases) {
            if (managedDatabases == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "managedDatabases");
            }
            this.managedDatabases = managedDatabases;
            return this;
        }
        public Builder managedDatabases(GetManagedDatabaseGroupManagedDatabase... managedDatabases) {
            return managedDatabases(List.of(managedDatabases));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseGroupResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetManagedDatabaseGroupResult build() {
            final var _resultValue = new GetManagedDatabaseGroupResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.managedDatabaseGroupId = managedDatabaseGroupId;
            _resultValue.managedDatabases = managedDatabases;
            _resultValue.name = name;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
