// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabase;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReport;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult {
    /**
     * @return The summary of the Managed Database resource.
     * 
     */
    private List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabase> databases;
    /**
     * @return The errors in the Optimizer Statistics Advisor execution, if any.
     * 
     */
    private String errorMessage;
    /**
     * @return The name of the Optimizer Statistics Advisor execution.
     * 
     */
    private String executionName;
    /**
     * @return The list of findings for the rule.
     * 
     */
    private Integer findings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String managedDatabaseId;
    /**
     * @return A report that includes the rules, findings, recommendations, and actions discovered during the execution of the Optimizer Statistics Advisor.
     * 
     */
    private List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReport> reports;
    /**
     * @return The status of the Optimizer Statistics Advisor execution.
     * 
     */
    private String status;
    /**
     * @return The Optimizer Statistics Advisor execution status message, if any.
     * 
     */
    private String statusMessage;
    /**
     * @return The name of the Optimizer Statistics Advisor task.
     * 
     */
    private String taskName;
    /**
     * @return The end time of the time range to retrieve the Optimizer Statistics Advisor execution of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    private String timeEnd;
    /**
     * @return The start time of the time range to retrieve the Optimizer Statistics Advisor execution of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    private String timeStart;

    private GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult() {}
    /**
     * @return The summary of the Managed Database resource.
     * 
     */
    public List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabase> databases() {
        return this.databases;
    }
    /**
     * @return The errors in the Optimizer Statistics Advisor execution, if any.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return The name of the Optimizer Statistics Advisor execution.
     * 
     */
    public String executionName() {
        return this.executionName;
    }
    /**
     * @return The list of findings for the rule.
     * 
     */
    public Integer findings() {
        return this.findings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return A report that includes the rules, findings, recommendations, and actions discovered during the execution of the Optimizer Statistics Advisor.
     * 
     */
    public List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReport> reports() {
        return this.reports;
    }
    /**
     * @return The status of the Optimizer Statistics Advisor execution.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The Optimizer Statistics Advisor execution status message, if any.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return The name of the Optimizer Statistics Advisor task.
     * 
     */
    public String taskName() {
        return this.taskName;
    }
    /**
     * @return The end time of the time range to retrieve the Optimizer Statistics Advisor execution of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    public String timeEnd() {
        return this.timeEnd;
    }
    /**
     * @return The start time of the time range to retrieve the Optimizer Statistics Advisor execution of a Managed Database in UTC in ISO-8601 format, which is &#34;yyyy-MM-dd&#39;T&#39;hh:mm:ss.sss&#39;Z&#39;&#34;.
     * 
     */
    public String timeStart() {
        return this.timeStart;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabase> databases;
        private String errorMessage;
        private String executionName;
        private Integer findings;
        private String id;
        private String managedDatabaseId;
        private List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReport> reports;
        private String status;
        private String statusMessage;
        private String taskName;
        private String timeEnd;
        private String timeStart;
        public Builder() {}
        public Builder(GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databases = defaults.databases;
    	      this.errorMessage = defaults.errorMessage;
    	      this.executionName = defaults.executionName;
    	      this.findings = defaults.findings;
    	      this.id = defaults.id;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.reports = defaults.reports;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.taskName = defaults.taskName;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
        }

        @CustomType.Setter
        public Builder databases(List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabase> databases) {
            if (databases == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "databases");
            }
            this.databases = databases;
            return this;
        }
        public Builder databases(GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabase... databases) {
            return databases(List.of(databases));
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder executionName(String executionName) {
            if (executionName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "executionName");
            }
            this.executionName = executionName;
            return this;
        }
        @CustomType.Setter
        public Builder findings(Integer findings) {
            if (findings == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "findings");
            }
            this.findings = findings;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder reports(List<GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReport> reports) {
            if (reports == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "reports");
            }
            this.reports = reports;
            return this;
        }
        public Builder reports(GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReport... reports) {
            return reports(List.of(reports));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            if (statusMessage == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "statusMessage");
            }
            this.statusMessage = statusMessage;
            return this;
        }
        @CustomType.Setter
        public Builder taskName(String taskName) {
            if (taskName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "taskName");
            }
            this.taskName = taskName;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(String timeEnd) {
            if (timeEnd == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "timeEnd");
            }
            this.timeEnd = timeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(String timeStart) {
            if (timeStart == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult", "timeStart");
            }
            this.timeStart = timeStart;
            return this;
        }
        public GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult build() {
            final var _resultValue = new GetManagedDatabaseOptimizerStatisticsAdvisorExecutionResult();
            _resultValue.databases = databases;
            _resultValue.errorMessage = errorMessage;
            _resultValue.executionName = executionName;
            _resultValue.findings = findings;
            _resultValue.id = id;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.reports = reports;
            _resultValue.status = status;
            _resultValue.statusMessage = statusMessage;
            _resultValue.taskName = taskName;
            _resultValue.timeEnd = timeEnd;
            _resultValue.timeStart = timeStart;
            return _resultValue;
        }
    }
}
