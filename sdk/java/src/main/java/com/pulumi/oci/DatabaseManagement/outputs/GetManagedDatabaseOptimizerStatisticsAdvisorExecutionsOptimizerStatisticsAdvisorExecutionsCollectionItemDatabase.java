// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    private @Nullable String dbDeploymentType;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    private @Nullable String dbSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private @Nullable String dbType;
    /**
     * @return The version of the Oracle Database.
     * 
     */
    private @Nullable String dbVersion;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the rule.
     * 
     */
    private @Nullable String name;

    private GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    public Optional<String> dbDeploymentType() {
        return Optional.ofNullable(this.dbDeploymentType);
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    public Optional<String> dbSubType() {
        return Optional.ofNullable(this.dbSubType);
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public Optional<String> dbType() {
        return Optional.ofNullable(this.dbType);
    }
    /**
     * @return The version of the Oracle Database.
     * 
     */
    public Optional<String> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the rule.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String dbDeploymentType;
        private @Nullable String dbSubType;
        private @Nullable String dbType;
        private @Nullable String dbVersion;
        private @Nullable String id;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbDeploymentType = defaults.dbDeploymentType;
    	      this.dbSubType = defaults.dbSubType;
    	      this.dbType = defaults.dbType;
    	      this.dbVersion = defaults.dbVersion;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbDeploymentType(@Nullable String dbDeploymentType) {
            this.dbDeploymentType = dbDeploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder dbSubType(@Nullable String dbSubType) {
            this.dbSubType = dbSubType;
            return this;
        }
        @CustomType.Setter
        public Builder dbType(@Nullable String dbType) {
            this.dbType = dbType;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(@Nullable String dbVersion) {
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase build() {
            final var o = new GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase();
            o.compartmentId = compartmentId;
            o.dbDeploymentType = dbDeploymentType;
            o.dbSubType = dbSubType;
            o.dbType = dbType;
            o.dbVersion = dbVersion;
            o.id = id;
            o.name = name;
            return o;
        }
    }
}
