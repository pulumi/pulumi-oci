// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem {
    /**
     * @return The number of tasks or objects for which statistics gathering is completed.
     * 
     */
    private Integer completed;
    /**
     * @return The number of tasks or objects for which statistics gathering failed.
     * 
     */
    private Integer failed;
    /**
     * @return The optimizer statistics tasks grouped by type.
     * 
     */
    private String groupBy;
    /**
     * @return The number of tasks or objects for which statistics gathering is in progress.
     * 
     */
    private Integer inProgress;
    /**
     * @return The number of tasks or objects for which statistics are yet to be gathered.
     * 
     */
    private Integer pending;
    /**
     * @return The number of tasks or objects for which statistics gathering was skipped.
     * 
     */
    private Integer skipped;
    /**
     * @return Indicates the end of the hour as the statistics are aggregated per hour.
     * 
     */
    private String timeEnd;
    /**
     * @return Indicates the start of the hour as the statistics are aggregated per hour.
     * 
     */
    private String timeStart;
    /**
     * @return The number of tasks or objects for which statistics gathering timed out.
     * 
     */
    private Integer timedOut;
    /**
     * @return The total number of tasks or objects for which statistics collection is finished. This number is the sum of all the tasks or objects with various statuses: pending, inProgress, completed, failed, skipped, timedOut, and unknown.
     * 
     */
    private Integer total;
    /**
     * @return The number of tasks or objects for which the status of statistics gathering is unknown.
     * 
     */
    private Integer unknown;

    private GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem() {}
    /**
     * @return The number of tasks or objects for which statistics gathering is completed.
     * 
     */
    public Integer completed() {
        return this.completed;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering failed.
     * 
     */
    public Integer failed() {
        return this.failed;
    }
    /**
     * @return The optimizer statistics tasks grouped by type.
     * 
     */
    public String groupBy() {
        return this.groupBy;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering is in progress.
     * 
     */
    public Integer inProgress() {
        return this.inProgress;
    }
    /**
     * @return The number of tasks or objects for which statistics are yet to be gathered.
     * 
     */
    public Integer pending() {
        return this.pending;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering was skipped.
     * 
     */
    public Integer skipped() {
        return this.skipped;
    }
    /**
     * @return Indicates the end of the hour as the statistics are aggregated per hour.
     * 
     */
    public String timeEnd() {
        return this.timeEnd;
    }
    /**
     * @return Indicates the start of the hour as the statistics are aggregated per hour.
     * 
     */
    public String timeStart() {
        return this.timeStart;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering timed out.
     * 
     */
    public Integer timedOut() {
        return this.timedOut;
    }
    /**
     * @return The total number of tasks or objects for which statistics collection is finished. This number is the sum of all the tasks or objects with various statuses: pending, inProgress, completed, failed, skipped, timedOut, and unknown.
     * 
     */
    public Integer total() {
        return this.total;
    }
    /**
     * @return The number of tasks or objects for which the status of statistics gathering is unknown.
     * 
     */
    public Integer unknown() {
        return this.unknown;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer completed;
        private Integer failed;
        private String groupBy;
        private Integer inProgress;
        private Integer pending;
        private Integer skipped;
        private String timeEnd;
        private String timeStart;
        private Integer timedOut;
        private Integer total;
        private Integer unknown;
        public Builder() {}
        public Builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completed = defaults.completed;
    	      this.failed = defaults.failed;
    	      this.groupBy = defaults.groupBy;
    	      this.inProgress = defaults.inProgress;
    	      this.pending = defaults.pending;
    	      this.skipped = defaults.skipped;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.timedOut = defaults.timedOut;
    	      this.total = defaults.total;
    	      this.unknown = defaults.unknown;
        }

        @CustomType.Setter
        public Builder completed(Integer completed) {
            if (completed == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "completed");
            }
            this.completed = completed;
            return this;
        }
        @CustomType.Setter
        public Builder failed(Integer failed) {
            if (failed == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "failed");
            }
            this.failed = failed;
            return this;
        }
        @CustomType.Setter
        public Builder groupBy(String groupBy) {
            if (groupBy == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "groupBy");
            }
            this.groupBy = groupBy;
            return this;
        }
        @CustomType.Setter
        public Builder inProgress(Integer inProgress) {
            if (inProgress == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "inProgress");
            }
            this.inProgress = inProgress;
            return this;
        }
        @CustomType.Setter
        public Builder pending(Integer pending) {
            if (pending == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "pending");
            }
            this.pending = pending;
            return this;
        }
        @CustomType.Setter
        public Builder skipped(Integer skipped) {
            if (skipped == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "skipped");
            }
            this.skipped = skipped;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(String timeEnd) {
            if (timeEnd == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "timeEnd");
            }
            this.timeEnd = timeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(String timeStart) {
            if (timeStart == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "timeStart");
            }
            this.timeStart = timeStart;
            return this;
        }
        @CustomType.Setter
        public Builder timedOut(Integer timedOut) {
            if (timedOut == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "timedOut");
            }
            this.timedOut = timedOut;
            return this;
        }
        @CustomType.Setter
        public Builder total(Integer total) {
            if (total == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "total");
            }
            this.total = total;
            return this;
        }
        @CustomType.Setter
        public Builder unknown(Integer unknown) {
            if (unknown == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem", "unknown");
            }
            this.unknown = unknown;
            return this;
        }
        public GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem build() {
            final var _resultValue = new GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem();
            _resultValue.completed = completed;
            _resultValue.failed = failed;
            _resultValue.groupBy = groupBy;
            _resultValue.inProgress = inProgress;
            _resultValue.pending = pending;
            _resultValue.skipped = skipped;
            _resultValue.timeEnd = timeEnd;
            _resultValue.timeStart = timeStart;
            _resultValue.timedOut = timedOut;
            _resultValue.total = total;
            _resultValue.unknown = unknown;
            return _resultValue;
        }
    }
}
