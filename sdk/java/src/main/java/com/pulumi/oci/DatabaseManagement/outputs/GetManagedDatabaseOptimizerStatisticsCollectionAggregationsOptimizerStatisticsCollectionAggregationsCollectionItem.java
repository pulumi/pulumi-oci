// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem {
    /**
     * @return The number of tasks or objects for which statistics gathering is completed.
     * 
     */
    private @Nullable Integer completed;
    /**
     * @return The number of tasks or objects for which statistics gathering failed.
     * 
     */
    private @Nullable Integer failed;
    /**
     * @return The optimizer statistics tasks grouped by type.
     * 
     */
    private @Nullable String groupBy;
    /**
     * @return The number of tasks or objects for which statistics gathering is in progress.
     * 
     */
    private @Nullable Integer inProgress;
    /**
     * @return The number of tasks or objects for which statistics are yet to be gathered.
     * 
     */
    private @Nullable Integer pending;
    /**
     * @return The number of tasks or objects for which statistics gathering was skipped.
     * 
     */
    private @Nullable Integer skipped;
    /**
     * @return Indicates the end of the hour as the statistics are aggregated per hour.
     * 
     */
    private @Nullable String timeEnd;
    /**
     * @return Indicates the start of the hour as the statistics are aggregated per hour.
     * 
     */
    private @Nullable String timeStart;
    /**
     * @return The number of tasks or objects for which statistics gathering timed out.
     * 
     */
    private @Nullable Integer timedOut;
    /**
     * @return The total number of tasks or objects for which statistics collection is finished. This number is the sum of all the tasks or objects with various statuses: pending, inProgress, completed, failed, skipped, timedOut, and unknown.
     * 
     */
    private @Nullable Integer total;
    /**
     * @return The number of tasks or objects for which the status of statistics gathering is unknown.
     * 
     */
    private @Nullable Integer unknown;

    private GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem() {}
    /**
     * @return The number of tasks or objects for which statistics gathering is completed.
     * 
     */
    public Optional<Integer> completed() {
        return Optional.ofNullable(this.completed);
    }
    /**
     * @return The number of tasks or objects for which statistics gathering failed.
     * 
     */
    public Optional<Integer> failed() {
        return Optional.ofNullable(this.failed);
    }
    /**
     * @return The optimizer statistics tasks grouped by type.
     * 
     */
    public Optional<String> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }
    /**
     * @return The number of tasks or objects for which statistics gathering is in progress.
     * 
     */
    public Optional<Integer> inProgress() {
        return Optional.ofNullable(this.inProgress);
    }
    /**
     * @return The number of tasks or objects for which statistics are yet to be gathered.
     * 
     */
    public Optional<Integer> pending() {
        return Optional.ofNullable(this.pending);
    }
    /**
     * @return The number of tasks or objects for which statistics gathering was skipped.
     * 
     */
    public Optional<Integer> skipped() {
        return Optional.ofNullable(this.skipped);
    }
    /**
     * @return Indicates the end of the hour as the statistics are aggregated per hour.
     * 
     */
    public Optional<String> timeEnd() {
        return Optional.ofNullable(this.timeEnd);
    }
    /**
     * @return Indicates the start of the hour as the statistics are aggregated per hour.
     * 
     */
    public Optional<String> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }
    /**
     * @return The number of tasks or objects for which statistics gathering timed out.
     * 
     */
    public Optional<Integer> timedOut() {
        return Optional.ofNullable(this.timedOut);
    }
    /**
     * @return The total number of tasks or objects for which statistics collection is finished. This number is the sum of all the tasks or objects with various statuses: pending, inProgress, completed, failed, skipped, timedOut, and unknown.
     * 
     */
    public Optional<Integer> total() {
        return Optional.ofNullable(this.total);
    }
    /**
     * @return The number of tasks or objects for which the status of statistics gathering is unknown.
     * 
     */
    public Optional<Integer> unknown() {
        return Optional.ofNullable(this.unknown);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer completed;
        private @Nullable Integer failed;
        private @Nullable String groupBy;
        private @Nullable Integer inProgress;
        private @Nullable Integer pending;
        private @Nullable Integer skipped;
        private @Nullable String timeEnd;
        private @Nullable String timeStart;
        private @Nullable Integer timedOut;
        private @Nullable Integer total;
        private @Nullable Integer unknown;
        public Builder() {}
        public Builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completed = defaults.completed;
    	      this.failed = defaults.failed;
    	      this.groupBy = defaults.groupBy;
    	      this.inProgress = defaults.inProgress;
    	      this.pending = defaults.pending;
    	      this.skipped = defaults.skipped;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.timedOut = defaults.timedOut;
    	      this.total = defaults.total;
    	      this.unknown = defaults.unknown;
        }

        @CustomType.Setter
        public Builder completed(@Nullable Integer completed) {
            this.completed = completed;
            return this;
        }
        @CustomType.Setter
        public Builder failed(@Nullable Integer failed) {
            this.failed = failed;
            return this;
        }
        @CustomType.Setter
        public Builder groupBy(@Nullable String groupBy) {
            this.groupBy = groupBy;
            return this;
        }
        @CustomType.Setter
        public Builder inProgress(@Nullable Integer inProgress) {
            this.inProgress = inProgress;
            return this;
        }
        @CustomType.Setter
        public Builder pending(@Nullable Integer pending) {
            this.pending = pending;
            return this;
        }
        @CustomType.Setter
        public Builder skipped(@Nullable Integer skipped) {
            this.skipped = skipped;
            return this;
        }
        @CustomType.Setter
        public Builder timeEnd(@Nullable String timeEnd) {
            this.timeEnd = timeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeStart(@Nullable String timeStart) {
            this.timeStart = timeStart;
            return this;
        }
        @CustomType.Setter
        public Builder timedOut(@Nullable Integer timedOut) {
            this.timedOut = timedOut;
            return this;
        }
        @CustomType.Setter
        public Builder total(@Nullable Integer total) {
            this.total = total;
            return this;
        }
        @CustomType.Setter
        public Builder unknown(@Nullable Integer unknown) {
            this.unknown = unknown;
            return this;
        }
        public GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem build() {
            final var o = new GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem();
            o.completed = completed;
            o.failed = failed;
            o.groupBy = groupBy;
            o.inProgress = inProgress;
            o.pending = pending;
            o.skipped = skipped;
            o.timeEnd = timeEnd;
            o.timeStart = timeStart;
            o.timedOut = timedOut;
            o.total = total;
            o.unknown = unknown;
            return o;
        }
    }
}
