// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem {
    /**
     * @return The number of tasks or objects for which statistics gathering is completed.
     * 
     */
    private final Integer completed;
    /**
     * @return The number of tasks or objects for which statistics gathering failed.
     * 
     */
    private final Integer failed;
    /**
     * @return The optimizer statistics tasks grouped by type.
     * 
     */
    private final String groupBy;
    /**
     * @return The number of tasks or objects for which statistics gathering is in progress.
     * 
     */
    private final Integer inProgress;
    /**
     * @return The number of tasks or objects for which statistics are yet to be gathered.
     * 
     */
    private final Integer pending;
    /**
     * @return The number of tasks or objects for which statistics gathering was skipped.
     * 
     */
    private final Integer skipped;
    /**
     * @return Indicates the end of the hour as the statistics are aggregated per hour.
     * 
     */
    private final String timeEnd;
    /**
     * @return Indicates the start of the hour as the statistics are aggregated per hour.
     * 
     */
    private final String timeStart;
    /**
     * @return The number of tasks or objects for which statistics gathering timed out.
     * 
     */
    private final Integer timedOut;
    /**
     * @return The total number of tasks or objects for which statistics collection is finished. This number is the sum of all the tasks or objects with various statuses: pending, inProgress, completed, failed, skipped, timedOut, and unknown.
     * 
     */
    private final Integer total;
    /**
     * @return The number of tasks or objects for which the status of statistics gathering is unknown.
     * 
     */
    private final Integer unknown;

    @CustomType.Constructor
    private GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem(
        @CustomType.Parameter("completed") Integer completed,
        @CustomType.Parameter("failed") Integer failed,
        @CustomType.Parameter("groupBy") String groupBy,
        @CustomType.Parameter("inProgress") Integer inProgress,
        @CustomType.Parameter("pending") Integer pending,
        @CustomType.Parameter("skipped") Integer skipped,
        @CustomType.Parameter("timeEnd") String timeEnd,
        @CustomType.Parameter("timeStart") String timeStart,
        @CustomType.Parameter("timedOut") Integer timedOut,
        @CustomType.Parameter("total") Integer total,
        @CustomType.Parameter("unknown") Integer unknown) {
        this.completed = completed;
        this.failed = failed;
        this.groupBy = groupBy;
        this.inProgress = inProgress;
        this.pending = pending;
        this.skipped = skipped;
        this.timeEnd = timeEnd;
        this.timeStart = timeStart;
        this.timedOut = timedOut;
        this.total = total;
        this.unknown = unknown;
    }

    /**
     * @return The number of tasks or objects for which statistics gathering is completed.
     * 
     */
    public Integer completed() {
        return this.completed;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering failed.
     * 
     */
    public Integer failed() {
        return this.failed;
    }
    /**
     * @return The optimizer statistics tasks grouped by type.
     * 
     */
    public String groupBy() {
        return this.groupBy;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering is in progress.
     * 
     */
    public Integer inProgress() {
        return this.inProgress;
    }
    /**
     * @return The number of tasks or objects for which statistics are yet to be gathered.
     * 
     */
    public Integer pending() {
        return this.pending;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering was skipped.
     * 
     */
    public Integer skipped() {
        return this.skipped;
    }
    /**
     * @return Indicates the end of the hour as the statistics are aggregated per hour.
     * 
     */
    public String timeEnd() {
        return this.timeEnd;
    }
    /**
     * @return Indicates the start of the hour as the statistics are aggregated per hour.
     * 
     */
    public String timeStart() {
        return this.timeStart;
    }
    /**
     * @return The number of tasks or objects for which statistics gathering timed out.
     * 
     */
    public Integer timedOut() {
        return this.timedOut;
    }
    /**
     * @return The total number of tasks or objects for which statistics collection is finished. This number is the sum of all the tasks or objects with various statuses: pending, inProgress, completed, failed, skipped, timedOut, and unknown.
     * 
     */
    public Integer total() {
        return this.total;
    }
    /**
     * @return The number of tasks or objects for which the status of statistics gathering is unknown.
     * 
     */
    public Integer unknown() {
        return this.unknown;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer completed;
        private Integer failed;
        private String groupBy;
        private Integer inProgress;
        private Integer pending;
        private Integer skipped;
        private String timeEnd;
        private String timeStart;
        private Integer timedOut;
        private Integer total;
        private Integer unknown;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completed = defaults.completed;
    	      this.failed = defaults.failed;
    	      this.groupBy = defaults.groupBy;
    	      this.inProgress = defaults.inProgress;
    	      this.pending = defaults.pending;
    	      this.skipped = defaults.skipped;
    	      this.timeEnd = defaults.timeEnd;
    	      this.timeStart = defaults.timeStart;
    	      this.timedOut = defaults.timedOut;
    	      this.total = defaults.total;
    	      this.unknown = defaults.unknown;
        }

        public Builder completed(Integer completed) {
            this.completed = Objects.requireNonNull(completed);
            return this;
        }
        public Builder failed(Integer failed) {
            this.failed = Objects.requireNonNull(failed);
            return this;
        }
        public Builder groupBy(String groupBy) {
            this.groupBy = Objects.requireNonNull(groupBy);
            return this;
        }
        public Builder inProgress(Integer inProgress) {
            this.inProgress = Objects.requireNonNull(inProgress);
            return this;
        }
        public Builder pending(Integer pending) {
            this.pending = Objects.requireNonNull(pending);
            return this;
        }
        public Builder skipped(Integer skipped) {
            this.skipped = Objects.requireNonNull(skipped);
            return this;
        }
        public Builder timeEnd(String timeEnd) {
            this.timeEnd = Objects.requireNonNull(timeEnd);
            return this;
        }
        public Builder timeStart(String timeStart) {
            this.timeStart = Objects.requireNonNull(timeStart);
            return this;
        }
        public Builder timedOut(Integer timedOut) {
            this.timedOut = Objects.requireNonNull(timedOut);
            return this;
        }
        public Builder total(Integer total) {
            this.total = Objects.requireNonNull(total);
            return this;
        }
        public Builder unknown(Integer unknown) {
            this.unknown = Objects.requireNonNull(unknown);
            return this;
        }        public GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem build() {
            return new GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem(completed, failed, groupBy, inProgress, pending, skipped, timeEnd, timeStart, timedOut, total, unknown);
        }
    }
}
