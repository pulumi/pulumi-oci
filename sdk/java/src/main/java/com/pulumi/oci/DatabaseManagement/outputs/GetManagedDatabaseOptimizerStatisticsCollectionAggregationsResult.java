// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollection;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult {
    private @Nullable String endTimeLessThanOrEqualTo;
    private @Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilter> filters;
    private String groupType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Integer limit;
    private String managedDatabaseId;
    /**
     * @return The list of optimizer_statistics_collection_aggregations_collection.
     * 
     */
    private List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollection> optimizerStatisticsCollectionAggregationsCollections;
    private @Nullable String startTimeGreaterThanOrEqualTo;
    private @Nullable String taskType;

    private GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult() {}
    public Optional<String> endTimeLessThanOrEqualTo() {
        return Optional.ofNullable(this.endTimeLessThanOrEqualTo);
    }
    public List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    public String groupType() {
        return this.groupType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The list of optimizer_statistics_collection_aggregations_collection.
     * 
     */
    public List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollection> optimizerStatisticsCollectionAggregationsCollections() {
        return this.optimizerStatisticsCollectionAggregationsCollections;
    }
    public Optional<String> startTimeGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.startTimeGreaterThanOrEqualTo);
    }
    public Optional<String> taskType() {
        return Optional.ofNullable(this.taskType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String endTimeLessThanOrEqualTo;
        private @Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilter> filters;
        private String groupType;
        private String id;
        private @Nullable Integer limit;
        private String managedDatabaseId;
        private List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollection> optimizerStatisticsCollectionAggregationsCollections;
        private @Nullable String startTimeGreaterThanOrEqualTo;
        private @Nullable String taskType;
        public Builder() {}
        public Builder(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTimeLessThanOrEqualTo = defaults.endTimeLessThanOrEqualTo;
    	      this.filters = defaults.filters;
    	      this.groupType = defaults.groupType;
    	      this.id = defaults.id;
    	      this.limit = defaults.limit;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.optimizerStatisticsCollectionAggregationsCollections = defaults.optimizerStatisticsCollectionAggregationsCollections;
    	      this.startTimeGreaterThanOrEqualTo = defaults.startTimeGreaterThanOrEqualTo;
    	      this.taskType = defaults.taskType;
        }

        @CustomType.Setter
        public Builder endTimeLessThanOrEqualTo(@Nullable String endTimeLessThanOrEqualTo) {

            this.endTimeLessThanOrEqualTo = endTimeLessThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder groupType(String groupType) {
            if (groupType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult", "groupType");
            }
            this.groupType = groupType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder optimizerStatisticsCollectionAggregationsCollections(List<GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollection> optimizerStatisticsCollectionAggregationsCollections) {
            if (optimizerStatisticsCollectionAggregationsCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult", "optimizerStatisticsCollectionAggregationsCollections");
            }
            this.optimizerStatisticsCollectionAggregationsCollections = optimizerStatisticsCollectionAggregationsCollections;
            return this;
        }
        public Builder optimizerStatisticsCollectionAggregationsCollections(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollection... optimizerStatisticsCollectionAggregationsCollections) {
            return optimizerStatisticsCollectionAggregationsCollections(List.of(optimizerStatisticsCollectionAggregationsCollections));
        }
        @CustomType.Setter
        public Builder startTimeGreaterThanOrEqualTo(@Nullable String startTimeGreaterThanOrEqualTo) {

            this.startTimeGreaterThanOrEqualTo = startTimeGreaterThanOrEqualTo;
            return this;
        }
        @CustomType.Setter
        public Builder taskType(@Nullable String taskType) {

            this.taskType = taskType;
            return this;
        }
        public GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult build() {
            final var _resultValue = new GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult();
            _resultValue.endTimeLessThanOrEqualTo = endTimeLessThanOrEqualTo;
            _resultValue.filters = filters;
            _resultValue.groupType = groupType;
            _resultValue.id = id;
            _resultValue.limit = limit;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.optimizerStatisticsCollectionAggregationsCollections = optimizerStatisticsCollectionAggregationsCollections;
            _resultValue.startTimeGreaterThanOrEqualTo = startTimeGreaterThanOrEqualTo;
            _resultValue.taskType = taskType;
            return _resultValue;
        }
    }
}
