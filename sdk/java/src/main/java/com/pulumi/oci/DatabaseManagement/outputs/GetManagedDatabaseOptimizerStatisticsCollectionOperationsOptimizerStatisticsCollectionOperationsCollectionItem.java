// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem {
    /**
     * @return The number of objects for which statistics collection is completed.
     * 
     */
    private @Nullable Integer completedCount;
    /**
     * @return The summary of the Managed Database resource.
     * 
     */
    private @Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase> databases;
    /**
     * @return The time it takes to complete the operation (in seconds).
     * 
     */
    private @Nullable Double durationInSeconds;
    /**
     * @return The end time of the operation.
     * 
     */
    private @Nullable String endTime;
    /**
     * @return The number of objects for which statistics collection failed.
     * 
     */
    private @Nullable Integer failedCount;
    /**
     * @return The ID of the operation.
     * 
     */
    private @Nullable Integer id;
    /**
     * @return The number of objects for which statistics collection is in progress.
     * 
     */
    private @Nullable Integer inProgressCount;
    /**
     * @return The name of the job.
     * 
     */
    private @Nullable String jobName;
    /**
     * @return The name of the operation.
     * 
     */
    private @Nullable String operationName;
    /**
     * @return The start time of the operation.
     * 
     */
    private @Nullable String startTime;
    /**
     * @return The status of the Optimizer Statistics Collection task.
     * 
     */
    private @Nullable String status;
    /**
     * @return The name of the target object for which statistics are gathered.
     * 
     */
    private @Nullable String target;
    /**
     * @return An array of Optimizer Statistics Collection task details.
     * 
     */
    private @Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask> tasks;
    /**
     * @return The number of objects for which statistics collection timed out.
     * 
     */
    private @Nullable Integer timedOutCount;
    /**
     * @return The total number of objects for which statistics is collected. This number is the sum of all the objects with various statuses: completed, inProgress, failed, and timedOut.
     * 
     */
    private @Nullable Integer totalObjectsCount;

    private GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem() {}
    /**
     * @return The number of objects for which statistics collection is completed.
     * 
     */
    public Optional<Integer> completedCount() {
        return Optional.ofNullable(this.completedCount);
    }
    /**
     * @return The summary of the Managed Database resource.
     * 
     */
    public List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase> databases() {
        return this.databases == null ? List.of() : this.databases;
    }
    /**
     * @return The time it takes to complete the operation (in seconds).
     * 
     */
    public Optional<Double> durationInSeconds() {
        return Optional.ofNullable(this.durationInSeconds);
    }
    /**
     * @return The end time of the operation.
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * @return The number of objects for which statistics collection failed.
     * 
     */
    public Optional<Integer> failedCount() {
        return Optional.ofNullable(this.failedCount);
    }
    /**
     * @return The ID of the operation.
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The number of objects for which statistics collection is in progress.
     * 
     */
    public Optional<Integer> inProgressCount() {
        return Optional.ofNullable(this.inProgressCount);
    }
    /**
     * @return The name of the job.
     * 
     */
    public Optional<String> jobName() {
        return Optional.ofNullable(this.jobName);
    }
    /**
     * @return The name of the operation.
     * 
     */
    public Optional<String> operationName() {
        return Optional.ofNullable(this.operationName);
    }
    /**
     * @return The start time of the operation.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return The status of the Optimizer Statistics Collection task.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The name of the target object for which statistics are gathered.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return An array of Optimizer Statistics Collection task details.
     * 
     */
    public List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask> tasks() {
        return this.tasks == null ? List.of() : this.tasks;
    }
    /**
     * @return The number of objects for which statistics collection timed out.
     * 
     */
    public Optional<Integer> timedOutCount() {
        return Optional.ofNullable(this.timedOutCount);
    }
    /**
     * @return The total number of objects for which statistics is collected. This number is the sum of all the objects with various statuses: completed, inProgress, failed, and timedOut.
     * 
     */
    public Optional<Integer> totalObjectsCount() {
        return Optional.ofNullable(this.totalObjectsCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer completedCount;
        private @Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase> databases;
        private @Nullable Double durationInSeconds;
        private @Nullable String endTime;
        private @Nullable Integer failedCount;
        private @Nullable Integer id;
        private @Nullable Integer inProgressCount;
        private @Nullable String jobName;
        private @Nullable String operationName;
        private @Nullable String startTime;
        private @Nullable String status;
        private @Nullable String target;
        private @Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask> tasks;
        private @Nullable Integer timedOutCount;
        private @Nullable Integer totalObjectsCount;
        public Builder() {}
        public Builder(GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completedCount = defaults.completedCount;
    	      this.databases = defaults.databases;
    	      this.durationInSeconds = defaults.durationInSeconds;
    	      this.endTime = defaults.endTime;
    	      this.failedCount = defaults.failedCount;
    	      this.id = defaults.id;
    	      this.inProgressCount = defaults.inProgressCount;
    	      this.jobName = defaults.jobName;
    	      this.operationName = defaults.operationName;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.target = defaults.target;
    	      this.tasks = defaults.tasks;
    	      this.timedOutCount = defaults.timedOutCount;
    	      this.totalObjectsCount = defaults.totalObjectsCount;
        }

        @CustomType.Setter
        public Builder completedCount(@Nullable Integer completedCount) {
            this.completedCount = completedCount;
            return this;
        }
        @CustomType.Setter
        public Builder databases(@Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase> databases) {
            this.databases = databases;
            return this;
        }
        public Builder databases(GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase... databases) {
            return databases(List.of(databases));
        }
        @CustomType.Setter
        public Builder durationInSeconds(@Nullable Double durationInSeconds) {
            this.durationInSeconds = durationInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(@Nullable String endTime) {
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder failedCount(@Nullable Integer failedCount) {
            this.failedCount = failedCount;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable Integer id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inProgressCount(@Nullable Integer inProgressCount) {
            this.inProgressCount = inProgressCount;
            return this;
        }
        @CustomType.Setter
        public Builder jobName(@Nullable String jobName) {
            this.jobName = jobName;
            return this;
        }
        @CustomType.Setter
        public Builder operationName(@Nullable String operationName) {
            this.operationName = operationName;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder tasks(@Nullable List<GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask> tasks) {
            this.tasks = tasks;
            return this;
        }
        public Builder tasks(GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask... tasks) {
            return tasks(List.of(tasks));
        }
        @CustomType.Setter
        public Builder timedOutCount(@Nullable Integer timedOutCount) {
            this.timedOutCount = timedOutCount;
            return this;
        }
        @CustomType.Setter
        public Builder totalObjectsCount(@Nullable Integer totalObjectsCount) {
            this.totalObjectsCount = totalObjectsCount;
            return this;
        }
        public GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem build() {
            final var o = new GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem();
            o.completedCount = completedCount;
            o.databases = databases;
            o.durationInSeconds = durationInSeconds;
            o.endTime = endTime;
            o.failedCount = failedCount;
            o.id = id;
            o.inProgressCount = inProgressCount;
            o.jobName = jobName;
            o.operationName = operationName;
            o.startTime = startTime;
            o.status = status;
            o.target = target;
            o.tasks = tasks;
            o.timedOutCount = timedOutCount;
            o.totalObjectsCount = totalObjectsCount;
            return o;
        }
    }
}
