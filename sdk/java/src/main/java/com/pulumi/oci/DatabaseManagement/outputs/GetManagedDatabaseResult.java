// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseDbmgmtFeatureConfig;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseManagedDatabaseGroup;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseResult {
    /**
     * @return The additional details specific to a type of database defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
     * 
     */
    private String compartmentId;
    /**
     * @return The operating system of database.
     * 
     */
    private @Nullable String databasePlatformName;
    /**
     * @return The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
     * 
     */
    private String databaseStatus;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    private String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private String databaseType;
    /**
     * @return The Oracle Database version.
     * 
     */
    private String databaseVersion;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that this Managed Database is part of.
     * 
     */
    private String dbSystemId;
    /**
     * @return The list of feature configurations
     * 
     */
    private List<GetManagedDatabaseDbmgmtFeatureConfig> dbmgmtFeatureConfigs;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    private String deploymentType;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    private Boolean isCluster;
    /**
     * @return A list of Managed Database Groups that the Managed Database belongs to.
     * 
     */
    private List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups;
    private String managedDatabaseId;
    /**
     * @return The management option used when enabling Database Management.
     * 
     */
    private String managementOption;
    /**
     * @return The name of the Managed Database.
     * 
     */
    private String name;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
     * 
     */
    private String parentContainerId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the storage DB system.
     * 
     */
    private String storageSystemId;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    private String workloadType;

    private GetManagedDatabaseResult() {}
    /**
     * @return The additional details specific to a type of database defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The operating system of database.
     * 
     */
    public Optional<String> databasePlatformName() {
        return Optional.ofNullable(this.databasePlatformName);
    }
    /**
     * @return The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
     * 
     */
    public String databaseStatus() {
        return this.databaseStatus;
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    public String databaseSubType() {
        return this.databaseSubType;
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that this Managed Database is part of.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return The list of feature configurations
     * 
     */
    public List<GetManagedDatabaseDbmgmtFeatureConfig> dbmgmtFeatureConfigs() {
        return this.dbmgmtFeatureConfigs;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    public Boolean isCluster() {
        return this.isCluster;
    }
    /**
     * @return A list of Managed Database Groups that the Managed Database belongs to.
     * 
     */
    public List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups() {
        return this.managedDatabaseGroups;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The management option used when enabling Database Management.
     * 
     */
    public String managementOption() {
        return this.managementOption;
    }
    /**
     * @return The name of the Managed Database.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
     * 
     */
    public String parentContainerId() {
        return this.parentContainerId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the storage DB system.
     * 
     */
    public String storageSystemId() {
        return this.storageSystemId;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    public String workloadType() {
        return this.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> additionalDetails;
        private String compartmentId;
        private @Nullable String databasePlatformName;
        private String databaseStatus;
        private String databaseSubType;
        private String databaseType;
        private String databaseVersion;
        private String dbSystemId;
        private List<GetManagedDatabaseDbmgmtFeatureConfig> dbmgmtFeatureConfigs;
        private Map<String,String> definedTags;
        private String deploymentType;
        private Map<String,String> freeformTags;
        private String id;
        private Boolean isCluster;
        private List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups;
        private String managedDatabaseId;
        private String managementOption;
        private String name;
        private String parentContainerId;
        private String storageSystemId;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String workloadType;
        public Builder() {}
        public Builder(GetManagedDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databasePlatformName = defaults.databasePlatformName;
    	      this.databaseStatus = defaults.databaseStatus;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.dbmgmtFeatureConfigs = defaults.dbmgmtFeatureConfigs;
    	      this.definedTags = defaults.definedTags;
    	      this.deploymentType = defaults.deploymentType;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.isCluster = defaults.isCluster;
    	      this.managedDatabaseGroups = defaults.managedDatabaseGroups;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.managementOption = defaults.managementOption;
    	      this.name = defaults.name;
    	      this.parentContainerId = defaults.parentContainerId;
    	      this.storageSystemId = defaults.storageSystemId;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,String> additionalDetails) {
            if (additionalDetails == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "additionalDetails");
            }
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databasePlatformName(@Nullable String databasePlatformName) {

            this.databasePlatformName = databasePlatformName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseStatus(String databaseStatus) {
            if (databaseStatus == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "databaseStatus");
            }
            this.databaseStatus = databaseStatus;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(String databaseSubType) {
            if (databaseSubType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "databaseSubType");
            }
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            if (databaseVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "databaseVersion");
            }
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder dbmgmtFeatureConfigs(List<GetManagedDatabaseDbmgmtFeatureConfig> dbmgmtFeatureConfigs) {
            if (dbmgmtFeatureConfigs == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "dbmgmtFeatureConfigs");
            }
            this.dbmgmtFeatureConfigs = dbmgmtFeatureConfigs;
            return this;
        }
        public Builder dbmgmtFeatureConfigs(GetManagedDatabaseDbmgmtFeatureConfig... dbmgmtFeatureConfigs) {
            return dbmgmtFeatureConfigs(List.of(dbmgmtFeatureConfigs));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(String deploymentType) {
            if (deploymentType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "deploymentType");
            }
            this.deploymentType = deploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCluster(Boolean isCluster) {
            if (isCluster == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "isCluster");
            }
            this.isCluster = isCluster;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseGroups(List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups) {
            if (managedDatabaseGroups == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "managedDatabaseGroups");
            }
            this.managedDatabaseGroups = managedDatabaseGroups;
            return this;
        }
        public Builder managedDatabaseGroups(GetManagedDatabaseManagedDatabaseGroup... managedDatabaseGroups) {
            return managedDatabaseGroups(List.of(managedDatabaseGroups));
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder managementOption(String managementOption) {
            if (managementOption == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "managementOption");
            }
            this.managementOption = managementOption;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parentContainerId(String parentContainerId) {
            if (parentContainerId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "parentContainerId");
            }
            this.parentContainerId = parentContainerId;
            return this;
        }
        @CustomType.Setter
        public Builder storageSystemId(String storageSystemId) {
            if (storageSystemId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "storageSystemId");
            }
            this.storageSystemId = storageSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(String workloadType) {
            if (workloadType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseResult", "workloadType");
            }
            this.workloadType = workloadType;
            return this;
        }
        public GetManagedDatabaseResult build() {
            final var _resultValue = new GetManagedDatabaseResult();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.compartmentId = compartmentId;
            _resultValue.databasePlatformName = databasePlatformName;
            _resultValue.databaseStatus = databaseStatus;
            _resultValue.databaseSubType = databaseSubType;
            _resultValue.databaseType = databaseType;
            _resultValue.databaseVersion = databaseVersion;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.dbmgmtFeatureConfigs = dbmgmtFeatureConfigs;
            _resultValue.definedTags = definedTags;
            _resultValue.deploymentType = deploymentType;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.isCluster = isCluster;
            _resultValue.managedDatabaseGroups = managedDatabaseGroups;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.managementOption = managementOption;
            _resultValue.name = name;
            _resultValue.parentContainerId = parentContainerId;
            _resultValue.storageSystemId = storageSystemId;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.workloadType = workloadType;
            return _resultValue;
        }
    }
}
