// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseManagedDatabaseGroup;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseResult {
    /**
     * @return The additional details specific to a type of database defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private @Nullable Map<String,Object> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
     * 
     */
    private @Nullable String databaseStatus;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    private @Nullable String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that this Managed Database is part of.
     * 
     */
    private @Nullable String dbSystemId;
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    private @Nullable String deploymentType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    private @Nullable Boolean isCluster;
    /**
     * @return A list of Managed Database Groups that the Managed Database belongs to.
     * 
     */
    private @Nullable List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups;
    private String managedDatabaseId;
    /**
     * @return The management option used when enabling Database Management.
     * 
     */
    private @Nullable String managementOption;
    /**
     * @return The name of the Managed Database.
     * 
     */
    private @Nullable String name;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
     * 
     */
    private @Nullable String parentContainerId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the storage DB system.
     * 
     */
    private @Nullable String storageSystemId;
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    private @Nullable String workloadType;

    private GetManagedDatabaseResult() {}
    /**
     * @return The additional details specific to a type of database defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails == null ? Map.of() : this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
     * 
     */
    public Optional<String> databaseStatus() {
        return Optional.ofNullable(this.databaseStatus);
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    public Optional<String> databaseSubType() {
        return Optional.ofNullable(this.databaseSubType);
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system that this Managed Database is part of.
     * 
     */
    public Optional<String> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    public Optional<String> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    public Optional<Boolean> isCluster() {
        return Optional.ofNullable(this.isCluster);
    }
    /**
     * @return A list of Managed Database Groups that the Managed Database belongs to.
     * 
     */
    public List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups() {
        return this.managedDatabaseGroups == null ? List.of() : this.managedDatabaseGroups;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The management option used when enabling Database Management.
     * 
     */
    public Optional<String> managementOption() {
        return Optional.ofNullable(this.managementOption);
    }
    /**
     * @return The name of the Managed Database.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
     * 
     */
    public Optional<String> parentContainerId() {
        return Optional.ofNullable(this.parentContainerId);
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the storage DB system.
     * 
     */
    public Optional<String> storageSystemId() {
        return Optional.ofNullable(this.storageSystemId);
    }
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    public Optional<String> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,Object> additionalDetails;
        private @Nullable String compartmentId;
        private @Nullable String databaseStatus;
        private @Nullable String databaseSubType;
        private @Nullable String databaseType;
        private @Nullable String dbSystemId;
        private @Nullable String deploymentType;
        private @Nullable String id;
        private @Nullable Boolean isCluster;
        private @Nullable List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups;
        private String managedDatabaseId;
        private @Nullable String managementOption;
        private @Nullable String name;
        private @Nullable String parentContainerId;
        private @Nullable String storageSystemId;
        private @Nullable String timeCreated;
        private @Nullable String workloadType;
        public Builder() {}
        public Builder(GetManagedDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseStatus = defaults.databaseStatus;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.deploymentType = defaults.deploymentType;
    	      this.id = defaults.id;
    	      this.isCluster = defaults.isCluster;
    	      this.managedDatabaseGroups = defaults.managedDatabaseGroups;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.managementOption = defaults.managementOption;
    	      this.name = defaults.name;
    	      this.parentContainerId = defaults.parentContainerId;
    	      this.storageSystemId = defaults.storageSystemId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder additionalDetails(@Nullable Map<String,Object> additionalDetails) {
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseStatus(@Nullable String databaseStatus) {
            this.databaseStatus = databaseStatus;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(@Nullable String databaseSubType) {
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(@Nullable String dbSystemId) {
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(@Nullable String deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isCluster(@Nullable Boolean isCluster) {
            this.isCluster = isCluster;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseGroups(@Nullable List<GetManagedDatabaseManagedDatabaseGroup> managedDatabaseGroups) {
            this.managedDatabaseGroups = managedDatabaseGroups;
            return this;
        }
        public Builder managedDatabaseGroups(GetManagedDatabaseManagedDatabaseGroup... managedDatabaseGroups) {
            return managedDatabaseGroups(List.of(managedDatabaseGroups));
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder managementOption(@Nullable String managementOption) {
            this.managementOption = managementOption;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parentContainerId(@Nullable String parentContainerId) {
            this.parentContainerId = parentContainerId;
            return this;
        }
        @CustomType.Setter
        public Builder storageSystemId(@Nullable String storageSystemId) {
            this.storageSystemId = storageSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(@Nullable String workloadType) {
            this.workloadType = workloadType;
            return this;
        }
        public GetManagedDatabaseResult build() {
            final var o = new GetManagedDatabaseResult();
            o.additionalDetails = additionalDetails;
            o.compartmentId = compartmentId;
            o.databaseStatus = databaseStatus;
            o.databaseSubType = databaseSubType;
            o.databaseType = databaseType;
            o.dbSystemId = dbSystemId;
            o.deploymentType = deploymentType;
            o.id = id;
            o.isCluster = isCluster;
            o.managedDatabaseGroups = managedDatabaseGroups;
            o.managedDatabaseId = managedDatabaseId;
            o.managementOption = managementOption;
            o.name = name;
            o.parentContainerId = parentContainerId;
            o.storageSystemId = storageSystemId;
            o.timeCreated = timeCreated;
            o.workloadType = workloadType;
            return o;
        }
    }
}
