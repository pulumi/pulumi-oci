// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameter;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseSqlPlanBaselineConfigurationResult {
    /**
     * @return The capture filters used in automatic initial plan capture.
     * 
     */
    private List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilter> autoCaptureFilters;
    /**
     * @return The set of parameters used in an SPM evolve task.
     * 
     */
    private List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameter> autoSpmEvolveTaskParameters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the Automatic SPM Evolve Advisor task is enabled (`true`) or not (`false`).
     * 
     */
    private Boolean isAutoSpmEvolveTaskEnabled;
    /**
     * @return Indicates whether the automatic capture of SQL plan baselines is enabled (`true`) or not (`false`).
     * 
     */
    private Boolean isAutomaticInitialPlanCaptureEnabled;
    /**
     * @return Indicates whether the high frequency Automatic SPM Evolve Advisor task is enabled (`true`) or not (`false`).
     * 
     */
    private Boolean isHighFrequencyAutoSpmEvolveTaskEnabled;
    /**
     * @return Indicates whether the database uses SQL plan baselines (`true`) or not (`false`).
     * 
     */
    private Boolean isSqlPlanBaselinesUsageEnabled;
    private String managedDatabaseId;
    private @Nullable String opcNamedCredentialId;
    /**
     * @return The number of weeks to retain unused plans before they are purged.
     * 
     */
    private Integer planRetentionWeeks;
    /**
     * @return The maximum `SYSAUX` space that can be used for SQL Management Base in MB.
     * 
     */
    private Double spaceBudgetMb;
    /**
     * @return The maximum percent of `SYSAUX` space that can be used for SQL Management Base.
     * 
     */
    private Double spaceBudgetPercent;
    /**
     * @return The space used by SQL Management Base in MB.
     * 
     */
    private Double spaceUsedMb;

    private GetManagedDatabaseSqlPlanBaselineConfigurationResult() {}
    /**
     * @return The capture filters used in automatic initial plan capture.
     * 
     */
    public List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilter> autoCaptureFilters() {
        return this.autoCaptureFilters;
    }
    /**
     * @return The set of parameters used in an SPM evolve task.
     * 
     */
    public List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameter> autoSpmEvolveTaskParameters() {
        return this.autoSpmEvolveTaskParameters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the Automatic SPM Evolve Advisor task is enabled (`true`) or not (`false`).
     * 
     */
    public Boolean isAutoSpmEvolveTaskEnabled() {
        return this.isAutoSpmEvolveTaskEnabled;
    }
    /**
     * @return Indicates whether the automatic capture of SQL plan baselines is enabled (`true`) or not (`false`).
     * 
     */
    public Boolean isAutomaticInitialPlanCaptureEnabled() {
        return this.isAutomaticInitialPlanCaptureEnabled;
    }
    /**
     * @return Indicates whether the high frequency Automatic SPM Evolve Advisor task is enabled (`true`) or not (`false`).
     * 
     */
    public Boolean isHighFrequencyAutoSpmEvolveTaskEnabled() {
        return this.isHighFrequencyAutoSpmEvolveTaskEnabled;
    }
    /**
     * @return Indicates whether the database uses SQL plan baselines (`true`) or not (`false`).
     * 
     */
    public Boolean isSqlPlanBaselinesUsageEnabled() {
        return this.isSqlPlanBaselinesUsageEnabled;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    public Optional<String> opcNamedCredentialId() {
        return Optional.ofNullable(this.opcNamedCredentialId);
    }
    /**
     * @return The number of weeks to retain unused plans before they are purged.
     * 
     */
    public Integer planRetentionWeeks() {
        return this.planRetentionWeeks;
    }
    /**
     * @return The maximum `SYSAUX` space that can be used for SQL Management Base in MB.
     * 
     */
    public Double spaceBudgetMb() {
        return this.spaceBudgetMb;
    }
    /**
     * @return The maximum percent of `SYSAUX` space that can be used for SQL Management Base.
     * 
     */
    public Double spaceBudgetPercent() {
        return this.spaceBudgetPercent;
    }
    /**
     * @return The space used by SQL Management Base in MB.
     * 
     */
    public Double spaceUsedMb() {
        return this.spaceUsedMb;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlPlanBaselineConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilter> autoCaptureFilters;
        private List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameter> autoSpmEvolveTaskParameters;
        private String id;
        private Boolean isAutoSpmEvolveTaskEnabled;
        private Boolean isAutomaticInitialPlanCaptureEnabled;
        private Boolean isHighFrequencyAutoSpmEvolveTaskEnabled;
        private Boolean isSqlPlanBaselinesUsageEnabled;
        private String managedDatabaseId;
        private @Nullable String opcNamedCredentialId;
        private Integer planRetentionWeeks;
        private Double spaceBudgetMb;
        private Double spaceBudgetPercent;
        private Double spaceUsedMb;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlPlanBaselineConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoCaptureFilters = defaults.autoCaptureFilters;
    	      this.autoSpmEvolveTaskParameters = defaults.autoSpmEvolveTaskParameters;
    	      this.id = defaults.id;
    	      this.isAutoSpmEvolveTaskEnabled = defaults.isAutoSpmEvolveTaskEnabled;
    	      this.isAutomaticInitialPlanCaptureEnabled = defaults.isAutomaticInitialPlanCaptureEnabled;
    	      this.isHighFrequencyAutoSpmEvolveTaskEnabled = defaults.isHighFrequencyAutoSpmEvolveTaskEnabled;
    	      this.isSqlPlanBaselinesUsageEnabled = defaults.isSqlPlanBaselinesUsageEnabled;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.opcNamedCredentialId = defaults.opcNamedCredentialId;
    	      this.planRetentionWeeks = defaults.planRetentionWeeks;
    	      this.spaceBudgetMb = defaults.spaceBudgetMb;
    	      this.spaceBudgetPercent = defaults.spaceBudgetPercent;
    	      this.spaceUsedMb = defaults.spaceUsedMb;
        }

        @CustomType.Setter
        public Builder autoCaptureFilters(List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilter> autoCaptureFilters) {
            if (autoCaptureFilters == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "autoCaptureFilters");
            }
            this.autoCaptureFilters = autoCaptureFilters;
            return this;
        }
        public Builder autoCaptureFilters(GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilter... autoCaptureFilters) {
            return autoCaptureFilters(List.of(autoCaptureFilters));
        }
        @CustomType.Setter
        public Builder autoSpmEvolveTaskParameters(List<GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameter> autoSpmEvolveTaskParameters) {
            if (autoSpmEvolveTaskParameters == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "autoSpmEvolveTaskParameters");
            }
            this.autoSpmEvolveTaskParameters = autoSpmEvolveTaskParameters;
            return this;
        }
        public Builder autoSpmEvolveTaskParameters(GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameter... autoSpmEvolveTaskParameters) {
            return autoSpmEvolveTaskParameters(List.of(autoSpmEvolveTaskParameters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoSpmEvolveTaskEnabled(Boolean isAutoSpmEvolveTaskEnabled) {
            if (isAutoSpmEvolveTaskEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "isAutoSpmEvolveTaskEnabled");
            }
            this.isAutoSpmEvolveTaskEnabled = isAutoSpmEvolveTaskEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isAutomaticInitialPlanCaptureEnabled(Boolean isAutomaticInitialPlanCaptureEnabled) {
            if (isAutomaticInitialPlanCaptureEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "isAutomaticInitialPlanCaptureEnabled");
            }
            this.isAutomaticInitialPlanCaptureEnabled = isAutomaticInitialPlanCaptureEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isHighFrequencyAutoSpmEvolveTaskEnabled(Boolean isHighFrequencyAutoSpmEvolveTaskEnabled) {
            if (isHighFrequencyAutoSpmEvolveTaskEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "isHighFrequencyAutoSpmEvolveTaskEnabled");
            }
            this.isHighFrequencyAutoSpmEvolveTaskEnabled = isHighFrequencyAutoSpmEvolveTaskEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSqlPlanBaselinesUsageEnabled(Boolean isSqlPlanBaselinesUsageEnabled) {
            if (isSqlPlanBaselinesUsageEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "isSqlPlanBaselinesUsageEnabled");
            }
            this.isSqlPlanBaselinesUsageEnabled = isSqlPlanBaselinesUsageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder opcNamedCredentialId(@Nullable String opcNamedCredentialId) {

            this.opcNamedCredentialId = opcNamedCredentialId;
            return this;
        }
        @CustomType.Setter
        public Builder planRetentionWeeks(Integer planRetentionWeeks) {
            if (planRetentionWeeks == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "planRetentionWeeks");
            }
            this.planRetentionWeeks = planRetentionWeeks;
            return this;
        }
        @CustomType.Setter
        public Builder spaceBudgetMb(Double spaceBudgetMb) {
            if (spaceBudgetMb == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "spaceBudgetMb");
            }
            this.spaceBudgetMb = spaceBudgetMb;
            return this;
        }
        @CustomType.Setter
        public Builder spaceBudgetPercent(Double spaceBudgetPercent) {
            if (spaceBudgetPercent == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "spaceBudgetPercent");
            }
            this.spaceBudgetPercent = spaceBudgetPercent;
            return this;
        }
        @CustomType.Setter
        public Builder spaceUsedMb(Double spaceUsedMb) {
            if (spaceUsedMb == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselineConfigurationResult", "spaceUsedMb");
            }
            this.spaceUsedMb = spaceUsedMb;
            return this;
        }
        public GetManagedDatabaseSqlPlanBaselineConfigurationResult build() {
            final var _resultValue = new GetManagedDatabaseSqlPlanBaselineConfigurationResult();
            _resultValue.autoCaptureFilters = autoCaptureFilters;
            _resultValue.autoSpmEvolveTaskParameters = autoSpmEvolveTaskParameters;
            _resultValue.id = id;
            _resultValue.isAutoSpmEvolveTaskEnabled = isAutoSpmEvolveTaskEnabled;
            _resultValue.isAutomaticInitialPlanCaptureEnabled = isAutomaticInitialPlanCaptureEnabled;
            _resultValue.isHighFrequencyAutoSpmEvolveTaskEnabled = isHighFrequencyAutoSpmEvolveTaskEnabled;
            _resultValue.isSqlPlanBaselinesUsageEnabled = isSqlPlanBaselinesUsageEnabled;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.opcNamedCredentialId = opcNamedCredentialId;
            _resultValue.planRetentionWeeks = planRetentionWeeks;
            _resultValue.spaceBudgetMb = spaceBudgetMb;
            _resultValue.spaceBudgetPercent = spaceBudgetPercent;
            _resultValue.spaceUsedMb = spaceUsedMb;
            return _resultValue;
        }
    }
}
