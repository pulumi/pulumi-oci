// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseSqlPlanBaselinesFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseSqlPlanBaselinesResult {
    private @Nullable List<GetManagedDatabaseSqlPlanBaselinesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isAccepted;
    private @Nullable Boolean isAdaptive;
    private @Nullable Boolean isAutoPurged;
    private @Nullable Boolean isEnabled;
    private @Nullable Boolean isFixed;
    private @Nullable Boolean isNeverExecuted;
    private @Nullable Boolean isReproduced;
    private @Nullable Integer limit;
    private String managedDatabaseId;
    private @Nullable String opcNamedCredentialId;
    /**
     * @return The origin of the SQL plan baseline.
     * 
     */
    private @Nullable String origin;
    /**
     * @return The unique plan identifier.
     * 
     */
    private @Nullable String planName;
    /**
     * @return The unique SQL identifier.
     * 
     */
    private @Nullable String sqlHandle;
    /**
     * @return The list of sql_plan_baseline_collection.
     * 
     */
    private List<GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection> sqlPlanBaselineCollections;
    /**
     * @return The SQL text.
     * 
     */
    private @Nullable String sqlText;

    private GetManagedDatabaseSqlPlanBaselinesResult() {}
    public List<GetManagedDatabaseSqlPlanBaselinesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isAccepted() {
        return Optional.ofNullable(this.isAccepted);
    }
    public Optional<Boolean> isAdaptive() {
        return Optional.ofNullable(this.isAdaptive);
    }
    public Optional<Boolean> isAutoPurged() {
        return Optional.ofNullable(this.isAutoPurged);
    }
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    public Optional<Boolean> isFixed() {
        return Optional.ofNullable(this.isFixed);
    }
    public Optional<Boolean> isNeverExecuted() {
        return Optional.ofNullable(this.isNeverExecuted);
    }
    public Optional<Boolean> isReproduced() {
        return Optional.ofNullable(this.isReproduced);
    }
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    public Optional<String> opcNamedCredentialId() {
        return Optional.ofNullable(this.opcNamedCredentialId);
    }
    /**
     * @return The origin of the SQL plan baseline.
     * 
     */
    public Optional<String> origin() {
        return Optional.ofNullable(this.origin);
    }
    /**
     * @return The unique plan identifier.
     * 
     */
    public Optional<String> planName() {
        return Optional.ofNullable(this.planName);
    }
    /**
     * @return The unique SQL identifier.
     * 
     */
    public Optional<String> sqlHandle() {
        return Optional.ofNullable(this.sqlHandle);
    }
    /**
     * @return The list of sql_plan_baseline_collection.
     * 
     */
    public List<GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection> sqlPlanBaselineCollections() {
        return this.sqlPlanBaselineCollections;
    }
    /**
     * @return The SQL text.
     * 
     */
    public Optional<String> sqlText() {
        return Optional.ofNullable(this.sqlText);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlPlanBaselinesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetManagedDatabaseSqlPlanBaselinesFilter> filters;
        private String id;
        private @Nullable Boolean isAccepted;
        private @Nullable Boolean isAdaptive;
        private @Nullable Boolean isAutoPurged;
        private @Nullable Boolean isEnabled;
        private @Nullable Boolean isFixed;
        private @Nullable Boolean isNeverExecuted;
        private @Nullable Boolean isReproduced;
        private @Nullable Integer limit;
        private String managedDatabaseId;
        private @Nullable String opcNamedCredentialId;
        private @Nullable String origin;
        private @Nullable String planName;
        private @Nullable String sqlHandle;
        private List<GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection> sqlPlanBaselineCollections;
        private @Nullable String sqlText;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlPlanBaselinesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isAccepted = defaults.isAccepted;
    	      this.isAdaptive = defaults.isAdaptive;
    	      this.isAutoPurged = defaults.isAutoPurged;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isFixed = defaults.isFixed;
    	      this.isNeverExecuted = defaults.isNeverExecuted;
    	      this.isReproduced = defaults.isReproduced;
    	      this.limit = defaults.limit;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.opcNamedCredentialId = defaults.opcNamedCredentialId;
    	      this.origin = defaults.origin;
    	      this.planName = defaults.planName;
    	      this.sqlHandle = defaults.sqlHandle;
    	      this.sqlPlanBaselineCollections = defaults.sqlPlanBaselineCollections;
    	      this.sqlText = defaults.sqlText;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedDatabaseSqlPlanBaselinesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabaseSqlPlanBaselinesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAccepted(@Nullable Boolean isAccepted) {

            this.isAccepted = isAccepted;
            return this;
        }
        @CustomType.Setter
        public Builder isAdaptive(@Nullable Boolean isAdaptive) {

            this.isAdaptive = isAdaptive;
            return this;
        }
        @CustomType.Setter
        public Builder isAutoPurged(@Nullable Boolean isAutoPurged) {

            this.isAutoPurged = isAutoPurged;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {

            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isFixed(@Nullable Boolean isFixed) {

            this.isFixed = isFixed;
            return this;
        }
        @CustomType.Setter
        public Builder isNeverExecuted(@Nullable Boolean isNeverExecuted) {

            this.isNeverExecuted = isNeverExecuted;
            return this;
        }
        @CustomType.Setter
        public Builder isReproduced(@Nullable Boolean isReproduced) {

            this.isReproduced = isReproduced;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder opcNamedCredentialId(@Nullable String opcNamedCredentialId) {

            this.opcNamedCredentialId = opcNamedCredentialId;
            return this;
        }
        @CustomType.Setter
        public Builder origin(@Nullable String origin) {

            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder planName(@Nullable String planName) {

            this.planName = planName;
            return this;
        }
        @CustomType.Setter
        public Builder sqlHandle(@Nullable String sqlHandle) {

            this.sqlHandle = sqlHandle;
            return this;
        }
        @CustomType.Setter
        public Builder sqlPlanBaselineCollections(List<GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection> sqlPlanBaselineCollections) {
            if (sqlPlanBaselineCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesResult", "sqlPlanBaselineCollections");
            }
            this.sqlPlanBaselineCollections = sqlPlanBaselineCollections;
            return this;
        }
        public Builder sqlPlanBaselineCollections(GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection... sqlPlanBaselineCollections) {
            return sqlPlanBaselineCollections(List.of(sqlPlanBaselineCollections));
        }
        @CustomType.Setter
        public Builder sqlText(@Nullable String sqlText) {

            this.sqlText = sqlText;
            return this;
        }
        public GetManagedDatabaseSqlPlanBaselinesResult build() {
            final var _resultValue = new GetManagedDatabaseSqlPlanBaselinesResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isAccepted = isAccepted;
            _resultValue.isAdaptive = isAdaptive;
            _resultValue.isAutoPurged = isAutoPurged;
            _resultValue.isEnabled = isEnabled;
            _resultValue.isFixed = isFixed;
            _resultValue.isNeverExecuted = isNeverExecuted;
            _resultValue.isReproduced = isReproduced;
            _resultValue.limit = limit;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.opcNamedCredentialId = opcNamedCredentialId;
            _resultValue.origin = origin;
            _resultValue.planName = planName;
            _resultValue.sqlHandle = sqlHandle;
            _resultValue.sqlPlanBaselineCollections = sqlPlanBaselineCollections;
            _resultValue.sqlText = sqlText;
            return _resultValue;
        }
    }
}
