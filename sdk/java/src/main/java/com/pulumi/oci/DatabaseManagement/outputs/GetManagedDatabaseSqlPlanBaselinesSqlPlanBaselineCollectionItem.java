// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem {
    /**
     * @return Indicates whether the plan baseline is accepted (`YES`) or not (`NO`).
     * 
     */
    private String accepted;
    /**
     * @return The application action.
     * 
     */
    private String action;
    /**
     * @return Indicates whether a plan that is automatically captured by SQL plan management is marked adaptive or not.
     * 
     */
    private String adaptive;
    /**
     * @return Indicates whether the plan baseline is auto-purged (`YES`) or not (`NO`).
     * 
     */
    private String autoPurge;
    /**
     * @return Indicates whether the plan baseline is enabled (`YES`) or disabled (`NO`).
     * 
     */
    private String enabled;
    /**
     * @return The execution plan for the SQL statement.
     * 
     */
    private String executionPlan;
    /**
     * @return Indicates whether the plan baseline is fixed (`YES`) or not (`NO`).
     * 
     */
    private String fixed;
    /**
     * @return The application module name.
     * 
     */
    private String module;
    /**
     * @return A filter to return all the SQL plan baselines that match the origin.
     * 
     */
    private String origin;
    /**
     * @return A filter to return only SQL plan baselines that match the plan name.
     * 
     */
    private String planName;
    /**
     * @return Indicates whether the optimizer was able to reproduce the plan (`YES`) or not (`NO`). The value is set to `YES` when a plan is initially added to the plan baseline.
     * 
     */
    private String reproduced;
    /**
     * @return A filter to return all the SQL plan baselines for the specified SQL handle.
     * 
     */
    private String sqlHandle;
    /**
     * @return A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
     * 
     */
    private String sqlText;
    /**
     * @return The date and time when the plan baseline was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time when the plan baseline was last executed.
     * 
     */
    private String timeLastExecuted;
    /**
     * @return The date and time when the plan baseline was last modified.
     * 
     */
    private String timeLastModified;

    private GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem() {}
    /**
     * @return Indicates whether the plan baseline is accepted (`YES`) or not (`NO`).
     * 
     */
    public String accepted() {
        return this.accepted;
    }
    /**
     * @return The application action.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Indicates whether a plan that is automatically captured by SQL plan management is marked adaptive or not.
     * 
     */
    public String adaptive() {
        return this.adaptive;
    }
    /**
     * @return Indicates whether the plan baseline is auto-purged (`YES`) or not (`NO`).
     * 
     */
    public String autoPurge() {
        return this.autoPurge;
    }
    /**
     * @return Indicates whether the plan baseline is enabled (`YES`) or disabled (`NO`).
     * 
     */
    public String enabled() {
        return this.enabled;
    }
    /**
     * @return The execution plan for the SQL statement.
     * 
     */
    public String executionPlan() {
        return this.executionPlan;
    }
    /**
     * @return Indicates whether the plan baseline is fixed (`YES`) or not (`NO`).
     * 
     */
    public String fixed() {
        return this.fixed;
    }
    /**
     * @return The application module name.
     * 
     */
    public String module() {
        return this.module;
    }
    /**
     * @return A filter to return all the SQL plan baselines that match the origin.
     * 
     */
    public String origin() {
        return this.origin;
    }
    /**
     * @return A filter to return only SQL plan baselines that match the plan name.
     * 
     */
    public String planName() {
        return this.planName;
    }
    /**
     * @return Indicates whether the optimizer was able to reproduce the plan (`YES`) or not (`NO`). The value is set to `YES` when a plan is initially added to the plan baseline.
     * 
     */
    public String reproduced() {
        return this.reproduced;
    }
    /**
     * @return A filter to return all the SQL plan baselines for the specified SQL handle.
     * 
     */
    public String sqlHandle() {
        return this.sqlHandle;
    }
    /**
     * @return A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
     * 
     */
    public String sqlText() {
        return this.sqlText;
    }
    /**
     * @return The date and time when the plan baseline was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time when the plan baseline was last executed.
     * 
     */
    public String timeLastExecuted() {
        return this.timeLastExecuted;
    }
    /**
     * @return The date and time when the plan baseline was last modified.
     * 
     */
    public String timeLastModified() {
        return this.timeLastModified;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accepted;
        private String action;
        private String adaptive;
        private String autoPurge;
        private String enabled;
        private String executionPlan;
        private String fixed;
        private String module;
        private String origin;
        private String planName;
        private String reproduced;
        private String sqlHandle;
        private String sqlText;
        private String timeCreated;
        private String timeLastExecuted;
        private String timeLastModified;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepted = defaults.accepted;
    	      this.action = defaults.action;
    	      this.adaptive = defaults.adaptive;
    	      this.autoPurge = defaults.autoPurge;
    	      this.enabled = defaults.enabled;
    	      this.executionPlan = defaults.executionPlan;
    	      this.fixed = defaults.fixed;
    	      this.module = defaults.module;
    	      this.origin = defaults.origin;
    	      this.planName = defaults.planName;
    	      this.reproduced = defaults.reproduced;
    	      this.sqlHandle = defaults.sqlHandle;
    	      this.sqlText = defaults.sqlText;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastExecuted = defaults.timeLastExecuted;
    	      this.timeLastModified = defaults.timeLastModified;
        }

        @CustomType.Setter
        public Builder accepted(String accepted) {
            if (accepted == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "accepted");
            }
            this.accepted = accepted;
            return this;
        }
        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder adaptive(String adaptive) {
            if (adaptive == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "adaptive");
            }
            this.adaptive = adaptive;
            return this;
        }
        @CustomType.Setter
        public Builder autoPurge(String autoPurge) {
            if (autoPurge == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "autoPurge");
            }
            this.autoPurge = autoPurge;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(String enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder executionPlan(String executionPlan) {
            if (executionPlan == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "executionPlan");
            }
            this.executionPlan = executionPlan;
            return this;
        }
        @CustomType.Setter
        public Builder fixed(String fixed) {
            if (fixed == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "fixed");
            }
            this.fixed = fixed;
            return this;
        }
        @CustomType.Setter
        public Builder module(String module) {
            if (module == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "module");
            }
            this.module = module;
            return this;
        }
        @CustomType.Setter
        public Builder origin(String origin) {
            if (origin == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "origin");
            }
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder planName(String planName) {
            if (planName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "planName");
            }
            this.planName = planName;
            return this;
        }
        @CustomType.Setter
        public Builder reproduced(String reproduced) {
            if (reproduced == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "reproduced");
            }
            this.reproduced = reproduced;
            return this;
        }
        @CustomType.Setter
        public Builder sqlHandle(String sqlHandle) {
            if (sqlHandle == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "sqlHandle");
            }
            this.sqlHandle = sqlHandle;
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(String sqlText) {
            if (sqlText == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "sqlText");
            }
            this.sqlText = sqlText;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastExecuted(String timeLastExecuted) {
            if (timeLastExecuted == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "timeLastExecuted");
            }
            this.timeLastExecuted = timeLastExecuted;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastModified(String timeLastModified) {
            if (timeLastModified == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem", "timeLastModified");
            }
            this.timeLastModified = timeLastModified;
            return this;
        }
        public GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem build() {
            final var _resultValue = new GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem();
            _resultValue.accepted = accepted;
            _resultValue.action = action;
            _resultValue.adaptive = adaptive;
            _resultValue.autoPurge = autoPurge;
            _resultValue.enabled = enabled;
            _resultValue.executionPlan = executionPlan;
            _resultValue.fixed = fixed;
            _resultValue.module = module;
            _resultValue.origin = origin;
            _resultValue.planName = planName;
            _resultValue.reproduced = reproduced;
            _resultValue.sqlHandle = sqlHandle;
            _resultValue.sqlText = sqlText;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastExecuted = timeLastExecuted;
            _resultValue.timeLastModified = timeLastModified;
            return _resultValue;
        }
    }
}
