// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem {
    /**
     * @return Indicates whether the plan baseline is accepted (`YES`) or not (`NO`).
     * 
     */
    private @Nullable String accepted;
    /**
     * @return The application action.
     * 
     */
    private @Nullable String action;
    /**
     * @return Indicates whether a plan that is automatically captured by SQL plan management is marked adaptive or not.
     * 
     */
    private @Nullable String adaptive;
    /**
     * @return Indicates whether the plan baseline is auto-purged (`YES`) or not (`NO`).
     * 
     */
    private @Nullable String autoPurge;
    /**
     * @return Indicates whether the plan baseline is enabled (`YES`) or disabled (`NO`).
     * 
     */
    private @Nullable String enabled;
    /**
     * @return The execution plan for the SQL statement.
     * 
     */
    private @Nullable String executionPlan;
    /**
     * @return Indicates whether the plan baseline is fixed (`YES`) or not (`NO`).
     * 
     */
    private @Nullable String fixed;
    /**
     * @return The application module name.
     * 
     */
    private @Nullable String module;
    /**
     * @return A filter to return all the SQL plan baselines that match the origin.
     * 
     */
    private @Nullable String origin;
    /**
     * @return A filter to return only SQL plan baselines that match the plan name.
     * 
     */
    private @Nullable String planName;
    /**
     * @return Indicates whether the optimizer was able to reproduce the plan (`YES`) or not (`NO`). The value is set to `YES` when a plan is initially added to the plan baseline.
     * 
     */
    private @Nullable String reproduced;
    /**
     * @return A filter to return all the SQL plan baselines for the specified SQL handle.
     * 
     */
    private @Nullable String sqlHandle;
    /**
     * @return A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
     * 
     */
    private @Nullable String sqlText;
    /**
     * @return The date and time when the plan baseline was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time when the plan baseline was last executed.
     * 
     */
    private @Nullable String timeLastExecuted;
    /**
     * @return The date and time when the plan baseline was last modified.
     * 
     */
    private @Nullable String timeLastModified;

    private GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem() {}
    /**
     * @return Indicates whether the plan baseline is accepted (`YES`) or not (`NO`).
     * 
     */
    public Optional<String> accepted() {
        return Optional.ofNullable(this.accepted);
    }
    /**
     * @return The application action.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return Indicates whether a plan that is automatically captured by SQL plan management is marked adaptive or not.
     * 
     */
    public Optional<String> adaptive() {
        return Optional.ofNullable(this.adaptive);
    }
    /**
     * @return Indicates whether the plan baseline is auto-purged (`YES`) or not (`NO`).
     * 
     */
    public Optional<String> autoPurge() {
        return Optional.ofNullable(this.autoPurge);
    }
    /**
     * @return Indicates whether the plan baseline is enabled (`YES`) or disabled (`NO`).
     * 
     */
    public Optional<String> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The execution plan for the SQL statement.
     * 
     */
    public Optional<String> executionPlan() {
        return Optional.ofNullable(this.executionPlan);
    }
    /**
     * @return Indicates whether the plan baseline is fixed (`YES`) or not (`NO`).
     * 
     */
    public Optional<String> fixed() {
        return Optional.ofNullable(this.fixed);
    }
    /**
     * @return The application module name.
     * 
     */
    public Optional<String> module() {
        return Optional.ofNullable(this.module);
    }
    /**
     * @return A filter to return all the SQL plan baselines that match the origin.
     * 
     */
    public Optional<String> origin() {
        return Optional.ofNullable(this.origin);
    }
    /**
     * @return A filter to return only SQL plan baselines that match the plan name.
     * 
     */
    public Optional<String> planName() {
        return Optional.ofNullable(this.planName);
    }
    /**
     * @return Indicates whether the optimizer was able to reproduce the plan (`YES`) or not (`NO`). The value is set to `YES` when a plan is initially added to the plan baseline.
     * 
     */
    public Optional<String> reproduced() {
        return Optional.ofNullable(this.reproduced);
    }
    /**
     * @return A filter to return all the SQL plan baselines for the specified SQL handle.
     * 
     */
    public Optional<String> sqlHandle() {
        return Optional.ofNullable(this.sqlHandle);
    }
    /**
     * @return A filter to return all the SQL plan baselines that match the SQL text. By default, the search is case insensitive. To run an exact or case-sensitive search, double-quote the search string. You may also use the &#39;%&#39; symbol as a wildcard.
     * 
     */
    public Optional<String> sqlText() {
        return Optional.ofNullable(this.sqlText);
    }
    /**
     * @return The date and time when the plan baseline was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time when the plan baseline was last executed.
     * 
     */
    public Optional<String> timeLastExecuted() {
        return Optional.ofNullable(this.timeLastExecuted);
    }
    /**
     * @return The date and time when the plan baseline was last modified.
     * 
     */
    public Optional<String> timeLastModified() {
        return Optional.ofNullable(this.timeLastModified);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accepted;
        private @Nullable String action;
        private @Nullable String adaptive;
        private @Nullable String autoPurge;
        private @Nullable String enabled;
        private @Nullable String executionPlan;
        private @Nullable String fixed;
        private @Nullable String module;
        private @Nullable String origin;
        private @Nullable String planName;
        private @Nullable String reproduced;
        private @Nullable String sqlHandle;
        private @Nullable String sqlText;
        private @Nullable String timeCreated;
        private @Nullable String timeLastExecuted;
        private @Nullable String timeLastModified;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepted = defaults.accepted;
    	      this.action = defaults.action;
    	      this.adaptive = defaults.adaptive;
    	      this.autoPurge = defaults.autoPurge;
    	      this.enabled = defaults.enabled;
    	      this.executionPlan = defaults.executionPlan;
    	      this.fixed = defaults.fixed;
    	      this.module = defaults.module;
    	      this.origin = defaults.origin;
    	      this.planName = defaults.planName;
    	      this.reproduced = defaults.reproduced;
    	      this.sqlHandle = defaults.sqlHandle;
    	      this.sqlText = defaults.sqlText;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastExecuted = defaults.timeLastExecuted;
    	      this.timeLastModified = defaults.timeLastModified;
        }

        @CustomType.Setter
        public Builder accepted(@Nullable String accepted) {
            this.accepted = accepted;
            return this;
        }
        @CustomType.Setter
        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder adaptive(@Nullable String adaptive) {
            this.adaptive = adaptive;
            return this;
        }
        @CustomType.Setter
        public Builder autoPurge(@Nullable String autoPurge) {
            this.autoPurge = autoPurge;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable String enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder executionPlan(@Nullable String executionPlan) {
            this.executionPlan = executionPlan;
            return this;
        }
        @CustomType.Setter
        public Builder fixed(@Nullable String fixed) {
            this.fixed = fixed;
            return this;
        }
        @CustomType.Setter
        public Builder module(@Nullable String module) {
            this.module = module;
            return this;
        }
        @CustomType.Setter
        public Builder origin(@Nullable String origin) {
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder planName(@Nullable String planName) {
            this.planName = planName;
            return this;
        }
        @CustomType.Setter
        public Builder reproduced(@Nullable String reproduced) {
            this.reproduced = reproduced;
            return this;
        }
        @CustomType.Setter
        public Builder sqlHandle(@Nullable String sqlHandle) {
            this.sqlHandle = sqlHandle;
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(@Nullable String sqlText) {
            this.sqlText = sqlText;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastExecuted(@Nullable String timeLastExecuted) {
            this.timeLastExecuted = timeLastExecuted;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastModified(@Nullable String timeLastModified) {
            this.timeLastModified = timeLastModified;
            return this;
        }
        public GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem build() {
            final var o = new GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem();
            o.accepted = accepted;
            o.action = action;
            o.adaptive = adaptive;
            o.autoPurge = autoPurge;
            o.enabled = enabled;
            o.executionPlan = executionPlan;
            o.fixed = fixed;
            o.module = module;
            o.origin = origin;
            o.planName = planName;
            o.reproduced = reproduced;
            o.sqlHandle = sqlHandle;
            o.sqlText = sqlText;
            o.timeCreated = timeCreated;
            o.timeLastExecuted = timeLastExecuted;
            o.timeLastModified = timeLastModified;
            return o;
        }
    }
}
