// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseSqlTuningAdvisorTaskItem {
    /**
     * @return The number of days left before the task expires. If the value equals -1, then the task has no expiration time (UNLIMITED).
     * 
     */
    private Integer daysToExpire;
    /**
     * @return The description of the SQL Tuning Advisor task.
     * 
     */
    private String description;
    /**
     * @return The instance ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private Integer instanceId;
    /**
     * @return The optional query parameter to filter the SQL Tuning Advisor task list by name.
     * 
     */
    private String name;
    /**
     * @return The owner of the SQL Tuning Advisor task.
     * 
     */
    private String owner;
    /**
     * @return The number of recommendations provided for the SQL Tuning Advisor task.
     * 
     */
    private Integer recommendationCount;
    /**
     * @return The unique identifier of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String sqlTuningAdvisorTaskId;
    /**
     * @return The status of the SQL Tuning Advisor task.
     * 
     */
    private String taskStatus;
    /**
     * @return The Creation date of the SQL Tuning Advisor task.
     * 
     */
    private String timeCreated;
    /**
     * @return The end time of the task execution.
     * 
     */
    private String timeExecutionEnded;
    /**
     * @return The start time of the task execution.
     * 
     */
    private String timeExecutionStarted;
    /**
     * @return The total number of SQL statements related to the SQL Tuning Advisor task.
     * 
     */
    private Integer totalSqlStatements;

    private GetManagedDatabaseSqlTuningAdvisorTaskItem() {}
    /**
     * @return The number of days left before the task expires. If the value equals -1, then the task has no expiration time (UNLIMITED).
     * 
     */
    public Integer daysToExpire() {
        return this.daysToExpire;
    }
    /**
     * @return The description of the SQL Tuning Advisor task.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The instance ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Integer instanceId() {
        return this.instanceId;
    }
    /**
     * @return The optional query parameter to filter the SQL Tuning Advisor task list by name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The owner of the SQL Tuning Advisor task.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return The number of recommendations provided for the SQL Tuning Advisor task.
     * 
     */
    public Integer recommendationCount() {
        return this.recommendationCount;
    }
    /**
     * @return The unique identifier of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String sqlTuningAdvisorTaskId() {
        return this.sqlTuningAdvisorTaskId;
    }
    /**
     * @return The status of the SQL Tuning Advisor task.
     * 
     */
    public String taskStatus() {
        return this.taskStatus;
    }
    /**
     * @return The Creation date of the SQL Tuning Advisor task.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The end time of the task execution.
     * 
     */
    public String timeExecutionEnded() {
        return this.timeExecutionEnded;
    }
    /**
     * @return The start time of the task execution.
     * 
     */
    public String timeExecutionStarted() {
        return this.timeExecutionStarted;
    }
    /**
     * @return The total number of SQL statements related to the SQL Tuning Advisor task.
     * 
     */
    public Integer totalSqlStatements() {
        return this.totalSqlStatements;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlTuningAdvisorTaskItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer daysToExpire;
        private String description;
        private Integer instanceId;
        private String name;
        private String owner;
        private Integer recommendationCount;
        private String sqlTuningAdvisorTaskId;
        private String taskStatus;
        private String timeCreated;
        private String timeExecutionEnded;
        private String timeExecutionStarted;
        private Integer totalSqlStatements;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlTuningAdvisorTaskItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.daysToExpire = defaults.daysToExpire;
    	      this.description = defaults.description;
    	      this.instanceId = defaults.instanceId;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.recommendationCount = defaults.recommendationCount;
    	      this.sqlTuningAdvisorTaskId = defaults.sqlTuningAdvisorTaskId;
    	      this.taskStatus = defaults.taskStatus;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExecutionEnded = defaults.timeExecutionEnded;
    	      this.timeExecutionStarted = defaults.timeExecutionStarted;
    	      this.totalSqlStatements = defaults.totalSqlStatements;
        }

        @CustomType.Setter
        public Builder daysToExpire(Integer daysToExpire) {
            this.daysToExpire = Objects.requireNonNull(daysToExpire);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(Integer instanceId) {
            this.instanceId = Objects.requireNonNull(instanceId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        @CustomType.Setter
        public Builder recommendationCount(Integer recommendationCount) {
            this.recommendationCount = Objects.requireNonNull(recommendationCount);
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskId(String sqlTuningAdvisorTaskId) {
            this.sqlTuningAdvisorTaskId = Objects.requireNonNull(sqlTuningAdvisorTaskId);
            return this;
        }
        @CustomType.Setter
        public Builder taskStatus(String taskStatus) {
            this.taskStatus = Objects.requireNonNull(taskStatus);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeExecutionEnded(String timeExecutionEnded) {
            this.timeExecutionEnded = Objects.requireNonNull(timeExecutionEnded);
            return this;
        }
        @CustomType.Setter
        public Builder timeExecutionStarted(String timeExecutionStarted) {
            this.timeExecutionStarted = Objects.requireNonNull(timeExecutionStarted);
            return this;
        }
        @CustomType.Setter
        public Builder totalSqlStatements(Integer totalSqlStatements) {
            this.totalSqlStatements = Objects.requireNonNull(totalSqlStatements);
            return this;
        }
        public GetManagedDatabaseSqlTuningAdvisorTaskItem build() {
            final var o = new GetManagedDatabaseSqlTuningAdvisorTaskItem();
            o.daysToExpire = daysToExpire;
            o.description = description;
            o.instanceId = instanceId;
            o.name = name;
            o.owner = owner;
            o.recommendationCount = recommendationCount;
            o.sqlTuningAdvisorTaskId = sqlTuningAdvisorTaskId;
            o.taskStatus = taskStatus;
            o.timeCreated = timeCreated;
            o.timeExecutionEnded = timeExecutionEnded;
            o.timeExecutionStarted = timeExecutionStarted;
            o.totalSqlStatements = totalSqlStatements;
            return o;
        }
    }
}
