// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem {
    /**
     * @return The time benefit (in seconds) for the highest-rated finding for this object.
     * 
     */
    private @Nullable Double dbTimeBenefit;
    /**
     * @return Indicates whether an alternative execution plan was reported for this SQL statement.
     * 
     */
    private @Nullable Boolean isAlternativePlanFindingPresent;
    /**
     * @return Indicates whether there is an error in this SQL statement.
     * 
     */
    private @Nullable Boolean isErrorFindingPresent;
    /**
     * @return Indicates whether an index recommendation was reported for this SQL statement.
     * 
     */
    private @Nullable Boolean isIndexFindingPresent;
    /**
     * @return Indicates whether a miscellaneous finding was reported for this SQL statement.
     * 
     */
    private @Nullable Boolean isMiscellaneousFindingPresent;
    /**
     * @return Indicates whether a restructure SQL recommendation was reported for this SQL statement.
     * 
     */
    private @Nullable Boolean isRestructureSqlFindingPresent;
    /**
     * @return Indicates whether a SQL Profile recommendation has been implemented for this SQL statement.
     * 
     */
    private @Nullable Boolean isSqlProfileFindingImplemented;
    /**
     * @return Indicates whether a SQL Profile recommendation was reported for this SQL statement.
     * 
     */
    private @Nullable Boolean isSqlProfileFindingPresent;
    /**
     * @return Indicates whether a statistics recommendation was reported for this SQL statement.
     * 
     */
    private @Nullable Boolean isStatsFindingPresent;
    /**
     * @return Indicates whether the task timed out.
     * 
     */
    private @Nullable Boolean isTimeoutFindingPresent;
    /**
     * @return The parsing schema of the object.
     * 
     */
    private @Nullable String parsingSchema;
    /**
     * @return The per-execution percentage benefit.
     * 
     */
    private @Nullable Integer perExecutionPercentage;
    /**
     * @return The unique key of this SQL statement.
     * 
     */
    private @Nullable String sqlKey;
    /**
     * @return The text of the SQL statement.
     * 
     */
    private @Nullable String sqlText;
    /**
     * @return The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String sqlTuningAdvisorTaskId;
    /**
     * @return The execution id of the analyzed SQL object. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String sqlTuningAdvisorTaskObjectExecutionId;
    /**
     * @return The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable String sqlTuningAdvisorTaskObjectId;

    private GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem() {}
    /**
     * @return The time benefit (in seconds) for the highest-rated finding for this object.
     * 
     */
    public Optional<Double> dbTimeBenefit() {
        return Optional.ofNullable(this.dbTimeBenefit);
    }
    /**
     * @return Indicates whether an alternative execution plan was reported for this SQL statement.
     * 
     */
    public Optional<Boolean> isAlternativePlanFindingPresent() {
        return Optional.ofNullable(this.isAlternativePlanFindingPresent);
    }
    /**
     * @return Indicates whether there is an error in this SQL statement.
     * 
     */
    public Optional<Boolean> isErrorFindingPresent() {
        return Optional.ofNullable(this.isErrorFindingPresent);
    }
    /**
     * @return Indicates whether an index recommendation was reported for this SQL statement.
     * 
     */
    public Optional<Boolean> isIndexFindingPresent() {
        return Optional.ofNullable(this.isIndexFindingPresent);
    }
    /**
     * @return Indicates whether a miscellaneous finding was reported for this SQL statement.
     * 
     */
    public Optional<Boolean> isMiscellaneousFindingPresent() {
        return Optional.ofNullable(this.isMiscellaneousFindingPresent);
    }
    /**
     * @return Indicates whether a restructure SQL recommendation was reported for this SQL statement.
     * 
     */
    public Optional<Boolean> isRestructureSqlFindingPresent() {
        return Optional.ofNullable(this.isRestructureSqlFindingPresent);
    }
    /**
     * @return Indicates whether a SQL Profile recommendation has been implemented for this SQL statement.
     * 
     */
    public Optional<Boolean> isSqlProfileFindingImplemented() {
        return Optional.ofNullable(this.isSqlProfileFindingImplemented);
    }
    /**
     * @return Indicates whether a SQL Profile recommendation was reported for this SQL statement.
     * 
     */
    public Optional<Boolean> isSqlProfileFindingPresent() {
        return Optional.ofNullable(this.isSqlProfileFindingPresent);
    }
    /**
     * @return Indicates whether a statistics recommendation was reported for this SQL statement.
     * 
     */
    public Optional<Boolean> isStatsFindingPresent() {
        return Optional.ofNullable(this.isStatsFindingPresent);
    }
    /**
     * @return Indicates whether the task timed out.
     * 
     */
    public Optional<Boolean> isTimeoutFindingPresent() {
        return Optional.ofNullable(this.isTimeoutFindingPresent);
    }
    /**
     * @return The parsing schema of the object.
     * 
     */
    public Optional<String> parsingSchema() {
        return Optional.ofNullable(this.parsingSchema);
    }
    /**
     * @return The per-execution percentage benefit.
     * 
     */
    public Optional<Integer> perExecutionPercentage() {
        return Optional.ofNullable(this.perExecutionPercentage);
    }
    /**
     * @return The unique key of this SQL statement.
     * 
     */
    public Optional<String> sqlKey() {
        return Optional.ofNullable(this.sqlKey);
    }
    /**
     * @return The text of the SQL statement.
     * 
     */
    public Optional<String> sqlText() {
        return Optional.ofNullable(this.sqlText);
    }
    /**
     * @return The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> sqlTuningAdvisorTaskId() {
        return Optional.ofNullable(this.sqlTuningAdvisorTaskId);
    }
    /**
     * @return The execution id of the analyzed SQL object. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> sqlTuningAdvisorTaskObjectExecutionId() {
        return Optional.ofNullable(this.sqlTuningAdvisorTaskObjectExecutionId);
    }
    /**
     * @return The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<String> sqlTuningAdvisorTaskObjectId() {
        return Optional.ofNullable(this.sqlTuningAdvisorTaskObjectId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double dbTimeBenefit;
        private @Nullable Boolean isAlternativePlanFindingPresent;
        private @Nullable Boolean isErrorFindingPresent;
        private @Nullable Boolean isIndexFindingPresent;
        private @Nullable Boolean isMiscellaneousFindingPresent;
        private @Nullable Boolean isRestructureSqlFindingPresent;
        private @Nullable Boolean isSqlProfileFindingImplemented;
        private @Nullable Boolean isSqlProfileFindingPresent;
        private @Nullable Boolean isStatsFindingPresent;
        private @Nullable Boolean isTimeoutFindingPresent;
        private @Nullable String parsingSchema;
        private @Nullable Integer perExecutionPercentage;
        private @Nullable String sqlKey;
        private @Nullable String sqlText;
        private @Nullable String sqlTuningAdvisorTaskId;
        private @Nullable String sqlTuningAdvisorTaskObjectExecutionId;
        private @Nullable String sqlTuningAdvisorTaskObjectId;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbTimeBenefit = defaults.dbTimeBenefit;
    	      this.isAlternativePlanFindingPresent = defaults.isAlternativePlanFindingPresent;
    	      this.isErrorFindingPresent = defaults.isErrorFindingPresent;
    	      this.isIndexFindingPresent = defaults.isIndexFindingPresent;
    	      this.isMiscellaneousFindingPresent = defaults.isMiscellaneousFindingPresent;
    	      this.isRestructureSqlFindingPresent = defaults.isRestructureSqlFindingPresent;
    	      this.isSqlProfileFindingImplemented = defaults.isSqlProfileFindingImplemented;
    	      this.isSqlProfileFindingPresent = defaults.isSqlProfileFindingPresent;
    	      this.isStatsFindingPresent = defaults.isStatsFindingPresent;
    	      this.isTimeoutFindingPresent = defaults.isTimeoutFindingPresent;
    	      this.parsingSchema = defaults.parsingSchema;
    	      this.perExecutionPercentage = defaults.perExecutionPercentage;
    	      this.sqlKey = defaults.sqlKey;
    	      this.sqlText = defaults.sqlText;
    	      this.sqlTuningAdvisorTaskId = defaults.sqlTuningAdvisorTaskId;
    	      this.sqlTuningAdvisorTaskObjectExecutionId = defaults.sqlTuningAdvisorTaskObjectExecutionId;
    	      this.sqlTuningAdvisorTaskObjectId = defaults.sqlTuningAdvisorTaskObjectId;
        }

        @CustomType.Setter
        public Builder dbTimeBenefit(@Nullable Double dbTimeBenefit) {
            this.dbTimeBenefit = dbTimeBenefit;
            return this;
        }
        @CustomType.Setter
        public Builder isAlternativePlanFindingPresent(@Nullable Boolean isAlternativePlanFindingPresent) {
            this.isAlternativePlanFindingPresent = isAlternativePlanFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder isErrorFindingPresent(@Nullable Boolean isErrorFindingPresent) {
            this.isErrorFindingPresent = isErrorFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder isIndexFindingPresent(@Nullable Boolean isIndexFindingPresent) {
            this.isIndexFindingPresent = isIndexFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder isMiscellaneousFindingPresent(@Nullable Boolean isMiscellaneousFindingPresent) {
            this.isMiscellaneousFindingPresent = isMiscellaneousFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder isRestructureSqlFindingPresent(@Nullable Boolean isRestructureSqlFindingPresent) {
            this.isRestructureSqlFindingPresent = isRestructureSqlFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder isSqlProfileFindingImplemented(@Nullable Boolean isSqlProfileFindingImplemented) {
            this.isSqlProfileFindingImplemented = isSqlProfileFindingImplemented;
            return this;
        }
        @CustomType.Setter
        public Builder isSqlProfileFindingPresent(@Nullable Boolean isSqlProfileFindingPresent) {
            this.isSqlProfileFindingPresent = isSqlProfileFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder isStatsFindingPresent(@Nullable Boolean isStatsFindingPresent) {
            this.isStatsFindingPresent = isStatsFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder isTimeoutFindingPresent(@Nullable Boolean isTimeoutFindingPresent) {
            this.isTimeoutFindingPresent = isTimeoutFindingPresent;
            return this;
        }
        @CustomType.Setter
        public Builder parsingSchema(@Nullable String parsingSchema) {
            this.parsingSchema = parsingSchema;
            return this;
        }
        @CustomType.Setter
        public Builder perExecutionPercentage(@Nullable Integer perExecutionPercentage) {
            this.perExecutionPercentage = perExecutionPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder sqlKey(@Nullable String sqlKey) {
            this.sqlKey = sqlKey;
            return this;
        }
        @CustomType.Setter
        public Builder sqlText(@Nullable String sqlText) {
            this.sqlText = sqlText;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskId(@Nullable String sqlTuningAdvisorTaskId) {
            this.sqlTuningAdvisorTaskId = sqlTuningAdvisorTaskId;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskObjectExecutionId(@Nullable String sqlTuningAdvisorTaskObjectExecutionId) {
            this.sqlTuningAdvisorTaskObjectExecutionId = sqlTuningAdvisorTaskObjectExecutionId;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskObjectId(@Nullable String sqlTuningAdvisorTaskObjectId) {
            this.sqlTuningAdvisorTaskObjectId = sqlTuningAdvisorTaskObjectId;
            return this;
        }
        public GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem build() {
            final var o = new GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem();
            o.dbTimeBenefit = dbTimeBenefit;
            o.isAlternativePlanFindingPresent = isAlternativePlanFindingPresent;
            o.isErrorFindingPresent = isErrorFindingPresent;
            o.isIndexFindingPresent = isIndexFindingPresent;
            o.isMiscellaneousFindingPresent = isMiscellaneousFindingPresent;
            o.isRestructureSqlFindingPresent = isRestructureSqlFindingPresent;
            o.isSqlProfileFindingImplemented = isSqlProfileFindingImplemented;
            o.isSqlProfileFindingPresent = isSqlProfileFindingPresent;
            o.isStatsFindingPresent = isStatsFindingPresent;
            o.isTimeoutFindingPresent = isTimeoutFindingPresent;
            o.parsingSchema = parsingSchema;
            o.perExecutionPercentage = perExecutionPercentage;
            o.sqlKey = sqlKey;
            o.sqlText = sqlText;
            o.sqlTuningAdvisorTaskId = sqlTuningAdvisorTaskId;
            o.sqlTuningAdvisorTaskObjectExecutionId = sqlTuningAdvisorTaskObjectExecutionId;
            o.sqlTuningAdvisorTaskObjectId = sqlTuningAdvisorTaskObjectId;
            return o;
        }
    }
}
