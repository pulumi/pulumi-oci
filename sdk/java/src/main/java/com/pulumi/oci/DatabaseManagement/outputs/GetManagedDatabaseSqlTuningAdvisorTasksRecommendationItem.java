// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItem {
    /**
     * @return The percentage benefit of this implementation.
     * 
     */
    private Double benefit;
    /**
     * @return Summary of the issue found in the SQL statement.
     * 
     */
    private String finding;
    /**
     * @return Action sql to be implemented based on the recommendation result.
     * 
     */
    private String implementActionSql;
    /**
     * @return Indicates whether a SQL Profile recommendation uses parallel execution.
     * 
     */
    private Boolean isParallelExecution;
    /**
     * @return Describes the reasoning behind the recommendation and how it relates to the finding.
     * 
     */
    private String rationale;
    /**
     * @return The recommendation for a specific finding.
     * 
     */
    private String recommendation;
    /**
     * @return The unique identifier of the recommendation in the scope of the task.
     * 
     */
    private Integer recommendationKey;
    /**
     * @return Type of recommendation.
     * 
     */
    private String recommendationType;
    /**
     * @return The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String sqlTuningAdvisorTaskId;
    /**
     * @return The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String sqlTuningAdvisorTaskObjectId;

    private GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItem() {}
    /**
     * @return The percentage benefit of this implementation.
     * 
     */
    public Double benefit() {
        return this.benefit;
    }
    /**
     * @return Summary of the issue found in the SQL statement.
     * 
     */
    public String finding() {
        return this.finding;
    }
    /**
     * @return Action sql to be implemented based on the recommendation result.
     * 
     */
    public String implementActionSql() {
        return this.implementActionSql;
    }
    /**
     * @return Indicates whether a SQL Profile recommendation uses parallel execution.
     * 
     */
    public Boolean isParallelExecution() {
        return this.isParallelExecution;
    }
    /**
     * @return Describes the reasoning behind the recommendation and how it relates to the finding.
     * 
     */
    public String rationale() {
        return this.rationale;
    }
    /**
     * @return The recommendation for a specific finding.
     * 
     */
    public String recommendation() {
        return this.recommendation;
    }
    /**
     * @return The unique identifier of the recommendation in the scope of the task.
     * 
     */
    public Integer recommendationKey() {
        return this.recommendationKey;
    }
    /**
     * @return Type of recommendation.
     * 
     */
    public String recommendationType() {
        return this.recommendationType;
    }
    /**
     * @return The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String sqlTuningAdvisorTaskId() {
        return this.sqlTuningAdvisorTaskId;
    }
    /**
     * @return The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String sqlTuningAdvisorTaskObjectId() {
        return this.sqlTuningAdvisorTaskObjectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double benefit;
        private String finding;
        private String implementActionSql;
        private Boolean isParallelExecution;
        private String rationale;
        private String recommendation;
        private Integer recommendationKey;
        private String recommendationType;
        private String sqlTuningAdvisorTaskId;
        private String sqlTuningAdvisorTaskObjectId;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.benefit = defaults.benefit;
    	      this.finding = defaults.finding;
    	      this.implementActionSql = defaults.implementActionSql;
    	      this.isParallelExecution = defaults.isParallelExecution;
    	      this.rationale = defaults.rationale;
    	      this.recommendation = defaults.recommendation;
    	      this.recommendationKey = defaults.recommendationKey;
    	      this.recommendationType = defaults.recommendationType;
    	      this.sqlTuningAdvisorTaskId = defaults.sqlTuningAdvisorTaskId;
    	      this.sqlTuningAdvisorTaskObjectId = defaults.sqlTuningAdvisorTaskObjectId;
        }

        @CustomType.Setter
        public Builder benefit(Double benefit) {
            this.benefit = Objects.requireNonNull(benefit);
            return this;
        }
        @CustomType.Setter
        public Builder finding(String finding) {
            this.finding = Objects.requireNonNull(finding);
            return this;
        }
        @CustomType.Setter
        public Builder implementActionSql(String implementActionSql) {
            this.implementActionSql = Objects.requireNonNull(implementActionSql);
            return this;
        }
        @CustomType.Setter
        public Builder isParallelExecution(Boolean isParallelExecution) {
            this.isParallelExecution = Objects.requireNonNull(isParallelExecution);
            return this;
        }
        @CustomType.Setter
        public Builder rationale(String rationale) {
            this.rationale = Objects.requireNonNull(rationale);
            return this;
        }
        @CustomType.Setter
        public Builder recommendation(String recommendation) {
            this.recommendation = Objects.requireNonNull(recommendation);
            return this;
        }
        @CustomType.Setter
        public Builder recommendationKey(Integer recommendationKey) {
            this.recommendationKey = Objects.requireNonNull(recommendationKey);
            return this;
        }
        @CustomType.Setter
        public Builder recommendationType(String recommendationType) {
            this.recommendationType = Objects.requireNonNull(recommendationType);
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskId(String sqlTuningAdvisorTaskId) {
            this.sqlTuningAdvisorTaskId = Objects.requireNonNull(sqlTuningAdvisorTaskId);
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskObjectId(String sqlTuningAdvisorTaskObjectId) {
            this.sqlTuningAdvisorTaskObjectId = Objects.requireNonNull(sqlTuningAdvisorTaskObjectId);
            return this;
        }
        public GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItem build() {
            final var o = new GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItem();
            o.benefit = benefit;
            o.finding = finding;
            o.implementActionSql = implementActionSql;
            o.isParallelExecution = isParallelExecution;
            o.rationale = rationale;
            o.recommendation = recommendation;
            o.recommendationKey = recommendationKey;
            o.recommendationType = recommendationType;
            o.sqlTuningAdvisorTaskId = sqlTuningAdvisorTaskId;
            o.sqlTuningAdvisorTaskObjectId = sqlTuningAdvisorTaskObjectId;
            return o;
        }
    }
}
