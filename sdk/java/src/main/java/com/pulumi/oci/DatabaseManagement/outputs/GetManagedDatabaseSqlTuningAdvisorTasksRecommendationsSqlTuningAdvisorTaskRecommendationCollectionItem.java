// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem {
    /**
     * @return The percentage benefit of this implementation.
     * 
     */
    private Double benefit;
    /**
     * @return Summary of the issue found in the SQL statement.
     * 
     */
    private String finding;
    /**
     * @return Action sql to be implemented based on the recommendation result.
     * 
     */
    private String implementActionSql;
    /**
     * @return Indicates whether a SQL Profile recommendation uses parallel execution.
     * 
     */
    private Boolean isParallelExecution;
    /**
     * @return Describes the reasoning behind the recommendation and how it relates to the finding.
     * 
     */
    private String rationale;
    /**
     * @return The recommendation for a specific finding.
     * 
     */
    private String recommendation;
    /**
     * @return The unique identifier of the recommendation in the scope of the task.
     * 
     */
    private Integer recommendationKey;
    /**
     * @return Type of recommendation.
     * 
     */
    private String recommendationType;
    /**
     * @return The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String sqlTuningAdvisorTaskId;
    /**
     * @return The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private String sqlTuningAdvisorTaskObjectId;

    private GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem() {}
    /**
     * @return The percentage benefit of this implementation.
     * 
     */
    public Double benefit() {
        return this.benefit;
    }
    /**
     * @return Summary of the issue found in the SQL statement.
     * 
     */
    public String finding() {
        return this.finding;
    }
    /**
     * @return Action sql to be implemented based on the recommendation result.
     * 
     */
    public String implementActionSql() {
        return this.implementActionSql;
    }
    /**
     * @return Indicates whether a SQL Profile recommendation uses parallel execution.
     * 
     */
    public Boolean isParallelExecution() {
        return this.isParallelExecution;
    }
    /**
     * @return Describes the reasoning behind the recommendation and how it relates to the finding.
     * 
     */
    public String rationale() {
        return this.rationale;
    }
    /**
     * @return The recommendation for a specific finding.
     * 
     */
    public String recommendation() {
        return this.recommendation;
    }
    /**
     * @return The unique identifier of the recommendation in the scope of the task.
     * 
     */
    public Integer recommendationKey() {
        return this.recommendationKey;
    }
    /**
     * @return Type of recommendation.
     * 
     */
    public String recommendationType() {
        return this.recommendationType;
    }
    /**
     * @return The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String sqlTuningAdvisorTaskId() {
        return this.sqlTuningAdvisorTaskId;
    }
    /**
     * @return The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public String sqlTuningAdvisorTaskObjectId() {
        return this.sqlTuningAdvisorTaskObjectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double benefit;
        private String finding;
        private String implementActionSql;
        private Boolean isParallelExecution;
        private String rationale;
        private String recommendation;
        private Integer recommendationKey;
        private String recommendationType;
        private String sqlTuningAdvisorTaskId;
        private String sqlTuningAdvisorTaskObjectId;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.benefit = defaults.benefit;
    	      this.finding = defaults.finding;
    	      this.implementActionSql = defaults.implementActionSql;
    	      this.isParallelExecution = defaults.isParallelExecution;
    	      this.rationale = defaults.rationale;
    	      this.recommendation = defaults.recommendation;
    	      this.recommendationKey = defaults.recommendationKey;
    	      this.recommendationType = defaults.recommendationType;
    	      this.sqlTuningAdvisorTaskId = defaults.sqlTuningAdvisorTaskId;
    	      this.sqlTuningAdvisorTaskObjectId = defaults.sqlTuningAdvisorTaskObjectId;
        }

        @CustomType.Setter
        public Builder benefit(Double benefit) {
            if (benefit == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "benefit");
            }
            this.benefit = benefit;
            return this;
        }
        @CustomType.Setter
        public Builder finding(String finding) {
            if (finding == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "finding");
            }
            this.finding = finding;
            return this;
        }
        @CustomType.Setter
        public Builder implementActionSql(String implementActionSql) {
            if (implementActionSql == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "implementActionSql");
            }
            this.implementActionSql = implementActionSql;
            return this;
        }
        @CustomType.Setter
        public Builder isParallelExecution(Boolean isParallelExecution) {
            if (isParallelExecution == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "isParallelExecution");
            }
            this.isParallelExecution = isParallelExecution;
            return this;
        }
        @CustomType.Setter
        public Builder rationale(String rationale) {
            if (rationale == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "rationale");
            }
            this.rationale = rationale;
            return this;
        }
        @CustomType.Setter
        public Builder recommendation(String recommendation) {
            if (recommendation == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "recommendation");
            }
            this.recommendation = recommendation;
            return this;
        }
        @CustomType.Setter
        public Builder recommendationKey(Integer recommendationKey) {
            if (recommendationKey == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "recommendationKey");
            }
            this.recommendationKey = recommendationKey;
            return this;
        }
        @CustomType.Setter
        public Builder recommendationType(String recommendationType) {
            if (recommendationType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "recommendationType");
            }
            this.recommendationType = recommendationType;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskId(String sqlTuningAdvisorTaskId) {
            if (sqlTuningAdvisorTaskId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "sqlTuningAdvisorTaskId");
            }
            this.sqlTuningAdvisorTaskId = sqlTuningAdvisorTaskId;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTuningAdvisorTaskObjectId(String sqlTuningAdvisorTaskObjectId) {
            if (sqlTuningAdvisorTaskObjectId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem", "sqlTuningAdvisorTaskObjectId");
            }
            this.sqlTuningAdvisorTaskObjectId = sqlTuningAdvisorTaskObjectId;
            return this;
        }
        public GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem build() {
            final var _resultValue = new GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem();
            _resultValue.benefit = benefit;
            _resultValue.finding = finding;
            _resultValue.implementActionSql = implementActionSql;
            _resultValue.isParallelExecution = isParallelExecution;
            _resultValue.rationale = rationale;
            _resultValue.recommendation = recommendation;
            _resultValue.recommendationKey = recommendationKey;
            _resultValue.recommendationType = recommendationType;
            _resultValue.sqlTuningAdvisorTaskId = sqlTuningAdvisorTaskId;
            _resultValue.sqlTuningAdvisorTaskObjectId = sqlTuningAdvisorTaskObjectId;
            return _resultValue;
        }
    }
}
