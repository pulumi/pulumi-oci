// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlan {
    /**
     * @return The predicates used to locate rows in an access structure. For example, start or stop predicates for an index range scan.
     * 
     */
    private @Nullable String accessPredicates;
    /**
     * @return The attribute of the SQL execution plan.
     * 
     */
    private @Nullable String attribute;
    /**
     * @return The number of bytes returned by the current operation.
     * 
     */
    private @Nullable String bytes;
    /**
     * @return The number of rows returned by the current operation (estimated by the CBO).
     * 
     */
    private @Nullable String cardinality;
    /**
     * @return The cost of the current operation estimated by the cost-based optimizer (CBO).
     * 
     */
    private @Nullable Double cost;
    /**
     * @return The CPU cost of the current operation.
     * 
     */
    private @Nullable Double cpuCost;
    /**
     * @return The predicates used to filter rows before producing them.
     * 
     */
    private @Nullable String filterPredicates;
    /**
     * @return The I/O cost of the current operation.
     * 
     */
    private @Nullable Double ioCost;
    /**
     * @return Number of index columns with start and stop keys (that is, the number of columns with matching predicates).
     * 
     */
    private @Nullable Integer numberOfSearchColumn;
    /**
     * @return The name of the object.
     * 
     */
    private @Nullable String object;
    /**
     * @return The name of the database link used to reference the object.
     * 
     */
    private @Nullable String objectNode;
    /**
     * @return The owner of the object.
     * 
     */
    private @Nullable String objectOwner;
    /**
     * @return The numbered position of the object name in the original SQL statement.
     * 
     */
    private @Nullable Integer objectPosition;
    /**
     * @return The descriptive modifier that further describes the type of object.
     * 
     */
    private @Nullable String objectType;
    /**
     * @return The name of the operation performed at this step.
     * 
     */
    private @Nullable String operation;
    /**
     * @return The current mode of the optimizer, such as all_rows, first_rows_n (where n = 1, 10, 100, 1000, and so on).
     * 
     */
    private @Nullable String optimizerMode;
    /**
     * @return The options used for the operation performed at this step.
     * 
     */
    private @Nullable String options;
    /**
     * @return Information about parallel execution servers and parallel queries
     * 
     */
    private @Nullable String other;
    /**
     * @return Describes the function of the SQL text in the OTHER column.
     * 
     */
    private @Nullable String otherTag;
    /**
     * @return The ID of the next step that operates on the results of this step. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable Integer parentStepId;
    /**
     * @return The ID of the step in the execution plan that has computed the pair of values of partitionStart and partitionStop.
     * 
     */
    private @Nullable Integer partitionId;
    /**
     * @return A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
     * 
     */
    private @Nullable String partitionStart;
    /**
     * @return A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
     * 
     */
    private @Nullable String partitionStop;
    /**
     * @return The numerical representation of the SQL execution plan.
     * 
     */
    private @Nullable String planHashValue;
    /**
     * @return The order of processing for steps with the same parent ID.
     * 
     */
    private @Nullable Integer position;
    /**
     * @return The place for comments that can be added to the steps of the execution plan.
     * 
     */
    private @Nullable String remarks;
    /**
     * @return The identification number of a step in the SQL execution plan. This is unique within the SQL execution plan. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    private @Nullable Integer stepId;
    /**
     * @return The temporary space usage (in bytes) of the operation (sort or hash-join) as estimated by the CBO.
     * 
     */
    private @Nullable String tempSpace;
    /**
     * @return The elapsed time (in seconds) of the operation as estimated by the CBO.
     * 
     */
    private @Nullable String time;

    private GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlan() {}
    /**
     * @return The predicates used to locate rows in an access structure. For example, start or stop predicates for an index range scan.
     * 
     */
    public Optional<String> accessPredicates() {
        return Optional.ofNullable(this.accessPredicates);
    }
    /**
     * @return The attribute of the SQL execution plan.
     * 
     */
    public Optional<String> attribute() {
        return Optional.ofNullable(this.attribute);
    }
    /**
     * @return The number of bytes returned by the current operation.
     * 
     */
    public Optional<String> bytes() {
        return Optional.ofNullable(this.bytes);
    }
    /**
     * @return The number of rows returned by the current operation (estimated by the CBO).
     * 
     */
    public Optional<String> cardinality() {
        return Optional.ofNullable(this.cardinality);
    }
    /**
     * @return The cost of the current operation estimated by the cost-based optimizer (CBO).
     * 
     */
    public Optional<Double> cost() {
        return Optional.ofNullable(this.cost);
    }
    /**
     * @return The CPU cost of the current operation.
     * 
     */
    public Optional<Double> cpuCost() {
        return Optional.ofNullable(this.cpuCost);
    }
    /**
     * @return The predicates used to filter rows before producing them.
     * 
     */
    public Optional<String> filterPredicates() {
        return Optional.ofNullable(this.filterPredicates);
    }
    /**
     * @return The I/O cost of the current operation.
     * 
     */
    public Optional<Double> ioCost() {
        return Optional.ofNullable(this.ioCost);
    }
    /**
     * @return Number of index columns with start and stop keys (that is, the number of columns with matching predicates).
     * 
     */
    public Optional<Integer> numberOfSearchColumn() {
        return Optional.ofNullable(this.numberOfSearchColumn);
    }
    /**
     * @return The name of the object.
     * 
     */
    public Optional<String> object() {
        return Optional.ofNullable(this.object);
    }
    /**
     * @return The name of the database link used to reference the object.
     * 
     */
    public Optional<String> objectNode() {
        return Optional.ofNullable(this.objectNode);
    }
    /**
     * @return The owner of the object.
     * 
     */
    public Optional<String> objectOwner() {
        return Optional.ofNullable(this.objectOwner);
    }
    /**
     * @return The numbered position of the object name in the original SQL statement.
     * 
     */
    public Optional<Integer> objectPosition() {
        return Optional.ofNullable(this.objectPosition);
    }
    /**
     * @return The descriptive modifier that further describes the type of object.
     * 
     */
    public Optional<String> objectType() {
        return Optional.ofNullable(this.objectType);
    }
    /**
     * @return The name of the operation performed at this step.
     * 
     */
    public Optional<String> operation() {
        return Optional.ofNullable(this.operation);
    }
    /**
     * @return The current mode of the optimizer, such as all_rows, first_rows_n (where n = 1, 10, 100, 1000, and so on).
     * 
     */
    public Optional<String> optimizerMode() {
        return Optional.ofNullable(this.optimizerMode);
    }
    /**
     * @return The options used for the operation performed at this step.
     * 
     */
    public Optional<String> options() {
        return Optional.ofNullable(this.options);
    }
    /**
     * @return Information about parallel execution servers and parallel queries
     * 
     */
    public Optional<String> other() {
        return Optional.ofNullable(this.other);
    }
    /**
     * @return Describes the function of the SQL text in the OTHER column.
     * 
     */
    public Optional<String> otherTag() {
        return Optional.ofNullable(this.otherTag);
    }
    /**
     * @return The ID of the next step that operates on the results of this step. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Integer> parentStepId() {
        return Optional.ofNullable(this.parentStepId);
    }
    /**
     * @return The ID of the step in the execution plan that has computed the pair of values of partitionStart and partitionStop.
     * 
     */
    public Optional<Integer> partitionId() {
        return Optional.ofNullable(this.partitionId);
    }
    /**
     * @return A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
     * 
     */
    public Optional<String> partitionStart() {
        return Optional.ofNullable(this.partitionStart);
    }
    /**
     * @return A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
     * 
     */
    public Optional<String> partitionStop() {
        return Optional.ofNullable(this.partitionStop);
    }
    /**
     * @return The numerical representation of the SQL execution plan.
     * 
     */
    public Optional<String> planHashValue() {
        return Optional.ofNullable(this.planHashValue);
    }
    /**
     * @return The order of processing for steps with the same parent ID.
     * 
     */
    public Optional<Integer> position() {
        return Optional.ofNullable(this.position);
    }
    /**
     * @return The place for comments that can be added to the steps of the execution plan.
     * 
     */
    public Optional<String> remarks() {
        return Optional.ofNullable(this.remarks);
    }
    /**
     * @return The identification number of a step in the SQL execution plan. This is unique within the SQL execution plan. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * 
     */
    public Optional<Integer> stepId() {
        return Optional.ofNullable(this.stepId);
    }
    /**
     * @return The temporary space usage (in bytes) of the operation (sort or hash-join) as estimated by the CBO.
     * 
     */
    public Optional<String> tempSpace() {
        return Optional.ofNullable(this.tempSpace);
    }
    /**
     * @return The elapsed time (in seconds) of the operation as estimated by the CBO.
     * 
     */
    public Optional<String> time() {
        return Optional.ofNullable(this.time);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessPredicates;
        private @Nullable String attribute;
        private @Nullable String bytes;
        private @Nullable String cardinality;
        private @Nullable Double cost;
        private @Nullable Double cpuCost;
        private @Nullable String filterPredicates;
        private @Nullable Double ioCost;
        private @Nullable Integer numberOfSearchColumn;
        private @Nullable String object;
        private @Nullable String objectNode;
        private @Nullable String objectOwner;
        private @Nullable Integer objectPosition;
        private @Nullable String objectType;
        private @Nullable String operation;
        private @Nullable String optimizerMode;
        private @Nullable String options;
        private @Nullable String other;
        private @Nullable String otherTag;
        private @Nullable Integer parentStepId;
        private @Nullable Integer partitionId;
        private @Nullable String partitionStart;
        private @Nullable String partitionStop;
        private @Nullable String planHashValue;
        private @Nullable Integer position;
        private @Nullable String remarks;
        private @Nullable Integer stepId;
        private @Nullable String tempSpace;
        private @Nullable String time;
        public Builder() {}
        public Builder(GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPredicates = defaults.accessPredicates;
    	      this.attribute = defaults.attribute;
    	      this.bytes = defaults.bytes;
    	      this.cardinality = defaults.cardinality;
    	      this.cost = defaults.cost;
    	      this.cpuCost = defaults.cpuCost;
    	      this.filterPredicates = defaults.filterPredicates;
    	      this.ioCost = defaults.ioCost;
    	      this.numberOfSearchColumn = defaults.numberOfSearchColumn;
    	      this.object = defaults.object;
    	      this.objectNode = defaults.objectNode;
    	      this.objectOwner = defaults.objectOwner;
    	      this.objectPosition = defaults.objectPosition;
    	      this.objectType = defaults.objectType;
    	      this.operation = defaults.operation;
    	      this.optimizerMode = defaults.optimizerMode;
    	      this.options = defaults.options;
    	      this.other = defaults.other;
    	      this.otherTag = defaults.otherTag;
    	      this.parentStepId = defaults.parentStepId;
    	      this.partitionId = defaults.partitionId;
    	      this.partitionStart = defaults.partitionStart;
    	      this.partitionStop = defaults.partitionStop;
    	      this.planHashValue = defaults.planHashValue;
    	      this.position = defaults.position;
    	      this.remarks = defaults.remarks;
    	      this.stepId = defaults.stepId;
    	      this.tempSpace = defaults.tempSpace;
    	      this.time = defaults.time;
        }

        @CustomType.Setter
        public Builder accessPredicates(@Nullable String accessPredicates) {
            this.accessPredicates = accessPredicates;
            return this;
        }
        @CustomType.Setter
        public Builder attribute(@Nullable String attribute) {
            this.attribute = attribute;
            return this;
        }
        @CustomType.Setter
        public Builder bytes(@Nullable String bytes) {
            this.bytes = bytes;
            return this;
        }
        @CustomType.Setter
        public Builder cardinality(@Nullable String cardinality) {
            this.cardinality = cardinality;
            return this;
        }
        @CustomType.Setter
        public Builder cost(@Nullable Double cost) {
            this.cost = cost;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCost(@Nullable Double cpuCost) {
            this.cpuCost = cpuCost;
            return this;
        }
        @CustomType.Setter
        public Builder filterPredicates(@Nullable String filterPredicates) {
            this.filterPredicates = filterPredicates;
            return this;
        }
        @CustomType.Setter
        public Builder ioCost(@Nullable Double ioCost) {
            this.ioCost = ioCost;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfSearchColumn(@Nullable Integer numberOfSearchColumn) {
            this.numberOfSearchColumn = numberOfSearchColumn;
            return this;
        }
        @CustomType.Setter
        public Builder object(@Nullable String object) {
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder objectNode(@Nullable String objectNode) {
            this.objectNode = objectNode;
            return this;
        }
        @CustomType.Setter
        public Builder objectOwner(@Nullable String objectOwner) {
            this.objectOwner = objectOwner;
            return this;
        }
        @CustomType.Setter
        public Builder objectPosition(@Nullable Integer objectPosition) {
            this.objectPosition = objectPosition;
            return this;
        }
        @CustomType.Setter
        public Builder objectType(@Nullable String objectType) {
            this.objectType = objectType;
            return this;
        }
        @CustomType.Setter
        public Builder operation(@Nullable String operation) {
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder optimizerMode(@Nullable String optimizerMode) {
            this.optimizerMode = optimizerMode;
            return this;
        }
        @CustomType.Setter
        public Builder options(@Nullable String options) {
            this.options = options;
            return this;
        }
        @CustomType.Setter
        public Builder other(@Nullable String other) {
            this.other = other;
            return this;
        }
        @CustomType.Setter
        public Builder otherTag(@Nullable String otherTag) {
            this.otherTag = otherTag;
            return this;
        }
        @CustomType.Setter
        public Builder parentStepId(@Nullable Integer parentStepId) {
            this.parentStepId = parentStepId;
            return this;
        }
        @CustomType.Setter
        public Builder partitionId(@Nullable Integer partitionId) {
            this.partitionId = partitionId;
            return this;
        }
        @CustomType.Setter
        public Builder partitionStart(@Nullable String partitionStart) {
            this.partitionStart = partitionStart;
            return this;
        }
        @CustomType.Setter
        public Builder partitionStop(@Nullable String partitionStop) {
            this.partitionStop = partitionStop;
            return this;
        }
        @CustomType.Setter
        public Builder planHashValue(@Nullable String planHashValue) {
            this.planHashValue = planHashValue;
            return this;
        }
        @CustomType.Setter
        public Builder position(@Nullable Integer position) {
            this.position = position;
            return this;
        }
        @CustomType.Setter
        public Builder remarks(@Nullable String remarks) {
            this.remarks = remarks;
            return this;
        }
        @CustomType.Setter
        public Builder stepId(@Nullable Integer stepId) {
            this.stepId = stepId;
            return this;
        }
        @CustomType.Setter
        public Builder tempSpace(@Nullable String tempSpace) {
            this.tempSpace = tempSpace;
            return this;
        }
        @CustomType.Setter
        public Builder time(@Nullable String time) {
            this.time = time;
            return this;
        }
        public GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlan build() {
            final var o = new GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlan();
            o.accessPredicates = accessPredicates;
            o.attribute = attribute;
            o.bytes = bytes;
            o.cardinality = cardinality;
            o.cost = cost;
            o.cpuCost = cpuCost;
            o.filterPredicates = filterPredicates;
            o.ioCost = ioCost;
            o.numberOfSearchColumn = numberOfSearchColumn;
            o.object = object;
            o.objectNode = objectNode;
            o.objectOwner = objectOwner;
            o.objectPosition = objectPosition;
            o.objectType = objectType;
            o.operation = operation;
            o.optimizerMode = optimizerMode;
            o.options = options;
            o.other = other;
            o.otherTag = otherTag;
            o.parentStepId = parentStepId;
            o.partitionId = partitionId;
            o.partitionStart = partitionStart;
            o.partitionStop = partitionStop;
            o.planHashValue = planHashValue;
            o.position = position;
            o.remarks = remarks;
            o.stepId = stepId;
            o.tempSpace = tempSpace;
            o.time = time;
            return o;
        }
    }
}
