// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseUserObjectPrivilegeItem {
    /**
     * @return Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    private String common;
    /**
     * @return Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
     * 
     */
    private String grantOption;
    /**
     * @return The name of the user who granted the object privilege.
     * 
     */
    private String grantor;
    /**
     * @return Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
     * 
     */
    private String hierarchy;
    /**
     * @return Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
     * 
     */
    private String inherited;
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    private String name;
    /**
     * @return The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
     * 
     */
    private String object;
    /**
     * @return The owner of the object.
     * 
     */
    private String owner;
    /**
     * @return The type of object.
     * 
     */
    private String schemaType;

    private GetManagedDatabaseUserObjectPrivilegeItem() {}
    /**
     * @return Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    public String common() {
        return this.common;
    }
    /**
     * @return Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
     * 
     */
    public String grantOption() {
        return this.grantOption;
    }
    /**
     * @return The name of the user who granted the object privilege.
     * 
     */
    public String grantor() {
        return this.grantor;
    }
    /**
     * @return Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
     * 
     */
    public String hierarchy() {
        return this.hierarchy;
    }
    /**
     * @return Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
     * 
     */
    public String inherited() {
        return this.inherited;
    }
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
     * 
     */
    public String object() {
        return this.object;
    }
    /**
     * @return The owner of the object.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return The type of object.
     * 
     */
    public String schemaType() {
        return this.schemaType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUserObjectPrivilegeItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String common;
        private String grantOption;
        private String grantor;
        private String hierarchy;
        private String inherited;
        private String name;
        private String object;
        private String owner;
        private String schemaType;
        public Builder() {}
        public Builder(GetManagedDatabaseUserObjectPrivilegeItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.common = defaults.common;
    	      this.grantOption = defaults.grantOption;
    	      this.grantor = defaults.grantor;
    	      this.hierarchy = defaults.hierarchy;
    	      this.inherited = defaults.inherited;
    	      this.name = defaults.name;
    	      this.object = defaults.object;
    	      this.owner = defaults.owner;
    	      this.schemaType = defaults.schemaType;
        }

        @CustomType.Setter
        public Builder common(String common) {
            if (common == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "common");
            }
            this.common = common;
            return this;
        }
        @CustomType.Setter
        public Builder grantOption(String grantOption) {
            if (grantOption == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "grantOption");
            }
            this.grantOption = grantOption;
            return this;
        }
        @CustomType.Setter
        public Builder grantor(String grantor) {
            if (grantor == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "grantor");
            }
            this.grantor = grantor;
            return this;
        }
        @CustomType.Setter
        public Builder hierarchy(String hierarchy) {
            if (hierarchy == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "hierarchy");
            }
            this.hierarchy = hierarchy;
            return this;
        }
        @CustomType.Setter
        public Builder inherited(String inherited) {
            if (inherited == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "inherited");
            }
            this.inherited = inherited;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder schemaType(String schemaType) {
            if (schemaType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserObjectPrivilegeItem", "schemaType");
            }
            this.schemaType = schemaType;
            return this;
        }
        public GetManagedDatabaseUserObjectPrivilegeItem build() {
            final var _resultValue = new GetManagedDatabaseUserObjectPrivilegeItem();
            _resultValue.common = common;
            _resultValue.grantOption = grantOption;
            _resultValue.grantor = grantor;
            _resultValue.hierarchy = hierarchy;
            _resultValue.inherited = inherited;
            _resultValue.name = name;
            _resultValue.object = object;
            _resultValue.owner = owner;
            _resultValue.schemaType = schemaType;
            return _resultValue;
        }
    }
}
