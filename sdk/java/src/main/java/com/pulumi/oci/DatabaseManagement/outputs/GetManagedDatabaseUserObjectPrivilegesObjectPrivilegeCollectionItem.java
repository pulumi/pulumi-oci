// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem {
    /**
     * @return Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    private @Nullable String common;
    /**
     * @return Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
     * 
     */
    private @Nullable String grantOption;
    /**
     * @return The name of the user who granted the object privilege.
     * 
     */
    private @Nullable String grantor;
    /**
     * @return Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
     * 
     */
    private @Nullable String hierarchy;
    /**
     * @return Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
     * 
     */
    private @Nullable String inherited;
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    private @Nullable String name;
    /**
     * @return The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
     * 
     */
    private @Nullable String object;
    /**
     * @return The owner of the object.
     * 
     */
    private @Nullable String owner;
    /**
     * @return The type of object.
     * 
     */
    private @Nullable String schemaType;

    private GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem() {}
    /**
     * @return Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    public Optional<String> common() {
        return Optional.ofNullable(this.common);
    }
    /**
     * @return Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
     * 
     */
    public Optional<String> grantOption() {
        return Optional.ofNullable(this.grantOption);
    }
    /**
     * @return The name of the user who granted the object privilege.
     * 
     */
    public Optional<String> grantor() {
        return Optional.ofNullable(this.grantor);
    }
    /**
     * @return Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
     * 
     */
    public Optional<String> hierarchy() {
        return Optional.ofNullable(this.hierarchy);
    }
    /**
     * @return Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
     * 
     */
    public Optional<String> inherited() {
        return Optional.ofNullable(this.inherited);
    }
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
     * 
     */
    public Optional<String> object() {
        return Optional.ofNullable(this.object);
    }
    /**
     * @return The owner of the object.
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return The type of object.
     * 
     */
    public Optional<String> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String common;
        private @Nullable String grantOption;
        private @Nullable String grantor;
        private @Nullable String hierarchy;
        private @Nullable String inherited;
        private @Nullable String name;
        private @Nullable String object;
        private @Nullable String owner;
        private @Nullable String schemaType;
        public Builder() {}
        public Builder(GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.common = defaults.common;
    	      this.grantOption = defaults.grantOption;
    	      this.grantor = defaults.grantor;
    	      this.hierarchy = defaults.hierarchy;
    	      this.inherited = defaults.inherited;
    	      this.name = defaults.name;
    	      this.object = defaults.object;
    	      this.owner = defaults.owner;
    	      this.schemaType = defaults.schemaType;
        }

        @CustomType.Setter
        public Builder common(@Nullable String common) {
            this.common = common;
            return this;
        }
        @CustomType.Setter
        public Builder grantOption(@Nullable String grantOption) {
            this.grantOption = grantOption;
            return this;
        }
        @CustomType.Setter
        public Builder grantor(@Nullable String grantor) {
            this.grantor = grantor;
            return this;
        }
        @CustomType.Setter
        public Builder hierarchy(@Nullable String hierarchy) {
            this.hierarchy = hierarchy;
            return this;
        }
        @CustomType.Setter
        public Builder inherited(@Nullable String inherited) {
            this.inherited = inherited;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder object(@Nullable String object) {
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder schemaType(@Nullable String schemaType) {
            this.schemaType = schemaType;
            return this;
        }
        public GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem build() {
            final var o = new GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem();
            o.common = common;
            o.grantOption = grantOption;
            o.grantor = grantor;
            o.hierarchy = hierarchy;
            o.inherited = inherited;
            o.name = name;
            o.object = object;
            o.owner = owner;
            o.schemaType = schemaType;
            return o;
        }
    }
}
