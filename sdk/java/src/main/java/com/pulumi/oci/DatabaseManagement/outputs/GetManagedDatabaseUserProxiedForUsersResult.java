// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseUserProxiedForUsersFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseUserProxiedForUsersResult {
    private @Nullable List<GetManagedDatabaseUserProxiedForUsersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String managedDatabaseId;
    /**
     * @return The name of a proxy user or the name of the client user.
     * 
     */
    private @Nullable String name;
    /**
     * @return The list of proxied_for_user_collection.
     * 
     */
    private List<GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection> proxiedForUserCollections;
    private String userName;

    private GetManagedDatabaseUserProxiedForUsersResult() {}
    public List<GetManagedDatabaseUserProxiedForUsersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The name of a proxy user or the name of the client user.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The list of proxied_for_user_collection.
     * 
     */
    public List<GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection> proxiedForUserCollections() {
        return this.proxiedForUserCollections;
    }
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUserProxiedForUsersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetManagedDatabaseUserProxiedForUsersFilter> filters;
        private String id;
        private String managedDatabaseId;
        private @Nullable String name;
        private List<GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection> proxiedForUserCollections;
        private String userName;
        public Builder() {}
        public Builder(GetManagedDatabaseUserProxiedForUsersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.name = defaults.name;
    	      this.proxiedForUserCollections = defaults.proxiedForUserCollections;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedDatabaseUserProxiedForUsersFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabaseUserProxiedForUsersFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder proxiedForUserCollections(List<GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection> proxiedForUserCollections) {
            this.proxiedForUserCollections = Objects.requireNonNull(proxiedForUserCollections);
            return this;
        }
        public Builder proxiedForUserCollections(GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection... proxiedForUserCollections) {
            return proxiedForUserCollections(List.of(proxiedForUserCollections));
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }
        public GetManagedDatabaseUserProxiedForUsersResult build() {
            final var _resultValue = new GetManagedDatabaseUserProxiedForUsersResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.name = name;
            _resultValue.proxiedForUserCollections = proxiedForUserCollections;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
