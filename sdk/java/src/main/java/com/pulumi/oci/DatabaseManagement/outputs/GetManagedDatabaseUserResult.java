// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseUserResult {
    /**
     * @return In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
     * 
     */
    private String allShared;
    /**
     * @return The authentication mechanism for the user.
     * 
     */
    private String authentication;
    /**
     * @return Indicates whether a given user is common(Y) or local(N).
     * 
     */
    private String common;
    /**
     * @return The initial resource consumer group for the User.
     * 
     */
    private String consumerGroup;
    /**
     * @return The default collation for the user schema.
     * 
     */
    private String defaultCollation;
    /**
     * @return The default tablespace for data.
     * 
     */
    private String defaultTablespace;
    /**
     * @return Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
     * 
     */
    private String editionsEnabled;
    /**
     * @return The external name of the user.
     * 
     */
    private String externalName;
    /**
     * @return In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
     * 
     */
    private String externalShared;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
     * 
     */
    private String implicit;
    /**
     * @return Indicates whether the user definition is inherited from another container (YES) or not (NO).
     * 
     */
    private String inherited;
    /**
     * @return The default local temporary tablespace for the user.
     * 
     */
    private String localTempTablespace;
    private String managedDatabaseId;
    /**
     * @return The name of the User.
     * 
     */
    private String name;
    private @Nullable String opcNamedCredentialId;
    /**
     * @return Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
     * 
     */
    private String oracleMaintained;
    /**
     * @return The list of existing versions of the password hashes (also known as &#34;verifiers&#34;) for the account.
     * 
     */
    private String passwordVersions;
    /**
     * @return The profile name of the user.
     * 
     */
    private String profile;
    /**
     * @return Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the &#34;connect through&#34; privilege for this account).
     * 
     */
    private String proxyConnect;
    /**
     * @return The status of the user account.
     * 
     */
    private String status;
    /**
     * @return The name of the default tablespace for temporary tables or the name of a tablespace group.
     * 
     */
    private String tempTablespace;
    /**
     * @return The date and time the user was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time of the expiration of the user account.
     * 
     */
    private String timeExpiring;
    /**
     * @return The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
     * 
     */
    private String timeLastLogin;
    /**
     * @return The date the account was locked, if the status of the account is LOCKED.
     * 
     */
    private String timeLocked;
    /**
     * @return The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
     * 
     */
    private String timePasswordChanged;
    private String userName;

    private GetManagedDatabaseUserResult() {}
    /**
     * @return In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
     * 
     */
    public String allShared() {
        return this.allShared;
    }
    /**
     * @return The authentication mechanism for the user.
     * 
     */
    public String authentication() {
        return this.authentication;
    }
    /**
     * @return Indicates whether a given user is common(Y) or local(N).
     * 
     */
    public String common() {
        return this.common;
    }
    /**
     * @return The initial resource consumer group for the User.
     * 
     */
    public String consumerGroup() {
        return this.consumerGroup;
    }
    /**
     * @return The default collation for the user schema.
     * 
     */
    public String defaultCollation() {
        return this.defaultCollation;
    }
    /**
     * @return The default tablespace for data.
     * 
     */
    public String defaultTablespace() {
        return this.defaultTablespace;
    }
    /**
     * @return Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
     * 
     */
    public String editionsEnabled() {
        return this.editionsEnabled;
    }
    /**
     * @return The external name of the user.
     * 
     */
    public String externalName() {
        return this.externalName;
    }
    /**
     * @return In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
     * 
     */
    public String externalShared() {
        return this.externalShared;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
     * 
     */
    public String implicit() {
        return this.implicit;
    }
    /**
     * @return Indicates whether the user definition is inherited from another container (YES) or not (NO).
     * 
     */
    public String inherited() {
        return this.inherited;
    }
    /**
     * @return The default local temporary tablespace for the user.
     * 
     */
    public String localTempTablespace() {
        return this.localTempTablespace;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The name of the User.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> opcNamedCredentialId() {
        return Optional.ofNullable(this.opcNamedCredentialId);
    }
    /**
     * @return Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
     * 
     */
    public String oracleMaintained() {
        return this.oracleMaintained;
    }
    /**
     * @return The list of existing versions of the password hashes (also known as &#34;verifiers&#34;) for the account.
     * 
     */
    public String passwordVersions() {
        return this.passwordVersions;
    }
    /**
     * @return The profile name of the user.
     * 
     */
    public String profile() {
        return this.profile;
    }
    /**
     * @return Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the &#34;connect through&#34; privilege for this account).
     * 
     */
    public String proxyConnect() {
        return this.proxyConnect;
    }
    /**
     * @return The status of the user account.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The name of the default tablespace for temporary tables or the name of a tablespace group.
     * 
     */
    public String tempTablespace() {
        return this.tempTablespace;
    }
    /**
     * @return The date and time the user was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time of the expiration of the user account.
     * 
     */
    public String timeExpiring() {
        return this.timeExpiring;
    }
    /**
     * @return The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
     * 
     */
    public String timeLastLogin() {
        return this.timeLastLogin;
    }
    /**
     * @return The date the account was locked, if the status of the account is LOCKED.
     * 
     */
    public String timeLocked() {
        return this.timeLocked;
    }
    /**
     * @return The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
     * 
     */
    public String timePasswordChanged() {
        return this.timePasswordChanged;
    }
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allShared;
        private String authentication;
        private String common;
        private String consumerGroup;
        private String defaultCollation;
        private String defaultTablespace;
        private String editionsEnabled;
        private String externalName;
        private String externalShared;
        private String id;
        private String implicit;
        private String inherited;
        private String localTempTablespace;
        private String managedDatabaseId;
        private String name;
        private @Nullable String opcNamedCredentialId;
        private String oracleMaintained;
        private String passwordVersions;
        private String profile;
        private String proxyConnect;
        private String status;
        private String tempTablespace;
        private String timeCreated;
        private String timeExpiring;
        private String timeLastLogin;
        private String timeLocked;
        private String timePasswordChanged;
        private String userName;
        public Builder() {}
        public Builder(GetManagedDatabaseUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allShared = defaults.allShared;
    	      this.authentication = defaults.authentication;
    	      this.common = defaults.common;
    	      this.consumerGroup = defaults.consumerGroup;
    	      this.defaultCollation = defaults.defaultCollation;
    	      this.defaultTablespace = defaults.defaultTablespace;
    	      this.editionsEnabled = defaults.editionsEnabled;
    	      this.externalName = defaults.externalName;
    	      this.externalShared = defaults.externalShared;
    	      this.id = defaults.id;
    	      this.implicit = defaults.implicit;
    	      this.inherited = defaults.inherited;
    	      this.localTempTablespace = defaults.localTempTablespace;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.name = defaults.name;
    	      this.opcNamedCredentialId = defaults.opcNamedCredentialId;
    	      this.oracleMaintained = defaults.oracleMaintained;
    	      this.passwordVersions = defaults.passwordVersions;
    	      this.profile = defaults.profile;
    	      this.proxyConnect = defaults.proxyConnect;
    	      this.status = defaults.status;
    	      this.tempTablespace = defaults.tempTablespace;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpiring = defaults.timeExpiring;
    	      this.timeLastLogin = defaults.timeLastLogin;
    	      this.timeLocked = defaults.timeLocked;
    	      this.timePasswordChanged = defaults.timePasswordChanged;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder allShared(String allShared) {
            if (allShared == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "allShared");
            }
            this.allShared = allShared;
            return this;
        }
        @CustomType.Setter
        public Builder authentication(String authentication) {
            if (authentication == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "authentication");
            }
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder common(String common) {
            if (common == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "common");
            }
            this.common = common;
            return this;
        }
        @CustomType.Setter
        public Builder consumerGroup(String consumerGroup) {
            if (consumerGroup == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "consumerGroup");
            }
            this.consumerGroup = consumerGroup;
            return this;
        }
        @CustomType.Setter
        public Builder defaultCollation(String defaultCollation) {
            if (defaultCollation == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "defaultCollation");
            }
            this.defaultCollation = defaultCollation;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTablespace(String defaultTablespace) {
            if (defaultTablespace == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "defaultTablespace");
            }
            this.defaultTablespace = defaultTablespace;
            return this;
        }
        @CustomType.Setter
        public Builder editionsEnabled(String editionsEnabled) {
            if (editionsEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "editionsEnabled");
            }
            this.editionsEnabled = editionsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder externalName(String externalName) {
            if (externalName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "externalName");
            }
            this.externalName = externalName;
            return this;
        }
        @CustomType.Setter
        public Builder externalShared(String externalShared) {
            if (externalShared == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "externalShared");
            }
            this.externalShared = externalShared;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder implicit(String implicit) {
            if (implicit == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "implicit");
            }
            this.implicit = implicit;
            return this;
        }
        @CustomType.Setter
        public Builder inherited(String inherited) {
            if (inherited == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "inherited");
            }
            this.inherited = inherited;
            return this;
        }
        @CustomType.Setter
        public Builder localTempTablespace(String localTempTablespace) {
            if (localTempTablespace == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "localTempTablespace");
            }
            this.localTempTablespace = localTempTablespace;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder opcNamedCredentialId(@Nullable String opcNamedCredentialId) {

            this.opcNamedCredentialId = opcNamedCredentialId;
            return this;
        }
        @CustomType.Setter
        public Builder oracleMaintained(String oracleMaintained) {
            if (oracleMaintained == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "oracleMaintained");
            }
            this.oracleMaintained = oracleMaintained;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVersions(String passwordVersions) {
            if (passwordVersions == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "passwordVersions");
            }
            this.passwordVersions = passwordVersions;
            return this;
        }
        @CustomType.Setter
        public Builder profile(String profile) {
            if (profile == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "profile");
            }
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder proxyConnect(String proxyConnect) {
            if (proxyConnect == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "proxyConnect");
            }
            this.proxyConnect = proxyConnect;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tempTablespace(String tempTablespace) {
            if (tempTablespace == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "tempTablespace");
            }
            this.tempTablespace = tempTablespace;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpiring(String timeExpiring) {
            if (timeExpiring == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "timeExpiring");
            }
            this.timeExpiring = timeExpiring;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastLogin(String timeLastLogin) {
            if (timeLastLogin == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "timeLastLogin");
            }
            this.timeLastLogin = timeLastLogin;
            return this;
        }
        @CustomType.Setter
        public Builder timeLocked(String timeLocked) {
            if (timeLocked == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "timeLocked");
            }
            this.timeLocked = timeLocked;
            return this;
        }
        @CustomType.Setter
        public Builder timePasswordChanged(String timePasswordChanged) {
            if (timePasswordChanged == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "timePasswordChanged");
            }
            this.timePasswordChanged = timePasswordChanged;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseUserResult", "userName");
            }
            this.userName = userName;
            return this;
        }
        public GetManagedDatabaseUserResult build() {
            final var _resultValue = new GetManagedDatabaseUserResult();
            _resultValue.allShared = allShared;
            _resultValue.authentication = authentication;
            _resultValue.common = common;
            _resultValue.consumerGroup = consumerGroup;
            _resultValue.defaultCollation = defaultCollation;
            _resultValue.defaultTablespace = defaultTablespace;
            _resultValue.editionsEnabled = editionsEnabled;
            _resultValue.externalName = externalName;
            _resultValue.externalShared = externalShared;
            _resultValue.id = id;
            _resultValue.implicit = implicit;
            _resultValue.inherited = inherited;
            _resultValue.localTempTablespace = localTempTablespace;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.name = name;
            _resultValue.opcNamedCredentialId = opcNamedCredentialId;
            _resultValue.oracleMaintained = oracleMaintained;
            _resultValue.passwordVersions = passwordVersions;
            _resultValue.profile = profile;
            _resultValue.proxyConnect = proxyConnect;
            _resultValue.status = status;
            _resultValue.tempTablespace = tempTablespace;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeExpiring = timeExpiring;
            _resultValue.timeLastLogin = timeLastLogin;
            _resultValue.timeLocked = timeLocked;
            _resultValue.timePasswordChanged = timePasswordChanged;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
