// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseUserRolesRoleCollectionItem {
    /**
     * @return Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
     * 
     */
    private @Nullable String adminOption;
    /**
     * @return Indicates how the role was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    private @Nullable String common;
    /**
     * @return Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
     * 
     */
    private @Nullable String defaultRole;
    /**
     * @return Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
     * 
     */
    private @Nullable String delegateOption;
    /**
     * @return Indicates whether the granted role is inherited from another container (YES) or not (NO).
     * 
     */
    private @Nullable String inherited;
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    private @Nullable String name;

    private GetManagedDatabaseUserRolesRoleCollectionItem() {}
    /**
     * @return Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
     * 
     */
    public Optional<String> adminOption() {
        return Optional.ofNullable(this.adminOption);
    }
    /**
     * @return Indicates how the role was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
     * 
     */
    public Optional<String> common() {
        return Optional.ofNullable(this.common);
    }
    /**
     * @return Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
     * 
     */
    public Optional<String> defaultRole() {
        return Optional.ofNullable(this.defaultRole);
    }
    /**
     * @return Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
     * 
     */
    public Optional<String> delegateOption() {
        return Optional.ofNullable(this.delegateOption);
    }
    /**
     * @return Indicates whether the granted role is inherited from another container (YES) or not (NO).
     * 
     */
    public Optional<String> inherited() {
        return Optional.ofNullable(this.inherited);
    }
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUserRolesRoleCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminOption;
        private @Nullable String common;
        private @Nullable String defaultRole;
        private @Nullable String delegateOption;
        private @Nullable String inherited;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetManagedDatabaseUserRolesRoleCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminOption = defaults.adminOption;
    	      this.common = defaults.common;
    	      this.defaultRole = defaults.defaultRole;
    	      this.delegateOption = defaults.delegateOption;
    	      this.inherited = defaults.inherited;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder adminOption(@Nullable String adminOption) {
            this.adminOption = adminOption;
            return this;
        }
        @CustomType.Setter
        public Builder common(@Nullable String common) {
            this.common = common;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRole(@Nullable String defaultRole) {
            this.defaultRole = defaultRole;
            return this;
        }
        @CustomType.Setter
        public Builder delegateOption(@Nullable String delegateOption) {
            this.delegateOption = delegateOption;
            return this;
        }
        @CustomType.Setter
        public Builder inherited(@Nullable String inherited) {
            this.inherited = inherited;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public GetManagedDatabaseUserRolesRoleCollectionItem build() {
            final var o = new GetManagedDatabaseUserRolesRoleCollectionItem();
            o.adminOption = adminOption;
            o.common = common;
            o.defaultRole = defaultRole;
            o.delegateOption = delegateOption;
            o.inherited = inherited;
            o.name = name;
            return o;
        }
    }
}
