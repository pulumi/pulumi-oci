// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabaseUsersUserCollectionItem {
    /**
     * @return In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
     * 
     */
    private @Nullable String allShared;
    /**
     * @return The authentication mechanism for the user.
     * 
     */
    private @Nullable String authentication;
    /**
     * @return Indicates whether a given user is common(Y) or local(N).
     * 
     */
    private @Nullable String common;
    /**
     * @return The initial resource consumer group for the User.
     * 
     */
    private @Nullable String consumerGroup;
    /**
     * @return The default collation for the user schema.
     * 
     */
    private @Nullable String defaultCollation;
    /**
     * @return The default tablespace for data.
     * 
     */
    private @Nullable String defaultTablespace;
    /**
     * @return Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
     * 
     */
    private @Nullable String editionsEnabled;
    /**
     * @return The external name of the user.
     * 
     */
    private @Nullable String externalName;
    /**
     * @return In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
     * 
     */
    private @Nullable String externalShared;
    /**
     * @return Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
     * 
     */
    private @Nullable String implicit;
    /**
     * @return Indicates whether the user definition is inherited from another container (YES) or not (NO).
     * 
     */
    private @Nullable String inherited;
    /**
     * @return The default local temporary tablespace for the user.
     * 
     */
    private @Nullable String localTempTablespace;
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
     * 
     */
    private @Nullable String oracleMaintained;
    /**
     * @return The list of existing versions of the password hashes (also known as &#34;verifiers&#34;) for the account.
     * 
     */
    private @Nullable String passwordVersions;
    /**
     * @return The profile name of the user.
     * 
     */
    private @Nullable String profile;
    /**
     * @return Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the &#34;connect through&#34; privilege for this account).
     * 
     */
    private @Nullable String proxyConnect;
    /**
     * @return The status of the user account.
     * 
     */
    private @Nullable String status;
    /**
     * @return The name of the default tablespace for temporary tables or the name of a tablespace group.
     * 
     */
    private @Nullable String tempTablespace;
    /**
     * @return The date and time the user was created.
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return The date and time of the expiration of the user account.
     * 
     */
    private @Nullable String timeExpiring;
    /**
     * @return The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
     * 
     */
    private @Nullable String timeLastLogin;
    /**
     * @return The date the account was locked, if the status of the account is LOCKED.
     * 
     */
    private @Nullable String timeLocked;
    /**
     * @return The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
     * 
     */
    private @Nullable String timePasswordChanged;

    private GetManagedDatabaseUsersUserCollectionItem() {}
    /**
     * @return In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
     * 
     */
    public Optional<String> allShared() {
        return Optional.ofNullable(this.allShared);
    }
    /**
     * @return The authentication mechanism for the user.
     * 
     */
    public Optional<String> authentication() {
        return Optional.ofNullable(this.authentication);
    }
    /**
     * @return Indicates whether a given user is common(Y) or local(N).
     * 
     */
    public Optional<String> common() {
        return Optional.ofNullable(this.common);
    }
    /**
     * @return The initial resource consumer group for the User.
     * 
     */
    public Optional<String> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }
    /**
     * @return The default collation for the user schema.
     * 
     */
    public Optional<String> defaultCollation() {
        return Optional.ofNullable(this.defaultCollation);
    }
    /**
     * @return The default tablespace for data.
     * 
     */
    public Optional<String> defaultTablespace() {
        return Optional.ofNullable(this.defaultTablespace);
    }
    /**
     * @return Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
     * 
     */
    public Optional<String> editionsEnabled() {
        return Optional.ofNullable(this.editionsEnabled);
    }
    /**
     * @return The external name of the user.
     * 
     */
    public Optional<String> externalName() {
        return Optional.ofNullable(this.externalName);
    }
    /**
     * @return In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
     * 
     */
    public Optional<String> externalShared() {
        return Optional.ofNullable(this.externalShared);
    }
    /**
     * @return Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
     * 
     */
    public Optional<String> implicit() {
        return Optional.ofNullable(this.implicit);
    }
    /**
     * @return Indicates whether the user definition is inherited from another container (YES) or not (NO).
     * 
     */
    public Optional<String> inherited() {
        return Optional.ofNullable(this.inherited);
    }
    /**
     * @return The default local temporary tablespace for the user.
     * 
     */
    public Optional<String> localTempTablespace() {
        return Optional.ofNullable(this.localTempTablespace);
    }
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
     * 
     */
    public Optional<String> oracleMaintained() {
        return Optional.ofNullable(this.oracleMaintained);
    }
    /**
     * @return The list of existing versions of the password hashes (also known as &#34;verifiers&#34;) for the account.
     * 
     */
    public Optional<String> passwordVersions() {
        return Optional.ofNullable(this.passwordVersions);
    }
    /**
     * @return The profile name of the user.
     * 
     */
    public Optional<String> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the &#34;connect through&#34; privilege for this account).
     * 
     */
    public Optional<String> proxyConnect() {
        return Optional.ofNullable(this.proxyConnect);
    }
    /**
     * @return The status of the user account.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The name of the default tablespace for temporary tables or the name of a tablespace group.
     * 
     */
    public Optional<String> tempTablespace() {
        return Optional.ofNullable(this.tempTablespace);
    }
    /**
     * @return The date and time the user was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return The date and time of the expiration of the user account.
     * 
     */
    public Optional<String> timeExpiring() {
        return Optional.ofNullable(this.timeExpiring);
    }
    /**
     * @return The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
     * 
     */
    public Optional<String> timeLastLogin() {
        return Optional.ofNullable(this.timeLastLogin);
    }
    /**
     * @return The date the account was locked, if the status of the account is LOCKED.
     * 
     */
    public Optional<String> timeLocked() {
        return Optional.ofNullable(this.timeLocked);
    }
    /**
     * @return The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
     * 
     */
    public Optional<String> timePasswordChanged() {
        return Optional.ofNullable(this.timePasswordChanged);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseUsersUserCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allShared;
        private @Nullable String authentication;
        private @Nullable String common;
        private @Nullable String consumerGroup;
        private @Nullable String defaultCollation;
        private @Nullable String defaultTablespace;
        private @Nullable String editionsEnabled;
        private @Nullable String externalName;
        private @Nullable String externalShared;
        private @Nullable String implicit;
        private @Nullable String inherited;
        private @Nullable String localTempTablespace;
        private @Nullable String name;
        private @Nullable String oracleMaintained;
        private @Nullable String passwordVersions;
        private @Nullable String profile;
        private @Nullable String proxyConnect;
        private @Nullable String status;
        private @Nullable String tempTablespace;
        private @Nullable String timeCreated;
        private @Nullable String timeExpiring;
        private @Nullable String timeLastLogin;
        private @Nullable String timeLocked;
        private @Nullable String timePasswordChanged;
        public Builder() {}
        public Builder(GetManagedDatabaseUsersUserCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allShared = defaults.allShared;
    	      this.authentication = defaults.authentication;
    	      this.common = defaults.common;
    	      this.consumerGroup = defaults.consumerGroup;
    	      this.defaultCollation = defaults.defaultCollation;
    	      this.defaultTablespace = defaults.defaultTablespace;
    	      this.editionsEnabled = defaults.editionsEnabled;
    	      this.externalName = defaults.externalName;
    	      this.externalShared = defaults.externalShared;
    	      this.implicit = defaults.implicit;
    	      this.inherited = defaults.inherited;
    	      this.localTempTablespace = defaults.localTempTablespace;
    	      this.name = defaults.name;
    	      this.oracleMaintained = defaults.oracleMaintained;
    	      this.passwordVersions = defaults.passwordVersions;
    	      this.profile = defaults.profile;
    	      this.proxyConnect = defaults.proxyConnect;
    	      this.status = defaults.status;
    	      this.tempTablespace = defaults.tempTablespace;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeExpiring = defaults.timeExpiring;
    	      this.timeLastLogin = defaults.timeLastLogin;
    	      this.timeLocked = defaults.timeLocked;
    	      this.timePasswordChanged = defaults.timePasswordChanged;
        }

        @CustomType.Setter
        public Builder allShared(@Nullable String allShared) {
            this.allShared = allShared;
            return this;
        }
        @CustomType.Setter
        public Builder authentication(@Nullable String authentication) {
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder common(@Nullable String common) {
            this.common = common;
            return this;
        }
        @CustomType.Setter
        public Builder consumerGroup(@Nullable String consumerGroup) {
            this.consumerGroup = consumerGroup;
            return this;
        }
        @CustomType.Setter
        public Builder defaultCollation(@Nullable String defaultCollation) {
            this.defaultCollation = defaultCollation;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTablespace(@Nullable String defaultTablespace) {
            this.defaultTablespace = defaultTablespace;
            return this;
        }
        @CustomType.Setter
        public Builder editionsEnabled(@Nullable String editionsEnabled) {
            this.editionsEnabled = editionsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder externalName(@Nullable String externalName) {
            this.externalName = externalName;
            return this;
        }
        @CustomType.Setter
        public Builder externalShared(@Nullable String externalShared) {
            this.externalShared = externalShared;
            return this;
        }
        @CustomType.Setter
        public Builder implicit(@Nullable String implicit) {
            this.implicit = implicit;
            return this;
        }
        @CustomType.Setter
        public Builder inherited(@Nullable String inherited) {
            this.inherited = inherited;
            return this;
        }
        @CustomType.Setter
        public Builder localTempTablespace(@Nullable String localTempTablespace) {
            this.localTempTablespace = localTempTablespace;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder oracleMaintained(@Nullable String oracleMaintained) {
            this.oracleMaintained = oracleMaintained;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVersions(@Nullable String passwordVersions) {
            this.passwordVersions = passwordVersions;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable String profile) {
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder proxyConnect(@Nullable String proxyConnect) {
            this.proxyConnect = proxyConnect;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tempTablespace(@Nullable String tempTablespace) {
            this.tempTablespace = tempTablespace;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeExpiring(@Nullable String timeExpiring) {
            this.timeExpiring = timeExpiring;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastLogin(@Nullable String timeLastLogin) {
            this.timeLastLogin = timeLastLogin;
            return this;
        }
        @CustomType.Setter
        public Builder timeLocked(@Nullable String timeLocked) {
            this.timeLocked = timeLocked;
            return this;
        }
        @CustomType.Setter
        public Builder timePasswordChanged(@Nullable String timePasswordChanged) {
            this.timePasswordChanged = timePasswordChanged;
            return this;
        }
        public GetManagedDatabaseUsersUserCollectionItem build() {
            final var o = new GetManagedDatabaseUsersUserCollectionItem();
            o.allShared = allShared;
            o.authentication = authentication;
            o.common = common;
            o.consumerGroup = consumerGroup;
            o.defaultCollation = defaultCollation;
            o.defaultTablespace = defaultTablespace;
            o.editionsEnabled = editionsEnabled;
            o.externalName = externalName;
            o.externalShared = externalShared;
            o.implicit = implicit;
            o.inherited = inherited;
            o.localTempTablespace = localTempTablespace;
            o.name = name;
            o.oracleMaintained = oracleMaintained;
            o.passwordVersions = passwordVersions;
            o.profile = profile;
            o.proxyConnect = proxyConnect;
            o.status = status;
            o.tempTablespace = tempTablespace;
            o.timeCreated = timeCreated;
            o.timeExpiring = timeExpiring;
            o.timeLastLogin = timeLastLogin;
            o.timeLocked = timeLocked;
            o.timePasswordChanged = timePasswordChanged;
            return o;
        }
    }
}
