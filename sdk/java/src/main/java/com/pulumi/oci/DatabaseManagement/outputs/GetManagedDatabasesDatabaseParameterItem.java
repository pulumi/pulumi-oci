// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesDatabaseParameterItemAllowedValue;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabasesDatabaseParameterItem {
    /**
     * @return A list of allowed values for this parameter.
     * 
     */
    private @Nullable List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues;
    /**
     * @return The parameter category.
     * 
     */
    private @Nullable String category;
    /**
     * @return Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
     * 
     */
    private @Nullable String constraint;
    /**
     * @return The ID of the database container to which the data pertains. Possible values include:
     * 
     */
    private @Nullable Double containerId;
    /**
     * @return The description of the parameter.
     * 
     */
    private @Nullable String description;
    /**
     * @return The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
     * 
     */
    private @Nullable String displayValue;
    /**
     * @return Indicates whether Oracle adjusted the input value to a more suitable value.
     * 
     */
    private @Nullable Boolean isAdjusted;
    /**
     * @return Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
     * 
     */
    private @Nullable Boolean isBasic;
    /**
     * @return Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
     * 
     */
    private @Nullable Boolean isDefault;
    /**
     * @return Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
     * 
     */
    private @Nullable Boolean isDeprecated;
    /**
     * @return For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
     * 
     */
    private @Nullable Boolean isInstanceModifiable;
    /**
     * @return Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
     * 
     */
    private @Nullable String isModified;
    /**
     * @return Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
     * 
     */
    private @Nullable Boolean isPdbModifiable;
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
     * 
     */
    private @Nullable Boolean isSessionModifiable;
    /**
     * @return Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
     * 
     */
    private @Nullable Boolean isSpecified;
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
     * * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
     * * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
     * * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
     * 
     */
    private @Nullable String isSystemModifiable;
    /**
     * @return A filter to return all parameters that have the text given in their names.
     * 
     */
    private @Nullable String name;
    /**
     * @return The parameter number.
     * 
     */
    private @Nullable Double number;
    /**
     * @return The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
     * 
     */
    private @Nullable Double ordinal;
    /**
     * @return The database instance SID for which the parameter is defined.
     * 
     */
    private @Nullable String sid;
    /**
     * @return The parameter type.
     * 
     */
    private @Nullable String type;
    /**
     * @return The comments associated with the most recent update.
     * 
     */
    private @Nullable String updateComment;
    /**
     * @return The parameter value.
     * 
     */
    private @Nullable String value;

    private GetManagedDatabasesDatabaseParameterItem() {}
    /**
     * @return A list of allowed values for this parameter.
     * 
     */
    public List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues() {
        return this.allowedValues == null ? List.of() : this.allowedValues;
    }
    /**
     * @return The parameter category.
     * 
     */
    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }
    /**
     * @return Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
     * 
     */
    public Optional<String> constraint() {
        return Optional.ofNullable(this.constraint);
    }
    /**
     * @return The ID of the database container to which the data pertains. Possible values include:
     * 
     */
    public Optional<Double> containerId() {
        return Optional.ofNullable(this.containerId);
    }
    /**
     * @return The description of the parameter.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
     * 
     */
    public Optional<String> displayValue() {
        return Optional.ofNullable(this.displayValue);
    }
    /**
     * @return Indicates whether Oracle adjusted the input value to a more suitable value.
     * 
     */
    public Optional<Boolean> isAdjusted() {
        return Optional.ofNullable(this.isAdjusted);
    }
    /**
     * @return Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
     * 
     */
    public Optional<Boolean> isBasic() {
        return Optional.ofNullable(this.isBasic);
    }
    /**
     * @return Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
     * 
     */
    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }
    /**
     * @return Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
     * 
     */
    public Optional<Boolean> isDeprecated() {
        return Optional.ofNullable(this.isDeprecated);
    }
    /**
     * @return For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
     * 
     */
    public Optional<Boolean> isInstanceModifiable() {
        return Optional.ofNullable(this.isInstanceModifiable);
    }
    /**
     * @return Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
     * 
     */
    public Optional<String> isModified() {
        return Optional.ofNullable(this.isModified);
    }
    /**
     * @return Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
     * 
     */
    public Optional<Boolean> isPdbModifiable() {
        return Optional.ofNullable(this.isPdbModifiable);
    }
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
     * 
     */
    public Optional<Boolean> isSessionModifiable() {
        return Optional.ofNullable(this.isSessionModifiable);
    }
    /**
     * @return Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
     * 
     */
    public Optional<Boolean> isSpecified() {
        return Optional.ofNullable(this.isSpecified);
    }
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
     * * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
     * * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
     * * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
     * 
     */
    public Optional<String> isSystemModifiable() {
        return Optional.ofNullable(this.isSystemModifiable);
    }
    /**
     * @return A filter to return all parameters that have the text given in their names.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The parameter number.
     * 
     */
    public Optional<Double> number() {
        return Optional.ofNullable(this.number);
    }
    /**
     * @return The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
     * 
     */
    public Optional<Double> ordinal() {
        return Optional.ofNullable(this.ordinal);
    }
    /**
     * @return The database instance SID for which the parameter is defined.
     * 
     */
    public Optional<String> sid() {
        return Optional.ofNullable(this.sid);
    }
    /**
     * @return The parameter type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The comments associated with the most recent update.
     * 
     */
    public Optional<String> updateComment() {
        return Optional.ofNullable(this.updateComment);
    }
    /**
     * @return The parameter value.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesDatabaseParameterItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues;
        private @Nullable String category;
        private @Nullable String constraint;
        private @Nullable Double containerId;
        private @Nullable String description;
        private @Nullable String displayValue;
        private @Nullable Boolean isAdjusted;
        private @Nullable Boolean isBasic;
        private @Nullable Boolean isDefault;
        private @Nullable Boolean isDeprecated;
        private @Nullable Boolean isInstanceModifiable;
        private @Nullable String isModified;
        private @Nullable Boolean isPdbModifiable;
        private @Nullable Boolean isSessionModifiable;
        private @Nullable Boolean isSpecified;
        private @Nullable String isSystemModifiable;
        private @Nullable String name;
        private @Nullable Double number;
        private @Nullable Double ordinal;
        private @Nullable String sid;
        private @Nullable String type;
        private @Nullable String updateComment;
        private @Nullable String value;
        public Builder() {}
        public Builder(GetManagedDatabasesDatabaseParameterItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.category = defaults.category;
    	      this.constraint = defaults.constraint;
    	      this.containerId = defaults.containerId;
    	      this.description = defaults.description;
    	      this.displayValue = defaults.displayValue;
    	      this.isAdjusted = defaults.isAdjusted;
    	      this.isBasic = defaults.isBasic;
    	      this.isDefault = defaults.isDefault;
    	      this.isDeprecated = defaults.isDeprecated;
    	      this.isInstanceModifiable = defaults.isInstanceModifiable;
    	      this.isModified = defaults.isModified;
    	      this.isPdbModifiable = defaults.isPdbModifiable;
    	      this.isSessionModifiable = defaults.isSessionModifiable;
    	      this.isSpecified = defaults.isSpecified;
    	      this.isSystemModifiable = defaults.isSystemModifiable;
    	      this.name = defaults.name;
    	      this.number = defaults.number;
    	      this.ordinal = defaults.ordinal;
    	      this.sid = defaults.sid;
    	      this.type = defaults.type;
    	      this.updateComment = defaults.updateComment;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder allowedValues(@Nullable List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues) {
            this.allowedValues = allowedValues;
            return this;
        }
        public Builder allowedValues(GetManagedDatabasesDatabaseParameterItemAllowedValue... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }
        @CustomType.Setter
        public Builder category(@Nullable String category) {
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder constraint(@Nullable String constraint) {
            this.constraint = constraint;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(@Nullable Double containerId) {
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayValue(@Nullable String displayValue) {
            this.displayValue = displayValue;
            return this;
        }
        @CustomType.Setter
        public Builder isAdjusted(@Nullable Boolean isAdjusted) {
            this.isAdjusted = isAdjusted;
            return this;
        }
        @CustomType.Setter
        public Builder isBasic(@Nullable Boolean isBasic) {
            this.isBasic = isBasic;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(@Nullable Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder isDeprecated(@Nullable Boolean isDeprecated) {
            this.isDeprecated = isDeprecated;
            return this;
        }
        @CustomType.Setter
        public Builder isInstanceModifiable(@Nullable Boolean isInstanceModifiable) {
            this.isInstanceModifiable = isInstanceModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder isModified(@Nullable String isModified) {
            this.isModified = isModified;
            return this;
        }
        @CustomType.Setter
        public Builder isPdbModifiable(@Nullable Boolean isPdbModifiable) {
            this.isPdbModifiable = isPdbModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder isSessionModifiable(@Nullable Boolean isSessionModifiable) {
            this.isSessionModifiable = isSessionModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder isSpecified(@Nullable Boolean isSpecified) {
            this.isSpecified = isSpecified;
            return this;
        }
        @CustomType.Setter
        public Builder isSystemModifiable(@Nullable String isSystemModifiable) {
            this.isSystemModifiable = isSystemModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder number(@Nullable Double number) {
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder ordinal(@Nullable Double ordinal) {
            this.ordinal = ordinal;
            return this;
        }
        @CustomType.Setter
        public Builder sid(@Nullable String sid) {
            this.sid = sid;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updateComment(@Nullable String updateComment) {
            this.updateComment = updateComment;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }
        public GetManagedDatabasesDatabaseParameterItem build() {
            final var o = new GetManagedDatabasesDatabaseParameterItem();
            o.allowedValues = allowedValues;
            o.category = category;
            o.constraint = constraint;
            o.containerId = containerId;
            o.description = description;
            o.displayValue = displayValue;
            o.isAdjusted = isAdjusted;
            o.isBasic = isBasic;
            o.isDefault = isDefault;
            o.isDeprecated = isDeprecated;
            o.isInstanceModifiable = isInstanceModifiable;
            o.isModified = isModified;
            o.isPdbModifiable = isPdbModifiable;
            o.isSessionModifiable = isSessionModifiable;
            o.isSpecified = isSpecified;
            o.isSystemModifiable = isSystemModifiable;
            o.name = name;
            o.number = number;
            o.ordinal = ordinal;
            o.sid = sid;
            o.type = type;
            o.updateComment = updateComment;
            o.value = value;
            return o;
        }
    }
}
