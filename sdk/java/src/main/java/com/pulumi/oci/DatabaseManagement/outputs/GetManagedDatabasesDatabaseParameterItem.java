// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesDatabaseParameterItemAllowedValue;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedDatabasesDatabaseParameterItem {
    /**
     * @return A list of allowed values for this parameter.
     * 
     */
    private List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues;
    /**
     * @return The parameter category.
     * 
     */
    private String category;
    /**
     * @return Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
     * 
     */
    private String constraint;
    /**
     * @return The ID of the database container to which the data pertains. Possible values include:
     * 
     */
    private Double containerId;
    /**
     * @return The description of the parameter.
     * 
     */
    private String description;
    /**
     * @return The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
     * 
     */
    private String displayValue;
    /**
     * @return Indicates whether Oracle adjusted the input value to a more suitable value.
     * 
     */
    private Boolean isAdjusted;
    /**
     * @return Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
     * 
     */
    private Boolean isBasic;
    /**
     * @return Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
     * 
     */
    private Boolean isDefault;
    /**
     * @return Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
     * 
     */
    private Boolean isDeprecated;
    /**
     * @return For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
     * 
     */
    private Boolean isInstanceModifiable;
    /**
     * @return Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
     * 
     */
    private String isModified;
    /**
     * @return Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
     * 
     */
    private Boolean isPdbModifiable;
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
     * 
     */
    private Boolean isSessionModifiable;
    /**
     * @return Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
     * 
     */
    private Boolean isSpecified;
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
     * * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
     * * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
     * * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
     * 
     */
    private String isSystemModifiable;
    /**
     * @return A filter to return all parameters that have the text given in their names.
     * 
     */
    private String name;
    /**
     * @return The parameter number.
     * 
     */
    private Double number;
    /**
     * @return The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
     * 
     */
    private Double ordinal;
    /**
     * @return The database instance SID for which the parameter is defined.
     * 
     */
    private String sid;
    /**
     * @return The parameter type.
     * 
     */
    private String type;
    /**
     * @return The comments associated with the most recent update.
     * 
     */
    private String updateComment;
    /**
     * @return The parameter value.
     * 
     */
    private String value;

    private GetManagedDatabasesDatabaseParameterItem() {}
    /**
     * @return A list of allowed values for this parameter.
     * 
     */
    public List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues() {
        return this.allowedValues;
    }
    /**
     * @return The parameter category.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
     * 
     */
    public String constraint() {
        return this.constraint;
    }
    /**
     * @return The ID of the database container to which the data pertains. Possible values include:
     * 
     */
    public Double containerId() {
        return this.containerId;
    }
    /**
     * @return The description of the parameter.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
     * 
     */
    public String displayValue() {
        return this.displayValue;
    }
    /**
     * @return Indicates whether Oracle adjusted the input value to a more suitable value.
     * 
     */
    public Boolean isAdjusted() {
        return this.isAdjusted;
    }
    /**
     * @return Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
     * 
     */
    public Boolean isBasic() {
        return this.isBasic;
    }
    /**
     * @return Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
     * 
     */
    public Boolean isDeprecated() {
        return this.isDeprecated;
    }
    /**
     * @return For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
     * 
     */
    public Boolean isInstanceModifiable() {
        return this.isInstanceModifiable;
    }
    /**
     * @return Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
     * 
     */
    public String isModified() {
        return this.isModified;
    }
    /**
     * @return Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
     * 
     */
    public Boolean isPdbModifiable() {
        return this.isPdbModifiable;
    }
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
     * 
     */
    public Boolean isSessionModifiable() {
        return this.isSessionModifiable;
    }
    /**
     * @return Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
     * 
     */
    public Boolean isSpecified() {
        return this.isSpecified;
    }
    /**
     * @return Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
     * * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
     * * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
     * * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
     * 
     */
    public String isSystemModifiable() {
        return this.isSystemModifiable;
    }
    /**
     * @return A filter to return all parameters that have the text given in their names.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The parameter number.
     * 
     */
    public Double number() {
        return this.number;
    }
    /**
     * @return The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
     * 
     */
    public Double ordinal() {
        return this.ordinal;
    }
    /**
     * @return The database instance SID for which the parameter is defined.
     * 
     */
    public String sid() {
        return this.sid;
    }
    /**
     * @return The parameter type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The comments associated with the most recent update.
     * 
     */
    public String updateComment() {
        return this.updateComment;
    }
    /**
     * @return The parameter value.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesDatabaseParameterItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues;
        private String category;
        private String constraint;
        private Double containerId;
        private String description;
        private String displayValue;
        private Boolean isAdjusted;
        private Boolean isBasic;
        private Boolean isDefault;
        private Boolean isDeprecated;
        private Boolean isInstanceModifiable;
        private String isModified;
        private Boolean isPdbModifiable;
        private Boolean isSessionModifiable;
        private Boolean isSpecified;
        private String isSystemModifiable;
        private String name;
        private Double number;
        private Double ordinal;
        private String sid;
        private String type;
        private String updateComment;
        private String value;
        public Builder() {}
        public Builder(GetManagedDatabasesDatabaseParameterItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.category = defaults.category;
    	      this.constraint = defaults.constraint;
    	      this.containerId = defaults.containerId;
    	      this.description = defaults.description;
    	      this.displayValue = defaults.displayValue;
    	      this.isAdjusted = defaults.isAdjusted;
    	      this.isBasic = defaults.isBasic;
    	      this.isDefault = defaults.isDefault;
    	      this.isDeprecated = defaults.isDeprecated;
    	      this.isInstanceModifiable = defaults.isInstanceModifiable;
    	      this.isModified = defaults.isModified;
    	      this.isPdbModifiable = defaults.isPdbModifiable;
    	      this.isSessionModifiable = defaults.isSessionModifiable;
    	      this.isSpecified = defaults.isSpecified;
    	      this.isSystemModifiable = defaults.isSystemModifiable;
    	      this.name = defaults.name;
    	      this.number = defaults.number;
    	      this.ordinal = defaults.ordinal;
    	      this.sid = defaults.sid;
    	      this.type = defaults.type;
    	      this.updateComment = defaults.updateComment;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder allowedValues(List<GetManagedDatabasesDatabaseParameterItemAllowedValue> allowedValues) {
            if (allowedValues == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "allowedValues");
            }
            this.allowedValues = allowedValues;
            return this;
        }
        public Builder allowedValues(GetManagedDatabasesDatabaseParameterItemAllowedValue... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }
        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder constraint(String constraint) {
            if (constraint == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "constraint");
            }
            this.constraint = constraint;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(Double containerId) {
            if (containerId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "containerId");
            }
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayValue(String displayValue) {
            if (displayValue == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "displayValue");
            }
            this.displayValue = displayValue;
            return this;
        }
        @CustomType.Setter
        public Builder isAdjusted(Boolean isAdjusted) {
            if (isAdjusted == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isAdjusted");
            }
            this.isAdjusted = isAdjusted;
            return this;
        }
        @CustomType.Setter
        public Builder isBasic(Boolean isBasic) {
            if (isBasic == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isBasic");
            }
            this.isBasic = isBasic;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder isDeprecated(Boolean isDeprecated) {
            if (isDeprecated == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isDeprecated");
            }
            this.isDeprecated = isDeprecated;
            return this;
        }
        @CustomType.Setter
        public Builder isInstanceModifiable(Boolean isInstanceModifiable) {
            if (isInstanceModifiable == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isInstanceModifiable");
            }
            this.isInstanceModifiable = isInstanceModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder isModified(String isModified) {
            if (isModified == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isModified");
            }
            this.isModified = isModified;
            return this;
        }
        @CustomType.Setter
        public Builder isPdbModifiable(Boolean isPdbModifiable) {
            if (isPdbModifiable == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isPdbModifiable");
            }
            this.isPdbModifiable = isPdbModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder isSessionModifiable(Boolean isSessionModifiable) {
            if (isSessionModifiable == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isSessionModifiable");
            }
            this.isSessionModifiable = isSessionModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder isSpecified(Boolean isSpecified) {
            if (isSpecified == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isSpecified");
            }
            this.isSpecified = isSpecified;
            return this;
        }
        @CustomType.Setter
        public Builder isSystemModifiable(String isSystemModifiable) {
            if (isSystemModifiable == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "isSystemModifiable");
            }
            this.isSystemModifiable = isSystemModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder number(Double number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder ordinal(Double ordinal) {
            if (ordinal == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "ordinal");
            }
            this.ordinal = ordinal;
            return this;
        }
        @CustomType.Setter
        public Builder sid(String sid) {
            if (sid == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "sid");
            }
            this.sid = sid;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updateComment(String updateComment) {
            if (updateComment == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "updateComment");
            }
            this.updateComment = updateComment;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParameterItem", "value");
            }
            this.value = value;
            return this;
        }
        public GetManagedDatabasesDatabaseParameterItem build() {
            final var _resultValue = new GetManagedDatabasesDatabaseParameterItem();
            _resultValue.allowedValues = allowedValues;
            _resultValue.category = category;
            _resultValue.constraint = constraint;
            _resultValue.containerId = containerId;
            _resultValue.description = description;
            _resultValue.displayValue = displayValue;
            _resultValue.isAdjusted = isAdjusted;
            _resultValue.isBasic = isBasic;
            _resultValue.isDefault = isDefault;
            _resultValue.isDeprecated = isDeprecated;
            _resultValue.isInstanceModifiable = isInstanceModifiable;
            _resultValue.isModified = isModified;
            _resultValue.isPdbModifiable = isPdbModifiable;
            _resultValue.isSessionModifiable = isSessionModifiable;
            _resultValue.isSpecified = isSpecified;
            _resultValue.isSystemModifiable = isSystemModifiable;
            _resultValue.name = name;
            _resultValue.number = number;
            _resultValue.ordinal = ordinal;
            _resultValue.sid = sid;
            _resultValue.type = type;
            _resultValue.updateComment = updateComment;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
