// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesDatabaseParameterItem;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabasesDatabaseParameterResult {
    /**
     * @return The name of the Managed Database.
     * 
     */
    private @Nullable String databaseName;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    private @Nullable String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return The Oracle Database version.
     * 
     */
    private @Nullable String databaseVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private @Nullable Boolean isAllowedValuesIncluded;
    /**
     * @return An array of DatabaseParameterSummary objects.
     * 
     */
    private @Nullable List<GetManagedDatabasesDatabaseParameterItem> items;
    private String managedDatabaseId;
    /**
     * @return The parameter name.
     * 
     */
    private @Nullable String name;
    private @Nullable String source;

    private GetManagedDatabasesDatabaseParameterResult() {}
    /**
     * @return The name of the Managed Database.
     * 
     */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    public Optional<String> databaseSubType() {
        return Optional.ofNullable(this.databaseSubType);
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public Optional<String> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Boolean> isAllowedValuesIncluded() {
        return Optional.ofNullable(this.isAllowedValuesIncluded);
    }
    /**
     * @return An array of DatabaseParameterSummary objects.
     * 
     */
    public List<GetManagedDatabasesDatabaseParameterItem> items() {
        return this.items == null ? List.of() : this.items;
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The parameter name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesDatabaseParameterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String databaseName;
        private @Nullable String databaseSubType;
        private @Nullable String databaseType;
        private @Nullable String databaseVersion;
        private @Nullable String id;
        private @Nullable Boolean isAllowedValuesIncluded;
        private @Nullable List<GetManagedDatabasesDatabaseParameterItem> items;
        private String managedDatabaseId;
        private @Nullable String name;
        private @Nullable String source;
        public Builder() {}
        public Builder(GetManagedDatabasesDatabaseParameterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.id = defaults.id;
    	      this.isAllowedValuesIncluded = defaults.isAllowedValuesIncluded;
    	      this.items = defaults.items;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.name = defaults.name;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(@Nullable String databaseSubType) {
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(@Nullable String databaseVersion) {
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAllowedValuesIncluded(@Nullable Boolean isAllowedValuesIncluded) {
            this.isAllowedValuesIncluded = isAllowedValuesIncluded;
            return this;
        }
        @CustomType.Setter
        public Builder items(@Nullable List<GetManagedDatabasesDatabaseParameterItem> items) {
            this.items = items;
            return this;
        }
        public Builder items(GetManagedDatabasesDatabaseParameterItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            this.managedDatabaseId = Objects.requireNonNull(managedDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        public GetManagedDatabasesDatabaseParameterResult build() {
            final var o = new GetManagedDatabasesDatabaseParameterResult();
            o.databaseName = databaseName;
            o.databaseSubType = databaseSubType;
            o.databaseType = databaseType;
            o.databaseVersion = databaseVersion;
            o.id = id;
            o.isAllowedValuesIncluded = isAllowedValuesIncluded;
            o.items = items;
            o.managedDatabaseId = managedDatabaseId;
            o.name = name;
            o.source = source;
            return o;
        }
    }
}
