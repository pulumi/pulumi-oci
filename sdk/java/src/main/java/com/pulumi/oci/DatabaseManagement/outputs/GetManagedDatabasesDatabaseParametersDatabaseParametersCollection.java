// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedDatabasesDatabaseParametersDatabaseParametersCollection {
    /**
     * @return The name of the Managed Database.
     * 
     */
    private String databaseName;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    private String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private String databaseType;
    /**
     * @return The Oracle Database version.
     * 
     */
    private String databaseVersion;
    /**
     * @return An array of DatabaseParameterSummary objects.
     * 
     */
    private List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem> items;

    private GetManagedDatabasesDatabaseParametersDatabaseParametersCollection() {}
    /**
     * @return The name of the Managed Database.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
     * 
     */
    public String databaseSubType() {
        return this.databaseSubType;
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The Oracle Database version.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return An array of DatabaseParameterSummary objects.
     * 
     */
    public List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem> items() {
        return this.items;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesDatabaseParametersDatabaseParametersCollection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String databaseName;
        private String databaseSubType;
        private String databaseType;
        private String databaseVersion;
        private List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem> items;
        public Builder() {}
        public Builder(GetManagedDatabasesDatabaseParametersDatabaseParametersCollection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.items = defaults.items;
        }

        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersDatabaseParametersCollection", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(String databaseSubType) {
            if (databaseSubType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersDatabaseParametersCollection", "databaseSubType");
            }
            this.databaseSubType = databaseSubType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersDatabaseParametersCollection", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            if (databaseVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersDatabaseParametersCollection", "databaseVersion");
            }
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersDatabaseParametersCollection", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem... items) {
            return items(List.of(items));
        }
        public GetManagedDatabasesDatabaseParametersDatabaseParametersCollection build() {
            final var _resultValue = new GetManagedDatabasesDatabaseParametersDatabaseParametersCollection();
            _resultValue.databaseName = databaseName;
            _resultValue.databaseSubType = databaseSubType;
            _resultValue.databaseType = databaseType;
            _resultValue.databaseVersion = databaseVersion;
            _resultValue.items = items;
            return _resultValue;
        }
    }
}
