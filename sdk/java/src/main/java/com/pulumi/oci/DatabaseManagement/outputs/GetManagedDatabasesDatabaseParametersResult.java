// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollection;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesDatabaseParametersFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabasesDatabaseParametersResult {
    /**
     * @return The list of database_parameters_collection.
     * 
     */
    private List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollection> databaseParametersCollections;
    private @Nullable List<GetManagedDatabasesDatabaseParametersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean isAllowedValuesIncluded;
    private String managedDatabaseId;
    /**
     * @return The parameter name.
     * 
     */
    private @Nullable String name;
    private @Nullable String source;

    private GetManagedDatabasesDatabaseParametersResult() {}
    /**
     * @return The list of database_parameters_collection.
     * 
     */
    public List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollection> databaseParametersCollections() {
        return this.databaseParametersCollections;
    }
    public List<GetManagedDatabasesDatabaseParametersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> isAllowedValuesIncluded() {
        return Optional.ofNullable(this.isAllowedValuesIncluded);
    }
    public String managedDatabaseId() {
        return this.managedDatabaseId;
    }
    /**
     * @return The parameter name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesDatabaseParametersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollection> databaseParametersCollections;
        private @Nullable List<GetManagedDatabasesDatabaseParametersFilter> filters;
        private String id;
        private @Nullable Boolean isAllowedValuesIncluded;
        private String managedDatabaseId;
        private @Nullable String name;
        private @Nullable String source;
        public Builder() {}
        public Builder(GetManagedDatabasesDatabaseParametersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseParametersCollections = defaults.databaseParametersCollections;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.isAllowedValuesIncluded = defaults.isAllowedValuesIncluded;
    	      this.managedDatabaseId = defaults.managedDatabaseId;
    	      this.name = defaults.name;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder databaseParametersCollections(List<GetManagedDatabasesDatabaseParametersDatabaseParametersCollection> databaseParametersCollections) {
            if (databaseParametersCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersResult", "databaseParametersCollections");
            }
            this.databaseParametersCollections = databaseParametersCollections;
            return this;
        }
        public Builder databaseParametersCollections(GetManagedDatabasesDatabaseParametersDatabaseParametersCollection... databaseParametersCollections) {
            return databaseParametersCollections(List.of(databaseParametersCollections));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedDatabasesDatabaseParametersFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabasesDatabaseParametersFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAllowedValuesIncluded(@Nullable Boolean isAllowedValuesIncluded) {

            this.isAllowedValuesIncluded = isAllowedValuesIncluded;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseId(String managedDatabaseId) {
            if (managedDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasesDatabaseParametersResult", "managedDatabaseId");
            }
            this.managedDatabaseId = managedDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {

            this.source = source;
            return this;
        }
        public GetManagedDatabasesDatabaseParametersResult build() {
            final var _resultValue = new GetManagedDatabasesDatabaseParametersResult();
            _resultValue.databaseParametersCollections = databaseParametersCollections;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.isAllowedValuesIncluded = isAllowedValuesIncluded;
            _resultValue.managedDatabaseId = managedDatabaseId;
            _resultValue.name = name;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
