// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagedDatabasesManagedDatabaseCollectionItem {
    /**
     * @return The additional details specific to a type of database defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
     * 
     */
    private String databaseStatus;
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    private String databaseSubType;
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    private String databaseType;
    /**
     * @return A filter to return Managed Databases of the specified deployment type.
     * 
     */
    private String deploymentType;
    /**
     * @return The identifier of the resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    private Boolean isCluster;
    /**
     * @return A list of Managed Database Groups that the Managed Database belongs to.
     * 
     */
    private List<GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup> managedDatabaseGroups;
    /**
     * @return A filter to return Managed Databases with the specified management option.
     * 
     */
    private String managementOption;
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    private String name;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
     * 
     */
    private String parentContainerId;
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    private String workloadType;

    private GetManagedDatabasesManagedDatabaseCollectionItem() {}
    /**
     * @return The additional details specific to a type of database defined in `{&#34;key&#34;: &#34;value&#34;}` format. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
     * 
     */
    public String databaseStatus() {
        return this.databaseStatus;
    }
    /**
     * @return The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
     * 
     */
    public String databaseSubType() {
        return this.databaseSubType;
    }
    /**
     * @return The type of Oracle Database installation.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return A filter to return Managed Databases of the specified deployment type.
     * 
     */
    public String deploymentType() {
        return this.deploymentType;
    }
    /**
     * @return The identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the Oracle Database is part of a cluster.
     * 
     */
    public Boolean isCluster() {
        return this.isCluster;
    }
    /**
     * @return A list of Managed Database Groups that the Managed Database belongs to.
     * 
     */
    public List<GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup> managedDatabaseGroups() {
        return this.managedDatabaseGroups;
    }
    /**
     * @return A filter to return Managed Databases with the specified management option.
     * 
     */
    public String managementOption() {
        return this.managementOption;
    }
    /**
     * @return A filter to return only resources that match the entire name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
     * 
     */
    public String parentContainerId() {
        return this.parentContainerId;
    }
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The workload type of the Autonomous Database.
     * 
     */
    public String workloadType() {
        return this.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesManagedDatabaseCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalDetails;
        private String compartmentId;
        private String databaseStatus;
        private String databaseSubType;
        private String databaseType;
        private String deploymentType;
        private String id;
        private Boolean isCluster;
        private List<GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup> managedDatabaseGroups;
        private String managementOption;
        private String name;
        private String parentContainerId;
        private String timeCreated;
        private String workloadType;
        public Builder() {}
        public Builder(GetManagedDatabasesManagedDatabaseCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseStatus = defaults.databaseStatus;
    	      this.databaseSubType = defaults.databaseSubType;
    	      this.databaseType = defaults.databaseType;
    	      this.deploymentType = defaults.deploymentType;
    	      this.id = defaults.id;
    	      this.isCluster = defaults.isCluster;
    	      this.managedDatabaseGroups = defaults.managedDatabaseGroups;
    	      this.managementOption = defaults.managementOption;
    	      this.name = defaults.name;
    	      this.parentContainerId = defaults.parentContainerId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder additionalDetails(Map<String,Object> additionalDetails) {
            this.additionalDetails = Objects.requireNonNull(additionalDetails);
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder databaseStatus(String databaseStatus) {
            this.databaseStatus = Objects.requireNonNull(databaseStatus);
            return this;
        }
        @CustomType.Setter
        public Builder databaseSubType(String databaseSubType) {
            this.databaseSubType = Objects.requireNonNull(databaseSubType);
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            this.databaseType = Objects.requireNonNull(databaseType);
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(String deploymentType) {
            this.deploymentType = Objects.requireNonNull(deploymentType);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isCluster(Boolean isCluster) {
            this.isCluster = Objects.requireNonNull(isCluster);
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseGroups(List<GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup> managedDatabaseGroups) {
            this.managedDatabaseGroups = Objects.requireNonNull(managedDatabaseGroups);
            return this;
        }
        public Builder managedDatabaseGroups(GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup... managedDatabaseGroups) {
            return managedDatabaseGroups(List.of(managedDatabaseGroups));
        }
        @CustomType.Setter
        public Builder managementOption(String managementOption) {
            this.managementOption = Objects.requireNonNull(managementOption);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder parentContainerId(String parentContainerId) {
            this.parentContainerId = Objects.requireNonNull(parentContainerId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(String workloadType) {
            this.workloadType = Objects.requireNonNull(workloadType);
            return this;
        }
        public GetManagedDatabasesManagedDatabaseCollectionItem build() {
            final var o = new GetManagedDatabasesManagedDatabaseCollectionItem();
            o.additionalDetails = additionalDetails;
            o.compartmentId = compartmentId;
            o.databaseStatus = databaseStatus;
            o.databaseSubType = databaseSubType;
            o.databaseType = databaseType;
            o.deploymentType = deploymentType;
            o.id = id;
            o.isCluster = isCluster;
            o.managedDatabaseGroups = managedDatabaseGroups;
            o.managementOption = managementOption;
            o.name = name;
            o.parentContainerId = parentContainerId;
            o.timeCreated = timeCreated;
            o.workloadType = workloadType;
            return o;
        }
    }
}
