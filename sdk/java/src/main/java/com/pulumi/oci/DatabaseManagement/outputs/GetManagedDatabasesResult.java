// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedDatabasesManagedDatabaseCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedDatabasesResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
     * 
     */
    private String compartmentId;
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    private @Nullable String deploymentType;
    private @Nullable String externalExadataInfrastructureId;
    private @Nullable List<GetManagedDatabasesFilter> filters;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database Group.
     * 
     */
    private @Nullable String id;
    /**
     * @return The list of managed_database_collection.
     * 
     */
    private List<GetManagedDatabasesManagedDatabaseCollection> managedDatabaseCollections;
    /**
     * @return The management option used when enabling Database Management.
     * 
     */
    private @Nullable String managementOption;
    /**
     * @return The name of the Managed Database.
     * 
     */
    private @Nullable String name;

    private GetManagedDatabasesResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The infrastructure used to deploy the Oracle Database.
     * 
     */
    public Optional<String> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }
    public Optional<String> externalExadataInfrastructureId() {
        return Optional.ofNullable(this.externalExadataInfrastructureId);
    }
    public List<GetManagedDatabasesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database Group.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of managed_database_collection.
     * 
     */
    public List<GetManagedDatabasesManagedDatabaseCollection> managedDatabaseCollections() {
        return this.managedDatabaseCollections;
    }
    /**
     * @return The management option used when enabling Database Management.
     * 
     */
    public Optional<String> managementOption() {
        return Optional.ofNullable(this.managementOption);
    }
    /**
     * @return The name of the Managed Database.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable String deploymentType;
        private @Nullable String externalExadataInfrastructureId;
        private @Nullable List<GetManagedDatabasesFilter> filters;
        private @Nullable String id;
        private List<GetManagedDatabasesManagedDatabaseCollection> managedDatabaseCollections;
        private @Nullable String managementOption;
        private @Nullable String name;
        public Builder() {}
        public Builder(GetManagedDatabasesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.deploymentType = defaults.deploymentType;
    	      this.externalExadataInfrastructureId = defaults.externalExadataInfrastructureId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedDatabaseCollections = defaults.managedDatabaseCollections;
    	      this.managementOption = defaults.managementOption;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder deploymentType(@Nullable String deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }
        @CustomType.Setter
        public Builder externalExadataInfrastructureId(@Nullable String externalExadataInfrastructureId) {
            this.externalExadataInfrastructureId = externalExadataInfrastructureId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedDatabasesFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedDatabasesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedDatabaseCollections(List<GetManagedDatabasesManagedDatabaseCollection> managedDatabaseCollections) {
            this.managedDatabaseCollections = Objects.requireNonNull(managedDatabaseCollections);
            return this;
        }
        public Builder managedDatabaseCollections(GetManagedDatabasesManagedDatabaseCollection... managedDatabaseCollections) {
            return managedDatabaseCollections(List.of(managedDatabaseCollections));
        }
        @CustomType.Setter
        public Builder managementOption(@Nullable String managementOption) {
            this.managementOption = managementOption;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public GetManagedDatabasesResult build() {
            final var o = new GetManagedDatabasesResult();
            o.compartmentId = compartmentId;
            o.deploymentType = deploymentType;
            o.externalExadataInfrastructureId = externalExadataInfrastructureId;
            o.filters = filters;
            o.id = id;
            o.managedDatabaseCollections = managedDatabaseCollections;
            o.managementOption = managementOption;
            o.name = name;
            return o;
        }
    }
}
