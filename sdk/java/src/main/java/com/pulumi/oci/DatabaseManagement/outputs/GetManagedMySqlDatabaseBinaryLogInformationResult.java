// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseBinaryLogInformationResult {
    /**
     * @return Indicates whether compression is enabled for transactions written to binary log files on the MySQL server.
     * 
     */
    private String binaryLogCompression;
    /**
     * @return The compression ratio for the binary log, expressed as a percentage.
     * 
     */
    private Integer binaryLogCompressionPercent;
    /**
     * @return The binary logging format used by the MySQL server.
     * 
     */
    private String binaryLogFormat;
    /**
     * @return The name of the binary log file.
     * 
     */
    private String binaryLogName;
    /**
     * @return The position within the binary log file.
     * 
     */
    private String binaryLogPosition;
    /**
     * @return The status of binary logging on the MySQL server.
     * 
     */
    private String binaryLogging;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String managedMySqlDatabaseId;

    private GetManagedMySqlDatabaseBinaryLogInformationResult() {}
    /**
     * @return Indicates whether compression is enabled for transactions written to binary log files on the MySQL server.
     * 
     */
    public String binaryLogCompression() {
        return this.binaryLogCompression;
    }
    /**
     * @return The compression ratio for the binary log, expressed as a percentage.
     * 
     */
    public Integer binaryLogCompressionPercent() {
        return this.binaryLogCompressionPercent;
    }
    /**
     * @return The binary logging format used by the MySQL server.
     * 
     */
    public String binaryLogFormat() {
        return this.binaryLogFormat;
    }
    /**
     * @return The name of the binary log file.
     * 
     */
    public String binaryLogName() {
        return this.binaryLogName;
    }
    /**
     * @return The position within the binary log file.
     * 
     */
    public String binaryLogPosition() {
        return this.binaryLogPosition;
    }
    /**
     * @return The status of binary logging on the MySQL server.
     * 
     */
    public String binaryLogging() {
        return this.binaryLogging;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseBinaryLogInformationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String binaryLogCompression;
        private Integer binaryLogCompressionPercent;
        private String binaryLogFormat;
        private String binaryLogName;
        private String binaryLogPosition;
        private String binaryLogging;
        private String id;
        private String managedMySqlDatabaseId;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseBinaryLogInformationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.binaryLogCompression = defaults.binaryLogCompression;
    	      this.binaryLogCompressionPercent = defaults.binaryLogCompressionPercent;
    	      this.binaryLogFormat = defaults.binaryLogFormat;
    	      this.binaryLogName = defaults.binaryLogName;
    	      this.binaryLogPosition = defaults.binaryLogPosition;
    	      this.binaryLogging = defaults.binaryLogging;
    	      this.id = defaults.id;
    	      this.managedMySqlDatabaseId = defaults.managedMySqlDatabaseId;
        }

        @CustomType.Setter
        public Builder binaryLogCompression(String binaryLogCompression) {
            if (binaryLogCompression == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "binaryLogCompression");
            }
            this.binaryLogCompression = binaryLogCompression;
            return this;
        }
        @CustomType.Setter
        public Builder binaryLogCompressionPercent(Integer binaryLogCompressionPercent) {
            if (binaryLogCompressionPercent == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "binaryLogCompressionPercent");
            }
            this.binaryLogCompressionPercent = binaryLogCompressionPercent;
            return this;
        }
        @CustomType.Setter
        public Builder binaryLogFormat(String binaryLogFormat) {
            if (binaryLogFormat == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "binaryLogFormat");
            }
            this.binaryLogFormat = binaryLogFormat;
            return this;
        }
        @CustomType.Setter
        public Builder binaryLogName(String binaryLogName) {
            if (binaryLogName == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "binaryLogName");
            }
            this.binaryLogName = binaryLogName;
            return this;
        }
        @CustomType.Setter
        public Builder binaryLogPosition(String binaryLogPosition) {
            if (binaryLogPosition == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "binaryLogPosition");
            }
            this.binaryLogPosition = binaryLogPosition;
            return this;
        }
        @CustomType.Setter
        public Builder binaryLogging(String binaryLogging) {
            if (binaryLogging == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "binaryLogging");
            }
            this.binaryLogging = binaryLogging;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            if (managedMySqlDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseBinaryLogInformationResult", "managedMySqlDatabaseId");
            }
            this.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }
        public GetManagedMySqlDatabaseBinaryLogInformationResult build() {
            final var _resultValue = new GetManagedMySqlDatabaseBinaryLogInformationResult();
            _resultValue.binaryLogCompression = binaryLogCompression;
            _resultValue.binaryLogCompressionPercent = binaryLogCompressionPercent;
            _resultValue.binaryLogFormat = binaryLogFormat;
            _resultValue.binaryLogName = binaryLogName;
            _resultValue.binaryLogPosition = binaryLogPosition;
            _resultValue.binaryLogging = binaryLogging;
            _resultValue.id = id;
            _resultValue.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return _resultValue;
        }
    }
}
