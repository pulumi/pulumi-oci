// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem {
    /**
     * @return default value of variable
     * 
     */
    private String defaultValue;
    /**
     * @return Description of the variable
     * 
     */
    private String description;
    /**
     * @return Host from where this value was set. Empty for MySql Database System
     * 
     */
    private String hostSet;
    /**
     * @return Whether this variable is configurable
     * 
     */
    private Boolean isConfigurable;
    /**
     * @return Whether variable can be set dynamically or not
     * 
     */
    private Boolean isDynamic;
    /**
     * @return whether variable is set at server startup
     * 
     */
    private Boolean isInit;
    /**
     * @return Maximum value of variable
     * 
     */
    private Double maxValue;
    /**
     * @return Minimum value of variable
     * 
     */
    private Double minValue;
    /**
     * @return The name of variable
     * 
     */
    private String name;
    /**
     * @return If the variable was set from an option file, VARIABLE_PATH is the path name of that file. Otherwise, the value is the empty string.
     * 
     */
    private String path;
    /**
     * @return Comma separated list of possible values for the variable in value:valueDescription format
     * 
     */
    private String possibleValues;
    /**
     * @return The source from which the variable was most recently set
     * 
     */
    private String source;
    /**
     * @return Comma separated list of MySql versions where this variable is supported
     * 
     */
    private String supportedVersions;
    /**
     * @return Time when value was set
     * 
     */
    private String timeSet;
    /**
     * @return type of variable
     * 
     */
    private String type;
    /**
     * @return User who set this value. Empty for MySql Database System
     * 
     */
    private String userSet;
    /**
     * @return The value of variable
     * 
     */
    private String value;

    private GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem() {}
    /**
     * @return default value of variable
     * 
     */
    public String defaultValue() {
        return this.defaultValue;
    }
    /**
     * @return Description of the variable
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Host from where this value was set. Empty for MySql Database System
     * 
     */
    public String hostSet() {
        return this.hostSet;
    }
    /**
     * @return Whether this variable is configurable
     * 
     */
    public Boolean isConfigurable() {
        return this.isConfigurable;
    }
    /**
     * @return Whether variable can be set dynamically or not
     * 
     */
    public Boolean isDynamic() {
        return this.isDynamic;
    }
    /**
     * @return whether variable is set at server startup
     * 
     */
    public Boolean isInit() {
        return this.isInit;
    }
    /**
     * @return Maximum value of variable
     * 
     */
    public Double maxValue() {
        return this.maxValue;
    }
    /**
     * @return Minimum value of variable
     * 
     */
    public Double minValue() {
        return this.minValue;
    }
    /**
     * @return The name of variable
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return If the variable was set from an option file, VARIABLE_PATH is the path name of that file. Otherwise, the value is the empty string.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Comma separated list of possible values for the variable in value:valueDescription format
     * 
     */
    public String possibleValues() {
        return this.possibleValues;
    }
    /**
     * @return The source from which the variable was most recently set
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Comma separated list of MySql versions where this variable is supported
     * 
     */
    public String supportedVersions() {
        return this.supportedVersions;
    }
    /**
     * @return Time when value was set
     * 
     */
    public String timeSet() {
        return this.timeSet;
    }
    /**
     * @return type of variable
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return User who set this value. Empty for MySql Database System
     * 
     */
    public String userSet() {
        return this.userSet;
    }
    /**
     * @return The value of variable
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultValue;
        private String description;
        private String hostSet;
        private Boolean isConfigurable;
        private Boolean isDynamic;
        private Boolean isInit;
        private Double maxValue;
        private Double minValue;
        private String name;
        private String path;
        private String possibleValues;
        private String source;
        private String supportedVersions;
        private String timeSet;
        private String type;
        private String userSet;
        private String value;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValue = defaults.defaultValue;
    	      this.description = defaults.description;
    	      this.hostSet = defaults.hostSet;
    	      this.isConfigurable = defaults.isConfigurable;
    	      this.isDynamic = defaults.isDynamic;
    	      this.isInit = defaults.isInit;
    	      this.maxValue = defaults.maxValue;
    	      this.minValue = defaults.minValue;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.possibleValues = defaults.possibleValues;
    	      this.source = defaults.source;
    	      this.supportedVersions = defaults.supportedVersions;
    	      this.timeSet = defaults.timeSet;
    	      this.type = defaults.type;
    	      this.userSet = defaults.userSet;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder defaultValue(String defaultValue) {
            if (defaultValue == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "defaultValue");
            }
            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder hostSet(String hostSet) {
            if (hostSet == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "hostSet");
            }
            this.hostSet = hostSet;
            return this;
        }
        @CustomType.Setter
        public Builder isConfigurable(Boolean isConfigurable) {
            if (isConfigurable == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "isConfigurable");
            }
            this.isConfigurable = isConfigurable;
            return this;
        }
        @CustomType.Setter
        public Builder isDynamic(Boolean isDynamic) {
            if (isDynamic == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "isDynamic");
            }
            this.isDynamic = isDynamic;
            return this;
        }
        @CustomType.Setter
        public Builder isInit(Boolean isInit) {
            if (isInit == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "isInit");
            }
            this.isInit = isInit;
            return this;
        }
        @CustomType.Setter
        public Builder maxValue(Double maxValue) {
            if (maxValue == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "maxValue");
            }
            this.maxValue = maxValue;
            return this;
        }
        @CustomType.Setter
        public Builder minValue(Double minValue) {
            if (minValue == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "minValue");
            }
            this.minValue = minValue;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder possibleValues(String possibleValues) {
            if (possibleValues == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "possibleValues");
            }
            this.possibleValues = possibleValues;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder supportedVersions(String supportedVersions) {
            if (supportedVersions == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "supportedVersions");
            }
            this.supportedVersions = supportedVersions;
            return this;
        }
        @CustomType.Setter
        public Builder timeSet(String timeSet) {
            if (timeSet == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "timeSet");
            }
            this.timeSet = timeSet;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder userSet(String userSet) {
            if (userSet == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "userSet");
            }
            this.userSet = userSet;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem", "value");
            }
            this.value = value;
            return this;
        }
        public GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem build() {
            final var _resultValue = new GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem();
            _resultValue.defaultValue = defaultValue;
            _resultValue.description = description;
            _resultValue.hostSet = hostSet;
            _resultValue.isConfigurable = isConfigurable;
            _resultValue.isDynamic = isDynamic;
            _resultValue.isInit = isInit;
            _resultValue.maxValue = maxValue;
            _resultValue.minValue = minValue;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.possibleValues = possibleValues;
            _resultValue.source = source;
            _resultValue.supportedVersions = supportedVersions;
            _resultValue.timeSet = timeSet;
            _resultValue.type = type;
            _resultValue.userSet = userSet;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
