// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem {
    /**
     * @return default value of variable
     * 
     */
    private @Nullable String defaultValue;
    /**
     * @return Description of the variable
     * 
     */
    private @Nullable String description;
    /**
     * @return Host from where this value was set. Empty for MySql Database System
     * 
     */
    private @Nullable String hostSet;
    /**
     * @return Whether this variable is configurable
     * 
     */
    private @Nullable Boolean isConfigurable;
    /**
     * @return Whether variable can be set dynamically or not
     * 
     */
    private @Nullable Boolean isDynamic;
    /**
     * @return whether variable is set at server startup
     * 
     */
    private @Nullable Boolean isInit;
    /**
     * @return Maximum value of variable
     * 
     */
    private @Nullable Double maxValue;
    /**
     * @return Minimum value of variable
     * 
     */
    private @Nullable Double minValue;
    /**
     * @return The name of variable
     * 
     */
    private @Nullable String name;
    /**
     * @return If the variable was set from an option file, VARIABLE_PATH is the path name of that file. Otherwise, the value is the empty string.
     * 
     */
    private @Nullable String path;
    /**
     * @return Comma separated list of possible values for the variable in value:valueDescription format
     * 
     */
    private @Nullable String possibleValues;
    /**
     * @return The source from which the variable was most recently set
     * 
     */
    private @Nullable String source;
    /**
     * @return Comma separated list of MySql versions where this variable is supported
     * 
     */
    private @Nullable String supportedVersions;
    /**
     * @return Time when value was set
     * 
     */
    private @Nullable String timeSet;
    /**
     * @return type of variable
     * 
     */
    private @Nullable String type;
    /**
     * @return User who set this value. Empty for MySql Database System
     * 
     */
    private @Nullable String userSet;
    /**
     * @return The value of variable
     * 
     */
    private @Nullable String value;

    private GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem() {}
    /**
     * @return default value of variable
     * 
     */
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    /**
     * @return Description of the variable
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Host from where this value was set. Empty for MySql Database System
     * 
     */
    public Optional<String> hostSet() {
        return Optional.ofNullable(this.hostSet);
    }
    /**
     * @return Whether this variable is configurable
     * 
     */
    public Optional<Boolean> isConfigurable() {
        return Optional.ofNullable(this.isConfigurable);
    }
    /**
     * @return Whether variable can be set dynamically or not
     * 
     */
    public Optional<Boolean> isDynamic() {
        return Optional.ofNullable(this.isDynamic);
    }
    /**
     * @return whether variable is set at server startup
     * 
     */
    public Optional<Boolean> isInit() {
        return Optional.ofNullable(this.isInit);
    }
    /**
     * @return Maximum value of variable
     * 
     */
    public Optional<Double> maxValue() {
        return Optional.ofNullable(this.maxValue);
    }
    /**
     * @return Minimum value of variable
     * 
     */
    public Optional<Double> minValue() {
        return Optional.ofNullable(this.minValue);
    }
    /**
     * @return The name of variable
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return If the variable was set from an option file, VARIABLE_PATH is the path name of that file. Otherwise, the value is the empty string.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Comma separated list of possible values for the variable in value:valueDescription format
     * 
     */
    public Optional<String> possibleValues() {
        return Optional.ofNullable(this.possibleValues);
    }
    /**
     * @return The source from which the variable was most recently set
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return Comma separated list of MySql versions where this variable is supported
     * 
     */
    public Optional<String> supportedVersions() {
        return Optional.ofNullable(this.supportedVersions);
    }
    /**
     * @return Time when value was set
     * 
     */
    public Optional<String> timeSet() {
        return Optional.ofNullable(this.timeSet);
    }
    /**
     * @return type of variable
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return User who set this value. Empty for MySql Database System
     * 
     */
    public Optional<String> userSet() {
        return Optional.ofNullable(this.userSet);
    }
    /**
     * @return The value of variable
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultValue;
        private @Nullable String description;
        private @Nullable String hostSet;
        private @Nullable Boolean isConfigurable;
        private @Nullable Boolean isDynamic;
        private @Nullable Boolean isInit;
        private @Nullable Double maxValue;
        private @Nullable Double minValue;
        private @Nullable String name;
        private @Nullable String path;
        private @Nullable String possibleValues;
        private @Nullable String source;
        private @Nullable String supportedVersions;
        private @Nullable String timeSet;
        private @Nullable String type;
        private @Nullable String userSet;
        private @Nullable String value;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultValue = defaults.defaultValue;
    	      this.description = defaults.description;
    	      this.hostSet = defaults.hostSet;
    	      this.isConfigurable = defaults.isConfigurable;
    	      this.isDynamic = defaults.isDynamic;
    	      this.isInit = defaults.isInit;
    	      this.maxValue = defaults.maxValue;
    	      this.minValue = defaults.minValue;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.possibleValues = defaults.possibleValues;
    	      this.source = defaults.source;
    	      this.supportedVersions = defaults.supportedVersions;
    	      this.timeSet = defaults.timeSet;
    	      this.type = defaults.type;
    	      this.userSet = defaults.userSet;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder defaultValue(@Nullable String defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder hostSet(@Nullable String hostSet) {
            this.hostSet = hostSet;
            return this;
        }
        @CustomType.Setter
        public Builder isConfigurable(@Nullable Boolean isConfigurable) {
            this.isConfigurable = isConfigurable;
            return this;
        }
        @CustomType.Setter
        public Builder isDynamic(@Nullable Boolean isDynamic) {
            this.isDynamic = isDynamic;
            return this;
        }
        @CustomType.Setter
        public Builder isInit(@Nullable Boolean isInit) {
            this.isInit = isInit;
            return this;
        }
        @CustomType.Setter
        public Builder maxValue(@Nullable Double maxValue) {
            this.maxValue = maxValue;
            return this;
        }
        @CustomType.Setter
        public Builder minValue(@Nullable Double minValue) {
            this.minValue = minValue;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder possibleValues(@Nullable String possibleValues) {
            this.possibleValues = possibleValues;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder supportedVersions(@Nullable String supportedVersions) {
            this.supportedVersions = supportedVersions;
            return this;
        }
        @CustomType.Setter
        public Builder timeSet(@Nullable String timeSet) {
            this.timeSet = timeSet;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder userSet(@Nullable String userSet) {
            this.userSet = userSet;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }
        public GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem build() {
            final var o = new GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem();
            o.defaultValue = defaultValue;
            o.description = description;
            o.hostSet = hostSet;
            o.isConfigurable = isConfigurable;
            o.isDynamic = isDynamic;
            o.isInit = isInit;
            o.maxValue = maxValue;
            o.minValue = minValue;
            o.name = name;
            o.path = path;
            o.possibleValues = possibleValues;
            o.source = source;
            o.supportedVersions = supportedVersions;
            o.timeSet = timeSet;
            o.type = type;
            o.userSet = userSet;
            o.value = value;
            return o;
        }
    }
}
