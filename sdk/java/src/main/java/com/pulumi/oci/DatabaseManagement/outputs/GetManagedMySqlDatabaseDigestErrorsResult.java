// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseDigestErrorsFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedMySqlDatabaseDigestErrorsResult {
    private String digest;
    private @Nullable List<GetManagedMySqlDatabaseDigestErrorsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String managedMySqlDatabaseId;
    /**
     * @return The list of my_sql_digest_errors_collection.
     * 
     */
    private List<GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection> mySqlDigestErrorsCollections;

    private GetManagedMySqlDatabaseDigestErrorsResult() {}
    public String digest() {
        return this.digest;
    }
    public List<GetManagedMySqlDatabaseDigestErrorsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }
    /**
     * @return The list of my_sql_digest_errors_collection.
     * 
     */
    public List<GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection> mySqlDigestErrorsCollections() {
        return this.mySqlDigestErrorsCollections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseDigestErrorsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String digest;
        private @Nullable List<GetManagedMySqlDatabaseDigestErrorsFilter> filters;
        private String id;
        private String managedMySqlDatabaseId;
        private List<GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection> mySqlDigestErrorsCollections;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseDigestErrorsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.digest = defaults.digest;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedMySqlDatabaseId = defaults.managedMySqlDatabaseId;
    	      this.mySqlDigestErrorsCollections = defaults.mySqlDigestErrorsCollections;
        }

        @CustomType.Setter
        public Builder digest(String digest) {
            if (digest == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseDigestErrorsResult", "digest");
            }
            this.digest = digest;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedMySqlDatabaseDigestErrorsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedMySqlDatabaseDigestErrorsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseDigestErrorsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            if (managedMySqlDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseDigestErrorsResult", "managedMySqlDatabaseId");
            }
            this.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder mySqlDigestErrorsCollections(List<GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection> mySqlDigestErrorsCollections) {
            if (mySqlDigestErrorsCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseDigestErrorsResult", "mySqlDigestErrorsCollections");
            }
            this.mySqlDigestErrorsCollections = mySqlDigestErrorsCollections;
            return this;
        }
        public Builder mySqlDigestErrorsCollections(GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection... mySqlDigestErrorsCollections) {
            return mySqlDigestErrorsCollections(List.of(mySqlDigestErrorsCollections));
        }
        public GetManagedMySqlDatabaseDigestErrorsResult build() {
            final var _resultValue = new GetManagedMySqlDatabaseDigestErrorsResult();
            _resultValue.digest = digest;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.managedMySqlDatabaseId = managedMySqlDatabaseId;
            _resultValue.mySqlDigestErrorsCollections = mySqlDigestErrorsCollections;
            return _resultValue;
        }
    }
}
