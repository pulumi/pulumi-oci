// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseGeneralReplicationInformationResult {
    /**
     * @return A summary of the current status of apply operations.
     * 
     */
    private String applyStatusSummary;
    /**
     * @return The binary logging format used by this server.
     * 
     */
    private String binaryLogFormat;
    /**
     * @return Status of binary logging on this server.
     * 
     */
    private String binaryLogging;
    /**
     * @return The set of global transaction identifiers for transactions that have been executed on this source server.
     * 
     */
    private String executedGtidSet;
    /**
     * @return A summary of the current status of fetch operations.
     * 
     */
    private String fetchStatusSummary;
    /**
     * @return Global Transaction Identifier (GTID) mode of this server.
     * 
     */
    private String gtidMode;
    /**
     * @return The state of this server as a group replication member.
     * 
     */
    private String highAvailabilityMemberState;
    /**
     * @return This server&#39;s host name.
     * 
     */
    private String hostName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The number of sources this server is replicating from.
     * 
     */
    private Integer inboundReplicationsCount;
    /**
     * @return The type of the instance. Source, Replica, Primary Group Member, Secondary Group Member, and so on. If the instance is replicating from one or more sources and has one or more replicas, i.e., it belongs to a replication chain, the instance type can be Replica/Source.
     * 
     */
    private String instanceType;
    /**
     * @return Specifies if high availability is enabled on this server.
     * 
     */
    private Boolean isHighAvailabilityEnabled;
    private String managedMySqlDatabaseId;
    /**
     * @return The number of replicas replicating from this server.
     * 
     */
    private Integer outboundReplicationsCount;
    /**
     * @return The number of the port on which the server listens for TCP/IP connections.
     * 
     */
    private Integer port;
    /**
     * @return If the value is ON, the instance is configured as read_only. If the value is SUPER, the instance is configured as super_read_only. If the value is OFF, the instance is neither read_only nor super_read_only.
     * 
     */
    private String readOnly;
    /**
     * @return The number of seconds the replica is behind the source. When multiple sources are involved, this is the maximum value across all sources.
     * 
     */
    private String secondsBehindSourceMax;
    /**
     * @return This server&#39;s ID.
     * 
     */
    private String serverId;
    /**
     * @return This server&#39;s Universally Unique Identifier (UUID).
     * 
     */
    private String serverUuid;

    private GetManagedMySqlDatabaseGeneralReplicationInformationResult() {}
    /**
     * @return A summary of the current status of apply operations.
     * 
     */
    public String applyStatusSummary() {
        return this.applyStatusSummary;
    }
    /**
     * @return The binary logging format used by this server.
     * 
     */
    public String binaryLogFormat() {
        return this.binaryLogFormat;
    }
    /**
     * @return Status of binary logging on this server.
     * 
     */
    public String binaryLogging() {
        return this.binaryLogging;
    }
    /**
     * @return The set of global transaction identifiers for transactions that have been executed on this source server.
     * 
     */
    public String executedGtidSet() {
        return this.executedGtidSet;
    }
    /**
     * @return A summary of the current status of fetch operations.
     * 
     */
    public String fetchStatusSummary() {
        return this.fetchStatusSummary;
    }
    /**
     * @return Global Transaction Identifier (GTID) mode of this server.
     * 
     */
    public String gtidMode() {
        return this.gtidMode;
    }
    /**
     * @return The state of this server as a group replication member.
     * 
     */
    public String highAvailabilityMemberState() {
        return this.highAvailabilityMemberState;
    }
    /**
     * @return This server&#39;s host name.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number of sources this server is replicating from.
     * 
     */
    public Integer inboundReplicationsCount() {
        return this.inboundReplicationsCount;
    }
    /**
     * @return The type of the instance. Source, Replica, Primary Group Member, Secondary Group Member, and so on. If the instance is replicating from one or more sources and has one or more replicas, i.e., it belongs to a replication chain, the instance type can be Replica/Source.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return Specifies if high availability is enabled on this server.
     * 
     */
    public Boolean isHighAvailabilityEnabled() {
        return this.isHighAvailabilityEnabled;
    }
    public String managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }
    /**
     * @return The number of replicas replicating from this server.
     * 
     */
    public Integer outboundReplicationsCount() {
        return this.outboundReplicationsCount;
    }
    /**
     * @return The number of the port on which the server listens for TCP/IP connections.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return If the value is ON, the instance is configured as read_only. If the value is SUPER, the instance is configured as super_read_only. If the value is OFF, the instance is neither read_only nor super_read_only.
     * 
     */
    public String readOnly() {
        return this.readOnly;
    }
    /**
     * @return The number of seconds the replica is behind the source. When multiple sources are involved, this is the maximum value across all sources.
     * 
     */
    public String secondsBehindSourceMax() {
        return this.secondsBehindSourceMax;
    }
    /**
     * @return This server&#39;s ID.
     * 
     */
    public String serverId() {
        return this.serverId;
    }
    /**
     * @return This server&#39;s Universally Unique Identifier (UUID).
     * 
     */
    public String serverUuid() {
        return this.serverUuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseGeneralReplicationInformationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applyStatusSummary;
        private String binaryLogFormat;
        private String binaryLogging;
        private String executedGtidSet;
        private String fetchStatusSummary;
        private String gtidMode;
        private String highAvailabilityMemberState;
        private String hostName;
        private String id;
        private Integer inboundReplicationsCount;
        private String instanceType;
        private Boolean isHighAvailabilityEnabled;
        private String managedMySqlDatabaseId;
        private Integer outboundReplicationsCount;
        private Integer port;
        private String readOnly;
        private String secondsBehindSourceMax;
        private String serverId;
        private String serverUuid;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseGeneralReplicationInformationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyStatusSummary = defaults.applyStatusSummary;
    	      this.binaryLogFormat = defaults.binaryLogFormat;
    	      this.binaryLogging = defaults.binaryLogging;
    	      this.executedGtidSet = defaults.executedGtidSet;
    	      this.fetchStatusSummary = defaults.fetchStatusSummary;
    	      this.gtidMode = defaults.gtidMode;
    	      this.highAvailabilityMemberState = defaults.highAvailabilityMemberState;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.inboundReplicationsCount = defaults.inboundReplicationsCount;
    	      this.instanceType = defaults.instanceType;
    	      this.isHighAvailabilityEnabled = defaults.isHighAvailabilityEnabled;
    	      this.managedMySqlDatabaseId = defaults.managedMySqlDatabaseId;
    	      this.outboundReplicationsCount = defaults.outboundReplicationsCount;
    	      this.port = defaults.port;
    	      this.readOnly = defaults.readOnly;
    	      this.secondsBehindSourceMax = defaults.secondsBehindSourceMax;
    	      this.serverId = defaults.serverId;
    	      this.serverUuid = defaults.serverUuid;
        }

        @CustomType.Setter
        public Builder applyStatusSummary(String applyStatusSummary) {
            if (applyStatusSummary == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "applyStatusSummary");
            }
            this.applyStatusSummary = applyStatusSummary;
            return this;
        }
        @CustomType.Setter
        public Builder binaryLogFormat(String binaryLogFormat) {
            if (binaryLogFormat == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "binaryLogFormat");
            }
            this.binaryLogFormat = binaryLogFormat;
            return this;
        }
        @CustomType.Setter
        public Builder binaryLogging(String binaryLogging) {
            if (binaryLogging == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "binaryLogging");
            }
            this.binaryLogging = binaryLogging;
            return this;
        }
        @CustomType.Setter
        public Builder executedGtidSet(String executedGtidSet) {
            if (executedGtidSet == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "executedGtidSet");
            }
            this.executedGtidSet = executedGtidSet;
            return this;
        }
        @CustomType.Setter
        public Builder fetchStatusSummary(String fetchStatusSummary) {
            if (fetchStatusSummary == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "fetchStatusSummary");
            }
            this.fetchStatusSummary = fetchStatusSummary;
            return this;
        }
        @CustomType.Setter
        public Builder gtidMode(String gtidMode) {
            if (gtidMode == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "gtidMode");
            }
            this.gtidMode = gtidMode;
            return this;
        }
        @CustomType.Setter
        public Builder highAvailabilityMemberState(String highAvailabilityMemberState) {
            if (highAvailabilityMemberState == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "highAvailabilityMemberState");
            }
            this.highAvailabilityMemberState = highAvailabilityMemberState;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inboundReplicationsCount(Integer inboundReplicationsCount) {
            if (inboundReplicationsCount == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "inboundReplicationsCount");
            }
            this.inboundReplicationsCount = inboundReplicationsCount;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder isHighAvailabilityEnabled(Boolean isHighAvailabilityEnabled) {
            if (isHighAvailabilityEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "isHighAvailabilityEnabled");
            }
            this.isHighAvailabilityEnabled = isHighAvailabilityEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            if (managedMySqlDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "managedMySqlDatabaseId");
            }
            this.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder outboundReplicationsCount(Integer outboundReplicationsCount) {
            if (outboundReplicationsCount == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "outboundReplicationsCount");
            }
            this.outboundReplicationsCount = outboundReplicationsCount;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(String readOnly) {
            if (readOnly == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "readOnly");
            }
            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder secondsBehindSourceMax(String secondsBehindSourceMax) {
            if (secondsBehindSourceMax == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "secondsBehindSourceMax");
            }
            this.secondsBehindSourceMax = secondsBehindSourceMax;
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            if (serverId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "serverId");
            }
            this.serverId = serverId;
            return this;
        }
        @CustomType.Setter
        public Builder serverUuid(String serverUuid) {
            if (serverUuid == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseGeneralReplicationInformationResult", "serverUuid");
            }
            this.serverUuid = serverUuid;
            return this;
        }
        public GetManagedMySqlDatabaseGeneralReplicationInformationResult build() {
            final var _resultValue = new GetManagedMySqlDatabaseGeneralReplicationInformationResult();
            _resultValue.applyStatusSummary = applyStatusSummary;
            _resultValue.binaryLogFormat = binaryLogFormat;
            _resultValue.binaryLogging = binaryLogging;
            _resultValue.executedGtidSet = executedGtidSet;
            _resultValue.fetchStatusSummary = fetchStatusSummary;
            _resultValue.gtidMode = gtidMode;
            _resultValue.highAvailabilityMemberState = highAvailabilityMemberState;
            _resultValue.hostName = hostName;
            _resultValue.id = id;
            _resultValue.inboundReplicationsCount = inboundReplicationsCount;
            _resultValue.instanceType = instanceType;
            _resultValue.isHighAvailabilityEnabled = isHighAvailabilityEnabled;
            _resultValue.managedMySqlDatabaseId = managedMySqlDatabaseId;
            _resultValue.outboundReplicationsCount = outboundReplicationsCount;
            _resultValue.port = port;
            _resultValue.readOnly = readOnly;
            _resultValue.secondsBehindSourceMax = secondsBehindSourceMax;
            _resultValue.serverId = serverId;
            _resultValue.serverUuid = serverUuid;
            return _resultValue;
        }
    }
}
