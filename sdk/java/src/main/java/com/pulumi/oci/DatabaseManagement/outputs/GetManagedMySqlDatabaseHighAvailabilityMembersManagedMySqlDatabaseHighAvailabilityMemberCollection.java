// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionItem;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionStatusSummary;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection {
    /**
     * @return The mode used for flow control.
     * 
     */
    private String flowControl;
    /**
     * @return The interval between successive values for auto-incremented columns for transactions that execute on this server instance.
     * 
     */
    private Integer groupAutoIncrement;
    /**
     * @return The name of the group to which this server instance belongs.
     * 
     */
    private String groupName;
    /**
     * @return A list of MySqlHighAvailabilityMember records.
     * 
     */
    private List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionItem> items;
    /**
     * @return The role of this server as a group replication member.
     * 
     */
    private String memberRole;
    /**
     * @return The state of this server as a group replication member.
     * 
     */
    private String memberState;
    /**
     * @return Indicates if the replication group is running in single-primary mode.
     * 
     */
    private String singlePrimaryMode;
    /**
     * @return High availability status summary of a MySQL server.
     * 
     */
    private List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionStatusSummary> statusSummaries;
    /**
     * @return The number of transactions that were replicated within the cluster.
     * 
     */
    private String transactionsInGtidExecuted;
    /**
     * @return The current view identifier for this group.
     * 
     */
    private String viewId;

    private GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection() {}
    /**
     * @return The mode used for flow control.
     * 
     */
    public String flowControl() {
        return this.flowControl;
    }
    /**
     * @return The interval between successive values for auto-incremented columns for transactions that execute on this server instance.
     * 
     */
    public Integer groupAutoIncrement() {
        return this.groupAutoIncrement;
    }
    /**
     * @return The name of the group to which this server instance belongs.
     * 
     */
    public String groupName() {
        return this.groupName;
    }
    /**
     * @return A list of MySqlHighAvailabilityMember records.
     * 
     */
    public List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionItem> items() {
        return this.items;
    }
    /**
     * @return The role of this server as a group replication member.
     * 
     */
    public String memberRole() {
        return this.memberRole;
    }
    /**
     * @return The state of this server as a group replication member.
     * 
     */
    public String memberState() {
        return this.memberState;
    }
    /**
     * @return Indicates if the replication group is running in single-primary mode.
     * 
     */
    public String singlePrimaryMode() {
        return this.singlePrimaryMode;
    }
    /**
     * @return High availability status summary of a MySQL server.
     * 
     */
    public List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionStatusSummary> statusSummaries() {
        return this.statusSummaries;
    }
    /**
     * @return The number of transactions that were replicated within the cluster.
     * 
     */
    public String transactionsInGtidExecuted() {
        return this.transactionsInGtidExecuted;
    }
    /**
     * @return The current view identifier for this group.
     * 
     */
    public String viewId() {
        return this.viewId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String flowControl;
        private Integer groupAutoIncrement;
        private String groupName;
        private List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionItem> items;
        private String memberRole;
        private String memberState;
        private String singlePrimaryMode;
        private List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionStatusSummary> statusSummaries;
        private String transactionsInGtidExecuted;
        private String viewId;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.flowControl = defaults.flowControl;
    	      this.groupAutoIncrement = defaults.groupAutoIncrement;
    	      this.groupName = defaults.groupName;
    	      this.items = defaults.items;
    	      this.memberRole = defaults.memberRole;
    	      this.memberState = defaults.memberState;
    	      this.singlePrimaryMode = defaults.singlePrimaryMode;
    	      this.statusSummaries = defaults.statusSummaries;
    	      this.transactionsInGtidExecuted = defaults.transactionsInGtidExecuted;
    	      this.viewId = defaults.viewId;
        }

        @CustomType.Setter
        public Builder flowControl(String flowControl) {
            if (flowControl == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "flowControl");
            }
            this.flowControl = flowControl;
            return this;
        }
        @CustomType.Setter
        public Builder groupAutoIncrement(Integer groupAutoIncrement) {
            if (groupAutoIncrement == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "groupAutoIncrement");
            }
            this.groupAutoIncrement = groupAutoIncrement;
            return this;
        }
        @CustomType.Setter
        public Builder groupName(String groupName) {
            if (groupName == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "groupName");
            }
            this.groupName = groupName;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder memberRole(String memberRole) {
            if (memberRole == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "memberRole");
            }
            this.memberRole = memberRole;
            return this;
        }
        @CustomType.Setter
        public Builder memberState(String memberState) {
            if (memberState == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "memberState");
            }
            this.memberState = memberState;
            return this;
        }
        @CustomType.Setter
        public Builder singlePrimaryMode(String singlePrimaryMode) {
            if (singlePrimaryMode == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "singlePrimaryMode");
            }
            this.singlePrimaryMode = singlePrimaryMode;
            return this;
        }
        @CustomType.Setter
        public Builder statusSummaries(List<GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionStatusSummary> statusSummaries) {
            if (statusSummaries == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "statusSummaries");
            }
            this.statusSummaries = statusSummaries;
            return this;
        }
        public Builder statusSummaries(GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollectionStatusSummary... statusSummaries) {
            return statusSummaries(List.of(statusSummaries));
        }
        @CustomType.Setter
        public Builder transactionsInGtidExecuted(String transactionsInGtidExecuted) {
            if (transactionsInGtidExecuted == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "transactionsInGtidExecuted");
            }
            this.transactionsInGtidExecuted = transactionsInGtidExecuted;
            return this;
        }
        @CustomType.Setter
        public Builder viewId(String viewId) {
            if (viewId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection", "viewId");
            }
            this.viewId = viewId;
            return this;
        }
        public GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection build() {
            final var _resultValue = new GetManagedMySqlDatabaseHighAvailabilityMembersManagedMySqlDatabaseHighAvailabilityMemberCollection();
            _resultValue.flowControl = flowControl;
            _resultValue.groupAutoIncrement = groupAutoIncrement;
            _resultValue.groupName = groupName;
            _resultValue.items = items;
            _resultValue.memberRole = memberRole;
            _resultValue.memberState = memberState;
            _resultValue.singlePrimaryMode = singlePrimaryMode;
            _resultValue.statusSummaries = statusSummaries;
            _resultValue.transactionsInGtidExecuted = transactionsInGtidExecuted;
            _resultValue.viewId = viewId;
            return _resultValue;
        }
    }
}
