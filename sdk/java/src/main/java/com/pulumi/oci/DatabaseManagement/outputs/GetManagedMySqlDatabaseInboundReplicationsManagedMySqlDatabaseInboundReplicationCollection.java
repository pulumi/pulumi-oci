// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection {
    /**
     * @return The number of sources this server is replicating from.
     * 
     */
    private Integer inboundReplicationsCount;
    /**
     * @return A list of ManagedMySqlDatabaseInboundReplicationSummary records.
     * 
     */
    private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem> items;
    /**
     * @return The number of applier threads for executing replication transactions in parallel.
     * 
     */
    private Integer parallelWorkers;
    /**
     * @return For multi-threaded replicas, indicates if transactions are executed and committed on the replica in the same order as they appear in the relay log.
     * 
     */
    private String preserveCommitOrder;
    /**
     * @return The server ID value of this replica.
     * 
     */
    private String replicaServerId;
    /**
     * @return The Universally Unique Identifier (UUID) value of this replica server.
     * 
     */
    private String replicaUuid;

    private GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection() {}
    /**
     * @return The number of sources this server is replicating from.
     * 
     */
    public Integer inboundReplicationsCount() {
        return this.inboundReplicationsCount;
    }
    /**
     * @return A list of ManagedMySqlDatabaseInboundReplicationSummary records.
     * 
     */
    public List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem> items() {
        return this.items;
    }
    /**
     * @return The number of applier threads for executing replication transactions in parallel.
     * 
     */
    public Integer parallelWorkers() {
        return this.parallelWorkers;
    }
    /**
     * @return For multi-threaded replicas, indicates if transactions are executed and committed on the replica in the same order as they appear in the relay log.
     * 
     */
    public String preserveCommitOrder() {
        return this.preserveCommitOrder;
    }
    /**
     * @return The server ID value of this replica.
     * 
     */
    public String replicaServerId() {
        return this.replicaServerId;
    }
    /**
     * @return The Universally Unique Identifier (UUID) value of this replica server.
     * 
     */
    public String replicaUuid() {
        return this.replicaUuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer inboundReplicationsCount;
        private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem> items;
        private Integer parallelWorkers;
        private String preserveCommitOrder;
        private String replicaServerId;
        private String replicaUuid;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inboundReplicationsCount = defaults.inboundReplicationsCount;
    	      this.items = defaults.items;
    	      this.parallelWorkers = defaults.parallelWorkers;
    	      this.preserveCommitOrder = defaults.preserveCommitOrder;
    	      this.replicaServerId = defaults.replicaServerId;
    	      this.replicaUuid = defaults.replicaUuid;
        }

        @CustomType.Setter
        public Builder inboundReplicationsCount(Integer inboundReplicationsCount) {
            if (inboundReplicationsCount == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection", "inboundReplicationsCount");
            }
            this.inboundReplicationsCount = inboundReplicationsCount;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder parallelWorkers(Integer parallelWorkers) {
            if (parallelWorkers == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection", "parallelWorkers");
            }
            this.parallelWorkers = parallelWorkers;
            return this;
        }
        @CustomType.Setter
        public Builder preserveCommitOrder(String preserveCommitOrder) {
            if (preserveCommitOrder == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection", "preserveCommitOrder");
            }
            this.preserveCommitOrder = preserveCommitOrder;
            return this;
        }
        @CustomType.Setter
        public Builder replicaServerId(String replicaServerId) {
            if (replicaServerId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection", "replicaServerId");
            }
            this.replicaServerId = replicaServerId;
            return this;
        }
        @CustomType.Setter
        public Builder replicaUuid(String replicaUuid) {
            if (replicaUuid == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection", "replicaUuid");
            }
            this.replicaUuid = replicaUuid;
            return this;
        }
        public GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection build() {
            final var _resultValue = new GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection();
            _resultValue.inboundReplicationsCount = inboundReplicationsCount;
            _resultValue.items = items;
            _resultValue.parallelWorkers = parallelWorkers;
            _resultValue.preserveCommitOrder = preserveCommitOrder;
            _resultValue.replicaServerId = replicaServerId;
            _resultValue.replicaUuid = replicaUuid;
            return _resultValue;
        }
    }
}
