// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplierFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplyError;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemFetchError;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem {
    /**
     * @return A list of MySqlReplicationApplierFilter records.
     * 
     */
    private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplierFilter> applierFilters;
    /**
     * @return The time in seconds that the current transaction took between being committed on the source and being applied on the replica.
     * 
     */
    private Double applyDelay;
    /**
     * @return Error from the apply operation of a MySQL server replication channel.
     * 
     */
    private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplyError> applyErrors;
    /**
     * @return The current status of apply operations.
     * 
     */
    private String applyStatus;
    /**
     * @return The number of workers currently busy applying transactions from the source server.
     * 
     */
    private Integer busyWorkers;
    /**
     * @return The name of the replication channel.
     * 
     */
    private String channelName;
    /**
     * @return The desired number of seconds that the replica must lag the source.
     * 
     */
    private String desiredDelaySeconds;
    /**
     * @return Error from the fetch operation of a MySQL server replication channel.
     * 
     */
    private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemFetchError> fetchErrors;
    /**
     * @return The current status of fetch operations.
     * 
     */
    private String fetchStatus;
    /**
     * @return Indicates whether the channel assigns global transaction identifiers (GTIDs) to anonymous replicated transactions. OFF means no GTIDs are assigned. LOCAL means a GTID is assigned that includes this replica&#39;s own universally unique identifier (UUID). A UUID as value indicates that a GTID is assigned, which includes that manually set UUID value.
     * 
     */
    private String gtidAssignment;
    /**
     * @return The total size in bytes of all the existing relay log files pertaining to this channel.
     * 
     */
    private String relayLogStorageSpaceUsed;
    /**
     * @return If the replica is waiting for the desired delay seconds to pass since the source applied an event, this field contains the number of delay seconds remaining.
     * 
     */
    private String remainingDelaySeconds;
    /**
     * @return The set of global transaction IDs corresponding to all transactions received by this replica from the source server. Empty if GTIDs are not in use.
     * 
     */
    private String retrievedGtidSet;
    /**
     * @return The number of seconds the replica is behind the source server.
     * 
     */
    private String secondsBehindSource;
    /**
     * @return The host name or IP address of the source this replica is connected to.
     * 
     */
    private String sourceHost;
    /**
     * @return The port used to connect to the source.
     * 
     */
    private Integer sourcePort;
    /**
     * @return The server ID value from the source server.
     * 
     */
    private String sourceServerId;
    /**
     * @return The Universally Unique Identifier (UUID) value from the source server.
     * 
     */
    private String sourceUuid;
    /**
     * @return The number of transactions received by this replica from the source server.
     * 
     */
    private String transactionsReceived;

    private GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem() {}
    /**
     * @return A list of MySqlReplicationApplierFilter records.
     * 
     */
    public List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplierFilter> applierFilters() {
        return this.applierFilters;
    }
    /**
     * @return The time in seconds that the current transaction took between being committed on the source and being applied on the replica.
     * 
     */
    public Double applyDelay() {
        return this.applyDelay;
    }
    /**
     * @return Error from the apply operation of a MySQL server replication channel.
     * 
     */
    public List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplyError> applyErrors() {
        return this.applyErrors;
    }
    /**
     * @return The current status of apply operations.
     * 
     */
    public String applyStatus() {
        return this.applyStatus;
    }
    /**
     * @return The number of workers currently busy applying transactions from the source server.
     * 
     */
    public Integer busyWorkers() {
        return this.busyWorkers;
    }
    /**
     * @return The name of the replication channel.
     * 
     */
    public String channelName() {
        return this.channelName;
    }
    /**
     * @return The desired number of seconds that the replica must lag the source.
     * 
     */
    public String desiredDelaySeconds() {
        return this.desiredDelaySeconds;
    }
    /**
     * @return Error from the fetch operation of a MySQL server replication channel.
     * 
     */
    public List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemFetchError> fetchErrors() {
        return this.fetchErrors;
    }
    /**
     * @return The current status of fetch operations.
     * 
     */
    public String fetchStatus() {
        return this.fetchStatus;
    }
    /**
     * @return Indicates whether the channel assigns global transaction identifiers (GTIDs) to anonymous replicated transactions. OFF means no GTIDs are assigned. LOCAL means a GTID is assigned that includes this replica&#39;s own universally unique identifier (UUID). A UUID as value indicates that a GTID is assigned, which includes that manually set UUID value.
     * 
     */
    public String gtidAssignment() {
        return this.gtidAssignment;
    }
    /**
     * @return The total size in bytes of all the existing relay log files pertaining to this channel.
     * 
     */
    public String relayLogStorageSpaceUsed() {
        return this.relayLogStorageSpaceUsed;
    }
    /**
     * @return If the replica is waiting for the desired delay seconds to pass since the source applied an event, this field contains the number of delay seconds remaining.
     * 
     */
    public String remainingDelaySeconds() {
        return this.remainingDelaySeconds;
    }
    /**
     * @return The set of global transaction IDs corresponding to all transactions received by this replica from the source server. Empty if GTIDs are not in use.
     * 
     */
    public String retrievedGtidSet() {
        return this.retrievedGtidSet;
    }
    /**
     * @return The number of seconds the replica is behind the source server.
     * 
     */
    public String secondsBehindSource() {
        return this.secondsBehindSource;
    }
    /**
     * @return The host name or IP address of the source this replica is connected to.
     * 
     */
    public String sourceHost() {
        return this.sourceHost;
    }
    /**
     * @return The port used to connect to the source.
     * 
     */
    public Integer sourcePort() {
        return this.sourcePort;
    }
    /**
     * @return The server ID value from the source server.
     * 
     */
    public String sourceServerId() {
        return this.sourceServerId;
    }
    /**
     * @return The Universally Unique Identifier (UUID) value from the source server.
     * 
     */
    public String sourceUuid() {
        return this.sourceUuid;
    }
    /**
     * @return The number of transactions received by this replica from the source server.
     * 
     */
    public String transactionsReceived() {
        return this.transactionsReceived;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplierFilter> applierFilters;
        private Double applyDelay;
        private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplyError> applyErrors;
        private String applyStatus;
        private Integer busyWorkers;
        private String channelName;
        private String desiredDelaySeconds;
        private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemFetchError> fetchErrors;
        private String fetchStatus;
        private String gtidAssignment;
        private String relayLogStorageSpaceUsed;
        private String remainingDelaySeconds;
        private String retrievedGtidSet;
        private String secondsBehindSource;
        private String sourceHost;
        private Integer sourcePort;
        private String sourceServerId;
        private String sourceUuid;
        private String transactionsReceived;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applierFilters = defaults.applierFilters;
    	      this.applyDelay = defaults.applyDelay;
    	      this.applyErrors = defaults.applyErrors;
    	      this.applyStatus = defaults.applyStatus;
    	      this.busyWorkers = defaults.busyWorkers;
    	      this.channelName = defaults.channelName;
    	      this.desiredDelaySeconds = defaults.desiredDelaySeconds;
    	      this.fetchErrors = defaults.fetchErrors;
    	      this.fetchStatus = defaults.fetchStatus;
    	      this.gtidAssignment = defaults.gtidAssignment;
    	      this.relayLogStorageSpaceUsed = defaults.relayLogStorageSpaceUsed;
    	      this.remainingDelaySeconds = defaults.remainingDelaySeconds;
    	      this.retrievedGtidSet = defaults.retrievedGtidSet;
    	      this.secondsBehindSource = defaults.secondsBehindSource;
    	      this.sourceHost = defaults.sourceHost;
    	      this.sourcePort = defaults.sourcePort;
    	      this.sourceServerId = defaults.sourceServerId;
    	      this.sourceUuid = defaults.sourceUuid;
    	      this.transactionsReceived = defaults.transactionsReceived;
        }

        @CustomType.Setter
        public Builder applierFilters(List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplierFilter> applierFilters) {
            if (applierFilters == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "applierFilters");
            }
            this.applierFilters = applierFilters;
            return this;
        }
        public Builder applierFilters(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplierFilter... applierFilters) {
            return applierFilters(List.of(applierFilters));
        }
        @CustomType.Setter
        public Builder applyDelay(Double applyDelay) {
            if (applyDelay == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "applyDelay");
            }
            this.applyDelay = applyDelay;
            return this;
        }
        @CustomType.Setter
        public Builder applyErrors(List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplyError> applyErrors) {
            if (applyErrors == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "applyErrors");
            }
            this.applyErrors = applyErrors;
            return this;
        }
        public Builder applyErrors(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemApplyError... applyErrors) {
            return applyErrors(List.of(applyErrors));
        }
        @CustomType.Setter
        public Builder applyStatus(String applyStatus) {
            if (applyStatus == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "applyStatus");
            }
            this.applyStatus = applyStatus;
            return this;
        }
        @CustomType.Setter
        public Builder busyWorkers(Integer busyWorkers) {
            if (busyWorkers == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "busyWorkers");
            }
            this.busyWorkers = busyWorkers;
            return this;
        }
        @CustomType.Setter
        public Builder channelName(String channelName) {
            if (channelName == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "channelName");
            }
            this.channelName = channelName;
            return this;
        }
        @CustomType.Setter
        public Builder desiredDelaySeconds(String desiredDelaySeconds) {
            if (desiredDelaySeconds == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "desiredDelaySeconds");
            }
            this.desiredDelaySeconds = desiredDelaySeconds;
            return this;
        }
        @CustomType.Setter
        public Builder fetchErrors(List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemFetchError> fetchErrors) {
            if (fetchErrors == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "fetchErrors");
            }
            this.fetchErrors = fetchErrors;
            return this;
        }
        public Builder fetchErrors(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItemFetchError... fetchErrors) {
            return fetchErrors(List.of(fetchErrors));
        }
        @CustomType.Setter
        public Builder fetchStatus(String fetchStatus) {
            if (fetchStatus == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "fetchStatus");
            }
            this.fetchStatus = fetchStatus;
            return this;
        }
        @CustomType.Setter
        public Builder gtidAssignment(String gtidAssignment) {
            if (gtidAssignment == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "gtidAssignment");
            }
            this.gtidAssignment = gtidAssignment;
            return this;
        }
        @CustomType.Setter
        public Builder relayLogStorageSpaceUsed(String relayLogStorageSpaceUsed) {
            if (relayLogStorageSpaceUsed == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "relayLogStorageSpaceUsed");
            }
            this.relayLogStorageSpaceUsed = relayLogStorageSpaceUsed;
            return this;
        }
        @CustomType.Setter
        public Builder remainingDelaySeconds(String remainingDelaySeconds) {
            if (remainingDelaySeconds == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "remainingDelaySeconds");
            }
            this.remainingDelaySeconds = remainingDelaySeconds;
            return this;
        }
        @CustomType.Setter
        public Builder retrievedGtidSet(String retrievedGtidSet) {
            if (retrievedGtidSet == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "retrievedGtidSet");
            }
            this.retrievedGtidSet = retrievedGtidSet;
            return this;
        }
        @CustomType.Setter
        public Builder secondsBehindSource(String secondsBehindSource) {
            if (secondsBehindSource == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "secondsBehindSource");
            }
            this.secondsBehindSource = secondsBehindSource;
            return this;
        }
        @CustomType.Setter
        public Builder sourceHost(String sourceHost) {
            if (sourceHost == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "sourceHost");
            }
            this.sourceHost = sourceHost;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(Integer sourcePort) {
            if (sourcePort == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "sourcePort");
            }
            this.sourcePort = sourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder sourceServerId(String sourceServerId) {
            if (sourceServerId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "sourceServerId");
            }
            this.sourceServerId = sourceServerId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUuid(String sourceUuid) {
            if (sourceUuid == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "sourceUuid");
            }
            this.sourceUuid = sourceUuid;
            return this;
        }
        @CustomType.Setter
        public Builder transactionsReceived(String transactionsReceived) {
            if (transactionsReceived == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem", "transactionsReceived");
            }
            this.transactionsReceived = transactionsReceived;
            return this;
        }
        public GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem build() {
            final var _resultValue = new GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollectionItem();
            _resultValue.applierFilters = applierFilters;
            _resultValue.applyDelay = applyDelay;
            _resultValue.applyErrors = applyErrors;
            _resultValue.applyStatus = applyStatus;
            _resultValue.busyWorkers = busyWorkers;
            _resultValue.channelName = channelName;
            _resultValue.desiredDelaySeconds = desiredDelaySeconds;
            _resultValue.fetchErrors = fetchErrors;
            _resultValue.fetchStatus = fetchStatus;
            _resultValue.gtidAssignment = gtidAssignment;
            _resultValue.relayLogStorageSpaceUsed = relayLogStorageSpaceUsed;
            _resultValue.remainingDelaySeconds = remainingDelaySeconds;
            _resultValue.retrievedGtidSet = retrievedGtidSet;
            _resultValue.secondsBehindSource = secondsBehindSource;
            _resultValue.sourceHost = sourceHost;
            _resultValue.sourcePort = sourcePort;
            _resultValue.sourceServerId = sourceServerId;
            _resultValue.sourceUuid = sourceUuid;
            _resultValue.transactionsReceived = transactionsReceived;
            return _resultValue;
        }
    }
}
