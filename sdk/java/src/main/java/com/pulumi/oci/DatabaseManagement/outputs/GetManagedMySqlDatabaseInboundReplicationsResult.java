// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseInboundReplicationsFilter;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedMySqlDatabaseInboundReplicationsResult {
    private @Nullable List<GetManagedMySqlDatabaseInboundReplicationsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String managedMySqlDatabaseId;
    /**
     * @return The list of managed_my_sql_database_inbound_replication_collection.
     * 
     */
    private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection> managedMySqlDatabaseInboundReplicationCollections;

    private GetManagedMySqlDatabaseInboundReplicationsResult() {}
    public List<GetManagedMySqlDatabaseInboundReplicationsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }
    /**
     * @return The list of managed_my_sql_database_inbound_replication_collection.
     * 
     */
    public List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection> managedMySqlDatabaseInboundReplicationCollections() {
        return this.managedMySqlDatabaseInboundReplicationCollections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseInboundReplicationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetManagedMySqlDatabaseInboundReplicationsFilter> filters;
        private String id;
        private String managedMySqlDatabaseId;
        private List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection> managedMySqlDatabaseInboundReplicationCollections;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseInboundReplicationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.managedMySqlDatabaseId = defaults.managedMySqlDatabaseId;
    	      this.managedMySqlDatabaseInboundReplicationCollections = defaults.managedMySqlDatabaseInboundReplicationCollections;
        }

        @CustomType.Setter
        public Builder filters(@Nullable List<GetManagedMySqlDatabaseInboundReplicationsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetManagedMySqlDatabaseInboundReplicationsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            if (managedMySqlDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsResult", "managedMySqlDatabaseId");
            }
            this.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder managedMySqlDatabaseInboundReplicationCollections(List<GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection> managedMySqlDatabaseInboundReplicationCollections) {
            if (managedMySqlDatabaseInboundReplicationCollections == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseInboundReplicationsResult", "managedMySqlDatabaseInboundReplicationCollections");
            }
            this.managedMySqlDatabaseInboundReplicationCollections = managedMySqlDatabaseInboundReplicationCollections;
            return this;
        }
        public Builder managedMySqlDatabaseInboundReplicationCollections(GetManagedMySqlDatabaseInboundReplicationsManagedMySqlDatabaseInboundReplicationCollection... managedMySqlDatabaseInboundReplicationCollections) {
            return managedMySqlDatabaseInboundReplicationCollections(List.of(managedMySqlDatabaseInboundReplicationCollections));
        }
        public GetManagedMySqlDatabaseInboundReplicationsResult build() {
            final var _resultValue = new GetManagedMySqlDatabaseInboundReplicationsResult();
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.managedMySqlDatabaseId = managedMySqlDatabaseId;
            _resultValue.managedMySqlDatabaseInboundReplicationCollections = managedMySqlDatabaseInboundReplicationCollections;
            return _resultValue;
        }
    }
}
