// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem {
    /**
     * @return The host name of the replica server, as specified on the replica with the --report-host option. This can differ from the machine name as configured in the operating system.
     * 
     */
    private String replicaHost;
    /**
     * @return The port on the replica server, as specified on the replica with the --report-port option. A zero in this column means that the replica port (--report-port) was not set.
     * 
     */
    private Integer replicaPort;
    /**
     * @return The server ID value of the replica.
     * 
     */
    private String replicaServerId;
    /**
     * @return The Universally Unique Identifier (UUID) value of the replica server.
     * 
     */
    private String replicaUuid;

    private GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem() {}
    /**
     * @return The host name of the replica server, as specified on the replica with the --report-host option. This can differ from the machine name as configured in the operating system.
     * 
     */
    public String replicaHost() {
        return this.replicaHost;
    }
    /**
     * @return The port on the replica server, as specified on the replica with the --report-port option. A zero in this column means that the replica port (--report-port) was not set.
     * 
     */
    public Integer replicaPort() {
        return this.replicaPort;
    }
    /**
     * @return The server ID value of the replica.
     * 
     */
    public String replicaServerId() {
        return this.replicaServerId;
    }
    /**
     * @return The Universally Unique Identifier (UUID) value of the replica server.
     * 
     */
    public String replicaUuid() {
        return this.replicaUuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String replicaHost;
        private Integer replicaPort;
        private String replicaServerId;
        private String replicaUuid;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.replicaHost = defaults.replicaHost;
    	      this.replicaPort = defaults.replicaPort;
    	      this.replicaServerId = defaults.replicaServerId;
    	      this.replicaUuid = defaults.replicaUuid;
        }

        @CustomType.Setter
        public Builder replicaHost(String replicaHost) {
            if (replicaHost == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem", "replicaHost");
            }
            this.replicaHost = replicaHost;
            return this;
        }
        @CustomType.Setter
        public Builder replicaPort(Integer replicaPort) {
            if (replicaPort == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem", "replicaPort");
            }
            this.replicaPort = replicaPort;
            return this;
        }
        @CustomType.Setter
        public Builder replicaServerId(String replicaServerId) {
            if (replicaServerId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem", "replicaServerId");
            }
            this.replicaServerId = replicaServerId;
            return this;
        }
        @CustomType.Setter
        public Builder replicaUuid(String replicaUuid) {
            if (replicaUuid == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem", "replicaUuid");
            }
            this.replicaUuid = replicaUuid;
            return this;
        }
        public GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem build() {
            final var _resultValue = new GetManagedMySqlDatabaseOutboundReplicationsManagedMySqlDatabaseOutboundReplicationCollectionItem();
            _resultValue.replicaHost = replicaHost;
            _resultValue.replicaPort = replicaPort;
            _resultValue.replicaServerId = replicaServerId;
            _resultValue.replicaUuid = replicaUuid;
            return _resultValue;
        }
    }
}
