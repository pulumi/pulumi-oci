// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseQueryDetailQuerySampleDetail {
    /**
     * @return The total amount of time that has been spent executing the query sample.
     * 
     */
    private String executionTime;
    /**
     * @return The host from which the query sample was run.
     * 
     */
    private String host;
    /**
     * @return The MySQL instance against which the query sample was run.
     * 
     */
    private String mysqlInstance;
    /**
     * @return The query sample mapped by MySQL to a given normalized query.
     * 
     */
    private String querySampleText;
    /**
     * @return The thread id of the connection.
     * 
     */
    private Integer threadId;
    /**
     * @return The date and time the query sample was last seen.
     * 
     */
    private String timeQuerySampleSeen;
    /**
     * @return The user who ran the query sample.
     * 
     */
    private String user;

    private GetManagedMySqlDatabaseQueryDetailQuerySampleDetail() {}
    /**
     * @return The total amount of time that has been spent executing the query sample.
     * 
     */
    public String executionTime() {
        return this.executionTime;
    }
    /**
     * @return The host from which the query sample was run.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The MySQL instance against which the query sample was run.
     * 
     */
    public String mysqlInstance() {
        return this.mysqlInstance;
    }
    /**
     * @return The query sample mapped by MySQL to a given normalized query.
     * 
     */
    public String querySampleText() {
        return this.querySampleText;
    }
    /**
     * @return The thread id of the connection.
     * 
     */
    public Integer threadId() {
        return this.threadId;
    }
    /**
     * @return The date and time the query sample was last seen.
     * 
     */
    public String timeQuerySampleSeen() {
        return this.timeQuerySampleSeen;
    }
    /**
     * @return The user who ran the query sample.
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseQueryDetailQuerySampleDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String executionTime;
        private String host;
        private String mysqlInstance;
        private String querySampleText;
        private Integer threadId;
        private String timeQuerySampleSeen;
        private String user;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseQueryDetailQuerySampleDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.executionTime = defaults.executionTime;
    	      this.host = defaults.host;
    	      this.mysqlInstance = defaults.mysqlInstance;
    	      this.querySampleText = defaults.querySampleText;
    	      this.threadId = defaults.threadId;
    	      this.timeQuerySampleSeen = defaults.timeQuerySampleSeen;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder executionTime(String executionTime) {
            if (executionTime == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseQueryDetailQuerySampleDetail", "executionTime");
            }
            this.executionTime = executionTime;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseQueryDetailQuerySampleDetail", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder mysqlInstance(String mysqlInstance) {
            if (mysqlInstance == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseQueryDetailQuerySampleDetail", "mysqlInstance");
            }
            this.mysqlInstance = mysqlInstance;
            return this;
        }
        @CustomType.Setter
        public Builder querySampleText(String querySampleText) {
            if (querySampleText == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseQueryDetailQuerySampleDetail", "querySampleText");
            }
            this.querySampleText = querySampleText;
            return this;
        }
        @CustomType.Setter
        public Builder threadId(Integer threadId) {
            if (threadId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseQueryDetailQuerySampleDetail", "threadId");
            }
            this.threadId = threadId;
            return this;
        }
        @CustomType.Setter
        public Builder timeQuerySampleSeen(String timeQuerySampleSeen) {
            if (timeQuerySampleSeen == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseQueryDetailQuerySampleDetail", "timeQuerySampleSeen");
            }
            this.timeQuerySampleSeen = timeQuerySampleSeen;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseQueryDetailQuerySampleDetail", "user");
            }
            this.user = user;
            return this;
        }
        public GetManagedMySqlDatabaseQueryDetailQuerySampleDetail build() {
            final var _resultValue = new GetManagedMySqlDatabaseQueryDetailQuerySampleDetail();
            _resultValue.executionTime = executionTime;
            _resultValue.host = host;
            _resultValue.mysqlInstance = mysqlInstance;
            _resultValue.querySampleText = querySampleText;
            _resultValue.threadId = threadId;
            _resultValue.timeQuerySampleSeen = timeQuerySampleSeen;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
