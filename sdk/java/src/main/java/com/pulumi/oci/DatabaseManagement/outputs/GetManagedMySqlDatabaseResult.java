// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedMySqlDatabaseResult {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return MySQL Database Name
     * 
     */
    private @Nullable String dbName;
    /**
     * @return MySQL Database Version
     * 
     */
    private @Nullable String dbVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private @Nullable String id;
    private String managedMySqlDatabaseId;
    /**
     * @return The name of the Managed MySQL Database.
     * 
     */
    private @Nullable String name;
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    private @Nullable String timeCreated;

    private GetManagedMySqlDatabaseResult() {}
    /**
     * @return The OCID of the compartment.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return MySQL Database Name
     * 
     */
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    /**
     * @return MySQL Database Version
     * 
     */
    public Optional<String> dbVersion() {
        return Optional.ofNullable(this.dbVersion);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public String managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }
    /**
     * @return The name of the Managed MySQL Database.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The date and time the Managed Database was created.
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String dbName;
        private @Nullable String dbVersion;
        private @Nullable String id;
        private String managedMySqlDatabaseId;
        private @Nullable String name;
        private @Nullable String timeCreated;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.dbName = defaults.dbName;
    	      this.dbVersion = defaults.dbVersion;
    	      this.id = defaults.id;
    	      this.managedMySqlDatabaseId = defaults.managedMySqlDatabaseId;
    	      this.name = defaults.name;
    	      this.timeCreated = defaults.timeCreated;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(@Nullable String dbVersion) {
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            this.managedMySqlDatabaseId = Objects.requireNonNull(managedMySqlDatabaseId);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        public GetManagedMySqlDatabaseResult build() {
            final var o = new GetManagedMySqlDatabaseResult();
            o.compartmentId = compartmentId;
            o.dbName = dbName;
            o.dbVersion = dbVersion;
            o.id = id;
            o.managedMySqlDatabaseId = managedMySqlDatabaseId;
            o.name = name;
            o.timeCreated = timeCreated;
            return o;
        }
    }
}
