// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseManagement.outputs.GetManagedMySqlDatabaseHeatWaveNode;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseResult {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The type of the MySQL Database. Indicates whether the database is external or MDS.
     * 
     */
    private String databaseType;
    /**
     * @return The name of the MySQL Database.
     * 
     */
    private String dbName;
    /**
     * @return The version of the MySQL Database.
     * 
     */
    private String dbVersion;
    /**
     * @return The name of the HeatWave cluster.
     * 
     */
    private String heatWaveClusterDisplayName;
    /**
     * @return The total memory belonging to the HeatWave cluster in GBs.
     * 
     */
    private Integer heatWaveMemorySize;
    /**
     * @return The shape of the nodes in the HeatWave cluster.
     * 
     */
    private String heatWaveNodeShape;
    /**
     * @return The information about individual HeatWave nodes in the cluster.
     * 
     */
    private List<GetManagedMySqlDatabaseHeatWaveNode> heatWaveNodes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the HeatWave cluster is active or not.
     * 
     */
    private Boolean isHeatWaveActive;
    /**
     * @return Indicates whether HeatWave is enabled for the MySQL Database System or not.
     * 
     */
    private Boolean isHeatWaveEnabled;
    /**
     * @return Indicates whether HeatWave Lakehouse is enabled for the MySQL Database System or not.
     * 
     */
    private Boolean isLakehouseEnabled;
    private String managedMySqlDatabaseId;
    /**
     * @return Indicates database management status.
     * 
     */
    private String managementState;
    /**
     * @return The name of the Managed MySQL Database.
     * 
     */
    private String name;
    /**
     * @return Indicates lifecycle  state of the resource.
     * 
     */
    private String state;
    /**
     * @return The date and time the HeatWave node was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the Managed MySQL Database was created.
     * 
     */
    private String timeCreatedHeatWave;
    /**
     * @return The date and time the Managed MySQL Database was updated.
     * 
     */
    private String timeUpdated;

    private GetManagedMySqlDatabaseResult() {}
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The type of the MySQL Database. Indicates whether the database is external or MDS.
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }
    /**
     * @return The name of the MySQL Database.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return The version of the MySQL Database.
     * 
     */
    public String dbVersion() {
        return this.dbVersion;
    }
    /**
     * @return The name of the HeatWave cluster.
     * 
     */
    public String heatWaveClusterDisplayName() {
        return this.heatWaveClusterDisplayName;
    }
    /**
     * @return The total memory belonging to the HeatWave cluster in GBs.
     * 
     */
    public Integer heatWaveMemorySize() {
        return this.heatWaveMemorySize;
    }
    /**
     * @return The shape of the nodes in the HeatWave cluster.
     * 
     */
    public String heatWaveNodeShape() {
        return this.heatWaveNodeShape;
    }
    /**
     * @return The information about individual HeatWave nodes in the cluster.
     * 
     */
    public List<GetManagedMySqlDatabaseHeatWaveNode> heatWaveNodes() {
        return this.heatWaveNodes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the HeatWave cluster is active or not.
     * 
     */
    public Boolean isHeatWaveActive() {
        return this.isHeatWaveActive;
    }
    /**
     * @return Indicates whether HeatWave is enabled for the MySQL Database System or not.
     * 
     */
    public Boolean isHeatWaveEnabled() {
        return this.isHeatWaveEnabled;
    }
    /**
     * @return Indicates whether HeatWave Lakehouse is enabled for the MySQL Database System or not.
     * 
     */
    public Boolean isLakehouseEnabled() {
        return this.isLakehouseEnabled;
    }
    public String managedMySqlDatabaseId() {
        return this.managedMySqlDatabaseId;
    }
    /**
     * @return Indicates database management status.
     * 
     */
    public String managementState() {
        return this.managementState;
    }
    /**
     * @return The name of the Managed MySQL Database.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates lifecycle  state of the resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The date and time the HeatWave node was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the Managed MySQL Database was created.
     * 
     */
    public String timeCreatedHeatWave() {
        return this.timeCreatedHeatWave;
    }
    /**
     * @return The date and time the Managed MySQL Database was updated.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String databaseType;
        private String dbName;
        private String dbVersion;
        private String heatWaveClusterDisplayName;
        private Integer heatWaveMemorySize;
        private String heatWaveNodeShape;
        private List<GetManagedMySqlDatabaseHeatWaveNode> heatWaveNodes;
        private String id;
        private Boolean isHeatWaveActive;
        private Boolean isHeatWaveEnabled;
        private Boolean isLakehouseEnabled;
        private String managedMySqlDatabaseId;
        private String managementState;
        private String name;
        private String state;
        private String timeCreated;
        private String timeCreatedHeatWave;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseType = defaults.databaseType;
    	      this.dbName = defaults.dbName;
    	      this.dbVersion = defaults.dbVersion;
    	      this.heatWaveClusterDisplayName = defaults.heatWaveClusterDisplayName;
    	      this.heatWaveMemorySize = defaults.heatWaveMemorySize;
    	      this.heatWaveNodeShape = defaults.heatWaveNodeShape;
    	      this.heatWaveNodes = defaults.heatWaveNodes;
    	      this.id = defaults.id;
    	      this.isHeatWaveActive = defaults.isHeatWaveActive;
    	      this.isHeatWaveEnabled = defaults.isHeatWaveEnabled;
    	      this.isLakehouseEnabled = defaults.isLakehouseEnabled;
    	      this.managedMySqlDatabaseId = defaults.managedMySqlDatabaseId;
    	      this.managementState = defaults.managementState;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeCreatedHeatWave = defaults.timeCreatedHeatWave;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            if (dbName == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "dbName");
            }
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbVersion(String dbVersion) {
            if (dbVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "dbVersion");
            }
            this.dbVersion = dbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder heatWaveClusterDisplayName(String heatWaveClusterDisplayName) {
            if (heatWaveClusterDisplayName == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "heatWaveClusterDisplayName");
            }
            this.heatWaveClusterDisplayName = heatWaveClusterDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder heatWaveMemorySize(Integer heatWaveMemorySize) {
            if (heatWaveMemorySize == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "heatWaveMemorySize");
            }
            this.heatWaveMemorySize = heatWaveMemorySize;
            return this;
        }
        @CustomType.Setter
        public Builder heatWaveNodeShape(String heatWaveNodeShape) {
            if (heatWaveNodeShape == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "heatWaveNodeShape");
            }
            this.heatWaveNodeShape = heatWaveNodeShape;
            return this;
        }
        @CustomType.Setter
        public Builder heatWaveNodes(List<GetManagedMySqlDatabaseHeatWaveNode> heatWaveNodes) {
            if (heatWaveNodes == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "heatWaveNodes");
            }
            this.heatWaveNodes = heatWaveNodes;
            return this;
        }
        public Builder heatWaveNodes(GetManagedMySqlDatabaseHeatWaveNode... heatWaveNodes) {
            return heatWaveNodes(List.of(heatWaveNodes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isHeatWaveActive(Boolean isHeatWaveActive) {
            if (isHeatWaveActive == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "isHeatWaveActive");
            }
            this.isHeatWaveActive = isHeatWaveActive;
            return this;
        }
        @CustomType.Setter
        public Builder isHeatWaveEnabled(Boolean isHeatWaveEnabled) {
            if (isHeatWaveEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "isHeatWaveEnabled");
            }
            this.isHeatWaveEnabled = isHeatWaveEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isLakehouseEnabled(Boolean isLakehouseEnabled) {
            if (isLakehouseEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "isLakehouseEnabled");
            }
            this.isLakehouseEnabled = isLakehouseEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder managedMySqlDatabaseId(String managedMySqlDatabaseId) {
            if (managedMySqlDatabaseId == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "managedMySqlDatabaseId");
            }
            this.managedMySqlDatabaseId = managedMySqlDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder managementState(String managementState) {
            if (managementState == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "managementState");
            }
            this.managementState = managementState;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreatedHeatWave(String timeCreatedHeatWave) {
            if (timeCreatedHeatWave == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "timeCreatedHeatWave");
            }
            this.timeCreatedHeatWave = timeCreatedHeatWave;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetManagedMySqlDatabaseResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetManagedMySqlDatabaseResult build() {
            final var _resultValue = new GetManagedMySqlDatabaseResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseType = databaseType;
            _resultValue.dbName = dbName;
            _resultValue.dbVersion = dbVersion;
            _resultValue.heatWaveClusterDisplayName = heatWaveClusterDisplayName;
            _resultValue.heatWaveMemorySize = heatWaveMemorySize;
            _resultValue.heatWaveNodeShape = heatWaveNodeShape;
            _resultValue.heatWaveNodes = heatWaveNodes;
            _resultValue.id = id;
            _resultValue.isHeatWaveActive = isHeatWaveActive;
            _resultValue.isHeatWaveEnabled = isHeatWaveEnabled;
            _resultValue.isLakehouseEnabled = isLakehouseEnabled;
            _resultValue.managedMySqlDatabaseId = managedMySqlDatabaseId;
            _resultValue.managementState = managementState;
            _resultValue.name = name;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeCreatedHeatWave = timeCreatedHeatWave;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
