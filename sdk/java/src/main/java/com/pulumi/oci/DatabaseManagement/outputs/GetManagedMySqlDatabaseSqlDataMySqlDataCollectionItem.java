// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem {
    /**
     * @return The Average Execution Time.
     * 
     */
    private @Nullable Double avgTimerWait;
    /**
     * @return The Number Of Times The Query Has Been Executed.
     * 
     */
    private @Nullable Double countStar;
    /**
     * @return The Digest Of The Normalized Query.
     * 
     */
    private @Nullable String digest;
    /**
     * @return The Normalized Query.
     * 
     */
    private @Nullable String digestText;
    /**
     * @return When The Query Was First Seen. When The Table Is Truncated, The First Seen Value Is Also Reset.
     * 
     */
    private @Nullable String firstSeen;
    /**
     * @return When The Query Was Seen The Last Time.
     * 
     */
    private @Nullable String lastSeen;
    /**
     * @return The Slowest The Query Has Been Executed.
     * 
     */
    private @Nullable Double maxTimerWait;
    /**
     * @return The Fastest The Query Has Been Executed.
     * 
     */
    private @Nullable Double minTimerWait;
    /**
     * @return The 95th Percentile Of The Query Latency. That Is, 95% Of The Queries Complete In The Time Given Or In Less Time.
     * 
     */
    private @Nullable Double quantile95;
    /**
     * @return The 99th Percentile Of The Query Latency.
     * 
     */
    private @Nullable Double quantile99;
    /**
     * @return The 99.9th Percentile Of The Query Latency.
     * 
     */
    private @Nullable Double quantile999;
    /**
     * @return The Schema That Was The Default Schema When Executing The Query. If No Schema Was The Default, The Value Is NULL.
     * 
     */
    private @Nullable String schemaName;
    /**
     * @return The Total Number Of On-Disk Internal Temporary Tables That Have Been Created By The Query.
     * 
     */
    private @Nullable Double sumCreatedTempDiskTables;
    /**
     * @return The Total Number Of Internal Temporary Tables – Whether Created In Memory Or On Disk – That Have Been Created By The Query.
     * 
     */
    private @Nullable Double sumCreatedTempTables;
    /**
     * @return The Total Number Of Errors That Have Been Encountered Executing The Query.
     * 
     */
    private @Nullable Double sumErrors;
    /**
     * @return The Total Amount Of Time That Has Been Spent Waiting For Table Locks.
     * 
     */
    private @Nullable Double sumLockTime;
    /**
     * @return The Total Number Of Times No Good Index Was Used. This Means That The ExtraColumn In The EXPLAIN Output Includes “Range Checked For Each Record.”
     * 
     */
    private @Nullable Double sumNoGoodIndexUsed;
    /**
     * @return The Total Number Of Times No Index Was Used To Execute The Query.
     * 
     */
    private @Nullable Double sumNoIndexUsed;
    /**
     * @return The Total Number Of Rows That Have Been Modified By The Query.
     * 
     */
    private @Nullable Double sumRowsAffected;
    /**
     * @return The Total Number Of Rows That Have Been Examined By The Query.
     * 
     */
    private @Nullable Double sumRowsExamined;
    /**
     * @return The Total Number Of Rows That Have Been Returned (Sent) To The Client.
     * 
     */
    private @Nullable Double sumRowsSent;
    /**
     * @return The Total Number Of Joins That Have Performed Full Table Scans As There Is No Index For The Join Condition Or There Is No Join Condition. This Is The Same That Increments The Select_full_join Status Variable.
     * 
     */
    private @Nullable Double sumSelectFullJoin;
    /**
     * @return The Total Number Of Joins That Use A Full Range Search. This Is The Same That Increments The Select_full_range_join Status Variable.
     * 
     */
    private @Nullable Double sumSelectFullRangeJoin;
    /**
     * @return The Total Number Of Times The Query Has Used A Range Search. This Is The Same That Increments The Select_range Status Variable.
     * 
     */
    private @Nullable Double sumSelectRange;
    /**
     * @return The Total Number Of Joins By The Query Where The Join Does Not Have An Index That Checks For The Index Usage After Each Row. This Is The Same That Increments The Select_range_check Status Variable.
     * 
     */
    private @Nullable Double sumSelectRangeCheck;
    /**
     * @return The Total Number Of Times The Query Has Performed A Full Table Scan On The First Table In The Join. This Is The Same That Increments The Select_scan Status Variable.
     * 
     */
    private @Nullable Double sumSelectScan;
    /**
     * @return The Total Number Of Sort Merge Passes That Have Been Done To Sort The Result Of The Query. This Is The Same That Increments The Sort_merge_passes Status Variable.
     * 
     */
    private @Nullable Double sumSortMergePasses;
    /**
     * @return The Total Number Of Times A Sort Was Done Using Ranges. This Is The Same That Increments The Sort_range Status Variable.
     * 
     */
    private @Nullable Double sumSortRange;
    /**
     * @return The Total Number Of Rows Sorted. This Is The Same That Increments The Sort_rowsStatus Variable.
     * 
     */
    private @Nullable Double sumSortRows;
    /**
     * @return The Total Number Of Times A Sort Was Done By Scanning The Table. This Is The Same That Increments The Sort_scan Status Variable.
     * 
     */
    private @Nullable Double sumSortScan;
    /**
     * @return The Total Amount Of Time That Has Been Spent Executing The Query.
     * 
     */
    private @Nullable Double sumTimerWait;
    /**
     * @return The Total Number Of Warnings That Have Been Encountered Executing The Query.
     * 
     */
    private @Nullable Double sumWarnings;

    private GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem() {}
    /**
     * @return The Average Execution Time.
     * 
     */
    public Optional<Double> avgTimerWait() {
        return Optional.ofNullable(this.avgTimerWait);
    }
    /**
     * @return The Number Of Times The Query Has Been Executed.
     * 
     */
    public Optional<Double> countStar() {
        return Optional.ofNullable(this.countStar);
    }
    /**
     * @return The Digest Of The Normalized Query.
     * 
     */
    public Optional<String> digest() {
        return Optional.ofNullable(this.digest);
    }
    /**
     * @return The Normalized Query.
     * 
     */
    public Optional<String> digestText() {
        return Optional.ofNullable(this.digestText);
    }
    /**
     * @return When The Query Was First Seen. When The Table Is Truncated, The First Seen Value Is Also Reset.
     * 
     */
    public Optional<String> firstSeen() {
        return Optional.ofNullable(this.firstSeen);
    }
    /**
     * @return When The Query Was Seen The Last Time.
     * 
     */
    public Optional<String> lastSeen() {
        return Optional.ofNullable(this.lastSeen);
    }
    /**
     * @return The Slowest The Query Has Been Executed.
     * 
     */
    public Optional<Double> maxTimerWait() {
        return Optional.ofNullable(this.maxTimerWait);
    }
    /**
     * @return The Fastest The Query Has Been Executed.
     * 
     */
    public Optional<Double> minTimerWait() {
        return Optional.ofNullable(this.minTimerWait);
    }
    /**
     * @return The 95th Percentile Of The Query Latency. That Is, 95% Of The Queries Complete In The Time Given Or In Less Time.
     * 
     */
    public Optional<Double> quantile95() {
        return Optional.ofNullable(this.quantile95);
    }
    /**
     * @return The 99th Percentile Of The Query Latency.
     * 
     */
    public Optional<Double> quantile99() {
        return Optional.ofNullable(this.quantile99);
    }
    /**
     * @return The 99.9th Percentile Of The Query Latency.
     * 
     */
    public Optional<Double> quantile999() {
        return Optional.ofNullable(this.quantile999);
    }
    /**
     * @return The Schema That Was The Default Schema When Executing The Query. If No Schema Was The Default, The Value Is NULL.
     * 
     */
    public Optional<String> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }
    /**
     * @return The Total Number Of On-Disk Internal Temporary Tables That Have Been Created By The Query.
     * 
     */
    public Optional<Double> sumCreatedTempDiskTables() {
        return Optional.ofNullable(this.sumCreatedTempDiskTables);
    }
    /**
     * @return The Total Number Of Internal Temporary Tables – Whether Created In Memory Or On Disk – That Have Been Created By The Query.
     * 
     */
    public Optional<Double> sumCreatedTempTables() {
        return Optional.ofNullable(this.sumCreatedTempTables);
    }
    /**
     * @return The Total Number Of Errors That Have Been Encountered Executing The Query.
     * 
     */
    public Optional<Double> sumErrors() {
        return Optional.ofNullable(this.sumErrors);
    }
    /**
     * @return The Total Amount Of Time That Has Been Spent Waiting For Table Locks.
     * 
     */
    public Optional<Double> sumLockTime() {
        return Optional.ofNullable(this.sumLockTime);
    }
    /**
     * @return The Total Number Of Times No Good Index Was Used. This Means That The ExtraColumn In The EXPLAIN Output Includes “Range Checked For Each Record.”
     * 
     */
    public Optional<Double> sumNoGoodIndexUsed() {
        return Optional.ofNullable(this.sumNoGoodIndexUsed);
    }
    /**
     * @return The Total Number Of Times No Index Was Used To Execute The Query.
     * 
     */
    public Optional<Double> sumNoIndexUsed() {
        return Optional.ofNullable(this.sumNoIndexUsed);
    }
    /**
     * @return The Total Number Of Rows That Have Been Modified By The Query.
     * 
     */
    public Optional<Double> sumRowsAffected() {
        return Optional.ofNullable(this.sumRowsAffected);
    }
    /**
     * @return The Total Number Of Rows That Have Been Examined By The Query.
     * 
     */
    public Optional<Double> sumRowsExamined() {
        return Optional.ofNullable(this.sumRowsExamined);
    }
    /**
     * @return The Total Number Of Rows That Have Been Returned (Sent) To The Client.
     * 
     */
    public Optional<Double> sumRowsSent() {
        return Optional.ofNullable(this.sumRowsSent);
    }
    /**
     * @return The Total Number Of Joins That Have Performed Full Table Scans As There Is No Index For The Join Condition Or There Is No Join Condition. This Is The Same That Increments The Select_full_join Status Variable.
     * 
     */
    public Optional<Double> sumSelectFullJoin() {
        return Optional.ofNullable(this.sumSelectFullJoin);
    }
    /**
     * @return The Total Number Of Joins That Use A Full Range Search. This Is The Same That Increments The Select_full_range_join Status Variable.
     * 
     */
    public Optional<Double> sumSelectFullRangeJoin() {
        return Optional.ofNullable(this.sumSelectFullRangeJoin);
    }
    /**
     * @return The Total Number Of Times The Query Has Used A Range Search. This Is The Same That Increments The Select_range Status Variable.
     * 
     */
    public Optional<Double> sumSelectRange() {
        return Optional.ofNullable(this.sumSelectRange);
    }
    /**
     * @return The Total Number Of Joins By The Query Where The Join Does Not Have An Index That Checks For The Index Usage After Each Row. This Is The Same That Increments The Select_range_check Status Variable.
     * 
     */
    public Optional<Double> sumSelectRangeCheck() {
        return Optional.ofNullable(this.sumSelectRangeCheck);
    }
    /**
     * @return The Total Number Of Times The Query Has Performed A Full Table Scan On The First Table In The Join. This Is The Same That Increments The Select_scan Status Variable.
     * 
     */
    public Optional<Double> sumSelectScan() {
        return Optional.ofNullable(this.sumSelectScan);
    }
    /**
     * @return The Total Number Of Sort Merge Passes That Have Been Done To Sort The Result Of The Query. This Is The Same That Increments The Sort_merge_passes Status Variable.
     * 
     */
    public Optional<Double> sumSortMergePasses() {
        return Optional.ofNullable(this.sumSortMergePasses);
    }
    /**
     * @return The Total Number Of Times A Sort Was Done Using Ranges. This Is The Same That Increments The Sort_range Status Variable.
     * 
     */
    public Optional<Double> sumSortRange() {
        return Optional.ofNullable(this.sumSortRange);
    }
    /**
     * @return The Total Number Of Rows Sorted. This Is The Same That Increments The Sort_rowsStatus Variable.
     * 
     */
    public Optional<Double> sumSortRows() {
        return Optional.ofNullable(this.sumSortRows);
    }
    /**
     * @return The Total Number Of Times A Sort Was Done By Scanning The Table. This Is The Same That Increments The Sort_scan Status Variable.
     * 
     */
    public Optional<Double> sumSortScan() {
        return Optional.ofNullable(this.sumSortScan);
    }
    /**
     * @return The Total Amount Of Time That Has Been Spent Executing The Query.
     * 
     */
    public Optional<Double> sumTimerWait() {
        return Optional.ofNullable(this.sumTimerWait);
    }
    /**
     * @return The Total Number Of Warnings That Have Been Encountered Executing The Query.
     * 
     */
    public Optional<Double> sumWarnings() {
        return Optional.ofNullable(this.sumWarnings);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double avgTimerWait;
        private @Nullable Double countStar;
        private @Nullable String digest;
        private @Nullable String digestText;
        private @Nullable String firstSeen;
        private @Nullable String lastSeen;
        private @Nullable Double maxTimerWait;
        private @Nullable Double minTimerWait;
        private @Nullable Double quantile95;
        private @Nullable Double quantile99;
        private @Nullable Double quantile999;
        private @Nullable String schemaName;
        private @Nullable Double sumCreatedTempDiskTables;
        private @Nullable Double sumCreatedTempTables;
        private @Nullable Double sumErrors;
        private @Nullable Double sumLockTime;
        private @Nullable Double sumNoGoodIndexUsed;
        private @Nullable Double sumNoIndexUsed;
        private @Nullable Double sumRowsAffected;
        private @Nullable Double sumRowsExamined;
        private @Nullable Double sumRowsSent;
        private @Nullable Double sumSelectFullJoin;
        private @Nullable Double sumSelectFullRangeJoin;
        private @Nullable Double sumSelectRange;
        private @Nullable Double sumSelectRangeCheck;
        private @Nullable Double sumSelectScan;
        private @Nullable Double sumSortMergePasses;
        private @Nullable Double sumSortRange;
        private @Nullable Double sumSortRows;
        private @Nullable Double sumSortScan;
        private @Nullable Double sumTimerWait;
        private @Nullable Double sumWarnings;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.avgTimerWait = defaults.avgTimerWait;
    	      this.countStar = defaults.countStar;
    	      this.digest = defaults.digest;
    	      this.digestText = defaults.digestText;
    	      this.firstSeen = defaults.firstSeen;
    	      this.lastSeen = defaults.lastSeen;
    	      this.maxTimerWait = defaults.maxTimerWait;
    	      this.minTimerWait = defaults.minTimerWait;
    	      this.quantile95 = defaults.quantile95;
    	      this.quantile99 = defaults.quantile99;
    	      this.quantile999 = defaults.quantile999;
    	      this.schemaName = defaults.schemaName;
    	      this.sumCreatedTempDiskTables = defaults.sumCreatedTempDiskTables;
    	      this.sumCreatedTempTables = defaults.sumCreatedTempTables;
    	      this.sumErrors = defaults.sumErrors;
    	      this.sumLockTime = defaults.sumLockTime;
    	      this.sumNoGoodIndexUsed = defaults.sumNoGoodIndexUsed;
    	      this.sumNoIndexUsed = defaults.sumNoIndexUsed;
    	      this.sumRowsAffected = defaults.sumRowsAffected;
    	      this.sumRowsExamined = defaults.sumRowsExamined;
    	      this.sumRowsSent = defaults.sumRowsSent;
    	      this.sumSelectFullJoin = defaults.sumSelectFullJoin;
    	      this.sumSelectFullRangeJoin = defaults.sumSelectFullRangeJoin;
    	      this.sumSelectRange = defaults.sumSelectRange;
    	      this.sumSelectRangeCheck = defaults.sumSelectRangeCheck;
    	      this.sumSelectScan = defaults.sumSelectScan;
    	      this.sumSortMergePasses = defaults.sumSortMergePasses;
    	      this.sumSortRange = defaults.sumSortRange;
    	      this.sumSortRows = defaults.sumSortRows;
    	      this.sumSortScan = defaults.sumSortScan;
    	      this.sumTimerWait = defaults.sumTimerWait;
    	      this.sumWarnings = defaults.sumWarnings;
        }

        @CustomType.Setter
        public Builder avgTimerWait(@Nullable Double avgTimerWait) {
            this.avgTimerWait = avgTimerWait;
            return this;
        }
        @CustomType.Setter
        public Builder countStar(@Nullable Double countStar) {
            this.countStar = countStar;
            return this;
        }
        @CustomType.Setter
        public Builder digest(@Nullable String digest) {
            this.digest = digest;
            return this;
        }
        @CustomType.Setter
        public Builder digestText(@Nullable String digestText) {
            this.digestText = digestText;
            return this;
        }
        @CustomType.Setter
        public Builder firstSeen(@Nullable String firstSeen) {
            this.firstSeen = firstSeen;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(@Nullable String lastSeen) {
            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder maxTimerWait(@Nullable Double maxTimerWait) {
            this.maxTimerWait = maxTimerWait;
            return this;
        }
        @CustomType.Setter
        public Builder minTimerWait(@Nullable Double minTimerWait) {
            this.minTimerWait = minTimerWait;
            return this;
        }
        @CustomType.Setter
        public Builder quantile95(@Nullable Double quantile95) {
            this.quantile95 = quantile95;
            return this;
        }
        @CustomType.Setter
        public Builder quantile99(@Nullable Double quantile99) {
            this.quantile99 = quantile99;
            return this;
        }
        @CustomType.Setter
        public Builder quantile999(@Nullable Double quantile999) {
            this.quantile999 = quantile999;
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(@Nullable String schemaName) {
            this.schemaName = schemaName;
            return this;
        }
        @CustomType.Setter
        public Builder sumCreatedTempDiskTables(@Nullable Double sumCreatedTempDiskTables) {
            this.sumCreatedTempDiskTables = sumCreatedTempDiskTables;
            return this;
        }
        @CustomType.Setter
        public Builder sumCreatedTempTables(@Nullable Double sumCreatedTempTables) {
            this.sumCreatedTempTables = sumCreatedTempTables;
            return this;
        }
        @CustomType.Setter
        public Builder sumErrors(@Nullable Double sumErrors) {
            this.sumErrors = sumErrors;
            return this;
        }
        @CustomType.Setter
        public Builder sumLockTime(@Nullable Double sumLockTime) {
            this.sumLockTime = sumLockTime;
            return this;
        }
        @CustomType.Setter
        public Builder sumNoGoodIndexUsed(@Nullable Double sumNoGoodIndexUsed) {
            this.sumNoGoodIndexUsed = sumNoGoodIndexUsed;
            return this;
        }
        @CustomType.Setter
        public Builder sumNoIndexUsed(@Nullable Double sumNoIndexUsed) {
            this.sumNoIndexUsed = sumNoIndexUsed;
            return this;
        }
        @CustomType.Setter
        public Builder sumRowsAffected(@Nullable Double sumRowsAffected) {
            this.sumRowsAffected = sumRowsAffected;
            return this;
        }
        @CustomType.Setter
        public Builder sumRowsExamined(@Nullable Double sumRowsExamined) {
            this.sumRowsExamined = sumRowsExamined;
            return this;
        }
        @CustomType.Setter
        public Builder sumRowsSent(@Nullable Double sumRowsSent) {
            this.sumRowsSent = sumRowsSent;
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectFullJoin(@Nullable Double sumSelectFullJoin) {
            this.sumSelectFullJoin = sumSelectFullJoin;
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectFullRangeJoin(@Nullable Double sumSelectFullRangeJoin) {
            this.sumSelectFullRangeJoin = sumSelectFullRangeJoin;
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectRange(@Nullable Double sumSelectRange) {
            this.sumSelectRange = sumSelectRange;
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectRangeCheck(@Nullable Double sumSelectRangeCheck) {
            this.sumSelectRangeCheck = sumSelectRangeCheck;
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectScan(@Nullable Double sumSelectScan) {
            this.sumSelectScan = sumSelectScan;
            return this;
        }
        @CustomType.Setter
        public Builder sumSortMergePasses(@Nullable Double sumSortMergePasses) {
            this.sumSortMergePasses = sumSortMergePasses;
            return this;
        }
        @CustomType.Setter
        public Builder sumSortRange(@Nullable Double sumSortRange) {
            this.sumSortRange = sumSortRange;
            return this;
        }
        @CustomType.Setter
        public Builder sumSortRows(@Nullable Double sumSortRows) {
            this.sumSortRows = sumSortRows;
            return this;
        }
        @CustomType.Setter
        public Builder sumSortScan(@Nullable Double sumSortScan) {
            this.sumSortScan = sumSortScan;
            return this;
        }
        @CustomType.Setter
        public Builder sumTimerWait(@Nullable Double sumTimerWait) {
            this.sumTimerWait = sumTimerWait;
            return this;
        }
        @CustomType.Setter
        public Builder sumWarnings(@Nullable Double sumWarnings) {
            this.sumWarnings = sumWarnings;
            return this;
        }
        public GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem build() {
            final var o = new GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem();
            o.avgTimerWait = avgTimerWait;
            o.countStar = countStar;
            o.digest = digest;
            o.digestText = digestText;
            o.firstSeen = firstSeen;
            o.lastSeen = lastSeen;
            o.maxTimerWait = maxTimerWait;
            o.minTimerWait = minTimerWait;
            o.quantile95 = quantile95;
            o.quantile99 = quantile99;
            o.quantile999 = quantile999;
            o.schemaName = schemaName;
            o.sumCreatedTempDiskTables = sumCreatedTempDiskTables;
            o.sumCreatedTempTables = sumCreatedTempTables;
            o.sumErrors = sumErrors;
            o.sumLockTime = sumLockTime;
            o.sumNoGoodIndexUsed = sumNoGoodIndexUsed;
            o.sumNoIndexUsed = sumNoIndexUsed;
            o.sumRowsAffected = sumRowsAffected;
            o.sumRowsExamined = sumRowsExamined;
            o.sumRowsSent = sumRowsSent;
            o.sumSelectFullJoin = sumSelectFullJoin;
            o.sumSelectFullRangeJoin = sumSelectFullRangeJoin;
            o.sumSelectRange = sumSelectRange;
            o.sumSelectRangeCheck = sumSelectRangeCheck;
            o.sumSelectScan = sumSelectScan;
            o.sumSortMergePasses = sumSortMergePasses;
            o.sumSortRange = sumSortRange;
            o.sumSortRows = sumSortRows;
            o.sumSortScan = sumSortScan;
            o.sumTimerWait = sumTimerWait;
            o.sumWarnings = sumWarnings;
            return o;
        }
    }
}
