// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem {
    /**
     * @return The Average Execution Time.
     * 
     */
    private Double avgTimerWait;
    /**
     * @return The Number Of Times The Query Has Been Executed.
     * 
     */
    private Double countStar;
    /**
     * @return The Digest Of The Normalized Query.
     * 
     */
    private String digest;
    /**
     * @return The Normalized Query.
     * 
     */
    private String digestText;
    /**
     * @return When The Query Was First Seen. When The Table Is Truncated, The First Seen Value Is Also Reset.
     * 
     */
    private String firstSeen;
    /**
     * @return When The Query Was Seen The Last Time.
     * 
     */
    private String lastSeen;
    /**
     * @return The Slowest The Query Has Been Executed.
     * 
     */
    private Double maxTimerWait;
    /**
     * @return The Fastest The Query Has Been Executed.
     * 
     */
    private Double minTimerWait;
    /**
     * @return The 95th Percentile Of The Query Latency. That Is, 95% Of The Queries Complete In The Time Given Or In Less Time.
     * 
     */
    private Double quantile95;
    /**
     * @return The 99th Percentile Of The Query Latency.
     * 
     */
    private Double quantile99;
    /**
     * @return The 99.9th Percentile Of The Query Latency.
     * 
     */
    private Double quantile999;
    /**
     * @return The Schema That Was The Default Schema When Executing The Query. If No Schema Was The Default, The Value Is NULL.
     * 
     */
    private String schemaName;
    /**
     * @return The Total Number Of On-Disk Internal Temporary Tables That Have Been Created By The Query.
     * 
     */
    private Double sumCreatedTempDiskTables;
    /**
     * @return The Total Number Of Internal Temporary Tables – Whether Created In Memory Or On Disk – That Have Been Created By The Query.
     * 
     */
    private Double sumCreatedTempTables;
    /**
     * @return The Total Number Of Errors That Have Been Encountered Executing The Query.
     * 
     */
    private Double sumErrors;
    /**
     * @return The Total Amount Of Time That Has Been Spent Waiting For Table Locks.
     * 
     */
    private Double sumLockTime;
    /**
     * @return The Total Number Of Times No Good Index Was Used. This Means That The ExtraColumn In The EXPLAIN Output Includes “Range Checked For Each Record.”
     * 
     */
    private Double sumNoGoodIndexUsed;
    /**
     * @return The Total Number Of Times No Index Was Used To Execute The Query.
     * 
     */
    private Double sumNoIndexUsed;
    /**
     * @return The Total Number Of Rows That Have Been Modified By The Query.
     * 
     */
    private Double sumRowsAffected;
    /**
     * @return The Total Number Of Rows That Have Been Examined By The Query.
     * 
     */
    private Double sumRowsExamined;
    /**
     * @return The Total Number Of Rows That Have Been Returned (Sent) To The Client.
     * 
     */
    private Double sumRowsSent;
    /**
     * @return The Total Number Of Joins That Have Performed Full Table Scans As There Is No Index For The Join Condition Or There Is No Join Condition. This Is The Same That Increments The Select_full_join Status Variable.
     * 
     */
    private Double sumSelectFullJoin;
    /**
     * @return The Total Number Of Joins That Use A Full Range Search. This Is The Same That Increments The Select_full_range_join Status Variable.
     * 
     */
    private Double sumSelectFullRangeJoin;
    /**
     * @return The Total Number Of Times The Query Has Used A Range Search. This Is The Same That Increments The Select_range Status Variable.
     * 
     */
    private Double sumSelectRange;
    /**
     * @return The Total Number Of Joins By The Query Where The Join Does Not Have An Index That Checks For The Index Usage After Each Row. This Is The Same That Increments The Select_range_check Status Variable.
     * 
     */
    private Double sumSelectRangeCheck;
    /**
     * @return The Total Number Of Times The Query Has Performed A Full Table Scan On The First Table In The Join. This Is The Same That Increments The Select_scan Status Variable.
     * 
     */
    private Double sumSelectScan;
    /**
     * @return The Total Number Of Sort Merge Passes That Have Been Done To Sort The Result Of The Query. This Is The Same That Increments The Sort_merge_passes Status Variable.
     * 
     */
    private Double sumSortMergePasses;
    /**
     * @return The Total Number Of Times A Sort Was Done Using Ranges. This Is The Same That Increments The Sort_range Status Variable.
     * 
     */
    private Double sumSortRange;
    /**
     * @return The Total Number Of Rows Sorted. This Is The Same That Increments The Sort_rowsStatus Variable.
     * 
     */
    private Double sumSortRows;
    /**
     * @return The Total Number Of Times A Sort Was Done By Scanning The Table. This Is The Same That Increments The Sort_scan Status Variable.
     * 
     */
    private Double sumSortScan;
    /**
     * @return The Total Amount Of Time That Has Been Spent Executing The Query.
     * 
     */
    private Double sumTimerWait;
    /**
     * @return The Total Number Of Warnings That Have Been Encountered Executing The Query.
     * 
     */
    private Double sumWarnings;

    private GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem() {}
    /**
     * @return The Average Execution Time.
     * 
     */
    public Double avgTimerWait() {
        return this.avgTimerWait;
    }
    /**
     * @return The Number Of Times The Query Has Been Executed.
     * 
     */
    public Double countStar() {
        return this.countStar;
    }
    /**
     * @return The Digest Of The Normalized Query.
     * 
     */
    public String digest() {
        return this.digest;
    }
    /**
     * @return The Normalized Query.
     * 
     */
    public String digestText() {
        return this.digestText;
    }
    /**
     * @return When The Query Was First Seen. When The Table Is Truncated, The First Seen Value Is Also Reset.
     * 
     */
    public String firstSeen() {
        return this.firstSeen;
    }
    /**
     * @return When The Query Was Seen The Last Time.
     * 
     */
    public String lastSeen() {
        return this.lastSeen;
    }
    /**
     * @return The Slowest The Query Has Been Executed.
     * 
     */
    public Double maxTimerWait() {
        return this.maxTimerWait;
    }
    /**
     * @return The Fastest The Query Has Been Executed.
     * 
     */
    public Double minTimerWait() {
        return this.minTimerWait;
    }
    /**
     * @return The 95th Percentile Of The Query Latency. That Is, 95% Of The Queries Complete In The Time Given Or In Less Time.
     * 
     */
    public Double quantile95() {
        return this.quantile95;
    }
    /**
     * @return The 99th Percentile Of The Query Latency.
     * 
     */
    public Double quantile99() {
        return this.quantile99;
    }
    /**
     * @return The 99.9th Percentile Of The Query Latency.
     * 
     */
    public Double quantile999() {
        return this.quantile999;
    }
    /**
     * @return The Schema That Was The Default Schema When Executing The Query. If No Schema Was The Default, The Value Is NULL.
     * 
     */
    public String schemaName() {
        return this.schemaName;
    }
    /**
     * @return The Total Number Of On-Disk Internal Temporary Tables That Have Been Created By The Query.
     * 
     */
    public Double sumCreatedTempDiskTables() {
        return this.sumCreatedTempDiskTables;
    }
    /**
     * @return The Total Number Of Internal Temporary Tables – Whether Created In Memory Or On Disk – That Have Been Created By The Query.
     * 
     */
    public Double sumCreatedTempTables() {
        return this.sumCreatedTempTables;
    }
    /**
     * @return The Total Number Of Errors That Have Been Encountered Executing The Query.
     * 
     */
    public Double sumErrors() {
        return this.sumErrors;
    }
    /**
     * @return The Total Amount Of Time That Has Been Spent Waiting For Table Locks.
     * 
     */
    public Double sumLockTime() {
        return this.sumLockTime;
    }
    /**
     * @return The Total Number Of Times No Good Index Was Used. This Means That The ExtraColumn In The EXPLAIN Output Includes “Range Checked For Each Record.”
     * 
     */
    public Double sumNoGoodIndexUsed() {
        return this.sumNoGoodIndexUsed;
    }
    /**
     * @return The Total Number Of Times No Index Was Used To Execute The Query.
     * 
     */
    public Double sumNoIndexUsed() {
        return this.sumNoIndexUsed;
    }
    /**
     * @return The Total Number Of Rows That Have Been Modified By The Query.
     * 
     */
    public Double sumRowsAffected() {
        return this.sumRowsAffected;
    }
    /**
     * @return The Total Number Of Rows That Have Been Examined By The Query.
     * 
     */
    public Double sumRowsExamined() {
        return this.sumRowsExamined;
    }
    /**
     * @return The Total Number Of Rows That Have Been Returned (Sent) To The Client.
     * 
     */
    public Double sumRowsSent() {
        return this.sumRowsSent;
    }
    /**
     * @return The Total Number Of Joins That Have Performed Full Table Scans As There Is No Index For The Join Condition Or There Is No Join Condition. This Is The Same That Increments The Select_full_join Status Variable.
     * 
     */
    public Double sumSelectFullJoin() {
        return this.sumSelectFullJoin;
    }
    /**
     * @return The Total Number Of Joins That Use A Full Range Search. This Is The Same That Increments The Select_full_range_join Status Variable.
     * 
     */
    public Double sumSelectFullRangeJoin() {
        return this.sumSelectFullRangeJoin;
    }
    /**
     * @return The Total Number Of Times The Query Has Used A Range Search. This Is The Same That Increments The Select_range Status Variable.
     * 
     */
    public Double sumSelectRange() {
        return this.sumSelectRange;
    }
    /**
     * @return The Total Number Of Joins By The Query Where The Join Does Not Have An Index That Checks For The Index Usage After Each Row. This Is The Same That Increments The Select_range_check Status Variable.
     * 
     */
    public Double sumSelectRangeCheck() {
        return this.sumSelectRangeCheck;
    }
    /**
     * @return The Total Number Of Times The Query Has Performed A Full Table Scan On The First Table In The Join. This Is The Same That Increments The Select_scan Status Variable.
     * 
     */
    public Double sumSelectScan() {
        return this.sumSelectScan;
    }
    /**
     * @return The Total Number Of Sort Merge Passes That Have Been Done To Sort The Result Of The Query. This Is The Same That Increments The Sort_merge_passes Status Variable.
     * 
     */
    public Double sumSortMergePasses() {
        return this.sumSortMergePasses;
    }
    /**
     * @return The Total Number Of Times A Sort Was Done Using Ranges. This Is The Same That Increments The Sort_range Status Variable.
     * 
     */
    public Double sumSortRange() {
        return this.sumSortRange;
    }
    /**
     * @return The Total Number Of Rows Sorted. This Is The Same That Increments The Sort_rowsStatus Variable.
     * 
     */
    public Double sumSortRows() {
        return this.sumSortRows;
    }
    /**
     * @return The Total Number Of Times A Sort Was Done By Scanning The Table. This Is The Same That Increments The Sort_scan Status Variable.
     * 
     */
    public Double sumSortScan() {
        return this.sumSortScan;
    }
    /**
     * @return The Total Amount Of Time That Has Been Spent Executing The Query.
     * 
     */
    public Double sumTimerWait() {
        return this.sumTimerWait;
    }
    /**
     * @return The Total Number Of Warnings That Have Been Encountered Executing The Query.
     * 
     */
    public Double sumWarnings() {
        return this.sumWarnings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double avgTimerWait;
        private Double countStar;
        private String digest;
        private String digestText;
        private String firstSeen;
        private String lastSeen;
        private Double maxTimerWait;
        private Double minTimerWait;
        private Double quantile95;
        private Double quantile99;
        private Double quantile999;
        private String schemaName;
        private Double sumCreatedTempDiskTables;
        private Double sumCreatedTempTables;
        private Double sumErrors;
        private Double sumLockTime;
        private Double sumNoGoodIndexUsed;
        private Double sumNoIndexUsed;
        private Double sumRowsAffected;
        private Double sumRowsExamined;
        private Double sumRowsSent;
        private Double sumSelectFullJoin;
        private Double sumSelectFullRangeJoin;
        private Double sumSelectRange;
        private Double sumSelectRangeCheck;
        private Double sumSelectScan;
        private Double sumSortMergePasses;
        private Double sumSortRange;
        private Double sumSortRows;
        private Double sumSortScan;
        private Double sumTimerWait;
        private Double sumWarnings;
        public Builder() {}
        public Builder(GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.avgTimerWait = defaults.avgTimerWait;
    	      this.countStar = defaults.countStar;
    	      this.digest = defaults.digest;
    	      this.digestText = defaults.digestText;
    	      this.firstSeen = defaults.firstSeen;
    	      this.lastSeen = defaults.lastSeen;
    	      this.maxTimerWait = defaults.maxTimerWait;
    	      this.minTimerWait = defaults.minTimerWait;
    	      this.quantile95 = defaults.quantile95;
    	      this.quantile99 = defaults.quantile99;
    	      this.quantile999 = defaults.quantile999;
    	      this.schemaName = defaults.schemaName;
    	      this.sumCreatedTempDiskTables = defaults.sumCreatedTempDiskTables;
    	      this.sumCreatedTempTables = defaults.sumCreatedTempTables;
    	      this.sumErrors = defaults.sumErrors;
    	      this.sumLockTime = defaults.sumLockTime;
    	      this.sumNoGoodIndexUsed = defaults.sumNoGoodIndexUsed;
    	      this.sumNoIndexUsed = defaults.sumNoIndexUsed;
    	      this.sumRowsAffected = defaults.sumRowsAffected;
    	      this.sumRowsExamined = defaults.sumRowsExamined;
    	      this.sumRowsSent = defaults.sumRowsSent;
    	      this.sumSelectFullJoin = defaults.sumSelectFullJoin;
    	      this.sumSelectFullRangeJoin = defaults.sumSelectFullRangeJoin;
    	      this.sumSelectRange = defaults.sumSelectRange;
    	      this.sumSelectRangeCheck = defaults.sumSelectRangeCheck;
    	      this.sumSelectScan = defaults.sumSelectScan;
    	      this.sumSortMergePasses = defaults.sumSortMergePasses;
    	      this.sumSortRange = defaults.sumSortRange;
    	      this.sumSortRows = defaults.sumSortRows;
    	      this.sumSortScan = defaults.sumSortScan;
    	      this.sumTimerWait = defaults.sumTimerWait;
    	      this.sumWarnings = defaults.sumWarnings;
        }

        @CustomType.Setter
        public Builder avgTimerWait(Double avgTimerWait) {
            this.avgTimerWait = Objects.requireNonNull(avgTimerWait);
            return this;
        }
        @CustomType.Setter
        public Builder countStar(Double countStar) {
            this.countStar = Objects.requireNonNull(countStar);
            return this;
        }
        @CustomType.Setter
        public Builder digest(String digest) {
            this.digest = Objects.requireNonNull(digest);
            return this;
        }
        @CustomType.Setter
        public Builder digestText(String digestText) {
            this.digestText = Objects.requireNonNull(digestText);
            return this;
        }
        @CustomType.Setter
        public Builder firstSeen(String firstSeen) {
            this.firstSeen = Objects.requireNonNull(firstSeen);
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(String lastSeen) {
            this.lastSeen = Objects.requireNonNull(lastSeen);
            return this;
        }
        @CustomType.Setter
        public Builder maxTimerWait(Double maxTimerWait) {
            this.maxTimerWait = Objects.requireNonNull(maxTimerWait);
            return this;
        }
        @CustomType.Setter
        public Builder minTimerWait(Double minTimerWait) {
            this.minTimerWait = Objects.requireNonNull(minTimerWait);
            return this;
        }
        @CustomType.Setter
        public Builder quantile95(Double quantile95) {
            this.quantile95 = Objects.requireNonNull(quantile95);
            return this;
        }
        @CustomType.Setter
        public Builder quantile99(Double quantile99) {
            this.quantile99 = Objects.requireNonNull(quantile99);
            return this;
        }
        @CustomType.Setter
        public Builder quantile999(Double quantile999) {
            this.quantile999 = Objects.requireNonNull(quantile999);
            return this;
        }
        @CustomType.Setter
        public Builder schemaName(String schemaName) {
            this.schemaName = Objects.requireNonNull(schemaName);
            return this;
        }
        @CustomType.Setter
        public Builder sumCreatedTempDiskTables(Double sumCreatedTempDiskTables) {
            this.sumCreatedTempDiskTables = Objects.requireNonNull(sumCreatedTempDiskTables);
            return this;
        }
        @CustomType.Setter
        public Builder sumCreatedTempTables(Double sumCreatedTempTables) {
            this.sumCreatedTempTables = Objects.requireNonNull(sumCreatedTempTables);
            return this;
        }
        @CustomType.Setter
        public Builder sumErrors(Double sumErrors) {
            this.sumErrors = Objects.requireNonNull(sumErrors);
            return this;
        }
        @CustomType.Setter
        public Builder sumLockTime(Double sumLockTime) {
            this.sumLockTime = Objects.requireNonNull(sumLockTime);
            return this;
        }
        @CustomType.Setter
        public Builder sumNoGoodIndexUsed(Double sumNoGoodIndexUsed) {
            this.sumNoGoodIndexUsed = Objects.requireNonNull(sumNoGoodIndexUsed);
            return this;
        }
        @CustomType.Setter
        public Builder sumNoIndexUsed(Double sumNoIndexUsed) {
            this.sumNoIndexUsed = Objects.requireNonNull(sumNoIndexUsed);
            return this;
        }
        @CustomType.Setter
        public Builder sumRowsAffected(Double sumRowsAffected) {
            this.sumRowsAffected = Objects.requireNonNull(sumRowsAffected);
            return this;
        }
        @CustomType.Setter
        public Builder sumRowsExamined(Double sumRowsExamined) {
            this.sumRowsExamined = Objects.requireNonNull(sumRowsExamined);
            return this;
        }
        @CustomType.Setter
        public Builder sumRowsSent(Double sumRowsSent) {
            this.sumRowsSent = Objects.requireNonNull(sumRowsSent);
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectFullJoin(Double sumSelectFullJoin) {
            this.sumSelectFullJoin = Objects.requireNonNull(sumSelectFullJoin);
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectFullRangeJoin(Double sumSelectFullRangeJoin) {
            this.sumSelectFullRangeJoin = Objects.requireNonNull(sumSelectFullRangeJoin);
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectRange(Double sumSelectRange) {
            this.sumSelectRange = Objects.requireNonNull(sumSelectRange);
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectRangeCheck(Double sumSelectRangeCheck) {
            this.sumSelectRangeCheck = Objects.requireNonNull(sumSelectRangeCheck);
            return this;
        }
        @CustomType.Setter
        public Builder sumSelectScan(Double sumSelectScan) {
            this.sumSelectScan = Objects.requireNonNull(sumSelectScan);
            return this;
        }
        @CustomType.Setter
        public Builder sumSortMergePasses(Double sumSortMergePasses) {
            this.sumSortMergePasses = Objects.requireNonNull(sumSortMergePasses);
            return this;
        }
        @CustomType.Setter
        public Builder sumSortRange(Double sumSortRange) {
            this.sumSortRange = Objects.requireNonNull(sumSortRange);
            return this;
        }
        @CustomType.Setter
        public Builder sumSortRows(Double sumSortRows) {
            this.sumSortRows = Objects.requireNonNull(sumSortRows);
            return this;
        }
        @CustomType.Setter
        public Builder sumSortScan(Double sumSortScan) {
            this.sumSortScan = Objects.requireNonNull(sumSortScan);
            return this;
        }
        @CustomType.Setter
        public Builder sumTimerWait(Double sumTimerWait) {
            this.sumTimerWait = Objects.requireNonNull(sumTimerWait);
            return this;
        }
        @CustomType.Setter
        public Builder sumWarnings(Double sumWarnings) {
            this.sumWarnings = Objects.requireNonNull(sumWarnings);
            return this;
        }
        public GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem build() {
            final var _resultValue = new GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItem();
            _resultValue.avgTimerWait = avgTimerWait;
            _resultValue.countStar = countStar;
            _resultValue.digest = digest;
            _resultValue.digestText = digestText;
            _resultValue.firstSeen = firstSeen;
            _resultValue.lastSeen = lastSeen;
            _resultValue.maxTimerWait = maxTimerWait;
            _resultValue.minTimerWait = minTimerWait;
            _resultValue.quantile95 = quantile95;
            _resultValue.quantile99 = quantile99;
            _resultValue.quantile999 = quantile999;
            _resultValue.schemaName = schemaName;
            _resultValue.sumCreatedTempDiskTables = sumCreatedTempDiskTables;
            _resultValue.sumCreatedTempTables = sumCreatedTempTables;
            _resultValue.sumErrors = sumErrors;
            _resultValue.sumLockTime = sumLockTime;
            _resultValue.sumNoGoodIndexUsed = sumNoGoodIndexUsed;
            _resultValue.sumNoIndexUsed = sumNoIndexUsed;
            _resultValue.sumRowsAffected = sumRowsAffected;
            _resultValue.sumRowsExamined = sumRowsExamined;
            _resultValue.sumRowsSent = sumRowsSent;
            _resultValue.sumSelectFullJoin = sumSelectFullJoin;
            _resultValue.sumSelectFullRangeJoin = sumSelectFullRangeJoin;
            _resultValue.sumSelectRange = sumSelectRange;
            _resultValue.sumSelectRangeCheck = sumSelectRangeCheck;
            _resultValue.sumSelectScan = sumSelectScan;
            _resultValue.sumSortMergePasses = sumSortMergePasses;
            _resultValue.sumSortRange = sumSortRange;
            _resultValue.sumSortRows = sumSortRows;
            _resultValue.sumSortScan = sumSortScan;
            _resultValue.sumTimerWait = sumTimerWait;
            _resultValue.sumWarnings = sumWarnings;
            return _resultValue;
        }
    }
}
