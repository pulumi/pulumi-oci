// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseManagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class NamedCredentialContent {
    /**
     * @return (Updatable) The type of named credential. Only &#39;BASIC&#39; is supported currently.
     * 
     */
    private String credentialType;
    /**
     * @return (Updatable) The mechanism used to access the password plain text value.
     * 
     */
    private String passwordSecretAccessMode;
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
     * 
     */
    private String passwordSecretId;
    /**
     * @return (Updatable) The role of the database user.
     * 
     */
    private String role;
    /**
     * @return (Updatable) The user name used to connect to the database.
     * 
     */
    private String userName;

    private NamedCredentialContent() {}
    /**
     * @return (Updatable) The type of named credential. Only &#39;BASIC&#39; is supported currently.
     * 
     */
    public String credentialType() {
        return this.credentialType;
    }
    /**
     * @return (Updatable) The mechanism used to access the password plain text value.
     * 
     */
    public String passwordSecretAccessMode() {
        return this.passwordSecretAccessMode;
    }
    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
     * 
     */
    public String passwordSecretId() {
        return this.passwordSecretId;
    }
    /**
     * @return (Updatable) The role of the database user.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return (Updatable) The user name used to connect to the database.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NamedCredentialContent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String credentialType;
        private String passwordSecretAccessMode;
        private String passwordSecretId;
        private String role;
        private String userName;
        public Builder() {}
        public Builder(NamedCredentialContent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialType = defaults.credentialType;
    	      this.passwordSecretAccessMode = defaults.passwordSecretAccessMode;
    	      this.passwordSecretId = defaults.passwordSecretId;
    	      this.role = defaults.role;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder credentialType(String credentialType) {
            if (credentialType == null) {
              throw new MissingRequiredPropertyException("NamedCredentialContent", "credentialType");
            }
            this.credentialType = credentialType;
            return this;
        }
        @CustomType.Setter
        public Builder passwordSecretAccessMode(String passwordSecretAccessMode) {
            if (passwordSecretAccessMode == null) {
              throw new MissingRequiredPropertyException("NamedCredentialContent", "passwordSecretAccessMode");
            }
            this.passwordSecretAccessMode = passwordSecretAccessMode;
            return this;
        }
        @CustomType.Setter
        public Builder passwordSecretId(String passwordSecretId) {
            if (passwordSecretId == null) {
              throw new MissingRequiredPropertyException("NamedCredentialContent", "passwordSecretId");
            }
            this.passwordSecretId = passwordSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("NamedCredentialContent", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("NamedCredentialContent", "userName");
            }
            this.userName = userName;
            return this;
        }
        public NamedCredentialContent build() {
            final var _resultValue = new NamedCredentialContent();
            _resultValue.credentialType = credentialType;
            _resultValue.passwordSecretAccessMode = passwordSecretAccessMode;
            _resultValue.passwordSecretId = passwordSecretId;
            _resultValue.role = role;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
