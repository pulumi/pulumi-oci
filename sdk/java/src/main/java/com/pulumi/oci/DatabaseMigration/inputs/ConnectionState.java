// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DatabaseMigration.inputs.ConnectionAdditionalAttributeArgs;
import com.pulumi.oci.DatabaseMigration.inputs.ConnectionIngressIpArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionState Empty = new ConnectionState();

    /**
     * (Updatable) An array of name-value pair attribute entries.
     * 
     */
    @Import(name="additionalAttributes")
    private @Nullable Output<List<ConnectionAdditionalAttributeArgs>> additionalAttributes;

    /**
     * @return (Updatable) An array of name-value pair attribute entries.
     * 
     */
    public Optional<Output<List<ConnectionAdditionalAttributeArgs>>> additionalAttributes() {
        return Optional.ofNullable(this.additionalAttributes);
    }

    /**
     * (Updatable) The OCID of the compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * (Updatable) Defines the type of connection. For example, ORACLE.
     * 
     */
    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    /**
     * @return (Updatable) Defines the type of connection. For example, ORACLE.
     * 
     */
    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * (Updatable) The OCID of the database being referenced.
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    /**
     * @return (Updatable) The OCID of the database being referenced.
     * 
     */
    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * (Updatable) The name of the database being referenced.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return (Updatable) The name of the database being referenced.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * (Updatable) The OCID of the database system being referenced.
     * 
     */
    @Import(name="dbSystemId")
    private @Nullable Output<String> dbSystemId;

    /**
     * @return (Updatable) The OCID of the database system being referenced.
     * 
     */
    public Optional<Output<String>> dbSystemId() {
        return Optional.ofNullable(this.dbSystemId);
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The IP Address of the host.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return (Updatable) The IP Address of the host.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * List of ingress IP addresses from where to connect to this connection&#39;s privateIp.
     * 
     */
    @Import(name="ingressIps")
    private @Nullable Output<List<ConnectionIngressIpArgs>> ingressIps;

    /**
     * @return List of ingress IP addresses from where to connect to this connection&#39;s privateIp.
     * 
     */
    public Optional<Output<List<ConnectionIngressIpArgs>>> ingressIps() {
        return Optional.ofNullable(this.ingressIps);
    }

    /**
     * (Updatable) The OCID of the key used in cryptographic operations.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return (Updatable) The OCID of the key used in cryptographic operations.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * The message describing the current state of the connection&#39;s lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
     * 
     */
    @Import(name="lifecycleDetails")
    private @Nullable Output<String> lifecycleDetails;

    /**
     * @return The message describing the current state of the connection&#39;s lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
     * 
     */
    public Optional<Output<String>> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }

    /**
     * (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return (Updatable) The password (credential) used when creating or updating this resource.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * (Updatable) The port to be used for the connection.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Updatable) The port to be used for the connection.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The OCID of the resource being referenced.
     * 
     */
    @Import(name="privateEndpointId")
    private @Nullable Output<String> privateEndpointId;

    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public Optional<Output<String>> privateEndpointId() {
        return Optional.ofNullable(this.privateEndpointId);
    }

    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     * 
     */
    @Import(name="replicationPassword")
    private @Nullable Output<String> replicationPassword;

    /**
     * @return (Updatable) The password (credential) used when creating or updating this resource.
     * 
     */
    public Optional<Output<String>> replicationPassword() {
        return Optional.ofNullable(this.replicationPassword);
    }

    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     * 
     */
    @Import(name="replicationUsername")
    private @Nullable Output<String> replicationUsername;

    /**
     * @return (Updatable) The username (credential) used when creating or updating this resource.
     * 
     */
    public Optional<Output<String>> replicationUsername() {
        return Optional.ofNullable(this.replicationUsername);
    }

    /**
     * The OCID of the resource being referenced.
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * (Updatable) Security Type for MySQL.
     * 
     */
    @Import(name="securityProtocol")
    private @Nullable Output<String> securityProtocol;

    /**
     * @return (Updatable) Security Type for MySQL.
     * 
     */
    public Optional<Output<String>> securityProtocol() {
        return Optional.ofNullable(this.securityProtocol);
    }

    /**
     * (Updatable) Name of the host the SSH key is valid for.
     * 
     */
    @Import(name="sshHost")
    private @Nullable Output<String> sshHost;

    /**
     * @return (Updatable) Name of the host the SSH key is valid for.
     * 
     */
    public Optional<Output<String>> sshHost() {
        return Optional.ofNullable(this.sshHost);
    }

    /**
     * (Updatable) Private SSH key string.
     * 
     */
    @Import(name="sshKey")
    private @Nullable Output<String> sshKey;

    /**
     * @return (Updatable) Private SSH key string.
     * 
     */
    public Optional<Output<String>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    /**
     * (Updatable) Sudo location
     * 
     */
    @Import(name="sshSudoLocation")
    private @Nullable Output<String> sshSudoLocation;

    /**
     * @return (Updatable) Sudo location
     * 
     */
    public Optional<Output<String>> sshSudoLocation() {
        return Optional.ofNullable(this.sshSudoLocation);
    }

    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     * 
     */
    @Import(name="sshUser")
    private @Nullable Output<String> sshUser;

    /**
     * @return (Updatable) The username (credential) used when creating or updating this resource.
     * 
     */
    public Optional<Output<String>> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }

    /**
     * (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
     * 
     */
    @Import(name="sslCa")
    private @Nullable Output<String> sslCa;

    /**
     * @return (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
     * 
     */
    public Optional<Output<String>> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }

    /**
     * (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
     * 
     */
    @Import(name="sslCert")
    private @Nullable Output<String> sslCert;

    /**
     * @return (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
     * 
     */
    public Optional<Output<String>> sslCert() {
        return Optional.ofNullable(this.sslCert);
    }

    /**
     * (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
     * 
     */
    @Import(name="sslCrl")
    private @Nullable Output<String> sslCrl;

    /**
     * @return (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
     * 
     */
    public Optional<Output<String>> sslCrl() {
        return Optional.ofNullable(this.sslCrl);
    }

    /**
     * (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
     * 
     */
    @Import(name="sslKey")
    private @Nullable Output<String> sslKey;

    /**
     * @return (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
     * 
     */
    public Optional<Output<String>> sslKey() {
        return Optional.ofNullable(this.sslKey);
    }

    /**
     * (Updatable) SSL modes for MySQL.
     * 
     */
    @Import(name="sslMode")
    private @Nullable Output<String> sslMode;

    /**
     * @return (Updatable) SSL modes for MySQL.
     * 
     */
    public Optional<Output<String>> sslMode() {
        return Optional.ofNullable(this.sslMode);
    }

    /**
     * The Connection&#39;s current lifecycle state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The Connection&#39;s current lifecycle state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure resource ID.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Import(name="systemTags")
    private @Nullable Output<Map<String,String>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> systemTags() {
        return Optional.ofNullable(this.systemTags);
    }

    /**
     * The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     * 
     */
    @Import(name="technologyType")
    private @Nullable Output<String> technologyType;

    /**
     * @return The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     * 
     */
    public Optional<Output<String>> technologyType() {
        return Optional.ofNullable(this.technologyType);
    }

    /**
     * The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeCreated")
    private @Nullable Output<String> timeCreated;

    /**
     * @return The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }

    /**
     * The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    @Import(name="timeUpdated")
    private @Nullable Output<String> timeUpdated;

    /**
     * @return The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public Optional<Output<String>> timeUpdated() {
        return Optional.ofNullable(this.timeUpdated);
    }

    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return (Updatable) The username (credential) used when creating or updating this resource.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return (Updatable) Oracle Cloud Infrastructure resource ID.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    /**
     * (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="wallet")
    private @Nullable Output<String> wallet;

    /**
     * @return (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> wallet() {
        return Optional.ofNullable(this.wallet);
    }

    private ConnectionState() {}

    private ConnectionState(ConnectionState $) {
        this.additionalAttributes = $.additionalAttributes;
        this.compartmentId = $.compartmentId;
        this.connectionString = $.connectionString;
        this.connectionType = $.connectionType;
        this.databaseId = $.databaseId;
        this.databaseName = $.databaseName;
        this.dbSystemId = $.dbSystemId;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.host = $.host;
        this.ingressIps = $.ingressIps;
        this.keyId = $.keyId;
        this.lifecycleDetails = $.lifecycleDetails;
        this.nsgIds = $.nsgIds;
        this.password = $.password;
        this.port = $.port;
        this.privateEndpointId = $.privateEndpointId;
        this.replicationPassword = $.replicationPassword;
        this.replicationUsername = $.replicationUsername;
        this.secretId = $.secretId;
        this.securityProtocol = $.securityProtocol;
        this.sshHost = $.sshHost;
        this.sshKey = $.sshKey;
        this.sshSudoLocation = $.sshSudoLocation;
        this.sshUser = $.sshUser;
        this.sslCa = $.sslCa;
        this.sslCert = $.sslCert;
        this.sslCrl = $.sslCrl;
        this.sslKey = $.sslKey;
        this.sslMode = $.sslMode;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.systemTags = $.systemTags;
        this.technologyType = $.technologyType;
        this.timeCreated = $.timeCreated;
        this.timeUpdated = $.timeUpdated;
        this.username = $.username;
        this.vaultId = $.vaultId;
        this.wallet = $.wallet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionState $;

        public Builder() {
            $ = new ConnectionState();
        }

        public Builder(ConnectionState defaults) {
            $ = new ConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(@Nullable Output<List<ConnectionAdditionalAttributeArgs>> additionalAttributes) {
            $.additionalAttributes = additionalAttributes;
            return this;
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(List<ConnectionAdditionalAttributeArgs> additionalAttributes) {
            return additionalAttributes(Output.of(additionalAttributes));
        }

        /**
         * @param additionalAttributes (Updatable) An array of name-value pair attribute entries.
         * 
         * @return builder
         * 
         */
        public Builder additionalAttributes(ConnectionAdditionalAttributeArgs... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param connectionString (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param connectionType (Updatable) Defines the type of connection. For example, ORACLE.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType (Updatable) Defines the type of connection. For example, ORACLE.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param databaseId (Updatable) The OCID of the database being referenced.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId (Updatable) The OCID of the database being referenced.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param databaseName (Updatable) The name of the database being referenced.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName (Updatable) The name of the database being referenced.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param dbSystemId (Updatable) The OCID of the database system being referenced.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(@Nullable Output<String> dbSystemId) {
            $.dbSystemId = dbSystemId;
            return this;
        }

        /**
         * @param dbSystemId (Updatable) The OCID of the database system being referenced.
         * 
         * @return builder
         * 
         */
        public Builder dbSystemId(String dbSystemId) {
            return dbSystemId(Output.of(dbSystemId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param host (Updatable) The IP Address of the host.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host (Updatable) The IP Address of the host.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param ingressIps List of ingress IP addresses from where to connect to this connection&#39;s privateIp.
         * 
         * @return builder
         * 
         */
        public Builder ingressIps(@Nullable Output<List<ConnectionIngressIpArgs>> ingressIps) {
            $.ingressIps = ingressIps;
            return this;
        }

        /**
         * @param ingressIps List of ingress IP addresses from where to connect to this connection&#39;s privateIp.
         * 
         * @return builder
         * 
         */
        public Builder ingressIps(List<ConnectionIngressIpArgs> ingressIps) {
            return ingressIps(Output.of(ingressIps));
        }

        /**
         * @param ingressIps List of ingress IP addresses from where to connect to this connection&#39;s privateIp.
         * 
         * @return builder
         * 
         */
        public Builder ingressIps(ConnectionIngressIpArgs... ingressIps) {
            return ingressIps(List.of(ingressIps));
        }

        /**
         * @param keyId (Updatable) The OCID of the key used in cryptographic operations.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId (Updatable) The OCID of the key used in cryptographic operations.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param lifecycleDetails The message describing the current state of the connection&#39;s lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(@Nullable Output<String> lifecycleDetails) {
            $.lifecycleDetails = lifecycleDetails;
            return this;
        }

        /**
         * @param lifecycleDetails The message describing the current state of the connection&#39;s lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleDetails(String lifecycleDetails) {
            return lifecycleDetails(Output.of(lifecycleDetails));
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param password (Updatable) The password (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password (Updatable) The password (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port (Updatable) The port to be used for the connection.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Updatable) The port to be used for the connection.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateEndpointId The OCID of the resource being referenced.
         * 
         * @return builder
         * 
         */
        public Builder privateEndpointId(@Nullable Output<String> privateEndpointId) {
            $.privateEndpointId = privateEndpointId;
            return this;
        }

        /**
         * @param privateEndpointId The OCID of the resource being referenced.
         * 
         * @return builder
         * 
         */
        public Builder privateEndpointId(String privateEndpointId) {
            return privateEndpointId(Output.of(privateEndpointId));
        }

        /**
         * @param replicationPassword (Updatable) The password (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder replicationPassword(@Nullable Output<String> replicationPassword) {
            $.replicationPassword = replicationPassword;
            return this;
        }

        /**
         * @param replicationPassword (Updatable) The password (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder replicationPassword(String replicationPassword) {
            return replicationPassword(Output.of(replicationPassword));
        }

        /**
         * @param replicationUsername (Updatable) The username (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder replicationUsername(@Nullable Output<String> replicationUsername) {
            $.replicationUsername = replicationUsername;
            return this;
        }

        /**
         * @param replicationUsername (Updatable) The username (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder replicationUsername(String replicationUsername) {
            return replicationUsername(Output.of(replicationUsername));
        }

        /**
         * @param secretId The OCID of the resource being referenced.
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId The OCID of the resource being referenced.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param securityProtocol (Updatable) Security Type for MySQL.
         * 
         * @return builder
         * 
         */
        public Builder securityProtocol(@Nullable Output<String> securityProtocol) {
            $.securityProtocol = securityProtocol;
            return this;
        }

        /**
         * @param securityProtocol (Updatable) Security Type for MySQL.
         * 
         * @return builder
         * 
         */
        public Builder securityProtocol(String securityProtocol) {
            return securityProtocol(Output.of(securityProtocol));
        }

        /**
         * @param sshHost (Updatable) Name of the host the SSH key is valid for.
         * 
         * @return builder
         * 
         */
        public Builder sshHost(@Nullable Output<String> sshHost) {
            $.sshHost = sshHost;
            return this;
        }

        /**
         * @param sshHost (Updatable) Name of the host the SSH key is valid for.
         * 
         * @return builder
         * 
         */
        public Builder sshHost(String sshHost) {
            return sshHost(Output.of(sshHost));
        }

        /**
         * @param sshKey (Updatable) Private SSH key string.
         * 
         * @return builder
         * 
         */
        public Builder sshKey(@Nullable Output<String> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        /**
         * @param sshKey (Updatable) Private SSH key string.
         * 
         * @return builder
         * 
         */
        public Builder sshKey(String sshKey) {
            return sshKey(Output.of(sshKey));
        }

        /**
         * @param sshSudoLocation (Updatable) Sudo location
         * 
         * @return builder
         * 
         */
        public Builder sshSudoLocation(@Nullable Output<String> sshSudoLocation) {
            $.sshSudoLocation = sshSudoLocation;
            return this;
        }

        /**
         * @param sshSudoLocation (Updatable) Sudo location
         * 
         * @return builder
         * 
         */
        public Builder sshSudoLocation(String sshSudoLocation) {
            return sshSudoLocation(Output.of(sshSudoLocation));
        }

        /**
         * @param sshUser (Updatable) The username (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder sshUser(@Nullable Output<String> sshUser) {
            $.sshUser = sshUser;
            return this;
        }

        /**
         * @param sshUser (Updatable) The username (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder sshUser(String sshUser) {
            return sshUser(Output.of(sshUser));
        }

        /**
         * @param sslCa (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCa(@Nullable Output<String> sslCa) {
            $.sslCa = sslCa;
            return this;
        }

        /**
         * @param sslCa (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCa(String sslCa) {
            return sslCa(Output.of(sslCa));
        }

        /**
         * @param sslCert (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCert(@Nullable Output<String> sslCert) {
            $.sslCert = sslCert;
            return this;
        }

        /**
         * @param sslCert (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslCert(String sslCert) {
            return sslCert(Output.of(sslCert));
        }

        /**
         * @param sslCrl (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
         * 
         * @return builder
         * 
         */
        public Builder sslCrl(@Nullable Output<String> sslCrl) {
            $.sslCrl = sslCrl;
            return this;
        }

        /**
         * @param sslCrl (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
         * 
         * @return builder
         * 
         */
        public Builder sslCrl(String sslCrl) {
            return sslCrl(Output.of(sslCrl));
        }

        /**
         * @param sslKey (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslKey(@Nullable Output<String> sslKey) {
            $.sslKey = sslKey;
            return this;
        }

        /**
         * @param sslKey (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
         * 
         * @return builder
         * 
         */
        public Builder sslKey(String sslKey) {
            return sslKey(Output.of(sslKey));
        }

        /**
         * @param sslMode (Updatable) SSL modes for MySQL.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(@Nullable Output<String> sslMode) {
            $.sslMode = sslMode;
            return this;
        }

        /**
         * @param sslMode (Updatable) SSL modes for MySQL.
         * 
         * @return builder
         * 
         */
        public Builder sslMode(String sslMode) {
            return sslMode(Output.of(sslMode));
        }

        /**
         * @param state The Connection&#39;s current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The Connection&#39;s current lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetId (Updatable) Oracle Cloud Infrastructure resource ID.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId (Updatable) Oracle Cloud Infrastructure resource ID.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(@Nullable Output<Map<String,String>> systemTags) {
            $.systemTags = systemTags;
            return this;
        }

        /**
         * @param systemTags Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder systemTags(Map<String,String> systemTags) {
            return systemTags(Output.of(systemTags));
        }

        /**
         * @param technologyType The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
         * 
         * @return builder
         * 
         */
        public Builder technologyType(@Nullable Output<String> technologyType) {
            $.technologyType = technologyType;
            return this;
        }

        /**
         * @param technologyType The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
         * 
         * @return builder
         * 
         */
        public Builder technologyType(String technologyType) {
            return technologyType(Output.of(technologyType));
        }

        /**
         * @param timeCreated The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(@Nullable Output<String> timeCreated) {
            $.timeCreated = timeCreated;
            return this;
        }

        /**
         * @param timeCreated The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeCreated(String timeCreated) {
            return timeCreated(Output.of(timeCreated));
        }

        /**
         * @param timeUpdated The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(@Nullable Output<String> timeUpdated) {
            $.timeUpdated = timeUpdated;
            return this;
        }

        /**
         * @param timeUpdated The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
         * 
         * @return builder
         * 
         */
        public Builder timeUpdated(String timeUpdated) {
            return timeUpdated(Output.of(timeUpdated));
        }

        /**
         * @param username (Updatable) The username (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username (Updatable) The username (credential) used when creating or updating this resource.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param vaultId (Updatable) Oracle Cloud Infrastructure resource ID.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId (Updatable) Oracle Cloud Infrastructure resource ID.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        /**
         * @param wallet (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder wallet(@Nullable Output<String> wallet) {
            $.wallet = wallet;
            return this;
        }

        /**
         * @param wallet (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder wallet(String wallet) {
            return wallet(Output.of(wallet));
        }

        public ConnectionState build() {
            return $;
        }
    }

}
