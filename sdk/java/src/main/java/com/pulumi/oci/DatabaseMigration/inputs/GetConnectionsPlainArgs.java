// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.inputs.GetConnectionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConnectionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectionsPlainArgs Empty = new GetConnectionsPlainArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * The array of connection types.
     * 
     */
    @Import(name="connectionTypes")
    private @Nullable List<String> connectionTypes;

    /**
     * @return The array of connection types.
     * 
     */
    public Optional<List<String>> connectionTypes() {
        return Optional.ofNullable(this.connectionTypes);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetConnectionsFilter> filters;

    public Optional<List<GetConnectionsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The OCID of the source database connection.
     * 
     */
    @Import(name="sourceConnectionId")
    private @Nullable String sourceConnectionId;

    /**
     * @return The OCID of the source database connection.
     * 
     */
    public Optional<String> sourceConnectionId() {
        return Optional.ofNullable(this.sourceConnectionId);
    }

    /**
     * The current state of the Database Migration Deployment.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return The current state of the Database Migration Deployment.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The array of technology types.
     * 
     */
    @Import(name="technologyTypes")
    private @Nullable List<String> technologyTypes;

    /**
     * @return The array of technology types.
     * 
     */
    public Optional<List<String>> technologyTypes() {
        return Optional.ofNullable(this.technologyTypes);
    }

    private GetConnectionsPlainArgs() {}

    private GetConnectionsPlainArgs(GetConnectionsPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.connectionTypes = $.connectionTypes;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.sourceConnectionId = $.sourceConnectionId;
        this.state = $.state;
        this.technologyTypes = $.technologyTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectionsPlainArgs $;

        public Builder() {
            $ = new GetConnectionsPlainArgs();
        }

        public Builder(GetConnectionsPlainArgs defaults) {
            $ = new GetConnectionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param connectionTypes The array of connection types.
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(@Nullable List<String> connectionTypes) {
            $.connectionTypes = connectionTypes;
            return this;
        }

        /**
         * @param connectionTypes The array of connection types.
         * 
         * @return builder
         * 
         */
        public Builder connectionTypes(String... connectionTypes) {
            return connectionTypes(List.of(connectionTypes));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetConnectionsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetConnectionsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param sourceConnectionId The OCID of the source database connection.
         * 
         * @return builder
         * 
         */
        public Builder sourceConnectionId(@Nullable String sourceConnectionId) {
            $.sourceConnectionId = sourceConnectionId;
            return this;
        }

        /**
         * @param state The current state of the Database Migration Deployment.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param technologyTypes The array of technology types.
         * 
         * @return builder
         * 
         */
        public Builder technologyTypes(@Nullable List<String> technologyTypes) {
            $.technologyTypes = technologyTypes;
            return this;
        }

        /**
         * @param technologyTypes The array of technology types.
         * 
         * @return builder
         * 
         */
        public Builder technologyTypes(String... technologyTypes) {
            return technologyTypes(List.of(technologyTypes));
        }

        public GetConnectionsPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetConnectionsPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
