// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationIncludeObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationIncludeObjectArgs Empty = new MigrationIncludeObjectArgs();

    /**
     * Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
     * 
     */
    @Import(name="isOmitExcludedTableFromReplication")
    private @Nullable Output<Boolean> isOmitExcludedTableFromReplication;

    /**
     * @return Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
     * 
     */
    public Optional<Output<Boolean>> isOmitExcludedTableFromReplication() {
        return Optional.ofNullable(this.isOmitExcludedTableFromReplication);
    }

    /**
     * Name of the object (regular expression is allowed)
     * 
     */
    @Import(name="object", required=true)
    private Output<String> object;

    /**
     * @return Name of the object (regular expression is allowed)
     * 
     */
    public Output<String> object() {
        return this.object;
    }

    /**
     * Owner of the object (regular expression is allowed)
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Owner of the object (regular expression is allowed)
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * Schema of the object (regular expression is allowed)
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return Schema of the object (regular expression is allowed)
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private MigrationIncludeObjectArgs() {}

    private MigrationIncludeObjectArgs(MigrationIncludeObjectArgs $) {
        this.isOmitExcludedTableFromReplication = $.isOmitExcludedTableFromReplication;
        this.object = $.object;
        this.owner = $.owner;
        this.schema = $.schema;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationIncludeObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationIncludeObjectArgs $;

        public Builder() {
            $ = new MigrationIncludeObjectArgs();
        }

        public Builder(MigrationIncludeObjectArgs defaults) {
            $ = new MigrationIncludeObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isOmitExcludedTableFromReplication Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
         * 
         * @return builder
         * 
         */
        public Builder isOmitExcludedTableFromReplication(@Nullable Output<Boolean> isOmitExcludedTableFromReplication) {
            $.isOmitExcludedTableFromReplication = isOmitExcludedTableFromReplication;
            return this;
        }

        /**
         * @param isOmitExcludedTableFromReplication Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
         * 
         * @return builder
         * 
         */
        public Builder isOmitExcludedTableFromReplication(Boolean isOmitExcludedTableFromReplication) {
            return isOmitExcludedTableFromReplication(Output.of(isOmitExcludedTableFromReplication));
        }

        /**
         * @param object Name of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder object(Output<String> object) {
            $.object = object;
            return this;
        }

        /**
         * @param object Name of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder object(String object) {
            return object(Output.of(object));
        }

        /**
         * @param owner Owner of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Owner of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param schema Schema of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema Schema of the object (regular expression is allowed)
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param type Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MigrationIncludeObjectArgs build() {
            if ($.object == null) {
                throw new MissingRequiredPropertyException("MigrationIncludeObjectArgs", "object");
            }
            return $;
        }
    }

}
