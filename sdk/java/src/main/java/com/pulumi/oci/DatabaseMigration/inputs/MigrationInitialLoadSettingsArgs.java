// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationInitialLoadSettingsDataPumpParametersArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationInitialLoadSettingsExportDirectoryObjectArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationInitialLoadSettingsImportDirectoryObjectArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationInitialLoadSettingsMetadataRemapArgs;
import com.pulumi.oci.DatabaseMigration.inputs.MigrationInitialLoadSettingsTablespaceDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationInitialLoadSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationInitialLoadSettingsArgs Empty = new MigrationInitialLoadSettingsArgs();

    /**
     * (Updatable) Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
     * 
     */
    @Import(name="compatibilities")
    private @Nullable Output<List<String>> compatibilities;

    /**
     * @return (Updatable) Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
     * 
     */
    public Optional<Output<List<String>>> compatibilities() {
        return Optional.ofNullable(this.compatibilities);
    }

    /**
     * (Updatable) Optional parameters for Data Pump Export and Import.
     * 
     */
    @Import(name="dataPumpParameters")
    private @Nullable Output<MigrationInitialLoadSettingsDataPumpParametersArgs> dataPumpParameters;

    /**
     * @return (Updatable) Optional parameters for Data Pump Export and Import.
     * 
     */
    public Optional<Output<MigrationInitialLoadSettingsDataPumpParametersArgs>> dataPumpParameters() {
        return Optional.ofNullable(this.dataPumpParameters);
    }

    /**
     * (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
     * 
     */
    @Import(name="exportDirectoryObject")
    private @Nullable Output<MigrationInitialLoadSettingsExportDirectoryObjectArgs> exportDirectoryObject;

    /**
     * @return (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
     * 
     */
    public Optional<Output<MigrationInitialLoadSettingsExportDirectoryObjectArgs>> exportDirectoryObject() {
        return Optional.ofNullable(this.exportDirectoryObject);
    }

    /**
     * (Updatable) The action taken in the event of errors related to GRANT or REVOKE errors.
     * 
     */
    @Import(name="handleGrantErrors")
    private @Nullable Output<String> handleGrantErrors;

    /**
     * @return (Updatable) The action taken in the event of errors related to GRANT or REVOKE errors.
     * 
     */
    public Optional<Output<String>> handleGrantErrors() {
        return Optional.ofNullable(this.handleGrantErrors);
    }

    /**
     * (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
     * 
     */
    @Import(name="importDirectoryObject")
    private @Nullable Output<MigrationInitialLoadSettingsImportDirectoryObjectArgs> importDirectoryObject;

    /**
     * @return (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
     * 
     */
    public Optional<Output<MigrationInitialLoadSettingsImportDirectoryObjectArgs>> importDirectoryObject() {
        return Optional.ofNullable(this.importDirectoryObject);
    }

    /**
     * (Updatable) Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
     * 
     */
    @Import(name="isConsistent")
    private @Nullable Output<Boolean> isConsistent;

    /**
     * @return (Updatable) Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
     * 
     */
    public Optional<Output<Boolean>> isConsistent() {
        return Optional.ofNullable(this.isConsistent);
    }

    /**
     * (Updatable) Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
     * 
     */
    @Import(name="isIgnoreExistingObjects")
    private @Nullable Output<Boolean> isIgnoreExistingObjects;

    /**
     * @return (Updatable) Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
     * 
     */
    public Optional<Output<Boolean>> isIgnoreExistingObjects() {
        return Optional.ofNullable(this.isIgnoreExistingObjects);
    }

    /**
     * (Updatable) Include a statement at the start of the dump to set the time zone to UTC.
     * 
     */
    @Import(name="isTzUtc")
    private @Nullable Output<Boolean> isTzUtc;

    /**
     * @return (Updatable) Include a statement at the start of the dump to set the time zone to UTC.
     * 
     */
    public Optional<Output<Boolean>> isTzUtc() {
        return Optional.ofNullable(this.isTzUtc);
    }

    /**
     * (Updatable) Oracle Job Mode
     * 
     */
    @Import(name="jobMode", required=true)
    private Output<String> jobMode;

    /**
     * @return (Updatable) Oracle Job Mode
     * 
     */
    public Output<String> jobMode() {
        return this.jobMode;
    }

    /**
     * (Updatable) Defines remapping to be applied to objects as they are processed.
     * 
     */
    @Import(name="metadataRemaps")
    private @Nullable Output<List<MigrationInitialLoadSettingsMetadataRemapArgs>> metadataRemaps;

    /**
     * @return (Updatable) Defines remapping to be applied to objects as they are processed.
     * 
     */
    public Optional<Output<List<MigrationInitialLoadSettingsMetadataRemapArgs>>> metadataRemaps() {
        return Optional.ofNullable(this.metadataRemaps);
    }

    /**
     * (Updatable) Primary key compatibility option
     * 
     */
    @Import(name="primaryKeyCompatibility")
    private @Nullable Output<String> primaryKeyCompatibility;

    /**
     * @return (Updatable) Primary key compatibility option
     * 
     */
    public Optional<Output<String>> primaryKeyCompatibility() {
        return Optional.ofNullable(this.primaryKeyCompatibility);
    }

    /**
     * (Updatable) Migration tablespace settings.
     * 
     */
    @Import(name="tablespaceDetails")
    private @Nullable Output<MigrationInitialLoadSettingsTablespaceDetailsArgs> tablespaceDetails;

    /**
     * @return (Updatable) Migration tablespace settings.
     * 
     */
    public Optional<Output<MigrationInitialLoadSettingsTablespaceDetailsArgs>> tablespaceDetails() {
        return Optional.ofNullable(this.tablespaceDetails);
    }

    private MigrationInitialLoadSettingsArgs() {}

    private MigrationInitialLoadSettingsArgs(MigrationInitialLoadSettingsArgs $) {
        this.compatibilities = $.compatibilities;
        this.dataPumpParameters = $.dataPumpParameters;
        this.exportDirectoryObject = $.exportDirectoryObject;
        this.handleGrantErrors = $.handleGrantErrors;
        this.importDirectoryObject = $.importDirectoryObject;
        this.isConsistent = $.isConsistent;
        this.isIgnoreExistingObjects = $.isIgnoreExistingObjects;
        this.isTzUtc = $.isTzUtc;
        this.jobMode = $.jobMode;
        this.metadataRemaps = $.metadataRemaps;
        this.primaryKeyCompatibility = $.primaryKeyCompatibility;
        this.tablespaceDetails = $.tablespaceDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationInitialLoadSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationInitialLoadSettingsArgs $;

        public Builder() {
            $ = new MigrationInitialLoadSettingsArgs();
        }

        public Builder(MigrationInitialLoadSettingsArgs defaults) {
            $ = new MigrationInitialLoadSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compatibilities (Updatable) Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
         * 
         * @return builder
         * 
         */
        public Builder compatibilities(@Nullable Output<List<String>> compatibilities) {
            $.compatibilities = compatibilities;
            return this;
        }

        /**
         * @param compatibilities (Updatable) Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
         * 
         * @return builder
         * 
         */
        public Builder compatibilities(List<String> compatibilities) {
            return compatibilities(Output.of(compatibilities));
        }

        /**
         * @param compatibilities (Updatable) Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
         * 
         * @return builder
         * 
         */
        public Builder compatibilities(String... compatibilities) {
            return compatibilities(List.of(compatibilities));
        }

        /**
         * @param dataPumpParameters (Updatable) Optional parameters for Data Pump Export and Import.
         * 
         * @return builder
         * 
         */
        public Builder dataPumpParameters(@Nullable Output<MigrationInitialLoadSettingsDataPumpParametersArgs> dataPumpParameters) {
            $.dataPumpParameters = dataPumpParameters;
            return this;
        }

        /**
         * @param dataPumpParameters (Updatable) Optional parameters for Data Pump Export and Import.
         * 
         * @return builder
         * 
         */
        public Builder dataPumpParameters(MigrationInitialLoadSettingsDataPumpParametersArgs dataPumpParameters) {
            return dataPumpParameters(Output.of(dataPumpParameters));
        }

        /**
         * @param exportDirectoryObject (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
         * 
         * @return builder
         * 
         */
        public Builder exportDirectoryObject(@Nullable Output<MigrationInitialLoadSettingsExportDirectoryObjectArgs> exportDirectoryObject) {
            $.exportDirectoryObject = exportDirectoryObject;
            return this;
        }

        /**
         * @param exportDirectoryObject (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
         * 
         * @return builder
         * 
         */
        public Builder exportDirectoryObject(MigrationInitialLoadSettingsExportDirectoryObjectArgs exportDirectoryObject) {
            return exportDirectoryObject(Output.of(exportDirectoryObject));
        }

        /**
         * @param handleGrantErrors (Updatable) The action taken in the event of errors related to GRANT or REVOKE errors.
         * 
         * @return builder
         * 
         */
        public Builder handleGrantErrors(@Nullable Output<String> handleGrantErrors) {
            $.handleGrantErrors = handleGrantErrors;
            return this;
        }

        /**
         * @param handleGrantErrors (Updatable) The action taken in the event of errors related to GRANT or REVOKE errors.
         * 
         * @return builder
         * 
         */
        public Builder handleGrantErrors(String handleGrantErrors) {
            return handleGrantErrors(Output.of(handleGrantErrors));
        }

        /**
         * @param importDirectoryObject (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
         * 
         * @return builder
         * 
         */
        public Builder importDirectoryObject(@Nullable Output<MigrationInitialLoadSettingsImportDirectoryObjectArgs> importDirectoryObject) {
            $.importDirectoryObject = importDirectoryObject;
            return this;
        }

        /**
         * @param importDirectoryObject (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
         * 
         * @return builder
         * 
         */
        public Builder importDirectoryObject(MigrationInitialLoadSettingsImportDirectoryObjectArgs importDirectoryObject) {
            return importDirectoryObject(Output.of(importDirectoryObject));
        }

        /**
         * @param isConsistent (Updatable) Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
         * 
         * @return builder
         * 
         */
        public Builder isConsistent(@Nullable Output<Boolean> isConsistent) {
            $.isConsistent = isConsistent;
            return this;
        }

        /**
         * @param isConsistent (Updatable) Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
         * 
         * @return builder
         * 
         */
        public Builder isConsistent(Boolean isConsistent) {
            return isConsistent(Output.of(isConsistent));
        }

        /**
         * @param isIgnoreExistingObjects (Updatable) Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
         * 
         * @return builder
         * 
         */
        public Builder isIgnoreExistingObjects(@Nullable Output<Boolean> isIgnoreExistingObjects) {
            $.isIgnoreExistingObjects = isIgnoreExistingObjects;
            return this;
        }

        /**
         * @param isIgnoreExistingObjects (Updatable) Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
         * 
         * @return builder
         * 
         */
        public Builder isIgnoreExistingObjects(Boolean isIgnoreExistingObjects) {
            return isIgnoreExistingObjects(Output.of(isIgnoreExistingObjects));
        }

        /**
         * @param isTzUtc (Updatable) Include a statement at the start of the dump to set the time zone to UTC.
         * 
         * @return builder
         * 
         */
        public Builder isTzUtc(@Nullable Output<Boolean> isTzUtc) {
            $.isTzUtc = isTzUtc;
            return this;
        }

        /**
         * @param isTzUtc (Updatable) Include a statement at the start of the dump to set the time zone to UTC.
         * 
         * @return builder
         * 
         */
        public Builder isTzUtc(Boolean isTzUtc) {
            return isTzUtc(Output.of(isTzUtc));
        }

        /**
         * @param jobMode (Updatable) Oracle Job Mode
         * 
         * @return builder
         * 
         */
        public Builder jobMode(Output<String> jobMode) {
            $.jobMode = jobMode;
            return this;
        }

        /**
         * @param jobMode (Updatable) Oracle Job Mode
         * 
         * @return builder
         * 
         */
        public Builder jobMode(String jobMode) {
            return jobMode(Output.of(jobMode));
        }

        /**
         * @param metadataRemaps (Updatable) Defines remapping to be applied to objects as they are processed.
         * 
         * @return builder
         * 
         */
        public Builder metadataRemaps(@Nullable Output<List<MigrationInitialLoadSettingsMetadataRemapArgs>> metadataRemaps) {
            $.metadataRemaps = metadataRemaps;
            return this;
        }

        /**
         * @param metadataRemaps (Updatable) Defines remapping to be applied to objects as they are processed.
         * 
         * @return builder
         * 
         */
        public Builder metadataRemaps(List<MigrationInitialLoadSettingsMetadataRemapArgs> metadataRemaps) {
            return metadataRemaps(Output.of(metadataRemaps));
        }

        /**
         * @param metadataRemaps (Updatable) Defines remapping to be applied to objects as they are processed.
         * 
         * @return builder
         * 
         */
        public Builder metadataRemaps(MigrationInitialLoadSettingsMetadataRemapArgs... metadataRemaps) {
            return metadataRemaps(List.of(metadataRemaps));
        }

        /**
         * @param primaryKeyCompatibility (Updatable) Primary key compatibility option
         * 
         * @return builder
         * 
         */
        public Builder primaryKeyCompatibility(@Nullable Output<String> primaryKeyCompatibility) {
            $.primaryKeyCompatibility = primaryKeyCompatibility;
            return this;
        }

        /**
         * @param primaryKeyCompatibility (Updatable) Primary key compatibility option
         * 
         * @return builder
         * 
         */
        public Builder primaryKeyCompatibility(String primaryKeyCompatibility) {
            return primaryKeyCompatibility(Output.of(primaryKeyCompatibility));
        }

        /**
         * @param tablespaceDetails (Updatable) Migration tablespace settings.
         * 
         * @return builder
         * 
         */
        public Builder tablespaceDetails(@Nullable Output<MigrationInitialLoadSettingsTablespaceDetailsArgs> tablespaceDetails) {
            $.tablespaceDetails = tablespaceDetails;
            return this;
        }

        /**
         * @param tablespaceDetails (Updatable) Migration tablespace settings.
         * 
         * @return builder
         * 
         */
        public Builder tablespaceDetails(MigrationInitialLoadSettingsTablespaceDetailsArgs tablespaceDetails) {
            return tablespaceDetails(Output.of(tablespaceDetails));
        }

        public MigrationInitialLoadSettingsArgs build() {
            if ($.jobMode == null) {
                throw new MissingRequiredPropertyException("MigrationInitialLoadSettingsArgs", "jobMode");
            }
            return $;
        }
    }

}
