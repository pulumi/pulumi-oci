// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MigrationInitialLoadSettingsTablespaceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrationInitialLoadSettingsTablespaceDetailsArgs Empty = new MigrationInitialLoadSettingsTablespaceDetailsArgs();

    /**
     * (Updatable) Size of Oracle database blocks in KB.
     * 
     */
    @Import(name="blockSizeInKbs")
    private @Nullable Output<String> blockSizeInKbs;

    /**
     * @return (Updatable) Size of Oracle database blocks in KB.
     * 
     */
    public Optional<Output<String>> blockSizeInKbs() {
        return Optional.ofNullable(this.blockSizeInKbs);
    }

    /**
     * (Updatable) Size to extend the tablespace in MB.  Note: Only applicable if &#39;isBigFile&#39; property is set to true.
     * 
     */
    @Import(name="extendSizeInMbs")
    private @Nullable Output<Integer> extendSizeInMbs;

    /**
     * @return (Updatable) Size to extend the tablespace in MB.  Note: Only applicable if &#39;isBigFile&#39; property is set to true.
     * 
     */
    public Optional<Output<Integer>> extendSizeInMbs() {
        return Optional.ofNullable(this.extendSizeInMbs);
    }

    /**
     * (Updatable) Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
     * 
     */
    @Import(name="isAutoCreate")
    private @Nullable Output<Boolean> isAutoCreate;

    /**
     * @return (Updatable) Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
     * 
     */
    public Optional<Output<Boolean>> isAutoCreate() {
        return Optional.ofNullable(this.isAutoCreate);
    }

    /**
     * (Updatable) Set this property to true to enable tablespace of the type big file.
     * 
     */
    @Import(name="isBigFile")
    private @Nullable Output<Boolean> isBigFile;

    /**
     * @return (Updatable) Set this property to true to enable tablespace of the type big file.
     * 
     */
    public Optional<Output<Boolean>> isBigFile() {
        return Optional.ofNullable(this.isBigFile);
    }

    /**
     * (Updatable) Name of the tablespace on the target database to which the source database tablespace is to be remapped.
     * 
     */
    @Import(name="remapTarget")
    private @Nullable Output<String> remapTarget;

    /**
     * @return (Updatable) Name of the tablespace on the target database to which the source database tablespace is to be remapped.
     * 
     */
    public Optional<Output<String>> remapTarget() {
        return Optional.ofNullable(this.remapTarget);
    }

    /**
     * (Updatable) Type of Database Base Migration Target.
     * 
     */
    @Import(name="targetType", required=true)
    private Output<String> targetType;

    /**
     * @return (Updatable) Type of Database Base Migration Target.
     * 
     */
    public Output<String> targetType() {
        return this.targetType;
    }

    private MigrationInitialLoadSettingsTablespaceDetailsArgs() {}

    private MigrationInitialLoadSettingsTablespaceDetailsArgs(MigrationInitialLoadSettingsTablespaceDetailsArgs $) {
        this.blockSizeInKbs = $.blockSizeInKbs;
        this.extendSizeInMbs = $.extendSizeInMbs;
        this.isAutoCreate = $.isAutoCreate;
        this.isBigFile = $.isBigFile;
        this.remapTarget = $.remapTarget;
        this.targetType = $.targetType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrationInitialLoadSettingsTablespaceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrationInitialLoadSettingsTablespaceDetailsArgs $;

        public Builder() {
            $ = new MigrationInitialLoadSettingsTablespaceDetailsArgs();
        }

        public Builder(MigrationInitialLoadSettingsTablespaceDetailsArgs defaults) {
            $ = new MigrationInitialLoadSettingsTablespaceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockSizeInKbs (Updatable) Size of Oracle database blocks in KB.
         * 
         * @return builder
         * 
         */
        public Builder blockSizeInKbs(@Nullable Output<String> blockSizeInKbs) {
            $.blockSizeInKbs = blockSizeInKbs;
            return this;
        }

        /**
         * @param blockSizeInKbs (Updatable) Size of Oracle database blocks in KB.
         * 
         * @return builder
         * 
         */
        public Builder blockSizeInKbs(String blockSizeInKbs) {
            return blockSizeInKbs(Output.of(blockSizeInKbs));
        }

        /**
         * @param extendSizeInMbs (Updatable) Size to extend the tablespace in MB.  Note: Only applicable if &#39;isBigFile&#39; property is set to true.
         * 
         * @return builder
         * 
         */
        public Builder extendSizeInMbs(@Nullable Output<Integer> extendSizeInMbs) {
            $.extendSizeInMbs = extendSizeInMbs;
            return this;
        }

        /**
         * @param extendSizeInMbs (Updatable) Size to extend the tablespace in MB.  Note: Only applicable if &#39;isBigFile&#39; property is set to true.
         * 
         * @return builder
         * 
         */
        public Builder extendSizeInMbs(Integer extendSizeInMbs) {
            return extendSizeInMbs(Output.of(extendSizeInMbs));
        }

        /**
         * @param isAutoCreate (Updatable) Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
         * 
         * @return builder
         * 
         */
        public Builder isAutoCreate(@Nullable Output<Boolean> isAutoCreate) {
            $.isAutoCreate = isAutoCreate;
            return this;
        }

        /**
         * @param isAutoCreate (Updatable) Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
         * 
         * @return builder
         * 
         */
        public Builder isAutoCreate(Boolean isAutoCreate) {
            return isAutoCreate(Output.of(isAutoCreate));
        }

        /**
         * @param isBigFile (Updatable) Set this property to true to enable tablespace of the type big file.
         * 
         * @return builder
         * 
         */
        public Builder isBigFile(@Nullable Output<Boolean> isBigFile) {
            $.isBigFile = isBigFile;
            return this;
        }

        /**
         * @param isBigFile (Updatable) Set this property to true to enable tablespace of the type big file.
         * 
         * @return builder
         * 
         */
        public Builder isBigFile(Boolean isBigFile) {
            return isBigFile(Output.of(isBigFile));
        }

        /**
         * @param remapTarget (Updatable) Name of the tablespace on the target database to which the source database tablespace is to be remapped.
         * 
         * @return builder
         * 
         */
        public Builder remapTarget(@Nullable Output<String> remapTarget) {
            $.remapTarget = remapTarget;
            return this;
        }

        /**
         * @param remapTarget (Updatable) Name of the tablespace on the target database to which the source database tablespace is to be remapped.
         * 
         * @return builder
         * 
         */
        public Builder remapTarget(String remapTarget) {
            return remapTarget(Output.of(remapTarget));
        }

        /**
         * @param targetType (Updatable) Type of Database Base Migration Target.
         * 
         * @return builder
         * 
         */
        public Builder targetType(Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType (Updatable) Type of Database Base Migration Target.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        public MigrationInitialLoadSettingsTablespaceDetailsArgs build() {
            if ($.targetType == null) {
                throw new MissingRequiredPropertyException("MigrationInitialLoadSettingsTablespaceDetailsArgs", "targetType");
            }
            return $;
        }
    }

}
