// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionConnectDescriptor {
    /**
     * @return Connect string.
     * 
     */
    private @Nullable String connectString;
    /**
     * @return Database service name.
     * 
     */
    private @Nullable String databaseServiceName;
    /**
     * @return Name of the host the SSH key is valid for.
     * 
     */
    private @Nullable String host;
    /**
     * @return Port of the connect descriptor.
     * 
     */
    private @Nullable Integer port;

    private GetConnectionConnectDescriptor() {}
    /**
     * @return Connect string.
     * 
     */
    public Optional<String> connectString() {
        return Optional.ofNullable(this.connectString);
    }
    /**
     * @return Database service name.
     * 
     */
    public Optional<String> databaseServiceName() {
        return Optional.ofNullable(this.databaseServiceName);
    }
    /**
     * @return Name of the host the SSH key is valid for.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Port of the connect descriptor.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionConnectDescriptor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectString;
        private @Nullable String databaseServiceName;
        private @Nullable String host;
        private @Nullable Integer port;
        public Builder() {}
        public Builder(GetConnectionConnectDescriptor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectString = defaults.connectString;
    	      this.databaseServiceName = defaults.databaseServiceName;
    	      this.host = defaults.host;
    	      this.port = defaults.port;
        }

        @CustomType.Setter
        public Builder connectString(@Nullable String connectString) {
            this.connectString = connectString;
            return this;
        }
        @CustomType.Setter
        public Builder databaseServiceName(@Nullable String databaseServiceName) {
            this.databaseServiceName = databaseServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        public GetConnectionConnectDescriptor build() {
            final var o = new GetConnectionConnectDescriptor();
            o.connectString = connectString;
            o.databaseServiceName = databaseServiceName;
            o.host = host;
            o.port = port;
            return o;
        }
    }
}
