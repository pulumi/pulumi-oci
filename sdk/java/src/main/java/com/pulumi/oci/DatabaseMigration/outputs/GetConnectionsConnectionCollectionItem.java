// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.outputs.GetConnectionsConnectionCollectionItemAdditionalAttribute;
import com.pulumi.oci.DatabaseMigration.outputs.GetConnectionsConnectionCollectionItemIngressIp;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionsConnectionCollectionItem {
    /**
     * @return An array of name-value pair attribute entries.
     * 
     */
    private List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes;
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Connect descriptor or Easy Connect Naming method used to connect to a database.
     * 
     */
    private String connectionString;
    /**
     * @return The array of connection types.
     * 
     */
    private String connectionType;
    /**
     * @return The OCID of the database being referenced.
     * 
     */
    private String databaseId;
    /**
     * @return The name of the database being referenced.
     * 
     */
    private String databaseName;
    /**
     * @return The OCID of the database system being referenced.
     * 
     */
    private String dbSystemId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The IP Address of the host.
     * 
     */
    private String host;
    /**
     * @return The OCID of the connection being referenced.
     * 
     */
    private String id;
    /**
     * @return List of ingress IP addresses from where to connect to this connection&#39;s privateIp.
     * 
     */
    private List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps;
    /**
     * @return The OCID of the key used in cryptographic operations.
     * 
     */
    private String keyId;
    /**
     * @return The message describing the current state of the connection&#39;s lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return An array of Network Security Group OCIDs used to define network access for Connections.
     * 
     */
    private List<String> nsgIds;
    /**
     * @return The password (credential) used when creating or updating this resource.
     * 
     */
    private String password;
    /**
     * @return The port to be used for the connection.
     * 
     */
    private Integer port;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String privateEndpointId;
    /**
     * @return The password (credential) used when creating or updating this resource.
     * 
     */
    private String replicationPassword;
    /**
     * @return The username (credential) used when creating or updating this resource.
     * 
     */
    private String replicationUsername;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String secretId;
    /**
     * @return Security Protocol to be used for the connection.
     * 
     */
    private String securityProtocol;
    /**
     * @return Name of the host the SSH key is valid for.
     * 
     */
    private String sshHost;
    /**
     * @return Private SSH key string.
     * 
     */
    private String sshKey;
    /**
     * @return Sudo location
     * 
     */
    private String sshSudoLocation;
    /**
     * @return The username (credential) used when creating or updating this resource.
     * 
     */
    private String sshUser;
    private String sslCa;
    private String sslCert;
    private String sslCrl;
    private String sslKey;
    /**
     * @return SSL mode to be used for the connection.
     * 
     */
    private String sslMode;
    /**
     * @return The current state of the Database Migration Deployment.
     * 
     */
    private String state;
    /**
     * @return Oracle Cloud Infrastructure resource ID.
     * 
     */
    private String subnetId;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The array of technology types.
     * 
     */
    private String technologyType;
    /**
     * @return The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeCreated;
    /**
     * @return The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeUpdated;
    /**
     * @return The username (credential) used when creating or updating this resource.
     * 
     */
    private String username;
    /**
     * @return Oracle Cloud Infrastructure resource ID.
     * 
     */
    private String vaultId;
    private String wallet;

    private GetConnectionsConnectionCollectionItem() {}
    /**
     * @return An array of name-value pair attribute entries.
     * 
     */
    public List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes() {
        return this.additionalAttributes;
    }
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Connect descriptor or Easy Connect Naming method used to connect to a database.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The array of connection types.
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return The OCID of the database being referenced.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The name of the database being referenced.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return The OCID of the database system being referenced.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The IP Address of the host.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The OCID of the connection being referenced.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of ingress IP addresses from where to connect to this connection&#39;s privateIp.
     * 
     */
    public List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps() {
        return this.ingressIps;
    }
    /**
     * @return The OCID of the key used in cryptographic operations.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return The message describing the current state of the connection&#39;s lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return An array of Network Security Group OCIDs used to define network access for Connections.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The password (credential) used when creating or updating this resource.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The port to be used for the connection.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String privateEndpointId() {
        return this.privateEndpointId;
    }
    /**
     * @return The password (credential) used when creating or updating this resource.
     * 
     */
    public String replicationPassword() {
        return this.replicationPassword;
    }
    /**
     * @return The username (credential) used when creating or updating this resource.
     * 
     */
    public String replicationUsername() {
        return this.replicationUsername;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return Security Protocol to be used for the connection.
     * 
     */
    public String securityProtocol() {
        return this.securityProtocol;
    }
    /**
     * @return Name of the host the SSH key is valid for.
     * 
     */
    public String sshHost() {
        return this.sshHost;
    }
    /**
     * @return Private SSH key string.
     * 
     */
    public String sshKey() {
        return this.sshKey;
    }
    /**
     * @return Sudo location
     * 
     */
    public String sshSudoLocation() {
        return this.sshSudoLocation;
    }
    /**
     * @return The username (credential) used when creating or updating this resource.
     * 
     */
    public String sshUser() {
        return this.sshUser;
    }
    public String sslCa() {
        return this.sslCa;
    }
    public String sslCert() {
        return this.sslCert;
    }
    public String sslCrl() {
        return this.sslCrl;
    }
    public String sslKey() {
        return this.sslKey;
    }
    /**
     * @return SSL mode to be used for the connection.
     * 
     */
    public String sslMode() {
        return this.sslMode;
    }
    /**
     * @return The current state of the Database Migration Deployment.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Oracle Cloud Infrastructure resource ID.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The array of technology types.
     * 
     */
    public String technologyType() {
        return this.technologyType;
    }
    /**
     * @return The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The username (credential) used when creating or updating this resource.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return Oracle Cloud Infrastructure resource ID.
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }
    public String wallet() {
        return this.wallet;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnectionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes;
        private String compartmentId;
        private String connectionString;
        private String connectionType;
        private String databaseId;
        private String databaseName;
        private String dbSystemId;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String host;
        private String id;
        private List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps;
        private String keyId;
        private String lifecycleDetails;
        private List<String> nsgIds;
        private String password;
        private Integer port;
        private String privateEndpointId;
        private String replicationPassword;
        private String replicationUsername;
        private String secretId;
        private String securityProtocol;
        private String sshHost;
        private String sshKey;
        private String sshSudoLocation;
        private String sshUser;
        private String sslCa;
        private String sslCert;
        private String sslCrl;
        private String sslKey;
        private String sslMode;
        private String state;
        private String subnetId;
        private Map<String,String> systemTags;
        private String technologyType;
        private String timeCreated;
        private String timeUpdated;
        private String username;
        private String vaultId;
        private String wallet;
        public Builder() {}
        public Builder(GetConnectionsConnectionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalAttributes = defaults.additionalAttributes;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.connectionType = defaults.connectionType;
    	      this.databaseId = defaults.databaseId;
    	      this.databaseName = defaults.databaseName;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.ingressIps = defaults.ingressIps;
    	      this.keyId = defaults.keyId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.nsgIds = defaults.nsgIds;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.privateEndpointId = defaults.privateEndpointId;
    	      this.replicationPassword = defaults.replicationPassword;
    	      this.replicationUsername = defaults.replicationUsername;
    	      this.secretId = defaults.secretId;
    	      this.securityProtocol = defaults.securityProtocol;
    	      this.sshHost = defaults.sshHost;
    	      this.sshKey = defaults.sshKey;
    	      this.sshSudoLocation = defaults.sshSudoLocation;
    	      this.sshUser = defaults.sshUser;
    	      this.sslCa = defaults.sslCa;
    	      this.sslCert = defaults.sslCert;
    	      this.sslCrl = defaults.sslCrl;
    	      this.sslKey = defaults.sslKey;
    	      this.sslMode = defaults.sslMode;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.systemTags = defaults.systemTags;
    	      this.technologyType = defaults.technologyType;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.username = defaults.username;
    	      this.vaultId = defaults.vaultId;
    	      this.wallet = defaults.wallet;
        }

        @CustomType.Setter
        public Builder additionalAttributes(List<GetConnectionsConnectionCollectionItemAdditionalAttribute> additionalAttributes) {
            if (additionalAttributes == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "additionalAttributes");
            }
            this.additionalAttributes = additionalAttributes;
            return this;
        }
        public Builder additionalAttributes(GetConnectionsConnectionCollectionItemAdditionalAttribute... additionalAttributes) {
            return additionalAttributes(List.of(additionalAttributes));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            if (connectionType == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "connectionType");
            }
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ingressIps(List<GetConnectionsConnectionCollectionItemIngressIp> ingressIps) {
            if (ingressIps == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "ingressIps");
            }
            this.ingressIps = ingressIps;
            return this;
        }
        public Builder ingressIps(GetConnectionsConnectionCollectionItemIngressIp... ingressIps) {
            return ingressIps(List.of(ingressIps));
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointId(String privateEndpointId) {
            if (privateEndpointId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "privateEndpointId");
            }
            this.privateEndpointId = privateEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder replicationPassword(String replicationPassword) {
            if (replicationPassword == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "replicationPassword");
            }
            this.replicationPassword = replicationPassword;
            return this;
        }
        @CustomType.Setter
        public Builder replicationUsername(String replicationUsername) {
            if (replicationUsername == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "replicationUsername");
            }
            this.replicationUsername = replicationUsername;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder securityProtocol(String securityProtocol) {
            if (securityProtocol == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "securityProtocol");
            }
            this.securityProtocol = securityProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder sshHost(String sshHost) {
            if (sshHost == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sshHost");
            }
            this.sshHost = sshHost;
            return this;
        }
        @CustomType.Setter
        public Builder sshKey(String sshKey) {
            if (sshKey == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sshKey");
            }
            this.sshKey = sshKey;
            return this;
        }
        @CustomType.Setter
        public Builder sshSudoLocation(String sshSudoLocation) {
            if (sshSudoLocation == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sshSudoLocation");
            }
            this.sshSudoLocation = sshSudoLocation;
            return this;
        }
        @CustomType.Setter
        public Builder sshUser(String sshUser) {
            if (sshUser == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sshUser");
            }
            this.sshUser = sshUser;
            return this;
        }
        @CustomType.Setter
        public Builder sslCa(String sslCa) {
            if (sslCa == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sslCa");
            }
            this.sslCa = sslCa;
            return this;
        }
        @CustomType.Setter
        public Builder sslCert(String sslCert) {
            if (sslCert == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sslCert");
            }
            this.sslCert = sslCert;
            return this;
        }
        @CustomType.Setter
        public Builder sslCrl(String sslCrl) {
            if (sslCrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sslCrl");
            }
            this.sslCrl = sslCrl;
            return this;
        }
        @CustomType.Setter
        public Builder sslKey(String sslKey) {
            if (sslKey == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sslKey");
            }
            this.sslKey = sslKey;
            return this;
        }
        @CustomType.Setter
        public Builder sslMode(String sslMode) {
            if (sslMode == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "sslMode");
            }
            this.sslMode = sslMode;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder technologyType(String technologyType) {
            if (technologyType == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "technologyType");
            }
            this.technologyType = technologyType;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            if (vaultId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "vaultId");
            }
            this.vaultId = vaultId;
            return this;
        }
        @CustomType.Setter
        public Builder wallet(String wallet) {
            if (wallet == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "wallet");
            }
            this.wallet = wallet;
            return this;
        }
        public GetConnectionsConnectionCollectionItem build() {
            final var _resultValue = new GetConnectionsConnectionCollectionItem();
            _resultValue.additionalAttributes = additionalAttributes;
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionString = connectionString;
            _resultValue.connectionType = connectionType;
            _resultValue.databaseId = databaseId;
            _resultValue.databaseName = databaseName;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.ingressIps = ingressIps;
            _resultValue.keyId = keyId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.nsgIds = nsgIds;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.privateEndpointId = privateEndpointId;
            _resultValue.replicationPassword = replicationPassword;
            _resultValue.replicationUsername = replicationUsername;
            _resultValue.secretId = secretId;
            _resultValue.securityProtocol = securityProtocol;
            _resultValue.sshHost = sshHost;
            _resultValue.sshKey = sshKey;
            _resultValue.sshSudoLocation = sshSudoLocation;
            _resultValue.sshUser = sshUser;
            _resultValue.sslCa = sslCa;
            _resultValue.sslCert = sslCert;
            _resultValue.sslCrl = sslCrl;
            _resultValue.sslKey = sslKey;
            _resultValue.sslMode = sslMode;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.systemTags = systemTags;
            _resultValue.technologyType = technologyType;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.username = username;
            _resultValue.vaultId = vaultId;
            _resultValue.wallet = wallet;
            return _resultValue;
        }
    }
}
