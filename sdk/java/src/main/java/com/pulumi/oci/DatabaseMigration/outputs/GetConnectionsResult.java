// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.outputs.GetConnectionsConnectionCollection;
import com.pulumi.oci.DatabaseMigration.outputs.GetConnectionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionsResult {
    /**
     * @return The OCID of the compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of connection_collection.
     * 
     */
    private List<GetConnectionsConnectionCollection> connectionCollections;
    /**
     * @return Defines the type of connection. For example, ORACLE.
     * 
     */
    private @Nullable List<String> connectionTypes;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetConnectionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String sourceConnectionId;
    /**
     * @return The Connection&#39;s current lifecycle state.
     * 
     */
    private @Nullable String state;
    /**
     * @return The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     * 
     */
    private @Nullable List<String> technologyTypes;

    private GetConnectionsResult() {}
    /**
     * @return The OCID of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of connection_collection.
     * 
     */
    public List<GetConnectionsConnectionCollection> connectionCollections() {
        return this.connectionCollections;
    }
    /**
     * @return Defines the type of connection. For example, ORACLE.
     * 
     */
    public List<String> connectionTypes() {
        return this.connectionTypes == null ? List.of() : this.connectionTypes;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetConnectionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> sourceConnectionId() {
        return Optional.ofNullable(this.sourceConnectionId);
    }
    /**
     * @return The Connection&#39;s current lifecycle state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     * 
     */
    public List<String> technologyTypes() {
        return this.technologyTypes == null ? List.of() : this.technologyTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetConnectionsConnectionCollection> connectionCollections;
        private @Nullable List<String> connectionTypes;
        private @Nullable String displayName;
        private @Nullable List<GetConnectionsFilter> filters;
        private String id;
        private @Nullable String sourceConnectionId;
        private @Nullable String state;
        private @Nullable List<String> technologyTypes;
        public Builder() {}
        public Builder(GetConnectionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionCollections = defaults.connectionCollections;
    	      this.connectionTypes = defaults.connectionTypes;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.sourceConnectionId = defaults.sourceConnectionId;
    	      this.state = defaults.state;
    	      this.technologyTypes = defaults.technologyTypes;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionCollections(List<GetConnectionsConnectionCollection> connectionCollections) {
            if (connectionCollections == null) {
              throw new MissingRequiredPropertyException("GetConnectionsResult", "connectionCollections");
            }
            this.connectionCollections = connectionCollections;
            return this;
        }
        public Builder connectionCollections(GetConnectionsConnectionCollection... connectionCollections) {
            return connectionCollections(List.of(connectionCollections));
        }
        @CustomType.Setter
        public Builder connectionTypes(@Nullable List<String> connectionTypes) {

            this.connectionTypes = connectionTypes;
            return this;
        }
        public Builder connectionTypes(String... connectionTypes) {
            return connectionTypes(List.of(connectionTypes));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetConnectionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetConnectionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder sourceConnectionId(@Nullable String sourceConnectionId) {

            this.sourceConnectionId = sourceConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder technologyTypes(@Nullable List<String> technologyTypes) {

            this.technologyTypes = technologyTypes;
            return this;
        }
        public Builder technologyTypes(String... technologyTypes) {
            return technologyTypes(List.of(technologyTypes));
        }
        public GetConnectionsResult build() {
            final var _resultValue = new GetConnectionsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionCollections = connectionCollections;
            _resultValue.connectionTypes = connectionTypes;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.sourceConnectionId = sourceConnectionId;
            _resultValue.state = state;
            _resultValue.technologyTypes = technologyTypes;
            return _resultValue;
        }
    }
}
