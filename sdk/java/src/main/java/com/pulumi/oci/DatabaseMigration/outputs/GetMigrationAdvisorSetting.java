// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetMigrationAdvisorSetting {
    /**
     * @return True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
     * 
     */
    private Boolean isIgnoreErrors;
    /**
     * @return True to skip the Pre-Migration Advisor execution. Default is false.
     * 
     */
    private Boolean isSkipAdvisor;

    private GetMigrationAdvisorSetting() {}
    /**
     * @return True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
     * 
     */
    public Boolean isIgnoreErrors() {
        return this.isIgnoreErrors;
    }
    /**
     * @return True to skip the Pre-Migration Advisor execution. Default is false.
     * 
     */
    public Boolean isSkipAdvisor() {
        return this.isSkipAdvisor;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationAdvisorSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isIgnoreErrors;
        private Boolean isSkipAdvisor;
        public Builder() {}
        public Builder(GetMigrationAdvisorSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isIgnoreErrors = defaults.isIgnoreErrors;
    	      this.isSkipAdvisor = defaults.isSkipAdvisor;
        }

        @CustomType.Setter
        public Builder isIgnoreErrors(Boolean isIgnoreErrors) {
            this.isIgnoreErrors = Objects.requireNonNull(isIgnoreErrors);
            return this;
        }
        @CustomType.Setter
        public Builder isSkipAdvisor(Boolean isSkipAdvisor) {
            this.isSkipAdvisor = Objects.requireNonNull(isSkipAdvisor);
            return this;
        }
        public GetMigrationAdvisorSetting build() {
            final var _resultValue = new GetMigrationAdvisorSetting();
            _resultValue.isIgnoreErrors = isIgnoreErrors;
            _resultValue.isSkipAdvisor = isSkipAdvisor;
            return _resultValue;
        }
    }
}
