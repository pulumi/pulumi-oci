// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMigrationDatapumpSettingDataPumpParameter {
    /**
     * @return Estimate size of dumps that will be generated.
     * 
     */
    private @Nullable String estimate;
    /**
     * @return Exclude paratemers for Export and Import.
     * 
     */
    private @Nullable List<String> excludeParameters;
    /**
     * @return Maximum number of worker processes that can be used for a Data Pump Export job.
     * 
     */
    private @Nullable Integer exportParallelismDegree;
    /**
     * @return Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
     * 
     */
    private @Nullable Integer importParallelismDegree;
    /**
     * @return Set to false to force Data Pump worker processes to run on one instance.
     * 
     */
    private @Nullable Boolean isCluster;
    /**
     * @return IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
     * 
     */
    private @Nullable String tableExistsAction;

    private GetMigrationDatapumpSettingDataPumpParameter() {}
    /**
     * @return Estimate size of dumps that will be generated.
     * 
     */
    public Optional<String> estimate() {
        return Optional.ofNullable(this.estimate);
    }
    /**
     * @return Exclude paratemers for Export and Import.
     * 
     */
    public List<String> excludeParameters() {
        return this.excludeParameters == null ? List.of() : this.excludeParameters;
    }
    /**
     * @return Maximum number of worker processes that can be used for a Data Pump Export job.
     * 
     */
    public Optional<Integer> exportParallelismDegree() {
        return Optional.ofNullable(this.exportParallelismDegree);
    }
    /**
     * @return Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
     * 
     */
    public Optional<Integer> importParallelismDegree() {
        return Optional.ofNullable(this.importParallelismDegree);
    }
    /**
     * @return Set to false to force Data Pump worker processes to run on one instance.
     * 
     */
    public Optional<Boolean> isCluster() {
        return Optional.ofNullable(this.isCluster);
    }
    /**
     * @return IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
     * 
     */
    public Optional<String> tableExistsAction() {
        return Optional.ofNullable(this.tableExistsAction);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationDatapumpSettingDataPumpParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String estimate;
        private @Nullable List<String> excludeParameters;
        private @Nullable Integer exportParallelismDegree;
        private @Nullable Integer importParallelismDegree;
        private @Nullable Boolean isCluster;
        private @Nullable String tableExistsAction;
        public Builder() {}
        public Builder(GetMigrationDatapumpSettingDataPumpParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.estimate = defaults.estimate;
    	      this.excludeParameters = defaults.excludeParameters;
    	      this.exportParallelismDegree = defaults.exportParallelismDegree;
    	      this.importParallelismDegree = defaults.importParallelismDegree;
    	      this.isCluster = defaults.isCluster;
    	      this.tableExistsAction = defaults.tableExistsAction;
        }

        @CustomType.Setter
        public Builder estimate(@Nullable String estimate) {
            this.estimate = estimate;
            return this;
        }
        @CustomType.Setter
        public Builder excludeParameters(@Nullable List<String> excludeParameters) {
            this.excludeParameters = excludeParameters;
            return this;
        }
        public Builder excludeParameters(String... excludeParameters) {
            return excludeParameters(List.of(excludeParameters));
        }
        @CustomType.Setter
        public Builder exportParallelismDegree(@Nullable Integer exportParallelismDegree) {
            this.exportParallelismDegree = exportParallelismDegree;
            return this;
        }
        @CustomType.Setter
        public Builder importParallelismDegree(@Nullable Integer importParallelismDegree) {
            this.importParallelismDegree = importParallelismDegree;
            return this;
        }
        @CustomType.Setter
        public Builder isCluster(@Nullable Boolean isCluster) {
            this.isCluster = isCluster;
            return this;
        }
        @CustomType.Setter
        public Builder tableExistsAction(@Nullable String tableExistsAction) {
            this.tableExistsAction = tableExistsAction;
            return this;
        }
        public GetMigrationDatapumpSettingDataPumpParameter build() {
            final var o = new GetMigrationDatapumpSettingDataPumpParameter();
            o.estimate = estimate;
            o.excludeParameters = excludeParameters;
            o.exportParallelismDegree = exportParallelismDegree;
            o.importParallelismDegree = importParallelismDegree;
            o.isCluster = isCluster;
            o.tableExistsAction = tableExistsAction;
            return o;
        }
    }
}
