// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMigrationIncludeObject {
    private Boolean isOmitExcludedTableFromReplication;
    private String object;
    private String owner;
    private String schema;
    /**
     * @return The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
     * 
     */
    private String type;

    private GetMigrationIncludeObject() {}
    public Boolean isOmitExcludedTableFromReplication() {
        return this.isOmitExcludedTableFromReplication;
    }
    public String object() {
        return this.object;
    }
    public String owner() {
        return this.owner;
    }
    public String schema() {
        return this.schema;
    }
    /**
     * @return The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationIncludeObject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isOmitExcludedTableFromReplication;
        private String object;
        private String owner;
        private String schema;
        private String type;
        public Builder() {}
        public Builder(GetMigrationIncludeObject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isOmitExcludedTableFromReplication = defaults.isOmitExcludedTableFromReplication;
    	      this.object = defaults.object;
    	      this.owner = defaults.owner;
    	      this.schema = defaults.schema;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder isOmitExcludedTableFromReplication(Boolean isOmitExcludedTableFromReplication) {
            if (isOmitExcludedTableFromReplication == null) {
              throw new MissingRequiredPropertyException("GetMigrationIncludeObject", "isOmitExcludedTableFromReplication");
            }
            this.isOmitExcludedTableFromReplication = isOmitExcludedTableFromReplication;
            return this;
        }
        @CustomType.Setter
        public Builder object(String object) {
            if (object == null) {
              throw new MissingRequiredPropertyException("GetMigrationIncludeObject", "object");
            }
            this.object = object;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetMigrationIncludeObject", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetMigrationIncludeObject", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMigrationIncludeObject", "type");
            }
            this.type = type;
            return this;
        }
        public GetMigrationIncludeObject build() {
            final var _resultValue = new GetMigrationIncludeObject();
            _resultValue.isOmitExcludedTableFromReplication = isOmitExcludedTableFromReplication;
            _resultValue.object = object;
            _resultValue.owner = owner;
            _resultValue.schema = schema;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
