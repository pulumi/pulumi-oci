// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationInitialLoadSettingDataPumpParameter;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationInitialLoadSettingExportDirectoryObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationInitialLoadSettingImportDirectoryObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationInitialLoadSettingMetadataRemap;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationInitialLoadSettingTablespaceDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMigrationInitialLoadSetting {
    /**
     * @return Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
     * 
     */
    private List<String> compatibilities;
    /**
     * @return Optional parameters for Data Pump Export and Import.
     * 
     */
    private List<GetMigrationInitialLoadSettingDataPumpParameter> dataPumpParameters;
    /**
     * @return Directory object details, used to define either import or export directory objects in Data Pump Settings.
     * 
     */
    private List<GetMigrationInitialLoadSettingExportDirectoryObject> exportDirectoryObjects;
    /**
     * @return The action taken in the event of errors related to GRANT or REVOKE errors.
     * 
     */
    private String handleGrantErrors;
    /**
     * @return Directory object details, used to define either import or export directory objects in Data Pump Settings.
     * 
     */
    private List<GetMigrationInitialLoadSettingImportDirectoryObject> importDirectoryObjects;
    /**
     * @return Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
     * 
     */
    private Boolean isConsistent;
    /**
     * @return Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
     * 
     */
    private Boolean isIgnoreExistingObjects;
    /**
     * @return Include a statement at the start of the dump to set the time zone to UTC.
     * 
     */
    private Boolean isTzUtc;
    /**
     * @return Oracle Job Mode
     * 
     */
    private String jobMode;
    /**
     * @return Defines remapping to be applied to objects as they are processed.
     * 
     */
    private List<GetMigrationInitialLoadSettingMetadataRemap> metadataRemaps;
    /**
     * @return Primary key compatibility option
     * 
     */
    private String primaryKeyCompatibility;
    /**
     * @return Migration tablespace settings.
     * 
     */
    private List<GetMigrationInitialLoadSettingTablespaceDetail> tablespaceDetails;

    private GetMigrationInitialLoadSetting() {}
    /**
     * @return Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
     * 
     */
    public List<String> compatibilities() {
        return this.compatibilities;
    }
    /**
     * @return Optional parameters for Data Pump Export and Import.
     * 
     */
    public List<GetMigrationInitialLoadSettingDataPumpParameter> dataPumpParameters() {
        return this.dataPumpParameters;
    }
    /**
     * @return Directory object details, used to define either import or export directory objects in Data Pump Settings.
     * 
     */
    public List<GetMigrationInitialLoadSettingExportDirectoryObject> exportDirectoryObjects() {
        return this.exportDirectoryObjects;
    }
    /**
     * @return The action taken in the event of errors related to GRANT or REVOKE errors.
     * 
     */
    public String handleGrantErrors() {
        return this.handleGrantErrors;
    }
    /**
     * @return Directory object details, used to define either import or export directory objects in Data Pump Settings.
     * 
     */
    public List<GetMigrationInitialLoadSettingImportDirectoryObject> importDirectoryObjects() {
        return this.importDirectoryObjects;
    }
    /**
     * @return Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
     * 
     */
    public Boolean isConsistent() {
        return this.isConsistent;
    }
    /**
     * @return Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
     * 
     */
    public Boolean isIgnoreExistingObjects() {
        return this.isIgnoreExistingObjects;
    }
    /**
     * @return Include a statement at the start of the dump to set the time zone to UTC.
     * 
     */
    public Boolean isTzUtc() {
        return this.isTzUtc;
    }
    /**
     * @return Oracle Job Mode
     * 
     */
    public String jobMode() {
        return this.jobMode;
    }
    /**
     * @return Defines remapping to be applied to objects as they are processed.
     * 
     */
    public List<GetMigrationInitialLoadSettingMetadataRemap> metadataRemaps() {
        return this.metadataRemaps;
    }
    /**
     * @return Primary key compatibility option
     * 
     */
    public String primaryKeyCompatibility() {
        return this.primaryKeyCompatibility;
    }
    /**
     * @return Migration tablespace settings.
     * 
     */
    public List<GetMigrationInitialLoadSettingTablespaceDetail> tablespaceDetails() {
        return this.tablespaceDetails;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationInitialLoadSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> compatibilities;
        private List<GetMigrationInitialLoadSettingDataPumpParameter> dataPumpParameters;
        private List<GetMigrationInitialLoadSettingExportDirectoryObject> exportDirectoryObjects;
        private String handleGrantErrors;
        private List<GetMigrationInitialLoadSettingImportDirectoryObject> importDirectoryObjects;
        private Boolean isConsistent;
        private Boolean isIgnoreExistingObjects;
        private Boolean isTzUtc;
        private String jobMode;
        private List<GetMigrationInitialLoadSettingMetadataRemap> metadataRemaps;
        private String primaryKeyCompatibility;
        private List<GetMigrationInitialLoadSettingTablespaceDetail> tablespaceDetails;
        public Builder() {}
        public Builder(GetMigrationInitialLoadSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compatibilities = defaults.compatibilities;
    	      this.dataPumpParameters = defaults.dataPumpParameters;
    	      this.exportDirectoryObjects = defaults.exportDirectoryObjects;
    	      this.handleGrantErrors = defaults.handleGrantErrors;
    	      this.importDirectoryObjects = defaults.importDirectoryObjects;
    	      this.isConsistent = defaults.isConsistent;
    	      this.isIgnoreExistingObjects = defaults.isIgnoreExistingObjects;
    	      this.isTzUtc = defaults.isTzUtc;
    	      this.jobMode = defaults.jobMode;
    	      this.metadataRemaps = defaults.metadataRemaps;
    	      this.primaryKeyCompatibility = defaults.primaryKeyCompatibility;
    	      this.tablespaceDetails = defaults.tablespaceDetails;
        }

        @CustomType.Setter
        public Builder compatibilities(List<String> compatibilities) {
            if (compatibilities == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "compatibilities");
            }
            this.compatibilities = compatibilities;
            return this;
        }
        public Builder compatibilities(String... compatibilities) {
            return compatibilities(List.of(compatibilities));
        }
        @CustomType.Setter
        public Builder dataPumpParameters(List<GetMigrationInitialLoadSettingDataPumpParameter> dataPumpParameters) {
            if (dataPumpParameters == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "dataPumpParameters");
            }
            this.dataPumpParameters = dataPumpParameters;
            return this;
        }
        public Builder dataPumpParameters(GetMigrationInitialLoadSettingDataPumpParameter... dataPumpParameters) {
            return dataPumpParameters(List.of(dataPumpParameters));
        }
        @CustomType.Setter
        public Builder exportDirectoryObjects(List<GetMigrationInitialLoadSettingExportDirectoryObject> exportDirectoryObjects) {
            if (exportDirectoryObjects == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "exportDirectoryObjects");
            }
            this.exportDirectoryObjects = exportDirectoryObjects;
            return this;
        }
        public Builder exportDirectoryObjects(GetMigrationInitialLoadSettingExportDirectoryObject... exportDirectoryObjects) {
            return exportDirectoryObjects(List.of(exportDirectoryObjects));
        }
        @CustomType.Setter
        public Builder handleGrantErrors(String handleGrantErrors) {
            if (handleGrantErrors == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "handleGrantErrors");
            }
            this.handleGrantErrors = handleGrantErrors;
            return this;
        }
        @CustomType.Setter
        public Builder importDirectoryObjects(List<GetMigrationInitialLoadSettingImportDirectoryObject> importDirectoryObjects) {
            if (importDirectoryObjects == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "importDirectoryObjects");
            }
            this.importDirectoryObjects = importDirectoryObjects;
            return this;
        }
        public Builder importDirectoryObjects(GetMigrationInitialLoadSettingImportDirectoryObject... importDirectoryObjects) {
            return importDirectoryObjects(List.of(importDirectoryObjects));
        }
        @CustomType.Setter
        public Builder isConsistent(Boolean isConsistent) {
            if (isConsistent == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "isConsistent");
            }
            this.isConsistent = isConsistent;
            return this;
        }
        @CustomType.Setter
        public Builder isIgnoreExistingObjects(Boolean isIgnoreExistingObjects) {
            if (isIgnoreExistingObjects == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "isIgnoreExistingObjects");
            }
            this.isIgnoreExistingObjects = isIgnoreExistingObjects;
            return this;
        }
        @CustomType.Setter
        public Builder isTzUtc(Boolean isTzUtc) {
            if (isTzUtc == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "isTzUtc");
            }
            this.isTzUtc = isTzUtc;
            return this;
        }
        @CustomType.Setter
        public Builder jobMode(String jobMode) {
            if (jobMode == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "jobMode");
            }
            this.jobMode = jobMode;
            return this;
        }
        @CustomType.Setter
        public Builder metadataRemaps(List<GetMigrationInitialLoadSettingMetadataRemap> metadataRemaps) {
            if (metadataRemaps == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "metadataRemaps");
            }
            this.metadataRemaps = metadataRemaps;
            return this;
        }
        public Builder metadataRemaps(GetMigrationInitialLoadSettingMetadataRemap... metadataRemaps) {
            return metadataRemaps(List.of(metadataRemaps));
        }
        @CustomType.Setter
        public Builder primaryKeyCompatibility(String primaryKeyCompatibility) {
            if (primaryKeyCompatibility == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "primaryKeyCompatibility");
            }
            this.primaryKeyCompatibility = primaryKeyCompatibility;
            return this;
        }
        @CustomType.Setter
        public Builder tablespaceDetails(List<GetMigrationInitialLoadSettingTablespaceDetail> tablespaceDetails) {
            if (tablespaceDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationInitialLoadSetting", "tablespaceDetails");
            }
            this.tablespaceDetails = tablespaceDetails;
            return this;
        }
        public Builder tablespaceDetails(GetMigrationInitialLoadSettingTablespaceDetail... tablespaceDetails) {
            return tablespaceDetails(List.of(tablespaceDetails));
        }
        public GetMigrationInitialLoadSetting build() {
            final var _resultValue = new GetMigrationInitialLoadSetting();
            _resultValue.compatibilities = compatibilities;
            _resultValue.dataPumpParameters = dataPumpParameters;
            _resultValue.exportDirectoryObjects = exportDirectoryObjects;
            _resultValue.handleGrantErrors = handleGrantErrors;
            _resultValue.importDirectoryObjects = importDirectoryObjects;
            _resultValue.isConsistent = isConsistent;
            _resultValue.isIgnoreExistingObjects = isIgnoreExistingObjects;
            _resultValue.isTzUtc = isTzUtc;
            _resultValue.jobMode = jobMode;
            _resultValue.metadataRemaps = metadataRemaps;
            _resultValue.primaryKeyCompatibility = primaryKeyCompatibility;
            _resultValue.tablespaceDetails = tablespaceDetails;
            return _resultValue;
        }
    }
}
