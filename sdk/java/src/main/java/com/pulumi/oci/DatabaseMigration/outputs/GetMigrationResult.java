// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationAdvisorSetting;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationDataTransferMediumDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationDataTransferMediumDetailsV2;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationDatapumpSetting;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationDumpTransferDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationExcludeObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationGoldenGateDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationGoldenGateServiceDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationIncludeObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationVaultDetail;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMigrationResult {
    /**
     * @return Optional Pre-Migration advisor settings.
     * 
     */
    private List<GetMigrationAdvisorSetting> advisorSettings;
    /**
     * @return The OCID of the registered on-premises ODMS Agent. Only valid for Offline Migrations.
     * 
     */
    private String agentId;
    /**
     * @return OCID of the compartment where the secret containing the credentials will be created.
     * 
     */
    private String compartmentId;
    /**
     * @return OCID of the Secret in the Oracle Cloud Infrastructure vault containing the Migration credentials. Used to store GoldenGate administrator user credentials.
     * 
     */
    private String credentialsSecretId;
    private String csvText;
    /**
     * @return Data Transfer Medium details for the Migration.
     * 
     */
    private List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails;
    /**
     * @return Optional additional properties for dump transfer in source or target host.
     * 
     */
    private List<GetMigrationDataTransferMediumDetailsV2> dataTransferMediumDetailsV2s;
    /**
     * @return Optional settings for Data Pump Export and Import jobs
     * 
     */
    private List<GetMigrationDatapumpSetting> datapumpSettings;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Migration Display Name
     * 
     */
    private String displayName;
    /**
     * @return Optional additional properties for dump transfer.
     * 
     */
    private List<GetMigrationDumpTransferDetail> dumpTransferDetails;
    /**
     * @return Database objects to exclude from migration. If &#39;includeObjects&#39; are specified, only exclude object types can be specified with general wildcards (.*) for owner and objectName.
     * 
     */
    private List<GetMigrationExcludeObject> excludeObjects;
    /**
     * @return OCID of the current ODMS Job in execution for the Migration, if any.
     * 
     */
    private String executingJobId;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Details about Oracle GoldenGate Microservices.
     * 
     */
    private List<GetMigrationGoldenGateDetail> goldenGateDetails;
    /**
     * @return Details about Oracle GoldenGate GGS Deployment.
     * 
     */
    private List<GetMigrationGoldenGateServiceDetail> goldenGateServiceDetails;
    /**
     * @return The OCID of the resource
     * 
     */
    private String id;
    /**
     * @return Database objects to include from migration.
     * 
     */
    private List<GetMigrationIncludeObject> includeObjects;
    /**
     * @return Additional status related to the execution and current state of the Migration.
     * 
     */
    private String lifecycleDetails;
    private String migrationId;
    /**
     * @return The OCID of the Source Container Database Connection.
     * 
     */
    private String sourceContainerDatabaseConnectionId;
    /**
     * @return The OCID of the Source Database Connection.
     * 
     */
    private String sourceDatabaseConnectionId;
    /**
     * @return The current state of the Migration resource.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The OCID of the Target Database Connection.
     * 
     */
    private String targetDatabaseConnectionId;
    /**
     * @return The time the Migration was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time of last Migration. An RFC3339 formatted datetime string.
     * 
     */
    private String timeLastMigration;
    /**
     * @return The time of the last Migration details update. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return Migration type.
     * 
     */
    private String type;
    /**
     * @return Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
     * 
     */
    private List<GetMigrationVaultDetail> vaultDetails;
    /**
     * @return Name of a migration phase. The Job will wait after executing this phase until the Resume Job endpoint is called.
     * 
     */
    private String waitAfter;

    private GetMigrationResult() {}
    /**
     * @return Optional Pre-Migration advisor settings.
     * 
     */
    public List<GetMigrationAdvisorSetting> advisorSettings() {
        return this.advisorSettings;
    }
    /**
     * @return The OCID of the registered on-premises ODMS Agent. Only valid for Offline Migrations.
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return OCID of the compartment where the secret containing the credentials will be created.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return OCID of the Secret in the Oracle Cloud Infrastructure vault containing the Migration credentials. Used to store GoldenGate administrator user credentials.
     * 
     */
    public String credentialsSecretId() {
        return this.credentialsSecretId;
    }
    public String csvText() {
        return this.csvText;
    }
    /**
     * @return Data Transfer Medium details for the Migration.
     * 
     */
    public List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails() {
        return this.dataTransferMediumDetails;
    }
    /**
     * @return Optional additional properties for dump transfer in source or target host.
     * 
     */
    public List<GetMigrationDataTransferMediumDetailsV2> dataTransferMediumDetailsV2s() {
        return this.dataTransferMediumDetailsV2s;
    }
    /**
     * @return Optional settings for Data Pump Export and Import jobs
     * 
     */
    public List<GetMigrationDatapumpSetting> datapumpSettings() {
        return this.datapumpSettings;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Migration Display Name
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Optional additional properties for dump transfer.
     * 
     */
    public List<GetMigrationDumpTransferDetail> dumpTransferDetails() {
        return this.dumpTransferDetails;
    }
    /**
     * @return Database objects to exclude from migration. If &#39;includeObjects&#39; are specified, only exclude object types can be specified with general wildcards (.*) for owner and objectName.
     * 
     */
    public List<GetMigrationExcludeObject> excludeObjects() {
        return this.excludeObjects;
    }
    /**
     * @return OCID of the current ODMS Job in execution for the Migration, if any.
     * 
     */
    public String executingJobId() {
        return this.executingJobId;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Details about Oracle GoldenGate Microservices.
     * 
     */
    public List<GetMigrationGoldenGateDetail> goldenGateDetails() {
        return this.goldenGateDetails;
    }
    /**
     * @return Details about Oracle GoldenGate GGS Deployment.
     * 
     */
    public List<GetMigrationGoldenGateServiceDetail> goldenGateServiceDetails() {
        return this.goldenGateServiceDetails;
    }
    /**
     * @return The OCID of the resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Database objects to include from migration.
     * 
     */
    public List<GetMigrationIncludeObject> includeObjects() {
        return this.includeObjects;
    }
    /**
     * @return Additional status related to the execution and current state of the Migration.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String migrationId() {
        return this.migrationId;
    }
    /**
     * @return The OCID of the Source Container Database Connection.
     * 
     */
    public String sourceContainerDatabaseConnectionId() {
        return this.sourceContainerDatabaseConnectionId;
    }
    /**
     * @return The OCID of the Source Database Connection.
     * 
     */
    public String sourceDatabaseConnectionId() {
        return this.sourceDatabaseConnectionId;
    }
    /**
     * @return The current state of the Migration resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The OCID of the Target Database Connection.
     * 
     */
    public String targetDatabaseConnectionId() {
        return this.targetDatabaseConnectionId;
    }
    /**
     * @return The time the Migration was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time of last Migration. An RFC3339 formatted datetime string.
     * 
     */
    public String timeLastMigration() {
        return this.timeLastMigration;
    }
    /**
     * @return The time of the last Migration details update. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Migration type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Oracle Cloud Infrastructure Vault details to store migration and connection credentials secrets
     * 
     */
    public List<GetMigrationVaultDetail> vaultDetails() {
        return this.vaultDetails;
    }
    /**
     * @return Name of a migration phase. The Job will wait after executing this phase until the Resume Job endpoint is called.
     * 
     */
    public String waitAfter() {
        return this.waitAfter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMigrationAdvisorSetting> advisorSettings;
        private String agentId;
        private String compartmentId;
        private String credentialsSecretId;
        private String csvText;
        private List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails;
        private List<GetMigrationDataTransferMediumDetailsV2> dataTransferMediumDetailsV2s;
        private List<GetMigrationDatapumpSetting> datapumpSettings;
        private Map<String,Object> definedTags;
        private String displayName;
        private List<GetMigrationDumpTransferDetail> dumpTransferDetails;
        private List<GetMigrationExcludeObject> excludeObjects;
        private String executingJobId;
        private Map<String,Object> freeformTags;
        private List<GetMigrationGoldenGateDetail> goldenGateDetails;
        private List<GetMigrationGoldenGateServiceDetail> goldenGateServiceDetails;
        private String id;
        private List<GetMigrationIncludeObject> includeObjects;
        private String lifecycleDetails;
        private String migrationId;
        private String sourceContainerDatabaseConnectionId;
        private String sourceDatabaseConnectionId;
        private String state;
        private Map<String,Object> systemTags;
        private String targetDatabaseConnectionId;
        private String timeCreated;
        private String timeLastMigration;
        private String timeUpdated;
        private String type;
        private List<GetMigrationVaultDetail> vaultDetails;
        private String waitAfter;
        public Builder() {}
        public Builder(GetMigrationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advisorSettings = defaults.advisorSettings;
    	      this.agentId = defaults.agentId;
    	      this.compartmentId = defaults.compartmentId;
    	      this.credentialsSecretId = defaults.credentialsSecretId;
    	      this.csvText = defaults.csvText;
    	      this.dataTransferMediumDetails = defaults.dataTransferMediumDetails;
    	      this.dataTransferMediumDetailsV2s = defaults.dataTransferMediumDetailsV2s;
    	      this.datapumpSettings = defaults.datapumpSettings;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.dumpTransferDetails = defaults.dumpTransferDetails;
    	      this.excludeObjects = defaults.excludeObjects;
    	      this.executingJobId = defaults.executingJobId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.goldenGateDetails = defaults.goldenGateDetails;
    	      this.goldenGateServiceDetails = defaults.goldenGateServiceDetails;
    	      this.id = defaults.id;
    	      this.includeObjects = defaults.includeObjects;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationId = defaults.migrationId;
    	      this.sourceContainerDatabaseConnectionId = defaults.sourceContainerDatabaseConnectionId;
    	      this.sourceDatabaseConnectionId = defaults.sourceDatabaseConnectionId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetDatabaseConnectionId = defaults.targetDatabaseConnectionId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastMigration = defaults.timeLastMigration;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.vaultDetails = defaults.vaultDetails;
    	      this.waitAfter = defaults.waitAfter;
        }

        @CustomType.Setter
        public Builder advisorSettings(List<GetMigrationAdvisorSetting> advisorSettings) {
            if (advisorSettings == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "advisorSettings");
            }
            this.advisorSettings = advisorSettings;
            return this;
        }
        public Builder advisorSettings(GetMigrationAdvisorSetting... advisorSettings) {
            return advisorSettings(List.of(advisorSettings));
        }
        @CustomType.Setter
        public Builder agentId(String agentId) {
            if (agentId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "agentId");
            }
            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder credentialsSecretId(String credentialsSecretId) {
            if (credentialsSecretId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "credentialsSecretId");
            }
            this.credentialsSecretId = credentialsSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder csvText(String csvText) {
            if (csvText == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "csvText");
            }
            this.csvText = csvText;
            return this;
        }
        @CustomType.Setter
        public Builder dataTransferMediumDetails(List<GetMigrationDataTransferMediumDetail> dataTransferMediumDetails) {
            if (dataTransferMediumDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "dataTransferMediumDetails");
            }
            this.dataTransferMediumDetails = dataTransferMediumDetails;
            return this;
        }
        public Builder dataTransferMediumDetails(GetMigrationDataTransferMediumDetail... dataTransferMediumDetails) {
            return dataTransferMediumDetails(List.of(dataTransferMediumDetails));
        }
        @CustomType.Setter
        public Builder dataTransferMediumDetailsV2s(List<GetMigrationDataTransferMediumDetailsV2> dataTransferMediumDetailsV2s) {
            if (dataTransferMediumDetailsV2s == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "dataTransferMediumDetailsV2s");
            }
            this.dataTransferMediumDetailsV2s = dataTransferMediumDetailsV2s;
            return this;
        }
        public Builder dataTransferMediumDetailsV2s(GetMigrationDataTransferMediumDetailsV2... dataTransferMediumDetailsV2s) {
            return dataTransferMediumDetailsV2s(List.of(dataTransferMediumDetailsV2s));
        }
        @CustomType.Setter
        public Builder datapumpSettings(List<GetMigrationDatapumpSetting> datapumpSettings) {
            if (datapumpSettings == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "datapumpSettings");
            }
            this.datapumpSettings = datapumpSettings;
            return this;
        }
        public Builder datapumpSettings(GetMigrationDatapumpSetting... datapumpSettings) {
            return datapumpSettings(List.of(datapumpSettings));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dumpTransferDetails(List<GetMigrationDumpTransferDetail> dumpTransferDetails) {
            if (dumpTransferDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "dumpTransferDetails");
            }
            this.dumpTransferDetails = dumpTransferDetails;
            return this;
        }
        public Builder dumpTransferDetails(GetMigrationDumpTransferDetail... dumpTransferDetails) {
            return dumpTransferDetails(List.of(dumpTransferDetails));
        }
        @CustomType.Setter
        public Builder excludeObjects(List<GetMigrationExcludeObject> excludeObjects) {
            if (excludeObjects == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "excludeObjects");
            }
            this.excludeObjects = excludeObjects;
            return this;
        }
        public Builder excludeObjects(GetMigrationExcludeObject... excludeObjects) {
            return excludeObjects(List.of(excludeObjects));
        }
        @CustomType.Setter
        public Builder executingJobId(String executingJobId) {
            if (executingJobId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "executingJobId");
            }
            this.executingJobId = executingJobId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder goldenGateDetails(List<GetMigrationGoldenGateDetail> goldenGateDetails) {
            if (goldenGateDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "goldenGateDetails");
            }
            this.goldenGateDetails = goldenGateDetails;
            return this;
        }
        public Builder goldenGateDetails(GetMigrationGoldenGateDetail... goldenGateDetails) {
            return goldenGateDetails(List.of(goldenGateDetails));
        }
        @CustomType.Setter
        public Builder goldenGateServiceDetails(List<GetMigrationGoldenGateServiceDetail> goldenGateServiceDetails) {
            if (goldenGateServiceDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "goldenGateServiceDetails");
            }
            this.goldenGateServiceDetails = goldenGateServiceDetails;
            return this;
        }
        public Builder goldenGateServiceDetails(GetMigrationGoldenGateServiceDetail... goldenGateServiceDetails) {
            return goldenGateServiceDetails(List.of(goldenGateServiceDetails));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeObjects(List<GetMigrationIncludeObject> includeObjects) {
            if (includeObjects == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "includeObjects");
            }
            this.includeObjects = includeObjects;
            return this;
        }
        public Builder includeObjects(GetMigrationIncludeObject... includeObjects) {
            return includeObjects(List.of(includeObjects));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder migrationId(String migrationId) {
            if (migrationId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "migrationId");
            }
            this.migrationId = migrationId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceContainerDatabaseConnectionId(String sourceContainerDatabaseConnectionId) {
            if (sourceContainerDatabaseConnectionId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "sourceContainerDatabaseConnectionId");
            }
            this.sourceContainerDatabaseConnectionId = sourceContainerDatabaseConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabaseConnectionId(String sourceDatabaseConnectionId) {
            if (sourceDatabaseConnectionId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "sourceDatabaseConnectionId");
            }
            this.sourceDatabaseConnectionId = sourceDatabaseConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseConnectionId(String targetDatabaseConnectionId) {
            if (targetDatabaseConnectionId == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "targetDatabaseConnectionId");
            }
            this.targetDatabaseConnectionId = targetDatabaseConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastMigration(String timeLastMigration) {
            if (timeLastMigration == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "timeLastMigration");
            }
            this.timeLastMigration = timeLastMigration;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vaultDetails(List<GetMigrationVaultDetail> vaultDetails) {
            if (vaultDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "vaultDetails");
            }
            this.vaultDetails = vaultDetails;
            return this;
        }
        public Builder vaultDetails(GetMigrationVaultDetail... vaultDetails) {
            return vaultDetails(List.of(vaultDetails));
        }
        @CustomType.Setter
        public Builder waitAfter(String waitAfter) {
            if (waitAfter == null) {
              throw new MissingRequiredPropertyException("GetMigrationResult", "waitAfter");
            }
            this.waitAfter = waitAfter;
            return this;
        }
        public GetMigrationResult build() {
            final var _resultValue = new GetMigrationResult();
            _resultValue.advisorSettings = advisorSettings;
            _resultValue.agentId = agentId;
            _resultValue.compartmentId = compartmentId;
            _resultValue.credentialsSecretId = credentialsSecretId;
            _resultValue.csvText = csvText;
            _resultValue.dataTransferMediumDetails = dataTransferMediumDetails;
            _resultValue.dataTransferMediumDetailsV2s = dataTransferMediumDetailsV2s;
            _resultValue.datapumpSettings = datapumpSettings;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.dumpTransferDetails = dumpTransferDetails;
            _resultValue.excludeObjects = excludeObjects;
            _resultValue.executingJobId = executingJobId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.goldenGateDetails = goldenGateDetails;
            _resultValue.goldenGateServiceDetails = goldenGateServiceDetails;
            _resultValue.id = id;
            _resultValue.includeObjects = includeObjects;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.migrationId = migrationId;
            _resultValue.sourceContainerDatabaseConnectionId = sourceContainerDatabaseConnectionId;
            _resultValue.sourceDatabaseConnectionId = sourceDatabaseConnectionId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.targetDatabaseConnectionId = targetDatabaseConnectionId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastMigration = timeLastMigration;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            _resultValue.vaultDetails = vaultDetails;
            _resultValue.waitAfter = waitAfter;
            return _resultValue;
        }
    }
}
