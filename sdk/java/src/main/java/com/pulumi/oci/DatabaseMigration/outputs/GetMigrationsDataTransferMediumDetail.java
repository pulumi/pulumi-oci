// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsDataTransferMediumDetailObjectStorageBucket;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsDataTransferMediumDetailSource;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsDataTransferMediumDetailTarget;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMigrationsDataTransferMediumDetail {
    /**
     * @return AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
     * 
     */
    private String accessKeyId;
    /**
     * @return Name of directory object in database
     * 
     */
    private String name;
    /**
     * @return In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
     * 
     */
    private List<GetMigrationsDataTransferMediumDetailObjectStorageBucket> objectStorageBuckets;
    /**
     * @return AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
     * 
     */
    private String region;
    /**
     * @return AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
     * 
     */
    private String secretAccessKey;
    /**
     * @return OCID of the shared storage mount target
     * 
     */
    private String sharedStorageMountTargetId;
    /**
     * @return Optional additional properties for dump transfer in source or target host. Default kind is CURL.
     * 
     */
    private List<GetMigrationsDataTransferMediumDetailSource> sources;
    /**
     * @return Optional additional properties for dump transfer in source or target host. Default kind is CURL.
     * 
     */
    private List<GetMigrationsDataTransferMediumDetailTarget> targets;
    /**
     * @return The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
     * 
     */
    private String type;

    private GetMigrationsDataTransferMediumDetail() {}
    /**
     * @return AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
     * 
     */
    public String accessKeyId() {
        return this.accessKeyId;
    }
    /**
     * @return Name of directory object in database
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
     * 
     */
    public List<GetMigrationsDataTransferMediumDetailObjectStorageBucket> objectStorageBuckets() {
        return this.objectStorageBuckets;
    }
    /**
     * @return AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
     * 
     */
    public String secretAccessKey() {
        return this.secretAccessKey;
    }
    /**
     * @return OCID of the shared storage mount target
     * 
     */
    public String sharedStorageMountTargetId() {
        return this.sharedStorageMountTargetId;
    }
    /**
     * @return Optional additional properties for dump transfer in source or target host. Default kind is CURL.
     * 
     */
    public List<GetMigrationsDataTransferMediumDetailSource> sources() {
        return this.sources;
    }
    /**
     * @return Optional additional properties for dump transfer in source or target host. Default kind is CURL.
     * 
     */
    public List<GetMigrationsDataTransferMediumDetailTarget> targets() {
        return this.targets;
    }
    /**
     * @return The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationsDataTransferMediumDetail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKeyId;
        private String name;
        private List<GetMigrationsDataTransferMediumDetailObjectStorageBucket> objectStorageBuckets;
        private String region;
        private String secretAccessKey;
        private String sharedStorageMountTargetId;
        private List<GetMigrationsDataTransferMediumDetailSource> sources;
        private List<GetMigrationsDataTransferMediumDetailTarget> targets;
        private String type;
        public Builder() {}
        public Builder(GetMigrationsDataTransferMediumDetail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.name = defaults.name;
    	      this.objectStorageBuckets = defaults.objectStorageBuckets;
    	      this.region = defaults.region;
    	      this.secretAccessKey = defaults.secretAccessKey;
    	      this.sharedStorageMountTargetId = defaults.sharedStorageMountTargetId;
    	      this.sources = defaults.sources;
    	      this.targets = defaults.targets;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accessKeyId(String accessKeyId) {
            if (accessKeyId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "accessKeyId");
            }
            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectStorageBuckets(List<GetMigrationsDataTransferMediumDetailObjectStorageBucket> objectStorageBuckets) {
            if (objectStorageBuckets == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "objectStorageBuckets");
            }
            this.objectStorageBuckets = objectStorageBuckets;
            return this;
        }
        public Builder objectStorageBuckets(GetMigrationsDataTransferMediumDetailObjectStorageBucket... objectStorageBuckets) {
            return objectStorageBuckets(List.of(objectStorageBuckets));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKey(String secretAccessKey) {
            if (secretAccessKey == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "secretAccessKey");
            }
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder sharedStorageMountTargetId(String sharedStorageMountTargetId) {
            if (sharedStorageMountTargetId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "sharedStorageMountTargetId");
            }
            this.sharedStorageMountTargetId = sharedStorageMountTargetId;
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetMigrationsDataTransferMediumDetailSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetMigrationsDataTransferMediumDetailSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder targets(List<GetMigrationsDataTransferMediumDetailTarget> targets) {
            if (targets == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "targets");
            }
            this.targets = targets;
            return this;
        }
        public Builder targets(GetMigrationsDataTransferMediumDetailTarget... targets) {
            return targets(List.of(targets));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMigrationsDataTransferMediumDetail", "type");
            }
            this.type = type;
            return this;
        }
        public GetMigrationsDataTransferMediumDetail build() {
            final var _resultValue = new GetMigrationsDataTransferMediumDetail();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.name = name;
            _resultValue.objectStorageBuckets = objectStorageBuckets;
            _resultValue.region = region;
            _resultValue.secretAccessKey = secretAccessKey;
            _resultValue.sharedStorageMountTargetId = sharedStorageMountTargetId;
            _resultValue.sources = sources;
            _resultValue.targets = targets;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
