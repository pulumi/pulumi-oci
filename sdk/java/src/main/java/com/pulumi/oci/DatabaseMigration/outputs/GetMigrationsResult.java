// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseMigration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsAdvancedParameter;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsAdvisorSetting;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsDataTransferMediumDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsExcludeObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsGgsDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsHubDetail;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsIncludeObject;
import com.pulumi.oci.DatabaseMigration.outputs.GetMigrationsInitialLoadSetting;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMigrationsResult {
    /**
     * @return List of Migration Parameter objects.
     * 
     */
    private List<GetMigrationsAdvancedParameter> advancedParameters;
    /**
     * @return Details about Oracle Advisor Settings.
     * 
     */
    private List<GetMigrationsAdvisorSetting> advisorSettings;
    private String bulkIncludeExcludeData;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String compartmentId;
    /**
     * @return Optional additional properties for data transfer.
     * 
     */
    private List<GetMigrationsDataTransferMediumDetail> dataTransferMediumDetails;
    /**
     * @return The combination of source and target databases participating in a migration. Example: ORACLE means the migration is meant for migrating Oracle source and target databases.
     * 
     */
    private String databaseCombination;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    private String displayName;
    private List<GetMigrationsExcludeObject> excludeObjects;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String executingJobId;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Optional settings for Oracle GoldenGate processes
     * 
     */
    private List<GetMigrationsGgsDetail> ggsDetails;
    /**
     * @return Details about Oracle GoldenGate Microservices.
     * 
     */
    private List<GetMigrationsHubDetail> hubDetails;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String id;
    private List<GetMigrationsIncludeObject> includeObjects;
    /**
     * @return Optional settings for Data Pump Export and Import jobs
     * 
     */
    private List<GetMigrationsInitialLoadSetting> initialLoadSettings;
    /**
     * @return Additional status related to the execution and current state of the Migration.
     * 
     */
    private String lifecycleDetails;
    private String migrationId;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String sourceContainerDatabaseConnectionId;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String sourceDatabaseConnectionId;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String sourceStandbyDatabaseConnectionId;
    /**
     * @return The current state of the Migration resource.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    private String targetDatabaseConnectionId;
    /**
     * @return An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeCreated;
    /**
     * @return An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeLastMigration;
    /**
     * @return An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    private String timeUpdated;
    /**
     * @return The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
     * 
     */
    private String type;
    /**
     * @return You can optionally pause a migration after a job phase. This property allows you to optionally specify the phase after which you can pause the migration.
     * 
     */
    private String waitAfter;

    private GetMigrationsResult() {}
    /**
     * @return List of Migration Parameter objects.
     * 
     */
    public List<GetMigrationsAdvancedParameter> advancedParameters() {
        return this.advancedParameters;
    }
    /**
     * @return Details about Oracle Advisor Settings.
     * 
     */
    public List<GetMigrationsAdvisorSetting> advisorSettings() {
        return this.advisorSettings;
    }
    public String bulkIncludeExcludeData() {
        return this.bulkIncludeExcludeData;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Optional additional properties for data transfer.
     * 
     */
    public List<GetMigrationsDataTransferMediumDetail> dataTransferMediumDetails() {
        return this.dataTransferMediumDetails;
    }
    /**
     * @return The combination of source and target databases participating in a migration. Example: ORACLE means the migration is meant for migrating Oracle source and target databases.
     * 
     */
    public String databaseCombination() {
        return this.databaseCombination;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly description. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable.  Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public List<GetMigrationsExcludeObject> excludeObjects() {
        return this.excludeObjects;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String executingJobId() {
        return this.executingJobId;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {&#34;Department&#34;: &#34;Finance&#34;}
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Optional settings for Oracle GoldenGate processes
     * 
     */
    public List<GetMigrationsGgsDetail> ggsDetails() {
        return this.ggsDetails;
    }
    /**
     * @return Details about Oracle GoldenGate Microservices.
     * 
     */
    public List<GetMigrationsHubDetail> hubDetails() {
        return this.hubDetails;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetMigrationsIncludeObject> includeObjects() {
        return this.includeObjects;
    }
    /**
     * @return Optional settings for Data Pump Export and Import jobs
     * 
     */
    public List<GetMigrationsInitialLoadSetting> initialLoadSettings() {
        return this.initialLoadSettings;
    }
    /**
     * @return Additional status related to the execution and current state of the Migration.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    public String migrationId() {
        return this.migrationId;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String sourceContainerDatabaseConnectionId() {
        return this.sourceContainerDatabaseConnectionId;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String sourceDatabaseConnectionId() {
        return this.sourceDatabaseConnectionId;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String sourceStandbyDatabaseConnectionId() {
        return this.sourceStandbyDatabaseConnectionId;
    }
    /**
     * @return The current state of the Migration resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The OCID of the resource being referenced.
     * 
     */
    public String targetDatabaseConnectionId() {
        return this.targetDatabaseConnectionId;
    }
    /**
     * @return An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeLastMigration() {
        return this.timeLastMigration;
    }
    /**
     * @return An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return You can optionally pause a migration after a job phase. This property allows you to optionally specify the phase after which you can pause the migration.
     * 
     */
    public String waitAfter() {
        return this.waitAfter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMigrationsAdvancedParameter> advancedParameters;
        private List<GetMigrationsAdvisorSetting> advisorSettings;
        private String bulkIncludeExcludeData;
        private String compartmentId;
        private List<GetMigrationsDataTransferMediumDetail> dataTransferMediumDetails;
        private String databaseCombination;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private List<GetMigrationsExcludeObject> excludeObjects;
        private String executingJobId;
        private Map<String,String> freeformTags;
        private List<GetMigrationsGgsDetail> ggsDetails;
        private List<GetMigrationsHubDetail> hubDetails;
        private String id;
        private List<GetMigrationsIncludeObject> includeObjects;
        private List<GetMigrationsInitialLoadSetting> initialLoadSettings;
        private String lifecycleDetails;
        private String migrationId;
        private String sourceContainerDatabaseConnectionId;
        private String sourceDatabaseConnectionId;
        private String sourceStandbyDatabaseConnectionId;
        private String state;
        private Map<String,String> systemTags;
        private String targetDatabaseConnectionId;
        private String timeCreated;
        private String timeLastMigration;
        private String timeUpdated;
        private String type;
        private String waitAfter;
        public Builder() {}
        public Builder(GetMigrationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedParameters = defaults.advancedParameters;
    	      this.advisorSettings = defaults.advisorSettings;
    	      this.bulkIncludeExcludeData = defaults.bulkIncludeExcludeData;
    	      this.compartmentId = defaults.compartmentId;
    	      this.dataTransferMediumDetails = defaults.dataTransferMediumDetails;
    	      this.databaseCombination = defaults.databaseCombination;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.excludeObjects = defaults.excludeObjects;
    	      this.executingJobId = defaults.executingJobId;
    	      this.freeformTags = defaults.freeformTags;
    	      this.ggsDetails = defaults.ggsDetails;
    	      this.hubDetails = defaults.hubDetails;
    	      this.id = defaults.id;
    	      this.includeObjects = defaults.includeObjects;
    	      this.initialLoadSettings = defaults.initialLoadSettings;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.migrationId = defaults.migrationId;
    	      this.sourceContainerDatabaseConnectionId = defaults.sourceContainerDatabaseConnectionId;
    	      this.sourceDatabaseConnectionId = defaults.sourceDatabaseConnectionId;
    	      this.sourceStandbyDatabaseConnectionId = defaults.sourceStandbyDatabaseConnectionId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetDatabaseConnectionId = defaults.targetDatabaseConnectionId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeLastMigration = defaults.timeLastMigration;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.waitAfter = defaults.waitAfter;
        }

        @CustomType.Setter
        public Builder advancedParameters(List<GetMigrationsAdvancedParameter> advancedParameters) {
            if (advancedParameters == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "advancedParameters");
            }
            this.advancedParameters = advancedParameters;
            return this;
        }
        public Builder advancedParameters(GetMigrationsAdvancedParameter... advancedParameters) {
            return advancedParameters(List.of(advancedParameters));
        }
        @CustomType.Setter
        public Builder advisorSettings(List<GetMigrationsAdvisorSetting> advisorSettings) {
            if (advisorSettings == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "advisorSettings");
            }
            this.advisorSettings = advisorSettings;
            return this;
        }
        public Builder advisorSettings(GetMigrationsAdvisorSetting... advisorSettings) {
            return advisorSettings(List.of(advisorSettings));
        }
        @CustomType.Setter
        public Builder bulkIncludeExcludeData(String bulkIncludeExcludeData) {
            if (bulkIncludeExcludeData == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "bulkIncludeExcludeData");
            }
            this.bulkIncludeExcludeData = bulkIncludeExcludeData;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder dataTransferMediumDetails(List<GetMigrationsDataTransferMediumDetail> dataTransferMediumDetails) {
            if (dataTransferMediumDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "dataTransferMediumDetails");
            }
            this.dataTransferMediumDetails = dataTransferMediumDetails;
            return this;
        }
        public Builder dataTransferMediumDetails(GetMigrationsDataTransferMediumDetail... dataTransferMediumDetails) {
            return dataTransferMediumDetails(List.of(dataTransferMediumDetails));
        }
        @CustomType.Setter
        public Builder databaseCombination(String databaseCombination) {
            if (databaseCombination == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "databaseCombination");
            }
            this.databaseCombination = databaseCombination;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder excludeObjects(List<GetMigrationsExcludeObject> excludeObjects) {
            if (excludeObjects == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "excludeObjects");
            }
            this.excludeObjects = excludeObjects;
            return this;
        }
        public Builder excludeObjects(GetMigrationsExcludeObject... excludeObjects) {
            return excludeObjects(List.of(excludeObjects));
        }
        @CustomType.Setter
        public Builder executingJobId(String executingJobId) {
            if (executingJobId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "executingJobId");
            }
            this.executingJobId = executingJobId;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder ggsDetails(List<GetMigrationsGgsDetail> ggsDetails) {
            if (ggsDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "ggsDetails");
            }
            this.ggsDetails = ggsDetails;
            return this;
        }
        public Builder ggsDetails(GetMigrationsGgsDetail... ggsDetails) {
            return ggsDetails(List.of(ggsDetails));
        }
        @CustomType.Setter
        public Builder hubDetails(List<GetMigrationsHubDetail> hubDetails) {
            if (hubDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "hubDetails");
            }
            this.hubDetails = hubDetails;
            return this;
        }
        public Builder hubDetails(GetMigrationsHubDetail... hubDetails) {
            return hubDetails(List.of(hubDetails));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeObjects(List<GetMigrationsIncludeObject> includeObjects) {
            if (includeObjects == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "includeObjects");
            }
            this.includeObjects = includeObjects;
            return this;
        }
        public Builder includeObjects(GetMigrationsIncludeObject... includeObjects) {
            return includeObjects(List.of(includeObjects));
        }
        @CustomType.Setter
        public Builder initialLoadSettings(List<GetMigrationsInitialLoadSetting> initialLoadSettings) {
            if (initialLoadSettings == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "initialLoadSettings");
            }
            this.initialLoadSettings = initialLoadSettings;
            return this;
        }
        public Builder initialLoadSettings(GetMigrationsInitialLoadSetting... initialLoadSettings) {
            return initialLoadSettings(List.of(initialLoadSettings));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder migrationId(String migrationId) {
            if (migrationId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "migrationId");
            }
            this.migrationId = migrationId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceContainerDatabaseConnectionId(String sourceContainerDatabaseConnectionId) {
            if (sourceContainerDatabaseConnectionId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "sourceContainerDatabaseConnectionId");
            }
            this.sourceContainerDatabaseConnectionId = sourceContainerDatabaseConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabaseConnectionId(String sourceDatabaseConnectionId) {
            if (sourceDatabaseConnectionId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "sourceDatabaseConnectionId");
            }
            this.sourceDatabaseConnectionId = sourceDatabaseConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceStandbyDatabaseConnectionId(String sourceStandbyDatabaseConnectionId) {
            if (sourceStandbyDatabaseConnectionId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "sourceStandbyDatabaseConnectionId");
            }
            this.sourceStandbyDatabaseConnectionId = sourceStandbyDatabaseConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabaseConnectionId(String targetDatabaseConnectionId) {
            if (targetDatabaseConnectionId == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "targetDatabaseConnectionId");
            }
            this.targetDatabaseConnectionId = targetDatabaseConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeLastMigration(String timeLastMigration) {
            if (timeLastMigration == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "timeLastMigration");
            }
            this.timeLastMigration = timeLastMigration;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder waitAfter(String waitAfter) {
            if (waitAfter == null) {
              throw new MissingRequiredPropertyException("GetMigrationsResult", "waitAfter");
            }
            this.waitAfter = waitAfter;
            return this;
        }
        public GetMigrationsResult build() {
            final var _resultValue = new GetMigrationsResult();
            _resultValue.advancedParameters = advancedParameters;
            _resultValue.advisorSettings = advisorSettings;
            _resultValue.bulkIncludeExcludeData = bulkIncludeExcludeData;
            _resultValue.compartmentId = compartmentId;
            _resultValue.dataTransferMediumDetails = dataTransferMediumDetails;
            _resultValue.databaseCombination = databaseCombination;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.excludeObjects = excludeObjects;
            _resultValue.executingJobId = executingJobId;
            _resultValue.freeformTags = freeformTags;
            _resultValue.ggsDetails = ggsDetails;
            _resultValue.hubDetails = hubDetails;
            _resultValue.id = id;
            _resultValue.includeObjects = includeObjects;
            _resultValue.initialLoadSettings = initialLoadSettings;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.migrationId = migrationId;
            _resultValue.sourceContainerDatabaseConnectionId = sourceContainerDatabaseConnectionId;
            _resultValue.sourceDatabaseConnectionId = sourceDatabaseConnectionId;
            _resultValue.sourceStandbyDatabaseConnectionId = sourceStandbyDatabaseConnectionId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.targetDatabaseConnectionId = targetDatabaseConnectionId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeLastMigration = timeLastMigration;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            _resultValue.waitAfter = waitAfter;
            return _resultValue;
        }
    }
}
