// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseTools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseTools.outputs.DatabaseToolsConnectionProxyClientUserPassword;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseToolsConnectionProxyClient {
    /**
     * @return (Updatable) The proxy authentication type.
     * 
     */
    private String proxyAuthenticationType;
    /**
     * @return (Updatable) A list of database roles for the client. These roles are enabled if the proxy is authorized to use the roles on behalf of the client.
     * 
     */
    private @Nullable List<String> roles;
    /**
     * @return (Updatable) The database user name.
     * 
     */
    private @Nullable String userName;
    /**
     * @return (Updatable) The user password.
     * 
     */
    private @Nullable DatabaseToolsConnectionProxyClientUserPassword userPassword;

    private DatabaseToolsConnectionProxyClient() {}
    /**
     * @return (Updatable) The proxy authentication type.
     * 
     */
    public String proxyAuthenticationType() {
        return this.proxyAuthenticationType;
    }
    /**
     * @return (Updatable) A list of database roles for the client. These roles are enabled if the proxy is authorized to use the roles on behalf of the client.
     * 
     */
    public List<String> roles() {
        return this.roles == null ? List.of() : this.roles;
    }
    /**
     * @return (Updatable) The database user name.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }
    /**
     * @return (Updatable) The user password.
     * 
     */
    public Optional<DatabaseToolsConnectionProxyClientUserPassword> userPassword() {
        return Optional.ofNullable(this.userPassword);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseToolsConnectionProxyClient defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String proxyAuthenticationType;
        private @Nullable List<String> roles;
        private @Nullable String userName;
        private @Nullable DatabaseToolsConnectionProxyClientUserPassword userPassword;
        public Builder() {}
        public Builder(DatabaseToolsConnectionProxyClient defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.proxyAuthenticationType = defaults.proxyAuthenticationType;
    	      this.roles = defaults.roles;
    	      this.userName = defaults.userName;
    	      this.userPassword = defaults.userPassword;
        }

        @CustomType.Setter
        public Builder proxyAuthenticationType(String proxyAuthenticationType) {
            if (proxyAuthenticationType == null) {
              throw new MissingRequiredPropertyException("DatabaseToolsConnectionProxyClient", "proxyAuthenticationType");
            }
            this.proxyAuthenticationType = proxyAuthenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder roles(@Nullable List<String> roles) {

            this.roles = roles;
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {

            this.userName = userName;
            return this;
        }
        @CustomType.Setter
        public Builder userPassword(@Nullable DatabaseToolsConnectionProxyClientUserPassword userPassword) {

            this.userPassword = userPassword;
            return this;
        }
        public DatabaseToolsConnectionProxyClient build() {
            final var _resultValue = new DatabaseToolsConnectionProxyClient();
            _resultValue.proxyAuthenticationType = proxyAuthenticationType;
            _resultValue.roles = roles;
            _resultValue.userName = userName;
            _resultValue.userPassword = userPassword;
            return _resultValue;
        }
    }
}
