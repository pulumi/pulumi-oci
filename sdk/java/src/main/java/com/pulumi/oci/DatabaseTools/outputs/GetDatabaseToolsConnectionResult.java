// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseTools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionKeyStore;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionLock;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionProxyClient;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionRelatedResource;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionUserPassword;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseToolsConnectionResult {
    /**
     * @return The advanced connection properties key-value pair (for example, `oracle.net.ssl_server_dn_match`).
     * 
     */
    private Map<String,Object> advancedProperties;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Database Tools connection.
     * 
     */
    private String compartmentId;
    /**
     * @return The connect descriptor or Easy Connect Naming method used to connect to the database.
     * 
     */
    private String connectionString;
    private String databaseToolsConnectionId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools connection.
     * 
     */
    private String id;
    /**
     * @return The Oracle wallet or Java Keystores containing trusted certificates for authenticating the server&#39;s public certificate and the client private key and associated certificates required for client authentication.
     * 
     */
    private List<GetDatabaseToolsConnectionKeyStore> keyStores;
    /**
     * @return A message describing the current state in more detail. For example, this message can be used to provide actionable information for a resource in the Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Locks associated with this resource.
     * 
     */
    private List<GetDatabaseToolsConnectionLock> locks;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools private endpoint used to access the database in the customer VCN.
     * 
     */
    private String privateEndpointId;
    /**
     * @return The proxy client information.
     * 
     */
    private List<GetDatabaseToolsConnectionProxyClient> proxyClients;
    /**
     * @return A related resource
     * 
     */
    private List<GetDatabaseToolsConnectionRelatedResource> relatedResources;
    /**
     * @return Specifies whether this connection is supported by the Database Tools Runtime.
     * 
     */
    private String runtimeSupport;
    /**
     * @return The current state of the Database Tools connection.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the Database Tools connection was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the DatabaseToolsConnection was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    /**
     * @return The Database Tools connection type.
     * 
     */
    private String type;
    /**
     * @return The JDBC URL used to connect to the Generic JDBC database system.
     * 
     */
    private String url;
    /**
     * @return The database user name.
     * 
     */
    private String userName;
    /**
     * @return The user password.
     * 
     */
    private List<GetDatabaseToolsConnectionUserPassword> userPasswords;

    private GetDatabaseToolsConnectionResult() {}
    /**
     * @return The advanced connection properties key-value pair (for example, `oracle.net.ssl_server_dn_match`).
     * 
     */
    public Map<String,Object> advancedProperties() {
        return this.advancedProperties;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Database Tools connection.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The connect descriptor or Easy Connect Naming method used to connect to the database.
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    public String databaseToolsConnectionId() {
        return this.databaseToolsConnectionId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Oracle wallet or Java Keystores containing trusted certificates for authenticating the server&#39;s public certificate and the client private key and associated certificates required for client authentication.
     * 
     */
    public List<GetDatabaseToolsConnectionKeyStore> keyStores() {
        return this.keyStores;
    }
    /**
     * @return A message describing the current state in more detail. For example, this message can be used to provide actionable information for a resource in the Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Locks associated with this resource.
     * 
     */
    public List<GetDatabaseToolsConnectionLock> locks() {
        return this.locks;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools private endpoint used to access the database in the customer VCN.
     * 
     */
    public String privateEndpointId() {
        return this.privateEndpointId;
    }
    /**
     * @return The proxy client information.
     * 
     */
    public List<GetDatabaseToolsConnectionProxyClient> proxyClients() {
        return this.proxyClients;
    }
    /**
     * @return A related resource
     * 
     */
    public List<GetDatabaseToolsConnectionRelatedResource> relatedResources() {
        return this.relatedResources;
    }
    /**
     * @return Specifies whether this connection is supported by the Database Tools Runtime.
     * 
     */
    public String runtimeSupport() {
        return this.runtimeSupport;
    }
    /**
     * @return The current state of the Database Tools connection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the Database Tools connection was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the DatabaseToolsConnection was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The Database Tools connection type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The JDBC URL used to connect to the Generic JDBC database system.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The database user name.
     * 
     */
    public String userName() {
        return this.userName;
    }
    /**
     * @return The user password.
     * 
     */
    public List<GetDatabaseToolsConnectionUserPassword> userPasswords() {
        return this.userPasswords;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseToolsConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> advancedProperties;
        private String compartmentId;
        private String connectionString;
        private String databaseToolsConnectionId;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetDatabaseToolsConnectionKeyStore> keyStores;
        private String lifecycleDetails;
        private List<GetDatabaseToolsConnectionLock> locks;
        private String privateEndpointId;
        private List<GetDatabaseToolsConnectionProxyClient> proxyClients;
        private List<GetDatabaseToolsConnectionRelatedResource> relatedResources;
        private String runtimeSupport;
        private String state;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private String type;
        private String url;
        private String userName;
        private List<GetDatabaseToolsConnectionUserPassword> userPasswords;
        public Builder() {}
        public Builder(GetDatabaseToolsConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedProperties = defaults.advancedProperties;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionString = defaults.connectionString;
    	      this.databaseToolsConnectionId = defaults.databaseToolsConnectionId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.keyStores = defaults.keyStores;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.locks = defaults.locks;
    	      this.privateEndpointId = defaults.privateEndpointId;
    	      this.proxyClients = defaults.proxyClients;
    	      this.relatedResources = defaults.relatedResources;
    	      this.runtimeSupport = defaults.runtimeSupport;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
    	      this.userName = defaults.userName;
    	      this.userPasswords = defaults.userPasswords;
        }

        @CustomType.Setter
        public Builder advancedProperties(Map<String,Object> advancedProperties) {
            if (advancedProperties == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "advancedProperties");
            }
            this.advancedProperties = advancedProperties;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder databaseToolsConnectionId(String databaseToolsConnectionId) {
            if (databaseToolsConnectionId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "databaseToolsConnectionId");
            }
            this.databaseToolsConnectionId = databaseToolsConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyStores(List<GetDatabaseToolsConnectionKeyStore> keyStores) {
            if (keyStores == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "keyStores");
            }
            this.keyStores = keyStores;
            return this;
        }
        public Builder keyStores(GetDatabaseToolsConnectionKeyStore... keyStores) {
            return keyStores(List.of(keyStores));
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder locks(List<GetDatabaseToolsConnectionLock> locks) {
            if (locks == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "locks");
            }
            this.locks = locks;
            return this;
        }
        public Builder locks(GetDatabaseToolsConnectionLock... locks) {
            return locks(List.of(locks));
        }
        @CustomType.Setter
        public Builder privateEndpointId(String privateEndpointId) {
            if (privateEndpointId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "privateEndpointId");
            }
            this.privateEndpointId = privateEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder proxyClients(List<GetDatabaseToolsConnectionProxyClient> proxyClients) {
            if (proxyClients == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "proxyClients");
            }
            this.proxyClients = proxyClients;
            return this;
        }
        public Builder proxyClients(GetDatabaseToolsConnectionProxyClient... proxyClients) {
            return proxyClients(List.of(proxyClients));
        }
        @CustomType.Setter
        public Builder relatedResources(List<GetDatabaseToolsConnectionRelatedResource> relatedResources) {
            if (relatedResources == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "relatedResources");
            }
            this.relatedResources = relatedResources;
            return this;
        }
        public Builder relatedResources(GetDatabaseToolsConnectionRelatedResource... relatedResources) {
            return relatedResources(List.of(relatedResources));
        }
        @CustomType.Setter
        public Builder runtimeSupport(String runtimeSupport) {
            if (runtimeSupport == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "runtimeSupport");
            }
            this.runtimeSupport = runtimeSupport;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "userName");
            }
            this.userName = userName;
            return this;
        }
        @CustomType.Setter
        public Builder userPasswords(List<GetDatabaseToolsConnectionUserPassword> userPasswords) {
            if (userPasswords == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionResult", "userPasswords");
            }
            this.userPasswords = userPasswords;
            return this;
        }
        public Builder userPasswords(GetDatabaseToolsConnectionUserPassword... userPasswords) {
            return userPasswords(List.of(userPasswords));
        }
        public GetDatabaseToolsConnectionResult build() {
            final var _resultValue = new GetDatabaseToolsConnectionResult();
            _resultValue.advancedProperties = advancedProperties;
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionString = connectionString;
            _resultValue.databaseToolsConnectionId = databaseToolsConnectionId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.keyStores = keyStores;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.locks = locks;
            _resultValue.privateEndpointId = privateEndpointId;
            _resultValue.proxyClients = proxyClients;
            _resultValue.relatedResources = relatedResources;
            _resultValue.runtimeSupport = runtimeSupport;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.type = type;
            _resultValue.url = url;
            _resultValue.userName = userName;
            _resultValue.userPasswords = userPasswords;
            return _resultValue;
        }
    }
}
