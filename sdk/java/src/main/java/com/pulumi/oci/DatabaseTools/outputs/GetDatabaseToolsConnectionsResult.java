// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DatabaseTools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollection;
import com.pulumi.oci.DatabaseTools.outputs.GetDatabaseToolsConnectionsFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseToolsConnectionsResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Database Tools connection.
     * 
     */
    private String compartmentId;
    /**
     * @return The list of database_tools_connection_collection.
     * 
     */
    private List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollection> databaseToolsConnectionCollections;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private @Nullable String displayName;
    private @Nullable List<GetDatabaseToolsConnectionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String relatedResourceIdentifier;
    /**
     * @return Specifies whether this connection is supported by the Database Tools Runtime.
     * 
     */
    private @Nullable List<String> runtimeSupports;
    /**
     * @return The current state of the Database Tools connection.
     * 
     */
    private @Nullable String state;
    /**
     * @return The Database Tools connection type.
     * 
     */
    private @Nullable List<String> types;

    private GetDatabaseToolsConnectionsResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Database Tools connection.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The list of database_tools_connection_collection.
     * 
     */
    public List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollection> databaseToolsConnectionCollections() {
        return this.databaseToolsConnectionCollections;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetDatabaseToolsConnectionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> relatedResourceIdentifier() {
        return Optional.ofNullable(this.relatedResourceIdentifier);
    }
    /**
     * @return Specifies whether this connection is supported by the Database Tools Runtime.
     * 
     */
    public List<String> runtimeSupports() {
        return this.runtimeSupports == null ? List.of() : this.runtimeSupports;
    }
    /**
     * @return The current state of the Database Tools connection.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The Database Tools connection type.
     * 
     */
    public List<String> types() {
        return this.types == null ? List.of() : this.types;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseToolsConnectionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollection> databaseToolsConnectionCollections;
        private @Nullable String displayName;
        private @Nullable List<GetDatabaseToolsConnectionsFilter> filters;
        private String id;
        private @Nullable String relatedResourceIdentifier;
        private @Nullable List<String> runtimeSupports;
        private @Nullable String state;
        private @Nullable List<String> types;
        public Builder() {}
        public Builder(GetDatabaseToolsConnectionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseToolsConnectionCollections = defaults.databaseToolsConnectionCollections;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.relatedResourceIdentifier = defaults.relatedResourceIdentifier;
    	      this.runtimeSupports = defaults.runtimeSupports;
    	      this.state = defaults.state;
    	      this.types = defaults.types;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseToolsConnectionCollections(List<GetDatabaseToolsConnectionsDatabaseToolsConnectionCollection> databaseToolsConnectionCollections) {
            if (databaseToolsConnectionCollections == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionsResult", "databaseToolsConnectionCollections");
            }
            this.databaseToolsConnectionCollections = databaseToolsConnectionCollections;
            return this;
        }
        public Builder databaseToolsConnectionCollections(GetDatabaseToolsConnectionsDatabaseToolsConnectionCollection... databaseToolsConnectionCollections) {
            return databaseToolsConnectionCollections(List.of(databaseToolsConnectionCollections));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDatabaseToolsConnectionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDatabaseToolsConnectionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseToolsConnectionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder relatedResourceIdentifier(@Nullable String relatedResourceIdentifier) {

            this.relatedResourceIdentifier = relatedResourceIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeSupports(@Nullable List<String> runtimeSupports) {

            this.runtimeSupports = runtimeSupports;
            return this;
        }
        public Builder runtimeSupports(String... runtimeSupports) {
            return runtimeSupports(List.of(runtimeSupports));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder types(@Nullable List<String> types) {

            this.types = types;
            return this;
        }
        public Builder types(String... types) {
            return types(List.of(types));
        }
        public GetDatabaseToolsConnectionsResult build() {
            final var _resultValue = new GetDatabaseToolsConnectionsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseToolsConnectionCollections = databaseToolsConnectionCollections;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.relatedResourceIdentifier = relatedResourceIdentifier;
            _resultValue.runtimeSupports = runtimeSupports;
            _resultValue.state = state;
            _resultValue.types = types;
            return _resultValue;
        }
    }
}
