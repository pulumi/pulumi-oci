// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class VulnerabilityScanArgs extends com.pulumi.resources.ResourceArgs {

    public static final VulnerabilityScanArgs Empty = new VulnerabilityScanArgs();

    /**
     * Compartment Identifier
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return Compartment Identifier
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="vulnerabilityScanType", required=true)
    private Output<String> vulnerabilityScanType;

    /**
     * @return Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> vulnerabilityScanType() {
        return this.vulnerabilityScanType;
    }

    private VulnerabilityScanArgs() {}

    private VulnerabilityScanArgs(VulnerabilityScanArgs $) {
        this.compartmentId = $.compartmentId;
        this.vulnerabilityScanType = $.vulnerabilityScanType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VulnerabilityScanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VulnerabilityScanArgs $;

        public Builder() {
            $ = new VulnerabilityScanArgs();
        }

        public Builder(VulnerabilityScanArgs defaults) {
            $ = new VulnerabilityScanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId Compartment Identifier
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param vulnerabilityScanType Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanType(Output<String> vulnerabilityScanType) {
            $.vulnerabilityScanType = vulnerabilityScanType;
            return this;
        }

        /**
         * @param vulnerabilityScanType Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanType(String vulnerabilityScanType) {
            return vulnerabilityScanType(Output.of(vulnerabilityScanType));
        }

        public VulnerabilityScanArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("VulnerabilityScanArgs", "compartmentId");
            }
            if ($.vulnerabilityScanType == null) {
                throw new MissingRequiredPropertyException("VulnerabilityScanArgs", "vulnerabilityScanType");
            }
            return $;
        }
    }

}
