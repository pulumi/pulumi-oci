// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPatchManagementArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPatchManagementArgs Empty = new GetPatchManagementArgs();

    /**
     * The required ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The required ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only database that match the given release version.
     * 
     */
    @Import(name="databaseRelease")
    private @Nullable Output<String> databaseRelease;

    /**
     * @return A filter to return only database that match the given release version.
     * 
     */
    public Optional<Output<String>> databaseRelease() {
        return Optional.ofNullable(this.databaseRelease);
    }

    /**
     * A filter to return only resources whose timeStarted is greater than or equal to the given date-time.
     * 
     */
    @Import(name="timeStartedGreaterThanOrEqualTo")
    private @Nullable Output<String> timeStartedGreaterThanOrEqualTo;

    /**
     * @return A filter to return only resources whose timeStarted is greater than or equal to the given date-time.
     * 
     */
    public Optional<Output<String>> timeStartedGreaterThanOrEqualTo() {
        return Optional.ofNullable(this.timeStartedGreaterThanOrEqualTo);
    }

    /**
     * A filter to return only resources whose timeStarted is less than the given date-time.
     * 
     */
    @Import(name="timeStartedLessThan")
    private @Nullable Output<String> timeStartedLessThan;

    /**
     * @return A filter to return only resources whose timeStarted is less than the given date-time.
     * 
     */
    public Optional<Output<String>> timeStartedLessThan() {
        return Optional.ofNullable(this.timeStartedLessThan);
    }

    private GetPatchManagementArgs() {}

    private GetPatchManagementArgs(GetPatchManagementArgs $) {
        this.compartmentId = $.compartmentId;
        this.databaseRelease = $.databaseRelease;
        this.timeStartedGreaterThanOrEqualTo = $.timeStartedGreaterThanOrEqualTo;
        this.timeStartedLessThan = $.timeStartedLessThan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPatchManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPatchManagementArgs $;

        public Builder() {
            $ = new GetPatchManagementArgs();
        }

        public Builder(GetPatchManagementArgs defaults) {
            $ = new GetPatchManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The required ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The required ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(@Nullable Output<String> databaseRelease) {
            $.databaseRelease = databaseRelease;
            return this;
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(String databaseRelease) {
            return databaseRelease(Output.of(databaseRelease));
        }

        /**
         * @param timeStartedGreaterThanOrEqualTo A filter to return only resources whose timeStarted is greater than or equal to the given date-time.
         * 
         * @return builder
         * 
         */
        public Builder timeStartedGreaterThanOrEqualTo(@Nullable Output<String> timeStartedGreaterThanOrEqualTo) {
            $.timeStartedGreaterThanOrEqualTo = timeStartedGreaterThanOrEqualTo;
            return this;
        }

        /**
         * @param timeStartedGreaterThanOrEqualTo A filter to return only resources whose timeStarted is greater than or equal to the given date-time.
         * 
         * @return builder
         * 
         */
        public Builder timeStartedGreaterThanOrEqualTo(String timeStartedGreaterThanOrEqualTo) {
            return timeStartedGreaterThanOrEqualTo(Output.of(timeStartedGreaterThanOrEqualTo));
        }

        /**
         * @param timeStartedLessThan A filter to return only resources whose timeStarted is less than the given date-time.
         * 
         * @return builder
         * 
         */
        public Builder timeStartedLessThan(@Nullable Output<String> timeStartedLessThan) {
            $.timeStartedLessThan = timeStartedLessThan;
            return this;
        }

        /**
         * @param timeStartedLessThan A filter to return only resources whose timeStarted is less than the given date-time.
         * 
         * @return builder
         * 
         */
        public Builder timeStartedLessThan(String timeStartedLessThan) {
            return timeStartedLessThan(Output.of(timeStartedLessThan));
        }

        public GetPatchManagementArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetPatchManagementArgs", "compartmentId");
            }
            return $;
        }
    }

}
