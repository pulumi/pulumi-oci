// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dblm.inputs.GetPatchManagementDatabasesFilterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPatchManagementDatabasesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPatchManagementDatabasesArgs Empty = new GetPatchManagementDatabasesArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only database that match the given release version.
     * 
     */
    @Import(name="databaseRelease")
    private @Nullable Output<String> databaseRelease;

    /**
     * @return A filter to return only database that match the given release version.
     * 
     */
    public Optional<Output<String>> databaseRelease() {
        return Optional.ofNullable(this.databaseRelease);
    }

    /**
     * Filter by database type. Possible values Single Instance or RAC.
     * 
     */
    @Import(name="databaseType")
    private @Nullable Output<String> databaseType;

    /**
     * @return Filter by database type. Possible values Single Instance or RAC.
     * 
     */
    public Optional<Output<String>> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return only database that have given patchId as additional patch (drifter from image version).
     * 
     */
    @Import(name="drifterPatchId")
    private @Nullable Output<Integer> drifterPatchId;

    /**
     * @return A filter to return only database that have given patchId as additional patch (drifter from image version).
     * 
     */
    public Optional<Output<Integer>> drifterPatchId() {
        return Optional.ofNullable(this.drifterPatchId);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetPatchManagementDatabasesFilterArgs>> filters;

    public Optional<Output<List<GetPatchManagementDatabasesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Filter databases by image compliance status.
     * 
     */
    @Import(name="imageCompliance")
    private @Nullable Output<String> imageCompliance;

    /**
     * @return Filter databases by image compliance status.
     * 
     */
    public Optional<Output<String>> imageCompliance() {
        return Optional.ofNullable(this.imageCompliance);
    }

    /**
     * Subscribed image
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return Subscribed image
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     * 
     */
    @Import(name="severityTypes")
    private @Nullable Output<List<String>> severityTypes;

    /**
     * @return Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     * 
     */
    public Optional<Output<List<String>>> severityTypes() {
        return Optional.ofNullable(this.severityTypes);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetPatchManagementDatabasesArgs() {}

    private GetPatchManagementDatabasesArgs(GetPatchManagementDatabasesArgs $) {
        this.compartmentId = $.compartmentId;
        this.databaseRelease = $.databaseRelease;
        this.databaseType = $.databaseType;
        this.displayName = $.displayName;
        this.drifterPatchId = $.drifterPatchId;
        this.filters = $.filters;
        this.imageCompliance = $.imageCompliance;
        this.imageId = $.imageId;
        this.severityTypes = $.severityTypes;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPatchManagementDatabasesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPatchManagementDatabasesArgs $;

        public Builder() {
            $ = new GetPatchManagementDatabasesArgs();
        }

        public Builder(GetPatchManagementDatabasesArgs defaults) {
            $ = new GetPatchManagementDatabasesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(@Nullable Output<String> databaseRelease) {
            $.databaseRelease = databaseRelease;
            return this;
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(String databaseRelease) {
            return databaseRelease(Output.of(databaseRelease));
        }

        /**
         * @param databaseType Filter by database type. Possible values Single Instance or RAC.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(@Nullable Output<String> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType Filter by database type. Possible values Single Instance or RAC.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param drifterPatchId A filter to return only database that have given patchId as additional patch (drifter from image version).
         * 
         * @return builder
         * 
         */
        public Builder drifterPatchId(@Nullable Output<Integer> drifterPatchId) {
            $.drifterPatchId = drifterPatchId;
            return this;
        }

        /**
         * @param drifterPatchId A filter to return only database that have given patchId as additional patch (drifter from image version).
         * 
         * @return builder
         * 
         */
        public Builder drifterPatchId(Integer drifterPatchId) {
            return drifterPatchId(Output.of(drifterPatchId));
        }

        public Builder filters(@Nullable Output<List<GetPatchManagementDatabasesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetPatchManagementDatabasesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetPatchManagementDatabasesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param imageCompliance Filter databases by image compliance status.
         * 
         * @return builder
         * 
         */
        public Builder imageCompliance(@Nullable Output<String> imageCompliance) {
            $.imageCompliance = imageCompliance;
            return this;
        }

        /**
         * @param imageCompliance Filter databases by image compliance status.
         * 
         * @return builder
         * 
         */
        public Builder imageCompliance(String imageCompliance) {
            return imageCompliance(Output.of(imageCompliance));
        }

        /**
         * @param imageId Subscribed image
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId Subscribed image
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(@Nullable Output<List<String>> severityTypes) {
            $.severityTypes = severityTypes;
            return this;
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(List<String> severityTypes) {
            return severityTypes(Output.of(severityTypes));
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(String... severityTypes) {
            return severityTypes(List.of(severityTypes));
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetPatchManagementDatabasesArgs build() {
            return $;
        }
    }

}
