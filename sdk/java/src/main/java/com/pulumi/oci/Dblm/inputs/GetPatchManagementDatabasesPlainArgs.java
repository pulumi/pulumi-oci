// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dblm.inputs.GetPatchManagementDatabasesFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPatchManagementDatabasesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPatchManagementDatabasesPlainArgs Empty = new GetPatchManagementDatabasesPlainArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only database that match the given release version.
     * 
     */
    @Import(name="databaseRelease")
    private @Nullable String databaseRelease;

    /**
     * @return A filter to return only database that match the given release version.
     * 
     */
    public Optional<String> databaseRelease() {
        return Optional.ofNullable(this.databaseRelease);
    }

    /**
     * Filter by database type. Possible values Single Instance or RAC.
     * 
     */
    @Import(name="databaseType")
    private @Nullable String databaseType;

    /**
     * @return Filter by database type. Possible values Single Instance or RAC.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * A filter to return only database that have given patchId as additional patch (drifter from image version).
     * 
     */
    @Import(name="drifterPatchId")
    private @Nullable Integer drifterPatchId;

    /**
     * @return A filter to return only database that have given patchId as additional patch (drifter from image version).
     * 
     */
    public Optional<Integer> drifterPatchId() {
        return Optional.ofNullable(this.drifterPatchId);
    }

    @Import(name="filters")
    private @Nullable List<GetPatchManagementDatabasesFilter> filters;

    public Optional<List<GetPatchManagementDatabasesFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Filter databases by image compliance status.
     * 
     */
    @Import(name="imageCompliance")
    private @Nullable String imageCompliance;

    /**
     * @return Filter databases by image compliance status.
     * 
     */
    public Optional<String> imageCompliance() {
        return Optional.ofNullable(this.imageCompliance);
    }

    /**
     * Subscribed image
     * 
     */
    @Import(name="imageId")
    private @Nullable String imageId;

    /**
     * @return Subscribed image
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     * 
     */
    @Import(name="severityTypes")
    private @Nullable List<String> severityTypes;

    /**
     * @return Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     * 
     */
    public Optional<List<String>> severityTypes() {
        return Optional.ofNullable(this.severityTypes);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetPatchManagementDatabasesPlainArgs() {}

    private GetPatchManagementDatabasesPlainArgs(GetPatchManagementDatabasesPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.databaseRelease = $.databaseRelease;
        this.databaseType = $.databaseType;
        this.displayName = $.displayName;
        this.drifterPatchId = $.drifterPatchId;
        this.filters = $.filters;
        this.imageCompliance = $.imageCompliance;
        this.imageId = $.imageId;
        this.severityTypes = $.severityTypes;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPatchManagementDatabasesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPatchManagementDatabasesPlainArgs $;

        public Builder() {
            $ = new GetPatchManagementDatabasesPlainArgs();
        }

        public Builder(GetPatchManagementDatabasesPlainArgs defaults) {
            $ = new GetPatchManagementDatabasesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(@Nullable String databaseRelease) {
            $.databaseRelease = databaseRelease;
            return this;
        }

        /**
         * @param databaseType Filter by database type. Possible values Single Instance or RAC.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(@Nullable String databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param drifterPatchId A filter to return only database that have given patchId as additional patch (drifter from image version).
         * 
         * @return builder
         * 
         */
        public Builder drifterPatchId(@Nullable Integer drifterPatchId) {
            $.drifterPatchId = drifterPatchId;
            return this;
        }

        public Builder filters(@Nullable List<GetPatchManagementDatabasesFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetPatchManagementDatabasesFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param imageCompliance Filter databases by image compliance status.
         * 
         * @return builder
         * 
         */
        public Builder imageCompliance(@Nullable String imageCompliance) {
            $.imageCompliance = imageCompliance;
            return this;
        }

        /**
         * @param imageId Subscribed image
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable String imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(@Nullable List<String> severityTypes) {
            $.severityTypes = severityTypes;
            return this;
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(String... severityTypes) {
            return severityTypes(List.of(severityTypes));
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetPatchManagementDatabasesPlainArgs build() {
            return $;
        }
    }

}
