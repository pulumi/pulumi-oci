// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dblm.inputs.GetVulnerabilityAggregatedVulnerabilityDataFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVulnerabilityAggregatedVulnerabilityDataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVulnerabilityAggregatedVulnerabilityDataArgs Empty = new GetVulnerabilityAggregatedVulnerabilityDataArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * A filter to return only database that match the given release version.
     * 
     */
    @Import(name="databaseRelease")
    private @Nullable Output<String> databaseRelease;

    /**
     * @return A filter to return only database that match the given release version.
     * 
     */
    public Optional<Output<String>> databaseRelease() {
        return Optional.ofNullable(this.databaseRelease);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetVulnerabilityAggregatedVulnerabilityDataFilterArgs>> filters;

    public Optional<Output<List<GetVulnerabilityAggregatedVulnerabilityDataFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The created greater than.
     * 
     */
    @Import(name="timeCreatedGreaterThan")
    private @Nullable Output<String> timeCreatedGreaterThan;

    /**
     * @return The created greater than.
     * 
     */
    public Optional<Output<String>> timeCreatedGreaterThan() {
        return Optional.ofNullable(this.timeCreatedGreaterThan);
    }

    /**
     * The time ended less than.
     * 
     */
    @Import(name="timeEndedLessThan")
    private @Nullable Output<String> timeEndedLessThan;

    /**
     * @return The time ended less than.
     * 
     */
    public Optional<Output<String>> timeEndedLessThan() {
        return Optional.ofNullable(this.timeEndedLessThan);
    }

    private GetVulnerabilityAggregatedVulnerabilityDataArgs() {}

    private GetVulnerabilityAggregatedVulnerabilityDataArgs(GetVulnerabilityAggregatedVulnerabilityDataArgs $) {
        this.compartmentId = $.compartmentId;
        this.databaseRelease = $.databaseRelease;
        this.filters = $.filters;
        this.state = $.state;
        this.timeCreatedGreaterThan = $.timeCreatedGreaterThan;
        this.timeEndedLessThan = $.timeEndedLessThan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVulnerabilityAggregatedVulnerabilityDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVulnerabilityAggregatedVulnerabilityDataArgs $;

        public Builder() {
            $ = new GetVulnerabilityAggregatedVulnerabilityDataArgs();
        }

        public Builder(GetVulnerabilityAggregatedVulnerabilityDataArgs defaults) {
            $ = new GetVulnerabilityAggregatedVulnerabilityDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(@Nullable Output<String> databaseRelease) {
            $.databaseRelease = databaseRelease;
            return this;
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(String databaseRelease) {
            return databaseRelease(Output.of(databaseRelease));
        }

        public Builder filters(@Nullable Output<List<GetVulnerabilityAggregatedVulnerabilityDataFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetVulnerabilityAggregatedVulnerabilityDataFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetVulnerabilityAggregatedVulnerabilityDataFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeCreatedGreaterThan The created greater than.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThan(@Nullable Output<String> timeCreatedGreaterThan) {
            $.timeCreatedGreaterThan = timeCreatedGreaterThan;
            return this;
        }

        /**
         * @param timeCreatedGreaterThan The created greater than.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThan(String timeCreatedGreaterThan) {
            return timeCreatedGreaterThan(Output.of(timeCreatedGreaterThan));
        }

        /**
         * @param timeEndedLessThan The time ended less than.
         * 
         * @return builder
         * 
         */
        public Builder timeEndedLessThan(@Nullable Output<String> timeEndedLessThan) {
            $.timeEndedLessThan = timeEndedLessThan;
            return this;
        }

        /**
         * @param timeEndedLessThan The time ended less than.
         * 
         * @return builder
         * 
         */
        public Builder timeEndedLessThan(String timeEndedLessThan) {
            return timeEndedLessThan(Output.of(timeEndedLessThan));
        }

        public GetVulnerabilityAggregatedVulnerabilityDataArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetVulnerabilityAggregatedVulnerabilityDataArgs", "compartmentId");
            }
            return $;
        }
    }

}
