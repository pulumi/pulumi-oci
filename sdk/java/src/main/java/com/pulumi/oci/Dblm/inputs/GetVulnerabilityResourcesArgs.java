// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dblm.inputs.GetVulnerabilityResourcesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVulnerabilityResourcesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVulnerabilityResourcesArgs Empty = new GetVulnerabilityResourcesArgs();

    /**
     * The required ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The required ID of the compartment in which to list resources.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * The id of a CVE.
     * 
     */
    @Import(name="cveId")
    private @Nullable Output<String> cveId;

    /**
     * @return The id of a CVE.
     * 
     */
    public Optional<Output<String>> cveId() {
        return Optional.ofNullable(this.cveId);
    }

    /**
     * A filter to return only database that match the given release version.
     * 
     */
    @Import(name="databaseRelease")
    private @Nullable Output<String> databaseRelease;

    /**
     * @return A filter to return only database that match the given release version.
     * 
     */
    public Optional<Output<String>> databaseRelease() {
        return Optional.ofNullable(this.databaseRelease);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetVulnerabilityResourcesFilterArgs>> filters;

    public Optional<Output<List<GetVulnerabilityResourcesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Filter by one or more severity types. Possible values are upToDate, patchAvailable
     * 
     */
    @Import(name="patchRecommendations")
    private @Nullable Output<List<String>> patchRecommendations;

    /**
     * @return Filter by one or more severity types. Possible values are upToDate, patchAvailable
     * 
     */
    public Optional<Output<List<String>>> patchRecommendations() {
        return Optional.ofNullable(this.patchRecommendations);
    }

    /**
     * Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     * 
     */
    @Import(name="severityTypes")
    private @Nullable Output<List<String>> severityTypes;

    /**
     * @return Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     * 
     */
    public Optional<Output<List<String>>> severityTypes() {
        return Optional.ofNullable(this.severityTypes);
    }

    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources their lifecycleState matches the given lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetVulnerabilityResourcesArgs() {}

    private GetVulnerabilityResourcesArgs(GetVulnerabilityResourcesArgs $) {
        this.compartmentId = $.compartmentId;
        this.cveId = $.cveId;
        this.databaseRelease = $.databaseRelease;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.patchRecommendations = $.patchRecommendations;
        this.severityTypes = $.severityTypes;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVulnerabilityResourcesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVulnerabilityResourcesArgs $;

        public Builder() {
            $ = new GetVulnerabilityResourcesArgs();
        }

        public Builder(GetVulnerabilityResourcesArgs defaults) {
            $ = new GetVulnerabilityResourcesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The required ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The required ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param cveId The id of a CVE.
         * 
         * @return builder
         * 
         */
        public Builder cveId(@Nullable Output<String> cveId) {
            $.cveId = cveId;
            return this;
        }

        /**
         * @param cveId The id of a CVE.
         * 
         * @return builder
         * 
         */
        public Builder cveId(String cveId) {
            return cveId(Output.of(cveId));
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(@Nullable Output<String> databaseRelease) {
            $.databaseRelease = databaseRelease;
            return this;
        }

        /**
         * @param databaseRelease A filter to return only database that match the given release version.
         * 
         * @return builder
         * 
         */
        public Builder databaseRelease(String databaseRelease) {
            return databaseRelease(Output.of(databaseRelease));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetVulnerabilityResourcesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetVulnerabilityResourcesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetVulnerabilityResourcesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param patchRecommendations Filter by one or more severity types. Possible values are upToDate, patchAvailable
         * 
         * @return builder
         * 
         */
        public Builder patchRecommendations(@Nullable Output<List<String>> patchRecommendations) {
            $.patchRecommendations = patchRecommendations;
            return this;
        }

        /**
         * @param patchRecommendations Filter by one or more severity types. Possible values are upToDate, patchAvailable
         * 
         * @return builder
         * 
         */
        public Builder patchRecommendations(List<String> patchRecommendations) {
            return patchRecommendations(Output.of(patchRecommendations));
        }

        /**
         * @param patchRecommendations Filter by one or more severity types. Possible values are upToDate, patchAvailable
         * 
         * @return builder
         * 
         */
        public Builder patchRecommendations(String... patchRecommendations) {
            return patchRecommendations(List.of(patchRecommendations));
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(@Nullable Output<List<String>> severityTypes) {
            $.severityTypes = severityTypes;
            return this;
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(List<String> severityTypes) {
            return severityTypes(Output.of(severityTypes));
        }

        /**
         * @param severityTypes Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
         * 
         * @return builder
         * 
         */
        public Builder severityTypes(String... severityTypes) {
            return severityTypes(List.of(severityTypes));
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources their lifecycleState matches the given lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetVulnerabilityResourcesArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetVulnerabilityResourcesArgs", "compartmentId");
            }
            return $;
        }
    }

}
