// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dblm.inputs.GetVulnerabilityScansFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVulnerabilityScansArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVulnerabilityScansArgs Empty = new GetVulnerabilityScansArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetVulnerabilityScansFilterArgs>> filters;

    public Optional<Output<List<GetVulnerabilityScansFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The created greater than.
     * 
     */
    @Import(name="timeCreatedGreaterThan")
    private @Nullable Output<String> timeCreatedGreaterThan;

    /**
     * @return The created greater than.
     * 
     */
    public Optional<Output<String>> timeCreatedGreaterThan() {
        return Optional.ofNullable(this.timeCreatedGreaterThan);
    }

    /**
     * The time ended less than.
     * 
     */
    @Import(name="timeEndedLessThan")
    private @Nullable Output<String> timeEndedLessThan;

    /**
     * @return The time ended less than.
     * 
     */
    public Optional<Output<String>> timeEndedLessThan() {
        return Optional.ofNullable(this.timeEndedLessThan);
    }

    /**
     * The ID of the vulnerability scan.
     * 
     */
    @Import(name="vulnerabilityScanId")
    private @Nullable Output<String> vulnerabilityScanId;

    /**
     * @return The ID of the vulnerability scan.
     * 
     */
    public Optional<Output<String>> vulnerabilityScanId() {
        return Optional.ofNullable(this.vulnerabilityScanId);
    }

    /**
     * Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
     * 
     */
    @Import(name="vulnerabilityScanStatuses")
    private @Nullable Output<List<String>> vulnerabilityScanStatuses;

    /**
     * @return Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
     * 
     */
    public Optional<Output<List<String>>> vulnerabilityScanStatuses() {
        return Optional.ofNullable(this.vulnerabilityScanStatuses);
    }

    /**
     * The scan type to use is &#39;CVE&#39;, &#39;PATCH&#39; or &#39;IMAGE_PATCH&#39;.
     * 
     */
    @Import(name="vulnerabilityScanType")
    private @Nullable Output<String> vulnerabilityScanType;

    /**
     * @return The scan type to use is &#39;CVE&#39;, &#39;PATCH&#39; or &#39;IMAGE_PATCH&#39;.
     * 
     */
    public Optional<Output<String>> vulnerabilityScanType() {
        return Optional.ofNullable(this.vulnerabilityScanType);
    }

    private GetVulnerabilityScansArgs() {}

    private GetVulnerabilityScansArgs(GetVulnerabilityScansArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.timeCreatedGreaterThan = $.timeCreatedGreaterThan;
        this.timeEndedLessThan = $.timeEndedLessThan;
        this.vulnerabilityScanId = $.vulnerabilityScanId;
        this.vulnerabilityScanStatuses = $.vulnerabilityScanStatuses;
        this.vulnerabilityScanType = $.vulnerabilityScanType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVulnerabilityScansArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVulnerabilityScansArgs $;

        public Builder() {
            $ = new GetVulnerabilityScansArgs();
        }

        public Builder(GetVulnerabilityScansArgs defaults) {
            $ = new GetVulnerabilityScansArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetVulnerabilityScansFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetVulnerabilityScansFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetVulnerabilityScansFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param timeCreatedGreaterThan The created greater than.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThan(@Nullable Output<String> timeCreatedGreaterThan) {
            $.timeCreatedGreaterThan = timeCreatedGreaterThan;
            return this;
        }

        /**
         * @param timeCreatedGreaterThan The created greater than.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThan(String timeCreatedGreaterThan) {
            return timeCreatedGreaterThan(Output.of(timeCreatedGreaterThan));
        }

        /**
         * @param timeEndedLessThan The time ended less than.
         * 
         * @return builder
         * 
         */
        public Builder timeEndedLessThan(@Nullable Output<String> timeEndedLessThan) {
            $.timeEndedLessThan = timeEndedLessThan;
            return this;
        }

        /**
         * @param timeEndedLessThan The time ended less than.
         * 
         * @return builder
         * 
         */
        public Builder timeEndedLessThan(String timeEndedLessThan) {
            return timeEndedLessThan(Output.of(timeEndedLessThan));
        }

        /**
         * @param vulnerabilityScanId The ID of the vulnerability scan.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanId(@Nullable Output<String> vulnerabilityScanId) {
            $.vulnerabilityScanId = vulnerabilityScanId;
            return this;
        }

        /**
         * @param vulnerabilityScanId The ID of the vulnerability scan.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanId(String vulnerabilityScanId) {
            return vulnerabilityScanId(Output.of(vulnerabilityScanId));
        }

        /**
         * @param vulnerabilityScanStatuses Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanStatuses(@Nullable Output<List<String>> vulnerabilityScanStatuses) {
            $.vulnerabilityScanStatuses = vulnerabilityScanStatuses;
            return this;
        }

        /**
         * @param vulnerabilityScanStatuses Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanStatuses(List<String> vulnerabilityScanStatuses) {
            return vulnerabilityScanStatuses(Output.of(vulnerabilityScanStatuses));
        }

        /**
         * @param vulnerabilityScanStatuses Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanStatuses(String... vulnerabilityScanStatuses) {
            return vulnerabilityScanStatuses(List.of(vulnerabilityScanStatuses));
        }

        /**
         * @param vulnerabilityScanType The scan type to use is &#39;CVE&#39;, &#39;PATCH&#39; or &#39;IMAGE_PATCH&#39;.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanType(@Nullable Output<String> vulnerabilityScanType) {
            $.vulnerabilityScanType = vulnerabilityScanType;
            return this;
        }

        /**
         * @param vulnerabilityScanType The scan type to use is &#39;CVE&#39;, &#39;PATCH&#39; or &#39;IMAGE_PATCH&#39;.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanType(String vulnerabilityScanType) {
            return vulnerabilityScanType(Output.of(vulnerabilityScanType));
        }

        public GetVulnerabilityScansArgs build() {
            return $;
        }
    }

}
