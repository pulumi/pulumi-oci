// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.oci.Dblm.inputs.GetVulnerabilityScansFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVulnerabilityScansPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVulnerabilityScansPlainArgs Empty = new GetVulnerabilityScansPlainArgs();

    /**
     * The ID of the compartment in which to list resources.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable String compartmentId;

    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * A filter to return only resources that match the entire display name given.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable List<GetVulnerabilityScansFilter> filters;

    public Optional<List<GetVulnerabilityScansFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The created greater than.
     * 
     */
    @Import(name="timeCreatedGreaterThan")
    private @Nullable String timeCreatedGreaterThan;

    /**
     * @return The created greater than.
     * 
     */
    public Optional<String> timeCreatedGreaterThan() {
        return Optional.ofNullable(this.timeCreatedGreaterThan);
    }

    /**
     * The time ended less than.
     * 
     */
    @Import(name="timeEndedLessThan")
    private @Nullable String timeEndedLessThan;

    /**
     * @return The time ended less than.
     * 
     */
    public Optional<String> timeEndedLessThan() {
        return Optional.ofNullable(this.timeEndedLessThan);
    }

    /**
     * The ID of the vulnerability scan.
     * 
     */
    @Import(name="vulnerabilityScanId")
    private @Nullable String vulnerabilityScanId;

    /**
     * @return The ID of the vulnerability scan.
     * 
     */
    public Optional<String> vulnerabilityScanId() {
        return Optional.ofNullable(this.vulnerabilityScanId);
    }

    /**
     * Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
     * 
     */
    @Import(name="vulnerabilityScanStatuses")
    private @Nullable List<String> vulnerabilityScanStatuses;

    /**
     * @return Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
     * 
     */
    public Optional<List<String>> vulnerabilityScanStatuses() {
        return Optional.ofNullable(this.vulnerabilityScanStatuses);
    }

    /**
     * The scan type to use is &#39;CVE&#39;, &#39;PATCH&#39; or &#39;IMAGE_PATCH&#39;.
     * 
     */
    @Import(name="vulnerabilityScanType")
    private @Nullable String vulnerabilityScanType;

    /**
     * @return The scan type to use is &#39;CVE&#39;, &#39;PATCH&#39; or &#39;IMAGE_PATCH&#39;.
     * 
     */
    public Optional<String> vulnerabilityScanType() {
        return Optional.ofNullable(this.vulnerabilityScanType);
    }

    private GetVulnerabilityScansPlainArgs() {}

    private GetVulnerabilityScansPlainArgs(GetVulnerabilityScansPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.timeCreatedGreaterThan = $.timeCreatedGreaterThan;
        this.timeEndedLessThan = $.timeEndedLessThan;
        this.vulnerabilityScanId = $.vulnerabilityScanId;
        this.vulnerabilityScanStatuses = $.vulnerabilityScanStatuses;
        this.vulnerabilityScanType = $.vulnerabilityScanType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVulnerabilityScansPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVulnerabilityScansPlainArgs $;

        public Builder() {
            $ = new GetVulnerabilityScansPlainArgs();
        }

        public Builder(GetVulnerabilityScansPlainArgs defaults) {
            $ = new GetVulnerabilityScansPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The ID of the compartment in which to list resources.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param displayName A filter to return only resources that match the entire display name given.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder filters(@Nullable List<GetVulnerabilityScansFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetVulnerabilityScansFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param timeCreatedGreaterThan The created greater than.
         * 
         * @return builder
         * 
         */
        public Builder timeCreatedGreaterThan(@Nullable String timeCreatedGreaterThan) {
            $.timeCreatedGreaterThan = timeCreatedGreaterThan;
            return this;
        }

        /**
         * @param timeEndedLessThan The time ended less than.
         * 
         * @return builder
         * 
         */
        public Builder timeEndedLessThan(@Nullable String timeEndedLessThan) {
            $.timeEndedLessThan = timeEndedLessThan;
            return this;
        }

        /**
         * @param vulnerabilityScanId The ID of the vulnerability scan.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanId(@Nullable String vulnerabilityScanId) {
            $.vulnerabilityScanId = vulnerabilityScanId;
            return this;
        }

        /**
         * @param vulnerabilityScanStatuses Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanStatuses(@Nullable List<String> vulnerabilityScanStatuses) {
            $.vulnerabilityScanStatuses = vulnerabilityScanStatuses;
            return this;
        }

        /**
         * @param vulnerabilityScanStatuses Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanStatuses(String... vulnerabilityScanStatuses) {
            return vulnerabilityScanStatuses(List.of(vulnerabilityScanStatuses));
        }

        /**
         * @param vulnerabilityScanType The scan type to use is &#39;CVE&#39;, &#39;PATCH&#39; or &#39;IMAGE_PATCH&#39;.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanType(@Nullable String vulnerabilityScanType) {
            $.vulnerabilityScanType = vulnerabilityScanType;
            return this;
        }

        public GetVulnerabilityScansPlainArgs build() {
            return $;
        }
    }

}
