// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Dblm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Dblm.outputs.GetPatchManagementDatabasesFilter;
import com.pulumi.oci.Dblm.outputs.GetPatchManagementDatabasesPatchDatabasesCollection;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPatchManagementDatabasesResult {
    private @Nullable String compartmentId;
    private @Nullable String databaseRelease;
    /**
     * @return Database type.
     * 
     */
    private @Nullable String databaseType;
    private @Nullable String displayName;
    private @Nullable Integer drifterPatchId;
    private @Nullable List<GetPatchManagementDatabasesFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String imageCompliance;
    /**
     * @return Image identifier.
     * 
     */
    private @Nullable String imageId;
    /**
     * @return The list of patch_databases_collection.
     * 
     */
    private List<GetPatchManagementDatabasesPatchDatabasesCollection> patchDatabasesCollections;
    private @Nullable List<String> severityTypes;
    /**
     * @return The current state of the database.
     * 
     */
    private @Nullable String state;

    private GetPatchManagementDatabasesResult() {}
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    public Optional<String> databaseRelease() {
        return Optional.ofNullable(this.databaseRelease);
    }
    /**
     * @return Database type.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public Optional<Integer> drifterPatchId() {
        return Optional.ofNullable(this.drifterPatchId);
    }
    public List<GetPatchManagementDatabasesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> imageCompliance() {
        return Optional.ofNullable(this.imageCompliance);
    }
    /**
     * @return Image identifier.
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return The list of patch_databases_collection.
     * 
     */
    public List<GetPatchManagementDatabasesPatchDatabasesCollection> patchDatabasesCollections() {
        return this.patchDatabasesCollections;
    }
    public List<String> severityTypes() {
        return this.severityTypes == null ? List.of() : this.severityTypes;
    }
    /**
     * @return The current state of the database.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPatchManagementDatabasesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String databaseRelease;
        private @Nullable String databaseType;
        private @Nullable String displayName;
        private @Nullable Integer drifterPatchId;
        private @Nullable List<GetPatchManagementDatabasesFilter> filters;
        private String id;
        private @Nullable String imageCompliance;
        private @Nullable String imageId;
        private List<GetPatchManagementDatabasesPatchDatabasesCollection> patchDatabasesCollections;
        private @Nullable List<String> severityTypes;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetPatchManagementDatabasesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.databaseRelease = defaults.databaseRelease;
    	      this.databaseType = defaults.databaseType;
    	      this.displayName = defaults.displayName;
    	      this.drifterPatchId = defaults.drifterPatchId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.imageCompliance = defaults.imageCompliance;
    	      this.imageId = defaults.imageId;
    	      this.patchDatabasesCollections = defaults.patchDatabasesCollections;
    	      this.severityTypes = defaults.severityTypes;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseRelease(@Nullable String databaseRelease) {

            this.databaseRelease = databaseRelease;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {

            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder drifterPatchId(@Nullable Integer drifterPatchId) {

            this.drifterPatchId = drifterPatchId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetPatchManagementDatabasesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetPatchManagementDatabasesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPatchManagementDatabasesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageCompliance(@Nullable String imageCompliance) {

            this.imageCompliance = imageCompliance;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {

            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder patchDatabasesCollections(List<GetPatchManagementDatabasesPatchDatabasesCollection> patchDatabasesCollections) {
            if (patchDatabasesCollections == null) {
              throw new MissingRequiredPropertyException("GetPatchManagementDatabasesResult", "patchDatabasesCollections");
            }
            this.patchDatabasesCollections = patchDatabasesCollections;
            return this;
        }
        public Builder patchDatabasesCollections(GetPatchManagementDatabasesPatchDatabasesCollection... patchDatabasesCollections) {
            return patchDatabasesCollections(List.of(patchDatabasesCollections));
        }
        @CustomType.Setter
        public Builder severityTypes(@Nullable List<String> severityTypes) {

            this.severityTypes = severityTypes;
            return this;
        }
        public Builder severityTypes(String... severityTypes) {
            return severityTypes(List.of(severityTypes));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetPatchManagementDatabasesResult build() {
            final var _resultValue = new GetPatchManagementDatabasesResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.databaseRelease = databaseRelease;
            _resultValue.databaseType = databaseType;
            _resultValue.displayName = displayName;
            _resultValue.drifterPatchId = drifterPatchId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.imageCompliance = imageCompliance;
            _resultValue.imageId = imageId;
            _resultValue.patchDatabasesCollections = patchDatabasesCollections;
            _resultValue.severityTypes = severityTypes;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
