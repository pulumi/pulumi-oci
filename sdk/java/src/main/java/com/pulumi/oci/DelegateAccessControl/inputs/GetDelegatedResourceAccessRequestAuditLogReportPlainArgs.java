// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DelegateAccessControl.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDelegatedResourceAccessRequestAuditLogReportPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDelegatedResourceAccessRequestAuditLogReportPlainArgs Empty = new GetDelegatedResourceAccessRequestAuditLogReportPlainArgs();

    /**
     * Unique Delegated Resource Access Request identifier
     * 
     */
    @Import(name="delegatedResourceAccessRequestId", required=true)
    private String delegatedResourceAccessRequestId;

    /**
     * @return Unique Delegated Resource Access Request identifier
     * 
     */
    public String delegatedResourceAccessRequestId() {
        return this.delegatedResourceAccessRequestId;
    }

    /**
     * Set to true to enable process tree computation in audit report
     * 
     */
    @Import(name="isProcessTreeEnabled")
    private @Nullable Boolean isProcessTreeEnabled;

    /**
     * @return Set to true to enable process tree computation in audit report
     * 
     */
    public Optional<Boolean> isProcessTreeEnabled() {
        return Optional.ofNullable(this.isProcessTreeEnabled);
    }

    private GetDelegatedResourceAccessRequestAuditLogReportPlainArgs() {}

    private GetDelegatedResourceAccessRequestAuditLogReportPlainArgs(GetDelegatedResourceAccessRequestAuditLogReportPlainArgs $) {
        this.delegatedResourceAccessRequestId = $.delegatedResourceAccessRequestId;
        this.isProcessTreeEnabled = $.isProcessTreeEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDelegatedResourceAccessRequestAuditLogReportPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDelegatedResourceAccessRequestAuditLogReportPlainArgs $;

        public Builder() {
            $ = new GetDelegatedResourceAccessRequestAuditLogReportPlainArgs();
        }

        public Builder(GetDelegatedResourceAccessRequestAuditLogReportPlainArgs defaults) {
            $ = new GetDelegatedResourceAccessRequestAuditLogReportPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegatedResourceAccessRequestId Unique Delegated Resource Access Request identifier
         * 
         * @return builder
         * 
         */
        public Builder delegatedResourceAccessRequestId(String delegatedResourceAccessRequestId) {
            $.delegatedResourceAccessRequestId = delegatedResourceAccessRequestId;
            return this;
        }

        /**
         * @param isProcessTreeEnabled Set to true to enable process tree computation in audit report
         * 
         * @return builder
         * 
         */
        public Builder isProcessTreeEnabled(@Nullable Boolean isProcessTreeEnabled) {
            $.isProcessTreeEnabled = isProcessTreeEnabled;
            return this;
        }

        public GetDelegatedResourceAccessRequestAuditLogReportPlainArgs build() {
            if ($.delegatedResourceAccessRequestId == null) {
                throw new MissingRequiredPropertyException("GetDelegatedResourceAccessRequestAuditLogReportPlainArgs", "delegatedResourceAccessRequestId");
            }
            return $;
        }
    }

}
