// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DelegateAccessControl.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DelegateAccessControl.inputs.GetDelegatedResourceAccessRequestsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDelegatedResourceAccessRequestsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDelegatedResourceAccessRequestsArgs Empty = new GetDelegatedResourceAccessRequestsArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * unique Delegation Control identifier
     * 
     */
    @Import(name="delegationControlId")
    private @Nullable Output<String> delegationControlId;

    /**
     * @return unique Delegation Control identifier
     * 
     */
    public Optional<Output<String>> delegationControlId() {
        return Optional.ofNullable(this.delegationControlId);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetDelegatedResourceAccessRequestsFilterArgs>> filters;

    public Optional<Output<List<GetDelegatedResourceAccessRequestsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only Delegated Resource Access Requests whose status matches the given Delegated Resource Access Request status.
     * 
     */
    @Import(name="requestStatus")
    private @Nullable Output<String> requestStatus;

    /**
     * @return A filter to return only Delegated Resource Access Requests whose status matches the given Delegated Resource Access Request status.
     * 
     */
    public Optional<Output<String>> requestStatus() {
        return Optional.ofNullable(this.requestStatus);
    }

    /**
     * A filter to return only Delegated Resource Access Requests for the given resource identifier.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return A filter to return only Delegated Resource Access Requests for the given resource identifier.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * A filter to return only Delegated Resource Access Requests whose lifecycleState matches the given Delegated Resource Access Request lifecycleState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only Delegated Resource Access Requests whose lifecycleState matches the given Delegated Resource Access Request lifecycleState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Query end time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
     * 
     */
    @Import(name="timeEnd")
    private @Nullable Output<String> timeEnd;

    /**
     * @return Query end time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
     * 
     */
    public Optional<Output<String>> timeEnd() {
        return Optional.ofNullable(this.timeEnd);
    }

    /**
     * Query start time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
     * 
     */
    @Import(name="timeStart")
    private @Nullable Output<String> timeStart;

    /**
     * @return Query start time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
     * 
     */
    public Optional<Output<String>> timeStart() {
        return Optional.ofNullable(this.timeStart);
    }

    private GetDelegatedResourceAccessRequestsArgs() {}

    private GetDelegatedResourceAccessRequestsArgs(GetDelegatedResourceAccessRequestsArgs $) {
        this.compartmentId = $.compartmentId;
        this.delegationControlId = $.delegationControlId;
        this.filters = $.filters;
        this.requestStatus = $.requestStatus;
        this.resourceId = $.resourceId;
        this.state = $.state;
        this.timeEnd = $.timeEnd;
        this.timeStart = $.timeStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDelegatedResourceAccessRequestsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDelegatedResourceAccessRequestsArgs $;

        public Builder() {
            $ = new GetDelegatedResourceAccessRequestsArgs();
        }

        public Builder(GetDelegatedResourceAccessRequestsArgs defaults) {
            $ = new GetDelegatedResourceAccessRequestsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param delegationControlId unique Delegation Control identifier
         * 
         * @return builder
         * 
         */
        public Builder delegationControlId(@Nullable Output<String> delegationControlId) {
            $.delegationControlId = delegationControlId;
            return this;
        }

        /**
         * @param delegationControlId unique Delegation Control identifier
         * 
         * @return builder
         * 
         */
        public Builder delegationControlId(String delegationControlId) {
            return delegationControlId(Output.of(delegationControlId));
        }

        public Builder filters(@Nullable Output<List<GetDelegatedResourceAccessRequestsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetDelegatedResourceAccessRequestsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetDelegatedResourceAccessRequestsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param requestStatus A filter to return only Delegated Resource Access Requests whose status matches the given Delegated Resource Access Request status.
         * 
         * @return builder
         * 
         */
        public Builder requestStatus(@Nullable Output<String> requestStatus) {
            $.requestStatus = requestStatus;
            return this;
        }

        /**
         * @param requestStatus A filter to return only Delegated Resource Access Requests whose status matches the given Delegated Resource Access Request status.
         * 
         * @return builder
         * 
         */
        public Builder requestStatus(String requestStatus) {
            return requestStatus(Output.of(requestStatus));
        }

        /**
         * @param resourceId A filter to return only Delegated Resource Access Requests for the given resource identifier.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId A filter to return only Delegated Resource Access Requests for the given resource identifier.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param state A filter to return only Delegated Resource Access Requests whose lifecycleState matches the given Delegated Resource Access Request lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only Delegated Resource Access Requests whose lifecycleState matches the given Delegated Resource Access Request lifecycleState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeEnd Query end time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
         * 
         * @return builder
         * 
         */
        public Builder timeEnd(@Nullable Output<String> timeEnd) {
            $.timeEnd = timeEnd;
            return this;
        }

        /**
         * @param timeEnd Query end time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
         * 
         * @return builder
         * 
         */
        public Builder timeEnd(String timeEnd) {
            return timeEnd(Output.of(timeEnd));
        }

        /**
         * @param timeStart Query start time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
         * 
         * @return builder
         * 
         */
        public Builder timeStart(@Nullable Output<String> timeStart) {
            $.timeStart = timeStart;
            return this;
        }

        /**
         * @param timeStart Query start time in UTC in ISO 8601 format(inclusive). Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ). timeIntervalStart and timeIntervalEnd parameters cannot be used together.
         * 
         * @return builder
         * 
         */
        public Builder timeStart(String timeStart) {
            return timeStart(Output.of(timeStart));
        }

        public GetDelegatedResourceAccessRequestsArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetDelegatedResourceAccessRequestsArgs", "compartmentId");
            }
            return $;
        }
    }

}
