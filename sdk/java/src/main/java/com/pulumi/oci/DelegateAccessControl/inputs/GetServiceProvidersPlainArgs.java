// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DelegateAccessControl.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DelegateAccessControl.inputs.GetServiceProvidersFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServiceProvidersPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceProvidersPlainArgs Empty = new GetServiceProvidersPlainArgs();

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private String compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    @Import(name="filters")
    private @Nullable List<GetServiceProvidersFilter> filters;

    public Optional<List<GetServiceProvidersFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return Service Provider resources that match the given name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A filter to return Service Provider resources that match the given name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A filter to return only Service Provider resources whose provider type matches the given provider type.
     * 
     */
    @Import(name="serviceProviderType")
    private @Nullable String serviceProviderType;

    /**
     * @return A filter to return only Service Provider resources whose provider type matches the given provider type.
     * 
     */
    public Optional<String> serviceProviderType() {
        return Optional.ofNullable(this.serviceProviderType);
    }

    /**
     * A filter to return only Service Provider resources whose lifecycleState matches the given Service Provider lifecycle state.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return A filter to return only Service Provider resources whose lifecycleState matches the given Service Provider lifecycle state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return only Service Provider resources whose supported resource type matches the given resource type.
     * 
     */
    @Import(name="supportedResourceType")
    private @Nullable String supportedResourceType;

    /**
     * @return A filter to return only Service Provider resources whose supported resource type matches the given resource type.
     * 
     */
    public Optional<String> supportedResourceType() {
        return Optional.ofNullable(this.supportedResourceType);
    }

    private GetServiceProvidersPlainArgs() {}

    private GetServiceProvidersPlainArgs(GetServiceProvidersPlainArgs $) {
        this.compartmentId = $.compartmentId;
        this.filters = $.filters;
        this.name = $.name;
        this.serviceProviderType = $.serviceProviderType;
        this.state = $.state;
        this.supportedResourceType = $.supportedResourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceProvidersPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceProvidersPlainArgs $;

        public Builder() {
            $ = new GetServiceProvidersPlainArgs();
        }

        public Builder(GetServiceProvidersPlainArgs defaults) {
            $ = new GetServiceProvidersPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        public Builder filters(@Nullable List<GetServiceProvidersFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetServiceProvidersFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name A filter to return Service Provider resources that match the given name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param serviceProviderType A filter to return only Service Provider resources whose provider type matches the given provider type.
         * 
         * @return builder
         * 
         */
        public Builder serviceProviderType(@Nullable String serviceProviderType) {
            $.serviceProviderType = serviceProviderType;
            return this;
        }

        /**
         * @param state A filter to return only Service Provider resources whose lifecycleState matches the given Service Provider lifecycle state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param supportedResourceType A filter to return only Service Provider resources whose supported resource type matches the given resource type.
         * 
         * @return builder
         * 
         */
        public Builder supportedResourceType(@Nullable String supportedResourceType) {
            $.supportedResourceType = supportedResourceType;
            return this;
        }

        public GetServiceProvidersPlainArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("GetServiceProvidersPlainArgs", "compartmentId");
            }
            return $;
        }
    }

}
