// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DelegateAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DelegateAccessControl.outputs.GetServiceProviderActionProperty;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceProviderActionResult {
    /**
     * @return Name of the infrastructure layer associated with the Service Provider Action.
     * 
     */
    private String component;
    /**
     * @return Display Name of the Service Provider Action.
     * 
     */
    private String customerDisplayName;
    /**
     * @return Description of the Service Provider Action in terms of associated risk profile, and characteristics of the operating system commands made available to the support operator under this Service Provider Action.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the property
     * 
     */
    private String name;
    /**
     * @return Fine grained properties associated with the Delegation Control.
     * 
     */
    private List<GetServiceProviderActionProperty> properties;
    /**
     * @return resourceType for which the ServiceProviderAction is applicable
     * 
     */
    private String resourceType;
    private String serviceProviderActionId;
    /**
     * @return List of Service Provider Service Types that this Service Provider Action is applicable to.
     * 
     */
    private List<String> serviceProviderServiceTypes;
    /**
     * @return The current lifecycle state of the Service Provider Action.
     * 
     */
    private String state;

    private GetServiceProviderActionResult() {}
    /**
     * @return Name of the infrastructure layer associated with the Service Provider Action.
     * 
     */
    public String component() {
        return this.component;
    }
    /**
     * @return Display Name of the Service Provider Action.
     * 
     */
    public String customerDisplayName() {
        return this.customerDisplayName;
    }
    /**
     * @return Description of the Service Provider Action in terms of associated risk profile, and characteristics of the operating system commands made available to the support operator under this Service Provider Action.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the property
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Fine grained properties associated with the Delegation Control.
     * 
     */
    public List<GetServiceProviderActionProperty> properties() {
        return this.properties;
    }
    /**
     * @return resourceType for which the ServiceProviderAction is applicable
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    public String serviceProviderActionId() {
        return this.serviceProviderActionId;
    }
    /**
     * @return List of Service Provider Service Types that this Service Provider Action is applicable to.
     * 
     */
    public List<String> serviceProviderServiceTypes() {
        return this.serviceProviderServiceTypes;
    }
    /**
     * @return The current lifecycle state of the Service Provider Action.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceProviderActionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String component;
        private String customerDisplayName;
        private String description;
        private String id;
        private String name;
        private List<GetServiceProviderActionProperty> properties;
        private String resourceType;
        private String serviceProviderActionId;
        private List<String> serviceProviderServiceTypes;
        private String state;
        public Builder() {}
        public Builder(GetServiceProviderActionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.component = defaults.component;
    	      this.customerDisplayName = defaults.customerDisplayName;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.resourceType = defaults.resourceType;
    	      this.serviceProviderActionId = defaults.serviceProviderActionId;
    	      this.serviceProviderServiceTypes = defaults.serviceProviderServiceTypes;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder component(String component) {
            if (component == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "component");
            }
            this.component = component;
            return this;
        }
        @CustomType.Setter
        public Builder customerDisplayName(String customerDisplayName) {
            if (customerDisplayName == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "customerDisplayName");
            }
            this.customerDisplayName = customerDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder properties(List<GetServiceProviderActionProperty> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "properties");
            }
            this.properties = properties;
            return this;
        }
        public Builder properties(GetServiceProviderActionProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderActionId(String serviceProviderActionId) {
            if (serviceProviderActionId == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "serviceProviderActionId");
            }
            this.serviceProviderActionId = serviceProviderActionId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderServiceTypes(List<String> serviceProviderServiceTypes) {
            if (serviceProviderServiceTypes == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "serviceProviderServiceTypes");
            }
            this.serviceProviderServiceTypes = serviceProviderServiceTypes;
            return this;
        }
        public Builder serviceProviderServiceTypes(String... serviceProviderServiceTypes) {
            return serviceProviderServiceTypes(List.of(serviceProviderServiceTypes));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionResult", "state");
            }
            this.state = state;
            return this;
        }
        public GetServiceProviderActionResult build() {
            final var _resultValue = new GetServiceProviderActionResult();
            _resultValue.component = component;
            _resultValue.customerDisplayName = customerDisplayName;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.properties = properties;
            _resultValue.resourceType = resourceType;
            _resultValue.serviceProviderActionId = serviceProviderActionId;
            _resultValue.serviceProviderServiceTypes = serviceProviderServiceTypes;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
