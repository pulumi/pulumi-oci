// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DelegateAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DelegateAccessControl.outputs.GetServiceProviderActionsFilter;
import com.pulumi.oci.DelegateAccessControl.outputs.GetServiceProviderActionsServiceProviderActionSummaryCollection;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceProviderActionsResult {
    private String compartmentId;
    private @Nullable List<GetServiceProviderActionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the property
     * 
     */
    private @Nullable String name;
    /**
     * @return resourceType for which the ServiceProviderAction is applicable
     * 
     */
    private @Nullable String resourceType;
    /**
     * @return The list of service_provider_action_summary_collection.
     * 
     */
    private List<GetServiceProviderActionsServiceProviderActionSummaryCollection> serviceProviderActionSummaryCollections;
    private @Nullable List<String> serviceProviderServiceTypes;
    /**
     * @return The current lifecycle state of the Service Provider Action.
     * 
     */
    private @Nullable String state;

    private GetServiceProviderActionsResult() {}
    public String compartmentId() {
        return this.compartmentId;
    }
    public List<GetServiceProviderActionsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the property
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return resourceType for which the ServiceProviderAction is applicable
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }
    /**
     * @return The list of service_provider_action_summary_collection.
     * 
     */
    public List<GetServiceProviderActionsServiceProviderActionSummaryCollection> serviceProviderActionSummaryCollections() {
        return this.serviceProviderActionSummaryCollections;
    }
    public List<String> serviceProviderServiceTypes() {
        return this.serviceProviderServiceTypes == null ? List.of() : this.serviceProviderServiceTypes;
    }
    /**
     * @return The current lifecycle state of the Service Provider Action.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceProviderActionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private @Nullable List<GetServiceProviderActionsFilter> filters;
        private String id;
        private @Nullable String name;
        private @Nullable String resourceType;
        private List<GetServiceProviderActionsServiceProviderActionSummaryCollection> serviceProviderActionSummaryCollections;
        private @Nullable List<String> serviceProviderServiceTypes;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetServiceProviderActionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.resourceType = defaults.resourceType;
    	      this.serviceProviderActionSummaryCollections = defaults.serviceProviderActionSummaryCollections;
    	      this.serviceProviderServiceTypes = defaults.serviceProviderServiceTypes;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetServiceProviderActionsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetServiceProviderActionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(@Nullable String resourceType) {

            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderActionSummaryCollections(List<GetServiceProviderActionsServiceProviderActionSummaryCollection> serviceProviderActionSummaryCollections) {
            if (serviceProviderActionSummaryCollections == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsResult", "serviceProviderActionSummaryCollections");
            }
            this.serviceProviderActionSummaryCollections = serviceProviderActionSummaryCollections;
            return this;
        }
        public Builder serviceProviderActionSummaryCollections(GetServiceProviderActionsServiceProviderActionSummaryCollection... serviceProviderActionSummaryCollections) {
            return serviceProviderActionSummaryCollections(List.of(serviceProviderActionSummaryCollections));
        }
        @CustomType.Setter
        public Builder serviceProviderServiceTypes(@Nullable List<String> serviceProviderServiceTypes) {

            this.serviceProviderServiceTypes = serviceProviderServiceTypes;
            return this;
        }
        public Builder serviceProviderServiceTypes(String... serviceProviderServiceTypes) {
            return serviceProviderServiceTypes(List.of(serviceProviderServiceTypes));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetServiceProviderActionsResult build() {
            final var _resultValue = new GetServiceProviderActionsResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.resourceType = resourceType;
            _resultValue.serviceProviderActionSummaryCollections = serviceProviderActionSummaryCollections;
            _resultValue.serviceProviderServiceTypes = serviceProviderServiceTypes;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
