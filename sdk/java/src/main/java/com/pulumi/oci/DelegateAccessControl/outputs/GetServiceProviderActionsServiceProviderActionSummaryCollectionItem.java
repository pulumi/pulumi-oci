// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DelegateAccessControl.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DelegateAccessControl.outputs.GetServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceProviderActionsServiceProviderActionSummaryCollectionItem {
    /**
     * @return Name of the infrastructure layer associated with the Service Provider Action.
     * 
     */
    private String component;
    /**
     * @return Display Name of the Service Provider Action.
     * 
     */
    private String customerDisplayName;
    /**
     * @return Description of the Service Provider Action in terms of associated risk profile, and characteristics of the operating system commands made available to the support operator under this Service Provider Action.
     * 
     */
    private String description;
    /**
     * @return Unique Oracle assigned identifier for the Service Provider Action.
     * 
     */
    private String id;
    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    private String name;
    /**
     * @return Fine grained properties associated with the Delegation Control.
     * 
     */
    private List<GetServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty> properties;
    /**
     * @return A filter to return only resources that match the given resource type.
     * 
     */
    private String resourceType;
    /**
     * @return List of Service Provider Service Types that this Service Provider Action is applicable to.
     * 
     */
    private List<String> serviceProviderServiceTypes;
    /**
     * @return A filter to return only resources whose lifecycleState matches the given Service Provider Action lifecycleState.
     * 
     */
    private String state;

    private GetServiceProviderActionsServiceProviderActionSummaryCollectionItem() {}
    /**
     * @return Name of the infrastructure layer associated with the Service Provider Action.
     * 
     */
    public String component() {
        return this.component;
    }
    /**
     * @return Display Name of the Service Provider Action.
     * 
     */
    public String customerDisplayName() {
        return this.customerDisplayName;
    }
    /**
     * @return Description of the Service Provider Action in terms of associated risk profile, and characteristics of the operating system commands made available to the support operator under this Service Provider Action.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Unique Oracle assigned identifier for the Service Provider Action.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A filter to return only resources that match the entire name given.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Fine grained properties associated with the Delegation Control.
     * 
     */
    public List<GetServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty> properties() {
        return this.properties;
    }
    /**
     * @return A filter to return only resources that match the given resource type.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return List of Service Provider Service Types that this Service Provider Action is applicable to.
     * 
     */
    public List<String> serviceProviderServiceTypes() {
        return this.serviceProviderServiceTypes;
    }
    /**
     * @return A filter to return only resources whose lifecycleState matches the given Service Provider Action lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceProviderActionsServiceProviderActionSummaryCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String component;
        private String customerDisplayName;
        private String description;
        private String id;
        private String name;
        private List<GetServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty> properties;
        private String resourceType;
        private List<String> serviceProviderServiceTypes;
        private String state;
        public Builder() {}
        public Builder(GetServiceProviderActionsServiceProviderActionSummaryCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.component = defaults.component;
    	      this.customerDisplayName = defaults.customerDisplayName;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.resourceType = defaults.resourceType;
    	      this.serviceProviderServiceTypes = defaults.serviceProviderServiceTypes;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder component(String component) {
            if (component == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "component");
            }
            this.component = component;
            return this;
        }
        @CustomType.Setter
        public Builder customerDisplayName(String customerDisplayName) {
            if (customerDisplayName == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "customerDisplayName");
            }
            this.customerDisplayName = customerDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder properties(List<GetServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "properties");
            }
            this.properties = properties;
            return this;
        }
        public Builder properties(GetServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderServiceTypes(List<String> serviceProviderServiceTypes) {
            if (serviceProviderServiceTypes == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "serviceProviderServiceTypes");
            }
            this.serviceProviderServiceTypes = serviceProviderServiceTypes;
            return this;
        }
        public Builder serviceProviderServiceTypes(String... serviceProviderServiceTypes) {
            return serviceProviderServiceTypes(List.of(serviceProviderServiceTypes));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetServiceProviderActionsServiceProviderActionSummaryCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        public GetServiceProviderActionsServiceProviderActionSummaryCollectionItem build() {
            final var _resultValue = new GetServiceProviderActionsServiceProviderActionSummaryCollectionItem();
            _resultValue.component = component;
            _resultValue.customerDisplayName = customerDisplayName;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.properties = properties;
            _resultValue.resourceType = resourceType;
            _resultValue.serviceProviderServiceTypes = serviceProviderServiceTypes;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
