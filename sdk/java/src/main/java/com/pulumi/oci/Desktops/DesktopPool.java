// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Desktops.DesktopPoolArgs;
import com.pulumi.oci.Desktops.inputs.DesktopPoolState;
import com.pulumi.oci.Desktops.outputs.DesktopPoolAvailabilityPolicy;
import com.pulumi.oci.Desktops.outputs.DesktopPoolDevicePolicy;
import com.pulumi.oci.Desktops.outputs.DesktopPoolImage;
import com.pulumi.oci.Desktops.outputs.DesktopPoolNetworkConfiguration;
import com.pulumi.oci.Desktops.outputs.DesktopPoolPrivateAccessDetails;
import com.pulumi.oci.Desktops.outputs.DesktopPoolSessionLifecycleActions;
import com.pulumi.oci.Desktops.outputs.DesktopPoolShapeConfig;
import com.pulumi.oci.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource provides the Desktop Pool resource in Oracle Cloud Infrastructure Desktops service.
 * 
 * Creates a desktop pool with the given configuration parameters.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.Desktops.DesktopPool;
 * import com.pulumi.oci.Desktops.DesktopPoolArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolAvailabilityPolicyArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolAvailabilityPolicyStartScheduleArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolAvailabilityPolicyStopScheduleArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolDevicePolicyArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolImageArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolNetworkConfigurationArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolShapeConfigArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolPrivateAccessDetailsArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolSessionLifecycleActionsArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolSessionLifecycleActionsDisconnectArgs;
 * import com.pulumi.oci.Desktops.inputs.DesktopPoolSessionLifecycleActionsInactivityArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testDesktopPool = new DesktopPool("testDesktopPool", DesktopPoolArgs.builder()
 *             .arePrivilegedUsers(desktopPoolArePrivilegedUsers)
 *             .availabilityDomain(desktopPoolAvailabilityDomain)
 *             .availabilityPolicy(DesktopPoolAvailabilityPolicyArgs.builder()
 *                 .startSchedule(DesktopPoolAvailabilityPolicyStartScheduleArgs.builder()
 *                     .cronExpression("0 10 8 ? * 2")
 *                     .timezone("America/Denver")
 *                     .build())
 *                 .stopSchedule(DesktopPoolAvailabilityPolicyStopScheduleArgs.builder()
 *                     .cronExpression("0 20 18 ? * 6")
 *                     .timezone("America/Denver")
 *                     .build())
 *                 .build())
 *             .compartmentId(compartmentId)
 *             .contactDetails(desktopPoolContactDetails)
 *             .devicePolicy(DesktopPoolDevicePolicyArgs.builder()
 *                 .audioMode(desktopPoolDevicePolicyAudioMode)
 *                 .cdmMode(desktopPoolDevicePolicyCdmMode)
 *                 .clipboardMode(desktopPoolDevicePolicyClipboardMode)
 *                 .isDisplayEnabled(desktopPoolDevicePolicyIsDisplayEnabled)
 *                 .isKeyboardEnabled(desktopPoolDevicePolicyIsKeyboardEnabled)
 *                 .isPointerEnabled(desktopPoolDevicePolicyIsPointerEnabled)
 *                 .isPrintingEnabled(desktopPoolDevicePolicyIsPrintingEnabled)
 *                 .build())
 *             .displayName(desktopPoolDisplayName)
 *             .image(DesktopPoolImageArgs.builder()
 *                 .imageId(testImage.id())
 *                 .imageName(desktopPoolImageImageName)
 *                 .operatingSystem(desktopPoolImageOperatingSystem)
 *                 .build())
 *             .isStorageEnabled(desktopPoolIsStorageEnabled)
 *             .maximumSize(desktopPoolMaximumSize)
 *             .networkConfiguration(DesktopPoolNetworkConfigurationArgs.builder()
 *                 .subnetId(testSubnet.id())
 *                 .vcnId(testVcn.id())
 *                 .build())
 *             .shapeName("VM.Standard.E4.Flex")
 *             .standbySize(desktopPoolStandbySize)
 *             .storageBackupPolicyId("ocid1.volumebackuppolicy.oc1.xxxxyyyyyzzzz")
 *             .storageSizeInGbs(desktopPoolStorageSizeInGbs)
 *             .areVolumesPreserved(desktopPoolAreVolumesPreserved)
 *             .definedTags(Map.of("Operations.CostCenter", "42"))
 *             .description(desktopPoolDescription)
 *             .freeformTags(Map.of("Department", "Finance"))
 *             .nsgIds(desktopPoolNsgIds)
 *             .shapeConfig(DesktopPoolShapeConfigArgs.builder()
 *                 .baselineOcpuUtilization(desktopPoolShapeConfigBaselineOcpuUtilization)
 *                 .memoryInGbs(desktopPoolShapeConfigMemoryInGbs)
 *                 .ocpus(desktopPoolShapeConfigOcpus)
 *                 .build())
 *             .privateAccessDetails(DesktopPoolPrivateAccessDetailsArgs.builder()
 *                 .subnetId(testSubnet.id())
 *                 .nsgIds(desktopPoolPrivateAccessDetailsNsgIds)
 *                 .privateIp(desktopPoolPrivateAccessDetailsPrivateIp)
 *                 .build())
 *             .sessionLifecycleActions(DesktopPoolSessionLifecycleActionsArgs.builder()
 *                 .disconnect(DesktopPoolSessionLifecycleActionsDisconnectArgs.builder()
 *                     .action("STOP")
 *                     .gracePeriodInMinutes(desktopPoolSessionLifecycleActionsDisconnectGracePeriodInMinutes)
 *                     .build())
 *                 .inactivity(DesktopPoolSessionLifecycleActionsInactivityArgs.builder()
 *                     .action("DISCONNECT")
 *                     .gracePeriodInMinutes(desktopPoolSessionLifecycleActionsInactivityGracePeriodInMinutes)
 *                     .build())
 *                 .build())
 *             .timeStartScheduled(desktopPoolTimeStartScheduled)
 *             .timeStopScheduled(desktopPoolTimeStopScheduled)
 *             .useDedicatedVmHost(desktopPoolUseDedicatedVmHost)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * DesktopPools can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:Desktops/desktopPool:DesktopPool test_desktop_pool &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:Desktops/desktopPool:DesktopPool")
public class DesktopPool extends com.pulumi.resources.CustomResource {
    /**
     * The number of active desktops in the desktop pool.
     * 
     */
    @Export(name="activeDesktops", refs={Integer.class}, tree="[0]")
    private Output<Integer> activeDesktops;

    /**
     * @return The number of active desktops in the desktop pool.
     * 
     */
    public Output<Integer> activeDesktops() {
        return this.activeDesktops;
    }
    /**
     * Indicates whether desktop pool users have administrative privileges on their desktop.
     * 
     */
    @Export(name="arePrivilegedUsers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> arePrivilegedUsers;

    /**
     * @return Indicates whether desktop pool users have administrative privileges on their desktop.
     * 
     */
    public Output<Boolean> arePrivilegedUsers() {
        return this.arePrivilegedUsers;
    }
    /**
     * (Updatable) Indicates whether the volumes are preserved when a desktop pool is deleted. Default value is false.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="areVolumesPreserved", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> areVolumesPreserved;

    /**
     * @return (Updatable) Indicates whether the volumes are preserved when a desktop pool is deleted. Default value is false.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<Optional<Boolean>> areVolumesPreserved() {
        return Codegen.optional(this.areVolumesPreserved);
    }
    /**
     * The availability domain of the desktop pool.
     * 
     */
    @Export(name="availabilityDomain", refs={String.class}, tree="[0]")
    private Output<String> availabilityDomain;

    /**
     * @return The availability domain of the desktop pool.
     * 
     */
    public Output<String> availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool. Use `availability_policy { }` to not set a schedule.
     * 
     */
    @Export(name="availabilityPolicy", refs={DesktopPoolAvailabilityPolicy.class}, tree="[0]")
    private Output<DesktopPoolAvailabilityPolicy> availabilityPolicy;

    /**
     * @return (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool. Use `availability_policy { }` to not set a schedule.
     * 
     */
    public Output<DesktopPoolAvailabilityPolicy> availabilityPolicy() {
        return this.availabilityPolicy;
    }
    /**
     * (Updatable) The OCID of the compartment which will contain the desktop pool.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment which will contain the desktop pool.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
     * 
     */
    @Export(name="contactDetails", refs={String.class}, tree="[0]")
    private Output<String> contactDetails;

    /**
     * @return (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
     * 
     */
    public Output<String> contactDetails() {
        return this.contactDetails;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Output<Map<String,String>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
     * 
     */
    @Export(name="devicePolicy", refs={DesktopPoolDevicePolicy.class}, tree="[0]")
    private Output<DesktopPoolDevicePolicy> devicePolicy;

    /**
     * @return (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
     * 
     */
    public Output<DesktopPoolDevicePolicy> devicePolicy() {
        return this.devicePolicy;
    }
    /**
     * (Updatable) A user friendly display name. Avoid entering confidential information.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return (Updatable) A user friendly display name. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Output<Map<String,String>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * Provides information about the desktop image.
     * 
     */
    @Export(name="image", refs={DesktopPoolImage.class}, tree="[0]")
    private Output<DesktopPoolImage> image;

    /**
     * @return Provides information about the desktop image.
     * 
     */
    public Output<DesktopPoolImage> image() {
        return this.image;
    }
    /**
     * Indicates whether storage is enabled for the desktop pool.
     * 
     */
    @Export(name="isStorageEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isStorageEnabled;

    /**
     * @return Indicates whether storage is enabled for the desktop pool.
     * 
     */
    public Output<Boolean> isStorageEnabled() {
        return this.isStorageEnabled;
    }
    /**
     * (Updatable) The maximum number of desktops permitted in the desktop pool.
     * 
     */
    @Export(name="maximumSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maximumSize;

    /**
     * @return (Updatable) The maximum number of desktops permitted in the desktop pool.
     * 
     */
    public Output<Integer> maximumSize() {
        return this.maximumSize;
    }
    /**
     * Provides information about the network configuration of the desktop pool.
     * 
     */
    @Export(name="networkConfiguration", refs={DesktopPoolNetworkConfiguration.class}, tree="[0]")
    private Output<DesktopPoolNetworkConfiguration> networkConfiguration;

    /**
     * @return Provides information about the network configuration of the desktop pool.
     * 
     */
    public Output<DesktopPoolNetworkConfiguration> networkConfiguration() {
        return this.networkConfiguration;
    }
    /**
     * A list of network security groups for the private access.
     * 
     */
    @Export(name="nsgIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> nsgIds;

    /**
     * @return A list of network security groups for the private access.
     * 
     */
    public Output<Optional<List<String>>> nsgIds() {
        return Codegen.optional(this.nsgIds);
    }
    /**
     * The details of the desktop&#39;s private access network connectivity to be set up for the desktop pool.
     * 
     */
    @Export(name="privateAccessDetails", refs={DesktopPoolPrivateAccessDetails.class}, tree="[0]")
    private Output<DesktopPoolPrivateAccessDetails> privateAccessDetails;

    /**
     * @return The details of the desktop&#39;s private access network connectivity to be set up for the desktop pool.
     * 
     */
    public Output<DesktopPoolPrivateAccessDetails> privateAccessDetails() {
        return this.privateAccessDetails;
    }
    /**
     * The details of action to be triggered in case of inactivity or disconnect
     * 
     */
    @Export(name="sessionLifecycleActions", refs={DesktopPoolSessionLifecycleActions.class}, tree="[0]")
    private Output</* @Nullable */ DesktopPoolSessionLifecycleActions> sessionLifecycleActions;

    /**
     * @return The details of action to be triggered in case of inactivity or disconnect
     * 
     */
    public Output<Optional<DesktopPoolSessionLifecycleActions>> sessionLifecycleActions() {
        return Codegen.optional(this.sessionLifecycleActions);
    }
    /**
     * The compute instance shape configuration requested for each desktop in the desktop pool.
     * 
     */
    @Export(name="shapeConfig", refs={DesktopPoolShapeConfig.class}, tree="[0]")
    private Output<DesktopPoolShapeConfig> shapeConfig;

    /**
     * @return The compute instance shape configuration requested for each desktop in the desktop pool.
     * 
     */
    public Output<DesktopPoolShapeConfig> shapeConfig() {
        return this.shapeConfig;
    }
    /**
     * The shape of the desktop pool.
     * 
     */
    @Export(name="shapeName", refs={String.class}, tree="[0]")
    private Output<String> shapeName;

    /**
     * @return The shape of the desktop pool.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }
    /**
     * (Updatable) The maximum number of standby desktops available in the desktop pool.
     * 
     */
    @Export(name="standbySize", refs={Integer.class}, tree="[0]")
    private Output<Integer> standbySize;

    /**
     * @return (Updatable) The maximum number of standby desktops available in the desktop pool.
     * 
     */
    public Output<Integer> standbySize() {
        return this.standbySize;
    }
    /**
     * The current state of the desktop pool.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the desktop pool.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The backup policy OCID of the storage.
     * 
     */
    @Export(name="storageBackupPolicyId", refs={String.class}, tree="[0]")
    private Output<String> storageBackupPolicyId;

    /**
     * @return The backup policy OCID of the storage.
     * 
     */
    public Output<String> storageBackupPolicyId() {
        return this.storageBackupPolicyId;
    }
    /**
     * The size in GBs of the storage for the desktop pool.
     * 
     */
    @Export(name="storageSizeInGbs", refs={Integer.class}, tree="[0]")
    private Output<Integer> storageSizeInGbs;

    /**
     * @return The size in GBs of the storage for the desktop pool.
     * 
     */
    public Output<Integer> storageSizeInGbs() {
        return this.storageSizeInGbs;
    }
    /**
     * The date and time the resource was created.
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output<String> timeCreated;

    /**
     * @return The date and time the resource was created.
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * (Updatable) The start time of the desktop pool.
     * 
     */
    @Export(name="timeStartScheduled", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeStartScheduled;

    /**
     * @return (Updatable) The start time of the desktop pool.
     * 
     */
    public Output<Optional<String>> timeStartScheduled() {
        return Codegen.optional(this.timeStartScheduled);
    }
    /**
     * (Updatable) The stop time of the desktop pool.
     * 
     */
    @Export(name="timeStopScheduled", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timeStopScheduled;

    /**
     * @return (Updatable) The stop time of the desktop pool.
     * 
     */
    public Output<Optional<String>> timeStopScheduled() {
        return Codegen.optional(this.timeStopScheduled);
    }
    /**
     * Indicates whether the desktop pool uses dedicated virtual machine hosts.
     * 
     */
    @Export(name="useDedicatedVmHost", refs={String.class}, tree="[0]")
    private Output<String> useDedicatedVmHost;

    /**
     * @return Indicates whether the desktop pool uses dedicated virtual machine hosts.
     * 
     */
    public Output<String> useDedicatedVmHost() {
        return this.useDedicatedVmHost;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DesktopPool(java.lang.String name) {
        this(name, DesktopPoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DesktopPool(java.lang.String name, DesktopPoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DesktopPool(java.lang.String name, DesktopPoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Desktops/desktopPool:DesktopPool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DesktopPool(java.lang.String name, Output<java.lang.String> id, @Nullable DesktopPoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:Desktops/desktopPool:DesktopPool", name, state, makeResourceOptions(options, id), false);
    }

    private static DesktopPoolArgs makeArgs(DesktopPoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DesktopPoolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DesktopPool get(java.lang.String name, Output<java.lang.String> id, @Nullable DesktopPoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DesktopPool(name, id, state, options);
    }
}
