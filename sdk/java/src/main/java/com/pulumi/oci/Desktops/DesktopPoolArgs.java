// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Desktops.inputs.DesktopPoolAvailabilityPolicyArgs;
import com.pulumi.oci.Desktops.inputs.DesktopPoolDevicePolicyArgs;
import com.pulumi.oci.Desktops.inputs.DesktopPoolImageArgs;
import com.pulumi.oci.Desktops.inputs.DesktopPoolNetworkConfigurationArgs;
import com.pulumi.oci.Desktops.inputs.DesktopPoolPrivateAccessDetailsArgs;
import com.pulumi.oci.Desktops.inputs.DesktopPoolSessionLifecycleActionsArgs;
import com.pulumi.oci.Desktops.inputs.DesktopPoolShapeConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DesktopPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final DesktopPoolArgs Empty = new DesktopPoolArgs();

    /**
     * Indicates whether desktop pool users have administrative privileges on their desktop.
     * 
     */
    @Import(name="arePrivilegedUsers", required=true)
    private Output<Boolean> arePrivilegedUsers;

    /**
     * @return Indicates whether desktop pool users have administrative privileges on their desktop.
     * 
     */
    public Output<Boolean> arePrivilegedUsers() {
        return this.arePrivilegedUsers;
    }

    /**
     * (Updatable) Indicates whether the volumes are preserved when a desktop pool is deleted. Default value is false.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="areVolumesPreserved")
    private @Nullable Output<Boolean> areVolumesPreserved;

    /**
     * @return (Updatable) Indicates whether the volumes are preserved when a desktop pool is deleted. Default value is false.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<Boolean>> areVolumesPreserved() {
        return Optional.ofNullable(this.areVolumesPreserved);
    }

    /**
     * The availability domain of the desktop pool.
     * 
     */
    @Import(name="availabilityDomain", required=true)
    private Output<String> availabilityDomain;

    /**
     * @return The availability domain of the desktop pool.
     * 
     */
    public Output<String> availabilityDomain() {
        return this.availabilityDomain;
    }

    /**
     * (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool. Use `availability_policy { }` to not set a schedule.
     * 
     */
    @Import(name="availabilityPolicy", required=true)
    private Output<DesktopPoolAvailabilityPolicyArgs> availabilityPolicy;

    /**
     * @return (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool. Use `availability_policy { }` to not set a schedule.
     * 
     */
    public Output<DesktopPoolAvailabilityPolicyArgs> availabilityPolicy() {
        return this.availabilityPolicy;
    }

    /**
     * (Updatable) The OCID of the compartment which will contain the desktop pool.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment which will contain the desktop pool.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
     * 
     */
    @Import(name="contactDetails", required=true)
    private Output<String> contactDetails;

    /**
     * @return (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
     * 
     */
    public Output<String> contactDetails() {
        return this.contactDetails;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,String>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
     * 
     */
    @Import(name="devicePolicy", required=true)
    private Output<DesktopPoolDevicePolicyArgs> devicePolicy;

    /**
     * @return (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
     * 
     */
    public Output<DesktopPoolDevicePolicyArgs> devicePolicy() {
        return this.devicePolicy;
    }

    /**
     * (Updatable) A user friendly display name. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return (Updatable) A user friendly display name. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,String>> freeformTags;

    /**
     * @return (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Optional<Output<Map<String,String>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * Provides information about the desktop image.
     * 
     */
    @Import(name="image", required=true)
    private Output<DesktopPoolImageArgs> image;

    /**
     * @return Provides information about the desktop image.
     * 
     */
    public Output<DesktopPoolImageArgs> image() {
        return this.image;
    }

    /**
     * Indicates whether storage is enabled for the desktop pool.
     * 
     */
    @Import(name="isStorageEnabled", required=true)
    private Output<Boolean> isStorageEnabled;

    /**
     * @return Indicates whether storage is enabled for the desktop pool.
     * 
     */
    public Output<Boolean> isStorageEnabled() {
        return this.isStorageEnabled;
    }

    /**
     * (Updatable) The maximum number of desktops permitted in the desktop pool.
     * 
     */
    @Import(name="maximumSize", required=true)
    private Output<Integer> maximumSize;

    /**
     * @return (Updatable) The maximum number of desktops permitted in the desktop pool.
     * 
     */
    public Output<Integer> maximumSize() {
        return this.maximumSize;
    }

    /**
     * Provides information about the network configuration of the desktop pool.
     * 
     */
    @Import(name="networkConfiguration", required=true)
    private Output<DesktopPoolNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Provides information about the network configuration of the desktop pool.
     * 
     */
    public Output<DesktopPoolNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * A list of network security groups for the private access.
     * 
     */
    @Import(name="nsgIds")
    private @Nullable Output<List<String>> nsgIds;

    /**
     * @return A list of network security groups for the private access.
     * 
     */
    public Optional<Output<List<String>>> nsgIds() {
        return Optional.ofNullable(this.nsgIds);
    }

    /**
     * The details of the desktop&#39;s private access network connectivity to be set up for the desktop pool.
     * 
     */
    @Import(name="privateAccessDetails")
    private @Nullable Output<DesktopPoolPrivateAccessDetailsArgs> privateAccessDetails;

    /**
     * @return The details of the desktop&#39;s private access network connectivity to be set up for the desktop pool.
     * 
     */
    public Optional<Output<DesktopPoolPrivateAccessDetailsArgs>> privateAccessDetails() {
        return Optional.ofNullable(this.privateAccessDetails);
    }

    /**
     * The details of action to be triggered in case of inactivity or disconnect
     * 
     */
    @Import(name="sessionLifecycleActions")
    private @Nullable Output<DesktopPoolSessionLifecycleActionsArgs> sessionLifecycleActions;

    /**
     * @return The details of action to be triggered in case of inactivity or disconnect
     * 
     */
    public Optional<Output<DesktopPoolSessionLifecycleActionsArgs>> sessionLifecycleActions() {
        return Optional.ofNullable(this.sessionLifecycleActions);
    }

    /**
     * The compute instance shape configuration requested for each desktop in the desktop pool.
     * 
     */
    @Import(name="shapeConfig")
    private @Nullable Output<DesktopPoolShapeConfigArgs> shapeConfig;

    /**
     * @return The compute instance shape configuration requested for each desktop in the desktop pool.
     * 
     */
    public Optional<Output<DesktopPoolShapeConfigArgs>> shapeConfig() {
        return Optional.ofNullable(this.shapeConfig);
    }

    /**
     * The shape of the desktop pool.
     * 
     */
    @Import(name="shapeName", required=true)
    private Output<String> shapeName;

    /**
     * @return The shape of the desktop pool.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }

    /**
     * (Updatable) The maximum number of standby desktops available in the desktop pool.
     * 
     */
    @Import(name="standbySize", required=true)
    private Output<Integer> standbySize;

    /**
     * @return (Updatable) The maximum number of standby desktops available in the desktop pool.
     * 
     */
    public Output<Integer> standbySize() {
        return this.standbySize;
    }

    /**
     * The backup policy OCID of the storage.
     * 
     */
    @Import(name="storageBackupPolicyId", required=true)
    private Output<String> storageBackupPolicyId;

    /**
     * @return The backup policy OCID of the storage.
     * 
     */
    public Output<String> storageBackupPolicyId() {
        return this.storageBackupPolicyId;
    }

    /**
     * The size in GBs of the storage for the desktop pool.
     * 
     */
    @Import(name="storageSizeInGbs", required=true)
    private Output<Integer> storageSizeInGbs;

    /**
     * @return The size in GBs of the storage for the desktop pool.
     * 
     */
    public Output<Integer> storageSizeInGbs() {
        return this.storageSizeInGbs;
    }

    /**
     * (Updatable) The start time of the desktop pool.
     * 
     */
    @Import(name="timeStartScheduled")
    private @Nullable Output<String> timeStartScheduled;

    /**
     * @return (Updatable) The start time of the desktop pool.
     * 
     */
    public Optional<Output<String>> timeStartScheduled() {
        return Optional.ofNullable(this.timeStartScheduled);
    }

    /**
     * (Updatable) The stop time of the desktop pool.
     * 
     */
    @Import(name="timeStopScheduled")
    private @Nullable Output<String> timeStopScheduled;

    /**
     * @return (Updatable) The stop time of the desktop pool.
     * 
     */
    public Optional<Output<String>> timeStopScheduled() {
        return Optional.ofNullable(this.timeStopScheduled);
    }

    /**
     * Indicates whether the desktop pool uses dedicated virtual machine hosts.
     * 
     */
    @Import(name="useDedicatedVmHost")
    private @Nullable Output<String> useDedicatedVmHost;

    /**
     * @return Indicates whether the desktop pool uses dedicated virtual machine hosts.
     * 
     */
    public Optional<Output<String>> useDedicatedVmHost() {
        return Optional.ofNullable(this.useDedicatedVmHost);
    }

    private DesktopPoolArgs() {}

    private DesktopPoolArgs(DesktopPoolArgs $) {
        this.arePrivilegedUsers = $.arePrivilegedUsers;
        this.areVolumesPreserved = $.areVolumesPreserved;
        this.availabilityDomain = $.availabilityDomain;
        this.availabilityPolicy = $.availabilityPolicy;
        this.compartmentId = $.compartmentId;
        this.contactDetails = $.contactDetails;
        this.definedTags = $.definedTags;
        this.description = $.description;
        this.devicePolicy = $.devicePolicy;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.image = $.image;
        this.isStorageEnabled = $.isStorageEnabled;
        this.maximumSize = $.maximumSize;
        this.networkConfiguration = $.networkConfiguration;
        this.nsgIds = $.nsgIds;
        this.privateAccessDetails = $.privateAccessDetails;
        this.sessionLifecycleActions = $.sessionLifecycleActions;
        this.shapeConfig = $.shapeConfig;
        this.shapeName = $.shapeName;
        this.standbySize = $.standbySize;
        this.storageBackupPolicyId = $.storageBackupPolicyId;
        this.storageSizeInGbs = $.storageSizeInGbs;
        this.timeStartScheduled = $.timeStartScheduled;
        this.timeStopScheduled = $.timeStopScheduled;
        this.useDedicatedVmHost = $.useDedicatedVmHost;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DesktopPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DesktopPoolArgs $;

        public Builder() {
            $ = new DesktopPoolArgs();
        }

        public Builder(DesktopPoolArgs defaults) {
            $ = new DesktopPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arePrivilegedUsers Indicates whether desktop pool users have administrative privileges on their desktop.
         * 
         * @return builder
         * 
         */
        public Builder arePrivilegedUsers(Output<Boolean> arePrivilegedUsers) {
            $.arePrivilegedUsers = arePrivilegedUsers;
            return this;
        }

        /**
         * @param arePrivilegedUsers Indicates whether desktop pool users have administrative privileges on their desktop.
         * 
         * @return builder
         * 
         */
        public Builder arePrivilegedUsers(Boolean arePrivilegedUsers) {
            return arePrivilegedUsers(Output.of(arePrivilegedUsers));
        }

        /**
         * @param areVolumesPreserved (Updatable) Indicates whether the volumes are preserved when a desktop pool is deleted. Default value is false.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder areVolumesPreserved(@Nullable Output<Boolean> areVolumesPreserved) {
            $.areVolumesPreserved = areVolumesPreserved;
            return this;
        }

        /**
         * @param areVolumesPreserved (Updatable) Indicates whether the volumes are preserved when a desktop pool is deleted. Default value is false.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder areVolumesPreserved(Boolean areVolumesPreserved) {
            return areVolumesPreserved(Output.of(areVolumesPreserved));
        }

        /**
         * @param availabilityDomain The availability domain of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain The availability domain of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param availabilityPolicy (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool. Use `availability_policy { }` to not set a schedule.
         * 
         * @return builder
         * 
         */
        public Builder availabilityPolicy(Output<DesktopPoolAvailabilityPolicyArgs> availabilityPolicy) {
            $.availabilityPolicy = availabilityPolicy;
            return this;
        }

        /**
         * @param availabilityPolicy (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool. Use `availability_policy { }` to not set a schedule.
         * 
         * @return builder
         * 
         */
        public Builder availabilityPolicy(DesktopPoolAvailabilityPolicyArgs availabilityPolicy) {
            return availabilityPolicy(Output.of(availabilityPolicy));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment which will contain the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment which will contain the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param contactDetails (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder contactDetails(Output<String> contactDetails) {
            $.contactDetails = contactDetails;
            return this;
        }

        /**
         * @param contactDetails (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder contactDetails(String contactDetails) {
            return contactDetails(Output.of(contactDetails));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,String>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,String> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param description (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param devicePolicy (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
         * 
         * @return builder
         * 
         */
        public Builder devicePolicy(Output<DesktopPoolDevicePolicyArgs> devicePolicy) {
            $.devicePolicy = devicePolicy;
            return this;
        }

        /**
         * @param devicePolicy (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
         * 
         * @return builder
         * 
         */
        public Builder devicePolicy(DesktopPoolDevicePolicyArgs devicePolicy) {
            return devicePolicy(Output.of(devicePolicy));
        }

        /**
         * @param displayName (Updatable) A user friendly display name. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user friendly display name. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,String>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,String> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param image Provides information about the desktop image.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<DesktopPoolImageArgs> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Provides information about the desktop image.
         * 
         * @return builder
         * 
         */
        public Builder image(DesktopPoolImageArgs image) {
            return image(Output.of(image));
        }

        /**
         * @param isStorageEnabled Indicates whether storage is enabled for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder isStorageEnabled(Output<Boolean> isStorageEnabled) {
            $.isStorageEnabled = isStorageEnabled;
            return this;
        }

        /**
         * @param isStorageEnabled Indicates whether storage is enabled for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder isStorageEnabled(Boolean isStorageEnabled) {
            return isStorageEnabled(Output.of(isStorageEnabled));
        }

        /**
         * @param maximumSize (Updatable) The maximum number of desktops permitted in the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder maximumSize(Output<Integer> maximumSize) {
            $.maximumSize = maximumSize;
            return this;
        }

        /**
         * @param maximumSize (Updatable) The maximum number of desktops permitted in the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder maximumSize(Integer maximumSize) {
            return maximumSize(Output.of(maximumSize));
        }

        /**
         * @param networkConfiguration Provides information about the network configuration of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(Output<DesktopPoolNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Provides information about the network configuration of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(DesktopPoolNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param nsgIds A list of network security groups for the private access.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(@Nullable Output<List<String>> nsgIds) {
            $.nsgIds = nsgIds;
            return this;
        }

        /**
         * @param nsgIds A list of network security groups for the private access.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(List<String> nsgIds) {
            return nsgIds(Output.of(nsgIds));
        }

        /**
         * @param nsgIds A list of network security groups for the private access.
         * 
         * @return builder
         * 
         */
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }

        /**
         * @param privateAccessDetails The details of the desktop&#39;s private access network connectivity to be set up for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder privateAccessDetails(@Nullable Output<DesktopPoolPrivateAccessDetailsArgs> privateAccessDetails) {
            $.privateAccessDetails = privateAccessDetails;
            return this;
        }

        /**
         * @param privateAccessDetails The details of the desktop&#39;s private access network connectivity to be set up for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder privateAccessDetails(DesktopPoolPrivateAccessDetailsArgs privateAccessDetails) {
            return privateAccessDetails(Output.of(privateAccessDetails));
        }

        /**
         * @param sessionLifecycleActions The details of action to be triggered in case of inactivity or disconnect
         * 
         * @return builder
         * 
         */
        public Builder sessionLifecycleActions(@Nullable Output<DesktopPoolSessionLifecycleActionsArgs> sessionLifecycleActions) {
            $.sessionLifecycleActions = sessionLifecycleActions;
            return this;
        }

        /**
         * @param sessionLifecycleActions The details of action to be triggered in case of inactivity or disconnect
         * 
         * @return builder
         * 
         */
        public Builder sessionLifecycleActions(DesktopPoolSessionLifecycleActionsArgs sessionLifecycleActions) {
            return sessionLifecycleActions(Output.of(sessionLifecycleActions));
        }

        /**
         * @param shapeConfig The compute instance shape configuration requested for each desktop in the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(@Nullable Output<DesktopPoolShapeConfigArgs> shapeConfig) {
            $.shapeConfig = shapeConfig;
            return this;
        }

        /**
         * @param shapeConfig The compute instance shape configuration requested for each desktop in the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(DesktopPoolShapeConfigArgs shapeConfig) {
            return shapeConfig(Output.of(shapeConfig));
        }

        /**
         * @param shapeName The shape of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName The shape of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        /**
         * @param standbySize (Updatable) The maximum number of standby desktops available in the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder standbySize(Output<Integer> standbySize) {
            $.standbySize = standbySize;
            return this;
        }

        /**
         * @param standbySize (Updatable) The maximum number of standby desktops available in the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder standbySize(Integer standbySize) {
            return standbySize(Output.of(standbySize));
        }

        /**
         * @param storageBackupPolicyId The backup policy OCID of the storage.
         * 
         * @return builder
         * 
         */
        public Builder storageBackupPolicyId(Output<String> storageBackupPolicyId) {
            $.storageBackupPolicyId = storageBackupPolicyId;
            return this;
        }

        /**
         * @param storageBackupPolicyId The backup policy OCID of the storage.
         * 
         * @return builder
         * 
         */
        public Builder storageBackupPolicyId(String storageBackupPolicyId) {
            return storageBackupPolicyId(Output.of(storageBackupPolicyId));
        }

        /**
         * @param storageSizeInGbs The size in GBs of the storage for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeInGbs(Output<Integer> storageSizeInGbs) {
            $.storageSizeInGbs = storageSizeInGbs;
            return this;
        }

        /**
         * @param storageSizeInGbs The size in GBs of the storage for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeInGbs(Integer storageSizeInGbs) {
            return storageSizeInGbs(Output.of(storageSizeInGbs));
        }

        /**
         * @param timeStartScheduled (Updatable) The start time of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder timeStartScheduled(@Nullable Output<String> timeStartScheduled) {
            $.timeStartScheduled = timeStartScheduled;
            return this;
        }

        /**
         * @param timeStartScheduled (Updatable) The start time of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder timeStartScheduled(String timeStartScheduled) {
            return timeStartScheduled(Output.of(timeStartScheduled));
        }

        /**
         * @param timeStopScheduled (Updatable) The stop time of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder timeStopScheduled(@Nullable Output<String> timeStopScheduled) {
            $.timeStopScheduled = timeStopScheduled;
            return this;
        }

        /**
         * @param timeStopScheduled (Updatable) The stop time of the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder timeStopScheduled(String timeStopScheduled) {
            return timeStopScheduled(Output.of(timeStopScheduled));
        }

        /**
         * @param useDedicatedVmHost Indicates whether the desktop pool uses dedicated virtual machine hosts.
         * 
         * @return builder
         * 
         */
        public Builder useDedicatedVmHost(@Nullable Output<String> useDedicatedVmHost) {
            $.useDedicatedVmHost = useDedicatedVmHost;
            return this;
        }

        /**
         * @param useDedicatedVmHost Indicates whether the desktop pool uses dedicated virtual machine hosts.
         * 
         * @return builder
         * 
         */
        public Builder useDedicatedVmHost(String useDedicatedVmHost) {
            return useDedicatedVmHost(Output.of(useDedicatedVmHost));
        }

        public DesktopPoolArgs build() {
            if ($.arePrivilegedUsers == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "arePrivilegedUsers");
            }
            if ($.availabilityDomain == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "availabilityDomain");
            }
            if ($.availabilityPolicy == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "availabilityPolicy");
            }
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "compartmentId");
            }
            if ($.contactDetails == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "contactDetails");
            }
            if ($.devicePolicy == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "devicePolicy");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "displayName");
            }
            if ($.image == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "image");
            }
            if ($.isStorageEnabled == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "isStorageEnabled");
            }
            if ($.maximumSize == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "maximumSize");
            }
            if ($.networkConfiguration == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "networkConfiguration");
            }
            if ($.shapeName == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "shapeName");
            }
            if ($.standbySize == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "standbySize");
            }
            if ($.storageBackupPolicyId == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "storageBackupPolicyId");
            }
            if ($.storageSizeInGbs == null) {
                throw new MissingRequiredPropertyException("DesktopPoolArgs", "storageSizeInGbs");
            }
            return $;
        }
    }

}
