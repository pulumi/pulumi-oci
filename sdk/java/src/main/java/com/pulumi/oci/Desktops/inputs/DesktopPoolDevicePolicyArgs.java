// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class DesktopPoolDevicePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DesktopPoolDevicePolicyArgs Empty = new DesktopPoolDevicePolicyArgs();

    /**
     * (Updatable) The audio mode. NONE: No access to the local audio devices is permitted. TODESKTOP: The user may record audio on their desktop.  FROMDESKTOP: The user may play audio on their desktop. FULL: The user may play and record audio on their desktop.
     * 
     */
    @Import(name="audioMode", required=true)
    private Output<String> audioMode;

    /**
     * @return (Updatable) The audio mode. NONE: No access to the local audio devices is permitted. TODESKTOP: The user may record audio on their desktop.  FROMDESKTOP: The user may play audio on their desktop. FULL: The user may play and record audio on their desktop.
     * 
     */
    public Output<String> audioMode() {
        return this.audioMode;
    }

    /**
     * (Updatable) The client local drive access mode. NONE: No access to local drives permitted. READONLY: The user may read from local drives on their desktop. FULL: The user may read from and write to their local drives on their desktop.
     * 
     */
    @Import(name="cdmMode", required=true)
    private Output<String> cdmMode;

    /**
     * @return (Updatable) The client local drive access mode. NONE: No access to local drives permitted. READONLY: The user may read from local drives on their desktop. FULL: The user may read from and write to their local drives on their desktop.
     * 
     */
    public Output<String> cdmMode() {
        return this.cdmMode;
    }

    /**
     * (Updatable) The clipboard mode. NONE: No access to the local clipboard is permitted. TODESKTOP: The clipboard can be used to transfer data to the desktop only.  FROMDESKTOP: The clipboard can be used to transfer data from the desktop only. FULL: The clipboard can be used to transfer data to and from the desktop.
     * 
     */
    @Import(name="clipboardMode", required=true)
    private Output<String> clipboardMode;

    /**
     * @return (Updatable) The clipboard mode. NONE: No access to the local clipboard is permitted. TODESKTOP: The clipboard can be used to transfer data to the desktop only.  FROMDESKTOP: The clipboard can be used to transfer data from the desktop only. FULL: The clipboard can be used to transfer data to and from the desktop.
     * 
     */
    public Output<String> clipboardMode() {
        return this.clipboardMode;
    }

    /**
     * (Updatable) Indicates whether the display is enabled.
     * 
     */
    @Import(name="isDisplayEnabled", required=true)
    private Output<Boolean> isDisplayEnabled;

    /**
     * @return (Updatable) Indicates whether the display is enabled.
     * 
     */
    public Output<Boolean> isDisplayEnabled() {
        return this.isDisplayEnabled;
    }

    /**
     * (Updatable) Indicates whether the keyboard is enabled.
     * 
     */
    @Import(name="isKeyboardEnabled", required=true)
    private Output<Boolean> isKeyboardEnabled;

    /**
     * @return (Updatable) Indicates whether the keyboard is enabled.
     * 
     */
    public Output<Boolean> isKeyboardEnabled() {
        return this.isKeyboardEnabled;
    }

    /**
     * (Updatable) Indicates whether the pointer is enabled.
     * 
     */
    @Import(name="isPointerEnabled", required=true)
    private Output<Boolean> isPointerEnabled;

    /**
     * @return (Updatable) Indicates whether the pointer is enabled.
     * 
     */
    public Output<Boolean> isPointerEnabled() {
        return this.isPointerEnabled;
    }

    /**
     * (Updatable) Indicates whether printing is enabled.
     * 
     */
    @Import(name="isPrintingEnabled", required=true)
    private Output<Boolean> isPrintingEnabled;

    /**
     * @return (Updatable) Indicates whether printing is enabled.
     * 
     */
    public Output<Boolean> isPrintingEnabled() {
        return this.isPrintingEnabled;
    }

    private DesktopPoolDevicePolicyArgs() {}

    private DesktopPoolDevicePolicyArgs(DesktopPoolDevicePolicyArgs $) {
        this.audioMode = $.audioMode;
        this.cdmMode = $.cdmMode;
        this.clipboardMode = $.clipboardMode;
        this.isDisplayEnabled = $.isDisplayEnabled;
        this.isKeyboardEnabled = $.isKeyboardEnabled;
        this.isPointerEnabled = $.isPointerEnabled;
        this.isPrintingEnabled = $.isPrintingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DesktopPoolDevicePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DesktopPoolDevicePolicyArgs $;

        public Builder() {
            $ = new DesktopPoolDevicePolicyArgs();
        }

        public Builder(DesktopPoolDevicePolicyArgs defaults) {
            $ = new DesktopPoolDevicePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audioMode (Updatable) The audio mode. NONE: No access to the local audio devices is permitted. TODESKTOP: The user may record audio on their desktop.  FROMDESKTOP: The user may play audio on their desktop. FULL: The user may play and record audio on their desktop.
         * 
         * @return builder
         * 
         */
        public Builder audioMode(Output<String> audioMode) {
            $.audioMode = audioMode;
            return this;
        }

        /**
         * @param audioMode (Updatable) The audio mode. NONE: No access to the local audio devices is permitted. TODESKTOP: The user may record audio on their desktop.  FROMDESKTOP: The user may play audio on their desktop. FULL: The user may play and record audio on their desktop.
         * 
         * @return builder
         * 
         */
        public Builder audioMode(String audioMode) {
            return audioMode(Output.of(audioMode));
        }

        /**
         * @param cdmMode (Updatable) The client local drive access mode. NONE: No access to local drives permitted. READONLY: The user may read from local drives on their desktop. FULL: The user may read from and write to their local drives on their desktop.
         * 
         * @return builder
         * 
         */
        public Builder cdmMode(Output<String> cdmMode) {
            $.cdmMode = cdmMode;
            return this;
        }

        /**
         * @param cdmMode (Updatable) The client local drive access mode. NONE: No access to local drives permitted. READONLY: The user may read from local drives on their desktop. FULL: The user may read from and write to their local drives on their desktop.
         * 
         * @return builder
         * 
         */
        public Builder cdmMode(String cdmMode) {
            return cdmMode(Output.of(cdmMode));
        }

        /**
         * @param clipboardMode (Updatable) The clipboard mode. NONE: No access to the local clipboard is permitted. TODESKTOP: The clipboard can be used to transfer data to the desktop only.  FROMDESKTOP: The clipboard can be used to transfer data from the desktop only. FULL: The clipboard can be used to transfer data to and from the desktop.
         * 
         * @return builder
         * 
         */
        public Builder clipboardMode(Output<String> clipboardMode) {
            $.clipboardMode = clipboardMode;
            return this;
        }

        /**
         * @param clipboardMode (Updatable) The clipboard mode. NONE: No access to the local clipboard is permitted. TODESKTOP: The clipboard can be used to transfer data to the desktop only.  FROMDESKTOP: The clipboard can be used to transfer data from the desktop only. FULL: The clipboard can be used to transfer data to and from the desktop.
         * 
         * @return builder
         * 
         */
        public Builder clipboardMode(String clipboardMode) {
            return clipboardMode(Output.of(clipboardMode));
        }

        /**
         * @param isDisplayEnabled (Updatable) Indicates whether the display is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isDisplayEnabled(Output<Boolean> isDisplayEnabled) {
            $.isDisplayEnabled = isDisplayEnabled;
            return this;
        }

        /**
         * @param isDisplayEnabled (Updatable) Indicates whether the display is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isDisplayEnabled(Boolean isDisplayEnabled) {
            return isDisplayEnabled(Output.of(isDisplayEnabled));
        }

        /**
         * @param isKeyboardEnabled (Updatable) Indicates whether the keyboard is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isKeyboardEnabled(Output<Boolean> isKeyboardEnabled) {
            $.isKeyboardEnabled = isKeyboardEnabled;
            return this;
        }

        /**
         * @param isKeyboardEnabled (Updatable) Indicates whether the keyboard is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isKeyboardEnabled(Boolean isKeyboardEnabled) {
            return isKeyboardEnabled(Output.of(isKeyboardEnabled));
        }

        /**
         * @param isPointerEnabled (Updatable) Indicates whether the pointer is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isPointerEnabled(Output<Boolean> isPointerEnabled) {
            $.isPointerEnabled = isPointerEnabled;
            return this;
        }

        /**
         * @param isPointerEnabled (Updatable) Indicates whether the pointer is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isPointerEnabled(Boolean isPointerEnabled) {
            return isPointerEnabled(Output.of(isPointerEnabled));
        }

        /**
         * @param isPrintingEnabled (Updatable) Indicates whether printing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isPrintingEnabled(Output<Boolean> isPrintingEnabled) {
            $.isPrintingEnabled = isPrintingEnabled;
            return this;
        }

        /**
         * @param isPrintingEnabled (Updatable) Indicates whether printing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isPrintingEnabled(Boolean isPrintingEnabled) {
            return isPrintingEnabled(Output.of(isPrintingEnabled));
        }

        public DesktopPoolDevicePolicyArgs build() {
            if ($.audioMode == null) {
                throw new MissingRequiredPropertyException("DesktopPoolDevicePolicyArgs", "audioMode");
            }
            if ($.cdmMode == null) {
                throw new MissingRequiredPropertyException("DesktopPoolDevicePolicyArgs", "cdmMode");
            }
            if ($.clipboardMode == null) {
                throw new MissingRequiredPropertyException("DesktopPoolDevicePolicyArgs", "clipboardMode");
            }
            if ($.isDisplayEnabled == null) {
                throw new MissingRequiredPropertyException("DesktopPoolDevicePolicyArgs", "isDisplayEnabled");
            }
            if ($.isKeyboardEnabled == null) {
                throw new MissingRequiredPropertyException("DesktopPoolDevicePolicyArgs", "isKeyboardEnabled");
            }
            if ($.isPointerEnabled == null) {
                throw new MissingRequiredPropertyException("DesktopPoolDevicePolicyArgs", "isPointerEnabled");
            }
            if ($.isPrintingEnabled == null) {
                throw new MissingRequiredPropertyException("DesktopPoolDevicePolicyArgs", "isPrintingEnabled");
            }
            return $;
        }
    }

}
