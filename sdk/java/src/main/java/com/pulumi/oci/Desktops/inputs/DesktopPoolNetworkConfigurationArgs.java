// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DesktopPoolNetworkConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DesktopPoolNetworkConfigurationArgs Empty = new DesktopPoolNetworkConfigurationArgs();

    /**
     * The OCID of the subnet to use for the desktop pool.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The OCID of the subnet to use for the desktop pool.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * The OCID of the VCN used by the desktop pool.
     * 
     */
    @Import(name="vcnId", required=true)
    private Output<String> vcnId;

    /**
     * @return The OCID of the VCN used by the desktop pool.
     * 
     */
    public Output<String> vcnId() {
        return this.vcnId;
    }

    private DesktopPoolNetworkConfigurationArgs() {}

    private DesktopPoolNetworkConfigurationArgs(DesktopPoolNetworkConfigurationArgs $) {
        this.subnetId = $.subnetId;
        this.vcnId = $.vcnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DesktopPoolNetworkConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DesktopPoolNetworkConfigurationArgs $;

        public Builder() {
            $ = new DesktopPoolNetworkConfigurationArgs();
        }

        public Builder(DesktopPoolNetworkConfigurationArgs defaults) {
            $ = new DesktopPoolNetworkConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param subnetId The OCID of the subnet to use for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The OCID of the subnet to use for the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param vcnId The OCID of the VCN used by the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(Output<String> vcnId) {
            $.vcnId = vcnId;
            return this;
        }

        /**
         * @param vcnId The OCID of the VCN used by the desktop pool.
         * 
         * @return builder
         * 
         */
        public Builder vcnId(String vcnId) {
            return vcnId(Output.of(vcnId));
        }

        public DesktopPoolNetworkConfigurationArgs build() {
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("DesktopPoolNetworkConfigurationArgs", "subnetId");
            }
            if ($.vcnId == null) {
                throw new MissingRequiredPropertyException("DesktopPoolNetworkConfigurationArgs", "vcnId");
            }
            return $;
        }
    }

}
