// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DesktopPoolAvailabilityPolicyStopSchedule {
    /**
     * @return (Updatable) A cron expression describing the desktop&#39;s schedule.
     * 
     */
    private String cronExpression;
    /**
     * @return (Updatable) The timezone of the desktop&#39;s schedule.
     * 
     */
    private String timezone;

    private DesktopPoolAvailabilityPolicyStopSchedule() {}
    /**
     * @return (Updatable) A cron expression describing the desktop&#39;s schedule.
     * 
     */
    public String cronExpression() {
        return this.cronExpression;
    }
    /**
     * @return (Updatable) The timezone of the desktop&#39;s schedule.
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DesktopPoolAvailabilityPolicyStopSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cronExpression;
        private String timezone;
        public Builder() {}
        public Builder(DesktopPoolAvailabilityPolicyStopSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronExpression = defaults.cronExpression;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder cronExpression(String cronExpression) {
            if (cronExpression == null) {
              throw new MissingRequiredPropertyException("DesktopPoolAvailabilityPolicyStopSchedule", "cronExpression");
            }
            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("DesktopPoolAvailabilityPolicyStopSchedule", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        public DesktopPoolAvailabilityPolicyStopSchedule build() {
            final var _resultValue = new DesktopPoolAvailabilityPolicyStopSchedule();
            _resultValue.cronExpression = cronExpression;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
