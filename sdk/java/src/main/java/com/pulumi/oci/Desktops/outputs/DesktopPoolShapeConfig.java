// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DesktopPoolShapeConfig {
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance used for each desktop compute instance in the desktop pool. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`. The following values are supported:
     * * `BASELINE_1_8` - baseline usage is 1/8 of an OCPU.
     * * `BASELINE_1_2` - baseline usage is 1/2 of an OCPU.
     * * `BASELINE_1_1` - baseline usage is the entire OCPU. This represents a non-burstable instance.
     * 
     */
    private @Nullable String baselineOcpuUtilization;
    /**
     * @return The total amount of memory available in gigabytes for each desktop compute instance in the desktop pool.
     * 
     */
    private @Nullable String memoryInGbs;
    /**
     * @return The total number of OCPUs available for each desktop compute instance in the desktop pool.
     * 
     */
    private @Nullable String ocpus;

    private DesktopPoolShapeConfig() {}
    /**
     * @return The baseline OCPU utilization for a subcore burstable VM instance used for each desktop compute instance in the desktop pool. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`. The following values are supported:
     * * `BASELINE_1_8` - baseline usage is 1/8 of an OCPU.
     * * `BASELINE_1_2` - baseline usage is 1/2 of an OCPU.
     * * `BASELINE_1_1` - baseline usage is the entire OCPU. This represents a non-burstable instance.
     * 
     */
    public Optional<String> baselineOcpuUtilization() {
        return Optional.ofNullable(this.baselineOcpuUtilization);
    }
    /**
     * @return The total amount of memory available in gigabytes for each desktop compute instance in the desktop pool.
     * 
     */
    public Optional<String> memoryInGbs() {
        return Optional.ofNullable(this.memoryInGbs);
    }
    /**
     * @return The total number of OCPUs available for each desktop compute instance in the desktop pool.
     * 
     */
    public Optional<String> ocpus() {
        return Optional.ofNullable(this.ocpus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DesktopPoolShapeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String baselineOcpuUtilization;
        private @Nullable String memoryInGbs;
        private @Nullable String ocpus;
        public Builder() {}
        public Builder(DesktopPoolShapeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baselineOcpuUtilization = defaults.baselineOcpuUtilization;
    	      this.memoryInGbs = defaults.memoryInGbs;
    	      this.ocpus = defaults.ocpus;
        }

        @CustomType.Setter
        public Builder baselineOcpuUtilization(@Nullable String baselineOcpuUtilization) {

            this.baselineOcpuUtilization = baselineOcpuUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder memoryInGbs(@Nullable String memoryInGbs) {

            this.memoryInGbs = memoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder ocpus(@Nullable String ocpus) {

            this.ocpus = ocpus;
            return this;
        }
        public DesktopPoolShapeConfig build() {
            final var _resultValue = new DesktopPoolShapeConfig();
            _resultValue.baselineOcpuUtilization = baselineOcpuUtilization;
            _resultValue.memoryInGbs = memoryInGbs;
            _resultValue.ocpus = ocpus;
            return _resultValue;
        }
    }
}
