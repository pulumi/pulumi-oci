// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Desktops.outputs.GetDesktopHostingOptionImage;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDesktopHostingOption {
    /**
     * @return The connection address of the desktop.
     * 
     */
    private String connectAddress;
    /**
     * @return Provides information about the desktop image.
     * 
     */
    private List<GetDesktopHostingOptionImage> images;

    private GetDesktopHostingOption() {}
    /**
     * @return The connection address of the desktop.
     * 
     */
    public String connectAddress() {
        return this.connectAddress;
    }
    /**
     * @return Provides information about the desktop image.
     * 
     */
    public List<GetDesktopHostingOptionImage> images() {
        return this.images;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDesktopHostingOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectAddress;
        private List<GetDesktopHostingOptionImage> images;
        public Builder() {}
        public Builder(GetDesktopHostingOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectAddress = defaults.connectAddress;
    	      this.images = defaults.images;
        }

        @CustomType.Setter
        public Builder connectAddress(String connectAddress) {
            if (connectAddress == null) {
              throw new MissingRequiredPropertyException("GetDesktopHostingOption", "connectAddress");
            }
            this.connectAddress = connectAddress;
            return this;
        }
        @CustomType.Setter
        public Builder images(List<GetDesktopHostingOptionImage> images) {
            if (images == null) {
              throw new MissingRequiredPropertyException("GetDesktopHostingOption", "images");
            }
            this.images = images;
            return this;
        }
        public Builder images(GetDesktopHostingOptionImage... images) {
            return images(List.of(images));
        }
        public GetDesktopHostingOption build() {
            final var _resultValue = new GetDesktopHostingOption();
            _resultValue.connectAddress = connectAddress;
            _resultValue.images = images;
            return _resultValue;
        }
    }
}
