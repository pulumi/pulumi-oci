// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolVolumesDesktopPoolVolumeCollection;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolVolumesFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDesktopPoolVolumesResult {
    /**
     * @return The availability domain of the desktop pool.
     * 
     */
    private @Nullable String availabilityDomain;
    private String compartmentId;
    private String desktopPoolId;
    /**
     * @return The list of desktop_pool_volume_collection.
     * 
     */
    private List<GetDesktopPoolVolumesDesktopPoolVolumeCollection> desktopPoolVolumeCollections;
    private @Nullable String displayName;
    private @Nullable List<GetDesktopPoolVolumesFilter> filters;
    /**
     * @return The OCID of the desktop pool volume.
     * 
     */
    private @Nullable String id;
    /**
     * @return The state of the desktop pool volume.
     * 
     */
    private @Nullable String state;

    private GetDesktopPoolVolumesResult() {}
    /**
     * @return The availability domain of the desktop pool.
     * 
     */
    public Optional<String> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }
    public String compartmentId() {
        return this.compartmentId;
    }
    public String desktopPoolId() {
        return this.desktopPoolId;
    }
    /**
     * @return The list of desktop_pool_volume_collection.
     * 
     */
    public List<GetDesktopPoolVolumesDesktopPoolVolumeCollection> desktopPoolVolumeCollections() {
        return this.desktopPoolVolumeCollections;
    }
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public List<GetDesktopPoolVolumesFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The OCID of the desktop pool volume.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The state of the desktop pool volume.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDesktopPoolVolumesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityDomain;
        private String compartmentId;
        private String desktopPoolId;
        private List<GetDesktopPoolVolumesDesktopPoolVolumeCollection> desktopPoolVolumeCollections;
        private @Nullable String displayName;
        private @Nullable List<GetDesktopPoolVolumesFilter> filters;
        private @Nullable String id;
        private @Nullable String state;
        public Builder() {}
        public Builder(GetDesktopPoolVolumesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.compartmentId = defaults.compartmentId;
    	      this.desktopPoolId = defaults.desktopPoolId;
    	      this.desktopPoolVolumeCollections = defaults.desktopPoolVolumeCollections;
    	      this.displayName = defaults.displayName;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder availabilityDomain(@Nullable String availabilityDomain) {

            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolVolumesResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder desktopPoolId(String desktopPoolId) {
            if (desktopPoolId == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolVolumesResult", "desktopPoolId");
            }
            this.desktopPoolId = desktopPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder desktopPoolVolumeCollections(List<GetDesktopPoolVolumesDesktopPoolVolumeCollection> desktopPoolVolumeCollections) {
            if (desktopPoolVolumeCollections == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolVolumesResult", "desktopPoolVolumeCollections");
            }
            this.desktopPoolVolumeCollections = desktopPoolVolumeCollections;
            return this;
        }
        public Builder desktopPoolVolumeCollections(GetDesktopPoolVolumesDesktopPoolVolumeCollection... desktopPoolVolumeCollections) {
            return desktopPoolVolumeCollections(List.of(desktopPoolVolumeCollections));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDesktopPoolVolumesFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetDesktopPoolVolumesFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public GetDesktopPoolVolumesResult build() {
            final var _resultValue = new GetDesktopPoolVolumesResult();
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.compartmentId = compartmentId;
            _resultValue.desktopPoolId = desktopPoolId;
            _resultValue.desktopPoolVolumeCollections = desktopPoolVolumeCollections;
            _resultValue.displayName = displayName;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
