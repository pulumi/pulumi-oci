// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Desktops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolsDesktopPoolCollectionItemDevicePolicy;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolsDesktopPoolCollectionItemImage;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolsDesktopPoolCollectionItemPrivateAccessDetail;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolsDesktopPoolCollectionItemSessionLifecycleAction;
import com.pulumi.oci.Desktops.outputs.GetDesktopPoolsDesktopPoolCollectionItemShapeConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDesktopPoolsDesktopPoolCollectionItem {
    /**
     * @return The number of active desktops in the desktop pool.
     * 
     */
    private Integer activeDesktops;
    /**
     * @return Indicates whether desktop pool users have administrative privileges on their desktop.
     * 
     */
    private Boolean arePrivilegedUsers;
    private Boolean areVolumesPreserved;
    /**
     * @return The name of the availability domain.
     * 
     */
    private String availabilityDomain;
    /**
     * @return Provides the start and stop schedule information for desktop availability of the desktop pool.
     * 
     */
    private List<GetDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy> availabilityPolicies;
    /**
     * @return The OCID of the compartment of the desktop pool.
     * 
     */
    private String compartmentId;
    /**
     * @return Contact information of the desktop pool administrator. Avoid entering confidential information.
     * 
     */
    private String contactDetails;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A user friendly description providing additional information about the resource. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
     * 
     */
    private List<GetDesktopPoolsDesktopPoolCollectionItemDevicePolicy> devicePolicies;
    /**
     * @return A filter to return only results with the given displayName.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return A filter to return only results with the given OCID.
     * 
     */
    private String id;
    /**
     * @return Provides information about the desktop image.
     * 
     */
    private List<GetDesktopPoolsDesktopPoolCollectionItemImage> images;
    /**
     * @return Indicates whether storage is enabled for the desktop pool.
     * 
     */
    private Boolean isStorageEnabled;
    /**
     * @return The maximum number of desktops permitted in the desktop pool.
     * 
     */
    private Integer maximumSize;
    /**
     * @return Provides information about the network configuration of the desktop pool.
     * 
     */
    private List<GetDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration> networkConfigurations;
    /**
     * @return A list of network security groups for the private access.
     * 
     */
    private List<String> nsgIds;
    /**
     * @return The details of the desktop&#39;s private access network connectivity that were used to create the pool.
     * 
     */
    private List<GetDesktopPoolsDesktopPoolCollectionItemPrivateAccessDetail> privateAccessDetails;
    /**
     * @return Action to be triggered on inactivity or disconnect
     * 
     */
    private List<GetDesktopPoolsDesktopPoolCollectionItemSessionLifecycleAction> sessionLifecycleActions;
    /**
     * @return The shape configuration used for each desktop compute instance in the desktop pool.
     * 
     */
    private List<GetDesktopPoolsDesktopPoolCollectionItemShapeConfig> shapeConfigs;
    /**
     * @return The shape of the desktop pool.
     * 
     */
    private String shapeName;
    /**
     * @return The maximum number of standby desktops available in the desktop pool.
     * 
     */
    private Integer standbySize;
    /**
     * @return A filter to return only results with the given lifecycleState.
     * 
     */
    private String state;
    /**
     * @return The backup policy OCID of the storage.
     * 
     */
    private String storageBackupPolicyId;
    /**
     * @return The size in GBs of the storage for the desktop pool.
     * 
     */
    private Integer storageSizeInGbs;
    /**
     * @return The date and time the resource was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The start time of the desktop pool.
     * 
     */
    private String timeStartScheduled;
    /**
     * @return The stop time of the desktop pool.
     * 
     */
    private String timeStopScheduled;
    /**
     * @return Indicates whether the desktop pool uses dedicated virtual machine hosts.
     * 
     */
    private String useDedicatedVmHost;

    private GetDesktopPoolsDesktopPoolCollectionItem() {}
    /**
     * @return The number of active desktops in the desktop pool.
     * 
     */
    public Integer activeDesktops() {
        return this.activeDesktops;
    }
    /**
     * @return Indicates whether desktop pool users have administrative privileges on their desktop.
     * 
     */
    public Boolean arePrivilegedUsers() {
        return this.arePrivilegedUsers;
    }
    public Boolean areVolumesPreserved() {
        return this.areVolumesPreserved;
    }
    /**
     * @return The name of the availability domain.
     * 
     */
    public String availabilityDomain() {
        return this.availabilityDomain;
    }
    /**
     * @return Provides the start and stop schedule information for desktop availability of the desktop pool.
     * 
     */
    public List<GetDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy> availabilityPolicies() {
        return this.availabilityPolicies;
    }
    /**
     * @return The OCID of the compartment of the desktop pool.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Contact information of the desktop pool administrator. Avoid entering confidential information.
     * 
     */
    public String contactDetails() {
        return this.contactDetails;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A user friendly description providing additional information about the resource. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
     * 
     */
    public List<GetDesktopPoolsDesktopPoolCollectionItemDevicePolicy> devicePolicies() {
        return this.devicePolicies;
    }
    /**
     * @return A filter to return only results with the given displayName.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return A filter to return only results with the given OCID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Provides information about the desktop image.
     * 
     */
    public List<GetDesktopPoolsDesktopPoolCollectionItemImage> images() {
        return this.images;
    }
    /**
     * @return Indicates whether storage is enabled for the desktop pool.
     * 
     */
    public Boolean isStorageEnabled() {
        return this.isStorageEnabled;
    }
    /**
     * @return The maximum number of desktops permitted in the desktop pool.
     * 
     */
    public Integer maximumSize() {
        return this.maximumSize;
    }
    /**
     * @return Provides information about the network configuration of the desktop pool.
     * 
     */
    public List<GetDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return A list of network security groups for the private access.
     * 
     */
    public List<String> nsgIds() {
        return this.nsgIds;
    }
    /**
     * @return The details of the desktop&#39;s private access network connectivity that were used to create the pool.
     * 
     */
    public List<GetDesktopPoolsDesktopPoolCollectionItemPrivateAccessDetail> privateAccessDetails() {
        return this.privateAccessDetails;
    }
    /**
     * @return Action to be triggered on inactivity or disconnect
     * 
     */
    public List<GetDesktopPoolsDesktopPoolCollectionItemSessionLifecycleAction> sessionLifecycleActions() {
        return this.sessionLifecycleActions;
    }
    /**
     * @return The shape configuration used for each desktop compute instance in the desktop pool.
     * 
     */
    public List<GetDesktopPoolsDesktopPoolCollectionItemShapeConfig> shapeConfigs() {
        return this.shapeConfigs;
    }
    /**
     * @return The shape of the desktop pool.
     * 
     */
    public String shapeName() {
        return this.shapeName;
    }
    /**
     * @return The maximum number of standby desktops available in the desktop pool.
     * 
     */
    public Integer standbySize() {
        return this.standbySize;
    }
    /**
     * @return A filter to return only results with the given lifecycleState.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The backup policy OCID of the storage.
     * 
     */
    public String storageBackupPolicyId() {
        return this.storageBackupPolicyId;
    }
    /**
     * @return The size in GBs of the storage for the desktop pool.
     * 
     */
    public Integer storageSizeInGbs() {
        return this.storageSizeInGbs;
    }
    /**
     * @return The date and time the resource was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The start time of the desktop pool.
     * 
     */
    public String timeStartScheduled() {
        return this.timeStartScheduled;
    }
    /**
     * @return The stop time of the desktop pool.
     * 
     */
    public String timeStopScheduled() {
        return this.timeStopScheduled;
    }
    /**
     * @return Indicates whether the desktop pool uses dedicated virtual machine hosts.
     * 
     */
    public String useDedicatedVmHost() {
        return this.useDedicatedVmHost;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDesktopPoolsDesktopPoolCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeDesktops;
        private Boolean arePrivilegedUsers;
        private Boolean areVolumesPreserved;
        private String availabilityDomain;
        private List<GetDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy> availabilityPolicies;
        private String compartmentId;
        private String contactDetails;
        private Map<String,String> definedTags;
        private String description;
        private List<GetDesktopPoolsDesktopPoolCollectionItemDevicePolicy> devicePolicies;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetDesktopPoolsDesktopPoolCollectionItemImage> images;
        private Boolean isStorageEnabled;
        private Integer maximumSize;
        private List<GetDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration> networkConfigurations;
        private List<String> nsgIds;
        private List<GetDesktopPoolsDesktopPoolCollectionItemPrivateAccessDetail> privateAccessDetails;
        private List<GetDesktopPoolsDesktopPoolCollectionItemSessionLifecycleAction> sessionLifecycleActions;
        private List<GetDesktopPoolsDesktopPoolCollectionItemShapeConfig> shapeConfigs;
        private String shapeName;
        private Integer standbySize;
        private String state;
        private String storageBackupPolicyId;
        private Integer storageSizeInGbs;
        private String timeCreated;
        private String timeStartScheduled;
        private String timeStopScheduled;
        private String useDedicatedVmHost;
        public Builder() {}
        public Builder(GetDesktopPoolsDesktopPoolCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDesktops = defaults.activeDesktops;
    	      this.arePrivilegedUsers = defaults.arePrivilegedUsers;
    	      this.areVolumesPreserved = defaults.areVolumesPreserved;
    	      this.availabilityDomain = defaults.availabilityDomain;
    	      this.availabilityPolicies = defaults.availabilityPolicies;
    	      this.compartmentId = defaults.compartmentId;
    	      this.contactDetails = defaults.contactDetails;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.devicePolicies = defaults.devicePolicies;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.images = defaults.images;
    	      this.isStorageEnabled = defaults.isStorageEnabled;
    	      this.maximumSize = defaults.maximumSize;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.nsgIds = defaults.nsgIds;
    	      this.privateAccessDetails = defaults.privateAccessDetails;
    	      this.sessionLifecycleActions = defaults.sessionLifecycleActions;
    	      this.shapeConfigs = defaults.shapeConfigs;
    	      this.shapeName = defaults.shapeName;
    	      this.standbySize = defaults.standbySize;
    	      this.state = defaults.state;
    	      this.storageBackupPolicyId = defaults.storageBackupPolicyId;
    	      this.storageSizeInGbs = defaults.storageSizeInGbs;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeStartScheduled = defaults.timeStartScheduled;
    	      this.timeStopScheduled = defaults.timeStopScheduled;
    	      this.useDedicatedVmHost = defaults.useDedicatedVmHost;
        }

        @CustomType.Setter
        public Builder activeDesktops(Integer activeDesktops) {
            if (activeDesktops == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "activeDesktops");
            }
            this.activeDesktops = activeDesktops;
            return this;
        }
        @CustomType.Setter
        public Builder arePrivilegedUsers(Boolean arePrivilegedUsers) {
            if (arePrivilegedUsers == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "arePrivilegedUsers");
            }
            this.arePrivilegedUsers = arePrivilegedUsers;
            return this;
        }
        @CustomType.Setter
        public Builder areVolumesPreserved(Boolean areVolumesPreserved) {
            if (areVolumesPreserved == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "areVolumesPreserved");
            }
            this.areVolumesPreserved = areVolumesPreserved;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityDomain(String availabilityDomain) {
            if (availabilityDomain == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "availabilityDomain");
            }
            this.availabilityDomain = availabilityDomain;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityPolicies(List<GetDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy> availabilityPolicies) {
            if (availabilityPolicies == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "availabilityPolicies");
            }
            this.availabilityPolicies = availabilityPolicies;
            return this;
        }
        public Builder availabilityPolicies(GetDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy... availabilityPolicies) {
            return availabilityPolicies(List.of(availabilityPolicies));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder contactDetails(String contactDetails) {
            if (contactDetails == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "contactDetails");
            }
            this.contactDetails = contactDetails;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder devicePolicies(List<GetDesktopPoolsDesktopPoolCollectionItemDevicePolicy> devicePolicies) {
            if (devicePolicies == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "devicePolicies");
            }
            this.devicePolicies = devicePolicies;
            return this;
        }
        public Builder devicePolicies(GetDesktopPoolsDesktopPoolCollectionItemDevicePolicy... devicePolicies) {
            return devicePolicies(List.of(devicePolicies));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder images(List<GetDesktopPoolsDesktopPoolCollectionItemImage> images) {
            if (images == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "images");
            }
            this.images = images;
            return this;
        }
        public Builder images(GetDesktopPoolsDesktopPoolCollectionItemImage... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder isStorageEnabled(Boolean isStorageEnabled) {
            if (isStorageEnabled == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "isStorageEnabled");
            }
            this.isStorageEnabled = isStorageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maximumSize(Integer maximumSize) {
            if (maximumSize == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "maximumSize");
            }
            this.maximumSize = maximumSize;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder nsgIds(List<String> nsgIds) {
            if (nsgIds == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "nsgIds");
            }
            this.nsgIds = nsgIds;
            return this;
        }
        public Builder nsgIds(String... nsgIds) {
            return nsgIds(List.of(nsgIds));
        }
        @CustomType.Setter
        public Builder privateAccessDetails(List<GetDesktopPoolsDesktopPoolCollectionItemPrivateAccessDetail> privateAccessDetails) {
            if (privateAccessDetails == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "privateAccessDetails");
            }
            this.privateAccessDetails = privateAccessDetails;
            return this;
        }
        public Builder privateAccessDetails(GetDesktopPoolsDesktopPoolCollectionItemPrivateAccessDetail... privateAccessDetails) {
            return privateAccessDetails(List.of(privateAccessDetails));
        }
        @CustomType.Setter
        public Builder sessionLifecycleActions(List<GetDesktopPoolsDesktopPoolCollectionItemSessionLifecycleAction> sessionLifecycleActions) {
            if (sessionLifecycleActions == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "sessionLifecycleActions");
            }
            this.sessionLifecycleActions = sessionLifecycleActions;
            return this;
        }
        public Builder sessionLifecycleActions(GetDesktopPoolsDesktopPoolCollectionItemSessionLifecycleAction... sessionLifecycleActions) {
            return sessionLifecycleActions(List.of(sessionLifecycleActions));
        }
        @CustomType.Setter
        public Builder shapeConfigs(List<GetDesktopPoolsDesktopPoolCollectionItemShapeConfig> shapeConfigs) {
            if (shapeConfigs == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "shapeConfigs");
            }
            this.shapeConfigs = shapeConfigs;
            return this;
        }
        public Builder shapeConfigs(GetDesktopPoolsDesktopPoolCollectionItemShapeConfig... shapeConfigs) {
            return shapeConfigs(List.of(shapeConfigs));
        }
        @CustomType.Setter
        public Builder shapeName(String shapeName) {
            if (shapeName == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "shapeName");
            }
            this.shapeName = shapeName;
            return this;
        }
        @CustomType.Setter
        public Builder standbySize(Integer standbySize) {
            if (standbySize == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "standbySize");
            }
            this.standbySize = standbySize;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageBackupPolicyId(String storageBackupPolicyId) {
            if (storageBackupPolicyId == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "storageBackupPolicyId");
            }
            this.storageBackupPolicyId = storageBackupPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder storageSizeInGbs(Integer storageSizeInGbs) {
            if (storageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "storageSizeInGbs");
            }
            this.storageSizeInGbs = storageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeStartScheduled(String timeStartScheduled) {
            if (timeStartScheduled == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "timeStartScheduled");
            }
            this.timeStartScheduled = timeStartScheduled;
            return this;
        }
        @CustomType.Setter
        public Builder timeStopScheduled(String timeStopScheduled) {
            if (timeStopScheduled == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "timeStopScheduled");
            }
            this.timeStopScheduled = timeStopScheduled;
            return this;
        }
        @CustomType.Setter
        public Builder useDedicatedVmHost(String useDedicatedVmHost) {
            if (useDedicatedVmHost == null) {
              throw new MissingRequiredPropertyException("GetDesktopPoolsDesktopPoolCollectionItem", "useDedicatedVmHost");
            }
            this.useDedicatedVmHost = useDedicatedVmHost;
            return this;
        }
        public GetDesktopPoolsDesktopPoolCollectionItem build() {
            final var _resultValue = new GetDesktopPoolsDesktopPoolCollectionItem();
            _resultValue.activeDesktops = activeDesktops;
            _resultValue.arePrivilegedUsers = arePrivilegedUsers;
            _resultValue.areVolumesPreserved = areVolumesPreserved;
            _resultValue.availabilityDomain = availabilityDomain;
            _resultValue.availabilityPolicies = availabilityPolicies;
            _resultValue.compartmentId = compartmentId;
            _resultValue.contactDetails = contactDetails;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.devicePolicies = devicePolicies;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.images = images;
            _resultValue.isStorageEnabled = isStorageEnabled;
            _resultValue.maximumSize = maximumSize;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.nsgIds = nsgIds;
            _resultValue.privateAccessDetails = privateAccessDetails;
            _resultValue.sessionLifecycleActions = sessionLifecycleActions;
            _resultValue.shapeConfigs = shapeConfigs;
            _resultValue.shapeName = shapeName;
            _resultValue.standbySize = standbySize;
            _resultValue.state = state;
            _resultValue.storageBackupPolicyId = storageBackupPolicyId;
            _resultValue.storageSizeInGbs = storageSizeInGbs;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeStartScheduled = timeStartScheduled;
            _resultValue.timeStopScheduled = timeStopScheduled;
            _resultValue.useDedicatedVmHost = useDedicatedVmHost;
            return _resultValue;
        }
    }
}
