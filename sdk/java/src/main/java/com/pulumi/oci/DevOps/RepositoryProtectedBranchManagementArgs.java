// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryProtectedBranchManagementArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryProtectedBranchManagementArgs Empty = new RepositoryProtectedBranchManagementArgs();

    /**
     * Name of a branch to protect.
     * 
     */
    @Import(name="branchName", required=true)
    private Output<String> branchName;

    /**
     * @return Name of a branch to protect.
     * 
     */
    public Output<String> branchName() {
        return this.branchName;
    }

    /**
     * Level of protection to add on a branch.
     * 
     */
    @Import(name="protectionLevels")
    private @Nullable Output<List<String>> protectionLevels;

    /**
     * @return Level of protection to add on a branch.
     * 
     */
    public Optional<Output<List<String>>> protectionLevels() {
        return Optional.ofNullable(this.protectionLevels);
    }

    /**
     * Unique repository identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    private RepositoryProtectedBranchManagementArgs() {}

    private RepositoryProtectedBranchManagementArgs(RepositoryProtectedBranchManagementArgs $) {
        this.branchName = $.branchName;
        this.protectionLevels = $.protectionLevels;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryProtectedBranchManagementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryProtectedBranchManagementArgs $;

        public Builder() {
            $ = new RepositoryProtectedBranchManagementArgs();
        }

        public Builder(RepositoryProtectedBranchManagementArgs defaults) {
            $ = new RepositoryProtectedBranchManagementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName Name of a branch to protect.
         * 
         * @return builder
         * 
         */
        public Builder branchName(Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName Name of a branch to protect.
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param protectionLevels Level of protection to add on a branch.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevels(@Nullable Output<List<String>> protectionLevels) {
            $.protectionLevels = protectionLevels;
            return this;
        }

        /**
         * @param protectionLevels Level of protection to add on a branch.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevels(List<String> protectionLevels) {
            return protectionLevels(Output.of(protectionLevels));
        }

        /**
         * @param protectionLevels Level of protection to add on a branch.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevels(String... protectionLevels) {
            return protectionLevels(List.of(protectionLevels));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public RepositoryProtectedBranchManagementArgs build() {
            if ($.branchName == null) {
                throw new MissingRequiredPropertyException("RepositoryProtectedBranchManagementArgs", "branchName");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("RepositoryProtectedBranchManagementArgs", "repositoryId");
            }
            return $;
        }
    }

}
