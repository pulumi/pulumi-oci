// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.DevOps.RepositorySettingArgs;
import com.pulumi.oci.DevOps.inputs.RepositorySettingState;
import com.pulumi.oci.DevOps.outputs.RepositorySettingApprovalRules;
import com.pulumi.oci.DevOps.outputs.RepositorySettingMergeChecks;
import com.pulumi.oci.DevOps.outputs.RepositorySettingMergeSettings;
import com.pulumi.oci.Utilities;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * This resource provides the Repository Setting resource in Oracle Cloud Infrastructure Devops service.
 * 
 * Updates the settings for a repository.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.DevOps.RepositorySetting;
 * import com.pulumi.oci.DevOps.RepositorySettingArgs;
 * import com.pulumi.oci.DevOps.inputs.RepositorySettingApprovalRulesArgs;
 * import com.pulumi.oci.DevOps.inputs.RepositorySettingMergeChecksArgs;
 * import com.pulumi.oci.DevOps.inputs.RepositorySettingMergeSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testRepositorySetting = new RepositorySetting("testRepositorySetting", RepositorySettingArgs.builder()
 *             .repositoryId(testRepository.id())
 *             .approvalRules(RepositorySettingApprovalRulesArgs.builder()
 *                 .items(RepositorySettingApprovalRulesItemArgs.builder()
 *                     .minApprovalsCount(repositorySettingApprovalRulesItemsMinApprovalsCount)
 *                     .name(repositorySettingApprovalRulesItemsName)
 *                     .destinationBranch(repositorySettingApprovalRulesItemsDestinationBranch)
 *                     .reviewers(RepositorySettingApprovalRulesItemReviewerArgs.builder()
 *                         .principalId(testPrincipal.id())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .mergeChecks(RepositorySettingMergeChecksArgs.builder()
 *                 .lastBuildSucceeded(repositorySettingMergeChecksLastBuildSucceeded)
 *                 .build())
 *             .mergeSettings(RepositorySettingMergeSettingsArgs.builder()
 *                 .allowedMergeStrategies(repositorySettingMergeSettingsAllowedMergeStrategies)
 *                 .defaultMergeStrategy(repositorySettingMergeSettingsDefaultMergeStrategy)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * RepositorySettings can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:DevOps/repositorySetting:RepositorySetting test_repository_setting &#34;repositories/{repositoryId}/repositorySettings&#34;
 * ```
 * 
 */
@ResourceType(type="oci:DevOps/repositorySetting:RepositorySetting")
public class RepositorySetting extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    @Export(name="approvalRules", refs={RepositorySettingApprovalRules.class}, tree="[0]")
    private Output<RepositorySettingApprovalRules> approvalRules;

    /**
     * @return (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    public Output<RepositorySettingApprovalRules> approvalRules() {
        return this.approvalRules;
    }
    /**
     * (Updatable) Criteria which must be satisfied to merge a pull request.
     * 
     */
    @Export(name="mergeChecks", refs={RepositorySettingMergeChecks.class}, tree="[0]")
    private Output<RepositorySettingMergeChecks> mergeChecks;

    /**
     * @return (Updatable) Criteria which must be satisfied to merge a pull request.
     * 
     */
    public Output<RepositorySettingMergeChecks> mergeChecks() {
        return this.mergeChecks;
    }
    /**
     * (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    @Export(name="mergeSettings", refs={RepositorySettingMergeSettings.class}, tree="[0]")
    private Output<RepositorySettingMergeSettings> mergeSettings;

    /**
     * @return (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    public Output<RepositorySettingMergeSettings> mergeSettings() {
        return this.mergeSettings;
    }
    /**
     * Unique repository identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="repositoryId", refs={String.class}, tree="[0]")
    private Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RepositorySetting(String name) {
        this(name, RepositorySettingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RepositorySetting(String name, RepositorySettingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RepositorySetting(String name, RepositorySettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DevOps/repositorySetting:RepositorySetting", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private RepositorySetting(String name, Output<String> id, @Nullable RepositorySettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:DevOps/repositorySetting:RepositorySetting", name, state, makeResourceOptions(options, id));
    }

    private static RepositorySettingArgs makeArgs(RepositorySettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RepositorySettingArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RepositorySetting get(String name, Output<String> id, @Nullable RepositorySettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RepositorySetting(name, id, state, options);
    }
}
