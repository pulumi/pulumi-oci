// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.inputs.DeployStageContainerConfigNetworkChannelArgs;
import com.pulumi.oci.DevOps.inputs.DeployStageContainerConfigShapeConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeployStageContainerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeployStageContainerConfigArgs Empty = new DeployStageContainerConfigArgs();

    /**
     * (Updatable) Availability domain where the ContainerInstance will be created.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<String> availabilityDomain;

    /**
     * @return (Updatable) Availability domain where the ContainerInstance will be created.
     * 
     */
    public Optional<Output<String>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * (Updatable) The OCID of the compartment where the ContainerInstance will be created.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Updatable) The OCID of the compartment where the ContainerInstance will be created.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * (Updatable) Container configuration type.
     * 
     */
    @Import(name="containerConfigType", required=true)
    private Output<String> containerConfigType;

    /**
     * @return (Updatable) Container configuration type.
     * 
     */
    public Output<String> containerConfigType() {
        return this.containerConfigType;
    }

    /**
     * (Updatable) Specifies the configuration needed when the target Oracle Cloud Infrastructure resource, i.e., OKE cluster, resides in customer&#39;s private network.
     * 
     */
    @Import(name="networkChannel", required=true)
    private Output<DeployStageContainerConfigNetworkChannelArgs> networkChannel;

    /**
     * @return (Updatable) Specifies the configuration needed when the target Oracle Cloud Infrastructure resource, i.e., OKE cluster, resides in customer&#39;s private network.
     * 
     */
    public Output<DeployStageContainerConfigNetworkChannelArgs> networkChannel() {
        return this.networkChannel;
    }

    /**
     * (Updatable) Determines the size and amount of resources available to the instance.
     * 
     */
    @Import(name="shapeConfig", required=true)
    private Output<DeployStageContainerConfigShapeConfigArgs> shapeConfig;

    /**
     * @return (Updatable) Determines the size and amount of resources available to the instance.
     * 
     */
    public Output<DeployStageContainerConfigShapeConfigArgs> shapeConfig() {
        return this.shapeConfig;
    }

    /**
     * (Updatable) The shape of the ContainerInstance. The shape determines the resources available to the ContainerInstance.
     * 
     */
    @Import(name="shapeName", required=true)
    private Output<String> shapeName;

    /**
     * @return (Updatable) The shape of the ContainerInstance. The shape determines the resources available to the ContainerInstance.
     * 
     */
    public Output<String> shapeName() {
        return this.shapeName;
    }

    private DeployStageContainerConfigArgs() {}

    private DeployStageContainerConfigArgs(DeployStageContainerConfigArgs $) {
        this.availabilityDomain = $.availabilityDomain;
        this.compartmentId = $.compartmentId;
        this.containerConfigType = $.containerConfigType;
        this.networkChannel = $.networkChannel;
        this.shapeConfig = $.shapeConfig;
        this.shapeName = $.shapeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeployStageContainerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeployStageContainerConfigArgs $;

        public Builder() {
            $ = new DeployStageContainerConfigArgs();
        }

        public Builder(DeployStageContainerConfigArgs defaults) {
            $ = new DeployStageContainerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityDomain (Updatable) Availability domain where the ContainerInstance will be created.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<String> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain (Updatable) Availability domain where the ContainerInstance will be created.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(String availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the ContainerInstance will be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The OCID of the compartment where the ContainerInstance will be created.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param containerConfigType (Updatable) Container configuration type.
         * 
         * @return builder
         * 
         */
        public Builder containerConfigType(Output<String> containerConfigType) {
            $.containerConfigType = containerConfigType;
            return this;
        }

        /**
         * @param containerConfigType (Updatable) Container configuration type.
         * 
         * @return builder
         * 
         */
        public Builder containerConfigType(String containerConfigType) {
            return containerConfigType(Output.of(containerConfigType));
        }

        /**
         * @param networkChannel (Updatable) Specifies the configuration needed when the target Oracle Cloud Infrastructure resource, i.e., OKE cluster, resides in customer&#39;s private network.
         * 
         * @return builder
         * 
         */
        public Builder networkChannel(Output<DeployStageContainerConfigNetworkChannelArgs> networkChannel) {
            $.networkChannel = networkChannel;
            return this;
        }

        /**
         * @param networkChannel (Updatable) Specifies the configuration needed when the target Oracle Cloud Infrastructure resource, i.e., OKE cluster, resides in customer&#39;s private network.
         * 
         * @return builder
         * 
         */
        public Builder networkChannel(DeployStageContainerConfigNetworkChannelArgs networkChannel) {
            return networkChannel(Output.of(networkChannel));
        }

        /**
         * @param shapeConfig (Updatable) Determines the size and amount of resources available to the instance.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(Output<DeployStageContainerConfigShapeConfigArgs> shapeConfig) {
            $.shapeConfig = shapeConfig;
            return this;
        }

        /**
         * @param shapeConfig (Updatable) Determines the size and amount of resources available to the instance.
         * 
         * @return builder
         * 
         */
        public Builder shapeConfig(DeployStageContainerConfigShapeConfigArgs shapeConfig) {
            return shapeConfig(Output.of(shapeConfig));
        }

        /**
         * @param shapeName (Updatable) The shape of the ContainerInstance. The shape determines the resources available to the ContainerInstance.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(Output<String> shapeName) {
            $.shapeName = shapeName;
            return this;
        }

        /**
         * @param shapeName (Updatable) The shape of the ContainerInstance. The shape determines the resources available to the ContainerInstance.
         * 
         * @return builder
         * 
         */
        public Builder shapeName(String shapeName) {
            return shapeName(Output.of(shapeName));
        }

        public DeployStageContainerConfigArgs build() {
            if ($.containerConfigType == null) {
                throw new MissingRequiredPropertyException("DeployStageContainerConfigArgs", "containerConfigType");
            }
            if ($.networkChannel == null) {
                throw new MissingRequiredPropertyException("DeployStageContainerConfigArgs", "networkChannel");
            }
            if ($.shapeConfig == null) {
                throw new MissingRequiredPropertyException("DeployStageContainerConfigArgs", "shapeConfig");
            }
            if ($.shapeName == null) {
                throw new MissingRequiredPropertyException("DeployStageContainerConfigArgs", "shapeName");
            }
            return $;
        }
    }

}
