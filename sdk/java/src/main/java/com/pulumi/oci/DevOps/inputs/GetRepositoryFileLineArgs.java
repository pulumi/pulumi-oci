// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryFileLineArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryFileLineArgs Empty = new GetRepositoryFileLineArgs();

    /**
     * A filter to return file contents of the specified paths.
     * 
     */
    @Import(name="filePath", required=true)
    private Output<String> filePath;

    /**
     * @return A filter to return file contents of the specified paths.
     * 
     */
    public Output<String> filePath() {
        return this.filePath;
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * Retrieve file lines from specific revision.
     * 
     */
    @Import(name="revision", required=true)
    private Output<String> revision;

    /**
     * @return Retrieve file lines from specific revision.
     * 
     */
    public Output<String> revision() {
        return this.revision;
    }

    /**
     * Line number from where to start returning file lines.
     * 
     */
    @Import(name="startLineNumber")
    private @Nullable Output<Integer> startLineNumber;

    /**
     * @return Line number from where to start returning file lines.
     * 
     */
    public Optional<Output<Integer>> startLineNumber() {
        return Optional.ofNullable(this.startLineNumber);
    }

    private GetRepositoryFileLineArgs() {}

    private GetRepositoryFileLineArgs(GetRepositoryFileLineArgs $) {
        this.filePath = $.filePath;
        this.repositoryId = $.repositoryId;
        this.revision = $.revision;
        this.startLineNumber = $.startLineNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryFileLineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryFileLineArgs $;

        public Builder() {
            $ = new GetRepositoryFileLineArgs();
        }

        public Builder(GetRepositoryFileLineArgs defaults) {
            $ = new GetRepositoryFileLineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filePath A filter to return file contents of the specified paths.
         * 
         * @return builder
         * 
         */
        public Builder filePath(Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath A filter to return file contents of the specified paths.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param revision Retrieve file lines from specific revision.
         * 
         * @return builder
         * 
         */
        public Builder revision(Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision Retrieve file lines from specific revision.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        /**
         * @param startLineNumber Line number from where to start returning file lines.
         * 
         * @return builder
         * 
         */
        public Builder startLineNumber(@Nullable Output<Integer> startLineNumber) {
            $.startLineNumber = startLineNumber;
            return this;
        }

        /**
         * @param startLineNumber Line number from where to start returning file lines.
         * 
         * @return builder
         * 
         */
        public Builder startLineNumber(Integer startLineNumber) {
            return startLineNumber(Output.of(startLineNumber));
        }

        public GetRepositoryFileLineArgs build() {
            if ($.filePath == null) {
                throw new MissingRequiredPropertyException("GetRepositoryFileLineArgs", "filePath");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetRepositoryFileLineArgs", "repositoryId");
            }
            if ($.revision == null) {
                throw new MissingRequiredPropertyException("GetRepositoryFileLineArgs", "revision");
            }
            return $;
        }
    }

}
