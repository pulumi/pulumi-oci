// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.inputs.GetRepositoryProtectedBranchesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryProtectedBranchesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryProtectedBranchesArgs Empty = new GetRepositoryProtectedBranchesArgs();

    @Import(name="filters")
    private @Nullable Output<List<GetRepositoryProtectedBranchesFilterArgs>> filters;

    public Optional<Output<List<GetRepositoryProtectedBranchesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * A filter to return only resources that match the given branch name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A filter to return only resources that match the given branch name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique repository identifier.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    private GetRepositoryProtectedBranchesArgs() {}

    private GetRepositoryProtectedBranchesArgs(GetRepositoryProtectedBranchesArgs $) {
        this.filters = $.filters;
        this.name = $.name;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryProtectedBranchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryProtectedBranchesArgs $;

        public Builder() {
            $ = new GetRepositoryProtectedBranchesArgs();
        }

        public Builder(GetRepositoryProtectedBranchesArgs defaults) {
            $ = new GetRepositoryProtectedBranchesArgs(Objects.requireNonNull(defaults));
        }

        public Builder filters(@Nullable Output<List<GetRepositoryProtectedBranchesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetRepositoryProtectedBranchesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetRepositoryProtectedBranchesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param name A filter to return only resources that match the given branch name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A filter to return only resources that match the given branch name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public GetRepositoryProtectedBranchesArgs build() {
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetRepositoryProtectedBranchesArgs", "repositoryId");
            }
            return $;
        }
    }

}
