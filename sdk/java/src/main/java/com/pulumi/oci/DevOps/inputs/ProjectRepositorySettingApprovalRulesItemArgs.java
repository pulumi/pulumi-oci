// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.inputs.ProjectRepositorySettingApprovalRulesItemReviewerArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectRepositorySettingApprovalRulesItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectRepositorySettingApprovalRulesItemArgs Empty = new ProjectRepositorySettingApprovalRulesItemArgs();

    /**
     * (Updatable) Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
     * 
     */
    @Import(name="destinationBranch")
    private @Nullable Output<String> destinationBranch;

    /**
     * @return (Updatable) Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
     * 
     */
    public Optional<Output<String>> destinationBranch() {
        return Optional.ofNullable(this.destinationBranch);
    }

    /**
     * (Updatable) Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
     * 
     */
    @Import(name="minApprovalsCount", required=true)
    private Output<Integer> minApprovalsCount;

    /**
     * @return (Updatable) Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
     * 
     */
    public Output<Integer> minApprovalsCount() {
        return this.minApprovalsCount;
    }

    /**
     * (Updatable) Name which is used to uniquely identify an approval rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return (Updatable) Name which is used to uniquely identify an approval rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * (Updatable) List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
     * 
     */
    @Import(name="reviewers")
    private @Nullable Output<List<ProjectRepositorySettingApprovalRulesItemReviewerArgs>> reviewers;

    /**
     * @return (Updatable) List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
     * 
     */
    public Optional<Output<List<ProjectRepositorySettingApprovalRulesItemReviewerArgs>>> reviewers() {
        return Optional.ofNullable(this.reviewers);
    }

    private ProjectRepositorySettingApprovalRulesItemArgs() {}

    private ProjectRepositorySettingApprovalRulesItemArgs(ProjectRepositorySettingApprovalRulesItemArgs $) {
        this.destinationBranch = $.destinationBranch;
        this.minApprovalsCount = $.minApprovalsCount;
        this.name = $.name;
        this.reviewers = $.reviewers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectRepositorySettingApprovalRulesItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectRepositorySettingApprovalRulesItemArgs $;

        public Builder() {
            $ = new ProjectRepositorySettingApprovalRulesItemArgs();
        }

        public Builder(ProjectRepositorySettingApprovalRulesItemArgs defaults) {
            $ = new ProjectRepositorySettingApprovalRulesItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationBranch (Updatable) Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
         * 
         * @return builder
         * 
         */
        public Builder destinationBranch(@Nullable Output<String> destinationBranch) {
            $.destinationBranch = destinationBranch;
            return this;
        }

        /**
         * @param destinationBranch (Updatable) Branch name where pull requests targeting the branch must satisfy the approval rule. This value being null means the rule applies to all pull requests
         * 
         * @return builder
         * 
         */
        public Builder destinationBranch(String destinationBranch) {
            return destinationBranch(Output.of(destinationBranch));
        }

        /**
         * @param minApprovalsCount (Updatable) Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
         * 
         * @return builder
         * 
         */
        public Builder minApprovalsCount(Output<Integer> minApprovalsCount) {
            $.minApprovalsCount = minApprovalsCount;
            return this;
        }

        /**
         * @param minApprovalsCount (Updatable) Minimum number of approvals which must be provided by the reviewers specified in the list before the rule can be satisfied
         * 
         * @return builder
         * 
         */
        public Builder minApprovalsCount(Integer minApprovalsCount) {
            return minApprovalsCount(Output.of(minApprovalsCount));
        }

        /**
         * @param name (Updatable) Name which is used to uniquely identify an approval rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Updatable) Name which is used to uniquely identify an approval rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param reviewers (Updatable) List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
         * 
         * @return builder
         * 
         */
        public Builder reviewers(@Nullable Output<List<ProjectRepositorySettingApprovalRulesItemReviewerArgs>> reviewers) {
            $.reviewers = reviewers;
            return this;
        }

        /**
         * @param reviewers (Updatable) List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
         * 
         * @return builder
         * 
         */
        public Builder reviewers(List<ProjectRepositorySettingApprovalRulesItemReviewerArgs> reviewers) {
            return reviewers(Output.of(reviewers));
        }

        /**
         * @param reviewers (Updatable) List of users who must provide approvals up to the minApprovalsCount specified in the rule. An empty list means the approvals can come from any user.
         * 
         * @return builder
         * 
         */
        public Builder reviewers(ProjectRepositorySettingApprovalRulesItemReviewerArgs... reviewers) {
            return reviewers(List.of(reviewers));
        }

        public ProjectRepositorySettingApprovalRulesItemArgs build() {
            if ($.minApprovalsCount == null) {
                throw new MissingRequiredPropertyException("ProjectRepositorySettingApprovalRulesItemArgs", "minApprovalsCount");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProjectRepositorySettingApprovalRulesItemArgs", "name");
            }
            return $;
        }
    }

}
