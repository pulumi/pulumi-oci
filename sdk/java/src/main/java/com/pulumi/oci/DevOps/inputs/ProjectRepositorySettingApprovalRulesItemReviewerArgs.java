// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectRepositorySettingApprovalRulesItemReviewerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectRepositorySettingApprovalRulesItemReviewerArgs Empty = new ProjectRepositorySettingApprovalRulesItemReviewerArgs();

    /**
     * (Updatable) Pull Request reviewer id
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return (Updatable) Pull Request reviewer id
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * the name of the principal
     * 
     */
    @Import(name="principalName")
    private @Nullable Output<String> principalName;

    /**
     * @return the name of the principal
     * 
     */
    public Optional<Output<String>> principalName() {
        return Optional.ofNullable(this.principalName);
    }

    /**
     * The state of the principal, it can be active or inactive or suppressed for emails
     * 
     */
    @Import(name="principalState")
    private @Nullable Output<String> principalState;

    /**
     * @return The state of the principal, it can be active or inactive or suppressed for emails
     * 
     */
    public Optional<Output<String>> principalState() {
        return Optional.ofNullable(this.principalState);
    }

    /**
     * the type of principal
     * 
     */
    @Import(name="principalType")
    private @Nullable Output<String> principalType;

    /**
     * @return the type of principal
     * 
     */
    public Optional<Output<String>> principalType() {
        return Optional.ofNullable(this.principalType);
    }

    private ProjectRepositorySettingApprovalRulesItemReviewerArgs() {}

    private ProjectRepositorySettingApprovalRulesItemReviewerArgs(ProjectRepositorySettingApprovalRulesItemReviewerArgs $) {
        this.principalId = $.principalId;
        this.principalName = $.principalName;
        this.principalState = $.principalState;
        this.principalType = $.principalType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectRepositorySettingApprovalRulesItemReviewerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectRepositorySettingApprovalRulesItemReviewerArgs $;

        public Builder() {
            $ = new ProjectRepositorySettingApprovalRulesItemReviewerArgs();
        }

        public Builder(ProjectRepositorySettingApprovalRulesItemReviewerArgs defaults) {
            $ = new ProjectRepositorySettingApprovalRulesItemReviewerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param principalId (Updatable) Pull Request reviewer id
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId (Updatable) Pull Request reviewer id
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalName the name of the principal
         * 
         * @return builder
         * 
         */
        public Builder principalName(@Nullable Output<String> principalName) {
            $.principalName = principalName;
            return this;
        }

        /**
         * @param principalName the name of the principal
         * 
         * @return builder
         * 
         */
        public Builder principalName(String principalName) {
            return principalName(Output.of(principalName));
        }

        /**
         * @param principalState The state of the principal, it can be active or inactive or suppressed for emails
         * 
         * @return builder
         * 
         */
        public Builder principalState(@Nullable Output<String> principalState) {
            $.principalState = principalState;
            return this;
        }

        /**
         * @param principalState The state of the principal, it can be active or inactive or suppressed for emails
         * 
         * @return builder
         * 
         */
        public Builder principalState(String principalState) {
            return principalState(Output.of(principalState));
        }

        /**
         * @param principalType the type of principal
         * 
         * @return builder
         * 
         */
        public Builder principalType(@Nullable Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType the type of principal
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        public ProjectRepositorySettingApprovalRulesItemReviewerArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("ProjectRepositorySettingApprovalRulesItemReviewerArgs", "principalId");
            }
            return $;
        }
    }

}
