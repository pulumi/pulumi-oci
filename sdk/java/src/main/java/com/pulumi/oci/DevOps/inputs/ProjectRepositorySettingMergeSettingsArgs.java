// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ProjectRepositorySettingMergeSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectRepositorySettingMergeSettingsArgs Empty = new ProjectRepositorySettingMergeSettingsArgs();

    /**
     * (Updatable) List of merge strategies which are allowed for a Project or Repository.
     * 
     */
    @Import(name="allowedMergeStrategies", required=true)
    private Output<List<String>> allowedMergeStrategies;

    /**
     * @return (Updatable) List of merge strategies which are allowed for a Project or Repository.
     * 
     */
    public Output<List<String>> allowedMergeStrategies() {
        return this.allowedMergeStrategies;
    }

    /**
     * (Updatable) Default type of merge strategy associated with the a Project or Repository.
     * 
     */
    @Import(name="defaultMergeStrategy", required=true)
    private Output<String> defaultMergeStrategy;

    /**
     * @return (Updatable) Default type of merge strategy associated with the a Project or Repository.
     * 
     */
    public Output<String> defaultMergeStrategy() {
        return this.defaultMergeStrategy;
    }

    private ProjectRepositorySettingMergeSettingsArgs() {}

    private ProjectRepositorySettingMergeSettingsArgs(ProjectRepositorySettingMergeSettingsArgs $) {
        this.allowedMergeStrategies = $.allowedMergeStrategies;
        this.defaultMergeStrategy = $.defaultMergeStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectRepositorySettingMergeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectRepositorySettingMergeSettingsArgs $;

        public Builder() {
            $ = new ProjectRepositorySettingMergeSettingsArgs();
        }

        public Builder(ProjectRepositorySettingMergeSettingsArgs defaults) {
            $ = new ProjectRepositorySettingMergeSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedMergeStrategies (Updatable) List of merge strategies which are allowed for a Project or Repository.
         * 
         * @return builder
         * 
         */
        public Builder allowedMergeStrategies(Output<List<String>> allowedMergeStrategies) {
            $.allowedMergeStrategies = allowedMergeStrategies;
            return this;
        }

        /**
         * @param allowedMergeStrategies (Updatable) List of merge strategies which are allowed for a Project or Repository.
         * 
         * @return builder
         * 
         */
        public Builder allowedMergeStrategies(List<String> allowedMergeStrategies) {
            return allowedMergeStrategies(Output.of(allowedMergeStrategies));
        }

        /**
         * @param allowedMergeStrategies (Updatable) List of merge strategies which are allowed for a Project or Repository.
         * 
         * @return builder
         * 
         */
        public Builder allowedMergeStrategies(String... allowedMergeStrategies) {
            return allowedMergeStrategies(List.of(allowedMergeStrategies));
        }

        /**
         * @param defaultMergeStrategy (Updatable) Default type of merge strategy associated with the a Project or Repository.
         * 
         * @return builder
         * 
         */
        public Builder defaultMergeStrategy(Output<String> defaultMergeStrategy) {
            $.defaultMergeStrategy = defaultMergeStrategy;
            return this;
        }

        /**
         * @param defaultMergeStrategy (Updatable) Default type of merge strategy associated with the a Project or Repository.
         * 
         * @return builder
         * 
         */
        public Builder defaultMergeStrategy(String defaultMergeStrategy) {
            return defaultMergeStrategy(Output.of(defaultMergeStrategy));
        }

        public ProjectRepositorySettingMergeSettingsArgs build() {
            if ($.allowedMergeStrategies == null) {
                throw new MissingRequiredPropertyException("ProjectRepositorySettingMergeSettingsArgs", "allowedMergeStrategies");
            }
            if ($.defaultMergeStrategy == null) {
                throw new MissingRequiredPropertyException("ProjectRepositorySettingMergeSettingsArgs", "defaultMergeStrategy");
            }
            return $;
        }
    }

}
