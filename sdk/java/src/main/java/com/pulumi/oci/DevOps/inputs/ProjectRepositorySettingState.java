// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.ProjectRepositorySettingApprovalRulesArgs;
import com.pulumi.oci.DevOps.inputs.ProjectRepositorySettingMergeSettingsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectRepositorySettingState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectRepositorySettingState Empty = new ProjectRepositorySettingState();

    /**
     * (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    @Import(name="approvalRules")
    private @Nullable Output<ProjectRepositorySettingApprovalRulesArgs> approvalRules;

    /**
     * @return (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    public Optional<Output<ProjectRepositorySettingApprovalRulesArgs>> approvalRules() {
        return Optional.ofNullable(this.approvalRules);
    }

    /**
     * (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    @Import(name="mergeSettings")
    private @Nullable Output<ProjectRepositorySettingMergeSettingsArgs> mergeSettings;

    /**
     * @return (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    public Optional<Output<ProjectRepositorySettingMergeSettingsArgs>> mergeSettings() {
        return Optional.ofNullable(this.mergeSettings);
    }

    /**
     * Unique project identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique project identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private ProjectRepositorySettingState() {}

    private ProjectRepositorySettingState(ProjectRepositorySettingState $) {
        this.approvalRules = $.approvalRules;
        this.mergeSettings = $.mergeSettings;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectRepositorySettingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectRepositorySettingState $;

        public Builder() {
            $ = new ProjectRepositorySettingState();
        }

        public Builder(ProjectRepositorySettingState defaults) {
            $ = new ProjectRepositorySettingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvalRules (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
         * 
         * @return builder
         * 
         */
        public Builder approvalRules(@Nullable Output<ProjectRepositorySettingApprovalRulesArgs> approvalRules) {
            $.approvalRules = approvalRules;
            return this;
        }

        /**
         * @param approvalRules (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
         * 
         * @return builder
         * 
         */
        public Builder approvalRules(ProjectRepositorySettingApprovalRulesArgs approvalRules) {
            return approvalRules(Output.of(approvalRules));
        }

        /**
         * @param mergeSettings (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
         * 
         * @return builder
         * 
         */
        public Builder mergeSettings(@Nullable Output<ProjectRepositorySettingMergeSettingsArgs> mergeSettings) {
            $.mergeSettings = mergeSettings;
            return this;
        }

        /**
         * @param mergeSettings (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
         * 
         * @return builder
         * 
         */
        public Builder mergeSettings(ProjectRepositorySettingMergeSettingsArgs mergeSettings) {
            return mergeSettings(Output.of(mergeSettings));
        }

        /**
         * @param projectId Unique project identifier.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique project identifier.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public ProjectRepositorySettingState build() {
            return $;
        }
    }

}
