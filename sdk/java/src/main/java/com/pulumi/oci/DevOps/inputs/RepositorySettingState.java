// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.RepositorySettingApprovalRulesArgs;
import com.pulumi.oci.DevOps.inputs.RepositorySettingMergeChecksArgs;
import com.pulumi.oci.DevOps.inputs.RepositorySettingMergeSettingsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositorySettingState extends com.pulumi.resources.ResourceArgs {

    public static final RepositorySettingState Empty = new RepositorySettingState();

    /**
     * (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    @Import(name="approvalRules")
    private @Nullable Output<RepositorySettingApprovalRulesArgs> approvalRules;

    /**
     * @return (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     * 
     */
    public Optional<Output<RepositorySettingApprovalRulesArgs>> approvalRules() {
        return Optional.ofNullable(this.approvalRules);
    }

    /**
     * (Updatable) Criteria which must be satisfied to merge a pull request.
     * 
     */
    @Import(name="mergeChecks")
    private @Nullable Output<RepositorySettingMergeChecksArgs> mergeChecks;

    /**
     * @return (Updatable) Criteria which must be satisfied to merge a pull request.
     * 
     */
    public Optional<Output<RepositorySettingMergeChecksArgs>> mergeChecks() {
        return Optional.ofNullable(this.mergeChecks);
    }

    /**
     * (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    @Import(name="mergeSettings")
    private @Nullable Output<RepositorySettingMergeSettingsArgs> mergeSettings;

    /**
     * @return (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     * 
     */
    public Optional<Output<RepositorySettingMergeSettingsArgs>> mergeSettings() {
        return Optional.ofNullable(this.mergeSettings);
    }

    /**
     * Unique repository identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    /**
     * @return Unique repository identifier.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    private RepositorySettingState() {}

    private RepositorySettingState(RepositorySettingState $) {
        this.approvalRules = $.approvalRules;
        this.mergeChecks = $.mergeChecks;
        this.mergeSettings = $.mergeSettings;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositorySettingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositorySettingState $;

        public Builder() {
            $ = new RepositorySettingState();
        }

        public Builder(RepositorySettingState defaults) {
            $ = new RepositorySettingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvalRules (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
         * 
         * @return builder
         * 
         */
        public Builder approvalRules(@Nullable Output<RepositorySettingApprovalRulesArgs> approvalRules) {
            $.approvalRules = approvalRules;
            return this;
        }

        /**
         * @param approvalRules (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
         * 
         * @return builder
         * 
         */
        public Builder approvalRules(RepositorySettingApprovalRulesArgs approvalRules) {
            return approvalRules(Output.of(approvalRules));
        }

        /**
         * @param mergeChecks (Updatable) Criteria which must be satisfied to merge a pull request.
         * 
         * @return builder
         * 
         */
        public Builder mergeChecks(@Nullable Output<RepositorySettingMergeChecksArgs> mergeChecks) {
            $.mergeChecks = mergeChecks;
            return this;
        }

        /**
         * @param mergeChecks (Updatable) Criteria which must be satisfied to merge a pull request.
         * 
         * @return builder
         * 
         */
        public Builder mergeChecks(RepositorySettingMergeChecksArgs mergeChecks) {
            return mergeChecks(Output.of(mergeChecks));
        }

        /**
         * @param mergeSettings (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
         * 
         * @return builder
         * 
         */
        public Builder mergeSettings(@Nullable Output<RepositorySettingMergeSettingsArgs> mergeSettings) {
            $.mergeSettings = mergeSettings;
            return this;
        }

        /**
         * @param mergeSettings (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
         * 
         * @return builder
         * 
         */
        public Builder mergeSettings(RepositorySettingMergeSettingsArgs mergeSettings) {
            return mergeSettings(Output.of(mergeSettings));
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId Unique repository identifier.
         * 
         * ** IMPORTANT **
         * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public RepositorySettingState build() {
            return $;
        }
    }

}
