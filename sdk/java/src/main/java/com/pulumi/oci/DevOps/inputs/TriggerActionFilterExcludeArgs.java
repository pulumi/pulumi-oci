// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.DevOps.inputs.TriggerActionFilterExcludeFileFilterArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerActionFilterExcludeArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerActionFilterExcludeArgs Empty = new TriggerActionFilterExcludeArgs();

    /**
     * Attributes to support include/exclude files for triggering build runs.
     * 
     */
    @Import(name="fileFilter")
    private @Nullable Output<TriggerActionFilterExcludeFileFilterArgs> fileFilter;

    /**
     * @return Attributes to support include/exclude files for triggering build runs.
     * 
     */
    public Optional<Output<TriggerActionFilterExcludeFileFilterArgs>> fileFilter() {
        return Optional.ofNullable(this.fileFilter);
    }

    private TriggerActionFilterExcludeArgs() {}

    private TriggerActionFilterExcludeArgs(TriggerActionFilterExcludeArgs $) {
        this.fileFilter = $.fileFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerActionFilterExcludeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerActionFilterExcludeArgs $;

        public Builder() {
            $ = new TriggerActionFilterExcludeArgs();
        }

        public Builder(TriggerActionFilterExcludeArgs defaults) {
            $ = new TriggerActionFilterExcludeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileFilter Attributes to support include/exclude files for triggering build runs.
         * 
         * @return builder
         * 
         */
        public Builder fileFilter(@Nullable Output<TriggerActionFilterExcludeFileFilterArgs> fileFilter) {
            $.fileFilter = fileFilter;
            return this;
        }

        /**
         * @param fileFilter Attributes to support include/exclude files for triggering build runs.
         * 
         * @return builder
         * 
         */
        public Builder fileFilter(TriggerActionFilterExcludeFileFilterArgs fileFilter) {
            return fileFilter(Output.of(fileFilter));
        }

        public TriggerActionFilterExcludeArgs build() {
            return $;
        }
    }

}
