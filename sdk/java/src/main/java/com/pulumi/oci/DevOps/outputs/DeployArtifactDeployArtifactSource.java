// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.DeployArtifactDeployArtifactSourceHelmVerificationKeySource;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeployArtifactDeployArtifactSource {
    /**
     * @return (Updatable) The Helm commands to be executed, base 64 encoded
     * 
     */
    private @Nullable String base64encodedContent;
    /**
     * @return (Updatable) The URL of an OCIR repository.
     * 
     */
    private @Nullable String chartUrl;
    /**
     * @return (Updatable) Specifies the artifact path in the repository.
     * 
     */
    private @Nullable String deployArtifactPath;
    /**
     * @return (Updatable) Specifies types of artifact sources.
     * 
     */
    private String deployArtifactSourceType;
    /**
     * @return (Updatable) Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    private @Nullable String deployArtifactVersion;
    /**
     * @return (Updatable) Specifies types of artifact sources.
     * 
     */
    private @Nullable String helmArtifactSourceType;
    /**
     * @return (Updatable) The source of the verification material.
     * 
     */
    private @Nullable DeployArtifactDeployArtifactSourceHelmVerificationKeySource helmVerificationKeySource;
    /**
     * @return (Updatable) Specifies image digest for the version of the image.
     * 
     */
    private @Nullable String imageDigest;
    /**
     * @return (Updatable) Specifies OCIR Image Path - optionally include tag.
     * 
     */
    private @Nullable String imageUri;
    /**
     * @return (Updatable) The OCID of a repository
     * 
     */
    private @Nullable String repositoryId;

    private DeployArtifactDeployArtifactSource() {}
    /**
     * @return (Updatable) The Helm commands to be executed, base 64 encoded
     * 
     */
    public Optional<String> base64encodedContent() {
        return Optional.ofNullable(this.base64encodedContent);
    }
    /**
     * @return (Updatable) The URL of an OCIR repository.
     * 
     */
    public Optional<String> chartUrl() {
        return Optional.ofNullable(this.chartUrl);
    }
    /**
     * @return (Updatable) Specifies the artifact path in the repository.
     * 
     */
    public Optional<String> deployArtifactPath() {
        return Optional.ofNullable(this.deployArtifactPath);
    }
    /**
     * @return (Updatable) Specifies types of artifact sources.
     * 
     */
    public String deployArtifactSourceType() {
        return this.deployArtifactSourceType;
    }
    /**
     * @return (Updatable) Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    public Optional<String> deployArtifactVersion() {
        return Optional.ofNullable(this.deployArtifactVersion);
    }
    /**
     * @return (Updatable) Specifies types of artifact sources.
     * 
     */
    public Optional<String> helmArtifactSourceType() {
        return Optional.ofNullable(this.helmArtifactSourceType);
    }
    /**
     * @return (Updatable) The source of the verification material.
     * 
     */
    public Optional<DeployArtifactDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySource() {
        return Optional.ofNullable(this.helmVerificationKeySource);
    }
    /**
     * @return (Updatable) Specifies image digest for the version of the image.
     * 
     */
    public Optional<String> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }
    /**
     * @return (Updatable) Specifies OCIR Image Path - optionally include tag.
     * 
     */
    public Optional<String> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }
    /**
     * @return (Updatable) The OCID of a repository
     * 
     */
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeployArtifactDeployArtifactSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String base64encodedContent;
        private @Nullable String chartUrl;
        private @Nullable String deployArtifactPath;
        private String deployArtifactSourceType;
        private @Nullable String deployArtifactVersion;
        private @Nullable String helmArtifactSourceType;
        private @Nullable DeployArtifactDeployArtifactSourceHelmVerificationKeySource helmVerificationKeySource;
        private @Nullable String imageDigest;
        private @Nullable String imageUri;
        private @Nullable String repositoryId;
        public Builder() {}
        public Builder(DeployArtifactDeployArtifactSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64encodedContent = defaults.base64encodedContent;
    	      this.chartUrl = defaults.chartUrl;
    	      this.deployArtifactPath = defaults.deployArtifactPath;
    	      this.deployArtifactSourceType = defaults.deployArtifactSourceType;
    	      this.deployArtifactVersion = defaults.deployArtifactVersion;
    	      this.helmArtifactSourceType = defaults.helmArtifactSourceType;
    	      this.helmVerificationKeySource = defaults.helmVerificationKeySource;
    	      this.imageDigest = defaults.imageDigest;
    	      this.imageUri = defaults.imageUri;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder base64encodedContent(@Nullable String base64encodedContent) {

            this.base64encodedContent = base64encodedContent;
            return this;
        }
        @CustomType.Setter
        public Builder chartUrl(@Nullable String chartUrl) {

            this.chartUrl = chartUrl;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactPath(@Nullable String deployArtifactPath) {

            this.deployArtifactPath = deployArtifactPath;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactSourceType(String deployArtifactSourceType) {
            if (deployArtifactSourceType == null) {
              throw new MissingRequiredPropertyException("DeployArtifactDeployArtifactSource", "deployArtifactSourceType");
            }
            this.deployArtifactSourceType = deployArtifactSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactVersion(@Nullable String deployArtifactVersion) {

            this.deployArtifactVersion = deployArtifactVersion;
            return this;
        }
        @CustomType.Setter
        public Builder helmArtifactSourceType(@Nullable String helmArtifactSourceType) {

            this.helmArtifactSourceType = helmArtifactSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder helmVerificationKeySource(@Nullable DeployArtifactDeployArtifactSourceHelmVerificationKeySource helmVerificationKeySource) {

            this.helmVerificationKeySource = helmVerificationKeySource;
            return this;
        }
        @CustomType.Setter
        public Builder imageDigest(@Nullable String imageDigest) {

            this.imageDigest = imageDigest;
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(@Nullable String imageUri) {

            this.imageUri = imageUri;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(@Nullable String repositoryId) {

            this.repositoryId = repositoryId;
            return this;
        }
        public DeployArtifactDeployArtifactSource build() {
            final var _resultValue = new DeployArtifactDeployArtifactSource();
            _resultValue.base64encodedContent = base64encodedContent;
            _resultValue.chartUrl = chartUrl;
            _resultValue.deployArtifactPath = deployArtifactPath;
            _resultValue.deployArtifactSourceType = deployArtifactSourceType;
            _resultValue.deployArtifactVersion = deployArtifactVersion;
            _resultValue.helmArtifactSourceType = helmArtifactSourceType;
            _resultValue.helmVerificationKeySource = helmVerificationKeySource;
            _resultValue.imageDigest = imageDigest;
            _resultValue.imageUri = imageUri;
            _resultValue.repositoryId = repositoryId;
            return _resultValue;
        }
    }
}
