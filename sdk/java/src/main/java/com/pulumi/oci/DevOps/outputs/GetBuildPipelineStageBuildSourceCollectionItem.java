// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBuildPipelineStageBuildSourceCollectionItem {
    /**
     * @return Branch name.
     * 
     */
    private String branch;
    /**
     * @return Connection identifier pertinent to Bitbucket Server source provider
     * 
     */
    private String connectionId;
    /**
     * @return The type of source provider.
     * 
     */
    private String connectionType;
    /**
     * @return Name of the build source. This must be unique within a build source collection. The name can be used by customers to locate the working directory pertinent to this repository.
     * 
     */
    private String name;
    /**
     * @return The DevOps code repository ID.
     * 
     */
    private String repositoryId;
    /**
     * @return URL for the repository.
     * 
     */
    private String repositoryUrl;

    private GetBuildPipelineStageBuildSourceCollectionItem() {}
    /**
     * @return Branch name.
     * 
     */
    public String branch() {
        return this.branch;
    }
    /**
     * @return Connection identifier pertinent to Bitbucket Server source provider
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return The type of source provider.
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return Name of the build source. This must be unique within a build source collection. The name can be used by customers to locate the working directory pertinent to this repository.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The DevOps code repository ID.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return URL for the repository.
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBuildPipelineStageBuildSourceCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branch;
        private String connectionId;
        private String connectionType;
        private String name;
        private String repositoryId;
        private String repositoryUrl;
        public Builder() {}
        public Builder(GetBuildPipelineStageBuildSourceCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionType = defaults.connectionType;
    	      this.name = defaults.name;
    	      this.repositoryId = defaults.repositoryId;
    	      this.repositoryUrl = defaults.repositoryUrl;
        }

        @CustomType.Setter
        public Builder branch(String branch) {
            if (branch == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageBuildSourceCollectionItem", "branch");
            }
            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageBuildSourceCollectionItem", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            if (connectionType == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageBuildSourceCollectionItem", "connectionType");
            }
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageBuildSourceCollectionItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageBuildSourceCollectionItem", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(String repositoryUrl) {
            if (repositoryUrl == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageBuildSourceCollectionItem", "repositoryUrl");
            }
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        public GetBuildPipelineStageBuildSourceCollectionItem build() {
            final var _resultValue = new GetBuildPipelineStageBuildSourceCollectionItem();
            _resultValue.branch = branch;
            _resultValue.connectionId = connectionId;
            _resultValue.connectionType = connectionType;
            _resultValue.name = name;
            _resultValue.repositoryId = repositoryId;
            _resultValue.repositoryUrl = repositoryUrl;
            return _resultValue;
        }
    }
}
