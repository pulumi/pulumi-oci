// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetBuildPipelineStageBuildPipelineStagePredecessorCollection;
import com.pulumi.oci.DevOps.outputs.GetBuildPipelineStageBuildRunnerShapeConfig;
import com.pulumi.oci.DevOps.outputs.GetBuildPipelineStageBuildSourceCollection;
import com.pulumi.oci.DevOps.outputs.GetBuildPipelineStageDeliverArtifactCollection;
import com.pulumi.oci.DevOps.outputs.GetBuildPipelineStagePrivateAccessConfig;
import com.pulumi.oci.DevOps.outputs.GetBuildPipelineStageWaitCriteria;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBuildPipelineStageResult {
    /**
     * @return The OCID of the build pipeline.
     * 
     */
    private String buildPipelineId;
    private String buildPipelineStageId;
    /**
     * @return The collection containing the predecessors of a stage.
     * 
     */
    private List<GetBuildPipelineStageBuildPipelineStagePredecessorCollection> buildPipelineStagePredecessorCollections;
    /**
     * @return Defines the stage type, which is one of the following: BUILD, DELIVER_ARTIFACT, WAIT, and TRIGGER_DEPLOYMENT_PIPELINE.
     * 
     */
    private String buildPipelineStageType;
    /**
     * @return The information about build runner.
     * 
     */
    private List<GetBuildPipelineStageBuildRunnerShapeConfig> buildRunnerShapeConfigs;
    /**
     * @return Collection of build sources.
     * 
     */
    private List<GetBuildPipelineStageBuildSourceCollection> buildSourceCollections;
    /**
     * @return The path to the build specification file for this environment. The default location of the file if not specified is build_spec.yaml.
     * 
     */
    private String buildSpecFile;
    /**
     * @return The OCID of the compartment where the pipeline is created.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Specifies an array of artifacts that need to be pushed to the artifactory stores.
     * 
     */
    private List<GetBuildPipelineStageDeliverArtifactCollection> deliverArtifactCollections;
    /**
     * @return A target deployment pipeline OCID that will run in this stage.
     * 
     */
    private String deployPipelineId;
    /**
     * @return Optional description about the build stage.
     * 
     */
    private String description;
    /**
     * @return Stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return Image name for the build environment.
     * 
     */
    private String image;
    /**
     * @return A boolean flag that specifies whether all the parameters must be passed when the deployment is triggered.
     * 
     */
    private Boolean isPassAllParametersEnabled;
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Name of the build source where the build_spec.yml file is located. If not specified, then the first entry in the build source collection is chosen as primary build source.
     * 
     */
    private String primaryBuildSource;
    /**
     * @return Specifies the configuration needed when the target Oracle Cloud Infrastructure resource, i.e., OKE cluster, resides in customer&#39;s private network.
     * 
     */
    private List<GetBuildPipelineStagePrivateAccessConfig> privateAccessConfigs;
    /**
     * @return The OCID of the DevOps project.
     * 
     */
    private String projectId;
    /**
     * @return Timeout for the build stage execution. Specify value in seconds.
     * 
     */
    private Integer stageExecutionTimeoutInSeconds;
    /**
     * @return The current state of the stage.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time the stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The time the stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeUpdated;
    /**
     * @return Specifies wait criteria for the Wait stage.
     * 
     */
    private List<GetBuildPipelineStageWaitCriteria> waitCriterias;

    private GetBuildPipelineStageResult() {}
    /**
     * @return The OCID of the build pipeline.
     * 
     */
    public String buildPipelineId() {
        return this.buildPipelineId;
    }
    public String buildPipelineStageId() {
        return this.buildPipelineStageId;
    }
    /**
     * @return The collection containing the predecessors of a stage.
     * 
     */
    public List<GetBuildPipelineStageBuildPipelineStagePredecessorCollection> buildPipelineStagePredecessorCollections() {
        return this.buildPipelineStagePredecessorCollections;
    }
    /**
     * @return Defines the stage type, which is one of the following: BUILD, DELIVER_ARTIFACT, WAIT, and TRIGGER_DEPLOYMENT_PIPELINE.
     * 
     */
    public String buildPipelineStageType() {
        return this.buildPipelineStageType;
    }
    /**
     * @return The information about build runner.
     * 
     */
    public List<GetBuildPipelineStageBuildRunnerShapeConfig> buildRunnerShapeConfigs() {
        return this.buildRunnerShapeConfigs;
    }
    /**
     * @return Collection of build sources.
     * 
     */
    public List<GetBuildPipelineStageBuildSourceCollection> buildSourceCollections() {
        return this.buildSourceCollections;
    }
    /**
     * @return The path to the build specification file for this environment. The default location of the file if not specified is build_spec.yaml.
     * 
     */
    public String buildSpecFile() {
        return this.buildSpecFile;
    }
    /**
     * @return The OCID of the compartment where the pipeline is created.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Specifies an array of artifacts that need to be pushed to the artifactory stores.
     * 
     */
    public List<GetBuildPipelineStageDeliverArtifactCollection> deliverArtifactCollections() {
        return this.deliverArtifactCollections;
    }
    /**
     * @return A target deployment pipeline OCID that will run in this stage.
     * 
     */
    public String deployPipelineId() {
        return this.deployPipelineId;
    }
    /**
     * @return Optional description about the build stage.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Image name for the build environment.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return A boolean flag that specifies whether all the parameters must be passed when the deployment is triggered.
     * 
     */
    public Boolean isPassAllParametersEnabled() {
        return this.isPassAllParametersEnabled;
    }
    /**
     * @return A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Name of the build source where the build_spec.yml file is located. If not specified, then the first entry in the build source collection is chosen as primary build source.
     * 
     */
    public String primaryBuildSource() {
        return this.primaryBuildSource;
    }
    /**
     * @return Specifies the configuration needed when the target Oracle Cloud Infrastructure resource, i.e., OKE cluster, resides in customer&#39;s private network.
     * 
     */
    public List<GetBuildPipelineStagePrivateAccessConfig> privateAccessConfigs() {
        return this.privateAccessConfigs;
    }
    /**
     * @return The OCID of the DevOps project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Timeout for the build stage execution. Specify value in seconds.
     * 
     */
    public Integer stageExecutionTimeoutInSeconds() {
        return this.stageExecutionTimeoutInSeconds;
    }
    /**
     * @return The current state of the stage.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return Specifies wait criteria for the Wait stage.
     * 
     */
    public List<GetBuildPipelineStageWaitCriteria> waitCriterias() {
        return this.waitCriterias;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBuildPipelineStageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String buildPipelineId;
        private String buildPipelineStageId;
        private List<GetBuildPipelineStageBuildPipelineStagePredecessorCollection> buildPipelineStagePredecessorCollections;
        private String buildPipelineStageType;
        private List<GetBuildPipelineStageBuildRunnerShapeConfig> buildRunnerShapeConfigs;
        private List<GetBuildPipelineStageBuildSourceCollection> buildSourceCollections;
        private String buildSpecFile;
        private String compartmentId;
        private Map<String,String> definedTags;
        private List<GetBuildPipelineStageDeliverArtifactCollection> deliverArtifactCollections;
        private String deployPipelineId;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String image;
        private Boolean isPassAllParametersEnabled;
        private String lifecycleDetails;
        private String primaryBuildSource;
        private List<GetBuildPipelineStagePrivateAccessConfig> privateAccessConfigs;
        private String projectId;
        private Integer stageExecutionTimeoutInSeconds;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private List<GetBuildPipelineStageWaitCriteria> waitCriterias;
        public Builder() {}
        public Builder(GetBuildPipelineStageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.buildPipelineId = defaults.buildPipelineId;
    	      this.buildPipelineStageId = defaults.buildPipelineStageId;
    	      this.buildPipelineStagePredecessorCollections = defaults.buildPipelineStagePredecessorCollections;
    	      this.buildPipelineStageType = defaults.buildPipelineStageType;
    	      this.buildRunnerShapeConfigs = defaults.buildRunnerShapeConfigs;
    	      this.buildSourceCollections = defaults.buildSourceCollections;
    	      this.buildSpecFile = defaults.buildSpecFile;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.deliverArtifactCollections = defaults.deliverArtifactCollections;
    	      this.deployPipelineId = defaults.deployPipelineId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.isPassAllParametersEnabled = defaults.isPassAllParametersEnabled;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.primaryBuildSource = defaults.primaryBuildSource;
    	      this.privateAccessConfigs = defaults.privateAccessConfigs;
    	      this.projectId = defaults.projectId;
    	      this.stageExecutionTimeoutInSeconds = defaults.stageExecutionTimeoutInSeconds;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.waitCriterias = defaults.waitCriterias;
        }

        @CustomType.Setter
        public Builder buildPipelineId(String buildPipelineId) {
            if (buildPipelineId == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "buildPipelineId");
            }
            this.buildPipelineId = buildPipelineId;
            return this;
        }
        @CustomType.Setter
        public Builder buildPipelineStageId(String buildPipelineStageId) {
            if (buildPipelineStageId == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "buildPipelineStageId");
            }
            this.buildPipelineStageId = buildPipelineStageId;
            return this;
        }
        @CustomType.Setter
        public Builder buildPipelineStagePredecessorCollections(List<GetBuildPipelineStageBuildPipelineStagePredecessorCollection> buildPipelineStagePredecessorCollections) {
            if (buildPipelineStagePredecessorCollections == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "buildPipelineStagePredecessorCollections");
            }
            this.buildPipelineStagePredecessorCollections = buildPipelineStagePredecessorCollections;
            return this;
        }
        public Builder buildPipelineStagePredecessorCollections(GetBuildPipelineStageBuildPipelineStagePredecessorCollection... buildPipelineStagePredecessorCollections) {
            return buildPipelineStagePredecessorCollections(List.of(buildPipelineStagePredecessorCollections));
        }
        @CustomType.Setter
        public Builder buildPipelineStageType(String buildPipelineStageType) {
            if (buildPipelineStageType == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "buildPipelineStageType");
            }
            this.buildPipelineStageType = buildPipelineStageType;
            return this;
        }
        @CustomType.Setter
        public Builder buildRunnerShapeConfigs(List<GetBuildPipelineStageBuildRunnerShapeConfig> buildRunnerShapeConfigs) {
            if (buildRunnerShapeConfigs == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "buildRunnerShapeConfigs");
            }
            this.buildRunnerShapeConfigs = buildRunnerShapeConfigs;
            return this;
        }
        public Builder buildRunnerShapeConfigs(GetBuildPipelineStageBuildRunnerShapeConfig... buildRunnerShapeConfigs) {
            return buildRunnerShapeConfigs(List.of(buildRunnerShapeConfigs));
        }
        @CustomType.Setter
        public Builder buildSourceCollections(List<GetBuildPipelineStageBuildSourceCollection> buildSourceCollections) {
            if (buildSourceCollections == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "buildSourceCollections");
            }
            this.buildSourceCollections = buildSourceCollections;
            return this;
        }
        public Builder buildSourceCollections(GetBuildPipelineStageBuildSourceCollection... buildSourceCollections) {
            return buildSourceCollections(List.of(buildSourceCollections));
        }
        @CustomType.Setter
        public Builder buildSpecFile(String buildSpecFile) {
            if (buildSpecFile == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "buildSpecFile");
            }
            this.buildSpecFile = buildSpecFile;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder deliverArtifactCollections(List<GetBuildPipelineStageDeliverArtifactCollection> deliverArtifactCollections) {
            if (deliverArtifactCollections == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "deliverArtifactCollections");
            }
            this.deliverArtifactCollections = deliverArtifactCollections;
            return this;
        }
        public Builder deliverArtifactCollections(GetBuildPipelineStageDeliverArtifactCollection... deliverArtifactCollections) {
            return deliverArtifactCollections(List.of(deliverArtifactCollections));
        }
        @CustomType.Setter
        public Builder deployPipelineId(String deployPipelineId) {
            if (deployPipelineId == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "deployPipelineId");
            }
            this.deployPipelineId = deployPipelineId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder isPassAllParametersEnabled(Boolean isPassAllParametersEnabled) {
            if (isPassAllParametersEnabled == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "isPassAllParametersEnabled");
            }
            this.isPassAllParametersEnabled = isPassAllParametersEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder primaryBuildSource(String primaryBuildSource) {
            if (primaryBuildSource == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "primaryBuildSource");
            }
            this.primaryBuildSource = primaryBuildSource;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccessConfigs(List<GetBuildPipelineStagePrivateAccessConfig> privateAccessConfigs) {
            if (privateAccessConfigs == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "privateAccessConfigs");
            }
            this.privateAccessConfigs = privateAccessConfigs;
            return this;
        }
        public Builder privateAccessConfigs(GetBuildPipelineStagePrivateAccessConfig... privateAccessConfigs) {
            return privateAccessConfigs(List.of(privateAccessConfigs));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder stageExecutionTimeoutInSeconds(Integer stageExecutionTimeoutInSeconds) {
            if (stageExecutionTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "stageExecutionTimeoutInSeconds");
            }
            this.stageExecutionTimeoutInSeconds = stageExecutionTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder waitCriterias(List<GetBuildPipelineStageWaitCriteria> waitCriterias) {
            if (waitCriterias == null) {
              throw new MissingRequiredPropertyException("GetBuildPipelineStageResult", "waitCriterias");
            }
            this.waitCriterias = waitCriterias;
            return this;
        }
        public Builder waitCriterias(GetBuildPipelineStageWaitCriteria... waitCriterias) {
            return waitCriterias(List.of(waitCriterias));
        }
        public GetBuildPipelineStageResult build() {
            final var _resultValue = new GetBuildPipelineStageResult();
            _resultValue.buildPipelineId = buildPipelineId;
            _resultValue.buildPipelineStageId = buildPipelineStageId;
            _resultValue.buildPipelineStagePredecessorCollections = buildPipelineStagePredecessorCollections;
            _resultValue.buildPipelineStageType = buildPipelineStageType;
            _resultValue.buildRunnerShapeConfigs = buildRunnerShapeConfigs;
            _resultValue.buildSourceCollections = buildSourceCollections;
            _resultValue.buildSpecFile = buildSpecFile;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.deliverArtifactCollections = deliverArtifactCollections;
            _resultValue.deployPipelineId = deployPipelineId;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.image = image;
            _resultValue.isPassAllParametersEnabled = isPassAllParametersEnabled;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.primaryBuildSource = primaryBuildSource;
            _resultValue.privateAccessConfigs = privateAccessConfigs;
            _resultValue.projectId = projectId;
            _resultValue.stageExecutionTimeoutInSeconds = stageExecutionTimeoutInSeconds;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.waitCriterias = waitCriterias;
            return _resultValue;
        }
    }
}
