// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBuildRunBuildOutputDeliveredArtifactItem {
    /**
     * @return The OCID of the artifact registry repository used by the DeliverArtifactStage
     * 
     */
    private String artifactRepositoryId;
    /**
     * @return Type of artifact delivered.
     * 
     */
    private String artifactType;
    /**
     * @return The hash of the container registry artifact pushed by the Deliver Artifacts stage.
     * 
     */
    private String deliveredArtifactHash;
    /**
     * @return The OCID of the artifact pushed by the Deliver Artifacts stage.
     * 
     */
    private String deliveredArtifactId;
    /**
     * @return The OCID of the deployment artifact definition.
     * 
     */
    private String deployArtifactId;
    /**
     * @return The imageUri of the OCIR artifact pushed by the DeliverArtifactStage
     * 
     */
    private String imageUri;
    /**
     * @return Name of the output artifact defined in the build specification file.
     * 
     */
    private String outputArtifactName;
    /**
     * @return Path of the repository where artifact was pushed
     * 
     */
    private String path;
    /**
     * @return Version of the artifact pushed
     * 
     */
    private String version;

    private GetBuildRunBuildOutputDeliveredArtifactItem() {}
    /**
     * @return The OCID of the artifact registry repository used by the DeliverArtifactStage
     * 
     */
    public String artifactRepositoryId() {
        return this.artifactRepositoryId;
    }
    /**
     * @return Type of artifact delivered.
     * 
     */
    public String artifactType() {
        return this.artifactType;
    }
    /**
     * @return The hash of the container registry artifact pushed by the Deliver Artifacts stage.
     * 
     */
    public String deliveredArtifactHash() {
        return this.deliveredArtifactHash;
    }
    /**
     * @return The OCID of the artifact pushed by the Deliver Artifacts stage.
     * 
     */
    public String deliveredArtifactId() {
        return this.deliveredArtifactId;
    }
    /**
     * @return The OCID of the deployment artifact definition.
     * 
     */
    public String deployArtifactId() {
        return this.deployArtifactId;
    }
    /**
     * @return The imageUri of the OCIR artifact pushed by the DeliverArtifactStage
     * 
     */
    public String imageUri() {
        return this.imageUri;
    }
    /**
     * @return Name of the output artifact defined in the build specification file.
     * 
     */
    public String outputArtifactName() {
        return this.outputArtifactName;
    }
    /**
     * @return Path of the repository where artifact was pushed
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Version of the artifact pushed
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBuildRunBuildOutputDeliveredArtifactItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String artifactRepositoryId;
        private String artifactType;
        private String deliveredArtifactHash;
        private String deliveredArtifactId;
        private String deployArtifactId;
        private String imageUri;
        private String outputArtifactName;
        private String path;
        private String version;
        public Builder() {}
        public Builder(GetBuildRunBuildOutputDeliveredArtifactItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactRepositoryId = defaults.artifactRepositoryId;
    	      this.artifactType = defaults.artifactType;
    	      this.deliveredArtifactHash = defaults.deliveredArtifactHash;
    	      this.deliveredArtifactId = defaults.deliveredArtifactId;
    	      this.deployArtifactId = defaults.deployArtifactId;
    	      this.imageUri = defaults.imageUri;
    	      this.outputArtifactName = defaults.outputArtifactName;
    	      this.path = defaults.path;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder artifactRepositoryId(String artifactRepositoryId) {
            this.artifactRepositoryId = Objects.requireNonNull(artifactRepositoryId);
            return this;
        }
        @CustomType.Setter
        public Builder artifactType(String artifactType) {
            this.artifactType = Objects.requireNonNull(artifactType);
            return this;
        }
        @CustomType.Setter
        public Builder deliveredArtifactHash(String deliveredArtifactHash) {
            this.deliveredArtifactHash = Objects.requireNonNull(deliveredArtifactHash);
            return this;
        }
        @CustomType.Setter
        public Builder deliveredArtifactId(String deliveredArtifactId) {
            this.deliveredArtifactId = Objects.requireNonNull(deliveredArtifactId);
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactId(String deployArtifactId) {
            this.deployArtifactId = Objects.requireNonNull(deployArtifactId);
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(String imageUri) {
            this.imageUri = Objects.requireNonNull(imageUri);
            return this;
        }
        @CustomType.Setter
        public Builder outputArtifactName(String outputArtifactName) {
            this.outputArtifactName = Objects.requireNonNull(outputArtifactName);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetBuildRunBuildOutputDeliveredArtifactItem build() {
            final var o = new GetBuildRunBuildOutputDeliveredArtifactItem();
            o.artifactRepositoryId = artifactRepositoryId;
            o.artifactType = artifactType;
            o.deliveredArtifactHash = deliveredArtifactHash;
            o.deliveredArtifactId = deliveredArtifactId;
            o.deployArtifactId = deployArtifactId;
            o.imageUri = imageUri;
            o.outputArtifactName = outputArtifactName;
            o.path = path;
            o.version = version;
            return o;
        }
    }
}
