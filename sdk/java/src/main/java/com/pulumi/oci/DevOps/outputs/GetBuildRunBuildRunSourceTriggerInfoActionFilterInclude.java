// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude {
    /**
     * @return The target branch for pull requests; not applicable for push requests.
     * 
     */
    private String baseRef;
    /**
     * @return Attributes to support include/exclude files for triggering build runs.
     * 
     */
    private List<GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter> fileFilters;
    /**
     * @return Branch for push event; source branch for pull requests.
     * 
     */
    private String headRef;
    /**
     * @return The repository name for trigger events.
     * 
     */
    private String repositoryName;

    private GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude() {}
    /**
     * @return The target branch for pull requests; not applicable for push requests.
     * 
     */
    public String baseRef() {
        return this.baseRef;
    }
    /**
     * @return Attributes to support include/exclude files for triggering build runs.
     * 
     */
    public List<GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter> fileFilters() {
        return this.fileFilters;
    }
    /**
     * @return Branch for push event; source branch for pull requests.
     * 
     */
    public String headRef() {
        return this.headRef;
    }
    /**
     * @return The repository name for trigger events.
     * 
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String baseRef;
        private List<GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter> fileFilters;
        private String headRef;
        private String repositoryName;
        public Builder() {}
        public Builder(GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseRef = defaults.baseRef;
    	      this.fileFilters = defaults.fileFilters;
    	      this.headRef = defaults.headRef;
    	      this.repositoryName = defaults.repositoryName;
        }

        @CustomType.Setter
        public Builder baseRef(String baseRef) {
            if (baseRef == null) {
              throw new MissingRequiredPropertyException("GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude", "baseRef");
            }
            this.baseRef = baseRef;
            return this;
        }
        @CustomType.Setter
        public Builder fileFilters(List<GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter> fileFilters) {
            if (fileFilters == null) {
              throw new MissingRequiredPropertyException("GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude", "fileFilters");
            }
            this.fileFilters = fileFilters;
            return this;
        }
        public Builder fileFilters(GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter... fileFilters) {
            return fileFilters(List.of(fileFilters));
        }
        @CustomType.Setter
        public Builder headRef(String headRef) {
            if (headRef == null) {
              throw new MissingRequiredPropertyException("GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude", "headRef");
            }
            this.headRef = headRef;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryName(String repositoryName) {
            if (repositoryName == null) {
              throw new MissingRequiredPropertyException("GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude", "repositoryName");
            }
            this.repositoryName = repositoryName;
            return this;
        }
        public GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude build() {
            final var _resultValue = new GetBuildRunBuildRunSourceTriggerInfoActionFilterInclude();
            _resultValue.baseRef = baseRef;
            _resultValue.fileFilters = fileFilters;
            _resultValue.headRef = headRef;
            _resultValue.repositoryName = repositoryName;
            return _resultValue;
        }
    }
}
