// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.DevOps.outputs.GetConnectionsConnectionCollectionItemLastConnectionValidationResult;
import com.pulumi.oci.DevOps.outputs.GetConnectionsConnectionCollectionItemTlsVerifyConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionsConnectionCollectionItem {
    /**
     * @return The OCID of personal access token saved in secret store.
     * 
     */
    private String accessToken;
    /**
     * @return OCID of personal Bitbucket Cloud AppPassword saved in secret store
     * 
     */
    private String appPassword;
    /**
     * @return The Base URL of the hosted BitbucketServer/Visual Builder Studio server.
     * 
     */
    private String baseUrl;
    /**
     * @return The OCID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return A filter to return only resources that match the given connection type.
     * 
     */
    private String connectionType;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Optional description about the connection.
     * 
     */
    private String description;
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return Unique identifier or OCID for listing a single resource by ID.
     * 
     */
    private String id;
    /**
     * @return The result of validating the credentials of a connection.
     * 
     */
    private List<GetConnectionsConnectionCollectionItemLastConnectionValidationResult> lastConnectionValidationResults;
    /**
     * @return unique project identifier
     * 
     */
    private String projectId;
    /**
     * @return A filter to return only connections that matches the given lifecycle state.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The time the connection was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The time the connection was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    private String timeUpdated;
    /**
     * @return TLS configuration used by build service to verify TLS connection.
     * 
     */
    private List<GetConnectionsConnectionCollectionItemTlsVerifyConfig> tlsVerifyConfigs;
    /**
     * @return Public Bitbucket Cloud Username in plain text
     * 
     */
    private String username;

    private GetConnectionsConnectionCollectionItem() {}
    /**
     * @return The OCID of personal access token saved in secret store.
     * 
     */
    public String accessToken() {
        return this.accessToken;
    }
    /**
     * @return OCID of personal Bitbucket Cloud AppPassword saved in secret store
     * 
     */
    public String appPassword() {
        return this.appPassword;
    }
    /**
     * @return The Base URL of the hosted BitbucketServer/Visual Builder Studio server.
     * 
     */
    public String baseUrl() {
        return this.baseUrl;
    }
    /**
     * @return The OCID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return A filter to return only resources that match the given connection type.
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Optional description about the connection.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A filter to return only resources that match the entire display name given.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier or OCID for listing a single resource by ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The result of validating the credentials of a connection.
     * 
     */
    public List<GetConnectionsConnectionCollectionItemLastConnectionValidationResult> lastConnectionValidationResults() {
        return this.lastConnectionValidationResults;
    }
    /**
     * @return unique project identifier
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return A filter to return only connections that matches the given lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the connection was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the connection was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return TLS configuration used by build service to verify TLS connection.
     * 
     */
    public List<GetConnectionsConnectionCollectionItemTlsVerifyConfig> tlsVerifyConfigs() {
        return this.tlsVerifyConfigs;
    }
    /**
     * @return Public Bitbucket Cloud Username in plain text
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsConnectionCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessToken;
        private String appPassword;
        private String baseUrl;
        private String compartmentId;
        private String connectionType;
        private Map<String,String> definedTags;
        private String description;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetConnectionsConnectionCollectionItemLastConnectionValidationResult> lastConnectionValidationResults;
        private String projectId;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private List<GetConnectionsConnectionCollectionItemTlsVerifyConfig> tlsVerifyConfigs;
        private String username;
        public Builder() {}
        public Builder(GetConnectionsConnectionCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.appPassword = defaults.appPassword;
    	      this.baseUrl = defaults.baseUrl;
    	      this.compartmentId = defaults.compartmentId;
    	      this.connectionType = defaults.connectionType;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.lastConnectionValidationResults = defaults.lastConnectionValidationResults;
    	      this.projectId = defaults.projectId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.tlsVerifyConfigs = defaults.tlsVerifyConfigs;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder accessToken(String accessToken) {
            if (accessToken == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "accessToken");
            }
            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder appPassword(String appPassword) {
            if (appPassword == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "appPassword");
            }
            this.appPassword = appPassword;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(String baseUrl) {
            if (baseUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "baseUrl");
            }
            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            if (connectionType == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "connectionType");
            }
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastConnectionValidationResults(List<GetConnectionsConnectionCollectionItemLastConnectionValidationResult> lastConnectionValidationResults) {
            if (lastConnectionValidationResults == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "lastConnectionValidationResults");
            }
            this.lastConnectionValidationResults = lastConnectionValidationResults;
            return this;
        }
        public Builder lastConnectionValidationResults(GetConnectionsConnectionCollectionItemLastConnectionValidationResult... lastConnectionValidationResults) {
            return lastConnectionValidationResults(List.of(lastConnectionValidationResults));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder tlsVerifyConfigs(List<GetConnectionsConnectionCollectionItemTlsVerifyConfig> tlsVerifyConfigs) {
            if (tlsVerifyConfigs == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "tlsVerifyConfigs");
            }
            this.tlsVerifyConfigs = tlsVerifyConfigs;
            return this;
        }
        public Builder tlsVerifyConfigs(GetConnectionsConnectionCollectionItemTlsVerifyConfig... tlsVerifyConfigs) {
            return tlsVerifyConfigs(List.of(tlsVerifyConfigs));
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetConnectionsConnectionCollectionItem", "username");
            }
            this.username = username;
            return this;
        }
        public GetConnectionsConnectionCollectionItem build() {
            final var _resultValue = new GetConnectionsConnectionCollectionItem();
            _resultValue.accessToken = accessToken;
            _resultValue.appPassword = appPassword;
            _resultValue.baseUrl = baseUrl;
            _resultValue.compartmentId = compartmentId;
            _resultValue.connectionType = connectionType;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.lastConnectionValidationResults = lastConnectionValidationResults;
            _resultValue.projectId = projectId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.tlsVerifyConfigs = tlsVerifyConfigs;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
