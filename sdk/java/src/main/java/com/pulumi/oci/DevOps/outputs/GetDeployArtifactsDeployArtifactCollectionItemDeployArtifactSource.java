// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.DevOps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.DevOps.outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource {
    /**
     * @return Specifies content for the inline artifact.
     * 
     */
    private @Nullable String base64encodedContent;
    /**
     * @return The URL of an OCIR repository.
     * 
     */
    private @Nullable String chartUrl;
    /**
     * @return Specifies the artifact path in the repository.
     * 
     */
    private @Nullable String deployArtifactPath;
    /**
     * @return Specifies types of artifact sources.
     * 
     */
    private @Nullable String deployArtifactSourceType;
    /**
     * @return Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    private @Nullable String deployArtifactVersion;
    /**
     * @return The source of the verification material.
     * 
     */
    private @Nullable List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources;
    /**
     * @return Specifies image digest for the version of the image.
     * 
     */
    private @Nullable String imageDigest;
    /**
     * @return Specifies OCIR Image Path - optionally include tag.
     * 
     */
    private @Nullable String imageUri;
    /**
     * @return The OCID of a repository
     * 
     */
    private @Nullable String repositoryId;

    private GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource() {}
    /**
     * @return Specifies content for the inline artifact.
     * 
     */
    public Optional<String> base64encodedContent() {
        return Optional.ofNullable(this.base64encodedContent);
    }
    /**
     * @return The URL of an OCIR repository.
     * 
     */
    public Optional<String> chartUrl() {
        return Optional.ofNullable(this.chartUrl);
    }
    /**
     * @return Specifies the artifact path in the repository.
     * 
     */
    public Optional<String> deployArtifactPath() {
        return Optional.ofNullable(this.deployArtifactPath);
    }
    /**
     * @return Specifies types of artifact sources.
     * 
     */
    public Optional<String> deployArtifactSourceType() {
        return Optional.ofNullable(this.deployArtifactSourceType);
    }
    /**
     * @return Users can set this as a placeholder value that refers to a pipeline parameter, for example, ${appVersion}.
     * 
     */
    public Optional<String> deployArtifactVersion() {
        return Optional.ofNullable(this.deployArtifactVersion);
    }
    /**
     * @return The source of the verification material.
     * 
     */
    public List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources() {
        return this.helmVerificationKeySources == null ? List.of() : this.helmVerificationKeySources;
    }
    /**
     * @return Specifies image digest for the version of the image.
     * 
     */
    public Optional<String> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }
    /**
     * @return Specifies OCIR Image Path - optionally include tag.
     * 
     */
    public Optional<String> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }
    /**
     * @return The OCID of a repository
     * 
     */
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String base64encodedContent;
        private @Nullable String chartUrl;
        private @Nullable String deployArtifactPath;
        private @Nullable String deployArtifactSourceType;
        private @Nullable String deployArtifactVersion;
        private @Nullable List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources;
        private @Nullable String imageDigest;
        private @Nullable String imageUri;
        private @Nullable String repositoryId;
        public Builder() {}
        public Builder(GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64encodedContent = defaults.base64encodedContent;
    	      this.chartUrl = defaults.chartUrl;
    	      this.deployArtifactPath = defaults.deployArtifactPath;
    	      this.deployArtifactSourceType = defaults.deployArtifactSourceType;
    	      this.deployArtifactVersion = defaults.deployArtifactVersion;
    	      this.helmVerificationKeySources = defaults.helmVerificationKeySources;
    	      this.imageDigest = defaults.imageDigest;
    	      this.imageUri = defaults.imageUri;
    	      this.repositoryId = defaults.repositoryId;
        }

        @CustomType.Setter
        public Builder base64encodedContent(@Nullable String base64encodedContent) {
            this.base64encodedContent = base64encodedContent;
            return this;
        }
        @CustomType.Setter
        public Builder chartUrl(@Nullable String chartUrl) {
            this.chartUrl = chartUrl;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactPath(@Nullable String deployArtifactPath) {
            this.deployArtifactPath = deployArtifactPath;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactSourceType(@Nullable String deployArtifactSourceType) {
            this.deployArtifactSourceType = deployArtifactSourceType;
            return this;
        }
        @CustomType.Setter
        public Builder deployArtifactVersion(@Nullable String deployArtifactVersion) {
            this.deployArtifactVersion = deployArtifactVersion;
            return this;
        }
        @CustomType.Setter
        public Builder helmVerificationKeySources(@Nullable List<GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource> helmVerificationKeySources) {
            this.helmVerificationKeySources = helmVerificationKeySources;
            return this;
        }
        public Builder helmVerificationKeySources(GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource... helmVerificationKeySources) {
            return helmVerificationKeySources(List.of(helmVerificationKeySources));
        }
        @CustomType.Setter
        public Builder imageDigest(@Nullable String imageDigest) {
            this.imageDigest = imageDigest;
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(@Nullable String imageUri) {
            this.imageUri = imageUri;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }
        public GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource build() {
            final var o = new GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource();
            o.base64encodedContent = base64encodedContent;
            o.chartUrl = chartUrl;
            o.deployArtifactPath = deployArtifactPath;
            o.deployArtifactSourceType = deployArtifactSourceType;
            o.deployArtifactVersion = deployArtifactVersion;
            o.helmVerificationKeySources = helmVerificationKeySources;
            o.imageDigest = imageDigest;
            o.imageUri = imageUri;
            o.repositoryId = repositoryId;
            return o;
        }
    }
}
